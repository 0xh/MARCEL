

var Module;

if (typeof Module === 'undefined') Module = eval('(function() { try { return Module || {} } catch(e) { return {} } })()');

if (!Module.expectedDataFileDownloads) {
  Module.expectedDataFileDownloads = 0;
  Module.finishedDataFileDownloads = 0;
}
Module.expectedDataFileDownloads++;
(function() {
 var loadPackage = function(metadata) {

    var PACKAGE_PATH;
    if (typeof window === 'object') {
      PACKAGE_PATH = window['encodeURIComponent'](window.location.pathname.toString().substring(0, window.location.pathname.toString().lastIndexOf('/')) + '/');
    } else if (typeof location !== 'undefined') {
      // worker
      PACKAGE_PATH = encodeURIComponent(location.pathname.toString().substring(0, location.pathname.toString().lastIndexOf('/')) + '/');
    } else {
      throw 'using preloaded data can only be done on a web page or in a web worker';
    }
    var PACKAGE_NAME = 'src/assets/espeak.worker.data';
    var REMOTE_PACKAGE_BASE = '../../src/assets/espeak.worker.data';
    if (typeof Module['locateFilePackage'] === 'function' && !Module['locateFile']) {
      Module['locateFile'] = Module['locateFilePackage'];
      Module.printErr('warning: you defined Module.locateFilePackage, that has been renamed to Module.locateFile (using your locateFilePackage for now)');
    }
    var REMOTE_PACKAGE_NAME = typeof Module['locateFile'] === 'function' ?
                              Module['locateFile'](REMOTE_PACKAGE_BASE) :
                              ((Module['filePackagePrefixURL'] || '') + REMOTE_PACKAGE_BASE);

    var REMOTE_PACKAGE_SIZE = metadata.remote_package_size;
    var PACKAGE_UUID = metadata.package_uuid;

    function fetchRemotePackage(packageName, packageSize, callback, errback) {
      var xhr = new XMLHttpRequest();
      xhr.open('GET', packageName, true);
      xhr.responseType = 'arraybuffer';
      xhr.onprogress = function(event) {
        var url = packageName;
        var size = packageSize;
        if (event.total) size = event.total;
        if (event.loaded) {
          if (!xhr.addedTotal) {
            xhr.addedTotal = true;
            if (!Module.dataFileDownloads) Module.dataFileDownloads = {};
            Module.dataFileDownloads[url] = {
              loaded: event.loaded,
              total: size
            };
          } else {
            Module.dataFileDownloads[url].loaded = event.loaded;
          }
          var total = 0;
          var loaded = 0;
          var num = 0;
          for (var download in Module.dataFileDownloads) {
          var data = Module.dataFileDownloads[download];
            total += data.total;
            loaded += data.loaded;
            num++;
          }
          total = Math.ceil(total * Module.expectedDataFileDownloads/num);
          if (Module['setStatus']) Module['setStatus']('Downloading data... (' + loaded + '/' + total + ')');
        } else if (!Module.dataFileDownloads) {
          if (Module['setStatus']) Module['setStatus']('Downloading data...');
        }
      };
      xhr.onerror = function(event) {
        throw new Error("NetworkError for: " + packageName);
      }
      xhr.onload = function(event) {
        if (xhr.status == 200 || xhr.status == 304 || xhr.status == 206 || (xhr.status == 0 && xhr.response)) { // file URLs can return 0
          var packageData = xhr.response;
          callback(packageData);
        } else {
          throw new Error(xhr.statusText + " : " + xhr.responseURL);
        }
      };
      xhr.send(null);
    };

    function handleError(error) {
      console.error('package error:', error);
    };

      var fetched = null, fetchedCallback = null;
      fetchRemotePackage(REMOTE_PACKAGE_NAME, REMOTE_PACKAGE_SIZE, function(data) {
        if (fetchedCallback) {
          fetchedCallback(data);
          fetchedCallback = null;
        } else {
          fetched = data;
        }
      }, handleError);

  function runWithFS() {

    function assert(check, msg) {
      if (!check) throw msg + new Error().stack;
    }
Module['FS_createPath']('/', 'espeak-data', true, true);
Module['FS_createPath']('/espeak-data', 'voices', true, true);
Module['FS_createPath']('/espeak-data/voices', '!v', true, true);
Module['FS_createPath']('/espeak-data/voices', 'asia', true, true);
Module['FS_createPath']('/espeak-data/voices', 'europe', true, true);
Module['FS_createPath']('/espeak-data/voices', 'other', true, true);

    function DataRequest(start, end, crunched, audio) {
      this.start = start;
      this.end = end;
      this.crunched = crunched;
      this.audio = audio;
    }
    DataRequest.prototype = {
      requests: {},
      open: function(mode, name) {
        this.name = name;
        this.requests[name] = this;
        Module['addRunDependency']('fp ' + this.name);
      },
      send: function() {},
      onload: function() {
        var byteArray = this.byteArray.subarray(this.start, this.end);

          this.finish(byteArray);

      },
      finish: function(byteArray) {
        var that = this;

        Module['FS_createDataFile'](this.name, null, byteArray, true, true, true); // canOwn this data in the filesystem, it is a slide into the heap that will never change
        Module['removeRunDependency']('fp ' + that.name);

        this.requests[this.name] = null;
      }
    };

        var files = metadata.files;
        for (i = 0; i < files.length; ++i) {
          new DataRequest(files[i].start, files[i].end, files[i].crunched, files[i].audio).open('GET', files[i].filename);
        }


    function processPackageData(arrayBuffer) {
      Module.finishedDataFileDownloads++;
      assert(arrayBuffer, 'Loading data file failed.');
      assert(arrayBuffer instanceof ArrayBuffer, 'bad input to processPackageData');
      var byteArray = new Uint8Array(arrayBuffer);
      var curr;

        // copy the entire loaded file into a spot in the heap. Files will refer to slices in that. They cannot be freed though
        // (we may be allocating before malloc is ready, during startup).
        if (Module['SPLIT_MEMORY']) Module.printErr('warning: you should run the file packager with --no-heap-copy when SPLIT_MEMORY is used, otherwise copying into the heap may fail due to the splitting');
        var ptr = Module['getMemory'](byteArray.length);
        Module['HEAPU8'].set(byteArray, ptr);
        DataRequest.prototype.byteArray = Module['HEAPU8'].subarray(ptr, ptr+byteArray.length);

          var files = metadata.files;
          for (i = 0; i < files.length; ++i) {
            DataRequest.prototype.requests[files[i].filename].onload();
          }
              Module['removeRunDependency']('datafile_js/espeak.worker.data');

    };
    Module['addRunDependency']('datafile_js/espeak.worker.data');

    if (!Module.preloadResults) Module.preloadResults = {};

      Module.preloadResults[PACKAGE_NAME] = {fromCache: false};
      if (fetched) {
        processPackageData(fetched);
        fetched = null;
      } else {
        fetchedCallback = processPackageData;
      }

  }
  if (Module['calledRun']) {
    runWithFS();
  } else {
    if (!Module['preRun']) Module['preRun'] = [];
    Module["preRun"].push(runWithFS); // FS is not initialized yet, wait for it
  }

 }
 loadPackage({"files": [{"audio": 0, "start": 0, "crunched": 0, "end": 6290, "filename": "/espeak-data/es_dict"}, {"audio": 0, "start": 6290, "crunched": 0, "end": 92570, "filename": "/espeak-data/it_dict"}, {"audio": 0, "start": 92570, "crunched": 0, "end": 174942, "filename": "/espeak-data/af_dict"}, {"audio": 0, "start": 174942, "crunched": 0, "end": 184618, "filename": "/espeak-data/sv_dict"}, {"audio": 0, "start": 184618, "crunched": 0, "end": 188435, "filename": "/espeak-data/la_dict"}, {"audio": 0, "start": 188435, "crunched": 0, "end": 193112, "filename": "/espeak-data/eo_dict"}, {"audio": 0, "start": 193112, "crunched": 0, "end": 202273, "filename": "/espeak-data/sk_dict"}, {"audio": 0, "start": 202273, "crunched": 0, "end": 205411, "filename": "/espeak-data/ka_dict"}, {"audio": 0, "start": 205411, "crunched": 0, "end": 211628, "filename": "/espeak-data/ru_dict"}, {"audio": 0, "start": 211628, "crunched": 0, "end": 219349, "filename": "/espeak-data/hbs_dict"}, {"audio": 0, "start": 219349, "crunched": 0, "end": 225695, "filename": "/espeak-data/pa_dict"}, {"audio": 0, "start": 225695, "crunched": 0, "end": 233133, "filename": "/espeak-data/vi_dict"}, {"audio": 0, "start": 233133, "crunched": 0, "end": 640581, "filename": "/espeak-data/phondata"}, {"audio": 0, "start": 640581, "crunched": 0, "end": 645752, "filename": "/espeak-data/lt_dict"}, {"audio": 0, "start": 645752, "crunched": 0, "end": 672279, "filename": "/espeak-data/pt_dict"}, {"audio": 0, "start": 672279, "crunched": 0, "end": 711531, "filename": "/espeak-data/phontab"}, {"audio": 0, "start": 711531, "crunched": 0, "end": 715724, "filename": "/espeak-data/eu_dict"}, {"audio": 0, "start": 715724, "crunched": 0, "end": 728017, "filename": "/espeak-data/lv_dict"}, {"audio": 0, "start": 728017, "crunched": 0, "end": 736934, "filename": "/espeak-data/ga_dict"}, {"audio": 0, "start": 736934, "crunched": 0, "end": 742334, "filename": "/espeak-data/is_dict"}, {"audio": 0, "start": 742334, "crunched": 0, "end": 747279, "filename": "/espeak-data/mk_dict"}, {"audio": 0, "start": 747279, "crunched": 0, "end": 750746, "filename": "/espeak-data/cy_dict"}, {"audio": 0, "start": 750746, "crunched": 0, "end": 761563, "filename": "/espeak-data/ne_dict"}, {"audio": 0, "start": 761563, "crunched": 0, "end": 766683, "filename": "/espeak-data/fi_dict"}, {"audio": 0, "start": 766683, "crunched": 0, "end": 772007, "filename": "/espeak-data/gu_dict"}, {"audio": 0, "start": 772007, "crunched": 0, "end": 778774, "filename": "/espeak-data/et_dict"}, {"audio": 0, "start": 778774, "crunched": 0, "end": 784289, "filename": "/espeak-data/kn_dict"}, {"audio": 0, "start": 784289, "crunched": 0, "end": 790341, "filename": "/espeak-data/tr_dict"}, {"audio": 0, "start": 790341, "crunched": 0, "end": 791897, "filename": "/espeak-data/zhy_dict"}, {"audio": 0, "start": 791897, "crunched": 0, "end": 793954, "filename": "/espeak-data/jbo_dict"}, {"audio": 0, "start": 793954, "crunched": 0, "end": 798132, "filename": "/espeak-data/no_dict"}, {"audio": 0, "start": 798132, "crunched": 0, "end": 804594, "filename": "/espeak-data/ko_dict"}, {"audio": 0, "start": 804594, "crunched": 0, "end": 917934, "filename": "/espeak-data/hu_dict"}, {"audio": 0, "start": 917934, "crunched": 0, "end": 943139, "filename": "/espeak-data/ro_dict"}, {"audio": 0, "start": 943139, "crunched": 0, "end": 949835, "filename": "/espeak-data/an_dict"}, {"audio": 0, "start": 949835, "crunched": 0, "end": 952864, "filename": "/espeak-data/sw_dict"}, {"audio": 0, "start": 952864, "crunched": 0, "end": 955132, "filename": "/espeak-data/ku_dict"}, {"audio": 0, "start": 955132, "crunched": 0, "end": 958532, "filename": "/espeak-data/hy_dict"}, {"audio": 0, "start": 958532, "crunched": 0, "end": 979954, "filename": "/espeak-data/fr_dict"}, {"audio": 0, "start": 979954, "crunched": 0, "end": 983510, "filename": "/espeak-data/te_dict"}, {"audio": 0, "start": 983510, "crunched": 0, "end": 987663, "filename": "/espeak-data/ca_dict"}, {"audio": 0, "start": 987663, "crunched": 0, "end": 999911, "filename": "/espeak-data/ms_dict"}, {"audio": 0, "start": 999911, "crunched": 0, "end": 1027108, "filename": "/espeak-data/nl_dict"}, {"audio": 0, "start": 1027108, "crunched": 0, "end": 1068935, "filename": "/espeak-data/zh_dict"}, {"audio": 0, "start": 1068935, "crunched": 0, "end": 1090756, "filename": "/espeak-data/de_dict"}, {"audio": 0, "start": 1090756, "crunched": 0, "end": 1217677, "filename": "/espeak-data/en_dict"}, {"audio": 0, "start": 1217677, "crunched": 0, "end": 1221106, "filename": "/espeak-data/grc_dict"}, {"audio": 0, "start": 1221106, "crunched": 0, "end": 1230880, "filename": "/espeak-data/bn_dict"}, {"audio": 0, "start": 1230880, "crunched": 0, "end": 1257886, "filename": "/espeak-data/bg_dict"}, {"audio": 0, "start": 1257886, "crunched": 0, "end": 1259110, "filename": "/espeak-data/intonations"}, {"audio": 0, "start": 1259110, "crunched": 0, "end": 1263269, "filename": "/espeak-data/ml_dict"}, {"audio": 0, "start": 1263269, "crunched": 0, "end": 1266468, "filename": "/espeak-data/sq_dict"}, {"audio": 0, "start": 1266468, "crunched": 0, "end": 1274903, "filename": "/espeak-data/el_dict"}, {"audio": 0, "start": 1274903, "crunched": 0, "end": 1392373, "filename": "/espeak-data/ta_dict"}, {"audio": 0, "start": 1392373, "crunched": 0, "end": 1427297, "filename": "/espeak-data/pl_dict"}, {"audio": 0, "start": 1427297, "crunched": 0, "end": 1635794, "filename": "/espeak-data/da_dict"}, {"audio": 0, "start": 1635794, "crunched": 0, "end": 1638876, "filename": "/espeak-data/id_dict"}, {"audio": 0, "start": 1638876, "crunched": 0, "end": 1647882, "filename": "/espeak-data/hi_dict"}, {"audio": 0, "start": 1647882, "crunched": 0, "end": 1672844, "filename": "/espeak-data/phonindex"}, {"audio": 0, "start": 1672844, "crunched": 0, "end": 1905865, "filename": "/espeak-data/fa_dict"}, {"audio": 0, "start": 1905865, "crunched": 0, "end": 1913430, "filename": "/espeak-data/cs_dict"}, {"audio": 0, "start": 1913430, "crunched": 0, "end": 1913694, "filename": "/espeak-data/voices/en-us"}, {"audio": 0, "start": 1913694, "crunched": 0, "end": 1913732, "filename": "/espeak-data/voices/default"}, {"audio": 0, "start": 1913732, "crunched": 0, "end": 1913770, "filename": "/espeak-data/voices/de"}, {"audio": 0, "start": 1913770, "crunched": 0, "end": 1913951, "filename": "/espeak-data/voices/es-la"}, {"audio": 0, "start": 1913951, "crunched": 0, "end": 1914061, "filename": "/espeak-data/voices/en"}, {"audio": 0, "start": 1914061, "crunched": 0, "end": 1914167, "filename": "/espeak-data/voices/pt"}, {"audio": 0, "start": 1914167, "crunched": 0, "end": 1914249, "filename": "/espeak-data/voices/fr"}, {"audio": 0, "start": 1914249, "crunched": 0, "end": 1914511, "filename": "/espeak-data/voices/!v/m5"}, {"audio": 0, "start": 1914511, "crunched": 0, "end": 1914811, "filename": "/espeak-data/voices/!v/m3"}, {"audio": 0, "start": 1914811, "crunched": 0, "end": 1914849, "filename": "/espeak-data/voices/!v/klatt"}, {"audio": 0, "start": 1914849, "crunched": 0, "end": 1915113, "filename": "/espeak-data/voices/!v/m2"}, {"audio": 0, "start": 1915113, "crunched": 0, "end": 1915448, "filename": "/espeak-data/voices/!v/m1"}, {"audio": 0, "start": 1915448, "crunched": 0, "end": 1915805, "filename": "/espeak-data/voices/!v/f2"}, {"audio": 0, "start": 1915805, "crunched": 0, "end": 1915991, "filename": "/espeak-data/voices/!v/whisper"}, {"audio": 0, "start": 1915991, "crunched": 0, "end": 1916315, "filename": "/espeak-data/voices/!v/f1"}, {"audio": 0, "start": 1916315, "crunched": 0, "end": 1916707, "filename": "/espeak-data/voices/!v/whisperf"}, {"audio": 0, "start": 1916707, "crunched": 0, "end": 1916746, "filename": "/espeak-data/voices/!v/klatt4"}, {"audio": 0, "start": 1916746, "crunched": 0, "end": 1917171, "filename": "/espeak-data/voices/!v/f5"}, {"audio": 0, "start": 1917171, "crunched": 0, "end": 1917264, "filename": "/espeak-data/voices/!v/croak"}, {"audio": 0, "start": 1917264, "crunched": 0, "end": 1917639, "filename": "/espeak-data/voices/!v/f3"}, {"audio": 0, "start": 1917639, "crunched": 0, "end": 1917929, "filename": "/espeak-data/voices/!v/m4"}, {"audio": 0, "start": 1917929, "crunched": 0, "end": 1917968, "filename": "/espeak-data/voices/!v/klatt3"}, {"audio": 0, "start": 1917968, "crunched": 0, "end": 1918222, "filename": "/espeak-data/voices/!v/m7"}, {"audio": 0, "start": 1918222, "crunched": 0, "end": 1918572, "filename": "/espeak-data/voices/!v/f4"}, {"audio": 0, "start": 1918572, "crunched": 0, "end": 1918760, "filename": "/espeak-data/voices/!v/m6"}, {"audio": 0, "start": 1918760, "crunched": 0, "end": 1918798, "filename": "/espeak-data/voices/!v/klatt2"}, {"audio": 0, "start": 1918798, "crunched": 0, "end": 1918853, "filename": "/espeak-data/voices/asia/kn"}, {"audio": 0, "start": 1918853, "crunched": 0, "end": 1919054, "filename": "/espeak-data/voices/asia/fa-pin"}, {"audio": 0, "start": 1919054, "crunched": 0, "end": 1919264, "filename": "/espeak-data/voices/asia/zh-yue"}, {"audio": 0, "start": 1919264, "crunched": 0, "end": 1919323, "filename": "/espeak-data/voices/asia/vi"}, {"audio": 0, "start": 1919323, "crunched": 0, "end": 1919469, "filename": "/espeak-data/voices/asia/id"}, {"audio": 0, "start": 1919469, "crunched": 0, "end": 1919494, "filename": "/espeak-data/voices/asia/pa"}, {"audio": 0, "start": 1919494, "crunched": 0, "end": 1919819, "filename": "/espeak-data/voices/asia/hy-west"}, {"audio": 0, "start": 1919819, "crunched": 0, "end": 1919857, "filename": "/espeak-data/voices/asia/tr"}, {"audio": 0, "start": 1919857, "crunched": 0, "end": 1919909, "filename": "/espeak-data/voices/asia/ku"}, {"audio": 0, "start": 1919909, "crunched": 0, "end": 1919946, "filename": "/espeak-data/voices/asia/bn"}, {"audio": 0, "start": 1919946, "crunched": 0, "end": 1920009, "filename": "/espeak-data/voices/asia/ta"}, {"audio": 0, "start": 1920009, "crunched": 0, "end": 1920044, "filename": "/espeak-data/voices/asia/hi"}, {"audio": 0, "start": 1920044, "crunched": 0, "end": 1920107, "filename": "/espeak-data/voices/asia/ko"}, {"audio": 0, "start": 1920107, "crunched": 0, "end": 1920156, "filename": "/espeak-data/voices/asia/ne"}, {"audio": 0, "start": 1920156, "crunched": 0, "end": 1920382, "filename": "/espeak-data/voices/asia/fa-en-us"}, {"audio": 0, "start": 1920382, "crunched": 0, "end": 1920679, "filename": "/espeak-data/voices/asia/fa"}, {"audio": 0, "start": 1920679, "crunched": 0, "end": 1920881, "filename": "/espeak-data/voices/asia/vi-hue"}, {"audio": 0, "start": 1920881, "crunched": 0, "end": 1921083, "filename": "/espeak-data/voices/asia/vi-sgn"}, {"audio": 0, "start": 1921083, "crunched": 0, "end": 1921109, "filename": "/espeak-data/voices/asia/ka"}, {"audio": 0, "start": 1921109, "crunched": 0, "end": 1921178, "filename": "/espeak-data/voices/asia/ml"}, {"audio": 0, "start": 1921178, "crunched": 0, "end": 1921237, "filename": "/espeak-data/voices/asia/te"}, {"audio": 0, "start": 1921237, "crunched": 0, "end": 1921848, "filename": "/espeak-data/voices/asia/zh"}, {"audio": 0, "start": 1921848, "crunched": 0, "end": 1921880, "filename": "/espeak-data/voices/asia/gu"}, {"audio": 0, "start": 1921880, "crunched": 0, "end": 1922337, "filename": "/espeak-data/voices/asia/ms"}, {"audio": 0, "start": 1922337, "crunched": 0, "end": 1922375, "filename": "/espeak-data/voices/asia/hy"}, {"audio": 0, "start": 1922375, "crunched": 0, "end": 1922490, "filename": "/espeak-data/voices/europe/sq"}, {"audio": 0, "start": 1922490, "crunched": 0, "end": 1922531, "filename": "/espeak-data/voices/europe/mk"}, {"audio": 0, "start": 1922531, "crunched": 0, "end": 1922605, "filename": "/espeak-data/voices/europe/it"}, {"audio": 0, "start": 1922605, "crunched": 0, "end": 1922862, "filename": "/espeak-data/voices/europe/bs"}, {"audio": 0, "start": 1922862, "crunched": 0, "end": 1922899, "filename": "/espeak-data/voices/europe/el"}, {"audio": 0, "start": 1922899, "crunched": 0, "end": 1922964, "filename": "/espeak-data/voices/europe/no"}, {"audio": 0, "start": 1922964, "crunched": 0, "end": 1923004, "filename": "/espeak-data/voices/europe/ro"}, {"audio": 0, "start": 1923004, "crunched": 0, "end": 1923042, "filename": "/espeak-data/voices/europe/fi"}, {"audio": 0, "start": 1923042, "crunched": 0, "end": 1923115, "filename": "/espeak-data/voices/europe/hu"}, {"audio": 0, "start": 1923115, "crunched": 0, "end": 1923209, "filename": "/espeak-data/voices/europe/fr-be"}, {"audio": 0, "start": 1923209, "crunched": 0, "end": 1923274, "filename": "/espeak-data/voices/europe/ga"}, {"audio": 0, "start": 1923274, "crunched": 0, "end": 1923310, "filename": "/espeak-data/voices/europe/cs"}, {"audio": 0, "start": 1923310, "crunched": 0, "end": 1923340, "filename": "/espeak-data/voices/europe/eu"}, {"audio": 0, "start": 1923340, "crunched": 0, "end": 1923436, "filename": "/espeak-data/voices/europe/pt-pt"}, {"audio": 0, "start": 1923436, "crunched": 0, "end": 1923475, "filename": "/espeak-data/voices/europe/an"}, {"audio": 0, "start": 1923475, "crunched": 0, "end": 1923517, "filename": "/espeak-data/voices/europe/lt"}, {"audio": 0, "start": 1923517, "crunched": 0, "end": 1923794, "filename": "/espeak-data/voices/europe/sr"}, {"audio": 0, "start": 1923794, "crunched": 0, "end": 1923865, "filename": "/espeak-data/voices/europe/ru"}, {"audio": 0, "start": 1923865, "crunched": 0, "end": 1923905, "filename": "/espeak-data/voices/europe/is"}, {"audio": 0, "start": 1923905, "crunched": 0, "end": 1923971, "filename": "/espeak-data/voices/europe/es"}, {"audio": 0, "start": 1923971, "crunched": 0, "end": 1924028, "filename": "/espeak-data/voices/europe/da"}, {"audio": 0, "start": 1924028, "crunched": 0, "end": 1924063, "filename": "/espeak-data/voices/europe/nl"}, {"audio": 0, "start": 1924063, "crunched": 0, "end": 1924173, "filename": "/espeak-data/voices/europe/bg"}, {"audio": 0, "start": 1924173, "crunched": 0, "end": 1924223, "filename": "/espeak-data/voices/europe/pl"}, {"audio": 0, "start": 1924223, "crunched": 0, "end": 1924250, "filename": "/espeak-data/voices/europe/et"}, {"audio": 0, "start": 1924250, "crunched": 0, "end": 1924307, "filename": "/espeak-data/voices/europe/lv"}, {"audio": 0, "start": 1924307, "crunched": 0, "end": 1924344, "filename": "/espeak-data/voices/europe/sk"}, {"audio": 0, "start": 1924344, "crunched": 0, "end": 1924382, "filename": "/espeak-data/voices/europe/sv"}, {"audio": 0, "start": 1924382, "crunched": 0, "end": 1924431, "filename": "/espeak-data/voices/europe/cy"}, {"audio": 0, "start": 1924431, "crunched": 0, "end": 1924469, "filename": "/espeak-data/voices/europe/ca"}, {"audio": 0, "start": 1924469, "crunched": 0, "end": 1924759, "filename": "/espeak-data/voices/europe/hr"}, {"audio": 0, "start": 1924759, "crunched": 0, "end": 1925075, "filename": "/espeak-data/voices/other/en-wi"}, {"audio": 0, "start": 1925075, "crunched": 0, "end": 1925128, "filename": "/espeak-data/voices/other/eo"}, {"audio": 0, "start": 1925128, "crunched": 0, "end": 1925238, "filename": "/espeak-data/voices/other/grc"}, {"audio": 0, "start": 1925238, "crunched": 0, "end": 1925305, "filename": "/espeak-data/voices/other/af"}, {"audio": 0, "start": 1925305, "crunched": 0, "end": 1925510, "filename": "/espeak-data/voices/other/en-wm"}, {"audio": 0, "start": 1925510, "crunched": 0, "end": 1925658, "filename": "/espeak-data/voices/other/lfn"}, {"audio": 0, "start": 1925658, "crunched": 0, "end": 1925701, "filename": "/espeak-data/voices/other/sw"}, {"audio": 0, "start": 1925701, "crunched": 0, "end": 1925951, "filename": "/espeak-data/voices/other/en-sc"}, {"audio": 0, "start": 1925951, "crunched": 0, "end": 1926020, "filename": "/espeak-data/voices/other/jbo"}, {"audio": 0, "start": 1926020, "crunched": 0, "end": 1926221, "filename": "/espeak-data/voices/other/en-n"}, {"audio": 0, "start": 1926221, "crunched": 0, "end": 1926415, "filename": "/espeak-data/voices/other/en-rp"}, {"audio": 0, "start": 1926415, "crunched": 0, "end": 1926713, "filename": "/espeak-data/voices/other/la"}], "remote_package_size": 1926713, "package_uuid": "e33fc26b-0798-44ca-b0a7-d902345d6123"});

})();

// The Module object: Our interface to the outside world. We import
// and export values on it, and do the work to get that through
// closure compiler if necessary. There are various ways Module can be used:
// 1. Not defined. We create it here
// 2. A function parameter, function(Module) { ..generated code.. }
// 3. pre-run appended it, var Module = {}; ..generated code..
// 4. External script tag defines var Module.
// We need to do an eval in order to handle the closure compiler
// case, where this code here is minified but Module was defined
// elsewhere (e.g. case 4 above). We also need to check if Module
// already exists (e.g. case 3 above).
// Note that if you want to run closure, and also to use Module
// after the generated code, you will need to define   var Module = {};
// before the code. Then that object will be used in the code, and you
// can continue to use Module afterwards as well.
var Module;
if (!Module) Module = (typeof Module !== 'undefined' ? Module : null) || {};

// Sometimes an existing Module object exists with properties
// meant to overwrite the default module functionality. Here
// we collect those properties and reapply _after_ we configure
// the current environment's defaults to avoid having to be so
// defensive during initialization.
var moduleOverrides = {};
for (var key in Module) {
  if (Module.hasOwnProperty(key)) {
    moduleOverrides[key] = Module[key];
  }
}

// The environment setup code below is customized to use Module.
// *** Environment setup code ***
var ENVIRONMENT_IS_WEB = false;
var ENVIRONMENT_IS_WORKER = false;
var ENVIRONMENT_IS_NODE = false;
var ENVIRONMENT_IS_SHELL = false;

// Three configurations we can be running in:
// 1) We could be the application main() thread running in the main JS UI thread. (ENVIRONMENT_IS_WORKER == false and ENVIRONMENT_IS_PTHREAD == false)
// 2) We could be the application main() thread proxied to worker. (with Emscripten -s PROXY_TO_WORKER=1) (ENVIRONMENT_IS_WORKER == true, ENVIRONMENT_IS_PTHREAD == false)
// 3) We could be an application pthread running in a worker. (ENVIRONMENT_IS_WORKER == true and ENVIRONMENT_IS_PTHREAD == true)

if (Module['ENVIRONMENT']) {
  if (Module['ENVIRONMENT'] === 'WEB') {
    ENVIRONMENT_IS_WEB = true;
  } else if (Module['ENVIRONMENT'] === 'WORKER') {
    ENVIRONMENT_IS_WORKER = true;
  } else if (Module['ENVIRONMENT'] === 'NODE') {
    ENVIRONMENT_IS_NODE = true;
  } else if (Module['ENVIRONMENT'] === 'SHELL') {
    ENVIRONMENT_IS_SHELL = true;
  } else {
    throw new Error('The provided Module[\'ENVIRONMENT\'] value is not valid. It must be one of: WEB|WORKER|NODE|SHELL.');
  }
} else {
  ENVIRONMENT_IS_WEB = typeof window === 'object';
  ENVIRONMENT_IS_WORKER = typeof importScripts === 'function';
  ENVIRONMENT_IS_NODE = typeof process === 'object' && typeof require === 'function' && !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_WORKER;
  ENVIRONMENT_IS_SHELL = !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_NODE && !ENVIRONMENT_IS_WORKER;
}


if (ENVIRONMENT_IS_NODE) {
  // Expose functionality in the same simple way that the shells work
  // Note that we pollute the global namespace here, otherwise we break in node
  if (!Module['print']) Module['print'] = console.log;
  if (!Module['printErr']) Module['printErr'] = console.warn;

  var nodeFS;
  var nodePath;

  Module['read'] = function read(filename, binary) {
    if (!nodeFS) nodeFS = require('fs');
    if (!nodePath) nodePath = require('path');
    filename = nodePath['normalize'](filename);
    var ret = nodeFS['readFileSync'](filename);
    return binary ? ret : ret.toString();
  };

  Module['readBinary'] = function readBinary(filename) {
    var ret = Module['read'](filename, true);
    if (!ret.buffer) {
      ret = new Uint8Array(ret);
    }
    assert(ret.buffer);
    return ret;
  };

  Module['load'] = function load(f) {
    globalEval(read(f));
  };

  if (!Module['thisProgram']) {
    if (process['argv'].length > 1) {
      Module['thisProgram'] = process['argv'][1].replace(/\\/g, '/');
    } else {
      Module['thisProgram'] = 'unknown-program';
    }
  }

  Module['arguments'] = process['argv'].slice(2);

  if (typeof module !== 'undefined') {
    module['exports'] = Module;
  }

  process['on']('uncaughtException', function(ex) {
    // suppress ExitStatus exceptions from showing an error
    if (!(ex instanceof ExitStatus)) {
      throw ex;
    }
  });

  Module['inspect'] = function () { return '[Emscripten Module object]'; };
}
else if (ENVIRONMENT_IS_SHELL) {
  if (!Module['print']) Module['print'] = print;
  if (typeof printErr != 'undefined') Module['printErr'] = printErr; // not present in v8 or older sm

  if (typeof read != 'undefined') {
    Module['read'] = read;
  } else {
    Module['read'] = function read() { throw 'no read() available' };
  }

  Module['readBinary'] = function readBinary(f) {
    if (typeof readbuffer === 'function') {
      return new Uint8Array(readbuffer(f));
    }
    var data = read(f, 'binary');
    assert(typeof data === 'object');
    return data;
  };

  if (typeof scriptArgs != 'undefined') {
    Module['arguments'] = scriptArgs;
  } else if (typeof arguments != 'undefined') {
    Module['arguments'] = arguments;
  }

}
else if (ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER) {
  Module['read'] = function read(url) {
    var xhr = new XMLHttpRequest();
    xhr.open('GET', url, false);
    xhr.send(null);
    return xhr.responseText;
  };

  Module['readAsync'] = function readAsync(url, onload, onerror) {
    var xhr = new XMLHttpRequest();
    xhr.open('GET', url, true);
    xhr.responseType = 'arraybuffer';
    xhr.onload = function xhr_onload() {
      if (xhr.status == 200 || (xhr.status == 0 && xhr.response)) { // file URLs can return 0
        onload(xhr.response);
      } else {
        onerror();
      }
    };
    xhr.onerror = onerror;
    xhr.send(null);
  };

  if (typeof arguments != 'undefined') {
    Module['arguments'] = arguments;
  }

  if (typeof console !== 'undefined') {
    if (!Module['print']) Module['print'] = function print(x) {
      console.log(x);
    };
    if (!Module['printErr']) Module['printErr'] = function printErr(x) {
      console.warn(x);
    };
  } else {
    // Probably a worker, and without console.log. We can do very little here...
    var TRY_USE_DUMP = false;
    if (!Module['print']) Module['print'] = (TRY_USE_DUMP && (typeof(dump) !== "undefined") ? (function(x) {
      dump(x);
    }) : (function(x) {
      // self.postMessage(x); // enable this if you want stdout to be sent as messages
    }));
  }

  if (ENVIRONMENT_IS_WORKER) {
    Module['load'] = importScripts;
  }

  if (typeof Module['setWindowTitle'] === 'undefined') {
    Module['setWindowTitle'] = function(title) { document.title = title };
  }
}
else {
  // Unreachable because SHELL is dependant on the others
  throw 'Unknown runtime environment. Where are we?';
}

function globalEval(x) {
  eval.call(null, x);
}
if (!Module['load'] && Module['read']) {
  Module['load'] = function load(f) {
    globalEval(Module['read'](f));
  };
}
if (!Module['print']) {
  Module['print'] = function(){};
}
if (!Module['printErr']) {
  Module['printErr'] = Module['print'];
}
if (!Module['arguments']) {
  Module['arguments'] = [];
}
if (!Module['thisProgram']) {
  Module['thisProgram'] = './this.program';
}

// *** Environment setup code ***

// Closure helpers
Module.print = Module['print'];
Module.printErr = Module['printErr'];

// Callbacks
Module['preRun'] = [];
Module['postRun'] = [];

// Merge back in the overrides
for (var key in moduleOverrides) {
  if (moduleOverrides.hasOwnProperty(key)) {
    Module[key] = moduleOverrides[key];
  }
}
// Free the object hierarchy contained in the overrides, this lets the GC
// reclaim data used e.g. in memoryInitializerRequest, which is a large typed array.
moduleOverrides = undefined;



// {{PREAMBLE_ADDITIONS}}

// === Preamble library stuff ===

// Documentation for the public APIs defined in this file must be updated in:
//    site/source/docs/api_reference/preamble.js.rst
// A prebuilt local version of the documentation is available at:
//    site/build/text/docs/api_reference/preamble.js.txt
// You can also build docs locally as HTML or other formats in site/
// An online HTML version (which may be of a different version of Emscripten)
//    is up at http://kripken.github.io/emscripten-site/docs/api_reference/preamble.js.html

//========================================
// Runtime code shared with compiler
//========================================

var Runtime = {
  setTempRet0: function (value) {
    tempRet0 = value;
    return value;
  },
  getTempRet0: function () {
    return tempRet0;
  },
  stackSave: function () {
    return STACKTOP;
  },
  stackRestore: function (stackTop) {
    STACKTOP = stackTop;
  },
  getNativeTypeSize: function (type) {
    switch (type) {
      case 'i1': case 'i8': return 1;
      case 'i16': return 2;
      case 'i32': return 4;
      case 'i64': return 8;
      case 'float': return 4;
      case 'double': return 8;
      default: {
        if (type[type.length-1] === '*') {
          return Runtime.QUANTUM_SIZE; // A pointer
        } else if (type[0] === 'i') {
          var bits = parseInt(type.substr(1));
          assert(bits % 8 === 0);
          return bits/8;
        } else {
          return 0;
        }
      }
    }
  },
  getNativeFieldSize: function (type) {
    return Math.max(Runtime.getNativeTypeSize(type), Runtime.QUANTUM_SIZE);
  },
  STACK_ALIGN: 16,
  prepVararg: function (ptr, type) {
    if (type === 'double' || type === 'i64') {
      // move so the load is aligned
      if (ptr & 7) {
        assert((ptr & 7) === 4);
        ptr += 4;
      }
    } else {
      assert((ptr & 3) === 0);
    }
    return ptr;
  },
  getAlignSize: function (type, size, vararg) {
    // we align i64s and doubles on 64-bit boundaries, unlike x86
    if (!vararg && (type == 'i64' || type == 'double')) return 8;
    if (!type) return Math.min(size, 8); // align structures internally to 64 bits
    return Math.min(size || (type ? Runtime.getNativeFieldSize(type) : 0), Runtime.QUANTUM_SIZE);
  },
  dynCall: function (sig, ptr, args) {
    if (args && args.length) {
      assert(args.length == sig.length-1);
      assert(('dynCall_' + sig) in Module, 'bad function pointer type - no table for sig \'' + sig + '\'');
      return Module['dynCall_' + sig].apply(null, [ptr].concat(args));
    } else {
      assert(sig.length == 1);
      assert(('dynCall_' + sig) in Module, 'bad function pointer type - no table for sig \'' + sig + '\'');
      return Module['dynCall_' + sig].call(null, ptr);
    }
  },
  functionPointers: [null,null],
  addFunction: function (func) {
    for (var i = 0; i < Runtime.functionPointers.length; i++) {
      if (!Runtime.functionPointers[i]) {
        Runtime.functionPointers[i] = func;
        return 2*(1 + i);
      }
    }
    throw 'Finished up all reserved function pointers. Use a higher value for RESERVED_FUNCTION_POINTERS.';
  },
  removeFunction: function (index) {
    Runtime.functionPointers[(index-2)/2] = null;
  },
  warnOnce: function (text) {
    if (!Runtime.warnOnce.shown) Runtime.warnOnce.shown = {};
    if (!Runtime.warnOnce.shown[text]) {
      Runtime.warnOnce.shown[text] = 1;
      Module.printErr(text);
    }
  },
  funcWrappers: {},
  getFuncWrapper: function (func, sig) {
    assert(sig);
    if (!Runtime.funcWrappers[sig]) {
      Runtime.funcWrappers[sig] = {};
    }
    var sigCache = Runtime.funcWrappers[sig];
    if (!sigCache[func]) {
      // optimize away arguments usage in common cases
      if (sig.length === 1) {
        sigCache[func] = function dynCall_wrapper() {
          return Runtime.dynCall(sig, func);
        };
      } else if (sig.length === 2) {
        sigCache[func] = function dynCall_wrapper(arg) {
          return Runtime.dynCall(sig, func, [arg]);
        };
      } else {
        // general case
        sigCache[func] = function dynCall_wrapper() {
          return Runtime.dynCall(sig, func, Array.prototype.slice.call(arguments));
        };
      }
    }
    return sigCache[func];
  },
  getCompilerSetting: function (name) {
    throw 'You must build with -s RETAIN_COMPILER_SETTINGS=1 for Runtime.getCompilerSetting or emscripten_get_compiler_setting to work';
  },
  stackAlloc: function (size) { var ret = STACKTOP;STACKTOP = (STACKTOP + size)|0;STACKTOP = (((STACKTOP)+15)&-16);(assert((((STACKTOP|0) < (STACK_MAX|0))|0))|0); return ret; },
  staticAlloc: function (size) { var ret = STATICTOP;STATICTOP = (STATICTOP + (assert(!staticSealed),size))|0;STATICTOP = (((STATICTOP)+15)&-16); return ret; },
  dynamicAlloc: function (size) { assert(DYNAMICTOP_PTR);var ret = HEAP32[DYNAMICTOP_PTR>>2];var end = (((ret + size + 15)|0) & -16);HEAP32[DYNAMICTOP_PTR>>2] = end;if (end >= TOTAL_MEMORY) {var success = enlargeMemory();if (!success) {HEAP32[DYNAMICTOP_PTR>>2] = ret;return 0;}}return ret;},
  alignMemory: function (size,quantum) { var ret = size = Math.ceil((size)/(quantum ? quantum : 16))*(quantum ? quantum : 16); return ret; },
  makeBigInt: function (low,high,unsigned) { var ret = (unsigned ? ((+((low>>>0)))+((+((high>>>0)))*4294967296.0)) : ((+((low>>>0)))+((+((high|0)))*4294967296.0))); return ret; },
  GLOBAL_BASE: 8,
  QUANTUM_SIZE: 4,
  __dummy__: 0
}



Module["Runtime"] = Runtime;



//========================================
// Runtime essentials
//========================================

var ABORT = 0; // whether we are quitting the application. no code should run after this. set in exit() and abort()
var EXITSTATUS = 0;

function assert(condition, text) {
  if (!condition) {
    abort('Assertion failed: ' + text);
  }
}

var globalScope = this;

// Returns the C function with a specified identifier (for C++, you need to do manual name mangling)
function getCFunc(ident) {
  var func = Module['_' + ident]; // closure exported function
  if (!func) {
    try { func = eval('_' + ident); } catch(e) {}
  }
  assert(func, 'Cannot call unknown function ' + ident + ' (perhaps LLVM optimizations or closure removed it?)');
  return func;
}

var cwrap, ccall;
(function(){
  var JSfuncs = {
    // Helpers for cwrap -- it can't refer to Runtime directly because it might
    // be renamed by closure, instead it calls JSfuncs['stackSave'].body to find
    // out what the minified function name is.
    'stackSave': function() {
      Runtime.stackSave()
    },
    'stackRestore': function() {
      Runtime.stackRestore()
    },
    // type conversion from js to c
    'arrayToC' : function(arr) {
      var ret = Runtime.stackAlloc(arr.length);
      writeArrayToMemory(arr, ret);
      return ret;
    },
    'stringToC' : function(str) {
      var ret = 0;
      if (str !== null && str !== undefined && str !== 0) { // null string
        // at most 4 bytes per UTF-8 code point, +1 for the trailing '\0'
        var len = (str.length << 2) + 1;
        ret = Runtime.stackAlloc(len);
        stringToUTF8(str, ret, len);
      }
      return ret;
    }
  };
  // For fast lookup of conversion functions
  var toC = {'string' : JSfuncs['stringToC'], 'array' : JSfuncs['arrayToC']};

  // C calling interface.
  ccall = function ccallFunc(ident, returnType, argTypes, args, opts) {
    var func = getCFunc(ident);
    var cArgs = [];
    var stack = 0;
    assert(returnType !== 'array', 'Return type should not be "array".');
    if (args) {
      for (var i = 0; i < args.length; i++) {
        var converter = toC[argTypes[i]];
        if (converter) {
          if (stack === 0) stack = Runtime.stackSave();
          cArgs[i] = converter(args[i]);
        } else {
          cArgs[i] = args[i];
        }
      }
    }
    var ret = func.apply(null, cArgs);
    if ((!opts || !opts.async) && typeof EmterpreterAsync === 'object') {
      assert(!EmterpreterAsync.state, 'cannot start async op with normal JS calling ccall');
    }
    if (opts && opts.async) assert(!returnType, 'async ccalls cannot return values');
    if (returnType === 'string') ret = Pointer_stringify(ret);
    if (stack !== 0) {
      if (opts && opts.async) {
        EmterpreterAsync.asyncFinalizers.push(function() {
          Runtime.stackRestore(stack);
        });
        return;
      }
      Runtime.stackRestore(stack);
    }
    return ret;
  }

  var sourceRegex = /^function\s*[a-zA-Z$_0-9]*\s*\(([^)]*)\)\s*{\s*([^*]*?)[\s;]*(?:return\s*(.*?)[;\s]*)?}$/;
  function parseJSFunc(jsfunc) {
    // Match the body and the return value of a javascript function source
    var parsed = jsfunc.toString().match(sourceRegex).slice(1);
    return {arguments : parsed[0], body : parsed[1], returnValue: parsed[2]}
  }

  // sources of useful functions. we create this lazily as it can trigger a source decompression on this entire file
  var JSsource = null;
  function ensureJSsource() {
    if (!JSsource) {
      JSsource = {};
      for (var fun in JSfuncs) {
        if (JSfuncs.hasOwnProperty(fun)) {
          // Elements of toCsource are arrays of three items:
          // the code, and the return value
          JSsource[fun] = parseJSFunc(JSfuncs[fun]);
        }
      }
    }
  }

  cwrap = function cwrap(ident, returnType, argTypes) {
    argTypes = argTypes || [];
    var cfunc = getCFunc(ident);
    // When the function takes numbers and returns a number, we can just return
    // the original function
    var numericArgs = argTypes.every(function(type){ return type === 'number'});
    var numericRet = (returnType !== 'string');
    if ( numericRet && numericArgs) {
      return cfunc;
    }
    // Creation of the arguments list (["$1","$2",...,"$nargs"])
    var argNames = argTypes.map(function(x,i){return '$'+i});
    var funcstr = "(function(" + argNames.join(',') + ") {";
    var nargs = argTypes.length;
    if (!numericArgs) {
      // Generate the code needed to convert the arguments from javascript
      // values to pointers
      ensureJSsource();
      funcstr += 'var stack = ' + JSsource['stackSave'].body + ';';
      for (var i = 0; i < nargs; i++) {
        var arg = argNames[i], type = argTypes[i];
        if (type === 'number') continue;
        var convertCode = JSsource[type + 'ToC']; // [code, return]
        funcstr += 'var ' + convertCode.arguments + ' = ' + arg + ';';
        funcstr += convertCode.body + ';';
        funcstr += arg + '=(' + convertCode.returnValue + ');';
      }
    }

    // When the code is compressed, the name of cfunc is not literally 'cfunc' anymore
    var cfuncname = parseJSFunc(function(){return cfunc}).returnValue;
    // Call the function
    funcstr += 'var ret = ' + cfuncname + '(' + argNames.join(',') + ');';
    if (!numericRet) { // Return type can only by 'string' or 'number'
      // Convert the result to a string
      var strgfy = parseJSFunc(function(){return Pointer_stringify}).returnValue;
      funcstr += 'ret = ' + strgfy + '(ret);';
    }
    funcstr += "if (typeof EmterpreterAsync === 'object') { assert(!EmterpreterAsync.state, 'cannot start async op with normal JS calling cwrap') }";
    if (!numericArgs) {
      // If we had a stack, restore it
      ensureJSsource();
      funcstr += JSsource['stackRestore'].body.replace('()', '(stack)') + ';';
    }
    funcstr += 'return ret})';
    return eval(funcstr);
  };
})();
Module["ccall"] = ccall;
Module["cwrap"] = cwrap;

function setValue(ptr, value, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': HEAP8[((ptr)>>0)]=value; break;
      case 'i8': HEAP8[((ptr)>>0)]=value; break;
      case 'i16': HEAP16[((ptr)>>1)]=value; break;
      case 'i32': HEAP32[((ptr)>>2)]=value; break;
      case 'i64': (tempI64 = [value>>>0,(tempDouble=value,(+(Math_abs(tempDouble))) >= 1.0 ? (tempDouble > 0.0 ? ((Math_min((+(Math_floor((tempDouble)/4294967296.0))), 4294967295.0))|0)>>>0 : (~~((+(Math_ceil((tempDouble - +(((~~(tempDouble)))>>>0))/4294967296.0)))))>>>0) : 0)],HEAP32[((ptr)>>2)]=tempI64[0],HEAP32[(((ptr)+(4))>>2)]=tempI64[1]); break;
      case 'float': HEAPF32[((ptr)>>2)]=value; break;
      case 'double': HEAPF64[((ptr)>>3)]=value; break;
      default: abort('invalid type for setValue: ' + type);
    }
}
Module["setValue"] = setValue;


function getValue(ptr, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': return HEAP8[((ptr)>>0)];
      case 'i8': return HEAP8[((ptr)>>0)];
      case 'i16': return HEAP16[((ptr)>>1)];
      case 'i32': return HEAP32[((ptr)>>2)];
      case 'i64': return HEAP32[((ptr)>>2)];
      case 'float': return HEAPF32[((ptr)>>2)];
      case 'double': return HEAPF64[((ptr)>>3)];
      default: abort('invalid type for setValue: ' + type);
    }
  return null;
}
Module["getValue"] = getValue;

var ALLOC_NORMAL = 0; // Tries to use _malloc()
var ALLOC_STACK = 1; // Lives for the duration of the current function call
var ALLOC_STATIC = 2; // Cannot be freed
var ALLOC_DYNAMIC = 3; // Cannot be freed except through sbrk
var ALLOC_NONE = 4; // Do not allocate
Module["ALLOC_NORMAL"] = ALLOC_NORMAL;
Module["ALLOC_STACK"] = ALLOC_STACK;
Module["ALLOC_STATIC"] = ALLOC_STATIC;
Module["ALLOC_DYNAMIC"] = ALLOC_DYNAMIC;
Module["ALLOC_NONE"] = ALLOC_NONE;

// allocate(): This is for internal use. You can use it yourself as well, but the interface
//             is a little tricky (see docs right below). The reason is that it is optimized
//             for multiple syntaxes to save space in generated code. So you should
//             normally not use allocate(), and instead allocate memory using _malloc(),
//             initialize it with setValue(), and so forth.
// @slab: An array of data, or a number. If a number, then the size of the block to allocate,
//        in *bytes* (note that this is sometimes confusing: the next parameter does not
//        affect this!)
// @types: Either an array of types, one for each byte (or 0 if no type at that position),
//         or a single type which is used for the entire block. This only matters if there
//         is initial data - if @slab is a number, then this does not matter at all and is
//         ignored.
// @allocator: How to allocate memory, see ALLOC_*
function allocate(slab, types, allocator, ptr) {
  var zeroinit, size;
  if (typeof slab === 'number') {
    zeroinit = true;
    size = slab;
  } else {
    zeroinit = false;
    size = slab.length;
  }

  var singleType = typeof types === 'string' ? types : null;

  var ret;
  if (allocator == ALLOC_NONE) {
    ret = ptr;
  } else {
    ret = [typeof _malloc === 'function' ? _malloc : Runtime.staticAlloc, Runtime.stackAlloc, Runtime.staticAlloc, Runtime.dynamicAlloc][allocator === undefined ? ALLOC_STATIC : allocator](Math.max(size, singleType ? 1 : types.length));
  }

  if (zeroinit) {
    var ptr = ret, stop;
    assert((ret & 3) == 0);
    stop = ret + (size & ~3);
    for (; ptr < stop; ptr += 4) {
      HEAP32[((ptr)>>2)]=0;
    }
    stop = ret + size;
    while (ptr < stop) {
      HEAP8[((ptr++)>>0)]=0;
    }
    return ret;
  }

  if (singleType === 'i8') {
    if (slab.subarray || slab.slice) {
      HEAPU8.set(slab, ret);
    } else {
      HEAPU8.set(new Uint8Array(slab), ret);
    }
    return ret;
  }

  var i = 0, type, typeSize, previousType;
  while (i < size) {
    var curr = slab[i];

    if (typeof curr === 'function') {
      curr = Runtime.getFunctionIndex(curr);
    }

    type = singleType || types[i];
    if (type === 0) {
      i++;
      continue;
    }
    assert(type, 'Must know what type to store in allocate!');

    if (type == 'i64') type = 'i32'; // special case: we have one i32 here, and one i32 later

    setValue(ret+i, curr, type);

    // no need to look up size unless type changes, so cache it
    if (previousType !== type) {
      typeSize = Runtime.getNativeTypeSize(type);
      previousType = type;
    }
    i += typeSize;
  }

  return ret;
}
Module["allocate"] = allocate;

// Allocate memory during any stage of startup - static memory early on, dynamic memory later, malloc when ready
function getMemory(size) {
  if (!staticSealed) return Runtime.staticAlloc(size);
  if (!runtimeInitialized) return Runtime.dynamicAlloc(size);
  return _malloc(size);
}
Module["getMemory"] = getMemory;

function Pointer_stringify(ptr, /* optional */ length) {
  if (length === 0 || !ptr) return '';
  // TODO: use TextDecoder
  // Find the length, and check for UTF while doing so
  var hasUtf = 0;
  var t;
  var i = 0;
  while (1) {
    assert(ptr + i < TOTAL_MEMORY);
    t = HEAPU8[(((ptr)+(i))>>0)];
    hasUtf |= t;
    if (t == 0 && !length) break;
    i++;
    if (length && i == length) break;
  }
  if (!length) length = i;

  var ret = '';

  if (hasUtf < 128) {
    var MAX_CHUNK = 1024; // split up into chunks, because .apply on a huge string can overflow the stack
    var curr;
    while (length > 0) {
      curr = String.fromCharCode.apply(String, HEAPU8.subarray(ptr, ptr + Math.min(length, MAX_CHUNK)));
      ret = ret ? ret + curr : curr;
      ptr += MAX_CHUNK;
      length -= MAX_CHUNK;
    }
    return ret;
  }
  return Module['UTF8ToString'](ptr);
}
Module["Pointer_stringify"] = Pointer_stringify;

// Given a pointer 'ptr' to a null-terminated ASCII-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

function AsciiToString(ptr) {
  var str = '';
  while (1) {
    var ch = HEAP8[((ptr++)>>0)];
    if (!ch) return str;
    str += String.fromCharCode(ch);
  }
}
Module["AsciiToString"] = AsciiToString;

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in ASCII form. The copy will require at most str.length+1 bytes of space in the HEAP.

function stringToAscii(str, outPtr) {
  return writeAsciiToMemory(str, outPtr, false);
}
Module["stringToAscii"] = stringToAscii;

// Given a pointer 'ptr' to a null-terminated UTF8-encoded string in the given array that contains uint8 values, returns
// a copy of that string as a Javascript String object.

var UTF8Decoder = typeof TextDecoder !== 'undefined' ? new TextDecoder('utf8') : undefined;
function UTF8ArrayToString(u8Array, idx) {
  var endPtr = idx;
  // TextDecoder needs to know the byte length in advance, it doesn't stop on null terminator by itself.
  // Also, use the length info to avoid running tiny strings through TextDecoder, since .subarray() allocates garbage.
  while (u8Array[endPtr]) ++endPtr;

  if (endPtr - idx > 16 && u8Array.subarray && UTF8Decoder) {
    return UTF8Decoder.decode(u8Array.subarray(idx, endPtr));
  } else {
    var u0, u1, u2, u3, u4, u5;

    var str = '';
    while (1) {
      // For UTF8 byte structure, see http://en.wikipedia.org/wiki/UTF-8#Description and https://www.ietf.org/rfc/rfc2279.txt and https://tools.ietf.org/html/rfc3629
      u0 = u8Array[idx++];
      if (!u0) return str;
      if (!(u0 & 0x80)) { str += String.fromCharCode(u0); continue; }
      u1 = u8Array[idx++] & 63;
      if ((u0 & 0xE0) == 0xC0) { str += String.fromCharCode(((u0 & 31) << 6) | u1); continue; }
      u2 = u8Array[idx++] & 63;
      if ((u0 & 0xF0) == 0xE0) {
        u0 = ((u0 & 15) << 12) | (u1 << 6) | u2;
      } else {
        u3 = u8Array[idx++] & 63;
        if ((u0 & 0xF8) == 0xF0) {
          u0 = ((u0 & 7) << 18) | (u1 << 12) | (u2 << 6) | u3;
        } else {
          u4 = u8Array[idx++] & 63;
          if ((u0 & 0xFC) == 0xF8) {
            u0 = ((u0 & 3) << 24) | (u1 << 18) | (u2 << 12) | (u3 << 6) | u4;
          } else {
            u5 = u8Array[idx++] & 63;
            u0 = ((u0 & 1) << 30) | (u1 << 24) | (u2 << 18) | (u3 << 12) | (u4 << 6) | u5;
          }
        }
      }
      if (u0 < 0x10000) {
        str += String.fromCharCode(u0);
      } else {
        var ch = u0 - 0x10000;
        str += String.fromCharCode(0xD800 | (ch >> 10), 0xDC00 | (ch & 0x3FF));
      }
    }
  }
}
Module["UTF8ArrayToString"] = UTF8ArrayToString;

// Given a pointer 'ptr' to a null-terminated UTF8-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

function UTF8ToString(ptr) {
  return UTF8ArrayToString(HEAPU8,ptr);
}
Module["UTF8ToString"] = UTF8ToString;

// Copies the given Javascript String object 'str' to the given byte array at address 'outIdx',
// encoded in UTF8 form and null-terminated. The copy will require at most str.length*4+1 bytes of space in the HEAP.
// Use the function lengthBytesUTF8 to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outU8Array: the array to copy to. Each index in this array is assumed to be one 8-byte element.
//   outIdx: The starting offset in the array to begin the copying.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null
//                    terminator, i.e. if maxBytesToWrite=1, only the null terminator will be written and nothing else.
//                    maxBytesToWrite=0 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF8Array(str, outU8Array, outIdx, maxBytesToWrite) {
  if (!(maxBytesToWrite > 0)) // Parameter maxBytesToWrite is not optional. Negative values, 0, null, undefined and false each don't write out any bytes.
    return 0;

  var startIdx = outIdx;
  var endIdx = outIdx + maxBytesToWrite - 1; // -1 for string null terminator.
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! So decode UTF16->UTF32->UTF8.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    // For UTF8 byte structure, see http://en.wikipedia.org/wiki/UTF-8#Description and https://www.ietf.org/rfc/rfc2279.txt and https://tools.ietf.org/html/rfc3629
    var u = str.charCodeAt(i); // possibly a lead surrogate
    if (u >= 0xD800 && u <= 0xDFFF) u = 0x10000 + ((u & 0x3FF) << 10) | (str.charCodeAt(++i) & 0x3FF);
    if (u <= 0x7F) {
      if (outIdx >= endIdx) break;
      outU8Array[outIdx++] = u;
    } else if (u <= 0x7FF) {
      if (outIdx + 1 >= endIdx) break;
      outU8Array[outIdx++] = 0xC0 | (u >> 6);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else if (u <= 0xFFFF) {
      if (outIdx + 2 >= endIdx) break;
      outU8Array[outIdx++] = 0xE0 | (u >> 12);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else if (u <= 0x1FFFFF) {
      if (outIdx + 3 >= endIdx) break;
      outU8Array[outIdx++] = 0xF0 | (u >> 18);
      outU8Array[outIdx++] = 0x80 | ((u >> 12) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else if (u <= 0x3FFFFFF) {
      if (outIdx + 4 >= endIdx) break;
      outU8Array[outIdx++] = 0xF8 | (u >> 24);
      outU8Array[outIdx++] = 0x80 | ((u >> 18) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 12) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else {
      if (outIdx + 5 >= endIdx) break;
      outU8Array[outIdx++] = 0xFC | (u >> 30);
      outU8Array[outIdx++] = 0x80 | ((u >> 24) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 18) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 12) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    }
  }
  // Null-terminate the pointer to the buffer.
  outU8Array[outIdx] = 0;
  return outIdx - startIdx;
}
Module["stringToUTF8Array"] = stringToUTF8Array;

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF8 form. The copy will require at most str.length*4+1 bytes of space in the HEAP.
// Use the function lengthBytesUTF8 to compute the exact number of bytes (excluding null terminator) that this function will write.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF8(str, outPtr, maxBytesToWrite) {
  assert(typeof maxBytesToWrite == 'number', 'stringToUTF8(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!');
  return stringToUTF8Array(str, HEAPU8,outPtr, maxBytesToWrite);
}
Module["stringToUTF8"] = stringToUTF8;

// Returns the number of bytes the given Javascript string takes if encoded as a UTF8 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF8(str) {
  var len = 0;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! So decode UTF16->UTF32->UTF8.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var u = str.charCodeAt(i); // possibly a lead surrogate
    if (u >= 0xD800 && u <= 0xDFFF) u = 0x10000 + ((u & 0x3FF) << 10) | (str.charCodeAt(++i) & 0x3FF);
    if (u <= 0x7F) {
      ++len;
    } else if (u <= 0x7FF) {
      len += 2;
    } else if (u <= 0xFFFF) {
      len += 3;
    } else if (u <= 0x1FFFFF) {
      len += 4;
    } else if (u <= 0x3FFFFFF) {
      len += 5;
    } else {
      len += 6;
    }
  }
  return len;
}
Module["lengthBytesUTF8"] = lengthBytesUTF8;

// Given a pointer 'ptr' to a null-terminated UTF16LE-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

var UTF16Decoder = typeof TextDecoder !== 'undefined' ? new TextDecoder('utf-16le') : undefined;
function UTF16ToString(ptr) {
  assert(ptr % 2 == 0, 'Pointer passed to UTF16ToString must be aligned to two bytes!');
  var endPtr = ptr;
  // TextDecoder needs to know the byte length in advance, it doesn't stop on null terminator by itself.
  // Also, use the length info to avoid running tiny strings through TextDecoder, since .subarray() allocates garbage.
  var idx = endPtr >> 1;
  while (HEAP16[idx]) ++idx;
  endPtr = idx << 1;

  if (endPtr - ptr > 32 && UTF16Decoder) {
    return UTF16Decoder.decode(HEAPU8.subarray(ptr, endPtr));
  } else {
    var i = 0;

    var str = '';
    while (1) {
      var codeUnit = HEAP16[(((ptr)+(i*2))>>1)];
      if (codeUnit == 0) return str;
      ++i;
      // fromCharCode constructs a character from a UTF-16 code unit, so we can pass the UTF16 string right through.
      str += String.fromCharCode(codeUnit);
    }
  }
}


// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF16 form. The copy will require at most str.length*4+2 bytes of space in the HEAP.
// Use the function lengthBytesUTF16() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outPtr: Byte address in Emscripten HEAP where to write the string to.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null
//                    terminator, i.e. if maxBytesToWrite=2, only the null terminator will be written and nothing else.
//                    maxBytesToWrite<2 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF16(str, outPtr, maxBytesToWrite) {
  assert(outPtr % 2 == 0, 'Pointer passed to stringToUTF16 must be aligned to two bytes!');
  assert(typeof maxBytesToWrite == 'number', 'stringToUTF16(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!');
  // Backwards compatibility: if max bytes is not specified, assume unsafe unbounded write is allowed.
  if (maxBytesToWrite === undefined) {
    maxBytesToWrite = 0x7FFFFFFF;
  }
  if (maxBytesToWrite < 2) return 0;
  maxBytesToWrite -= 2; // Null terminator.
  var startPtr = outPtr;
  var numCharsToWrite = (maxBytesToWrite < str.length*2) ? (maxBytesToWrite / 2) : str.length;
  for (var i = 0; i < numCharsToWrite; ++i) {
    // charCodeAt returns a UTF-16 encoded code unit, so it can be directly written to the HEAP.
    var codeUnit = str.charCodeAt(i); // possibly a lead surrogate
    HEAP16[((outPtr)>>1)]=codeUnit;
    outPtr += 2;
  }
  // Null-terminate the pointer to the HEAP.
  HEAP16[((outPtr)>>1)]=0;
  return outPtr - startPtr;
}


// Returns the number of bytes the given Javascript string takes if encoded as a UTF16 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF16(str) {
  return str.length*2;
}


function UTF32ToString(ptr) {
  assert(ptr % 4 == 0, 'Pointer passed to UTF32ToString must be aligned to four bytes!');
  var i = 0;

  var str = '';
  while (1) {
    var utf32 = HEAP32[(((ptr)+(i*4))>>2)];
    if (utf32 == 0)
      return str;
    ++i;
    // Gotcha: fromCharCode constructs a character from a UTF-16 encoded code (pair), not from a Unicode code point! So encode the code point to UTF-16 for constructing.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    if (utf32 >= 0x10000) {
      var ch = utf32 - 0x10000;
      str += String.fromCharCode(0xD800 | (ch >> 10), 0xDC00 | (ch & 0x3FF));
    } else {
      str += String.fromCharCode(utf32);
    }
  }
}


// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF32 form. The copy will require at most str.length*4+4 bytes of space in the HEAP.
// Use the function lengthBytesUTF32() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outPtr: Byte address in Emscripten HEAP where to write the string to.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null
//                    terminator, i.e. if maxBytesToWrite=4, only the null terminator will be written and nothing else.
//                    maxBytesToWrite<4 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF32(str, outPtr, maxBytesToWrite) {
  assert(outPtr % 4 == 0, 'Pointer passed to stringToUTF32 must be aligned to four bytes!');
  assert(typeof maxBytesToWrite == 'number', 'stringToUTF32(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!');
  // Backwards compatibility: if max bytes is not specified, assume unsafe unbounded write is allowed.
  if (maxBytesToWrite === undefined) {
    maxBytesToWrite = 0x7FFFFFFF;
  }
  if (maxBytesToWrite < 4) return 0;
  var startPtr = outPtr;
  var endPtr = startPtr + maxBytesToWrite - 4;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! We must decode the string to UTF-32 to the heap.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var codeUnit = str.charCodeAt(i); // possibly a lead surrogate
    if (codeUnit >= 0xD800 && codeUnit <= 0xDFFF) {
      var trailSurrogate = str.charCodeAt(++i);
      codeUnit = 0x10000 + ((codeUnit & 0x3FF) << 10) | (trailSurrogate & 0x3FF);
    }
    HEAP32[((outPtr)>>2)]=codeUnit;
    outPtr += 4;
    if (outPtr + 4 > endPtr) break;
  }
  // Null-terminate the pointer to the HEAP.
  HEAP32[((outPtr)>>2)]=0;
  return outPtr - startPtr;
}


// Returns the number of bytes the given Javascript string takes if encoded as a UTF16 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF32(str) {
  var len = 0;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! We must decode the string to UTF-32 to the heap.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var codeUnit = str.charCodeAt(i);
    if (codeUnit >= 0xD800 && codeUnit <= 0xDFFF) ++i; // possibly a lead surrogate, so skip over the tail surrogate.
    len += 4;
  }

  return len;
}


function demangle(func) {
  var __cxa_demangle_func = Module['___cxa_demangle'] || Module['__cxa_demangle'];
  if (__cxa_demangle_func) {
    try {
      var s =
        func.substr(1);
      var len = lengthBytesUTF8(s)+1;
      var buf = _malloc(len);
      stringToUTF8(s, buf, len);
      var status = _malloc(4);
      var ret = __cxa_demangle_func(buf, 0, 0, status);
      if (getValue(status, 'i32') === 0 && ret) {
        return Pointer_stringify(ret);
      }
      // otherwise, libcxxabi failed
    } catch(e) {
      // ignore problems here
    } finally {
      if (buf) _free(buf);
      if (status) _free(status);
      if (ret) _free(ret);
    }
    // failure when using libcxxabi, don't demangle
    return func;
  }
  Runtime.warnOnce('warning: build with  -s DEMANGLE_SUPPORT=1  to link in libcxxabi demangling');
  return func;
}

function demangleAll(text) {
  var regex =
    /__Z[\w\d_]+/g;
  return text.replace(regex,
    function(x) {
      var y = demangle(x);
      return x === y ? x : (x + ' [' + y + ']');
    });
}

function jsStackTrace() {
  var err = new Error();
  if (!err.stack) {
    // IE10+ special cases: It does have callstack info, but it is only populated if an Error object is thrown,
    // so try that as a special-case.
    try {
      throw new Error(0);
    } catch(e) {
      err = e;
    }
    if (!err.stack) {
      return '(no stack trace available)';
    }
  }
  return err.stack.toString();
}

function stackTrace() {
  var js = jsStackTrace();
  if (Module['extraStackTrace']) js += '\n' + Module['extraStackTrace']();
  return demangleAll(js);
}
Module["stackTrace"] = stackTrace;

// Memory management

var PAGE_SIZE = 16384;
var WASM_PAGE_SIZE = 65536;
var ASMJS_PAGE_SIZE = 16777216;
var MIN_TOTAL_MEMORY = 16777216;

function alignUp(x, multiple) {
  if (x % multiple > 0) {
    x += multiple - (x % multiple);
  }
  return x;
}

var HEAP;
var buffer;
var HEAP8, HEAPU8, HEAP16, HEAPU16, HEAP32, HEAPU32, HEAPF32, HEAPF64;

function updateGlobalBuffer(buf) {
  Module['buffer'] = buffer = buf;
}

function updateGlobalBufferViews() {
  Module['HEAP8'] = HEAP8 = new Int8Array(buffer);
  Module['HEAP16'] = HEAP16 = new Int16Array(buffer);
  Module['HEAP32'] = HEAP32 = new Int32Array(buffer);
  Module['HEAPU8'] = HEAPU8 = new Uint8Array(buffer);
  Module['HEAPU16'] = HEAPU16 = new Uint16Array(buffer);
  Module['HEAPU32'] = HEAPU32 = new Uint32Array(buffer);
  Module['HEAPF32'] = HEAPF32 = new Float32Array(buffer);
  Module['HEAPF64'] = HEAPF64 = new Float64Array(buffer);
}

var STATIC_BASE, STATICTOP, staticSealed; // static area
var STACK_BASE, STACKTOP, STACK_MAX; // stack area
var DYNAMIC_BASE, DYNAMICTOP_PTR; // dynamic area handled by sbrk

  STATIC_BASE = STATICTOP = STACK_BASE = STACKTOP = STACK_MAX = DYNAMIC_BASE = DYNAMICTOP_PTR = 0;
  staticSealed = false;


// Initializes the stack cookie. Called at the startup of main and at the startup of each thread in pthreads mode.
function writeStackCookie() {
  assert((STACK_MAX & 3) == 0);
  HEAPU32[(STACK_MAX >> 2)-1] = 0x02135467;
  HEAPU32[(STACK_MAX >> 2)-2] = 0x89BACDFE;
}

function checkStackCookie() {
  if (HEAPU32[(STACK_MAX >> 2)-1] != 0x02135467 || HEAPU32[(STACK_MAX >> 2)-2] != 0x89BACDFE) {
    abort('Stack overflow! Stack cookie has been overwritten, expected hex dwords 0x89BACDFE and 0x02135467, but received 0x' + HEAPU32[(STACK_MAX >> 2)-2].toString(16) + ' ' + HEAPU32[(STACK_MAX >> 2)-1].toString(16));
  }
  // Also test the global address 0 for integrity. This check is not compatible with SAFE_SPLIT_MEMORY though, since that mode already tests all address 0 accesses on its own.
  if (HEAP32[0] !== 0x63736d65 /* 'emsc' */) throw 'Runtime error: The application has corrupted its heap memory area (address zero)!';
}

function abortStackOverflow(allocSize) {
  abort('Stack overflow! Attempted to allocate ' + allocSize + ' bytes on the stack, but stack has only ' + (STACK_MAX - asm.stackSave() + allocSize) + ' bytes available!');
}

function abortOnCannotGrowMemory() {
  abort('Cannot enlarge memory arrays. Either (1) compile with  -s TOTAL_MEMORY=X  with X higher than the current value ' + TOTAL_MEMORY + ', (2) compile with  -s ALLOW_MEMORY_GROWTH=1  which adjusts the size at runtime but prevents some optimizations, (3) set Module.TOTAL_MEMORY to a higher value before the program runs, or if you want malloc to return NULL (0) instead of this abort, compile with  -s ABORTING_MALLOC=0 ');
}


function enlargeMemory() {
  abortOnCannotGrowMemory();
}


var TOTAL_STACK = Module['TOTAL_STACK'] || 5242880;
var TOTAL_MEMORY = Module['TOTAL_MEMORY'] || 16777216;
if (TOTAL_MEMORY < TOTAL_STACK) Module.printErr('TOTAL_MEMORY should be larger than TOTAL_STACK, was ' + TOTAL_MEMORY + '! (TOTAL_STACK=' + TOTAL_STACK + ')');

// Initialize the runtime's memory
// check for full engine support (use string 'subarray' to avoid closure compiler confusion)
assert(typeof Int32Array !== 'undefined' && typeof Float64Array !== 'undefined' && !!(new Int32Array(1)['subarray']) && !!(new Int32Array(1)['set']),
       'JS engine does not provide full typed array support');



// Use a provided buffer, if there is one, or else allocate a new one
if (Module['buffer']) {
  buffer = Module['buffer'];
  assert(buffer.byteLength === TOTAL_MEMORY, 'provided buffer should be ' + TOTAL_MEMORY + ' bytes, but it is ' + buffer.byteLength);
} else {
  // Use a WebAssembly memory where available
  {
    buffer = new ArrayBuffer(TOTAL_MEMORY);
  }
  assert(buffer.byteLength === TOTAL_MEMORY);
}
updateGlobalBufferViews();


function getTotalMemory() {
  return TOTAL_MEMORY;
}

// Endianness check (note: assumes compiler arch was little-endian)
  HEAP32[0] = 0x63736d65; /* 'emsc' */
HEAP16[1] = 0x6373;
if (HEAPU8[2] !== 0x73 || HEAPU8[3] !== 0x63) throw 'Runtime error: expected the system to be little-endian!';

Module['HEAP'] = HEAP;
Module['buffer'] = buffer;
Module['HEAP8'] = HEAP8;
Module['HEAP16'] = HEAP16;
Module['HEAP32'] = HEAP32;
Module['HEAPU8'] = HEAPU8;
Module['HEAPU16'] = HEAPU16;
Module['HEAPU32'] = HEAPU32;
Module['HEAPF32'] = HEAPF32;
Module['HEAPF64'] = HEAPF64;

function callRuntimeCallbacks(callbacks) {
  while(callbacks.length > 0) {
    var callback = callbacks.shift();
    if (typeof callback == 'function') {
      callback();
      continue;
    }
    var func = callback.func;
    if (typeof func === 'number') {
      if (callback.arg === undefined) {
        Module['dynCall_v'](func);
      } else {
        Module['dynCall_vi'](func, callback.arg);
      }
    } else {
      func(callback.arg === undefined ? null : callback.arg);
    }
  }
}

var __ATPRERUN__  = []; // functions called before the runtime is initialized
var __ATINIT__    = []; // functions called during startup
var __ATMAIN__    = []; // functions called when main() is to be run
var __ATEXIT__    = []; // functions called during shutdown
var __ATPOSTRUN__ = []; // functions called after the runtime has exited

var runtimeInitialized = false;
var runtimeExited = false;


function preRun() {
  // compatibility - merge in anything from Module['preRun'] at this time
  if (Module['preRun']) {
    if (typeof Module['preRun'] == 'function') Module['preRun'] = [Module['preRun']];
    while (Module['preRun'].length) {
      addOnPreRun(Module['preRun'].shift());
    }
  }
  callRuntimeCallbacks(__ATPRERUN__);
}

function ensureInitRuntime() {
  checkStackCookie();
  if (runtimeInitialized) return;
  runtimeInitialized = true;
  callRuntimeCallbacks(__ATINIT__);
}

function preMain() {
  checkStackCookie();
  callRuntimeCallbacks(__ATMAIN__);
}

function exitRuntime() {
  checkStackCookie();
  callRuntimeCallbacks(__ATEXIT__);
  runtimeExited = true;
}

function postRun() {
  checkStackCookie();
  // compatibility - merge in anything from Module['postRun'] at this time
  if (Module['postRun']) {
    if (typeof Module['postRun'] == 'function') Module['postRun'] = [Module['postRun']];
    while (Module['postRun'].length) {
      addOnPostRun(Module['postRun'].shift());
    }
  }
  callRuntimeCallbacks(__ATPOSTRUN__);
}

function addOnPreRun(cb) {
  __ATPRERUN__.unshift(cb);
}
Module["addOnPreRun"] = addOnPreRun;

function addOnInit(cb) {
  __ATINIT__.unshift(cb);
}
Module["addOnInit"] = addOnInit;

function addOnPreMain(cb) {
  __ATMAIN__.unshift(cb);
}
Module["addOnPreMain"] = addOnPreMain;

function addOnExit(cb) {
  __ATEXIT__.unshift(cb);
}
Module["addOnExit"] = addOnExit;

function addOnPostRun(cb) {
  __ATPOSTRUN__.unshift(cb);
}
Module["addOnPostRun"] = addOnPostRun;

// Tools


function intArrayFromString(stringy, dontAddNull, length /* optional */) {
  var len = length > 0 ? length : lengthBytesUTF8(stringy)+1;
  var u8array = new Array(len);
  var numBytesWritten = stringToUTF8Array(stringy, u8array, 0, u8array.length);
  if (dontAddNull) u8array.length = numBytesWritten;
  return u8array;
}
Module["intArrayFromString"] = intArrayFromString;

function intArrayToString(array) {
  var ret = [];
  for (var i = 0; i < array.length; i++) {
    var chr = array[i];
    if (chr > 0xFF) {
      assert(false, 'Character code ' + chr + ' (' + String.fromCharCode(chr) + ')  at offset ' + i + ' not in 0x00-0xFF.');
      chr &= 0xFF;
    }
    ret.push(String.fromCharCode(chr));
  }
  return ret.join('');
}
Module["intArrayToString"] = intArrayToString;

// Deprecated: This function should not be called because it is unsafe and does not provide
// a maximum length limit of how many bytes it is allowed to write. Prefer calling the
// function stringToUTF8Array() instead, which takes in a maximum length that can be used
// to be secure from out of bounds writes.
function writeStringToMemory(string, buffer, dontAddNull) {
  Runtime.warnOnce('writeStringToMemory is deprecated and should not be called! Use stringToUTF8() instead!');

  var lastChar, end;
  if (dontAddNull) {
    // stringToUTF8Array always appends null. If we don't want to do that, remember the
    // character that existed at the location where the null will be placed, and restore
    // that after the write (below).
    end = buffer + lengthBytesUTF8(string);
    lastChar = HEAP8[end];
  }
  stringToUTF8(string, buffer, Infinity);
  if (dontAddNull) HEAP8[end] = lastChar; // Restore the value under the null character.
}
Module["writeStringToMemory"] = writeStringToMemory;

function writeArrayToMemory(array, buffer) {
  assert(array.length >= 0, 'writeArrayToMemory array must have a length (should be an array or typed array)')
  HEAP8.set(array, buffer);
}
Module["writeArrayToMemory"] = writeArrayToMemory;

function writeAsciiToMemory(str, buffer, dontAddNull) {
  for (var i = 0; i < str.length; ++i) {
    assert(str.charCodeAt(i) === str.charCodeAt(i)&0xff);
    HEAP8[((buffer++)>>0)]=str.charCodeAt(i);
  }
  // Null-terminate the pointer to the HEAP.
  if (!dontAddNull) HEAP8[((buffer)>>0)]=0;
}
Module["writeAsciiToMemory"] = writeAsciiToMemory;

function unSign(value, bits, ignore) {
  if (value >= 0) {
    return value;
  }
  return bits <= 32 ? 2*Math.abs(1 << (bits-1)) + value // Need some trickery, since if bits == 32, we are right at the limit of the bits JS uses in bitshifts
                    : Math.pow(2, bits)         + value;
}
function reSign(value, bits, ignore) {
  if (value <= 0) {
    return value;
  }
  var half = bits <= 32 ? Math.abs(1 << (bits-1)) // abs is needed if bits == 32
                        : Math.pow(2, bits-1);
  if (value >= half && (bits <= 32 || value > half)) { // for huge values, we can hit the precision limit and always get true here. so don't do that
                                                       // but, in general there is no perfect solution here. With 64-bit ints, we get rounding and errors
                                                       // TODO: In i64 mode 1, resign the two parts separately and safely
    value = -2*half + value; // Cannot bitshift half, as it may be at the limit of the bits JS uses in bitshifts
  }
  return value;
}


// check for imul support, and also for correctness ( https://bugs.webkit.org/show_bug.cgi?id=126345 )
if (!Math['imul'] || Math['imul'](0xffffffff, 5) !== -5) Math['imul'] = function imul(a, b) {
  var ah  = a >>> 16;
  var al = a & 0xffff;
  var bh  = b >>> 16;
  var bl = b & 0xffff;
  return (al*bl + ((ah*bl + al*bh) << 16))|0;
};
Math.imul = Math['imul'];


if (!Math['clz32']) Math['clz32'] = function(x) {
  x = x >>> 0;
  for (var i = 0; i < 32; i++) {
    if (x & (1 << (31 - i))) return i;
  }
  return 32;
};
Math.clz32 = Math['clz32']

if (!Math['trunc']) Math['trunc'] = function(x) {
  return x < 0 ? Math.ceil(x) : Math.floor(x);
};
Math.trunc = Math['trunc'];

var Math_abs = Math.abs;
var Math_cos = Math.cos;
var Math_sin = Math.sin;
var Math_tan = Math.tan;
var Math_acos = Math.acos;
var Math_asin = Math.asin;
var Math_atan = Math.atan;
var Math_atan2 = Math.atan2;
var Math_exp = Math.exp;
var Math_log = Math.log;
var Math_sqrt = Math.sqrt;
var Math_ceil = Math.ceil;
var Math_floor = Math.floor;
var Math_pow = Math.pow;
var Math_imul = Math.imul;
var Math_fround = Math.fround;
var Math_round = Math.round;
var Math_min = Math.min;
var Math_clz32 = Math.clz32;
var Math_trunc = Math.trunc;

// A counter of dependencies for calling run(). If we need to
// do asynchronous work before running, increment this and
// decrement it. Incrementing must happen in a place like
// PRE_RUN_ADDITIONS (used by emcc to add file preloading).
// Note that you can add dependencies in preRun, even though
// it happens right before run - run will be postponed until
// the dependencies are met.
var runDependencies = 0;
var runDependencyWatcher = null;
var dependenciesFulfilled = null; // overridden to take different actions when all run dependencies are fulfilled
var runDependencyTracking = {};

function getUniqueRunDependency(id) {
  var orig = id;
  while (1) {
    if (!runDependencyTracking[id]) return id;
    id = orig + Math.random();
  }
  return id;
}

function addRunDependency(id) {
  runDependencies++;
  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }
  if (id) {
    assert(!runDependencyTracking[id]);
    runDependencyTracking[id] = 1;
    if (runDependencyWatcher === null && typeof setInterval !== 'undefined') {
      // Check for missing dependencies every few seconds
      runDependencyWatcher = setInterval(function() {
        if (ABORT) {
          clearInterval(runDependencyWatcher);
          runDependencyWatcher = null;
          return;
        }
        var shown = false;
        for (var dep in runDependencyTracking) {
          if (!shown) {
            shown = true;
            Module.printErr('still waiting on run dependencies:');
          }
          Module.printErr('dependency: ' + dep);
        }
        if (shown) {
          Module.printErr('(end of list)');
        }
      }, 10000);
    }
  } else {
    Module.printErr('warning: run dependency added without ID');
  }
}
Module["addRunDependency"] = addRunDependency;

function removeRunDependency(id) {
  runDependencies--;
  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }
  if (id) {
    assert(runDependencyTracking[id]);
    delete runDependencyTracking[id];
  } else {
    Module.printErr('warning: run dependency removed without ID');
  }
  if (runDependencies == 0) {
    if (runDependencyWatcher !== null) {
      clearInterval(runDependencyWatcher);
      runDependencyWatcher = null;
    }
    if (dependenciesFulfilled) {
      var callback = dependenciesFulfilled;
      dependenciesFulfilled = null;
      callback(); // can add another dependenciesFulfilled
    }
  }
}
Module["removeRunDependency"] = removeRunDependency;

Module["preloadedImages"] = {}; // maps url to image data
Module["preloadedAudios"] = {}; // maps url to audio data



var memoryInitializer = null;






// === Body ===

var ASM_CONSTS = [];




STATIC_BASE = 8;

STATICTOP = STATIC_BASE + 123520;
  /* global initializers */  __ATINIT__.push();


/* memory initializer */ allocate([0,0,0,0,0,0,240,63,0,0,0,0,0,0,0,0,0,0,0,0,168,203,104,65,0,0,0,0,168,203,104,193,51,51,51,51,51,51,227,63,154,153,153,153,153,153,217,63,51,51,51,51,51,51,195,63,184,30,133,235,81,184,174,63,123,20,174,71,225,122,164,63,186,73,12,2,43,135,150,63,184,30,133,235,81,184,158,63,56,24,0,0,203,143,0,0,96,24,0,0,43,144,0,0,120,0,0,0,0,0,0,0,96,24,0,0,216,143,0,0,136,0,0,0,0,0,0,0,56,24,0,0,249,143,0,0,96,24,0,0,6,144,0,0,104,0,0,0,0,0,0,0,96,24,0,0,92,144,0,0,96,0,0,0,0,0,0,0,1,0,0,0,2,0,0,0,5,67,0,0,1,0,0,0,10,67,0,0,2,0,0,0,19,67,0,0,3,0,0,0,24,67,0,0,17,0,0,0,31,67,0,0,18,0,0,0,38,67,0,0,19,0,0,0,45,67,0,0,20,0,0,0,52,67,0,0,21,0,0,0,59,67,0,0,22,0,0,0,66,67,0,0,17,0,0,0,72,67,0,0,33,0,0,0,79,67,0,0,34,0,0,0,86,67,0,0,35,0,0,0,93,67,0,0,36,0,0,0,100,67,0,0,37,0,0,0,107,67,0,0,38,0,0,0,114,67,0,0,33,0,0,0,0,0,0,0,255,255,255,255,120,67,0,0,65,0,0,0,123,67,0,0,66,0,0,0,126,67,0,0,67,0,0,0,129,67,0,0,68,0,0,0,132,67,0,0,69,0,0,0,135,67,0,0,70,0,0,0,138,67,0,0,71,0,0,0,141,67,0,0,72,0,0,0,144,67,0,0,73,0,0,0,148,67,0,0,74,0,0,0,152,67,0,0,75,0,0,0,156,67,0,0,76,0,0,0,160,67,0,0,77,0,0,0,165,67,0,0,78,0,0,0,170,67,0,0,79,0,0,0,175,67,0,0,8,0,0,0,182,67,0,0,9,0,0,0,190,67,0,0,10,0,0,0,199,67,0,0,11,0,0,0,212,67,0,0,12,0,0,0,227,67,0,0,13,0,0,0,235,67,0,0,14,0,0,0,243,67,0,0,15,0,0,0,248,67,0,0,15,0,0,0,254,67,0,0,16,0,0,0,4,68,0,0,17,0,0,0,10,68,0,0,18,0,0,0,16,68,0,0,19,0,0,0,22,68,0,0,20,0,0,0,28,68,0,0,21,0,0,0,34,68,0,0,23,0,0,0,43,68,0,0,24,0,0,0,48,68,0,0,25,0,0,0,56,68,0,0,27,0,0,0,62,68,0,0,28,0,0,0,67,68,0,0,29,0,0,0,73,68,0,0,32,0,0,0,80,68,0,0,33,0,0,0,88,68,0,0,34,0,0,0,95,68,0,0,35,0,0,0,102,68,0,0,36,0,0,0,108,68,0,0,37,0,0,0,114,68,0,0,38,0,0,0,120,68,0,0,40,0,0,0,132,68,0,0,41,0,0,0,141,68,0,0,42,0,0,0,150,68,0,0,43,0,0,0,158,68,0,0,45,0,0,0,168,68,0,0,46,0,0,0,174,68,0,0,47,0,0,0,181,68,0,0,48,0,0,0,187,68,0,0,49,0,0,0,194,68,0,0,50,0,0,0,203,68,0,0,51,0,0,0,211,68,0,0,100,0,0,0,214,68,0,0,200,0,0,0,224,68,0,0,201,0,0,0,0,0,0,0,255,255,255,255,39,69,0,0,235,69,0,0,249,69,0,0,60,73,0,0,0,0,0,0,40,73,0,0,42,73,0,0,45,73,0,0,48,73,0,0,51,73,0,0,55,73,0,0,58,73,0,0,0,0,0,0,64,73,0,0,64,73,0,0,192,73,0,0,192,73,0,0,64,74,0,0,192,74,0,0,64,75,0,0,192,75,0,0,64,76,0,0,64,76,0,0,192,76,0,0,192,76,0,0,64,77,0,0,64,77,0,0,192,77,0,0,192,77,0,0,64,78,0,0,64,78,0,0,192,78,0,0,192,78,0,0,46,57,78,50,92,5,0,0,3,7,5,0,117,79,0,0,46,57,78,46,92,5,0,0,3,7,5,0,117,79,0,0,46,57,78,46,92,5,0,0,3,7,5,0,117,79,0,0,46,57,90,50,92,5,0,0,3,9,5,0,122,79,0,0,46,57,78,50,92,5,0,0,3,7,5,0,117,79,0,0,46,57,74,55,92,5,0,0,4,7,5,0,127,79,0,0,46,57,74,55,92,5,0,0,4,7,5,0,127,79,0,0,46,57,74,55,92,5,0,0,4,7,5,0,127,79,0,0,46,57,78,50,92,5,0,0,3,7,5,0,117,79,0,0,46,57,78,46,92,5,0,0,3,7,5,0,117,79,0,0,46,57,78,50,92,5,0,0,3,7,5,0,117,79,0,0,34,41,41,32,92,5,0,0,3,7,5,0,127,79,0,0,46,57,55,50,92,5,0,0,3,7,5,0,127,79,0,0,0,64,8,0,70,18,0,0,0,0,0,0,24,12,0,0,4,80,18,6,78,22,0,0,0,0,0,0,34,52,0,0,4,88,22,6,82,22,0,0,0,0,0,0,34,64,0,0,0,92,8,0,92,80,0,0,0,0,0,0,76,8,1,0,0,86,4,0,94,66,0,0,0,0,0,0,34,10,0,0,0,62,10,0,62,20,0,0,0,0,0,0,28,16,0,0,4,68,18,6,68,22,0,0,0,0,0,0,30,44,0,0,6,64,16,0,66,32,0,0,0,0,0,0,32,18,0,0,2,68,46,0,42,32,0,0,0,0,0,0,46,58,0,0,4,78,24,6,72,22,0,0,0,0,0,0,42,52,0,0,4,88,34,0,64,32,0,0,0,0,0,0,46,82,0,0,0,56,12,0,56,20,0,0,0,0,0,0,24,12,0,0,0,70,18,0,70,24,0,0,0,0,0,0,32,20,0,0,6,0,0,0,7,0,0,0,9,0,0,0,9,0,0,0,20,0,0,0,20,0,0,0,20,0,0,0,25,0,0,0,9,0,0,0,9,0,0,0,16,0,0,0,16,0,0,0,16,0,0,0,23,0,0,0,55,0,0,0,32,0,0,0,0,0,0,0,175,0,0,0,100,0,0,0,50,0,0,0,50,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,130,84,0,0,62,0,0,0,133,84,0,0,60,224,0,0,136,84,0,0,38,0,0,0,140,84,0,0,34,0,0,0,145,84,0,0,32,0,0,0,150,84,0,0,39,0,0,0,0,0,0,0,255,255,255,255,0,0,0,0,20,16,4,0,40,0,8,0,40,32,8,0,45,48,8,0,30,0,4,0,30,16,4,0,30,144,4,0,30,144,4,0,30,16,4,0,30,16,4,0,30,144,36,0,40,32,8,0,30,16,4,0,40,128,8,0,40,128,8,0,20,16,4,0,45,48,24,0,40,32,24,0,40,0,24,0,20,16,4,0,30,16,4,0,40,32,8,0,40,0,8,0,40,128,8,0,40,128,8,0,70,0,8,0,40,0,8,0,20,16,4,0,30,16,4,0,30,0,4,0,30,0,4,0,40,32,8,0,70,0,8,0,70,0,8,0,20,144,4,0,40,128,8,0,45,176,8,0,20,144,4,0,40,128,8,0,30,128,4,0,30,144,4,0,40,160,8,0,30,16,4,0,0,0,0,0,237,83,0,0,1,0,0,0,243,83,0,0,2,0,0,0,249,83,0,0,3,0,0,0,1,84,0,0,4,0,0,0,8,84,0,0,5,0,0,0,13,84,0,0,6,0,0,0,15,84,0,0,7,0,0,0,17,84,0,0,8,0,0,0,25,84,0,0,9,0,0,0,29,84,0,0,10,0,0,0,39,84,0,0,11,0,0,0,45,84,0,0,12,0,0,0,54,84,0,0,13,0,0,0,60,84,0,0,14,0,0,0,69,84,0,0,15,0,0,0,72,84,0,0,15,0,0,0,75,84,0,0,15,0,0,0,78,84,0,0,15,0,0,0,82,84,0,0,15,0,0,0,85,84,0,0,7,0,0,0,88,84,0,0,7,0,0,0,91,84,0,0,7,0,0,0,94,84,0,0,7,0,0,0,97,84,0,0,7,0,0,0,100,84,0,0,14,0,0,0,107,84,0,0,14,0,0,0,113,84,0,0,16,0,0,0,118,84,0,0,16,0,0,0,120,84,0,0,16,0,0,0,223,82,0,0,16,0,0,0,122,84,0,0,16,0,0,0,125,84,0,0,16,0,0,0,0,0,0,0,0,0,0,0,199,82,0,0,1,0,0,0,228,83,0,0,2,0,0,0,232,83,0,0,3,0,0,0,0,0,0,0,255,255,255,255,211,83,0,0,0,0,0,0,214,83,0,0,2,0,0,0,223,83,0,0,1,0,0,0,100,101,0,0,20,0,0,0,0,0,0,0,255,255,255,255,0,0,0,0,171,83,0,0,176,83,0,0,100,101,0,0,183,83,0,0,199,82,0,0,1,0,0,0,77,83,0,0,2,0,0,0,85,83,0,0,3,0,0,0,223,82,0,0,4,0,0,0,230,82,0,0,5,0,0,0,0,0,0,0,255,255,255,255,28,83,0,0,18,0,0,0,39,83,0,0,20,0,0,0,48,83,0,0,36,0,0,0,56,83,0,0,64,0,0,0,67,83,0,0,193,0,0,0,0,0,0,0,255,255,255,255,21,83,0,0,1,0,0,0,0,0,0,0,255,255,255,255,10,222,1,0,199,82,0,0,0,0,0,0,204,82,0,0,1,0,0,0,211,82,0,0,2,0,0,0,216,82,0,0,3,0,0,0,223,82,0,0,4,0,0,0,230,82,0,0,5,0,0,0,0,0,0,0,255,255,255,255,0,0,0,0,7,0,0,0,14,0,0,0,21,0,0,0,40,0,0,0,80,0,0,0,24,99,0,0,1,0,0,0,29,99,0,0,2,0,0,0,191,82,0,0,3,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,239,82,0,0,32,224,0,0,246,82,0,0,9,224,0,0,251,82,0,0,95,224,0,0,7,83,0,0,34,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,48,9,0,0,104,9,0,0,168,9,0,0,224,9,0,0,170,108,0,0,100,0,0,0,147,83,0,0,60,0,0,0,154,83,0,0,80,0,0,0,216,82,0,0,100,0,0,0,159,83,0,0,125,0,0,0,164,83,0,0,160,0,0,0,0,0,0,0,255,255,255,255,170,108,0,0,100,0,0,0,116,83,0,0,0,0,0,0,123,83,0,0,30,0,0,0,130,83,0,0,65,0,0,0,216,82,0,0,100,0,0,0,135,83,0,0,150,0,0,0,140,83,0,0,230,0,0,0,0,0,0,0,255,255,255,255,170,108,0,0,100,0,0,0,94,83,0,0,70,0,0,0,100,83,0,0,85,0,0,0,216,82,0,0,100,0,0,0,104,83,0,0,110,0,0,0,109,83,0,0,120,0,0,0,0,0,0,0,255,255,255,255,170,108,0,0,100,0,0,0,94,83,0,0,20,0,0,0,100,83,0,0,50,0,0,0,216,82,0,0,100,0,0,0,104,83,0,0,140,0,0,0,109,83,0,0,180,0,0,0,0,0,0,0,255,255,255,255,130,0,0,0,121,0,0,0,118,0,0,0,115,86,0,0,1,0,0,0,120,86,0,0,0,0,0,0,125,86,0,0,0,0,0,0,130,86,0,0,0,0,0,0,135,86,0,0,0,0,0,0,140,86,0,0,0,0,0,0,145,86,0,0,0,0,0,0,150,86,0,0,0,0,0,0,155,86,0,0,0,0,0,0,160,86,0,0,0,0,0,0,165,86,0,0,0,0,0,0,170,86,0,0,0,0,0,0,175,86,0,0,0,0,0,0,180,86,0,0,0,0,0,0,185,86,0,0,0,0,0,0,190,86,0,0,0,0,0,0,195,86,0,0,0,0,0,0,200,86,0,0,0,0,0,0,205,86,0,0,0,0,0,0,210,86,0,0,0,0,0,0,215,86,0,0,0,0,0,0,220,86,0,0,0,0,0,0,96,6,0,0,240,6,0,0,102,9,0,0,230,9,0,0,102,10,0,0,230,10,0,0,102,11,0,0,230,11,0,0,102,12,0,0,230,12,0,0,102,13,0,0,80,14,0,0,208,14,0,0,32,15,0,0,64,16,0,0,144,16,0,0,0,0,0,0,0,0,0,0,36,87,0,0,41,87,0,0,0,0,0,0,8,87,0,0,13,87,0,0,18,87,0,0,23,87,0,0,28,87,0,0,32,87,0,0,106,88,0,0,1,0,0,0,10,0,0,0,100,0,0,0,232,3,0,0,5,0,0,0,50,0,0,0,244,1,0,0,1,72,1,0,255,255,255,255,1,0,0,0,2,0,0,0,4,0,0,0,15,0,0,0,4,0,0,0,208,30,0,0,208,30,0,0,144,31,0,0,80,32,0,0,16,33,0,0,208,33,0,0,208,30,0,0,144,34,0,0,208,30,0,0,80,35,0,0,208,30,0,0,208,30,0,0,208,30,0,0,208,30,0,0,16,36,0,0,208,30,0,0,208,30,0,0,208,30,0,0,208,36,0,0,144,37,0,0,224,89,0,0,224,89,0,0,68,90,0,0,168,90,0,0,168,90,0,0,168,90,0,0,95,91,0,0,98,91,0,0,102,91,0,0,105,91,0,0,108,91,0,0,138,99,0,0,111,91,0,0,114,91,0,0,117,91,0,0,120,91,0,0,123,91,0,0,0,0,0,0,0,0,128,63,34,94,0,0,128,3,0,0,128,3,255,3,108,101,0,0,7,0,0,0,38,94,0,0,32,4,0,0,0,4,47,5,0,0,0,0,0,0,0,0,43,94,0,0,48,5,0,0,48,5,143,5,121,104,0,0,4,0,0,0,47,94,0,0,144,5,0,0,144,5,255,5,0,0,0,0,0,0,0,0,51,94,0,0,0,6,0,0,0,6,255,6,0,0,0,0,0,0,0,0,55,94,0,0,0,7,0,0,0,7,79,7,0,0,0,0,0,0,0,0,60,94,0,0,128,7,0,0,128,7,191,7,0,0,0,0,0,0,0,0,64,94,0,0,0,9,0,0,0,9,127,9,105,104,0,0,4,0,0,0,68,94,0,0,128,9,0,0,128,9,255,9,110,98,0,0,4,0,0,0,72,94,0,0,0,10,0,0,0,10,127,10,97,112,0,0,4,0,0,0,77,94,0,0,128,10,0,0,128,10,255,10,117,103,0,0,4,0,0,0,81,94,0,0,0,11,0,0,0,11,127,11,0,0,0,0,0,0,0,0,85,94,0,0,128,11,0,0,128,11,255,11,97,116,0,0,4,0,0,0,89,94,0,0,0,12,0,0,0,12,127,12,101,116,0,0,0,0,0,0,93,94,0,0,128,12,0,0,128,12,255,12,110,107,0,0,4,0,0,0,97,94,0,0,0,13,0,0,0,13,127,13,108,109,0,0,4,0,0,0,101,94,0,0,128,13,0,0,128,13,255,13,105,115,0,0,4,0,0,0,105,94,0,0,0,14,0,0,0,14,127,14,0,0,0,0,0,0,0,0,109,94,0,0,128,14,0,0,128,14,255,14,0,0,0,0,0,0,0,0,113,94,0,0,0,15,0,0,0,15,255,15,0,0,0,0,0,0,0,0,117,94,0,0,0,16,0,0,0,16,159,16,0,0,0,0,0,0,0,0,121,94,0,0,160,16,0,0,160,16,255,16,97,107,0,0,4,0,0,0,125,94,0,0,0,17,0,0,0,17,255,17,111,107,0,0,4,0,0,0,129,94,0,0,0,18,0,0,0,18,159,19,0,0,0,0,0,0,0,0,134,94,0,0,0,40,0,0,0,40,255,40,0,0,0,0,16,0,0,0,143,94,0,0,64,48,0,0,64,48,255,48,0,0,0,0,8,0,0,0,147,94,0,0,0,49,0,0,0,49,255,159,0,0,0,0,8,0,0,0,125,94,0,0,0,167,0,0,0,167,255,215,111,107,0,0,12,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,195,3,0,0,0,0,0,0,108,0,0,0,0,0,0,0,39,0,0,0,183,0,0,0,0,0,0,0,48,4,0,0,97,0,0,0,49,4,0,0,98,0,0,0,70,4,0,0,99,0,0,0,91,4,0,0,7,1,0,0,71,4,0,0,13,1,0,0,95,4,0,0,100,0,126,1,85,4,0,0,100,0,122,0,52,4,0,0,100,0,0,0,82,4,0,0,17,1,0,0,53,4,0,0,101,0,0,0,68,4,0,0,102,0,0,0,51,4,0,0,103,0,0,0,69,4,0,0,104,0,0,0,56,4,0,0,105,0,0,0,88,4,0,0,106,0,0,0,58,4,0,0,107,0,0,0,89,4,0,0,108,0,106,0,59,4,0,0,108,0,0,0,60,4,0,0,109,0,0,0,90,4,0,0,110,0,106,0,61,4,0,0,110,0,0,0,62,4,0,0,111,0,0,0,63,4,0,0,112,0,0,0,64,4,0,0,114,0,0,0,65,4,0,0,115,0,0,0,72,4,0,0,97,1,0,0,66,4,0,0,116,0,0,0,67,4,0,0,117,0,0,0,50,4,0,0,118,0,0,0,55,4,0,0,122,0,0,0,54,4,0,0,126,1,0,0,83,4,0,0,17,1,0,0,92,4,0,0,7,1,0,0,0,0,0,0,99,0,0,0,102,0,0,0,104,0,0,0,107,0,0,0,112,0,0,0,116,0,0,0,120,0,0,0,254,0,0,0,0,0,0,0,46,0,0,0,44,0,0,0,39,0,0,0,200,2,0,0,0,0,0,0,64,4,0,0,48,4,0,0,53,4,0,0,56,4,0,0,57,4,0,0,62,4,0,0,67,4,0,0,75,4,0,0,77,4,0,0,78,4,0,0,79,4,0,0,80,4,0,0,81,4,0,0,86,4,0,0,87,4,0,0,93,4,0,0,94,4,0,0,0,0,0,0,74,97,0,0,97,0,0,0,224,0,0,0,225,0,0,0,163,30,0,0,227,0,0,0,161,30,0,0,3,1,0,0,177,30,0,0,175,30,0,0,179,30,0,0,181,30,0,0,183,30,0,0,226,0,0,0,167,30,0,0,165,30,0,0,169,30,0,0,171,30,0,0,173,30,0,0,101,0,0,0,232,0,0,0,233,0,0,0,187,30,0,0,189,30,0,0,185,30,0,0,234,0,0,0,193,30,0,0,191,30,0,0,195,30,0,0,197,30,0,0,199,30,0,0,105,0,0,0,236,0,0,0,237,0,0,0,201,30,0,0,41,1,0,0,203,30,0,0,111,0,0,0,242,0,0,0,243,0,0,0,207,30,0,0,245,0,0,0,205,30,0,0,244,0,0,0,211,30,0,0,209,30,0,0,213,30,0,0,215,30,0,0,217,30,0,0,161,1,0,0,221,30,0,0,219,30,0,0,223,30,0,0,225,30,0,0,227,30,0,0,117,0,0,0,249,0,0,0,250,0,0,0,231,30,0,0,105,1,0,0,229,30,0,0,176,1,0,0,235,30,0,0,233,30,0,0,237,30,0,0,239,30,0,0,241,30,0,0,121,0,0,0,243,30,0,0,253,0,0,0,247,30,0,0,249,30,0,0,245,30,0,0,0,0,0,0,39,0,0,0,0,0,0,0,16,99,0,0,0,0,0,0,24,99,0,0,1,0,0,0,29,99,0,0,2,0,0,0,0,0,0,0,0,0,0,0,88,2,0,0,170,0,0,0,176,4,0,0,135,0,0,0,208,7,0,0,110,0,0,0,184,11,0,0,110,0,0,0,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,36,99,0,0,48,99,0,0,60,99,0,0,32,49,1,0,0,0,0,0,200,0,0,0,200,0,0,0,144,1,0,0,144,1,0,0,144,1,0,0,88,2,0,0,88,2,0,0,88,2,0,0,240,0,0,0,170,0,0,0,170,0,0,0,170,0,0,0,170,0,0,0,170,0,0,0,170,0,0,0,170,0,0,0,170,0,0,0,63,103,0,0,225,102,0,0,71,101,0,0,1,0,0,0,76,101,0,0,2,0,0,0,85,101,0,0,3,0,0,0,92,101,0,0,7,0,0,0,100,101,0,0,8,0,0,0,106,101,0,0,5,0,0,0,115,101,0,0,4,0,0,0,126,101,0,0,6,0,0,0,137,101,0,0,20,0,0,0,150,101,0,0,21,0,0,0,160,101,0,0,22,0,0,0,170,101,0,0,18,0,0,0,181,101,0,0,19,0,0,0,187,101,0,0,23,0,0,0,197,101,0,0,24,0,0,0,208,101,0,0,25,0,0,0,218,101,0,0,26,0,0,0,226,101,0,0,36,0,0,0,234,101,0,0,17,0,0,0,240,101,0,0,9,0,0,0,245,101,0,0,10,0,0,0,253,101,0,0,11,0,0,0,7,102,0,0,12,0,0,0,15,102,0,0,13,0,0,0,20,102,0,0,14,0,0,0,28,102,0,0,15,0,0,0,35,102,0,0,16,0,0,0,43,102,0,0,27,0,0,0,51,102,0,0,28,0,0,0,58,102,0,0,29,0,0,0,65,102,0,0,37,0,0,0,76,102,0,0,30,0,0,0,82,102,0,0,31,0,0,0,93,102,0,0,32,0,0,0,99,102,0,0,33,0,0,0,108,102,0,0,34,0,0,0,118,102,0,0,35,0,0,0,130,102,0,0,1,1,0,0,141,102,0,0,3,1,0,0,150,102,0,0,4,1,0,0,165,102,0,0,5,1,0,0,182,102,0,0,7,1,0,0,197,102,0,0,6,1,0,0,211,102,0,0,20,1,0,0,0,0,0,0,0,0,0,0,6,101,0,0,12,0,0,0,15,101,0,0,16,0,0,0,0,0,0,0,255,255,255,255,250,100,0,0,1,0,0,0,0,101,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,50,0,0,0,175,0,0,0,100,0,0,0,50,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,175,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,60,0,0,0,10,0,0,0,0,1,0,0,64,0,0,0,0,0,0,0,255,127,0,0,238,2,0,0,44,1,0,0,99,0,0,0,99,0,0,0,99,0,0,0,0,0,0,0,238,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,26,0,0,0,48,0,0,0,48,0,0,0,64,0,0,0,80,0,0,0,144,0,0,0,160,0,0,0,176,0,0,0,192,0,0,0,45,0,0,0,38,0,0,0,45,0,0,0,45,0,0,0,55,0,0,0,88,20,0,0,20,0,0,0,67,46,85,84,70,45,56,0,0,0,0,0,0,0,0,0,0,0,0,0,222,18,4,149,0,0,0,0,255,255,255,255,255,255,255,255,255,255,255,255,2,0,0,192,3,0,0,192,4,0,0,192,5,0,0,192,6,0,0,192,7,0,0,192,8,0,0,192,9,0,0,192,10,0,0,192,11,0,0,192,12,0,0,192,13,0,0,192,14,0,0,192,15,0,0,192,16,0,0,192,17,0,0,192,18,0,0,192,19,0,0,192,20,0,0,192,21,0,0,192,22,0,0,192,23,0,0,192,24,0,0,192,25,0,0,192,26,0,0,192,27,0,0,192,28,0,0,192,29,0,0,192,30,0,0,192,31,0,0,192,0,0,0,179,1,0,0,195,2,0,0,195,3,0,0,195,4,0,0,195,5,0,0,195,6,0,0,195,7,0,0,195,8,0,0,195,9,0,0,195,10,0,0,195,11,0,0,195,12,0,0,195,13,0,0,211,14,0,0,195,15,0,0,195,0,0,12,187,1,0,12,195,2,0,12,195,3,0,12,195,4,0,12,211,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,144,91,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,0,0,0,8,0,0,0,19,222,1,0,0,4,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,10,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,44,22,0,0,176,22,0,0,5,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,9,0,0,0,8,0,0,0,27,226,1,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,32,0,0,0,9,0,0,0,10,0,0,0,13,0,0,0,11,0,0,0,12,0,0,0,133,0,0,0,0,32,0,0,1,32,0,0,2,32,0,0,3,32,0,0,4,32,0,0,5,32,0,0,6,32,0,0,8,32,0,0,9,32,0,0,10,32,0,0,40,32,0,0,41,32,0,0,95,32,0,0,0,48,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,10,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,10,0,0,0,100,0,0,0,232,3,0,0,16,39,0,0,160,134,1,0,64,66,15,0,128,150,152,0,0,225,245,5,95,112,137,0,255,9,47,15,64,0,0,0,0,0,0,0,0,0,0,0,104,0,0,0,11,0,0,0,12,0,0,0,13,0,0,0,14,0,0,0,15,0,0,0,16,0,0,0,17,0,0,0,18,0,0,0,0,0,0,0,144,0,0,0,11,0,0,0,19,0,0,0,13,0,0,0,14,0,0,0,15,0,0,0,20,0,0,0,21,0,0,0,22,0,0,0,0,0,0,0,160,0,0,0,23,0,0,0,24,0,0,0,25,0,0,0,32,0,33,0,34,0,176,2,36,0,37,0,230,0,200,2,40,0,41,0,126,2,43,0,204,2,45,0,46,0,47,0,82,2,49,0,50,0,92,2,52,0,53,0,54,0,55,0,117,2,57,0,208,2,178,2,60,0,61,0,62,0,148,2,89,2,81,2,178,3,231,0,240,0,91,2,70,0,98,2,39,1,106,2,95,2,75,0,107,2,113,2,75,1,84,2,166,3,99,2,128,2,131,2,184,3,138,2,140,2,83,1,199,3,248,0,146,2,42,3,92,0,93,0,94,0,95,0,96,0,97,0,98,0,99,0,100,0,101,0,102,0,97,2,104,0,105,0,106,0,107,0,108,0,109,0,110,0,111,0,112,0,113,0,114,0,115,0,116,0,117,0,118,0,119,0,120,0,121,0,122,0,123,0,124,0,125,0,3,3,127,0,228,0,235,0,239,0,246,0,252,0,255,0,0,0,48,1,105,0,120,1,255,0,246,1,149,1,247,1,191,1,32,2,158,1,58,2,101,44,61,2,154,1,62,2,102,44,67,2,128,1,0,0,0,0,181,0,156,3,223,0,223,0,255,0,120,1,49,1,73,0,127,1,83,0,128,1,67,2,149,1,246,1,154,1,61,2,158,1,32,2,191,1,247,1,198,1,196,1,201,1,199,1,204,1,202,1,221,1,142,1,243,1,241,1,0,0,0,0,44,0,46,0,63,0,33,0,58,0,59,0,161,0,191,0,19,32,20,32,38,32,126,3,135,3,100,9,137,5,93,5,92,5,94,5,91,5,12,6,27,6,31,6,212,6,244,13,13,15,14,15,98,19,99,19,100,19,101,19,102,19,103,19,104,19,251,16,1,48,2,48,1,255,12,255,14,255,26,255,27,255,31,255,0,0,102,3,102,1,102,2,166,4,166,2,38,4,166,138,40,2,106,3,106,1,106,2,170,2,110,3,110,1,110,2,174,2,41,0,179,4,116,3,116,1,116,2,180,4,180,2,0,0,116,4,122,3,122,1,122,2,186,2,126,1,57,0,190,2,0,0,166,3,0,0,166,1,0,0,230,3,0,0,104,1,0,0,104,2,0,0,40,3,0,0,232,1,0,0,233,1,0,0,105,4,0,0,170,3,0,0,170,1,0,0,42,3,0,0,234,3,0,0,234,1,0,0,108,2,0,0,172,1,0,0,44,3,0,0,44,2,0,0,109,2,0,0,109,4,0,0,174,4,0,0,174,3,0,0,174,1,0,0,238,3,0,0,46,0,0,0,238,139,0,0,111,2,0,0,48,2,48,0,0,0,113,1,0,0,49,2,0,0,241,1,0,0,49,3,0,0,113,4,0,0,115,1,0,0,51,2,0,0,243,1,51,0,0,0,51,0,0,0,180,3,0,0,180,1,0,0,244,2,0,0,180,138,0,0,119,1,0,0,55,2,0,0,247,1,0,0,120,1,0,0,120,2,0,0,56,2,0,0,248,1,0,0,57,2,0,0,249,1,0,0,121,4,0,0,186,4,0,0,186,3,0,0,186,1,0,0,58,4,0,0,250,2,0,0,250,3,0,0,124,2,0,0,126,2,0,0,0,0,127,1,0,0,63,3,0,0,255,1,56,0,166,0,1,0,129,0,103,5,0,0,40,1,41,5,105,5,234,0,0,0,66,5,0,0,195,0,67,29,0,0,239,4,108,5,44,0,108,0,4,0,0,0,173,0,109,5,0,0,238,4,5,0,110,0,177,4,241,4,49,5,241,143,178,0,0,0,114,5,0,0,51,5,115,0,244,4,180,154,0,0,8,0,183,0,142,0,55,21,0,0,55,5,0,0,205,0,119,0,183,8,56,5,0,0,111,5,201,0,9,1,185,0,57,5,250,4,10,0,123,5,187,0,188,0,190,0,126,0,63,5,63,1,0,0,11,1,0,0,204,0,140,0,0,0,0,0,103,0,0,0,108,13,109,0,47,1,176,0,113,0,118,5,76,4,76,28,233,143,0,0,233,207,57,142,0,0,57,206,0,0,177,3,89,2,91,2,179,3,185,3,83,1,201,3,198,3,131,2,197,3,146,2,148,2,126,2,124,2,170,0,97,128,178,0,50,128,179,0,51,128,185,0,49,128,186,0,111,128,176,2,104,128,177,2,102,130,178,2,106,128,179,2,114,128,180,2,121,130,181,2,123,130,182,2,129,130,183,2,119,128,184,2,121,128,192,2,148,130,193,2,149,130,224,2,99,130,225,2,108,128,226,2,115,128,227,2,120,128,112,32,48,128,113,32,105,128,116,32,52,128,117,32,53,128,118,32,54,128,119,32,55,128,120,32,56,128,121,32,57,128,122,32,43,128,123,32,45,128,124,32,61,128,125,32,40,128,126,32,41,128,127,32,110,128,128,32,48,64,129,32,49,64,130,32,50,64,131,32,51,64,132,32,52,64,133,32,53,64,134,32,54,64,135,32,55,64,136,32,56,64,137,32,57,64,138,32,43,64,139,32,45,64,140,32,61,64,141,32,40,64,142,32,41,64,144,32,97,64,145,32,101,64,146,32,111,64,147,32,120,64,148,32,89,66,149,32,104,64,150,32,107,64,151,32,108,64,152,32,109,64,153,32,110,64,154,32,112,64,155,32,115,64,156,32,116,64,0,0,0,0,243,0,16,1,0,1,0,1,0,1,0,1,0,1,240,0,240,0,240,0,0,0,64,0,90,0,110,0,128,0,143,0,156,0,169,0,181,0,192,0,202,0,212,0,221,0,230,0,239,0,247,0,0,1,7,1,15,1,22,1,30,1,37,1,44,1,50,1,57,1,64,1,70,1,76,1,82,1,88,1,94,1,100,1,106,1,111,1,117,1,122,1,128,1,133,1,138,1,143,1,148,1,153,1,158,1,163,1,168,1,173,1,178,1,182,1,187,1,192,1,196,1,201,1,205,1,209,1,214,1,218,1,222,1,227,1,231,1,235,1,239,1,243,1,247,1,251,1,0,2,3,2,7,2,11,2,15,2,19,2,23,2,27,2,31,2,34,2,38,2,42,2,45,2,49,2,53,2,56,2,60,2,64,2,67,2,71,2,74,2,78,2,81,2,84,2,88,2,91,2,95,2,98,2,101,2,105,2,108,2,111,2,115,2,118,2,121,2,124,2,128,2,131,2,134,2,137,2,140,2,143,2,146,2,150,2,153,2,156,2,159,2,162,2,165,2,168,2,171,2,174,2,177,2,180,2,183,2,186,2,189,2,192,2,194,2,197,2,200,2,203,2,206,2,209,2,212,2,214,2,217,2,220,2,223,2,226,2,228,2,231,2,234,2,237,2,239,2,242,2,245,2,247,2,250,2,253,2,0,3,2,3,5,3,7,3,10,3,13,3,15,3,18,3,21,3,23,3,26,3,28,3,31,3,33,3,36,3,39,3,41,3,44,3,46,3,49,3,51,3,54,3,56,3,59,3,61,3,64,3,66,3,68,3,71,3,73,3,76,3,78,3,81,3,83,3,85,3,88,3,90,3,93,3,95,3,97,3,100,3,102,3,104,3,107,3,109,3,111,3,114,3,116,3,118,3,121,3,123,3,125,3,128,3,130,3,132,3,134,3,160,0,161,0,162,0,163,0,164,0,165,0,166,0,167,0,168,0,169,0,170,0,171,0,172,0,173,0,174,0,175,0,176,0,177,0,178,0,179,0,180,0,181,0,182,0,183,0,184,0,185,0,186,0,187,0,188,0,189,0,190,0,191,0,192,0,193,0,194,0,195,0,196,0,197,0,198,0,199,0,200,0,201,0,202,0,203,0,204,0,205,0,206,0,207,0,208,0,209,0,210,0,211,0,212,0,213,0,214,0,215,0,216,0,217,0,218,0,219,0,220,0,221,0,222,0,223,0,224,0,225,0,226,0,227,0,228,0,229,0,230,0,231,0,232,0,233,0,234,0,235,0,236,0,237,0,238,0,239,0,240,0,241,0,242,0,243,0,244,0,245,0,246,0,247,0,248,0,249,0,250,0,251,0,252,0,253,0,254,0,255,0,160,0,4,1,216,2,65,1,164,0,61,1,90,1,167,0,168,0,96,1,94,1,100,1,121,1,173,0,125,1,123,1,176,0,5,1,219,2,66,1,180,0,62,1,91,1,199,2,184,0,97,1,95,1,101,1,122,1,221,2,126,1,124,1,84,1,193,0,194,0,2,1,196,0,57,1,6,1,199,0,12,1,201,0,24,1,203,0,26,1,205,0,206,0,14,1,16,1,67,1,71,1,211,0,212,0,80,1,214,0,215,0,88,1,110,1,218,0,112,1,220,0,221,0,98,1,223,0,85,1,225,0,226,0,3,1,228,0,58,1,7,1,231,0,13,1,233,0,25,1,235,0,27,1,237,0,238,0,15,1,17,1,68,1,72,1,243,0,244,0,81,1,246,0,247,0,89,1,111,1,250,0,113,1,252,0,253,0,99,1,217,2,160,0,38,1,216,2,163,0,164,0,0,0,36,1,167,0,168,0,48,1,94,1,30,1,52,1,173,0,0,0,123,1,176,0,39,1,178,0,179,0,180,0,181,0,37,1,183,0,184,0,49,1,95,1,31,1,53,1,189,0,0,0,124,1,192,0,193,0,194,0,0,0,196,0,10,1,8,1,199,0,200,0,201,0,202,0,203,0,204,0,205,0,206,0,207,0,0,0,209,0,210,0,211,0,212,0,32,1,214,0,215,0,28,1,217,0,218,0,219,0,220,0,108,1,92,1,223,0,224,0,225,0,226,0,0,0,228,0,11,1,9,1,231,0,232,0,233,0,234,0,235,0,236,0,237,0,238,0,239,0,0,0,241,0,242,0,243,0,244,0,33,1,246,0,247,0,29,1,249,0,250,0,251,0,252,0,109,1,93,1,217,2,160,0,4,1,56,1,86,1,164,0,40,1,59,1,167,0,168,0,96,1,18,1,34,1,102,1,173,0,125,1,175,0,176,0,5,1,219,2,87,1,180,0,41,1,60,1,199,2,184,0,97,1,19,1,35,1,103,1,74,1,126,1,75,1,0,1,193,0,194,0,195,0,196,0,197,0,198,0,46,1,12,1,201,0,24,1,203,0,22,1,205,0,206,0,42,1,16,1,69,1,76,1,54,1,212,0,213,0,214,0,215,0,216,0,114,1,218,0,219,0,220,0,104,1,106,1,223,0,1,1,225,0,226,0,227,0,228,0,229,0,230,0,47,1,13,1,233,0,25,1,235,0,23,1,237,0,238,0,43,1,17,1,70,1,77,1,55,1,244,0,245,0,246,0,247,0,248,0,115,1,250,0,251,0,252,0,105,1,107,1,217,2,160,0,1,4,2,4,3,4,4,4,5,4,6,4,7,4,8,4,9,4,10,4,11,4,12,4,173,0,14,4,15,4,16,4,17,4,18,4,19,4,20,4,21,4,22,4,23,4,24,4,25,4,26,4,27,4,28,4,29,4,30,4,31,4,32,4,33,4,34,4,35,4,36,4,37,4,38,4,39,4,40,4,41,4,42,4,43,4,44,4,45,4,46,4,47,4,48,4,49,4,50,4,51,4,52,4,53,4,54,4,55,4,56,4,57,4,58,4,59,4,60,4,61,4,62,4,63,4,64,4,65,4,66,4,67,4,68,4,69,4,70,4,71,4,72,4,73,4,74,4,75,4,76,4,77,4,78,4,79,4,22,33,81,4,82,4,83,4,84,4,85,4,86,4,87,4,88,4,89,4,90,4,91,4,92,4,167,0,94,4,95,4,160,0,24,32,25,32,163,0,172,32,175,32,166,0,167,0,168,0,169,0,122,3,171,0,172,0,173,0,0,0,21,32,176,0,177,0,178,0,179,0,132,3,133,3,134,3,183,0,136,3,137,3,138,3,187,0,140,3,189,0,142,3,143,3,144,3,145,3,146,3,147,3,148,3,149,3,150,3,151,3,152,3,153,3,154,3,155,3,156,3,157,3,158,3,159,3,160,3,161,3,0,0,163,3,164,3,165,3,166,3,167,3,168,3,169,3,170,3,171,3,172,3,173,3,174,3,175,3,176,3,177,3,178,3,179,3,180,3,181,3,182,3,183,3,184,3,185,3,186,3,187,3,188,3,189,3,190,3,191,3,192,3,193,3,194,3,195,3,196,3,197,3,198,3,199,3,200,3,201,3,202,3,203,3,204,3,205,3,206,3,0,0,160,0,161,0,162,0,163,0,164,0,165,0,166,0,167,0,168,0,169,0,170,0,171,0,172,0,173,0,174,0,175,0,176,0,177,0,178,0,179,0,180,0,181,0,182,0,183,0,184,0,185,0,186,0,187,0,188,0,189,0,190,0,191,0,192,0,193,0,194,0,195,0,196,0,197,0,198,0,199,0,200,0,201,0,202,0,203,0,204,0,205,0,206,0,207,0,30,1,209,0,210,0,211,0,212,0,213,0,214,0,215,0,216,0,217,0,218,0,219,0,220,0,48,1,94,1,223,0,224,0,225,0,226,0,227,0,228,0,229,0,230,0,231,0,232,0,233,0,234,0,235,0,236,0,237,0,238,0,239,0,31,1,241,0,242,0,243,0,244,0,245,0,246,0,247,0,248,0,249,0,250,0,251,0,252,0,49,1,95,1,255,0,160,0,2,30,3,30,163,0,10,1,11,1,10,30,167,0,128,30,169,0,130,30,11,30,242,30,173,0,174,0,120,1,30,30,31,30,32,1,33,1,64,30,65,30,182,0,86,30,129,30,87,30,131,30,96,30,243,30,132,30,133,30,97,30,192,0,193,0,194,0,195,0,196,0,197,0,198,0,199,0,200,0,201,0,202,0,203,0,204,0,205,0,206,0,207,0,116,1,209,0,210,0,211,0,212,0,213,0,214,0,106,30,216,0,217,0,218,0,219,0,220,0,221,0,118,1,223,0,224,0,225,0,226,0,227,0,228,0,229,0,230,0,231,0,232,0,233,0,234,0,235,0,236,0,237,0,238,0,239,0,117,1,241,0,242,0,243,0,244,0,245,0,246,0,107,30,248,0,249,0,250,0,251,0,252,0,253,0,119,1,255,0,80,37,81,37,82,37,81,4,83,37,84,37,85,37,86,37,87,37,88,37,89,37,90,37,91,37,92,37,93,37,94,37,95,37,96,37,97,37,1,4,98,37,99,37,100,37,101,37,102,37,103,37,104,37,105,37,106,37,107,37,108,37,169,0,78,4,48,4,49,4,70,4,52,4,53,4,68,4,51,4,69,4,56,4,57,4,58,4,59,4,60,4,61,4,62,4,63,4,79,4,64,4,65,4,66,4,67,4,54,4,50,4,76,4,75,4,55,4,72,4,77,4,73,4,71,4,74,4,46,4,16,4,17,4,38,4,20,4,21,4,36,4,19,4,37,4,24,4,25,4,26,4,27,4,28,4,29,4,30,4,31,4,47,4,32,4,33,4,34,4,35,4,22,4,18,4,44,4,43,4,23,4,40,4,45,4,41,4,39,4,42,4,32,0,1,9,2,9,3,9,5,9,6,9,7,9,8,9,9,9,10,9,11,9,14,9,15,9,16,9,13,9,18,9,19,9,20,9,17,9,21,9,22,9,23,9,24,9,25,9,26,9,27,9,28,9,29,9,30,9,31,9,32,9,33,9,34,9,35,9,36,9,37,9,38,9,39,9,40,9,41,9,42,9,43,9,44,9,45,9,46,9,47,9,95,9,48,9,49,9,50,9,51,9,52,9,53,9,54,9,55,9,56,9,57,9,32,0,62,9,63,9,64,9,65,9,66,9,67,9,70,9,71,9,72,9,69,9,74,9,75,9,76,9,73,9,77,9,60,9,100,9,32,0,32,0,32,0,32,0,32,0,32,0,48,0,49,0,50,0,51,0,52,0,53,0,54,0,55,0,56,0,57,0,32,0,32,0,32,0,32,0,32,0,112,10,113,10,0,0,40,0,41,0,91,0,93,0,123,0,125,0,60,0,62,0,34,0,39,0,96,0,171,0,187,0,10,48,11,48,60,224,0,0,95,0,0,0,170,0,140,0,220,0,220,0,0,0,0,0,250,0,14,1,190,0,170,0,190,0,200,0,0,0,0,0,190,0,240,0,180,0,180,0,210,0,210,0,0,0,0,0,230,0,240,0,170,0,220,0,180,0,180,0,0,0,0,0,250,0,14,1,160,0,140,0,200,0,200,0,0,0,0,0,220,0,230,0,150,0,130,0,200,0,200,0,0,0,0,0,14,1,14,1,200,0,200,0,210,0,210,0,0,0,0,0,230,0,230,0,182,0,140,0,220,0,220,0,0,0,0,0,248,0,19,1,155,0,180,0,210,0,210,0,0,0,0,0,14,1,44,1,150,0,140,0,180,0,180,0,0,0,0,0,200,0,200,0,156,0,170,0,170,0,156,0,0,0,0,0,163,0,200,0,200,0,200,0,200,0,200,0,0,0,0,0,210,0,230,0,173,0,1,0,64,6,1,0,12,32,45,0,13,32,1,0,0,0,0,0,150,0,180,0,200,0,200,0,0,0,0,0,210,0,250,0,190,0,190,0,210,0,210,0,0,0,0,0,230,0,250,0,230,0,230,0,230,0,230,0,0,0,0,0,230,0,230,0,160,0,150,0,200,0,200,0,0,0,0,0,250,0,4,1,180,0,160,0,200,0,200,0,0,0,0,0,220,0,230,0,185,0,195,0,195,0,190,0,0,0,0,0,210,0,220,0,250,0,200,0,250,0,250,0,0,0,0,0,250,0,250,0,160,0,200,0,180,0,180,0,0,0,0,0,220,0,240,0,180,0,160,0,200,0,200,0,0,0,0,0,240,0,250,0,165,0,100,0,170,0,150,0,0,0,0,0,215,0,47,1,145,0,145,0,170,0,160,0,0,0,0,0,74,1,94,1,190,0,180,0,230,0,230], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE);
/* memory initializer */ allocate([250,0,250,0,180,0,180,0,190,0,180,0,0,0,0,0,230,0,240,0,180,0,130,0,210,0,210,0,0,0,0,0,210,0,210,0,180,0,160,0,200,0,200,0,0,0,0,0,220,0,230,0,160,0,135,0,210,0,210,0,0,0,0,0,4,1,24,1,160,0,140,0,200,0,200,0,0,0,0,0,220,0,230,0,200,0,200,0,200,0,200,0,0,0,0,0,200,0,200,0,160,0,190,0,175,0,175,0,0,0,0,0,200,0,210,0,170,0,115,0,210,0,240,0,0,0,0,0,4,1,24,1,170,0,170,0,180,0,180,0,0,0,0,0,240,0,4,1,190,0,190,0,210,0,210,0,0,0,0,0,210,0,210,0,150,0,150,0,180,0,180,0,0,0,0,0,44,1,44,1,160,0,135,0,220,0,220,0,0,0,0,0,250,0,24,1,160,0,170,0,200,0,200,0,0,0,0,0,64,1,84,1,230,0,230,0,240,0,240,0,0,0,0,0,4,1,4,1,180,0,160,0,240,0,240,0,0,0,0,0,4,1,4,1,190,0,180,0,200,0,230,0,0,0,0,0,240,0,250,0,150,0,150,0,180,0,180,0,210,0,230,0,230,0,240,0,230,0,150,0,230,0,230,0,230,0,0,0,240,0,250,0,150,0,140,0,220,0,220,0,0,0,0,0,4,1,24,1,12,1,14,1,19,1,1,3,15,3,14,6,17,6,3,9,1,11,15,11,1,12,9,12,1,14,6,14,9,14,14,14,15,14,28,14,3,15,17,15,18,15,15,16,17,16,1,17,6,17,9,17,15,17,19,18,32,18,255,127,173,0,1,0,12,32,1,0,13,32,1,0,0,0,0,0,182,0,140,0,220,0,220,0,220,0,240,0,4,1,24,1,0,0,231,255,206,255,181,255,156,255,131,255,106,255,81,255,55,255,30,255,5,255,236,254,211,254,186,254,161,254,136,254,111,254,85,254,60,254,35,254,10,254,241,253,216,253,191,253,166,253,141,253,116,253,91,253,66,253,41,253,16,253,247,252,222,252,197,252,172,252,147,252,122,252,97,252,72,252,47,252,22,252,253,251,228,251,203,251,178,251,153,251,128,251,103,251,79,251,54,251,29,251,4,251,235,250,210,250,186,250,161,250,136,250,111,250,87,250,62,250,37,250,13,250,244,249,219,249,195,249,170,249,145,249,121,249,96,249,71,249,47,249,22,249,254,248,229,248,205,248,180,248,156,248,131,248,107,248,83,248,58,248,34,248,10,248,241,247,217,247,193,247,168,247,144,247,120,247,96,247,71,247,47,247,23,247,255,246,231,246,207,246,183,246,159,246,135,246,111,246,87,246,63,246,39,246,15,246,247,245,223,245,199,245,176,245,152,245,128,245,104,245,81,245,57,245,33,245,10,245,242,244,219,244,195,244,172,244,148,244,125,244,101,244,78,244,54,244,31,244,8,244,240,243,217,243,194,243,171,243,148,243,124,243,101,243,78,243,55,243,32,243,9,243,242,242,219,242,196,242,174,242,151,242,128,242,105,242,82,242,60,242,37,242,14,242,248,241,225,241,203,241,180,241,158,241,135,241,113,241,91,241,68,241,46,241,24,241,1,241,235,240,213,240,191,240,169,240,147,240,125,240,103,240,81,240,59,240,37,240,16,240,250,239,228,239,206,239,185,239,163,239,141,239,120,239,98,239,77,239,56,239,34,239,13,239,248,238,226,238,205,238,184,238,163,238,142,238,121,238,100,238,79,238,58,238,37,238,16,238,251,237,231,237,210,237,189,237,169,237,148,237,128,237,107,237,87,237,66,237,46,237,26,237,5,237,241,236,221,236,201,236,181,236,161,236,141,236,121,236,101,236,81,236,61,236,42,236,22,236,2,236,239,235,219,235,200,235,180,235,161,235,141,235,122,235,103,235,84,235,65,235,45,235,26,235,7,235,244,234,226,234,207,234,188,234,169,234,150,234,132,234,113,234,95,234,76,234,58,234,39,234,21,234,3,234,240,233,222,233,204,233,186,233,168,233,150,233,132,233,114,233,97,233,79,233,61,233,44,233,26,233,8,233,247,232,230,232,212,232,195,232,178,232,160,232,143,232,126,232,109,232,92,232,75,232,59,232,42,232,25,232,8,232,248,231,231,231,215,231,198,231,182,231,165,231,149,231,133,231,117,231,101,231,85,231,69,231,53,231,37,231,21,231,5,231,246,230,230,230,215,230,199,230,184,230,168,230,153,230,138,230,123,230,107,230,92,230,77,230,62,230,48,230,33,230,18,230,3,230,245,229,230,229,216,229,201,229,187,229,173,229,158,229,144,229,130,229,116,229,102,229,88,229,74,229,60,229,47,229,33,229,19,229,6,229,248,228,235,228,222,228,208,228,195,228,182,228,169,228,156,228,143,228,130,228,117,228,104,228,92,228,79,228,67,228,54,228,42,228,29,228,17,228,5,228,249,227,237,227,225,227,213,227,201,227,189,227,177,227,165,227,154,227,142,227,131,227,119,227,108,227,97,227,86,227,75,227,63,227,52,227,42,227,31,227,20,227,9,227,255,226,244,226,234,226,223,226,213,226,202,226,192,226,182,226,172,226,162,226,152,226,142,226,132,226,123,226,113,226,103,226,94,226,84,226,75,226,66,226,57,226,47,226,38,226,29,226,20,226,12,226,3,226,250,225,241,225,233,225,224,225,216,225,208,225,199,225,191,225,183,225,175,225,167,225,159,225,151,225,143,225,136,225,128,225,120,225,113,225,106,225,98,225,91,225,84,225,77,225,70,225,63,225,56,225,49,225,42,225,36,225,29,225,22,225,16,225,10,225,3,225,253,224,247,224,241,224,235,224,229,224,223,224,217,224,212,224,206,224,201,224,195,224,190,224,184,224,179,224,174,224,169,224,164,224,159,224,154,224,149,224,145,224,140,224,135,224,131,224,126,224,122,224,118,224,114,224,110,224,106,224,102,224,98,224,94,224,90,224,87,224,83,224,79,224,76,224,73,224,69,224,66,224,63,224,60,224,57,224,54,224,51,224,49,224,46,224,43,224,41,224,39,224,36,224,34,224,32,224,30,224,28,224,26,224,24,224,22,224,20,224,18,224,17,224,15,224,14,224,13,224,11,224,10,224,9,224,8,224,7,224,6,224,5,224,5,224,4,224,3,224,3,224,2,224,2,224,2,224,2,224,2,224,1,224,2,224,2,224,2,224,2,224,2,224,3,224,3,224,4,224,5,224,5,224,6,224,7,224,8,224,9,224,10,224,11,224,13,224,14,224,15,224,17,224,18,224,20,224,22,224,24,224,26,224,28,224,30,224,32,224,34,224,36,224,39,224,41,224,43,224,46,224,49,224,51,224,54,224,57,224,60,224,63,224,66,224,69,224,73,224,76,224,79,224,83,224,87,224,90,224,94,224,98,224,102,224,106,224,110,224,114,224,118,224,122,224,126,224,131,224,135,224,140,224,145,224,149,224,154,224,159,224,164,224,169,224,174,224,179,224,184,224,190,224,195,224,201,224,206,224,212,224,217,224,223,224,229,224,235,224,241,224,247,224,253,224,3,225,10,225,16,225,22,225,29,225,36,225,42,225,49,225,56,225,63,225,70,225,77,225,84,225,91,225,98,225,106,225,113,225,120,225,128,225,136,225,143,225,151,225,159,225,167,225,175,225,183,225,191,225,199,225,208,225,216,225,224,225,233,225,241,225,250,225,3,226,12,226,20,226,29,226,38,226,47,226,57,226,66,226,75,226,84,226,94,226,103,226,113,226,123,226,132,226,142,226,152,226,162,226,172,226,182,226,192,226,202,226,213,226,223,226,234,226,244,226,255,226,9,227,20,227,31,227,42,227,52,227,63,227,75,227,86,227,97,227,108,227,119,227,131,227,142,227,154,227,165,227,177,227,189,227,201,227,213,227,225,227,237,227,249,227,5,228,17,228,29,228,42,228,54,228,67,228,79,228,92,228,104,228,117,228,130,228,143,228,156,228,169,228,182,228,195,228,208,228,222,228,235,228,248,228,6,229,19,229,33,229,47,229,60,229,74,229,88,229,102,229,116,229,130,229,144,229,158,229,173,229,187,229,201,229,216,229,230,229,245,229,3,230,18,230,33,230,48,230,62,230,77,230,92,230,107,230,123,230,138,230,153,230,168,230,184,230,199,230,215,230,230,230,246,230,5,231,21,231,37,231,53,231,69,231,85,231,101,231,117,231,133,231,149,231,165,231,182,231,198,231,215,231,231,231,248,231,8,232,25,232,42,232,59,232,75,232,92,232,109,232,126,232,143,232,160,232,178,232,195,232,212,232,230,232,247,232,8,233,26,233,44,233,61,233,79,233,97,233,114,233,132,233,150,233,168,233,186,233,204,233,222,233,240,233,3,234,21,234,39,234,58,234,76,234,95,234,113,234,132,234,150,234,169,234,188,234,207,234,226,234,244,234,7,235,26,235,45,235,65,235,84,235,103,235,122,235,141,235,161,235,180,235,200,235,219,235,239,235,2,236,22,236,42,236,61,236,81,236,101,236,121,236,141,236,161,236,181,236,201,236,221,236,241,236,5,237,26,237,46,237,66,237,87,237,107,237,128,237,148,237,169,237,189,237,210,237,231,237,251,237,16,238,37,238,58,238,79,238,100,238,121,238,142,238,163,238,184,238,205,238,226,238,248,238,13,239,34,239,56,239,77,239,98,239,120,239,141,239,163,239,185,239,206,239,228,239,250,239,16,240,37,240,59,240,81,240,103,240,125,240,147,240,169,240,191,240,213,240,235,240,1,241,24,241,46,241,68,241,91,241,113,241,135,241,158,241,180,241,203,241,225,241,248,241,14,242,37,242,60,242,82,242,105,242,128,242,151,242,174,242,196,242,219,242,242,242,9,243,32,243,55,243,78,243,101,243,124,243,148,243,171,243,194,243,217,243,240,243,8,244,31,244,54,244,78,244,101,244,125,244,148,244,172,244,195,244,219,244,242,244,10,245,33,245,57,245,81,245,104,245,128,245,152,245,176,245,199,245,223,245,247,245,15,246,39,246,63,246,87,246,111,246,135,246,159,246,183,246,207,246,231,246,255,246,23,247,47,247,71,247,96,247,120,247,144,247,168,247,193,247,217,247,241,247,10,248,34,248,58,248,83,248,107,248,131,248,156,248,180,248,205,248,229,248,254,248,22,249,47,249,71,249,96,249,121,249,145,249,170,249,195,249,219,249,244,249,13,250,37,250,62,250,87,250,111,250,136,250,161,250,186,250,210,250,235,250,4,251,29,251,54,251,79,251,103,251,128,251,153,251,178,251,203,251,228,251,253,251,22,252,47,252,72,252,97,252,122,252,147,252,172,252,197,252,222,252,247,252,16,253,41,253,66,253,91,253,116,253,141,253,166,253,191,253,216,253,241,253,10,254,35,254,60,254,85,254,111,254,136,254,161,254,186,254,211,254,236,254,5,255,30,255,55,255,81,255,106,255,131,255,156,255,181,255,206,255,231,255,0,0,25,0,50,0,75,0,100,0,125,0,150,0,175,0,201,0,226,0,251,0,20,1,45,1,70,1,95,1,120,1,145,1,171,1,196,1,221,1,246,1,15,2,40,2,65,2,90,2,115,2,140,2,165,2,190,2,215,2,240,2,9,3,34,3,59,3,84,3,109,3,134,3,159,3,184,3,209,3,234,3,3,4,28,4,53,4,78,4,103,4,128,4,153,4,177,4,202,4,227,4,252,4,21,5,46,5,70,5,95,5,120,5,145,5,169,5,194,5,219,5,243,5,12,6,37,6,61,6,86,6,111,6,135,6,160,6,185,6,209,6,234,6,2,7,27,7,51,7,76,7,100,7,125,7,149,7,173,7,198,7,222,7,246,7,15,8,39,8,63,8,88,8,112,8,136,8,160,8,185,8,209,8,233,8,1,9,25,9,49,9,73,9,97,9,121,9,145,9,169,9,193,9,217,9,241,9,9,10,33,10,57,10,80,10,104,10,128,10,152,10,175,10,199,10,223,10,246,10,14,11,37,11,61,11,84,11,108,11,131,11,155,11,178,11,202,11,225,11,248,11,16,12,39,12,62,12,85,12,108,12,132,12,155,12,178,12,201,12,224,12,247,12,14,13,37,13,60,13,82,13,105,13,128,13,151,13,174,13,196,13,219,13,242,13,8,14,31,14,53,14,76,14,98,14,121,14,143,14,165,14,188,14,210,14,232,14,255,14,21,15,43,15,65,15,87,15,109,15,131,15,153,15,175,15,197,15,219,15,240,15,6,16,28,16,50,16,71,16,93,16,115,16,136,16,158,16,179,16,200,16,222,16,243,16,8,17,30,17,51,17,72,17,93,17,114,17,135,17,156,17,177,17,198,17,219,17,240,17,5,18,25,18,46,18,67,18,87,18,108,18,128,18,149,18,169,18,190,18,210,18,230,18,251,18,15,19,35,19,55,19,75,19,95,19,115,19,135,19,155,19,175,19,195,19,214,19,234,19,254,19,17,20,37,20,56,20,76,20,95,20,115,20,134,20,153,20,172,20,191,20,211,20,230,20,249,20,12,21,30,21,49,21,68,21,87,21,106,21,124,21,143,21,161,21,180,21,198,21,217,21,235,21,253,21,16,22,34,22,52,22,70,22,88,22,106,22,124,22,142,22,159,22,177,22,195,22,212,22,230,22,248,22,9,23,26,23,44,23,61,23,78,23,96,23,113,23,130,23,147,23,164,23,181,23,197,23,214,23,231,23,248,23,8,24,25,24,41,24,58,24,74,24,91,24,107,24,123,24,139,24,155,24,171,24,187,24,203,24,219,24,235,24,251,24,10,25,26,25,41,25,57,25,72,25,88,25,103,25,118,25,133,25,149,25,164,25,179,25,194,25,208,25,223,25,238,25,253,25,11,26,26,26,40,26,55,26,69,26,83,26,98,26,112,26,126,26,140,26,154,26,168,26,182,26,196,26,209,26,223,26,237,26,250,26,8,27,21,27,34,27,48,27,61,27,74,27,87,27,100,27,113,27,126,27,139,27,152,27,164,27,177,27,189,27,202,27,214,27,227,27,239,27,251,27,7,28,19,28,31,28,43,28,55,28,67,28,79,28,91,28,102,28,114,28,125,28,137,28,148,28,159,28,170,28,181,28,193,28,204,28,214,28,225,28,236,28,247,28,1,29,12,29,22,29,33,29,43,29,54,29,64,29,74,29,84,29,94,29,104,29,114,29,124,29,133,29,143,29,153,29,162,29,172,29,181,29,190,29,199,29,209,29,218,29,227,29,236,29,244,29,253,29,6,30,15,30,23,30,32,30,40,30,48,30,57,30,65,30,73,30,81,30,89,30,97,30,105,30,113,30,120,30,128,30,136,30,143,30,150,30,158,30,165,30,172,30,179,30,186,30,193,30,200,30,207,30,214,30,220,30,227,30,234,30,240,30,246,30,253,30,3,31,9,31,15,31,21,31,27,31,33,31,39,31,44,31,50,31,55,31,61,31,66,31,72,31,77,31,82,31,87,31,92,31,97,31,102,31,107,31,111,31,116,31,121,31,125,31,130,31,134,31,138,31,142,31,146,31,150,31,154,31,158,31,162,31,166,31,169,31,173,31,177,31,180,31,183,31,187,31,190,31,193,31,196,31,199,31,202,31,205,31,207,31,210,31,213,31,215,31,217,31,220,31,222,31,224,31,226,31,228,31,230,31,232,31,234,31,236,31,238,31,239,31,241,31,242,31,243,31,245,31,246,31,247,31,248,31,249,31,250,31,251,31,251,31,252,31,253,31,253,31,254,31,254,31,254,31,254,31,254,31,255,31,254,31,254,31,254,31,254,31,254,31,253,31,253,31,252,31,251,31,251,31,250,31,249,31,248,31,247,31,246,31,245,31,243,31,242,31,241,31,239,31,238,31,236,31,234,31,232,31,230,31,228,31,226,31,224,31,222,31,220,31,217,31,215,31,213,31,210,31,207,31,205,31,202,31,199,31,196,31,193,31,190,31,187,31,183,31,180,31,177,31,173,31,169,31,166,31,162,31,158,31,154,31,150,31,146,31,142,31,138,31,134,31,130,31,125,31,121,31,116,31,111,31,107,31,102,31,97,31,92,31,87,31,82,31,77,31,72,31,66,31,61,31,55,31,50,31,44,31,39,31,33,31,27,31,21,31,15,31,9,31,3,31,253,30,246,30,240,30,234,30,227,30,220,30,214,30,207,30,200,30,193,30,186,30,179,30,172,30,165,30,158,30,150,30,143,30,136,30,128,30,120,30,113,30,105,30,97,30,89,30,81,30,73,30,65,30,57,30,48,30,40,30,32,30,23,30,15,30,6,30,253,29,244,29,236,29,227,29,218,29,209,29,199,29,190,29,181,29,172,29,162,29,153,29,143,29,133,29,124,29,114,29,104,29,94,29,84,29,74,29,64,29,54,29,43,29,33,29,22,29,12,29,1,29,247,28,236,28,225,28,214,28,204,28,193,28,181,28,170,28,159,28,148,28,137,28,125,28,114,28,102,28,91,28,79,28,67,28,55,28,43,28,31,28,19,28,7,28,251,27,239,27,227,27,214,27,202,27,189,27,177,27,164,27,152,27,139,27,126,27,113,27,100,27,87,27,74,27,61,27,48,27,34,27,21,27,8,27,250,26,237,26,223,26,209,26,196,26,182,26,168,26,154,26,140,26,126,26,112,26,98,26,83,26,69,26,55,26,40,26,26,26,11,26,253,25,238,25,223,25,208,25,194,25,179,25,164,25,149,25,133,25,118,25,103,25,88,25,72,25,57,25,41,25,26,25,10,25,251,24,235,24,219,24,203,24,187,24,171,24,155,24,139,24,123,24,107,24,91,24,74,24,58,24,41,24,25,24,8,24,248,23,231,23,214,23,197,23,181,23,164,23,147,23,130,23,113,23,96,23,78,23,61,23,44,23,26,23,9,23,248,22,230,22,212,22,195,22,177,22,159,22,142,22,124,22,106,22,88,22,70,22,52,22,34,22,16,22,253,21,235,21,217,21,198,21,180,21,161,21,143,21,124,21,106,21,87,21,68,21,49,21,30,21,12,21,249,20,230,20,211,20,191,20,172,20,153,20,134,20,115,20,95,20,76,20,56,20,37,20,17,20,254,19,234,19,214,19,195,19,175,19,155,19,135,19,115,19,95,19,75,19,55,19,35,19,15,19,251,18,230,18,210,18,190,18,169,18,149,18,128,18,108,18,87,18,67,18,46,18,25,18,5,18,240,17,219,17,198,17,177,17,156,17,135,17,114,17,93,17,72,17,51,17,30,17,8,17,243,16,222,16,200,16,179,16,158,16,136,16,115,16,93,16,71,16,50,16,28,16,6,16,240,15,219,15,197,15,175,15,153,15,131,15,109,15,87,15,65,15,43,15,21,15,255,14,232,14,210,14,188,14,165,14,143,14,121,14,98,14,76,14,53,14,31,14,8,14,242,13,219,13,196,13,174,13,151,13,128,13,105,13,82,13,60,13,37,13,14,13,247,12,224,12,201,12,178,12,155,12,132,12,108,12,85,12,62,12,39,12,16,12,248,11,225,11,202,11,178,11,155,11,131,11,108,11,84,11,61,11,37,11,14,11,246,10,223,10,199,10,175,10,152,10,128,10,104,10,80,10,57,10,33,10,9,10,241,9,217,9,193,9,169,9,145,9,121,9,97,9,73,9,49,9,25,9,1,9,233,8,209,8,185,8,160,8,136,8,112,8,88,8,63,8,39,8,15,8,246,7,222,7,198,7,173,7,149,7,125,7,100,7,76,7,51,7,27,7,2,7,234,6,209,6,185,6,160,6,135,6,111,6,86,6,61,6,37,6,12,6,243,5,219,5,194,5,169,5,145,5,120,5,95,5,70,5,46,5,21,5,252,4,227,4,202,4,177,4,153,4,128,4,103,4,78,4,53,4,28,4,3,4,234,3,209,3,184,3,159,3,134,3,109,3,84,3,59,3,34,3,9,3,240,2,215,2,190,2,165,2,140,2,115,2,90,2,65,2,40,2,15,2,246,1,221,1,196,1,171,1,145,1,120,1,95,1,70,1,45,1,20,1,251,0,226,0,201,0,175,0,150,0,125,0,100,0,75,0,50,0,25,0,176,4,118,4,64,4,14,4,223,3,180,3,139,3,101,3,65,3,31,3,0,3,226,2,198,2,171,2,146,2,122,2,100,2,78,2,58,2,39,2,21,2,3,2,243,1,227,1,212,1,198,1,184,1,171,1,159,1,147,1,135,1,124,1,114,1,104,1,94,1,85,1,76,1,67,1,59,1,51,1,44,1,36,1,29,1,22,1,16,1,9,1,3,1,253,0,247,0,242,0,237,0,231,0,226,0,221,0,217,0,212,0,208,0,204,0,199,0,195,0,192,0,188,0,184,0,180,0,177,0,174,0,170,0,167,0,164,0,161,0,158,0,155,0,153,0,150,0,147,0,145,0,142,0,140,0,137,0,135,0,133,0,131,0,128,0,126,0,124,0,122,0,120,0,119,0,117,0,115,0,113,0,111,0,110,0,108,0,106,0,105,0,103,0,102,0,100,0,99,0,97,0,96,0,95,0,93,0,92,0,91,0,90,0,88,0,87,0,86,0,85,0,84,0,83,0,82,0,80,0,79,0,78,0,77,0,76,0,75,0,75,0,74,0,73,0,72,0,71,0,70,0,69,0,68,0,68,0,67,0,66,0,65,0,64,0,64,0,63,0,62,0,61,0,61,0,60,0,59,0,59,0,58,0,57,0,57,0,56,0,56,0,55,0,55,0,54,0,54,0,53,0,53,0,52,0,52,0,51,0,51,0,50,0,50,0,49,0,49,0,48,0,48,0,47,0,47,0,46,0,46,0,45,0,45,0,44,0,44,0,43,0,43,0,42,0,42,0,41,0,41,0,41,0,41,0,40,0,40,0,39,0,39,0,38,0,38,0,38,0,38,0,37,0,37,0,36,0,36,0,36,0,36,0,35,0,35,0,35,0,35,0,34,0,34,0,33,0,33,0,33,0,33,0,32,0,32,0,32,0,32,0,31,0,31,0,31,0,31,0,30,0,30,0,30,0,30,0,29,0,29,0,29,0,29,0,28,0,28,0,28,0,28,0,27,0,27,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,7,0,8,0,9,0,10,0,11,0,13,0,14,0,16,0,18,0,20,0,22,0,25,0,28,0,32,0,35,0,40,0,45,0,51,0,57,0,64,0,71,0,80,0,90,0,101,0,114,0,128,0,142,0,159,0,179,0,202,0,227,0,0,1,28,1,62,1,103,1,149,1,199,1,0,2,56,2,126,2,207,2,113,3,143,3,0,4,113,4,252,4,158,5,86,6,31,7,0,8,225,8,248,9,59,11,172,12,61,14,0,16,195,17,240,19,119,22,88,25,123,28,0,32,133,35,223,39,238,44,176,50,246,56,0,64,174,71,164,80,133,91,102,102,51,115,255,127,202,254,112,254,18,2,100,1,224,0,89,0,23,0,246,255,198,255,240,255,205,1,87,2,24,2,189,2,2,3,93,2,241,1,205,1,48,2,148,1,110,0,224,0,131,0,104,0,159,255,155,0,22,1,102,255,115,251,170,253,225,2,125,0,176,253,41,0,11,0,9,255,246,255,65,0,92,0,80,0,208,254,71,0,167,0,255,255,122,0,233,0,161,0,213,255,22,1,223,1,229,1,151,1,10,1,138,2,134,0,80,0,236,0,68,0,4,1,13,1,179,0,53,0,140,0,19,1,37,1,40,1,104,0,1,1,152,0,55,1,182,0,7,1,245,0,125,0,58,1,140,0,44,0,203,0,230,0,21,255,226,254,23,0,107,0,92,0,165,255,38,0,208,1,187,1,176,0,98,0,240,252,111,246,157,248,235,251,192,249,74,250,152,250,19,251,75,252,38,253,23,10,212,9,146,9,80,9,15,9,206,8,143,8,79,8,19,8,213,7,154,7,98,7,40,7,243,6,190,6,139,6,90,6,43,6,253,5,211,5,169,5,129,5,92,5,56,5,22,5,247,4,215,4,187,4,160,4,134,4,110,4,87,4,65,4,45,4,25,4,7,4,245,3,228,3,212,3,197,3,182,3,168,3,153,3,141,3,127,3,113,3,101,3,87,3,75,3,62,3,50,3,36,3,24,3,11,3,254,2,242,2,228,2,216,2,203,2,190,2,177,2,164,2,151,2,139,2,125,2,114,2,100,2,89,2,76,2,64,2,52,2,40,2,28,2,18,2,5,2,251,1,240,1,229,1,219,1,208,1,198,1,187,1,178,1,168,1,158,1,148,1,138,1,129,1,119,1,110,1,99,1,91,1,80,1,72,1,61,1,52,1,43,1,32,1,24,1,13,1,4,1,250,0,240,0,231,0,220,0,212,0,200,0,192,0,181,0,172,0,161,0,152,0,142,0,133,0,123,0,113,0,105,0,94,0,86,0,76,0,67,0,57,0,49,0,39,0,30,0,22,0,11,0,4,0,251,255,242,255,233,255,224,255,215,255,206,255,196,255,187,255,178,255,169,255,160,255,149,255,141,255,130,255,122,255,112,255,102,255,92,255,82,255,73,255,63,255,53,255,43,255,34,255,23,255,14,255,4,255,250,254,241,254,231,254,221,254,211,254,202,254,192,254,182,254,173,254,163,254,155,254,144,254,135,254,125,254,115,254,106,254,95,254,86,254,76,254,66,254,56,254,45,254,35,254,25,254,13,254,3,254,247,253,236,253,225,253,213,253,201,253,189,253,177,253,165,253,152,253,140,253,127,253,115,253,102,253,89,253,76,253,63,253,51,253,36,253,25,253,10,253,255,252,241,252,229,252,216,252,204,252,190,252,179,252,164,252,152,252,139,252,126,252,113,252,98,252,85,252,69,252,56,252,38,252,25,252,6,252,246,251,226,251,208,251,186,251,165,251,142,251,118,251,92,251,65,251,36,251,6,251,229,250,196,250,159,250,121,250,83,250,40,250,254,249,208,249,161,249,112,249,60,249,9,249,209,248,154,248,96,248,38,248,232,247,171,247,108,247,44,247,235,246,170,246,104,246,38,246,227,245,24,1,176,2,40,4,246,10,188,12,116,14,100,25,88,27,64,31,24,1,89,0,160,0,70,0,160,0,200,0,200,0,244,1,244,1,244,1,89,0,0,0,59,0,59,0,59,0,59,0,59,0,59,0,0,0,0,0,0,0,59,0,59,0,89,0,149,0,200,0,200,0,244,1,0,0,0,0,0,0,73,0,49,1,83,0,127,1,48,1,105,0,120,1,255,0,129,1,83,2,130,1,131,1,132,1,133,1,134,1,84,2,135,1,136,1,137,1,86,2,138,1,87,2,139,1,140,1,142,1,221,1,143,1,89,2,144,1,91,2,145,1,146,1,147,1,96,2,148,1,99,2,150,1,105,2,151,1,104,2,152,1,153,1,156,1,111,2,157,1,114,2,159,1,117,2,166,1,128,2,167,1,168,1,169,1,131,2,172,1,173,1,174,1,136,2,175,1,176,1,177,1,138,2,178,1,139,2,183,1,146,2,184,1,185,1,188,1,189,1,196,1,198,1,196,1,197,1,197,1,198,1,199,1,201,1,199,1,200,1,200,1,201,1,202,1,204,1,202,1,203,1,203,1,204,1,241,1,243,1,241,1,242,1,242,1,243,1,244,1,245,1,246,1,149,1,247,1,191,1,32,2,158,1,134,3,172,3,136,3,173,3,137,3,174,3,138,3,175,3,140,3,204,3,142,3,205,3,143,3,206,3,153,3,69,3,153,3,190,31,163,3,194,3,247,3,248,3,250,3,251,3,96,30,155,30,158,30,223,0,89,31,81,31,91,31,83,31,93,31,85,31,95,31,87,31,188,31,179,31,204,31,195,31,236,31,229,31,252,31,243,31,58,2,101,44,59,2,60,2,61,2,154,1,62,2,102,44,65,2,66,2,67,2,128,1,68,2,137,2,69,2,140,2,244,3,184,3,249,3,242,3,253,3,123,3,254,3,124,3,255,3,125,3,192,4,207,4,38,33,201,3,42,33,107,0,43,33,229,0,50,33,78,33,131,33,132,33,96,44,97,44,98,44,107,2,99,44,125,29,100,44,125,2,109,44,81,2,110,44,113,2,111,44,80,2,112,44,82,2,114,44,115,44,117,44,118,44,126,44,63,2,127,44,64,2,242,44,243,44,125,167,121,29,139,167,140,167,141,167,101,2,170,167,102,2,199,16,39,45,205,16,45,45,118,3,119,3,156,3,181,0,146,3,208,3,152,3,209,3,166,3,213,3,160,3,214,3,154,3,240,3,161,3,241,3,149,3,245,3,207,3,215,3,0,0,0,0,65,0,32,26,192,0,32,31,0,1,1,47,50,1,1,5,57,1,1,15,74,1,1,45,121,1,1,5,112,3,1,3,145,3,32,17,163,3,32,9,0,4,80,16,16,4,32,32,96,4,1,33,138,4,1,53,193,4,1,13,208,4,1,63,20,5,1,19,49,5,48,38,160,1,1,5,179,1,1,3,205,1,1,15,222,1,1,17,248,1,1,39,34,2,1,17,216,3,1,23,0,30,1,149,160,30,1,95,8,31,248,8,24,31,248,6,40,31,248,8,56,31,248,8,72,31,248,6,104,31,248,8,136,31,248,8,152,31,248,8,168,31,248,8,184,31,248,2,186,31,182,2,200,31,170,4,216,31,248,2,218,31,156,2,232,31,248,2,234,31,144,2,248,31,128,2,250,31,130,2,70,2,1,9,16,5,1,3,96,33,16,16,0,44,48,47,103,44,1,5,128,44,1,99,235,44,1,3,64,166,1,45,128,166,1,23,34,167,1,13,50,167,1,61,121,167,1,3,126,167,1,9,144,167,1,3,160,167,1,9,33,255,32,26,0,0,0,0,67,97,110,39,116,32,97,108,108,111,99,97,116,101,32,109,101,109,111,114,121,10,0,85,84,70,45,56,0,101,110,95,85,83,46,85,84,70,45,56,0,73,78,73,84,32,109,111,100,101,32,37,100,32,111,112,116,105,111,110,115,32,48,120,37,120,10,0,10,83,89,78,84,72,32,112,111,115,110,32,37,100,32,37,100,32,37,100,32,102,108,97,103,115,32,48,120,37,120,10,37,115,10,0,83,69,84,80,65,82,65,77,32,37,100,32,37,100,32,37,100,10,0,37,115,47,101,115,112,101,97,107,45,100,97,116,97,0,69,83,80,69,65,75,95,68,65,84,65,95,80,65,84,72,0,72,79,77,69,0,47,101,115,112,101,97,107,45,100,97,116,97,0,70,97,105,108,101,100,32,116,111,32,108,111,97,100,32,101,115,112,101,97,107,45,100,97,116,97,10,0,87,114,111,110,103,32,118,101,114,115,105,111,110,32,111,102,32,101,115,112,101,97,107,45,100,97,116,97,32,48,120,37,120,32,40,101,120,112,101,99,116,115,32,48,120,37,120,41,32,97,116,32,37,115,10,0,117,110,112,114,0,110,111,112,114,101,102,105,120,0,108,105,115,116,0,119,95,97,108,116,49,0,119,95,97,108,116,50,0,119,95,97,108,116,51,0,119,95,97,108,116,52,0,119,95,97,108,116,53,0,119,95,97,108,116,54,0,119,95,97,108,116,0,112,95,97,108,116,49,0,112,95,97,108,116,50,0,112,95,97,108,116,51,0,112,95,97,108,116,52,0,112,95,97,108,116,53,0,112,95,97,108,116,54,0,112,95,97,108,116,0,36,49,0,36,50,0,36,51,0,36,52,0,36,53,0,36,54,0,36,55,0,36,117,0,36,117,49,0,36,117,50,0,36,117,51,0,36,117,43,0,36,117,49,43,0,36,117,50,43,0,36,117,51,43,0,36,112,97,117,115,101,0,36,115,116,114,101,110,100,0,36,115,116,114,101,110,100,50,0,36,117,110,115,116,114,101,115,115,101,110,100,0,36,97,99,99,101,110,116,95,98,101,102,111,114,101,0,36,97,98,98,114,101,118,0,36,100,111,117,98,108,101,0,36,97,108,116,0,36,97,108,116,49,0,36,97,108,116,50,0,36,97,108,116,51,0,36,97,108,116,52,0,36,97,108,116,53,0,36,97,108,116,54,0,36,97,108,116,55,0,36,99,111,109,98,105,110,101,0,36,100,111,116,0,36,104,97,115,100,111,116,0,36,109,97,120,51,0,36,98,114,107,0,36,116,101,120,116,0,36,118,101,114,98,102,0,36,118,101,114,98,115,102,0,36,110,111,117,110,102,0,36,112,97,115,116,102,0,36,118,101,114,98,0,36,110,111,117,110,0,36,112,97,115,116,0,36,118,101,114,98,101,120,116,101,110,100,0,36,99,97,112,105,116,97,108,0,36,97,108,108,99,97,112,115,0,36,97,99,99,101,110,116,0,36,115,101,110,116,101,110,99,101,0,36,111,110,108,121,0,36,111,110,108,121,115,0,36,115,116,101,109,0,36,97,116,101,110,100,0,36,97,116,115,116,97,114,116,0,36,110,97,116,105,118,101,0,36,63,0,36,116,101,120,116,109,111,100,101,0,36,112,104,111,110,101,109,101,109,111,100,101,0,32,40,0,37,99,37,100,0,65,66,67,72,70,71,89,32,32,32,32,32,32,32,32,32,32,38,37,43,35,83,68,90,65,76,33,32,64,63,74,78,75,86,63,84,88,63,87,37,53,100,58,9,0,63,37,100,32,0,101,105,112,118,100,102,113,32,116,98,97,32,0,37,115,37,99,37,115,95,100,105,99,116,0,67,97,110,39,116,32,114,101,97,100,32,100,105,99,116,105,111,110,97,114,121,32,102,105,108,101,58,32,39,37,115,39,10,0,69,109,112,116,121,32,95,100,105,99,116,32,102,105,108,101,58,32,39,37,115,10,0,66,97,100,32,100,97,116,97,58,32,39,37,115,39,32,40,37,120,32,108,101,110,103,116,104,61,37,120,41,10,0,70,117,108,108,32,100,105,99,116,105,111,110,97,114,121,32,105,115,32,110,111,116,32,105,110,115,116,97,108,108,101,100,32,102,111,114,32,39,37,115,39,10,0,66,97,100,32,114,117,108,101,115,32,100,97,116,97,32,105,110,32,39,37,115,95,100,105,99,116,39,32,97,116,32,48,120,37,120,10,0,42,32,0,61,61,44,44,39,42,32,32,0,40,37,115,41,0,61,61,44,44,39,39,0,97,97,97,97,97,97,97,99,101,101,101,101,105,105,105,105,100,110,111,111,111,111,111,0,111,117,117,117,117,121,116,115,97,97,97,97,97,97,97,99,101,101,101,101,105,105,105,105,100,110,111,111,111,111,111,0,111,117,117,117,117,121,116,121,97,97,97,97,97,97,99,99,99,99,99,99,99,99,100,100,100,100,101,101,101,101,101,101,101,101,101,101,103,103,103,103,103,103,103,103,104,104,104,104,105,105,105,105,105,105,105,105,105,105,105,105,106,106,107,107,107,108,108,108,108,108,108,108,108,108,108,110,110,110,110,110,110,110,110,110,111,111,111,111,111,111,111,111,114,114,114,114,114,114,115,115,115,115,115,115,115,115,116,116,116,116,116,116,117,117,117,117,117,117,117,117,117,117,117,117,119,119,121,121,121,122,122,122,122,122,122,115,98,98,98,98,0,0,111,99,99,100,100,100,100,100,101,101,101,102,102,103,103,104,105,105,107,107,108,108,109,110,110,111,111,111,111,111,112,112,121,0,0,115,115,116,116,116,116,117,117,117,118,121,121,122,122,122,122,122,122,122,0,0,0,119,116,116,116,107,100,100,100,108,108,108,110,110,110,97,97,105,105,111,111,117,117,117,117,117,117,117,117,117,117,101,97,97,97,97,97,97,103,103,103,103,107,107,111,111,111,111,122,122,106,100,100,100,103,103,119,119,110,110,97,97,97,97,111,111,97,97,97,97,101,101,101,101,105,105,105,105,111,111,111,111,114,114,114,114,117,117,117,117,115,115,116,116,121,121,104,104,110,100,111,111,122,122,97,97,101,101,111,111,111,111,111,111,111,111,121,121,108,110,116,106,100,113,97,99,99,108,116,115,122,0,0,98,117,118,101,101,106,106,113,113,114,114,121,121,97,97,97,98,111,99,100,100,101,101,101,101,101,101,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,85,110,112,114,111,110,111,117,110,99,97,98,108,101,63,32,39,37,115,39,10,0,84,114,97,110,115,108,97,116,101,32,39,37,115,39,10,0,11,0,37,51,100,9,37,115,32,91,37,115,93,10,0,82,101,112,108,97,99,101,58,32,37,115,32,32,37,115,10,0,70,108,97,103,115,58,32,32,37,115,32,32,37,115,10,0,70,111,117,110,100,58,32,39,37,115,32,37,115,10,0,70,111,117,110,100,58,32,39,37,115,0,39,32,91,37,115,93,32,32,37,115,10,0,3,2,4,5,6,7,26,0,0,0,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,1,1,2,2,3,3,4,5,6,7,7,8,9,10,0,0,1,2,3,3,3,4,5,6,7,7,7,8,9,10,0,0,1,1,2,3,3,4,5,6,7,7,8,9,10,11,97,100,100,32,101,10,0,99,0,114,115,0,105,114,0,117,114,0,97,116,104,0,110,115,0,117,0,105,111,110,0,255,253,250,248,246,244,242,240,238,236,234,232,230,228,226,224,222,220,218,216,214,212,210,208,206,204,202,200,198,196,194,192,190,188,186,184,182,180,178,176,174,172,170,168,166,164,162,160,158,156,154,152,150,148,146,144,142,140,138,136,134,132,130,128,126,124,122,120,118,116,114,112,110,108,106,104,102,100,98,96,94,92,90,88,86,84,82,80,78,76,74,72,70,68,66,64,62,60,58,56,54,52,50,48,46,44,42,40,38,36,34,32,30,28,26,24,22,20,18,16,14,12,10,8,6,4,2,0,0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,38,40,42,44,46,48,50,52,54,56,58,60,62,64,66,68,70,72,74,76,78,80,82,84,86,88,90,92,94,96,98,100,102,104,106,108,110,112,114,116,118,120,122,124,126,128,130,132,134,136,138,140,142,144,146,148,150,152,154,156,158,160,162,164,166,168,170,172,174,176,178,180,182,184,186,188,190,192,194,196,198,200,202,204,206,208,210,212,214,216,218,220,222,224,226,228,230,232,234,236,238,240,242,244,246,248,250,253,255,255,244,234,224,214,204,195,186,177,168,159,151,143,135,127,120,113,106,99,92,86,80,74,68,63,57,52,47,43,38,34,30,26,23,19,16,13,11,8,6,4,2,1,0,0,0,0,0,0,0,1,2,3,4,5,7,8,10,12,14,16,19,21,23,26,29,31,34,37,40,44,46,48,50,52,54,57,59,61,64,66,69,71,74,76,79,81,84,87,90,93,95,98,101,104,107,110,113,116,120,123,126,129,133,136,139,143,146,150,153,157,160,164,168,172,175,179,183,187,191,195,199,203,207,211,215,219,224,207,204,201,198,195,192,189,185,180,176,171,167,162,156,151,146,140,134,129,123,117,111,105,99,93,87,80,74,68,62,56,51,45,39,34,28,23,18,13,8,4,2,2,1,0,0,0,0,0,1,1,2,3,4,5,7,8,10,12,13,15,18,20,22,25,27,30,33,36,39,42,45,48,52,54,56,58,60,63,65,67,70,72,75,77,80,82,85,88,90,93,96,99,102,105,108,111,114,117,120,123,126,129,133,136,139,143,146,150,153,157,160,164,168,172,175,179,183,187,191,195,199,203,207,211,215,219,224,255,249,244,238,233,228,223,218,213,208,203,198,193,189,184,179,175,170,166,161,157,153,149,144,140,136,132,128,125,121,117,113,110,106,103,99,96,93,89,86,83,80,77,74,71,68,65,62,60,57,55,52,50,47,45,43,40,38,36,34,32,30,28,26,25,23,21,20,18,17,15,14,13,12,10,9,8,7,6,5,5,4,3,2,2,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,2,2,3,4,4,5,6,7,8,9,10,11,12,14,15,16,18,19,21,23,24,26,28,30,32,208,206,205,204,202,200,199,197,195,193,192,189,187,184,181,179,176,173,170,167,163,160,157,153,150,146,143,139,135,132,128,124,120,116,112,109,105,101,97,93,89,85,81,77,74,70,66,62,59,55,52,49,47,45,42,40,38,36,34,32,30,28,26,25,23,21,20,18,17,15,14,13,12,10,9,8,7,6,5,5,4,3,2,2,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,2,2,3,4,4,5,6,7,8,9,10,11,12,14,15,16,18,19,21,23,24,26,28,30,32,152,153,153,154,156,157,159,161,164,167,169,172,176,179,182,186,190,193,197,201,205,209,212,216,220,223,227,230,234,237,240,242,245,247,249,251,252,253,254,254,255,255,255,255,255,255,254,253,251,250,248,246,243,241,238,236,233,230,228,224,221,218,215,211,208,204,200,196,192,188,184,180,176,172,167,163,159,154,150,145,141,136,132,127,123,118,114,109,105,101,96,92,88,84,80,76,72,68,64,60,57,53,50,47,43,40,38,35,32,29,26,23,21,18,15,13,10,8,7,5,3,2,1,0,0,0,0,0,254,255,255,255,255,255,254,253,252,250,248,246,244,241,238,235,232,229,225,222,218,214,210,205,201,196,191,186,182,176,171,166,161,156,150,145,139,134,128,123,117,111,106,100,95,89,84,79,73,68,63,58,53,48,43,38,34,29,25,21,17,13,10,7,4,3,1,0,0,0,0,0,0,0,0,1,1,2,4,5,7,9,11,13,16,18,21,24,27,30,34,37,41,45,49,53,58,62,67,72,76,81,87,91,94,98,101,104,107,110,113,116,118,120,123,124,126,128,129,130,131,131,132,132,131,131,130,129,114,114,113,113,112,111,109,108,106,104,102,100,97,95,92,90,87,84,81,78,75,72,69,66,63,59,56,53,50,47,44,41,38,35,32,29,27,24,22,20,18,16,14,12,11,10,9,8,7,7,7,7,7,6,5,5,5,5,5,5,5,5,5,6,7,7,8,9,10,12,13,15,16,18,20,22,24,27,29,32,35,38,41,44,47,51,55,59,63,67,71,76,81,86,91,96,101,106,111,116,121,127,132,137,143,149,155,161,167,173,179,186,192,199,206,213,220,227,234,241,245,247,250,252,253,254,255,255,254,254,253,253,252,251,251,250,250,249,248,248,247,247,246,246,245,244,244,243,243,242,242,241,240,240,239,238,238,237,236,235,234,234,233,232,231,230,229,228,227,226,225,224,222,221,220,219,217,216,214,213,211,210,208,206,204,203,201,199,197,195,192,190,188,185,183,181,178,175,173,170,167,164,161,158,154,151,148,144,141,137,133,129,125,121,117,113,109,104,100,97,94,91,87,84,81,77,74,70,67,64,60,57,53,50,46,42,39,35,31,28,24,20,17,13,11,9,7,5,4,3,2,1,0,0,0,0,0,0,0,0,1,1,1,2,2,3,3,4,4,5,6,6,7,8,8,9,10,11,12,12,13,14,15,16,17,18,19,20,22,23,24,25,27,28,29,31,32,34,35,37,38,40,41,43,45,47,48,50,52,54,56,58,60,62,64,66,68,71,73,75,78,80,82,85,87,90,93,95,98,101,103,106,109,112,115,118,121,124,127,130,134,137,140,144,147,150,154,157,160,163,166,169,172,175,178,181,184,187,190,193,196,199,202,205,208,211,214,217,220,223,226,228,231,233,236,238,240,242,244,246,248,250,251,253,127,127,127,128,129,131,132,135,137,140,143,146,150,153,157,161,165,170,174,178,183,187,192,197,201,205,210,214,218,222,226,230,234,237,240,243,245,248,250,251,252,253,254,254,253,252,251,249,247,244,240,236,231,226,220,213,206,198,189,180,169,158,146,136,130,125,119,114,108,102,96,90,84,78,73,66,60,55,50,45,40,36,31,27,24,20,17,14,12,9,7,6,5,4,4,4,4,5,6,8,10,13,16,20,24,29,35,41,47,55,62,71,80,90,100,112,124,131,133,136,138,140,142,143,145,146,147,147,0,1,2,3,0,4,0,1,2,3,0,4,5,6,2,3,0,4,5,7,1,3,0,4,8,9,10,3,0,0,8,8,10,3,0,0,11,11,11,11,0,0,12,12,12,12,0,0,230,32,20,8,0,0,40,24,8,0,10,52,32,20,10,6,38,24,14,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,254,0,0,0,0,0,0,0,0,0,0,255,0,0,0,0,254,0,0,0,0,0,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,0,32,32,32,32,32,32,32,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,0,255,255,255,255,255,255,255,255,1,255,1,255,1,255,1,255], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+10244);
/* memory initializer */ allocate([1,255,1,255,1,255,1,255,1,255,1,255,1,255,1,255,1,255,1,255,1,255,1,255,1,255,1,255,1,255,1,255,1,255,1,255,1,255,1,255,253,255,1,255,1,255,1,255,254,1,255,1,255,1,255,1,255,1,255,1,255,1,255,1,255,254,1,255,1,255,1,255,1,255,1,255,1,255,1,255,1,255,1,255,1,255,1,255,1,255,1,255,1,255,1,255,1,255,1,255,1,255,1,255,1,255,1,255,1,255,1,255,253,1,255,1,255,1,255,255,255,210,1,255,1,255,206,1,255,205,205,1,255,254,79,202,203,1,255,205,207,255,211,209,1,255,255,254,211,213,255,214,1,255,1,255,1,255,218,1,255,218,254,254,1,255,218,1,255,217,217,1,255,1,255,219,1,255,254,254,1,255,254,255,254,254,254,254,2,255,255,2,255,255,2,255,255,1,255,1,255,1,255,1,255,1,255,1,255,1,255,1,255,255,1,255,1,255,1,255,1,255,1,255,1,255,1,255,1,255,1,255,254,2,255,255,1,255,253,253,1,255,1,255,1,255,1,255,1,255,1,255,1,255,1,255,1,255,1,255,1,255,1,255,1,255,1,255,1,255,1,255,1,255,1,255,1,255,1,255,253,254,1,255,1,255,1,255,1,255,1,255,1,255,1,255,1,255,1,255,254,254,254,254,254,254,253,1,255,253,253,254,254,1,255,253,69,71,1,255,1,255,1,255,1,255,1,255,33,118,0,37,115,37,99,37,99,0,32,32,32,0,105,32,0,91,2,95,94,95,37,115,32,37,115,32,95,94,95,37,115,93,93,0,91,2,37,115,93,93,32,0,91,2,40,88,49,41,40,88,49,41,40,88,49,41,93,93,0,1,37,100,73,32,0,95,46,112,0,32,37,115,0,1,43,49,48,83,0,32,1,45,49,48,83,0,32,37,115,32,37,100,32,37,115,0,37,115,37,99,115,111,117,110,100,105,99,111,110,115,37,99,37,115,0,47,116,109,112,47,101,115,112,101,97,107,88,88,88,88,88,88,0,115,111,120,32,34,37,115,34,32,45,114,32,37,100,32,45,99,49,32,45,116,32,119,97,118,32,37,115,10,0,91,2,37,115,93,93,0,0,1,1,1,1,0,0,0,0,1,1,0,1,0,1,0,0,0,0,102,105,101,108,100,0,109,111,100,101,0,112,117,110,99,116,117,97,116,105,111,110,0,99,97,112,105,116,97,108,95,108,101,116,116,101,114,115,0,108,101,118,101,108,0,50,50,40,70,90,100,100,100,70,110,135,150,100,100,75,100,120,150,105,110,116,101,114,112,114,101,116,45,97,115,0,102,111,114,109,97,116,0,100,101,116,97,105,108,0,37,99,37,100,89,0,97,108,105,97,115,0,37,99,37,100,77,0,115,114,99,0,37,115,47,37,115,0,37,99,37,100,73,0,37,99,37,100,85,0,115,116,114,101,110,103,116,104,0,37,99,37,100,66,0,116,105,109,101,0,120,109,108,58,98,97,115,101,0,120,109,108,58,108,97,110,103,0,97,103,101,0,110,101,117,116,114,97,108,0,110,111,110,101,0,120,45,119,101,97,107,0,119,101,97,107,0,109,101,100,105,117,109,0,115,116,114,111,110,103,0,120,45,115,116,114,111,110,103,0,115,112,97,99,101,32,0,116,97,98,32,0,117,110,100,101,114,115,99,111,114,101,32,0,100,111,117,98,108,101,45,113,117,111,116,101,32,0,103,108,121,112,104,115,0,99,104,97,114,97,99,116,101,114,115,0,116,116,115,58,99,104,97,114,0,116,116,115,58,107,101,121,0,116,116,115,58,100,105,103,105,116,115,0,116,101,108,101,112,104,111,110,101,0,114,101,100,117,99,101,100,0,109,111,100,101,114,97,116,101,0,120,45,108,111,119,0,108,111,119,0,104,105,103,104,0,120,45,104,105,103,104,0,115,105,108,101,110,116,0,120,45,115,111,102,116,0,115,111,102,116,0,108,111,117,100,0,120,45,108,111,117,100,0,120,45,115,108,111,119,0,115,108,111,119,0,102,97,115,116,0,120,45,102,97,115,116,0,114,97,116,101,0,118,111,108,117,109,101,0,114,97,110,103,101,0,0,83,65,80,82,0,67,0,0,0,0,0,70,0,0,37,99,37,100,37,99,0,110,111,0,115,112,101,108,108,105,110,103,0,105,99,111,110,0,97,108,108,0,115,111,109,101,0,115,112,101,97,107,0,118,111,105,99,101,0,112,114,111,115,111,100,121,0,115,97,121,45,97,115,0,109,97,114,107,0,115,0,112,0,112,104,111,110,101,109,101,0,115,117,98,0,116,116,115,58,115,116,121,108,101,0,97,117,100,105,111,0,101,109,112,104,97,115,105,115,0,98,114,101,97,107,0,109,101,116,97,100,97,116,97,0,98,114,0,108,105,0,100,100,0,105,109,103,0,116,100,0,104,49,0,104,50,0,104,51,0,104,52,0,104,114,0,115,99,114,105,112,116,0,115,116,121,108,101,0,102,111,110,116,0,98,0,105,0,101,109,0,99,111,100,101,0,103,116,0,108,116,0,97,109,112,0,113,117,111,116,0,110,98,115,112,0,97,112,111,115,0,255,31,15,7,255,255,255,255,255,253,249,245,242,238,235,232,228,225,222,218,216,213,210,207,204,201,198,196,193,191,188,186,183,181,179,176,174,172,169,168,165,163,161,159,158,155,153,152,150,148,146,145,143,141,139,137,136,135,133,131,130,129,127,126,124,123,122,120,119,118,117,115,114,113,112,111,110,109,107,106,105,104,103,102,101,100,99,98,97,96,95,94,93,92,91,90,89,89,88,87,86,85,84,83,82,82,81,80,80,79,78,77,76,76,75,75,74,73,72,71,71,70,69,69,68,67,67,66,66,65,64,64,63,62,62,61,61,60,59,59,58,58,57,57,56,56,55,54,54,53,53,52,52,52,51,50,50,49,49,48,48,47,47,46,46,46,45,45,44,44,44,43,43,42,41,40,40,40,39,39,39,38,38,38,37,37,37,36,36,35,35,35,35,34,34,34,33,33,33,32,32,31,31,31,30,30,30,29,29,29,29,28,28,27,27,27,27,26,26,26,26,25,25,25,24,24,24,24,23,23,23,23,22,22,22,21,21,21,21,20,20,20,20,19,19,19,18,18,17,17,17,16,16,16,16,16,16,15,15,15,15,14,14,14,13,13,13,12,12,12,12,11,11,11,11,10,10,10,9,9,9,8,8,8,120,121,120,119,119,118,118,117,116,116,115,114,113,112,112,111,111,110,109,108,107,106,106,104,103,103,102,102,102,101,101,99,98,98,97,96,96,95,94,93,91,90,91,90,89,88,86,85,86,85,85,84,82,81,80,79,77,78,78,76,77,75,75,74,73,71,72,70,69,69,69,67,65,64,63,63,63,61,61,59,59,59,58,56,57,58,56,54,53,52,52,53,52,52,50,48,47,47,45,46,45,22,22,22,22,22,22,22,21,21,21,21,20,20,19,19,18,17,16,15,15,15,15,15,15,15,101,115,112,101,97,107,58,32,66,97,100,32,105,110,116,111,110,97,116,105,111,110,32,100,97,116,97,10,0,37,115,37,99,37,115,37,99,37,115,37,115,0,37,115,37,99,37,99,37,115,0,37,99,37,115,37,99,37,115,37,99,0,95,108,105,103,0,95,115,109,99,0,95,116,117,114,0,95,114,101,118,0,95,99,114,108,0,95,97,99,117,0,95,98,114,118,0,95,104,97,99,0,95,99,101,100,0,95,99,105,114,0,95,100,105,97,0,95,97,99,50,0,95,100,111,116,0,95,103,114,118,0,95,109,99,110,0,95,111,103,111,0,95,114,110,103,0,95,115,116,107,0,95,116,108,100,0,95,98,97,114,0,95,114,102,120,0,95,104,111,107,0,95,35,37,100,32,0,95,99,97,112,0,95,63,65,0,95,63,63,0,108,39,101,116,64,0,37,120,0,9,0,37,99,37,115,37,115,37,115,0,39,101,58,106,0,98,39,105,58,0,115,39,105,58,0,100,39,105,58,0,39,105,58,0,39,101,102,0,95,115,117,98,0,95,115,117,112,0,95,114,111,109,97,110,0,32,32,37,100,32,37,115,32,32,32,32,0,95,35,37,115,0,95,120,35,37,115,0,95,48,0,95,100,112,116,0,95,48,77,37,100,0,95,46,0,95,37,100,110,0,37,0,37,115,37,115,37,99,37,115,37,115,0,37,115,37,115,37,115,37,99,37,115,0,95,48,90,37,100,0,95,37,99,100,0,95,100,112,116,50,0,11,0,95,37,100,102,120,0,95,37,100,102,0,95,37,100,37,99,120,0,95,37,100,37,99,0,95,37,100,101,0,95,37,100,111,0,95,37,100,97,0,95,37,100,0,95,37,100,88,37,99,0,95,37,100,88,102,0,95,37,100,88,0,95,111,114,100,50,48,0,95,111,114,100,0,95,48,97,110,100,0,37,115,37,115,37,115,37,115,0,95,48,67,111,0,95,48,67,48,0,95,48,67,0,37,115,37,99,37,115,37,99,0,95,37,100,67,111,0,95,37,100,67,48,0,95,37,100,67,0,95,37,100,77,37,100,111,0,95,37,100,77,37,100,101,0,95,37,100,77,37,100,120,0,95,37,100,77,37,100,0,95,48,111,102,0,95,37,115,37,100,111,0,95,37,115,37,100,101,0,95,37,115,37,100,120,0,95,37,115,37,100,0,95,48,77,50,0,95,37,100,77,49,0,95,48,77,49,0,49,77,0,48,77,65,0,48,77,66,0,48,77,0,105,120,99,109,118,108,100,0,37,115,47,109,98,114,111,108,97,47,37,115,0,47,117,115,114,47,115,104,97,114,101,47,109,98,114,111,108,97,47,37,115,0,47,117,115,114,47,115,104,97,114,101,47,109,98,114,111,108,97,47,37,115,47,37,115,0,47,117,115,114,47,115,104,97,114,101,47,109,98,114,111,108,97,47,118,111,105,99,101,115,47,37,115,0,37,115,47,109,98,114,111,108,97,95,112,104,47,37,115,0,37,115,9,0,37,100,9,37,115,0,37,115,9,37,100,9,37,115,0,37,100,10,37,115,9,0,37,100,37,115,10,0,95,32,9,37,100,10,0,32,48,32,37,100,0,32,37,100,32,37,100,0,10,0,9,49,48,48,32,37,100,10,0,112,104,111,110,116,97,98,0,112,104,111,110,105,110,100,101,120,0,112,104,111,110,100,97,116,97,0,105,110,116,111,110,97,116,105,111,110,115,0,114,98,0,67,97,110,39,116,32,114,101,97,100,32,100,97,116,97,32,102,105,108,101,58,32,39,37,115,39,10,0,101,115,112,101,97,107,58,32,78,111,32,101,110,118,101,108,111,112,101,10,0,99,111,110,102,105,103,0,108,111,103,0,37,100,32,37,115,0,119,0,112,97,95,100,101,118,105,99,101,0,115,111,117,110,100,105,99,111,110,0,95,37,99,32,37,115,0,0,1,0,0,1,1,0,1,1,2,4,0,0,0,0,0,73,110,118,97,108,105,100,32,105,110,115,116,114,117,99,116,105,111,110,32,37,46,52,120,32,102,111,114,32,112,104,111,110,101,109,101,32,39,37,115,39,10,0,37,115,10,0,1,100,120,100,105,100,110,110,100,95,100,105,120,105,110,125,130,135,115,125,100,105,120,75,100,75,105,120,85,75,100,105,120,85,105,95,115,120,100,95,100,110,120,95,105,100,115,120,100,100,100,105,120,100,105,95,115,120,110,95,100,105,120,100,105,105,122,125,110,105,100,105,120,100,105,105,122,125,110,105,100,105,120,95,105,100,115,120,110,100,100,100,120,100,100,100,100,100,100,100,100,100,150,100,105,110,115,110,110,110,100,105,150,105,110,125,135,140,115,135,100,105,150,90,105,90,122,135,100,90,100,105,150,100,105,100,122,135,100,100,100,105,150,100,105,105,115,135,110,105,100,105,150,100,105,105,122,130,120,125,100,105,150,100,105,110,122,125,115,110,100,105,150,100,105,105,122,135,120,105,100,105,150,100,105,105,115,135,110,105,100,100,100,100,100,100,100,100,100,100,100,110,120,100,110,110,110,110,110,110,110,110,120,100,110,110,110,110,110,110,110,110,120,100,110,100,110,110,110,100,110,110,120,100,110,110,110,110,110,110,110,110,120,100,110,110,110,110,110,110,110,110,120,100,110,110,110,110,110,110,110,110,120,100,110,110,110,110,110,110,110,110,120,100,110,110,110,110,110,110,110,110,120,100,110,110,110,110,110,110,110,110,120,100,110,110,110,110,110,110,110,0,192,224,240,255,31,15,7,40,37,115,41,32,37,115,32,32,45,62,32,40,37,115,41,32,0,37,115,10,10,0,95,48,108,97,110,103,0,37,99,0,32,32,115,117,102,102,105,120,32,91,37,115,93,10,10,0,0,115,115,0,104,115,120,0,0,122,122,0,0,105,122,0,37,115,37,115,37,115,0,101,115,0,98,112,0,98,104,102,0,100,116,0,103,99,0,104,65,0,110,100,0,110,103,0,116,115,0,116,65,0,110,65,0,67,76,65,85,83,69,32,37,120,58,10,0,69,78,68,67,76,65,85,83,69,10,0,87,79,82,68,58,32,102,108,103,61,37,46,53,120,32,108,101,110,61,37,100,32,32,39,0,39,10,0,95,94,95,0,0,0,1,170,2,172,173,3,4,5,176,177,178,179,180,180,182,6,7,8,185,9,10,188,12,13,14,15,16,17,18,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,80,83,65,82,72,84,73,86,89,77,85,66,70,0,35,10,0,117,110,97,98,108,101,32,116,111,32,103,101,116,32,46,119,97,118,32,104,101,97,100,101,114,32,102,114,111,109,32,109,98,114,111,108,97,0,82,73,70,70,0,87,65,86,69,102,109,116,32,0,109,98,114,111,108,97,32,100,105,100,32,110,111,116,32,114,101,116,117,114,110,32,97,32,46,119,97,118,32,104,101,97,100,101,114,0,109,98,114,111,119,114,97,112,32,101,114,114,111,114,58,32,37,115,0,112,111,108,108,40,41,58,32,37,115,0,109,98,114,111,108,97,32,112,114,111,99,101,115,115,32,105,115,32,115,116,97,108,108,101,100,0,119,114,105,116,101,40,41,58,32,37,115,0,114,101,97,100,40,41,58,32,37,115,0,114,101,97,100,40,101,114,114,111,114,41,58,32,37,115,0,71,111,116,32,97,32,114,101,115,101,116,32,115,105,103,110,97,108,0,73,110,112,117,116,32,70,108,117,115,104,32,83,105,103,110,97,108,0,109,98,114,111,108,97,58,32,37,115,0,109,98,114,111,108,97,32,99,108,111,115,101,100,32,115,116,100,101,114,114,32,97,110,100,32,100,105,100,32,110,111,116,32,101,120,105,116,0,119,97,105,116,112,105,100,40,41,32,105,115,32,99,111,110,102,117,115,101,100,0,109,98,114,111,108,97,32,100,105,101,100,32,98,121,32,115,105,103,110,97,108,32,37,100,0,109,98,114,111,108,97,32,101,120,105,116,101,100,32,119,105,116,104,32,115,116,97,116,117,115,32,37,100,0,109,98,114,111,108,97,32,100,105,101,100,32,97,110,100,32,119,97,105,116,32,115,116,97,116,117,115,32,105,115,32,119,101,105,114,100,0,44,32,40,37,115,41,0,109,98,114,111,108,97,32,105,110,105,116,32,114,101,113,117,101,115,116,32,119,104,101,110,32,97,108,114,101,97,100,121,32,105,110,105,116,105,97,108,105,122,101,100,0,102,111,114,107,40,41,58,32,37,115,0,100,117,112,50,40,41,58,32,37,115,10,0,37,103,0,45,101,0,45,118,0,45,46,119,97,118,0,109,98,114,111,108,97,58,32,37,115,10,0,47,112,114,111,99,47,37,100,47,115,116,97,116,0,47,112,114,111,99,32,105,115,32,117,110,97,99,99,101,115,115,105,98,108,101,58,32,37,115,0,102,99,110,116,108,40,41,58,32,37,115,0,112,105,112,101,40,41,58,32,37,115,0,10,35,10,0,95,101,108,0,95,99,121,114,0,95,104,121,0,95,104,101,0,95,97,114,0,95,115,121,99,0,95,100,118,0,95,104,105,0,95,98,110,0,95,103,117,114,0,95,103,117,0,95,111,114,0,95,116,97,0,95,116,101,0,95,107,110,0,95,109,108,0,95,115,105,0,95,116,104,0,95,108,111,0,95,116,105,0,95,109,121,0,95,107,97,0,95,107,111,0,95,101,116,104,0,95,98,114,97,105,108,108,101,0,95,106,97,0,95,122,104,0,96,97,85,86,87,98,99,0,2,3,88,89,90,91,92,93,94,95,123,124,126,127,0,18,16,18,18,18,18,18,18,18,18,18,18,20,20,22,22,112,113,0,17,15,18,18,0,0,22,20,20,20,20,20,20,22,22,20,18,18,18,18,20,20,22,22,97,101,105,111,117,121,0,15,12,20,20,20,22,22,21,16,44,45,46,47,48,49,53,55,57,63,69,73,74,75,76,77,78,79,0,56,58,62,64,66,67,68,70,71,0,50,51,52,54,56,58,59,60,61,62,64,65,66,67,68,70,71,72,0,45,46,47,53,55,57,69,77,0,16,14,20,20,20,22,22,21,16,12,18,18,20,20,20,20,194,186,0,16,16,18,18,18,18,18,18,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,0,0,0,0,0,0,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,0,0,44,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,45,0,0,0,0,0,0,0,46,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,47,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,48,0,0,0,0,0,49,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,50,0,0,0,0,0,0,0,0,0,0,0,51,18,16,22,22,20,22,22,22,17,14,20,19,20,22,22,21,19,19,19,19,19,19,19,19,104,98,115,0,17,17,20,20,20,22,22,21,17,17,19,19,20,22,22,21,49,53,55,56,59,72,85,0,50,51,52,54,57,58,60,61,62,63,64,65,66,67,68,70,71,73,74,75,76,77,78,79,80,81,82,83,84,86,0,69,0,16,18,18,18,20,22,22,21,107,112,115,116,0,106,118,114,0,16,15,16,14,20,22,22,24,48,52,56,61,67,85,87,0,49,50,51,53,54,55,57,58,59,60,62,63,64,65,66,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,86,0,16,21,49,24,30,35,43,45,46,47,185,201,145,143,54,0,17,18,19,20,22,23,25,26,27,28,29,31,32,33,34,36,37,38,39,40,41,42,44,115,123,131,155,0,18,16,20,21,20,21,21,20,99,100,103,104,109,114,116,117,0,2,5,6,171,175,183,188,0,18,18,20,20,20,22,22,21,17,13,20,20,20,22,22,21,17,17,20,20,20,22,22,21,101,0,18,15,20,20,20,22,22,22,17,13,19,19,20,22,22,21,16,11,19,21,20,22,22,21,98,99,100,102,103,106,107,109,110,112,113,115,116,118,120,122,0,15,13,18,18,20,22,22,21,17,16,20,20,20,22,22,21,16,12,16,16,20,20,21,19,16,16,20,20,20,22,22,21,16,12,19,19,20,22,22,21,18,16,20,21,20,21,21,20,16,16,16,16,22,22,22,22,22,16,22,22,22,22,22,22,98,100,103,106,108,109,110,114,118,119,122,97,101,105,111,117,121,0,16,16,18,18,20,24,24,22,44,21,24,46,47,0,44,25,39,41,0,42,22,38,40,0,17,18,19,20,23,25,26,27,28,29,31,32,33,34,36,37,39,41,44,0,17,18,19,20,22,23,0,44,46,47,49,0,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,27,28,29,0,0,30,31,32,33,34,35,36,0,37,38,0,0,0,0,39,0,0,40,0,41,0,42,0,43,0,0,0,0,0,0,44,0,45,0,46,0,0,0,0,0,47,0,0,0,48,0,0,0,0,0,0,0,49,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,50,0,51,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,52,0,0,0,0,0,53,0,54,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,0,56,0,57,0,97,101,105,111,117,0,98,99,100,102,103,106,107,108,109,110,112,113,115,116,118,120,122,0,98,99,100,102,103,104,106,107,108,109,110,112,113,114,115,116,118,119,120,122,0,104,108,109,110,114,0,99,102,104,107,112,113,115,116,120,0,98,100,103,106,108,109,110,114,118,119,121,122,0,101,105,121,0,18,18,20,20,20,22,22,20,0,1,2,3,0,0,117,110,107,110,111,119,110,0,109,97,108,101,0,102,101,109,97,108,101,0,1,2,12,3,13,4,14,5,11,0,0,0,1,2,3,4,5,6,0,0,0,0,0,0,11,12,13,14,0,0,0,0,0,0,0,0,37,100,32,37,100,32,37,100,32,37,100,32,37,100,32,37,100,32,37,100,32,37,100,32,37,100,32,37,100,0,130,128,120,116,100,100,128,128,128,140,128,128,160,171,171,128,128,128,37,115,37,99,118,111,105,99,101,115,37,99,0,37,115,37,115,0,109,98,0,37,115,32,0,101,117,114,111,112,101,0,97,115,105,97,0,111,116,104,101,114,0,37,115,37,115,37,99,37,115,0,37,115,116,101,115,116,37,99,37,115,0,114,0,101,110,0,43,37,115,0,37,115,32,37,100,0,118,97,114,105,97,110,116,0,45,0,37,115,0,37,100,32,37,100,0,37,115,32,37,115,32,37,115,32,37,115,32,37,115,32,37,115,0,78,85,76,76,0,85,110,107,110,111,119,110,32,116,117,110,101,32,39,37,115,39,10,0,66,97,100,32,111,112,116,105,111,110,32,110,117,109,98,101,114,32,37,100,10,0,37,100,32,37,100,32,37,100,32,37,100,0,37,100,0,37,115,32,37,100,32,37,100,0,37,100,32,37,100,32,37,100,0,66,97,100,32,118,111,105,99,101,32,111,112,116,105,111,110,58,32,37,115,32,37,115,10,0,37,115,32,37,115,32,37,100,0,109,98,114,111,108,97,32,118,111,105,99,101,32,110,111,116,32,102,111,117,110,100,10,0,37,115,32,37,115,0,108,97,116,105,110,0,97,108,112,104,97,98,101,116,32,110,97,109,101,32,39,37,115,39,32,110,111,116,32,102,111,117,110,100,10,0,100,105,99,116,100,105,97,108,101,99,116,32,110,97,109,101,32,39,37,115,39,32,110,111,116,32,114,101,99,111,103,110,105,122,101,100,10,0,66,97,100,32,118,111,105,99,101,32,97,116,116,114,105,98,117,116,101,58,32,37,115,10,0,85,110,107,110,111,119,110,32,112,104,111,110,101,109,101,32,116,97,98,108,101,58,32,39,37,115,39,10,0,101,110,45,117,115,0,101,115,45,108,97,0,114,101,100,117,99,101,95,116,0,98,114,97,99,107,101,116,0,37,100,32,37,115,32,37,115,0,37,100,32,37,100,32,37,100,32,37,100,32,37,100,32,37,100,32,37,100,32,37,100,0,37,100,32,37,100,32,37,100,32,37,100,32,37,100,0,110,97,109,101,0,108,97,110,103,117,97,103,101,0,103,101,110,100,101,114,0,102,111,114,109,97,110,116,0,112,105,116,99,104,0,112,104,111,110,101,109,101,115,0,116,114,97,110,115,108,97,116,111,114,0,100,105,99,116,105,111,110,97,114,121,0,115,116,114,101,115,115,76,101,110,103,116,104,0,115,116,114,101,115,115,65,109,112,0,115,116,114,101,115,115,65,100,100,0,105,110,116,111,110,97,116,105,111,110,0,116,117,110,101,115,0,100,105,99,116,114,117,108,101,115,0,115,116,114,101,115,115,114,117,108,101,0,115,116,114,101,115,115,111,112,116,0,99,104,97,114,115,101,116,0,114,101,112,108,97,99,101,0,119,111,114,100,115,0,101,99,104,111,0,102,108,117,116,116,101,114,0,114,111,117,103,104,110,101,115,115,0,99,108,97,114,105,116,121,0,116,111,110,101,0,118,111,105,99,105,110,103,0,98,114,101,97,116,104,0,98,114,101,97,116,104,119,0,110,117,109,98,101,114,115,0,111,112,116,105,111,110,0,109,98,114,111,108,97,0,99,111,110,115,111,110,97,110,116,115,0,107,108,97,116,116,0,102,97,115,116,95,116,101,115,116,50,0,115,112,101,101,100,0,100,105,99,116,95,109,105,110,0,97,108,112,104,97,98,101,116,50,0,100,105,99,116,100,105,97,108,101,99,116,0,108,95,100,105,101,114,101,115,105,115,0,108,95,112,114,101,102,105,120,0,108,95,114,101,103,114,101,115,115,105,118,101,95,118,0,108,95,117,110,112,114,111,110,111,117,110,99,97,98,108,101,0,108,95,115,111,110,111,114,97,110,116,95,109,105,110,0,108,95,108,101,110,103,116,104,95,109,111,100,115,0,97,112,111,115,116,114,111,112,104,101,0,47,47,0,97,122,32,98,110,32,102,97,32,102,97,45,112,105,110,32,103,117,32,104,105,32,104,121,32,104,121,45,119,101,115,116,32,105,100,32,107,97,32,107,110,32,107,117,32,109,108,32,109,115,32,110,101,32,112,97,32,116,97,32,116,101,32,116,114,32,118,105,32,118,105,45,104,117,101,32,118,105,45,115,103,110,32,122,104,32,122,104,45,121,117,101,32,0,97,110,32,98,103,32,98,115,32,99,97,32,99,115,32,99,121,32,100,97,32,100,101,32,101,108,32,101,110,32,101,110,45,117,115,32,101,115,32,101,116,32,101,117,32,102,105,32,102,114,32,102,114,45,98,101,32,103,97,32,104,114,32,104,117,32,105,115,32,105,116,32,108,116,32,108,118,32,109,107,32,110,108,32,110,111,32,112,108,32,112,116,45,112,116,32,114,111,32,114,117,32,115,107,32,115,113,32,115,114,32,115,118,32,0,33,118,37,99,0,37,115,109,37,100,0,37,115,102,37,100,0,37,99,37,115,0,37,115,37,99,118,111,105,99,101,115,0,109,98,47,0,116,101,115,116,47,0,37,115,47,118,111,105,99,101,115,47,37,115,0,118,97,114,105,97,110,116,115,0,37,115,37,99,37,115,0,37,115,43,37,115,0,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,86,87,88,89,91,92,93,94,96,97,98,100,101,103,104,105,107,108,110,111,113,115,116,118,119,121,123,124,126,128,130,132,133,135,137,139,141,143,145,147,149,151,153,155,158,160,162,164,167,169,171,174,176,179,181,184,186,189,191,194,197,199,202,205,208,211,214,217,220,223,226,229,232,236,239,242,246,249,252,254,255,255,254,254,254,254,254,253,253,252,251,251,250,249,248,247,246,245,244,242,241,239,238,236,234,233,231,229,227,225,223,220,218,216,213,211,209,207,205,203,201,199,197,195,193,191,189,187,185,183,180,178,176,173,171,169,166,164,161,159,156,154,151,148,146,143,140,138,135,132,129,126,123,120,118,115,112,108,105,102,99,96,95,93,91,90,88,86,85,83,82,80,79,77,76,74,73,72,70,69,68,67,66,64,63,62,61,60,59,58,57,56,55,55,54,53,52,52,51,50,50,49,48,48,47,47,46,46,46,45,45,45,44,44,44,44,44,44,44,43,43,43,43,44,43,42,42,41,40,40,39,38,38,37,36,36,35,35,34,33,33,32,32,31,30,30,29,29,28,28,27,26,26,25,25,24,24,23,23,22,22,21,21,20,20,19,19,18,18,18,17,17,16,16,15,15,15,14,14,13,13,13,12,12,11,11,11,10,10,10,9,9,9,8,8,8,7,7,7,7,6,6,6,5,5,5,5,4,4,4,4,4,3,3,3,3,2,2,2,2,2,2,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,2,3,5,8,11,14,18,22,27,32,37,43,49,55,62,69,76,83,90,98,105,113,121,128,136,144,152,159,166,174,181,188,194,201,207,213,218,224,228,233,237,240,244,246,249,251,252,253,253,253,253,252,251,249,246,244,240,237,233,228,224,218,213,207,201,194,188,181,174,166,159,152,144,136,128,121,113,105,98,90,83,76,69,62,55,49,43,37,32,27,22,18,14,11,8,5,3,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,254,254,254,254,254,254,254,254,254,253,253,253,253,252,252,252,251,251,251,250,250,249,249,248,248,247,247,246,245,245,244,243,243,242,241,239,237,235,233,231,229,227,225,223,221,218,216,213,211,208,205,203,200,197,194,191,187,184,181,178,174,171,167,163,160,156,152,148,144,140,136,132,127,123,119,114,110,105,100,96,94,91,88,86,83,81,78,76,74,71,69,66,64,62,60,57,55,53,51,49,47,44,42,40,38,36,34,32,30,29,27,25,23,21,19,18,16,14,12,11,9,7,6,4,3,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16,16,10,16,22,0,0,0,0,0,70,242,41,0,47,0,47,0,69,242,41,0,47,0,46,0,69,242,40,0,46,0,45,0,52,242,40,0,45,45,44,0,52,242,40,0,43,43,43,0,52,242,40,0,42,42,42,0,52,242,40,0,41,41,41,0,52,242,40,128,155,181,203,220,232,237,236,230,220,206,191,176,163,152,144,140,139,140,143,146,148,149,146,140,131,120,105,89,73,60,49,42,41,45,54,68,86,105,125,143,159,170,177,178,173,164,150,135,120,105,92,83,79,79,85,94,107,122,136,150,162,171,176,177,174,168,160,152,145,139,136,137,141,148,157,168,178,187,192,193,189,180,165,146,124,99,74,50,30,14,5,2,5,15,30,48,68,89,109,127,140,150,156,159,159,157,155,153,153,156,161,169,179,191,202,213,220,224,222,216,204,187,166,143,119,96,75,58,46,40,41,47,58,72,89,106,122,134,144,148,149,145,137,128,117,107,98,92,90,92,97,105,116,128,138,148,154,158,157,152,144,134,124,113,104,98,96,99,107,120,136,155,175,194,210,223,230,231,226,215,198,178,156,132,111,91,75,64,57,55,56,61,67,74,80,84,86,85,82,77,72,66,63,62,65,73,86,103,124,147,171,195,217,234,246,252,251,244,231,213,192,170,148,128,113,100,93,90,92,97,104,112,119,125,127,127,123,116,107,97,87,78,72,70,72,78,89,102,117,132,147,159,167,171,170,164,153,139,123,106,91,78,70,67,69,77,90,107,127,146,166,184,197,207,211,210,205,196,185,173,161,150,142,137,135,135,138,141,145,146,145,140,132,120,104,85,65,46,28,14,5,1,5,15,31,52,77,104,129,154,176,193,205,211,211,208,200,191,181,171,164,159,156,157,160,165,170,174,177,176,171,163,150,135,118,99,81,66,54,47,45,49,58,72,89,107,126,142,156,166,170,169,163,152,138,123,108,93,82,74,72,74,80,90,103,117,130,0,23,10,9,24,19,24,24,6,7,8,3,0,100,101,102,97,117,108,116,0,88,88,88,88,88,88,0,84,33,34,25,13,1,2,3,17,75,28,12,16,4,11,29,18,30,39,104,110,111,112,113,98,32,5,6,15,19,20,21,26,8,22,7,40,36,23,24,9,10,14,27,31,37,35,131,130,125,38,42,43,60,61,62,63,67,71,74,77,88,89,90,91,92,93,94,95,96,97,99,100,101,102,103,105,106,107,108,114,115,116,121,122,123,124,0,73,108,108,101,103,97,108,32,98,121,116,101,32,115,101,113,117,101,110,99,101,0,68,111,109,97,105,110,32,101,114,114,111,114,0,82,101,115,117,108,116,32,110,111,116,32,114,101,112,114,101,115,101,110,116,97,98,108,101,0,78,111,116,32,97,32,116,116,121,0,80,101,114,109,105,115,115,105,111,110,32,100,101,110,105,101,100,0,79,112,101,114,97,116,105,111,110,32,110,111,116,32,112,101,114,109,105,116,116,101,100,0,78,111,32,115,117,99,104,32,102,105,108,101,32,111,114,32,100,105,114,101,99,116,111,114,121,0,78,111,32,115,117,99,104,32,112,114,111,99,101,115,115,0,70,105,108,101,32,101,120,105,115,116,115,0,86,97,108,117,101,32,116,111,111,32,108,97,114,103,101,32,102,111,114,32,100,97,116,97,32,116,121,112,101,0,78,111,32,115,112,97,99,101,32,108,101,102,116,32,111,110,32,100,101,118,105,99,101,0,79,117,116,32,111,102,32,109,101,109,111,114,121,0,82,101,115,111,117,114,99,101,32,98,117,115,121,0,73,110,116,101,114,114,117,112,116,101,100,32,115,121,115,116,101,109,32,99,97,108,108,0,82,101,115,111,117,114,99,101,32,116,101,109,112,111,114,97,114,105,108,121,32,117,110,97,118,97,105,108,97,98,108,101,0,73,110,118,97,108,105,100,32,115,101,101,107,0,67,114,111,115,115,45,100,101,118,105,99,101,32,108,105,110,107,0,82,101,97,100,45,111,110,108,121,32,102,105,108,101,32,115,121,115,116,101,109,0,68,105,114,101,99,116,111,114,121,32,110,111,116,32,101,109,112,116,121,0,67,111,110,110,101,99,116,105,111,110,32,114,101,115,101,116,32,98,121,32,112,101,101,114,0,79,112,101,114,97,116,105,111,110,32,116,105,109,101,100,32,111,117,116,0,67,111,110,110,101,99,116,105,111,110,32,114,101,102,117,115,101,100,0,72,111,115,116,32,105,115,32,100,111,119,110,0,72,111,115,116,32,105,115,32,117,110,114,101,97,99,104,97,98,108,101,0,65,100,100,114,101,115,115,32,105,110,32,117,115,101,0,66,114,111,107,101,110,32,112,105,112,101,0,73,47,79,32,101,114,114,111,114,0,78,111,32,115,117,99,104,32,100,101,118,105,99,101,32,111,114,32,97,100,100,114,101,115,115,0,66,108,111,99,107,32,100,101,118,105,99,101,32,114,101,113,117,105,114,101,100,0,78,111,32,115,117,99,104,32,100,101,118,105,99,101,0,78,111,116,32,97,32,100,105,114,101,99,116,111,114,121,0,73,115,32,97,32,100,105,114,101,99,116,111,114,121,0,84,101,120,116,32,102,105,108,101,32,98,117,115,121,0,69,120,101,99,32,102,111,114,109,97,116,32,101,114,114,111,114,0,73,110,118,97,108,105,100,32,97,114,103,117,109,101,110,116,0,65,114,103,117,109,101,110,116,32,108,105,115,116,32,116,111,111,32,108,111,110,103,0,83,121,109,98,111,108,105,99,32,108,105,110,107,32,108,111,111,112,0,70,105,108,101,110,97,109,101,32,116,111,111,32,108,111,110,103,0,84,111,111,32,109,97,110,121,32,111,112,101,110,32,102,105,108,101,115,32,105,110,32,115,121,115,116,101,109,0,78,111,32,102,105,108,101,32,100,101,115,99,114,105,112,116,111,114,115,32,97,118,97,105,108,97,98,108,101,0,66,97,100,32,102,105,108,101,32,100,101,115,99,114,105,112,116,111,114,0,78,111,32,99,104,105,108,100,32,112,114,111,99,101,115,115,0,66,97,100,32,97,100,100,114,101,115,115,0,70,105,108,101,32,116,111,111,32,108,97,114,103,101,0,84,111,111,32,109,97,110,121,32,108,105,110,107,115,0,78,111,32,108,111,99,107,115,32,97,118,97,105,108,97,98,108,101,0,82,101,115,111,117,114,99,101,32,100,101,97,100,108,111,99,107,32,119,111,117,108,100,32,111,99,99,117,114,0,83,116,97,116,101,32,110,111,116,32,114,101,99,111,118,101,114,97,98,108,101,0,80,114,101,118,105,111,117,115,32,111,119,110,101,114,32,100,105,101,100,0,79,112,101,114,97,116,105,111,110,32,99,97,110,99,101,108,101,100,0,70,117,110,99,116,105,111,110,32,110,111,116,32,105,109,112,108,101,109,101,110,116,101,100,0,78,111,32,109,101,115,115,97,103,101,32,111,102,32,100,101,115,105,114,101,100,32,116,121,112,101,0,73,100,101,110,116,105,102,105,101,114,32,114,101,109,111,118,101,100,0,68,101,118,105,99,101,32,110,111,116,32,97,32,115,116,114,101,97,109,0,78,111,32,100,97,116,97,32,97,118,97,105,108,97,98,108,101,0,68,101,118,105,99,101,32,116,105,109,101,111,117,116,0,79,117,116,32,111,102,32,115,116,114,101,97,109,115,32,114,101,115,111,117,114,99,101,115,0,76,105,110,107,32,104,97,115,32,98,101,101,110,32,115,101,118,101,114,101,100,0,80,114,111,116,111,99,111,108,32,101,114,114,111,114,0,66,97,100,32,109,101,115,115,97,103,101,0,70,105,108,101,32,100,101,115,99,114,105,112,116,111,114,32,105,110,32,98,97,100,32,115,116,97,116,101,0,78,111,116,32,97,32,115,111,99,107,101,116,0,68,101,115,116,105,110,97,116,105,111,110,32,97,100,100,114,101,115,115,32,114,101,113,117,105,114,101,100,0,77,101,115,115,97,103,101,32,116,111,111,32,108,97,114,103,101,0,80,114,111,116,111,99,111,108,32,119,114,111,110,103,32,116,121,112,101,32,102,111,114,32,115,111,99,107,101,116,0,80,114,111,116,111,99,111,108,32,110,111,116,32,97,118,97,105,108,97,98,108,101,0,80,114,111,116,111,99,111,108,32,110,111,116,32,115,117,112,112,111,114,116,101,100,0,83,111,99,107,101,116,32,116,121,112,101,32,110,111,116,32,115,117,112,112,111,114,116,101,100,0,78,111,116,32,115,117,112,112,111,114,116,101,100,0,80,114,111,116,111,99,111,108,32,102,97,109,105,108,121,32,110,111,116,32,115,117,112,112,111,114,116,101,100,0,65,100,100,114,101,115,115,32,102,97,109,105,108,121,32,110,111,116,32,115,117,112,112,111,114,116,101,100,32,98,121,32,112,114,111,116,111,99,111,108,0,65,100,100,114,101,115,115,32,110,111,116,32,97,118,97,105,108,97,98,108,101,0,78,101,116,119,111,114,107,32,105,115,32,100,111,119,110,0,78,101,116,119,111,114,107,32,117,110,114,101,97,99,104,97,98,108,101,0,67,111,110,110,101,99,116,105,111,110,32,114,101,115,101,116,32,98,121,32,110,101,116,119,111,114,107,0,67,111,110,110,101,99,116,105,111,110,32,97,98,111,114,116,101,100,0,78,111,32,98,117,102,102,101,114,32,115,112,97,99,101,32,97,118,97,105,108,97,98,108,101,0,83,111,99,107,101,116,32,105,115,32,99,111,110,110,101,99,116,101,100,0,83,111,99,107,101,116,32,110,111,116,32,99,111,110,110,101,99,116,101,100,0,67,97,110,110,111,116,32,115,101,110,100,32,97,102,116,101,114,32,115,111,99,107,101,116,32,115,104,117,116,100,111,119,110,0,79,112,101,114,97,116,105,111,110,32,97,108,114,101,97,100,121,32,105,110,32,112,114,111,103,114,101,115,115,0,79,112,101,114,97,116,105,111,110,32,105,110,32,112,114,111,103,114,101,115,115,0,83,116,97,108,101,32,102,105,108,101,32,104,97,110,100,108,101,0,82,101,109,111,116,101,32,73,47,79,32,101,114,114,111,114,0,81,117,111,116,97,32,101,120,99,101,101,100,101,100,0,78,111,32,109,101,100,105,117,109,32,102,111,117,110,100,0,87,114,111,110,103,32,109,101,100,105,117,109,32,116,121,112,101,0,78,111,32,101,114,114,111,114,32,105,110,102,111,114,109,97,116,105,111,110,0,0,18,17,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,17,34,35,36,17,37,38,39,40,41,42,43,44,17,45,46,47,16,16,48,16,16,16,16,16,16,16,49,50,51,16,52,53,16,16,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,54,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,55,17,17,17,17,56,17,57,58,59,60,61,62,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,63,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,17,64,65,17,66,67,68,69,70,71,72,73,16,16,16,74,75,76,77,78,16,16,16,79,80,16,16,16,16,81,16,16,16,16,16,16,16,16,16,17,17,17,82,83,16,16,16,16,16,16,16,16,16,16,16,17,17,17,17,84,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,17,17,85,16,16,16,16,86,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,87,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,88,89,90,91,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,92,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,0,0,0,0,0,0,0,0,254,255,255,7,254,255,255,7,0,0,0,0,0,4,32,4,255,255,127,255,255,255,127,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,195,255,3,0,31,80,0,0,0,0,0,0,0,0,0,0,32,0,0,0,0,0,223,60,64,215,255,255,251,255,255,255,255,255,255,255,255,255,191,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,3,252,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,0,254,255,255,255,127,2,254,255,255,255,255,0,0,0,0,0,255,191,182,0,255,255,255,7,7,0,0,0,255,7,255,255,255,255,255,255,255,254,255,195,255,255,255,255,255,255,255,255,255,255,255,255,239,31,254,225,255,159,0,0,255,255,255,255,255,255,0,224,255,255,255,255,255,255,255,255,255,255,255,255,3,0,255,255,255,255,255,7,48,4,255,255,255,252,255,31,0,0,255,255,255,1,0,0,0,0,0,0,0,0,253,31,0,0,0,0,0,0,240,3,255,127,255,255,255,255,255,255,255,239,255,223,225,255,207,255,254,254,238,159,249,255,255,253,197,227,159,89,128,176,207,255,3,0,238,135,249,255,255,253,109,195,135,25,2,94,192,255,63,0,238,191,251,255,255,253,237,227,191,27,1,0,207,255,0,0,238,159,249,255,255,253,237,227,159,25,192,176,207,255,2,0,236,199,61,214,24,199,255,195,199,29,129,0,192,255,0,0,238,223,253,255,255,253,239,227,223,29,96,3,207,255,0,0,236,223,253,255,255,253,239,227,223,29,96,64,207,255,6,0,236,223,253,255,255,255,255,231,223,93,128,0,207,255,0,252,236,255,127,252,255,255,251,47,127,128,95,255,0,0,12,0,254,255,255,255,255,127,255,7,63,32,255,3], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+20484);
/* memory initializer */ allocate([150,37,240,254,174,236,255,59,95,32,255,243,0,0,0,0,1,0,0,0,255,3,0,0,255,254,255,255,255,31,254,255,3,255,255,254,255,255,255,31,0,0,0,0,0,0,0,0,255,255,255,255,255,255,127,249,255,3,255,255,231,193,255,255,127,64,255,51,255,255,255,255,191,32,255,255,255,255,255,247,255,255,255,255,255,255,255,255,255,61,127,61,255,255,255,255,255,61,255,255,255,255,61,127,61,255,127,255,255,255,255,255,255,255,61,255,255,255,255,255,255,255,255,135,0,0,0,0,255,255,0,0,255,255,255,255,255,255,255,255,255,255,31,0,254,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,159,255,255,254,255,255,7,255,255,255,255,255,255,255,255,255,199,1,0,255,223,15,0,255,255,15,0,255,255,15,0,255,223,13,0,255,255,255,255,255,255,207,255,255,1,128,16,255,3,0,0,0,0,255,3,255,255,255,255,255,255,255,255,255,255,255,0,255,255,255,255,255,7,255,255,255,255,255,255,255,255,63,0,255,255,255,31,255,15,255,1,192,255,255,255,255,63,31,0,255,255,255,255,255,15,255,255,255,3,255,3,0,0,0,0,255,255,255,15,255,255,255,255,255,255,255,127,254,255,31,0,255,3,255,3,128,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,255,255,239,255,239,15,255,3,0,0,0,0,255,255,255,255,255,243,255,255,255,255,255,255,191,255,3,0,255,255,255,255,255,255,63,0,255,227,255,255,255,255,255,63,0,0,0,0,0,0,0,0,0,0,0,0,0,222,111,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,0,0,0,0,0,0,0,0,255,255,63,63,255,255,255,255,63,63,255,170,255,255,255,63,255,255,255,255,255,255,223,95,220,31,207,15,255,31,220,31,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,128,0,0,255,31,0,0,0,0,0,0,0,0,0,0,0,0,132,252,47,62,80,189,255,243,224,67,0,0,255,255,255,255,255,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,192,255,255,255,255,255,255,3,0,0,255,255,255,255,255,127,255,255,255,255,255,127,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,31,120,12,0,255,255,255,255,191,32,255,255,255,255,255,255,255,128,0,0,255,255,127,0,127,127,127,127,127,127,127,127,255,255,255,255,0,0,0,0,0,128,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,224,0,0,0,254,3,62,31,254,255,255,255,255,255,255,255,255,255,127,224,254,255,255,255,255,255,255,255,255,255,255,247,224,255,255,255,255,63,254,255,255,255,255,255,255,255,255,255,255,127,0,0,255,255,255,7,0,0,0,0,0,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,63,0,0,0,0,0,0,0,0,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,31,0,0,0,0,0,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,31,0,0,0,0,0,0,0,0,255,255,255,255,255,63,255,31,255,255,255,15,0,0,255,255,255,255,255,127,240,143,255,255,255,128,255,255,255,255,255,255,255,255,255,255,0,0,0,0,128,255,252,255,255,255,255,255,255,255,255,255,255,255,255,121,15,0,255,7,0,0,0,0,0,0,0,0,0,255,187,247,255,255,255,0,0,0,255,255,255,255,255,255,15,0,255,255,255,255,255,255,255,255,15,0,255,3,0,0,252,8,255,255,255,255,255,7,255,255,255,255,7,0,255,255,255,31,255,255,255,255,255,255,247,255,0,128,255,3,0,0,0,0,255,255,255,255,255,255,127,0,255,63,255,3,255,255,127,4,255,255,255,255,255,255,255,127,5,0,0,56,255,255,60,0,126,126,126,0,127,127,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,255,7,255,3,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,15,0,255,255,127,248,255,255,255,255,255,15,255,255,255,255,255,255,255,255,255,255,255,255,255,63,255,255,255,255,255,255,255,255,255,255,255,255,255,3,0,0,0,0,127,0,248,224,255,253,127,95,219,255,255,255,255,255,255,255,255,255,255,255,255,255,3,0,0,0,248,255,255,255,255,255,255,255,255,255,255,255,255,63,0,0,255,255,255,255,255,255,255,255,252,255,255,255,255,255,255,0,0,0,0,0,255,15,0,0,0,0,0,0,0,0,0,0,0,0,0,0,223,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,31,0,0,255,3,254,255,255,7,254,255,255,7,192,255,255,255,255,255,255,255,255,255,255,127,252,252,252,28,0,0,0,0,255,239,255,255,127,255,255,183,255,63,255,63,0,0,0,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,7,0,0,0,0,0,0,0,0,255,255,255,255,255,255,31,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,31,255,255,255,255,255,255,1,0,0,0,0,0,255,255,255,127,0,0,255,255,255,7,0,0,0,0,0,0,255,255,255,63,255,255,255,255,15,255,62,0,0,0,0,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,63,255,3,0,0,0,0,0,0,0,0,0,0,63,253,255,255,255,255,191,145,255,255,63,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,63,0,255,255,255,3,0,0,0,0,0,0,0,0,255,255,255,255,255,255,255,192,0,0,0,0,0,0,0,0,111,240,239,254,255,255,15,0,0,0,0,0,255,255,255,31,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,255,255,63,0,255,255,63,0,255,255,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,255,255,255,255,255,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,255,255,255,255,63,0,0,0,192,255,0,0,252,255,255,255,255,255,255,1,0,0,255,255,255,1,255,3,255,255,255,255,255,255,199,255,0,0,0,0,0,0,0,0,255,255,255,255,255,255,255,255,30,0,255,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,255,255,63,0,255,3,0,0,0,0,0,0,255,255,255,255,255,255,255,255,255,255,255,255,255,127,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,255,255,255,255,255,255,255,255,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,255,127,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,255,255,255,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,255,255,255,255,31,0,255,255,255,255,255,127,0,0,248,255,0,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,255,255,255,255,255,255,223,255,255,255,255,255,255,255,255,223,100,222,255,235,239,255,255,255,255,255,255,255,191,231,223,223,255,255,255,123,95,252,253,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,63,255,255,255,253,255,255,247,255,255,255,247,255,255,223,255,255,255,223,255,255,127,255,255,255,127,255,255,255,253,255,255,255,253,255,255,247,207,255,255,255,255,255,255,239,255,255,255,150,254,247,10,132,234,150,170,150,247,247,94,255,251,255,15,238,251,255,15,0,0,0,0,0,0,0,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,0,1,2,3,4,5,6,7,8,9,255,255,255,255,255,255,255,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,255,255,255,255,255,255,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,0,1,2,4,7,3,6,5,0,67,46,85,84,70,45,56,0,0,0,0,0,0,0,0,0,67,0,76,67,95,65,76,76,0,76,67,95,67,84,89,80,69,0,0,0,0,76,67,95,78,85,77,69,82,73,67,0,0,76,67,95,84,73,77,69,0,0,0,0,0,76,67,95,67,79,76,76,65,84,69,0,0,76,67,95,77,79,78,69,84,65,82,89,0,76,67,95,77,69,83,83,65,71,69,83,0,76,65,78,71,0,67,46,85,84,70,45,56,0,80,79,83,73,88,0,77,85,83,76,95,76,79,67,80,65,84,72,0,17,0,10,0,17,17,17,0,0,0,0,5,0,0,0,0,0,0,9,0,0,0,0,11,0,0,0,0,0,0,0,0,17,0,15,10,17,17,17,3,10,7,0,1,19,9,11,11,0,0,9,6,11,0,0,11,0,6,17,0,0,0,17,17,17,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,11,0,0,0,0,0,0,0,0,17,0,10,10,17,17,17,0,10,0,0,2,0,9,11,0,0,0,9,0,11,0,0,11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,12,0,0,0,0,0,0,0,0,0,0,0,12,0,0,0,0,12,0,0,0,0,9,12,0,0,0,0,0,12,0,0,12,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,14,0,0,0,0,0,0,0,0,0,0,0,13,0,0,0,4,13,0,0,0,0,9,14,0,0,0,0,0,14,0,0,14,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16,0,0,0,0,0,0,0,0,0,0,0,15,0,0,0,0,15,0,0,0,0,9,16,0,0,0,0,0,16,0,0,16,0,0,18,0,0,0,18,18,18,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,18,0,0,0,18,18,18,0,0,0,0,0,0,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,11,0,0,0,0,0,0,0,0,0,0,0,10,0,0,0,0,10,0,0,0,0,9,11,0,0,0,0,0,11,0,0,11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,12,0,0,0,0,0,0,0,0,0,0,0,12,0,0,0,0,12,0,0,0,0,9,12,0,0,0,0,0,12,0,0,12,0,0,48,49,50,51,52,53,54,55,56,57,65,66,67,68,69,70,45,43,32,32,32,48,88,48,120,0,40,110,117,108,108,41,0,45,48,88,43,48,88,32,48,88,45,48,120,43,48,120,32,48,120,0,105,110,102,0,73,78,70,0,78,65,78,0,46,0,18,16,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,16,16,34,35,16,36,37,38,39,40,41,42,43,16,44,45,46,17,47,48,17,17,49,17,17,17,50,51,52,53,54,55,56,57,17,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,58,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,59,16,60,61,62,63,64,65,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,66,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,67,16,16,68,16,69,70,71,16,72,16,73,16,16,16,16,74,75,76,77,16,16,78,16,79,80,16,16,16,16,81,16,16,16,16,16,16,16,16,16,16,16,16,16,82,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,83,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,84,85,86,87,16,16,88,89,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,90,16,91,92,93,94,95,96,97,98,16,16,16,16,16,16,16,16,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,0,0,0,0,254,255,0,252,1,0,0,248,1,0,0,120,0,0,0,0,255,251,223,251,0,0,128,0,0,0,128,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,60,0,252,255,224,175,255,255,255,255,255,255,255,255,255,255,223,255,255,255,255,255,32,64,176,0,0,0,0,0,0,0,0,0,0,0,0,0,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,252,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,252,0,0,0,0,0,134,254,255,255,255,0,64,73,0,0,0,0,0,24,0,223,255,0,200,0,0,0,0,0,0,0,1,0,60,0,0,0,0,0,0,0,0,0,0,0,0,16,224,1,30,0,96,255,191,0,0,0,0,0,0,255,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,248,207,3,0,0,0,3,0,32,255,127,0,0,0,78,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,252,0,0,0,0,0,0,0,0,0,16,0,32,30,0,48,0,1,0,0,0,0,0,0,0,0,16,0,32,0,0,0,0,252,15,0,0,0,0,0,0,0,16,0,32,0,0,0,0,0,0,0,0,0,0,0,0,0,16,0,32,0,0,0,0,3,0,0,0,0,0,0,0,0,16,0,32,0,0,0,0,253,0,0,0,0,0,0,0,0,0,0,32,0,0,0,0,255,7,0,0,0,0,0,0,0,0,0,32,0,0,0,0,0,255,0,0,0,0,0,0,0,16,0,32,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,32,0,0,0,0,63,2,0,0,0,0,0,0,0,0,0,4,0,0,0,0,16,0,0,0,0,0,0,128,0,128,192,223,0,12,0,0,0,0,0,0,0,0,0,0,0,0,0,31,0,0,0,0,0,0,254,255,255,255,0,252,255,255,0,0,0,0,0,0,0,0,252,0,0,0,0,0,0,192,255,223,255,7,0,0,0,0,0,0,0,0,0,0,128,6,0,252,0,0,24,62,0,0,128,191,0,204,0,0,0,0,0,0,0,0,0,0,0,8,0,0,0,0,0,0,0,0,0,0,0,96,255,255,255,31,0,0,255,3,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,96,0,0,1,0,0,24,0,0,0,0,0,0,0,0,0,56,0,0,0,0,16,0,0,0,112,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,48,0,0,254,127,47,0,0,255,3,255,127,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,14,49,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,196,255,255,255,255,0,0,0,192,0,0,0,0,0,0,0,0,1,0,224,159,0,0,0,0,127,63,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16,0,16,0,0,252,255,255,255,31,0,0,0,0,0,12,0,0,0,0,0,0,64,0,12,240,0,0,0,0,0,0,192,248,0,0,0,0,0,0,0,192,0,0,0,0,0,0,0,0,255,0,255,255,255,33,16,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,127,0,0,240,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,160,3,224,0,224,0,224,0,96,128,248,255,255,255,252,255,255,255,255,255,127,31,252,241,127,255,127,0,0,255,255,255,3,0,0,255,255,255,255,1,0,123,3,208,193,175,66,0,12,31,188,255,255,0,0,0,0,0,2,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,15,0,255,255,255,255,127,0,0,0,255,7,0,0,255,255,255,255,255,255,255,255,255,255,63,0,0,0,0,0,0,252,255,255,254,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,31,255,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,224,135,3,254,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,128,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,255,127,255,15,0,0,0,0,0,0,0,0,255,255,255,251,255,255,255,255,255,255,255,255,255,255,15,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,63,0,0,0,255,15,30,255,255,255,1,252,193,224,0,0,0,0,0,0,0,0,0,0,0,30,1,0,0,0,0,0,0,0,0,0,0,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,0,0,0,0,255,255,255,255,15,0,0,0,255,255,255,127,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,127,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,255,255,127,0,0,0,0,0,0,192,0,224,0,0,0,0,0,0,0,0,0,0,0,128,15,112,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,0,255,255,127,0,3,0,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,68,8,0,0,0,15,255,3,0,0,0,0,0,0,240,0,0,0,0,0,0,0,0,0,16,192,0,0,255,255,3,7,0,0,0,0,0,248,0,0,0,0,8,128,0,0,0,0,0,0,0,0,0,0,8,0,255,63,0,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,240,0,0,128,11,0,0,0,0,0,0,0,128,2,0,0,192,0,0,67,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,56,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,128,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,252,255,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,48,255,255,255,3,127,0,255,255,255,255,247,255,127,15,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,128,254,255,0,252,1,0,0,248,1,0,0,248,63,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,127,127,0,48,135,255,255,255,255,255,143,255,0,0,0,0,0,0,224,255,255,7,255,15,0,0,0,0,0,0,255,255,255,255,255,63,0,0,0,0,15,0,0,0,0,0,0,0,0,0,0,0,0,0,0,128,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,128,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,192,143,0,0,0,128,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,135,255,0,255,1,0,0,0,224,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,254,0,0,0,255,0,0,0,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,127,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,192,63,252,255,63,0,0,0,3,0,0,0,0,0,0,254,3,0,0,0,0,0,0,0,0,0,0,0,0,0,24,0,15,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,225,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,15,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,128,7,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,63,0,255,255,255,255,127,254,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,63,0,0,0,0,255,255,255,255,255,255,255,255,63,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,255,255,255,255,255,255,127,0,255,255,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,8,0,0,0,8,0,0,32,0,0,0,32,0,0,128,0,0,0,128,0,0,0,2,0,0,0,2,0,0,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,255,255,255,255,255,15,255,255,255,255,255,255,255,255,255,255,255,255,15,0,255,127,254,127,254,255,254,255,0,0,0,0,255,7,255,255,255,127,255,255,255,255,255,255,255,15,255,255,255,255,255,7,0,0,0,0,0,0,0,0,192,255,255,255,7,0,255,255,255,255,255,7,255,1,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,1,0,191,255,255,255,255,255,255,255,255,31,255,255,15,0,255,255,255,255,223,7,0,0,255,255,1,0,255,255,255,255,255,255,255,127,253,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,30,255,255,255,255,255,255,255,63,15,0,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,248,255,255,255,255,255,255,255,255,225,255,0,0,0,0,0,0,255,255,255,255,255,255,255,255,63,0,0,0,0,0,0,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,15,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,114,119,97,0,105,110,102,105,110,105,116,121,0,110,97,110,0,83,116,57,101,120,99,101,112,116,105,111,110,0,78,49,48,95,95,99,120,120,97,98,105,118,49,49,54,95,95,115,104,105,109,95,116,121,112,101,95,105,110,102,111,69,0,83,116,57,116,121,112,101,95,105,110,102,111,0,78,49,48,95,95,99,120,120,97,98,105,118,49,50,48,95,95,115,105,95,99,108,97,115,115,95,116,121,112,101,95,105,110,102,111,69,0,78,49,48,95,95,99,120,120,97,98,105,118,49,49,55,95,95,99,108,97,115,115,95,116,121,112,101,95,105,110,102,111,69,0,115,116,100,58,58,98,97,100,95,97,108,108,111,99,0,83,116,57,98,97,100,95,97,108,108,111,99,0], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+30725);





/* no memory initializer */
var tempDoublePtr = STATICTOP; STATICTOP += 16;

assert(tempDoublePtr % 8 == 0);

function copyTempFloat(ptr) { // functions, because inlining this code increases code size too much

  HEAP8[tempDoublePtr] = HEAP8[ptr];

  HEAP8[tempDoublePtr+1] = HEAP8[ptr+1];

  HEAP8[tempDoublePtr+2] = HEAP8[ptr+2];

  HEAP8[tempDoublePtr+3] = HEAP8[ptr+3];

}

function copyTempDouble(ptr) {

  HEAP8[tempDoublePtr] = HEAP8[ptr];

  HEAP8[tempDoublePtr+1] = HEAP8[ptr+1];

  HEAP8[tempDoublePtr+2] = HEAP8[ptr+2];

  HEAP8[tempDoublePtr+3] = HEAP8[ptr+3];

  HEAP8[tempDoublePtr+4] = HEAP8[ptr+4];

  HEAP8[tempDoublePtr+5] = HEAP8[ptr+5];

  HEAP8[tempDoublePtr+6] = HEAP8[ptr+6];

  HEAP8[tempDoublePtr+7] = HEAP8[ptr+7];

}

// {{PRE_LIBRARY}}



  Module["_i64Subtract"] = _i64Subtract;


  Module["_i64Add"] = _i64Add;




  var ERRNO_CODES={EPERM:1,ENOENT:2,ESRCH:3,EINTR:4,EIO:5,ENXIO:6,E2BIG:7,ENOEXEC:8,EBADF:9,ECHILD:10,EAGAIN:11,EWOULDBLOCK:11,ENOMEM:12,EACCES:13,EFAULT:14,ENOTBLK:15,EBUSY:16,EEXIST:17,EXDEV:18,ENODEV:19,ENOTDIR:20,EISDIR:21,EINVAL:22,ENFILE:23,EMFILE:24,ENOTTY:25,ETXTBSY:26,EFBIG:27,ENOSPC:28,ESPIPE:29,EROFS:30,EMLINK:31,EPIPE:32,EDOM:33,ERANGE:34,ENOMSG:42,EIDRM:43,ECHRNG:44,EL2NSYNC:45,EL3HLT:46,EL3RST:47,ELNRNG:48,EUNATCH:49,ENOCSI:50,EL2HLT:51,EDEADLK:35,ENOLCK:37,EBADE:52,EBADR:53,EXFULL:54,ENOANO:55,EBADRQC:56,EBADSLT:57,EDEADLOCK:35,EBFONT:59,ENOSTR:60,ENODATA:61,ETIME:62,ENOSR:63,ENONET:64,ENOPKG:65,EREMOTE:66,ENOLINK:67,EADV:68,ESRMNT:69,ECOMM:70,EPROTO:71,EMULTIHOP:72,EDOTDOT:73,EBADMSG:74,ENOTUNIQ:76,EBADFD:77,EREMCHG:78,ELIBACC:79,ELIBBAD:80,ELIBSCN:81,ELIBMAX:82,ELIBEXEC:83,ENOSYS:38,ENOTEMPTY:39,ENAMETOOLONG:36,ELOOP:40,EOPNOTSUPP:95,EPFNOSUPPORT:96,ECONNRESET:104,ENOBUFS:105,EAFNOSUPPORT:97,EPROTOTYPE:91,ENOTSOCK:88,ENOPROTOOPT:92,ESHUTDOWN:108,ECONNREFUSED:111,EADDRINUSE:98,ECONNABORTED:103,ENETUNREACH:101,ENETDOWN:100,ETIMEDOUT:110,EHOSTDOWN:112,EHOSTUNREACH:113,EINPROGRESS:115,EALREADY:114,EDESTADDRREQ:89,EMSGSIZE:90,EPROTONOSUPPORT:93,ESOCKTNOSUPPORT:94,EADDRNOTAVAIL:99,ENETRESET:102,EISCONN:106,ENOTCONN:107,ETOOMANYREFS:109,EUSERS:87,EDQUOT:122,ESTALE:116,ENOTSUP:95,ENOMEDIUM:123,EILSEQ:84,EOVERFLOW:75,ECANCELED:125,ENOTRECOVERABLE:131,EOWNERDEAD:130,ESTRPIPE:86};

  var ERRNO_MESSAGES={0:"Success",1:"Not super-user",2:"No such file or directory",3:"No such process",4:"Interrupted system call",5:"I/O error",6:"No such device or address",7:"Arg list too long",8:"Exec format error",9:"Bad file number",10:"No children",11:"No more processes",12:"Not enough core",13:"Permission denied",14:"Bad address",15:"Block device required",16:"Mount device busy",17:"File exists",18:"Cross-device link",19:"No such device",20:"Not a directory",21:"Is a directory",22:"Invalid argument",23:"Too many open files in system",24:"Too many open files",25:"Not a typewriter",26:"Text file busy",27:"File too large",28:"No space left on device",29:"Illegal seek",30:"Read only file system",31:"Too many links",32:"Broken pipe",33:"Math arg out of domain of func",34:"Math result not representable",35:"File locking deadlock error",36:"File or path name too long",37:"No record locks available",38:"Function not implemented",39:"Directory not empty",40:"Too many symbolic links",42:"No message of desired type",43:"Identifier removed",44:"Channel number out of range",45:"Level 2 not synchronized",46:"Level 3 halted",47:"Level 3 reset",48:"Link number out of range",49:"Protocol driver not attached",50:"No CSI structure available",51:"Level 2 halted",52:"Invalid exchange",53:"Invalid request descriptor",54:"Exchange full",55:"No anode",56:"Invalid request code",57:"Invalid slot",59:"Bad font file fmt",60:"Device not a stream",61:"No data (for no delay io)",62:"Timer expired",63:"Out of streams resources",64:"Machine is not on the network",65:"Package not installed",66:"The object is remote",67:"The link has been severed",68:"Advertise error",69:"Srmount error",70:"Communication error on send",71:"Protocol error",72:"Multihop attempted",73:"Cross mount point (not really error)",74:"Trying to read unreadable message",75:"Value too large for defined data type",76:"Given log. name not unique",77:"f.d. invalid for this operation",78:"Remote address changed",79:"Can   access a needed shared lib",80:"Accessing a corrupted shared lib",81:".lib section in a.out corrupted",82:"Attempting to link in too many libs",83:"Attempting to exec a shared library",84:"Illegal byte sequence",86:"Streams pipe error",87:"Too many users",88:"Socket operation on non-socket",89:"Destination address required",90:"Message too long",91:"Protocol wrong type for socket",92:"Protocol not available",93:"Unknown protocol",94:"Socket type not supported",95:"Not supported",96:"Protocol family not supported",97:"Address family not supported by protocol family",98:"Address already in use",99:"Address not available",100:"Network interface is not configured",101:"Network is unreachable",102:"Connection reset by network",103:"Connection aborted",104:"Connection reset by peer",105:"No buffer space available",106:"Socket is already connected",107:"Socket is not connected",108:"Can't send after socket shutdown",109:"Too many references",110:"Connection timed out",111:"Connection refused",112:"Host is down",113:"Host is unreachable",114:"Socket already connected",115:"Connection already in progress",116:"Stale file handle",122:"Quota exceeded",123:"No medium (in tape drive)",125:"Operation canceled",130:"Previous owner died",131:"State not recoverable"};

  function ___setErrNo(value) {
      if (Module['___errno_location']) HEAP32[((Module['___errno_location']())>>2)]=value;
      else Module.printErr('failed to set errno from JS');
      return value;
    }

  var PATH={splitPath:function (filename) {
        var splitPathRe = /^(\/?|)([\s\S]*?)((?:\.{1,2}|[^\/]+?|)(\.[^.\/]*|))(?:[\/]*)$/;
        return splitPathRe.exec(filename).slice(1);
      },normalizeArray:function (parts, allowAboveRoot) {
        // if the path tries to go above the root, `up` ends up > 0
        var up = 0;
        for (var i = parts.length - 1; i >= 0; i--) {
          var last = parts[i];
          if (last === '.') {
            parts.splice(i, 1);
          } else if (last === '..') {
            parts.splice(i, 1);
            up++;
          } else if (up) {
            parts.splice(i, 1);
            up--;
          }
        }
        // if the path is allowed to go above the root, restore leading ..s
        if (allowAboveRoot) {
          for (; up--; up) {
            parts.unshift('..');
          }
        }
        return parts;
      },normalize:function (path) {
        var isAbsolute = path.charAt(0) === '/',
            trailingSlash = path.substr(-1) === '/';
        // Normalize the path
        path = PATH.normalizeArray(path.split('/').filter(function(p) {
          return !!p;
        }), !isAbsolute).join('/');
        if (!path && !isAbsolute) {
          path = '.';
        }
        if (path && trailingSlash) {
          path += '/';
        }
        return (isAbsolute ? '/' : '') + path;
      },dirname:function (path) {
        var result = PATH.splitPath(path),
            root = result[0],
            dir = result[1];
        if (!root && !dir) {
          // No dirname whatsoever
          return '.';
        }
        if (dir) {
          // It has a dirname, strip trailing slash
          dir = dir.substr(0, dir.length - 1);
        }
        return root + dir;
      },basename:function (path) {
        // EMSCRIPTEN return '/'' for '/', not an empty string
        if (path === '/') return '/';
        var lastSlash = path.lastIndexOf('/');
        if (lastSlash === -1) return path;
        return path.substr(lastSlash+1);
      },extname:function (path) {
        return PATH.splitPath(path)[3];
      },join:function () {
        var paths = Array.prototype.slice.call(arguments, 0);
        return PATH.normalize(paths.join('/'));
      },join2:function (l, r) {
        return PATH.normalize(l + '/' + r);
      },resolve:function () {
        var resolvedPath = '',
          resolvedAbsolute = false;
        for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {
          var path = (i >= 0) ? arguments[i] : FS.cwd();
          // Skip empty and invalid entries
          if (typeof path !== 'string') {
            throw new TypeError('Arguments to path.resolve must be strings');
          } else if (!path) {
            return ''; // an invalid portion invalidates the whole thing
          }
          resolvedPath = path + '/' + resolvedPath;
          resolvedAbsolute = path.charAt(0) === '/';
        }
        // At this point the path should be resolved to a full absolute path, but
        // handle relative paths to be safe (might happen when process.cwd() fails)
        resolvedPath = PATH.normalizeArray(resolvedPath.split('/').filter(function(p) {
          return !!p;
        }), !resolvedAbsolute).join('/');
        return ((resolvedAbsolute ? '/' : '') + resolvedPath) || '.';
      },relative:function (from, to) {
        from = PATH.resolve(from).substr(1);
        to = PATH.resolve(to).substr(1);
        function trim(arr) {
          var start = 0;
          for (; start < arr.length; start++) {
            if (arr[start] !== '') break;
          }
          var end = arr.length - 1;
          for (; end >= 0; end--) {
            if (arr[end] !== '') break;
          }
          if (start > end) return [];
          return arr.slice(start, end - start + 1);
        }
        var fromParts = trim(from.split('/'));
        var toParts = trim(to.split('/'));
        var length = Math.min(fromParts.length, toParts.length);
        var samePartsLength = length;
        for (var i = 0; i < length; i++) {
          if (fromParts[i] !== toParts[i]) {
            samePartsLength = i;
            break;
          }
        }
        var outputParts = [];
        for (var i = samePartsLength; i < fromParts.length; i++) {
          outputParts.push('..');
        }
        outputParts = outputParts.concat(toParts.slice(samePartsLength));
        return outputParts.join('/');
      }};

  var TTY={ttys:[],init:function () {
        // https://github.com/kripken/emscripten/pull/1555
        // if (ENVIRONMENT_IS_NODE) {
        //   // currently, FS.init does not distinguish if process.stdin is a file or TTY
        //   // device, it always assumes it's a TTY device. because of this, we're forcing
        //   // process.stdin to UTF8 encoding to at least make stdin reading compatible
        //   // with text files until FS.init can be refactored.
        //   process['stdin']['setEncoding']('utf8');
        // }
      },shutdown:function () {
        // https://github.com/kripken/emscripten/pull/1555
        // if (ENVIRONMENT_IS_NODE) {
        //   // inolen: any idea as to why node -e 'process.stdin.read()' wouldn't exit immediately (with process.stdin being a tty)?
        //   // isaacs: because now it's reading from the stream, you've expressed interest in it, so that read() kicks off a _read() which creates a ReadReq operation
        //   // inolen: I thought read() in that case was a synchronous operation that just grabbed some amount of buffered data if it exists?
        //   // isaacs: it is. but it also triggers a _read() call, which calls readStart() on the handle
        //   // isaacs: do process.stdin.pause() and i'd think it'd probably close the pending call
        //   process['stdin']['pause']();
        // }
      },register:function (dev, ops) {
        TTY.ttys[dev] = { input: [], output: [], ops: ops };
        FS.registerDevice(dev, TTY.stream_ops);
      },stream_ops:{open:function (stream) {
          var tty = TTY.ttys[stream.node.rdev];
          if (!tty) {
            throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
          }
          stream.tty = tty;
          stream.seekable = false;
        },close:function (stream) {
          // flush any pending line data
          stream.tty.ops.flush(stream.tty);
        },flush:function (stream) {
          stream.tty.ops.flush(stream.tty);
        },read:function (stream, buffer, offset, length, pos /* ignored */) {
          if (!stream.tty || !stream.tty.ops.get_char) {
            throw new FS.ErrnoError(ERRNO_CODES.ENXIO);
          }
          var bytesRead = 0;
          for (var i = 0; i < length; i++) {
            var result;
            try {
              result = stream.tty.ops.get_char(stream.tty);
            } catch (e) {
              throw new FS.ErrnoError(ERRNO_CODES.EIO);
            }
            if (result === undefined && bytesRead === 0) {
              throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
            }
            if (result === null || result === undefined) break;
            bytesRead++;
            buffer[offset+i] = result;
          }
          if (bytesRead) {
            stream.node.timestamp = Date.now();
          }
          return bytesRead;
        },write:function (stream, buffer, offset, length, pos) {
          if (!stream.tty || !stream.tty.ops.put_char) {
            throw new FS.ErrnoError(ERRNO_CODES.ENXIO);
          }
          for (var i = 0; i < length; i++) {
            try {
              stream.tty.ops.put_char(stream.tty, buffer[offset+i]);
            } catch (e) {
              throw new FS.ErrnoError(ERRNO_CODES.EIO);
            }
          }
          if (length) {
            stream.node.timestamp = Date.now();
          }
          return i;
        }},default_tty_ops:{get_char:function (tty) {
          if (!tty.input.length) {
            var result = null;
            if (ENVIRONMENT_IS_NODE) {
              // we will read data by chunks of BUFSIZE
              var BUFSIZE = 256;
              var buf = new Buffer(BUFSIZE);
              var bytesRead = 0;

              var isPosixPlatform = (process.platform != 'win32'); // Node doesn't offer a direct check, so test by exclusion

              var fd = process.stdin.fd;
              if (isPosixPlatform) {
                // Linux and Mac cannot use process.stdin.fd (which isn't set up as sync)
                var usingDevice = false;
                try {
                  fd = fs.openSync('/dev/stdin', 'r');
                  usingDevice = true;
                } catch (e) {}
              }

              try {
                bytesRead = fs.readSync(fd, buf, 0, BUFSIZE, null);
              } catch(e) {
                // Cross-platform differences: on Windows, reading EOF throws an exception, but on other OSes,
                // reading EOF returns 0. Uniformize behavior by treating the EOF exception to return 0.
                if (e.toString().indexOf('EOF') != -1) bytesRead = 0;
                else throw e;
              }

              if (usingDevice) { fs.closeSync(fd); }
              if (bytesRead > 0) {
                result = buf.slice(0, bytesRead).toString('utf-8');
              } else {
                result = null;
              }

            } else if (typeof window != 'undefined' &&
              typeof window.prompt == 'function') {
              // Browser.
              result = window.prompt('Input: ');  // returns null on cancel
              if (result !== null) {
                result += '\n';
              }
            } else if (typeof readline == 'function') {
              // Command line.
              result = readline();
              if (result !== null) {
                result += '\n';
              }
            }
            if (!result) {
              return null;
            }
            tty.input = intArrayFromString(result, true);
          }
          return tty.input.shift();
        },put_char:function (tty, val) {
          if (val === null || val === 10) {
            Module['print'](UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          } else {
            if (val != 0) tty.output.push(val); // val == 0 would cut text output off in the middle.
          }
        },flush:function (tty) {
          if (tty.output && tty.output.length > 0) {
            Module['print'](UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          }
        }},default_tty1_ops:{put_char:function (tty, val) {
          if (val === null || val === 10) {
            Module['printErr'](UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          } else {
            if (val != 0) tty.output.push(val);
          }
        },flush:function (tty) {
          if (tty.output && tty.output.length > 0) {
            Module['printErr'](UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          }
        }}};

  var MEMFS={ops_table:null,mount:function (mount) {
        return MEMFS.createNode(null, '/', 16384 | 511 /* 0777 */, 0);
      },createNode:function (parent, name, mode, dev) {
        if (FS.isBlkdev(mode) || FS.isFIFO(mode)) {
          // no supported
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (!MEMFS.ops_table) {
          MEMFS.ops_table = {
            dir: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr,
                lookup: MEMFS.node_ops.lookup,
                mknod: MEMFS.node_ops.mknod,
                rename: MEMFS.node_ops.rename,
                unlink: MEMFS.node_ops.unlink,
                rmdir: MEMFS.node_ops.rmdir,
                readdir: MEMFS.node_ops.readdir,
                symlink: MEMFS.node_ops.symlink
              },
              stream: {
                llseek: MEMFS.stream_ops.llseek
              }
            },
            file: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr
              },
              stream: {
                llseek: MEMFS.stream_ops.llseek,
                read: MEMFS.stream_ops.read,
                write: MEMFS.stream_ops.write,
                allocate: MEMFS.stream_ops.allocate,
                mmap: MEMFS.stream_ops.mmap,
                msync: MEMFS.stream_ops.msync
              }
            },
            link: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr,
                readlink: MEMFS.node_ops.readlink
              },
              stream: {}
            },
            chrdev: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr
              },
              stream: FS.chrdev_stream_ops
            }
          };
        }
        var node = FS.createNode(parent, name, mode, dev);
        if (FS.isDir(node.mode)) {
          node.node_ops = MEMFS.ops_table.dir.node;
          node.stream_ops = MEMFS.ops_table.dir.stream;
          node.contents = {};
        } else if (FS.isFile(node.mode)) {
          node.node_ops = MEMFS.ops_table.file.node;
          node.stream_ops = MEMFS.ops_table.file.stream;
          node.usedBytes = 0; // The actual number of bytes used in the typed array, as opposed to contents.length which gives the whole capacity.
          // When the byte data of the file is populated, this will point to either a typed array, or a normal JS array. Typed arrays are preferred
          // for performance, and used by default. However, typed arrays are not resizable like normal JS arrays are, so there is a small disk size
          // penalty involved for appending file writes that continuously grow a file similar to std::vector capacity vs used -scheme.
          node.contents = null;
        } else if (FS.isLink(node.mode)) {
          node.node_ops = MEMFS.ops_table.link.node;
          node.stream_ops = MEMFS.ops_table.link.stream;
        } else if (FS.isChrdev(node.mode)) {
          node.node_ops = MEMFS.ops_table.chrdev.node;
          node.stream_ops = MEMFS.ops_table.chrdev.stream;
        }
        node.timestamp = Date.now();
        // add the new node to the parent
        if (parent) {
          parent.contents[name] = node;
        }
        return node;
      },getFileDataAsRegularArray:function (node) {
        if (node.contents && node.contents.subarray) {
          var arr = [];
          for (var i = 0; i < node.usedBytes; ++i) arr.push(node.contents[i]);
          return arr; // Returns a copy of the original data.
        }
        return node.contents; // No-op, the file contents are already in a JS array. Return as-is.
      },getFileDataAsTypedArray:function (node) {
        if (!node.contents) return new Uint8Array;
        if (node.contents.subarray) return node.contents.subarray(0, node.usedBytes); // Make sure to not return excess unused bytes.
        return new Uint8Array(node.contents);
      },expandFileStorage:function (node, newCapacity) {
        // If we are asked to expand the size of a file that already exists, revert to using a standard JS array to store the file
        // instead of a typed array. This makes resizing the array more flexible because we can just .push() elements at the back to
        // increase the size.
        if (node.contents && node.contents.subarray && newCapacity > node.contents.length) {
          node.contents = MEMFS.getFileDataAsRegularArray(node);
          node.usedBytes = node.contents.length; // We might be writing to a lazy-loaded file which had overridden this property, so force-reset it.
        }

        if (!node.contents || node.contents.subarray) { // Keep using a typed array if creating a new storage, or if old one was a typed array as well.
          var prevCapacity = node.contents ? node.contents.length : 0;
          if (prevCapacity >= newCapacity) return; // No need to expand, the storage was already large enough.
          // Don't expand strictly to the given requested limit if it's only a very small increase, but instead geometrically grow capacity.
          // For small filesizes (<1MB), perform size*2 geometric increase, but for large sizes, do a much more conservative size*1.125 increase to
          // avoid overshooting the allocation cap by a very large margin.
          var CAPACITY_DOUBLING_MAX = 1024 * 1024;
          newCapacity = Math.max(newCapacity, (prevCapacity * (prevCapacity < CAPACITY_DOUBLING_MAX ? 2.0 : 1.125)) | 0);
          if (prevCapacity != 0) newCapacity = Math.max(newCapacity, 256); // At minimum allocate 256b for each file when expanding.
          var oldContents = node.contents;
          node.contents = new Uint8Array(newCapacity); // Allocate new storage.
          if (node.usedBytes > 0) node.contents.set(oldContents.subarray(0, node.usedBytes), 0); // Copy old data over to the new storage.
          return;
        }
        // Not using a typed array to back the file storage. Use a standard JS array instead.
        if (!node.contents && newCapacity > 0) node.contents = [];
        while (node.contents.length < newCapacity) node.contents.push(0);
      },resizeFileStorage:function (node, newSize) {
        if (node.usedBytes == newSize) return;
        if (newSize == 0) {
          node.contents = null; // Fully decommit when requesting a resize to zero.
          node.usedBytes = 0;
          return;
        }
        if (!node.contents || node.contents.subarray) { // Resize a typed array if that is being used as the backing store.
          var oldContents = node.contents;
          node.contents = new Uint8Array(new ArrayBuffer(newSize)); // Allocate new storage.
          if (oldContents) {
            node.contents.set(oldContents.subarray(0, Math.min(newSize, node.usedBytes))); // Copy old data over to the new storage.
          }
          node.usedBytes = newSize;
          return;
        }
        // Backing with a JS array.
        if (!node.contents) node.contents = [];
        if (node.contents.length > newSize) node.contents.length = newSize;
        else while (node.contents.length < newSize) node.contents.push(0);
        node.usedBytes = newSize;
      },node_ops:{getattr:function (node) {
          var attr = {};
          // device numbers reuse inode numbers.
          attr.dev = FS.isChrdev(node.mode) ? node.id : 1;
          attr.ino = node.id;
          attr.mode = node.mode;
          attr.nlink = 1;
          attr.uid = 0;
          attr.gid = 0;
          attr.rdev = node.rdev;
          if (FS.isDir(node.mode)) {
            attr.size = 4096;
          } else if (FS.isFile(node.mode)) {
            attr.size = node.usedBytes;
          } else if (FS.isLink(node.mode)) {
            attr.size = node.link.length;
          } else {
            attr.size = 0;
          }
          attr.atime = new Date(node.timestamp);
          attr.mtime = new Date(node.timestamp);
          attr.ctime = new Date(node.timestamp);
          // NOTE: In our implementation, st_blocks = Math.ceil(st_size/st_blksize),
          //       but this is not required by the standard.
          attr.blksize = 4096;
          attr.blocks = Math.ceil(attr.size / attr.blksize);
          return attr;
        },setattr:function (node, attr) {
          if (attr.mode !== undefined) {
            node.mode = attr.mode;
          }
          if (attr.timestamp !== undefined) {
            node.timestamp = attr.timestamp;
          }
          if (attr.size !== undefined) {
            MEMFS.resizeFileStorage(node, attr.size);
          }
        },lookup:function (parent, name) {
          throw FS.genericErrors[ERRNO_CODES.ENOENT];
        },mknod:function (parent, name, mode, dev) {
          return MEMFS.createNode(parent, name, mode, dev);
        },rename:function (old_node, new_dir, new_name) {
          // if we're overwriting a directory at new_name, make sure it's empty.
          if (FS.isDir(old_node.mode)) {
            var new_node;
            try {
              new_node = FS.lookupNode(new_dir, new_name);
            } catch (e) {
            }
            if (new_node) {
              for (var i in new_node.contents) {
                throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
              }
            }
          }
          // do the internal rewiring
          delete old_node.parent.contents[old_node.name];
          old_node.name = new_name;
          new_dir.contents[new_name] = old_node;
          old_node.parent = new_dir;
        },unlink:function (parent, name) {
          delete parent.contents[name];
        },rmdir:function (parent, name) {
          var node = FS.lookupNode(parent, name);
          for (var i in node.contents) {
            throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
          }
          delete parent.contents[name];
        },readdir:function (node) {
          var entries = ['.', '..']
          for (var key in node.contents) {
            if (!node.contents.hasOwnProperty(key)) {
              continue;
            }
            entries.push(key);
          }
          return entries;
        },symlink:function (parent, newname, oldpath) {
          var node = MEMFS.createNode(parent, newname, 511 /* 0777 */ | 40960, 0);
          node.link = oldpath;
          return node;
        },readlink:function (node) {
          if (!FS.isLink(node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          return node.link;
        }},stream_ops:{read:function (stream, buffer, offset, length, position) {
          var contents = stream.node.contents;
          if (position >= stream.node.usedBytes) return 0;
          var size = Math.min(stream.node.usedBytes - position, length);
          assert(size >= 0);
          if (size > 8 && contents.subarray) { // non-trivial, and typed array
            buffer.set(contents.subarray(position, position + size), offset);
          } else {
            for (var i = 0; i < size; i++) buffer[offset + i] = contents[position + i];
          }
          return size;
        },write:function (stream, buffer, offset, length, position, canOwn) {
          if (!length) return 0;
          var node = stream.node;
          node.timestamp = Date.now();

          if (buffer.subarray && (!node.contents || node.contents.subarray)) { // This write is from a typed array to a typed array?
            if (canOwn) {
              assert(position === 0, 'canOwn must imply no weird position inside the file');
              node.contents = buffer.subarray(offset, offset + length);
              node.usedBytes = length;
              return length;
            } else if (node.usedBytes === 0 && position === 0) { // If this is a simple first write to an empty file, do a fast set since we don't need to care about old data.
              node.contents = new Uint8Array(buffer.subarray(offset, offset + length));
              node.usedBytes = length;
              return length;
            } else if (position + length <= node.usedBytes) { // Writing to an already allocated and used subrange of the file?
              node.contents.set(buffer.subarray(offset, offset + length), position);
              return length;
            }
          }

          // Appending to an existing file and we need to reallocate, or source data did not come as a typed array.
          MEMFS.expandFileStorage(node, position+length);
          if (node.contents.subarray && buffer.subarray) node.contents.set(buffer.subarray(offset, offset + length), position); // Use typed array write if available.
          else {
            for (var i = 0; i < length; i++) {
             node.contents[position + i] = buffer[offset + i]; // Or fall back to manual write if not.
            }
          }
          node.usedBytes = Math.max(node.usedBytes, position+length);
          return length;
        },llseek:function (stream, offset, whence) {
          var position = offset;
          if (whence === 1) {  // SEEK_CUR.
            position += stream.position;
          } else if (whence === 2) {  // SEEK_END.
            if (FS.isFile(stream.node.mode)) {
              position += stream.node.usedBytes;
            }
          }
          if (position < 0) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          return position;
        },allocate:function (stream, offset, length) {
          MEMFS.expandFileStorage(stream.node, offset + length);
          stream.node.usedBytes = Math.max(stream.node.usedBytes, offset + length);
        },mmap:function (stream, buffer, offset, length, position, prot, flags) {
          if (!FS.isFile(stream.node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
          }
          var ptr;
          var allocated;
          var contents = stream.node.contents;
          // Only make a new copy when MAP_PRIVATE is specified.
          if ( !(flags & 2) &&
                (contents.buffer === buffer || contents.buffer === buffer.buffer) ) {
            // We can't emulate MAP_SHARED when the file is not backed by the buffer
            // we're mapping to (e.g. the HEAP buffer).
            allocated = false;
            ptr = contents.byteOffset;
          } else {
            // Try to avoid unnecessary slices.
            if (position > 0 || position + length < stream.node.usedBytes) {
              if (contents.subarray) {
                contents = contents.subarray(position, position + length);
              } else {
                contents = Array.prototype.slice.call(contents, position, position + length);
              }
            }
            allocated = true;
            ptr = _malloc(length);
            if (!ptr) {
              throw new FS.ErrnoError(ERRNO_CODES.ENOMEM);
            }
            buffer.set(contents, ptr);
          }
          return { ptr: ptr, allocated: allocated };
        },msync:function (stream, buffer, offset, length, mmapFlags) {
          if (!FS.isFile(stream.node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
          }
          if (mmapFlags & 2) {
            // MAP_PRIVATE calls need not to be synced back to underlying fs
            return 0;
          }

          var bytesWritten = MEMFS.stream_ops.write(stream, buffer, 0, length, offset, false);
          // should we check if bytesWritten and length are the same?
          return 0;
        }}};

  var IDBFS={dbs:{},indexedDB:function () {
        if (typeof indexedDB !== 'undefined') return indexedDB;
        var ret = null;
        if (typeof window === 'object') ret = window.indexedDB || window.mozIndexedDB || window.webkitIndexedDB || window.msIndexedDB;
        assert(ret, 'IDBFS used, but indexedDB not supported');
        return ret;
      },DB_VERSION:21,DB_STORE_NAME:"FILE_DATA",mount:function (mount) {
        // reuse all of the core MEMFS functionality
        return MEMFS.mount.apply(null, arguments);
      },syncfs:function (mount, populate, callback) {
        IDBFS.getLocalSet(mount, function(err, local) {
          if (err) return callback(err);

          IDBFS.getRemoteSet(mount, function(err, remote) {
            if (err) return callback(err);

            var src = populate ? remote : local;
            var dst = populate ? local : remote;

            IDBFS.reconcile(src, dst, callback);
          });
        });
      },getDB:function (name, callback) {
        // check the cache first
        var db = IDBFS.dbs[name];
        if (db) {
          return callback(null, db);
        }

        var req;
        try {
          req = IDBFS.indexedDB().open(name, IDBFS.DB_VERSION);
        } catch (e) {
          return callback(e);
        }
        if (!req) {
          return callback("Unable to connect to IndexedDB");
        }
        req.onupgradeneeded = function(e) {
          var db = e.target.result;
          var transaction = e.target.transaction;

          var fileStore;

          if (db.objectStoreNames.contains(IDBFS.DB_STORE_NAME)) {
            fileStore = transaction.objectStore(IDBFS.DB_STORE_NAME);
          } else {
            fileStore = db.createObjectStore(IDBFS.DB_STORE_NAME);
          }

          if (!fileStore.indexNames.contains('timestamp')) {
            fileStore.createIndex('timestamp', 'timestamp', { unique: false });
          }
        };
        req.onsuccess = function() {
          db = req.result;

          // add to the cache
          IDBFS.dbs[name] = db;
          callback(null, db);
        };
        req.onerror = function(e) {
          callback(this.error);
          e.preventDefault();
        };
      },getLocalSet:function (mount, callback) {
        var entries = {};

        function isRealDir(p) {
          return p !== '.' && p !== '..';
        };
        function toAbsolute(root) {
          return function(p) {
            return PATH.join2(root, p);
          }
        };

        var check = FS.readdir(mount.mountpoint).filter(isRealDir).map(toAbsolute(mount.mountpoint));

        while (check.length) {
          var path = check.pop();
          var stat;

          try {
            stat = FS.stat(path);
          } catch (e) {
            return callback(e);
          }

          if (FS.isDir(stat.mode)) {
            check.push.apply(check, FS.readdir(path).filter(isRealDir).map(toAbsolute(path)));
          }

          entries[path] = { timestamp: stat.mtime };
        }

        return callback(null, { type: 'local', entries: entries });
      },getRemoteSet:function (mount, callback) {
        var entries = {};

        IDBFS.getDB(mount.mountpoint, function(err, db) {
          if (err) return callback(err);

          var transaction = db.transaction([IDBFS.DB_STORE_NAME], 'readonly');
          transaction.onerror = function(e) {
            callback(this.error);
            e.preventDefault();
          };

          var store = transaction.objectStore(IDBFS.DB_STORE_NAME);
          var index = store.index('timestamp');

          index.openKeyCursor().onsuccess = function(event) {
            var cursor = event.target.result;

            if (!cursor) {
              return callback(null, { type: 'remote', db: db, entries: entries });
            }

            entries[cursor.primaryKey] = { timestamp: cursor.key };

            cursor.continue();
          };
        });
      },loadLocalEntry:function (path, callback) {
        var stat, node;

        try {
          var lookup = FS.lookupPath(path);
          node = lookup.node;
          stat = FS.stat(path);
        } catch (e) {
          return callback(e);
        }

        if (FS.isDir(stat.mode)) {
          return callback(null, { timestamp: stat.mtime, mode: stat.mode });
        } else if (FS.isFile(stat.mode)) {
          // Performance consideration: storing a normal JavaScript array to a IndexedDB is much slower than storing a typed array.
          // Therefore always convert the file contents to a typed array first before writing the data to IndexedDB.
          node.contents = MEMFS.getFileDataAsTypedArray(node);
          return callback(null, { timestamp: stat.mtime, mode: stat.mode, contents: node.contents });
        } else {
          return callback(new Error('node type not supported'));
        }
      },storeLocalEntry:function (path, entry, callback) {
        try {
          if (FS.isDir(entry.mode)) {
            FS.mkdir(path, entry.mode);
          } else if (FS.isFile(entry.mode)) {
            FS.writeFile(path, entry.contents, { encoding: 'binary', canOwn: true });
          } else {
            return callback(new Error('node type not supported'));
          }

          FS.chmod(path, entry.mode);
          FS.utime(path, entry.timestamp, entry.timestamp);
        } catch (e) {
          return callback(e);
        }

        callback(null);
      },removeLocalEntry:function (path, callback) {
        try {
          var lookup = FS.lookupPath(path);
          var stat = FS.stat(path);

          if (FS.isDir(stat.mode)) {
            FS.rmdir(path);
          } else if (FS.isFile(stat.mode)) {
            FS.unlink(path);
          }
        } catch (e) {
          return callback(e);
        }

        callback(null);
      },loadRemoteEntry:function (store, path, callback) {
        var req = store.get(path);
        req.onsuccess = function(event) { callback(null, event.target.result); };
        req.onerror = function(e) {
          callback(this.error);
          e.preventDefault();
        };
      },storeRemoteEntry:function (store, path, entry, callback) {
        var req = store.put(entry, path);
        req.onsuccess = function() { callback(null); };
        req.onerror = function(e) {
          callback(this.error);
          e.preventDefault();
        };
      },removeRemoteEntry:function (store, path, callback) {
        var req = store.delete(path);
        req.onsuccess = function() { callback(null); };
        req.onerror = function(e) {
          callback(this.error);
          e.preventDefault();
        };
      },reconcile:function (src, dst, callback) {
        var total = 0;

        var create = [];
        Object.keys(src.entries).forEach(function (key) {
          var e = src.entries[key];
          var e2 = dst.entries[key];
          if (!e2 || e.timestamp > e2.timestamp) {
            create.push(key);
            total++;
          }
        });

        var remove = [];
        Object.keys(dst.entries).forEach(function (key) {
          var e = dst.entries[key];
          var e2 = src.entries[key];
          if (!e2) {
            remove.push(key);
            total++;
          }
        });

        if (!total) {
          return callback(null);
        }

        var errored = false;
        var completed = 0;
        var db = src.type === 'remote' ? src.db : dst.db;
        var transaction = db.transaction([IDBFS.DB_STORE_NAME], 'readwrite');
        var store = transaction.objectStore(IDBFS.DB_STORE_NAME);

        function done(err) {
          if (err) {
            if (!done.errored) {
              done.errored = true;
              return callback(err);
            }
            return;
          }
          if (++completed >= total) {
            return callback(null);
          }
        };

        transaction.onerror = function(e) {
          done(this.error);
          e.preventDefault();
        };

        // sort paths in ascending order so directory entries are created
        // before the files inside them
        create.sort().forEach(function (path) {
          if (dst.type === 'local') {
            IDBFS.loadRemoteEntry(store, path, function (err, entry) {
              if (err) return done(err);
              IDBFS.storeLocalEntry(path, entry, done);
            });
          } else {
            IDBFS.loadLocalEntry(path, function (err, entry) {
              if (err) return done(err);
              IDBFS.storeRemoteEntry(store, path, entry, done);
            });
          }
        });

        // sort paths in descending order so files are deleted before their
        // parent directories
        remove.sort().reverse().forEach(function(path) {
          if (dst.type === 'local') {
            IDBFS.removeLocalEntry(path, done);
          } else {
            IDBFS.removeRemoteEntry(store, path, done);
          }
        });
      }};

  var NODEFS={isWindows:false,staticInit:function () {
        NODEFS.isWindows = !!process.platform.match(/^win/);
      },mount:function (mount) {
        assert(ENVIRONMENT_IS_NODE);
        return NODEFS.createNode(null, '/', NODEFS.getMode(mount.opts.root), 0);
      },createNode:function (parent, name, mode, dev) {
        if (!FS.isDir(mode) && !FS.isFile(mode) && !FS.isLink(mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var node = FS.createNode(parent, name, mode);
        node.node_ops = NODEFS.node_ops;
        node.stream_ops = NODEFS.stream_ops;
        return node;
      },getMode:function (path) {
        var stat;
        try {
          stat = fs.lstatSync(path);
          if (NODEFS.isWindows) {
            // On Windows, directories return permission bits 'rw-rw-rw-', even though they have 'rwxrwxrwx', so
            // propagate write bits to execute bits.
            stat.mode = stat.mode | ((stat.mode & 146) >> 1);
          }
        } catch (e) {
          if (!e.code) throw e;
          throw new FS.ErrnoError(ERRNO_CODES[e.code]);
        }
        return stat.mode;
      },realPath:function (node) {
        var parts = [];
        while (node.parent !== node) {
          parts.push(node.name);
          node = node.parent;
        }
        parts.push(node.mount.opts.root);
        parts.reverse();
        return PATH.join.apply(null, parts);
      },flagsToPermissionStringMap:{0:"r",1:"r+",2:"r+",64:"r",65:"r+",66:"r+",129:"rx+",193:"rx+",514:"w+",577:"w",578:"w+",705:"wx",706:"wx+",1024:"a",1025:"a",1026:"a+",1089:"a",1090:"a+",1153:"ax",1154:"ax+",1217:"ax",1218:"ax+",4096:"rs",4098:"rs+"},flagsToPermissionString:function (flags) {
        flags &= ~0x200000 /*O_PATH*/; // Ignore this flag from musl, otherwise node.js fails to open the file.
        flags &= ~0x800 /*O_NONBLOCK*/; // Ignore this flag from musl, otherwise node.js fails to open the file.
        flags &= ~0x8000 /*O_LARGEFILE*/; // Ignore this flag from musl, otherwise node.js fails to open the file.
        flags &= ~0x80000 /*O_CLOEXEC*/; // Some applications may pass it; it makes no sense for a single process.
        if (flags in NODEFS.flagsToPermissionStringMap) {
          return NODEFS.flagsToPermissionStringMap[flags];
        } else {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
      },node_ops:{getattr:function (node) {
          var path = NODEFS.realPath(node);
          var stat;
          try {
            stat = fs.lstatSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          // node.js v0.10.20 doesn't report blksize and blocks on Windows. Fake them with default blksize of 4096.
          // See http://support.microsoft.com/kb/140365
          if (NODEFS.isWindows && !stat.blksize) {
            stat.blksize = 4096;
          }
          if (NODEFS.isWindows && !stat.blocks) {
            stat.blocks = (stat.size+stat.blksize-1)/stat.blksize|0;
          }
          return {
            dev: stat.dev,
            ino: stat.ino,
            mode: stat.mode,
            nlink: stat.nlink,
            uid: stat.uid,
            gid: stat.gid,
            rdev: stat.rdev,
            size: stat.size,
            atime: stat.atime,
            mtime: stat.mtime,
            ctime: stat.ctime,
            blksize: stat.blksize,
            blocks: stat.blocks
          };
        },setattr:function (node, attr) {
          var path = NODEFS.realPath(node);
          try {
            if (attr.mode !== undefined) {
              fs.chmodSync(path, attr.mode);
              // update the common node structure mode as well
              node.mode = attr.mode;
            }
            if (attr.timestamp !== undefined) {
              var date = new Date(attr.timestamp);
              fs.utimesSync(path, date, date);
            }
            if (attr.size !== undefined) {
              fs.truncateSync(path, attr.size);
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },lookup:function (parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          var mode = NODEFS.getMode(path);
          return NODEFS.createNode(parent, name, mode);
        },mknod:function (parent, name, mode, dev) {
          var node = NODEFS.createNode(parent, name, mode, dev);
          // create the backing node for this in the fs root as well
          var path = NODEFS.realPath(node);
          try {
            if (FS.isDir(node.mode)) {
              fs.mkdirSync(path, node.mode);
            } else {
              fs.writeFileSync(path, '', { mode: node.mode });
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          return node;
        },rename:function (oldNode, newDir, newName) {
          var oldPath = NODEFS.realPath(oldNode);
          var newPath = PATH.join2(NODEFS.realPath(newDir), newName);
          try {
            fs.renameSync(oldPath, newPath);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },unlink:function (parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          try {
            fs.unlinkSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },rmdir:function (parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          try {
            fs.rmdirSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },readdir:function (node) {
          var path = NODEFS.realPath(node);
          try {
            return fs.readdirSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },symlink:function (parent, newName, oldPath) {
          var newPath = PATH.join2(NODEFS.realPath(parent), newName);
          try {
            fs.symlinkSync(oldPath, newPath);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },readlink:function (node) {
          var path = NODEFS.realPath(node);
          try {
            path = fs.readlinkSync(path);
            path = NODEJS_PATH.relative(NODEJS_PATH.resolve(node.mount.opts.root), path);
            return path;
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        }},stream_ops:{open:function (stream) {
          var path = NODEFS.realPath(stream.node);
          try {
            if (FS.isFile(stream.node.mode)) {
              stream.nfd = fs.openSync(path, NODEFS.flagsToPermissionString(stream.flags));
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },close:function (stream) {
          try {
            if (FS.isFile(stream.node.mode) && stream.nfd) {
              fs.closeSync(stream.nfd);
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },read:function (stream, buffer, offset, length, position) {
          if (length === 0) return 0; // node errors on 0 length reads
          // FIXME this is terrible.
          var nbuffer = new Buffer(length);
          var res;
          try {
            res = fs.readSync(stream.nfd, nbuffer, 0, length, position);
          } catch (e) {
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          if (res > 0) {
            for (var i = 0; i < res; i++) {
              buffer[offset + i] = nbuffer[i];
            }
          }
          return res;
        },write:function (stream, buffer, offset, length, position) {
          // FIXME this is terrible.
          var nbuffer = new Buffer(buffer.subarray(offset, offset + length));
          var res;
          try {
            res = fs.writeSync(stream.nfd, nbuffer, 0, length, position);
          } catch (e) {
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          return res;
        },llseek:function (stream, offset, whence) {
          var position = offset;
          if (whence === 1) {  // SEEK_CUR.
            position += stream.position;
          } else if (whence === 2) {  // SEEK_END.
            if (FS.isFile(stream.node.mode)) {
              try {
                var stat = fs.fstatSync(stream.nfd);
                position += stat.size;
              } catch (e) {
                throw new FS.ErrnoError(ERRNO_CODES[e.code]);
              }
            }
          }

          if (position < 0) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }

          return position;
        }}};

  var WORKERFS={DIR_MODE:16895,FILE_MODE:33279,reader:null,mount:function (mount) {
        assert(ENVIRONMENT_IS_WORKER);
        if (!WORKERFS.reader) WORKERFS.reader = new FileReaderSync();
        var root = WORKERFS.createNode(null, '/', WORKERFS.DIR_MODE, 0);
        var createdParents = {};
        function ensureParent(path) {
          // return the parent node, creating subdirs as necessary
          var parts = path.split('/');
          var parent = root;
          for (var i = 0; i < parts.length-1; i++) {
            var curr = parts.slice(0, i+1).join('/');
            // Issue 4254: Using curr as a node name will prevent the node
            // from being found in FS.nameTable when FS.open is called on
            // a path which holds a child of this node,
            // given that all FS functions assume node names
            // are just their corresponding parts within their given path,
            // rather than incremental aggregates which include their parent's
            // directories.
            if (!createdParents[curr]) {
              createdParents[curr] = WORKERFS.createNode(parent, parts[i], WORKERFS.DIR_MODE, 0);
            }
            parent = createdParents[curr];
          }
          return parent;
        }
        function base(path) {
          var parts = path.split('/');
          return parts[parts.length-1];
        }
        // We also accept FileList here, by using Array.prototype
        Array.prototype.forEach.call(mount.opts["files"] || [], function(file) {
          WORKERFS.createNode(ensureParent(file.name), base(file.name), WORKERFS.FILE_MODE, 0, file, file.lastModifiedDate);
        });
        (mount.opts["blobs"] || []).forEach(function(obj) {
          WORKERFS.createNode(ensureParent(obj["name"]), base(obj["name"]), WORKERFS.FILE_MODE, 0, obj["data"]);
        });
        (mount.opts["packages"] || []).forEach(function(pack) {
          pack['metadata'].files.forEach(function(file) {
            var name = file.filename.substr(1); // remove initial slash
            WORKERFS.createNode(ensureParent(name), base(name), WORKERFS.FILE_MODE, 0, pack['blob'].slice(file.start, file.end));
          });
        });
        return root;
      },createNode:function (parent, name, mode, dev, contents, mtime) {
        var node = FS.createNode(parent, name, mode);
        node.mode = mode;
        node.node_ops = WORKERFS.node_ops;
        node.stream_ops = WORKERFS.stream_ops;
        node.timestamp = (mtime || new Date).getTime();
        assert(WORKERFS.FILE_MODE !== WORKERFS.DIR_MODE);
        if (mode === WORKERFS.FILE_MODE) {
          node.size = contents.size;
          node.contents = contents;
        } else {
          node.size = 4096;
          node.contents = {};
        }
        if (parent) {
          parent.contents[name] = node;
        }
        return node;
      },node_ops:{getattr:function (node) {
          return {
            dev: 1,
            ino: undefined,
            mode: node.mode,
            nlink: 1,
            uid: 0,
            gid: 0,
            rdev: undefined,
            size: node.size,
            atime: new Date(node.timestamp),
            mtime: new Date(node.timestamp),
            ctime: new Date(node.timestamp),
            blksize: 4096,
            blocks: Math.ceil(node.size / 4096),
          };
        },setattr:function (node, attr) {
          if (attr.mode !== undefined) {
            node.mode = attr.mode;
          }
          if (attr.timestamp !== undefined) {
            node.timestamp = attr.timestamp;
          }
        },lookup:function (parent, name) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        },mknod:function (parent, name, mode, dev) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        },rename:function (oldNode, newDir, newName) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        },unlink:function (parent, name) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        },rmdir:function (parent, name) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        },readdir:function (node) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        },symlink:function (parent, newName, oldPath) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        },readlink:function (node) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }},stream_ops:{read:function (stream, buffer, offset, length, position) {
          if (position >= stream.node.size) return 0;
          var chunk = stream.node.contents.slice(position, position + length);
          var ab = WORKERFS.reader.readAsArrayBuffer(chunk);
          buffer.set(new Uint8Array(ab), offset);
          return chunk.size;
        },write:function (stream, buffer, offset, length, position) {
          throw new FS.ErrnoError(ERRNO_CODES.EIO);
        },llseek:function (stream, offset, whence) {
          var position = offset;
          if (whence === 1) {  // SEEK_CUR.
            position += stream.position;
          } else if (whence === 2) {  // SEEK_END.
            if (FS.isFile(stream.node.mode)) {
              position += stream.node.size;
            }
          }
          if (position < 0) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          return position;
        }}};

  var _stdin=STATICTOP; STATICTOP += 16;;

  var _stdout=STATICTOP; STATICTOP += 16;;

  var _stderr=STATICTOP; STATICTOP += 16;;var FS={root:null,mounts:[],devices:[null],streams:[],nextInode:1,nameTable:null,currentPath:"/",initialized:false,ignorePermissions:true,trackingDelegate:{},tracking:{openFlags:{READ:1,WRITE:2}},ErrnoError:null,genericErrors:{},filesystems:null,syncFSRequests:0,handleFSError:function (e) {
        if (!(e instanceof FS.ErrnoError)) throw e + ' : ' + stackTrace();
        return ___setErrNo(e.errno);
      },lookupPath:function (path, opts) {
        path = PATH.resolve(FS.cwd(), path);
        opts = opts || {};

        if (!path) return { path: '', node: null };

        var defaults = {
          follow_mount: true,
          recurse_count: 0
        };
        for (var key in defaults) {
          if (opts[key] === undefined) {
            opts[key] = defaults[key];
          }
        }

        if (opts.recurse_count > 8) {  // max recursive lookup of 8
          throw new FS.ErrnoError(ERRNO_CODES.ELOOP);
        }

        // split the path
        var parts = PATH.normalizeArray(path.split('/').filter(function(p) {
          return !!p;
        }), false);

        // start at the root
        var current = FS.root;
        var current_path = '/';

        for (var i = 0; i < parts.length; i++) {
          var islast = (i === parts.length-1);
          if (islast && opts.parent) {
            // stop resolving
            break;
          }

          current = FS.lookupNode(current, parts[i]);
          current_path = PATH.join2(current_path, parts[i]);

          // jump to the mount's root node if this is a mountpoint
          if (FS.isMountpoint(current)) {
            if (!islast || (islast && opts.follow_mount)) {
              current = current.mounted.root;
            }
          }

          // by default, lookupPath will not follow a symlink if it is the final path component.
          // setting opts.follow = true will override this behavior.
          if (!islast || opts.follow) {
            var count = 0;
            while (FS.isLink(current.mode)) {
              var link = FS.readlink(current_path);
              current_path = PATH.resolve(PATH.dirname(current_path), link);

              var lookup = FS.lookupPath(current_path, { recurse_count: opts.recurse_count });
              current = lookup.node;

              if (count++ > 40) {  // limit max consecutive symlinks to 40 (SYMLOOP_MAX).
                throw new FS.ErrnoError(ERRNO_CODES.ELOOP);
              }
            }
          }
        }

        return { path: current_path, node: current };
      },getPath:function (node) {
        var path;
        while (true) {
          if (FS.isRoot(node)) {
            var mount = node.mount.mountpoint;
            if (!path) return mount;
            return mount[mount.length-1] !== '/' ? mount + '/' + path : mount + path;
          }
          path = path ? node.name + '/' + path : node.name;
          node = node.parent;
        }
      },hashName:function (parentid, name) {
        var hash = 0;


        for (var i = 0; i < name.length; i++) {
          hash = ((hash << 5) - hash + name.charCodeAt(i)) | 0;
        }
        return ((parentid + hash) >>> 0) % FS.nameTable.length;
      },hashAddNode:function (node) {
        var hash = FS.hashName(node.parent.id, node.name);
        node.name_next = FS.nameTable[hash];
        FS.nameTable[hash] = node;
      },hashRemoveNode:function (node) {
        var hash = FS.hashName(node.parent.id, node.name);
        if (FS.nameTable[hash] === node) {
          FS.nameTable[hash] = node.name_next;
        } else {
          var current = FS.nameTable[hash];
          while (current) {
            if (current.name_next === node) {
              current.name_next = node.name_next;
              break;
            }
            current = current.name_next;
          }
        }
      },lookupNode:function (parent, name) {
        var err = FS.mayLookup(parent);
        if (err) {
          throw new FS.ErrnoError(err, parent);
        }
        var hash = FS.hashName(parent.id, name);
        for (var node = FS.nameTable[hash]; node; node = node.name_next) {
          var nodeName = node.name;
          if (node.parent.id === parent.id && nodeName === name) {
            return node;
          }
        }
        // if we failed to find it in the cache, call into the VFS
        return FS.lookup(parent, name);
      },createNode:function (parent, name, mode, rdev) {
        if (!FS.FSNode) {
          FS.FSNode = function(parent, name, mode, rdev) {
            if (!parent) {
              parent = this;  // root node sets parent to itself
            }
            this.parent = parent;
            this.mount = parent.mount;
            this.mounted = null;
            this.id = FS.nextInode++;
            this.name = name;
            this.mode = mode;
            this.node_ops = {};
            this.stream_ops = {};
            this.rdev = rdev;
          };

          FS.FSNode.prototype = {};

          // compatibility
          var readMode = 292 | 73;
          var writeMode = 146;

          // NOTE we must use Object.defineProperties instead of individual calls to
          // Object.defineProperty in order to make closure compiler happy
          Object.defineProperties(FS.FSNode.prototype, {
            read: {
              get: function() { return (this.mode & readMode) === readMode; },
              set: function(val) { val ? this.mode |= readMode : this.mode &= ~readMode; }
            },
            write: {
              get: function() { return (this.mode & writeMode) === writeMode; },
              set: function(val) { val ? this.mode |= writeMode : this.mode &= ~writeMode; }
            },
            isFolder: {
              get: function() { return FS.isDir(this.mode); }
            },
            isDevice: {
              get: function() { return FS.isChrdev(this.mode); }
            }
          });
        }

        var node = new FS.FSNode(parent, name, mode, rdev);

        FS.hashAddNode(node);

        return node;
      },destroyNode:function (node) {
        FS.hashRemoveNode(node);
      },isRoot:function (node) {
        return node === node.parent;
      },isMountpoint:function (node) {
        return !!node.mounted;
      },isFile:function (mode) {
        return (mode & 61440) === 32768;
      },isDir:function (mode) {
        return (mode & 61440) === 16384;
      },isLink:function (mode) {
        return (mode & 61440) === 40960;
      },isChrdev:function (mode) {
        return (mode & 61440) === 8192;
      },isBlkdev:function (mode) {
        return (mode & 61440) === 24576;
      },isFIFO:function (mode) {
        return (mode & 61440) === 4096;
      },isSocket:function (mode) {
        return (mode & 49152) === 49152;
      },flagModes:{"r":0,"rs":1052672,"r+":2,"w":577,"wx":705,"xw":705,"w+":578,"wx+":706,"xw+":706,"a":1089,"ax":1217,"xa":1217,"a+":1090,"ax+":1218,"xa+":1218},modeStringToFlags:function (str) {
        var flags = FS.flagModes[str];
        if (typeof flags === 'undefined') {
          throw new Error('Unknown file open mode: ' + str);
        }
        return flags;
      },flagsToPermissionString:function (flag) {
        var perms = ['r', 'w', 'rw'][flag & 3];
        if ((flag & 512)) {
          perms += 'w';
        }
        return perms;
      },nodePermissions:function (node, perms) {
        if (FS.ignorePermissions) {
          return 0;
        }
        // return 0 if any user, group or owner bits are set.
        if (perms.indexOf('r') !== -1 && !(node.mode & 292)) {
          return ERRNO_CODES.EACCES;
        } else if (perms.indexOf('w') !== -1 && !(node.mode & 146)) {
          return ERRNO_CODES.EACCES;
        } else if (perms.indexOf('x') !== -1 && !(node.mode & 73)) {
          return ERRNO_CODES.EACCES;
        }
        return 0;
      },mayLookup:function (dir) {
        var err = FS.nodePermissions(dir, 'x');
        if (err) return err;
        if (!dir.node_ops.lookup) return ERRNO_CODES.EACCES;
        return 0;
      },mayCreate:function (dir, name) {
        try {
          var node = FS.lookupNode(dir, name);
          return ERRNO_CODES.EEXIST;
        } catch (e) {
        }
        return FS.nodePermissions(dir, 'wx');
      },mayDelete:function (dir, name, isdir) {
        var node;
        try {
          node = FS.lookupNode(dir, name);
        } catch (e) {
          return e.errno;
        }
        var err = FS.nodePermissions(dir, 'wx');
        if (err) {
          return err;
        }
        if (isdir) {
          if (!FS.isDir(node.mode)) {
            return ERRNO_CODES.ENOTDIR;
          }
          if (FS.isRoot(node) || FS.getPath(node) === FS.cwd()) {
            return ERRNO_CODES.EBUSY;
          }
        } else {
          if (FS.isDir(node.mode)) {
            return ERRNO_CODES.EISDIR;
          }
        }
        return 0;
      },mayOpen:function (node, flags) {
        if (!node) {
          return ERRNO_CODES.ENOENT;
        }
        if (FS.isLink(node.mode)) {
          return ERRNO_CODES.ELOOP;
        } else if (FS.isDir(node.mode)) {
          if (FS.flagsToPermissionString(flags) !== 'r' || // opening for write
              (flags & 512)) { // TODO: check for O_SEARCH? (== search for dir only)
            return ERRNO_CODES.EISDIR;
          }
        }
        return FS.nodePermissions(node, FS.flagsToPermissionString(flags));
      },MAX_OPEN_FDS:4096,nextfd:function (fd_start, fd_end) {
        fd_start = fd_start || 0;
        fd_end = fd_end || FS.MAX_OPEN_FDS;
        for (var fd = fd_start; fd <= fd_end; fd++) {
          if (!FS.streams[fd]) {
            return fd;
          }
        }
        throw new FS.ErrnoError(ERRNO_CODES.EMFILE);
      },getStream:function (fd) {
        return FS.streams[fd];
      },createStream:function (stream, fd_start, fd_end) {
        if (!FS.FSStream) {
          FS.FSStream = function(){};
          FS.FSStream.prototype = {};
          // compatibility
          Object.defineProperties(FS.FSStream.prototype, {
            object: {
              get: function() { return this.node; },
              set: function(val) { this.node = val; }
            },
            isRead: {
              get: function() { return (this.flags & 2097155) !== 1; }
            },
            isWrite: {
              get: function() { return (this.flags & 2097155) !== 0; }
            },
            isAppend: {
              get: function() { return (this.flags & 1024); }
            }
          });
        }
        // clone it, so we can return an instance of FSStream
        var newStream = new FS.FSStream();
        for (var p in stream) {
          newStream[p] = stream[p];
        }
        stream = newStream;
        var fd = FS.nextfd(fd_start, fd_end);
        stream.fd = fd;
        FS.streams[fd] = stream;
        return stream;
      },closeStream:function (fd) {
        FS.streams[fd] = null;
      },chrdev_stream_ops:{open:function (stream) {
          var device = FS.getDevice(stream.node.rdev);
          // override node's stream ops with the device's
          stream.stream_ops = device.stream_ops;
          // forward the open call
          if (stream.stream_ops.open) {
            stream.stream_ops.open(stream);
          }
        },llseek:function () {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }},major:function (dev) {
        return ((dev) >> 8);
      },minor:function (dev) {
        return ((dev) & 0xff);
      },makedev:function (ma, mi) {
        return ((ma) << 8 | (mi));
      },registerDevice:function (dev, ops) {
        FS.devices[dev] = { stream_ops: ops };
      },getDevice:function (dev) {
        return FS.devices[dev];
      },getMounts:function (mount) {
        var mounts = [];
        var check = [mount];

        while (check.length) {
          var m = check.pop();

          mounts.push(m);

          check.push.apply(check, m.mounts);
        }

        return mounts;
      },syncfs:function (populate, callback) {
        if (typeof(populate) === 'function') {
          callback = populate;
          populate = false;
        }

        FS.syncFSRequests++;

        if (FS.syncFSRequests > 1) {
          console.log('warning: ' + FS.syncFSRequests + ' FS.syncfs operations in flight at once, probably just doing extra work');
        }

        var mounts = FS.getMounts(FS.root.mount);
        var completed = 0;

        function doCallback(err) {
          assert(FS.syncFSRequests > 0);
          FS.syncFSRequests--;
          return callback(err);
        }

        function done(err) {
          if (err) {
            if (!done.errored) {
              done.errored = true;
              return doCallback(err);
            }
            return;
          }
          if (++completed >= mounts.length) {
            doCallback(null);
          }
        };

        // sync all mounts
        mounts.forEach(function (mount) {
          if (!mount.type.syncfs) {
            return done(null);
          }
          mount.type.syncfs(mount, populate, done);
        });
      },mount:function (type, opts, mountpoint) {
        var root = mountpoint === '/';
        var pseudo = !mountpoint;
        var node;

        if (root && FS.root) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        } else if (!root && !pseudo) {
          var lookup = FS.lookupPath(mountpoint, { follow_mount: false });

          mountpoint = lookup.path;  // use the absolute path
          node = lookup.node;

          if (FS.isMountpoint(node)) {
            throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
          }

          if (!FS.isDir(node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
          }
        }

        var mount = {
          type: type,
          opts: opts,
          mountpoint: mountpoint,
          mounts: []
        };

        // create a root node for the fs
        var mountRoot = type.mount(mount);
        mountRoot.mount = mount;
        mount.root = mountRoot;

        if (root) {
          FS.root = mountRoot;
        } else if (node) {
          // set as a mountpoint
          node.mounted = mount;

          // add the new mount to the current mount's children
          if (node.mount) {
            node.mount.mounts.push(mount);
          }
        }

        return mountRoot;
      },unmount:function (mountpoint) {
        var lookup = FS.lookupPath(mountpoint, { follow_mount: false });

        if (!FS.isMountpoint(lookup.node)) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }

        // destroy the nodes for this mount, and all its child mounts
        var node = lookup.node;
        var mount = node.mounted;
        var mounts = FS.getMounts(mount);

        Object.keys(FS.nameTable).forEach(function (hash) {
          var current = FS.nameTable[hash];

          while (current) {
            var next = current.name_next;

            if (mounts.indexOf(current.mount) !== -1) {
              FS.destroyNode(current);
            }

            current = next;
          }
        });

        // no longer a mountpoint
        node.mounted = null;

        // remove this mount from the child mounts
        var idx = node.mount.mounts.indexOf(mount);
        assert(idx !== -1);
        node.mount.mounts.splice(idx, 1);
      },lookup:function (parent, name) {
        return parent.node_ops.lookup(parent, name);
      },mknod:function (path, mode, dev) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        if (!name || name === '.' || name === '..') {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var err = FS.mayCreate(parent, name);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.mknod) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        return parent.node_ops.mknod(parent, name, mode, dev);
      },create:function (path, mode) {
        mode = mode !== undefined ? mode : 438 /* 0666 */;
        mode &= 4095;
        mode |= 32768;
        return FS.mknod(path, mode, 0);
      },mkdir:function (path, mode) {
        mode = mode !== undefined ? mode : 511 /* 0777 */;
        mode &= 511 | 512;
        mode |= 16384;
        return FS.mknod(path, mode, 0);
      },mkdirTree:function (path, mode) {
        var dirs = path.split('/');
        var d = '';
        for (var i = 0; i < dirs.length; ++i) {
          if (!dirs[i]) continue;
          d += '/' + dirs[i];
          try {
            FS.mkdir(d, mode);
          } catch(e) {
            if (e.errno != ERRNO_CODES.EEXIST) throw e;
          }
        }
      },mkdev:function (path, mode, dev) {
        if (typeof(dev) === 'undefined') {
          dev = mode;
          mode = 438 /* 0666 */;
        }
        mode |= 8192;
        return FS.mknod(path, mode, dev);
      },symlink:function (oldpath, newpath) {
        if (!PATH.resolve(oldpath)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        var lookup = FS.lookupPath(newpath, { parent: true });
        var parent = lookup.node;
        if (!parent) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        var newname = PATH.basename(newpath);
        var err = FS.mayCreate(parent, newname);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.symlink) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        return parent.node_ops.symlink(parent, newname, oldpath);
      },rename:function (old_path, new_path) {
        var old_dirname = PATH.dirname(old_path);
        var new_dirname = PATH.dirname(new_path);
        var old_name = PATH.basename(old_path);
        var new_name = PATH.basename(new_path);
        // parents must exist
        var lookup, old_dir, new_dir;
        try {
          lookup = FS.lookupPath(old_path, { parent: true });
          old_dir = lookup.node;
          lookup = FS.lookupPath(new_path, { parent: true });
          new_dir = lookup.node;
        } catch (e) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        if (!old_dir || !new_dir) throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        // need to be part of the same mount
        if (old_dir.mount !== new_dir.mount) {
          throw new FS.ErrnoError(ERRNO_CODES.EXDEV);
        }
        // source must exist
        var old_node = FS.lookupNode(old_dir, old_name);
        // old path should not be an ancestor of the new path
        var relative = PATH.relative(old_path, new_dirname);
        if (relative.charAt(0) !== '.') {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        // new path should not be an ancestor of the old path
        relative = PATH.relative(new_path, old_dirname);
        if (relative.charAt(0) !== '.') {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
        }
        // see if the new path already exists
        var new_node;
        try {
          new_node = FS.lookupNode(new_dir, new_name);
        } catch (e) {
          // not fatal
        }
        // early out if nothing needs to change
        if (old_node === new_node) {
          return;
        }
        // we'll need to delete the old entry
        var isdir = FS.isDir(old_node.mode);
        var err = FS.mayDelete(old_dir, old_name, isdir);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        // need delete permissions if we'll be overwriting.
        // need create permissions if new doesn't already exist.
        err = new_node ?
          FS.mayDelete(new_dir, new_name, isdir) :
          FS.mayCreate(new_dir, new_name);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!old_dir.node_ops.rename) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isMountpoint(old_node) || (new_node && FS.isMountpoint(new_node))) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        // if we are going to change the parent, check write permissions
        if (new_dir !== old_dir) {
          err = FS.nodePermissions(old_dir, 'w');
          if (err) {
            throw new FS.ErrnoError(err);
          }
        }
        try {
          if (FS.trackingDelegate['willMovePath']) {
            FS.trackingDelegate['willMovePath'](old_path, new_path);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['willMovePath']('"+old_path+"', '"+new_path+"') threw an exception: " + e.message);
        }
        // remove the node from the lookup hash
        FS.hashRemoveNode(old_node);
        // do the underlying fs rename
        try {
          old_dir.node_ops.rename(old_node, new_dir, new_name);
        } catch (e) {
          throw e;
        } finally {
          // add the node back to the hash (in case node_ops.rename
          // changed its name)
          FS.hashAddNode(old_node);
        }
        try {
          if (FS.trackingDelegate['onMovePath']) FS.trackingDelegate['onMovePath'](old_path, new_path);
        } catch(e) {
          console.log("FS.trackingDelegate['onMovePath']('"+old_path+"', '"+new_path+"') threw an exception: " + e.message);
        }
      },rmdir:function (path) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        var node = FS.lookupNode(parent, name);
        var err = FS.mayDelete(parent, name, true);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.rmdir) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isMountpoint(node)) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        try {
          if (FS.trackingDelegate['willDeletePath']) {
            FS.trackingDelegate['willDeletePath'](path);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['willDeletePath']('"+path+"') threw an exception: " + e.message);
        }
        parent.node_ops.rmdir(parent, name);
        FS.destroyNode(node);
        try {
          if (FS.trackingDelegate['onDeletePath']) FS.trackingDelegate['onDeletePath'](path);
        } catch(e) {
          console.log("FS.trackingDelegate['onDeletePath']('"+path+"') threw an exception: " + e.message);
        }
      },readdir:function (path) {
        var lookup = FS.lookupPath(path, { follow: true });
        var node = lookup.node;
        if (!node.node_ops.readdir) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
        }
        return node.node_ops.readdir(node);
      },unlink:function (path) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        var node = FS.lookupNode(parent, name);
        var err = FS.mayDelete(parent, name, false);
        if (err) {
          // According to POSIX, we should map EISDIR to EPERM, but
          // we instead do what Linux does (and we must, as we use
          // the musl linux libc).
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.unlink) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isMountpoint(node)) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        try {
          if (FS.trackingDelegate['willDeletePath']) {
            FS.trackingDelegate['willDeletePath'](path);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['willDeletePath']('"+path+"') threw an exception: " + e.message);
        }
        parent.node_ops.unlink(parent, name);
        FS.destroyNode(node);
        try {
          if (FS.trackingDelegate['onDeletePath']) FS.trackingDelegate['onDeletePath'](path);
        } catch(e) {
          console.log("FS.trackingDelegate['onDeletePath']('"+path+"') threw an exception: " + e.message);
        }
      },readlink:function (path) {
        var lookup = FS.lookupPath(path);
        var link = lookup.node;
        if (!link) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        if (!link.node_ops.readlink) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        return PATH.resolve(FS.getPath(link.parent), link.node_ops.readlink(link));
      },stat:function (path, dontFollow) {
        var lookup = FS.lookupPath(path, { follow: !dontFollow });
        var node = lookup.node;
        if (!node) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        if (!node.node_ops.getattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        return node.node_ops.getattr(node);
      },lstat:function (path) {
        return FS.stat(path, true);
      },chmod:function (path, mode, dontFollow) {
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: !dontFollow });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        node.node_ops.setattr(node, {
          mode: (mode & 4095) | (node.mode & ~4095),
          timestamp: Date.now()
        });
      },lchmod:function (path, mode) {
        FS.chmod(path, mode, true);
      },fchmod:function (fd, mode) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        FS.chmod(stream.node, mode);
      },chown:function (path, uid, gid, dontFollow) {
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: !dontFollow });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        node.node_ops.setattr(node, {
          timestamp: Date.now()
          // we ignore the uid / gid for now
        });
      },lchown:function (path, uid, gid) {
        FS.chown(path, uid, gid, true);
      },fchown:function (fd, uid, gid) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        FS.chown(stream.node, uid, gid);
      },truncate:function (path, len) {
        if (len < 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: true });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isDir(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
        }
        if (!FS.isFile(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var err = FS.nodePermissions(node, 'w');
        if (err) {
          throw new FS.ErrnoError(err);
        }
        node.node_ops.setattr(node, {
          size: len,
          timestamp: Date.now()
        });
      },ftruncate:function (fd, len) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        FS.truncate(stream.node, len);
      },utime:function (path, atime, mtime) {
        var lookup = FS.lookupPath(path, { follow: true });
        var node = lookup.node;
        node.node_ops.setattr(node, {
          timestamp: Math.max(atime, mtime)
        });
      },open:function (path, flags, mode, fd_start, fd_end) {
        if (path === "") {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        flags = typeof flags === 'string' ? FS.modeStringToFlags(flags) : flags;
        mode = typeof mode === 'undefined' ? 438 /* 0666 */ : mode;
        if ((flags & 64)) {
          mode = (mode & 4095) | 32768;
        } else {
          mode = 0;
        }
        var node;
        if (typeof path === 'object') {
          node = path;
        } else {
          path = PATH.normalize(path);
          try {
            var lookup = FS.lookupPath(path, {
              follow: !(flags & 131072)
            });
            node = lookup.node;
          } catch (e) {
            // ignore
          }
        }
        // perhaps we need to create the node
        var created = false;
        if ((flags & 64)) {
          if (node) {
            // if O_CREAT and O_EXCL are set, error out if the node already exists
            if ((flags & 128)) {
              throw new FS.ErrnoError(ERRNO_CODES.EEXIST);
            }
          } else {
            // node doesn't exist, try to create it
            node = FS.mknod(path, mode, 0);
            created = true;
          }
        }
        if (!node) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        // can't truncate a device
        if (FS.isChrdev(node.mode)) {
          flags &= ~512;
        }
        // if asked only for a directory, then this must be one
        if ((flags & 65536) && !FS.isDir(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
        }
        // check permissions, if this is not a file we just created now (it is ok to
        // create and write to a file with read-only permissions; it is read-only
        // for later use)
        if (!created) {
          var err = FS.mayOpen(node, flags);
          if (err) {
            throw new FS.ErrnoError(err);
          }
        }
        // do truncation if necessary
        if ((flags & 512)) {
          FS.truncate(node, 0);
        }
        // we've already handled these, don't pass down to the underlying vfs
        flags &= ~(128 | 512);

        // register the stream with the filesystem
        var stream = FS.createStream({
          node: node,
          path: FS.getPath(node),  // we want the absolute path to the node
          flags: flags,
          seekable: true,
          position: 0,
          stream_ops: node.stream_ops,
          // used by the file family libc calls (fopen, fwrite, ferror, etc.)
          ungotten: [],
          error: false
        }, fd_start, fd_end);
        // call the new stream's open function
        if (stream.stream_ops.open) {
          stream.stream_ops.open(stream);
        }
        if (Module['logReadFiles'] && !(flags & 1)) {
          if (!FS.readFiles) FS.readFiles = {};
          if (!(path in FS.readFiles)) {
            FS.readFiles[path] = 1;
            Module['printErr']('read file: ' + path);
          }
        }
        try {
          if (FS.trackingDelegate['onOpenFile']) {
            var trackingFlags = 0;
            if ((flags & 2097155) !== 1) {
              trackingFlags |= FS.tracking.openFlags.READ;
            }
            if ((flags & 2097155) !== 0) {
              trackingFlags |= FS.tracking.openFlags.WRITE;
            }
            FS.trackingDelegate['onOpenFile'](path, trackingFlags);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['onOpenFile']('"+path+"', flags) threw an exception: " + e.message);
        }
        return stream;
      },close:function (stream) {
        if (stream.getdents) stream.getdents = null; // free readdir state
        try {
          if (stream.stream_ops.close) {
            stream.stream_ops.close(stream);
          }
        } catch (e) {
          throw e;
        } finally {
          FS.closeStream(stream.fd);
        }
      },llseek:function (stream, offset, whence) {
        if (!stream.seekable || !stream.stream_ops.llseek) {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }
        stream.position = stream.stream_ops.llseek(stream, offset, whence);
        stream.ungotten = [];
        return stream.position;
      },read:function (stream, buffer, offset, length, position) {
        if (length < 0 || position < 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if ((stream.flags & 2097155) === 1) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (FS.isDir(stream.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
        }
        if (!stream.stream_ops.read) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var seeking = true;
        if (typeof position === 'undefined') {
          position = stream.position;
          seeking = false;
        } else if (!stream.seekable) {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }
        var bytesRead = stream.stream_ops.read(stream, buffer, offset, length, position);
        if (!seeking) stream.position += bytesRead;
        return bytesRead;
      },write:function (stream, buffer, offset, length, position, canOwn) {
        if (length < 0 || position < 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (FS.isDir(stream.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
        }
        if (!stream.stream_ops.write) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if (stream.flags & 1024) {
          // seek to the end before writing in append mode
          FS.llseek(stream, 0, 2);
        }
        var seeking = true;
        if (typeof position === 'undefined') {
          position = stream.position;
          seeking = false;
        } else if (!stream.seekable) {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }
        var bytesWritten = stream.stream_ops.write(stream, buffer, offset, length, position, canOwn);
        if (!seeking) stream.position += bytesWritten;
        try {
          if (stream.path && FS.trackingDelegate['onWriteToFile']) FS.trackingDelegate['onWriteToFile'](stream.path);
        } catch(e) {
          console.log("FS.trackingDelegate['onWriteToFile']('"+path+"') threw an exception: " + e.message);
        }
        return bytesWritten;
      },allocate:function (stream, offset, length) {
        if (offset < 0 || length <= 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (!FS.isFile(stream.node.mode) && !FS.isDir(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
        }
        if (!stream.stream_ops.allocate) {
          throw new FS.ErrnoError(ERRNO_CODES.EOPNOTSUPP);
        }
        stream.stream_ops.allocate(stream, offset, length);
      },mmap:function (stream, buffer, offset, length, position, prot, flags) {
        // TODO if PROT is PROT_WRITE, make sure we have write access
        if ((stream.flags & 2097155) === 1) {
          throw new FS.ErrnoError(ERRNO_CODES.EACCES);
        }
        if (!stream.stream_ops.mmap) {
          throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
        }
        return stream.stream_ops.mmap(stream, buffer, offset, length, position, prot, flags);
      },msync:function (stream, buffer, offset, length, mmapFlags) {
        if (!stream || !stream.stream_ops.msync) {
          return 0;
        }
        return stream.stream_ops.msync(stream, buffer, offset, length, mmapFlags);
      },munmap:function (stream) {
        return 0;
      },ioctl:function (stream, cmd, arg) {
        if (!stream.stream_ops.ioctl) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTTY);
        }
        return stream.stream_ops.ioctl(stream, cmd, arg);
      },readFile:function (path, opts) {
        opts = opts || {};
        opts.flags = opts.flags || 'r';
        opts.encoding = opts.encoding || 'binary';
        if (opts.encoding !== 'utf8' && opts.encoding !== 'binary') {
          throw new Error('Invalid encoding type "' + opts.encoding + '"');
        }
        var ret;
        var stream = FS.open(path, opts.flags);
        var stat = FS.stat(path);
        var length = stat.size;
        var buf = new Uint8Array(length);
        FS.read(stream, buf, 0, length, 0);
        if (opts.encoding === 'utf8') {
          ret = UTF8ArrayToString(buf, 0);
        } else if (opts.encoding === 'binary') {
          ret = buf;
        }
        FS.close(stream);
        return ret;
      },writeFile:function (path, data, opts) {
        opts = opts || {};
        opts.flags = opts.flags || 'w';
        opts.encoding = opts.encoding || 'utf8';
        if (opts.encoding !== 'utf8' && opts.encoding !== 'binary') {
          throw new Error('Invalid encoding type "' + opts.encoding + '"');
        }
        var stream = FS.open(path, opts.flags, opts.mode);
        if (opts.encoding === 'utf8') {
          var buf = new Uint8Array(lengthBytesUTF8(data)+1);
          var actualNumBytes = stringToUTF8Array(data, buf, 0, buf.length);
          FS.write(stream, buf, 0, actualNumBytes, 0, opts.canOwn);
        } else if (opts.encoding === 'binary') {
          FS.write(stream, data, 0, data.length, 0, opts.canOwn);
        }
        FS.close(stream);
      },cwd:function () {
        return FS.currentPath;
      },chdir:function (path) {
        var lookup = FS.lookupPath(path, { follow: true });
        if (lookup.node === null) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        if (!FS.isDir(lookup.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
        }
        var err = FS.nodePermissions(lookup.node, 'x');
        if (err) {
          throw new FS.ErrnoError(err);
        }
        FS.currentPath = lookup.path;
      },createDefaultDirectories:function () {
        FS.mkdir('/tmp');
        FS.mkdir('/home');
        FS.mkdir('/home/web_user');
      },createDefaultDevices:function () {
        // create /dev
        FS.mkdir('/dev');
        // setup /dev/null
        FS.registerDevice(FS.makedev(1, 3), {
          read: function() { return 0; },
          write: function(stream, buffer, offset, length, pos) { return length; }
        });
        FS.mkdev('/dev/null', FS.makedev(1, 3));
        // setup /dev/tty and /dev/tty1
        // stderr needs to print output using Module['printErr']
        // so we register a second tty just for it.
        TTY.register(FS.makedev(5, 0), TTY.default_tty_ops);
        TTY.register(FS.makedev(6, 0), TTY.default_tty1_ops);
        FS.mkdev('/dev/tty', FS.makedev(5, 0));
        FS.mkdev('/dev/tty1', FS.makedev(6, 0));
        // setup /dev/[u]random
        var random_device;
        if (typeof crypto !== 'undefined') {
          // for modern web browsers
          var randomBuffer = new Uint8Array(1);
          random_device = function() { crypto.getRandomValues(randomBuffer); return randomBuffer[0]; };
        } else if (ENVIRONMENT_IS_NODE) {
          // for nodejs
          random_device = function() { return require('crypto').randomBytes(1)[0]; };
        } else {
          // default for ES5 platforms
          random_device = function() { return (Math.random()*256)|0; };
        }
        FS.createDevice('/dev', 'random', random_device);
        FS.createDevice('/dev', 'urandom', random_device);
        // we're not going to emulate the actual shm device,
        // just create the tmp dirs that reside in it commonly
        FS.mkdir('/dev/shm');
        FS.mkdir('/dev/shm/tmp');
      },createSpecialDirectories:function () {
        // create /proc/self/fd which allows /proc/self/fd/6 => readlink gives the name of the stream for fd 6 (see test_unistd_ttyname)
        FS.mkdir('/proc');
        FS.mkdir('/proc/self');
        FS.mkdir('/proc/self/fd');
        FS.mount({
          mount: function() {
            var node = FS.createNode('/proc/self', 'fd', 16384 | 511 /* 0777 */, 73);
            node.node_ops = {
              lookup: function(parent, name) {
                var fd = +name;
                var stream = FS.getStream(fd);
                if (!stream) throw new FS.ErrnoError(ERRNO_CODES.EBADF);
                var ret = {
                  parent: null,
                  mount: { mountpoint: 'fake' },
                  node_ops: { readlink: function() { return stream.path } }
                };
                ret.parent = ret; // make it look like a simple root node
                return ret;
              }
            };
            return node;
          }
        }, {}, '/proc/self/fd');
      },createStandardStreams:function () {
        // TODO deprecate the old functionality of a single
        // input / output callback and that utilizes FS.createDevice
        // and instead require a unique set of stream ops

        // by default, we symlink the standard streams to the
        // default tty devices. however, if the standard streams
        // have been overwritten we create a unique device for
        // them instead.
        if (Module['stdin']) {
          FS.createDevice('/dev', 'stdin', Module['stdin']);
        } else {
          FS.symlink('/dev/tty', '/dev/stdin');
        }
        if (Module['stdout']) {
          FS.createDevice('/dev', 'stdout', null, Module['stdout']);
        } else {
          FS.symlink('/dev/tty', '/dev/stdout');
        }
        if (Module['stderr']) {
          FS.createDevice('/dev', 'stderr', null, Module['stderr']);
        } else {
          FS.symlink('/dev/tty1', '/dev/stderr');
        }

        // open default streams for the stdin, stdout and stderr devices
        var stdin = FS.open('/dev/stdin', 'r');
        assert(stdin.fd === 0, 'invalid handle for stdin (' + stdin.fd + ')');

        var stdout = FS.open('/dev/stdout', 'w');
        assert(stdout.fd === 1, 'invalid handle for stdout (' + stdout.fd + ')');

        var stderr = FS.open('/dev/stderr', 'w');
        assert(stderr.fd === 2, 'invalid handle for stderr (' + stderr.fd + ')');
      },ensureErrnoError:function () {
        if (FS.ErrnoError) return;
        FS.ErrnoError = function ErrnoError(errno, node) {
          //Module.printErr(stackTrace()); // useful for debugging
          this.node = node;
          this.setErrno = function(errno) {
            this.errno = errno;
            for (var key in ERRNO_CODES) {
              if (ERRNO_CODES[key] === errno) {
                this.code = key;
                break;
              }
            }
          };
          this.setErrno(errno);
          this.message = ERRNO_MESSAGES[errno];
          if (this.stack) this.stack = demangleAll(this.stack);
        };
        FS.ErrnoError.prototype = new Error();
        FS.ErrnoError.prototype.constructor = FS.ErrnoError;
        // Some errors may happen quite a bit, to avoid overhead we reuse them (and suffer a lack of stack info)
        [ERRNO_CODES.ENOENT].forEach(function(code) {
          FS.genericErrors[code] = new FS.ErrnoError(code);
          FS.genericErrors[code].stack = '<generic error, no stack>';
        });
      },staticInit:function () {
        FS.ensureErrnoError();

        FS.nameTable = new Array(4096);

        FS.mount(MEMFS, {}, '/');

        FS.createDefaultDirectories();
        FS.createDefaultDevices();
        FS.createSpecialDirectories();

        FS.filesystems = {
          'MEMFS': MEMFS,
          'IDBFS': IDBFS,
          'NODEFS': NODEFS,
          'WORKERFS': WORKERFS,
        };
      },init:function (input, output, error) {
        assert(!FS.init.initialized, 'FS.init was previously called. If you want to initialize later with custom parameters, remove any earlier calls (note that one is automatically added to the generated code)');
        FS.init.initialized = true;

        FS.ensureErrnoError();

        // Allow Module.stdin etc. to provide defaults, if none explicitly passed to us here
        Module['stdin'] = input || Module['stdin'];
        Module['stdout'] = output || Module['stdout'];
        Module['stderr'] = error || Module['stderr'];

        FS.createStandardStreams();
      },quit:function () {
        FS.init.initialized = false;
        // force-flush all streams, so we get musl std streams printed out
        var fflush = Module['_fflush'];
        if (fflush) fflush(0);
        // close all of our streams
        for (var i = 0; i < FS.streams.length; i++) {
          var stream = FS.streams[i];
          if (!stream) {
            continue;
          }
          FS.close(stream);
        }
      },getMode:function (canRead, canWrite) {
        var mode = 0;
        if (canRead) mode |= 292 | 73;
        if (canWrite) mode |= 146;
        return mode;
      },joinPath:function (parts, forceRelative) {
        var path = PATH.join.apply(null, parts);
        if (forceRelative && path[0] == '/') path = path.substr(1);
        return path;
      },absolutePath:function (relative, base) {
        return PATH.resolve(base, relative);
      },standardizePath:function (path) {
        return PATH.normalize(path);
      },findObject:function (path, dontResolveLastLink) {
        var ret = FS.analyzePath(path, dontResolveLastLink);
        if (ret.exists) {
          return ret.object;
        } else {
          ___setErrNo(ret.error);
          return null;
        }
      },analyzePath:function (path, dontResolveLastLink) {
        // operate from within the context of the symlink's target
        try {
          var lookup = FS.lookupPath(path, { follow: !dontResolveLastLink });
          path = lookup.path;
        } catch (e) {
        }
        var ret = {
          isRoot: false, exists: false, error: 0, name: null, path: null, object: null,
          parentExists: false, parentPath: null, parentObject: null
        };
        try {
          var lookup = FS.lookupPath(path, { parent: true });
          ret.parentExists = true;
          ret.parentPath = lookup.path;
          ret.parentObject = lookup.node;
          ret.name = PATH.basename(path);
          lookup = FS.lookupPath(path, { follow: !dontResolveLastLink });
          ret.exists = true;
          ret.path = lookup.path;
          ret.object = lookup.node;
          ret.name = lookup.node.name;
          ret.isRoot = lookup.path === '/';
        } catch (e) {
          ret.error = e.errno;
        };
        return ret;
      },createFolder:function (parent, name, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(canRead, canWrite);
        return FS.mkdir(path, mode);
      },createPath:function (parent, path, canRead, canWrite) {
        parent = typeof parent === 'string' ? parent : FS.getPath(parent);
        var parts = path.split('/').reverse();
        while (parts.length) {
          var part = parts.pop();
          if (!part) continue;
          var current = PATH.join2(parent, part);
          try {
            FS.mkdir(current);
          } catch (e) {
            // ignore EEXIST
          }
          parent = current;
        }
        return current;
      },createFile:function (parent, name, properties, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(canRead, canWrite);
        return FS.create(path, mode);
      },createDataFile:function (parent, name, data, canRead, canWrite, canOwn) {
        var path = name ? PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name) : parent;
        var mode = FS.getMode(canRead, canWrite);
        var node = FS.create(path, mode);
        if (data) {
          if (typeof data === 'string') {
            var arr = new Array(data.length);
            for (var i = 0, len = data.length; i < len; ++i) arr[i] = data.charCodeAt(i);
            data = arr;
          }
          // make sure we can write to the file
          FS.chmod(node, mode | 146);
          var stream = FS.open(node, 'w');
          FS.write(stream, data, 0, data.length, 0, canOwn);
          FS.close(stream);
          FS.chmod(node, mode);
        }
        return node;
      },createDevice:function (parent, name, input, output) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(!!input, !!output);
        if (!FS.createDevice.major) FS.createDevice.major = 64;
        var dev = FS.makedev(FS.createDevice.major++, 0);
        // Create a fake device that a set of stream ops to emulate
        // the old behavior.
        FS.registerDevice(dev, {
          open: function(stream) {
            stream.seekable = false;
          },
          close: function(stream) {
            // flush any pending line data
            if (output && output.buffer && output.buffer.length) {
              output(10);
            }
          },
          read: function(stream, buffer, offset, length, pos /* ignored */) {
            var bytesRead = 0;
            for (var i = 0; i < length; i++) {
              var result;
              try {
                result = input();
              } catch (e) {
                throw new FS.ErrnoError(ERRNO_CODES.EIO);
              }
              if (result === undefined && bytesRead === 0) {
                throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
              }
              if (result === null || result === undefined) break;
              bytesRead++;
              buffer[offset+i] = result;
            }
            if (bytesRead) {
              stream.node.timestamp = Date.now();
            }
            return bytesRead;
          },
          write: function(stream, buffer, offset, length, pos) {
            for (var i = 0; i < length; i++) {
              try {
                output(buffer[offset+i]);
              } catch (e) {
                throw new FS.ErrnoError(ERRNO_CODES.EIO);
              }
            }
            if (length) {
              stream.node.timestamp = Date.now();
            }
            return i;
          }
        });
        return FS.mkdev(path, mode, dev);
      },createLink:function (parent, name, target, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        return FS.symlink(target, path);
      },forceLoadFile:function (obj) {
        if (obj.isDevice || obj.isFolder || obj.link || obj.contents) return true;
        var success = true;
        if (typeof XMLHttpRequest !== 'undefined') {
          throw new Error("Lazy loading should have been performed (contents set) in createLazyFile, but it was not. Lazy loading only works in web workers. Use --embed-file or --preload-file in emcc on the main thread.");
        } else if (Module['read']) {
          // Command-line.
          try {
            // WARNING: Can't read binary files in V8's d8 or tracemonkey's js, as
            //          read() will try to parse UTF8.
            obj.contents = intArrayFromString(Module['read'](obj.url), true);
            obj.usedBytes = obj.contents.length;
          } catch (e) {
            success = false;
          }
        } else {
          throw new Error('Cannot load without read() or XMLHttpRequest.');
        }
        if (!success) ___setErrNo(ERRNO_CODES.EIO);
        return success;
      },createLazyFile:function (parent, name, url, canRead, canWrite) {
        // Lazy chunked Uint8Array (implements get and length from Uint8Array). Actual getting is abstracted away for eventual reuse.
        function LazyUint8Array() {
          this.lengthKnown = false;
          this.chunks = []; // Loaded chunks. Index is the chunk number
        }
        LazyUint8Array.prototype.get = function LazyUint8Array_get(idx) {
          if (idx > this.length-1 || idx < 0) {
            return undefined;
          }
          var chunkOffset = idx % this.chunkSize;
          var chunkNum = (idx / this.chunkSize)|0;
          return this.getter(chunkNum)[chunkOffset];
        }
        LazyUint8Array.prototype.setDataGetter = function LazyUint8Array_setDataGetter(getter) {
          this.getter = getter;
        }
        LazyUint8Array.prototype.cacheLength = function LazyUint8Array_cacheLength() {
          // Find length
          var xhr = new XMLHttpRequest();
          xhr.open('HEAD', url, false);
          xhr.send(null);
          if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304)) throw new Error("Couldn't load " + url + ". Status: " + xhr.status);
          var datalength = Number(xhr.getResponseHeader("Content-length"));
          var header;
          var hasByteServing = (header = xhr.getResponseHeader("Accept-Ranges")) && header === "bytes";
          var usesGzip = (header = xhr.getResponseHeader("Content-Encoding")) && header === "gzip";

          var chunkSize = 1024*1024; // Chunk size in bytes

          if (!hasByteServing) chunkSize = datalength;

          // Function to get a range from the remote URL.
          var doXHR = (function(from, to) {
            if (from > to) throw new Error("invalid range (" + from + ", " + to + ") or no bytes requested!");
            if (to > datalength-1) throw new Error("only " + datalength + " bytes available! programmer error!");

            // TODO: Use mozResponseArrayBuffer, responseStream, etc. if available.
            var xhr = new XMLHttpRequest();
            xhr.open('GET', url, false);
            if (datalength !== chunkSize) xhr.setRequestHeader("Range", "bytes=" + from + "-" + to);

            // Some hints to the browser that we want binary data.
            if (typeof Uint8Array != 'undefined') xhr.responseType = 'arraybuffer';
            if (xhr.overrideMimeType) {
              xhr.overrideMimeType('text/plain; charset=x-user-defined');
            }

            xhr.send(null);
            if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304)) throw new Error("Couldn't load " + url + ". Status: " + xhr.status);
            if (xhr.response !== undefined) {
              return new Uint8Array(xhr.response || []);
            } else {
              return intArrayFromString(xhr.responseText || '', true);
            }
          });
          var lazyArray = this;
          lazyArray.setDataGetter(function(chunkNum) {
            var start = chunkNum * chunkSize;
            var end = (chunkNum+1) * chunkSize - 1; // including this byte
            end = Math.min(end, datalength-1); // if datalength-1 is selected, this is the last block
            if (typeof(lazyArray.chunks[chunkNum]) === "undefined") {
              lazyArray.chunks[chunkNum] = doXHR(start, end);
            }
            if (typeof(lazyArray.chunks[chunkNum]) === "undefined") throw new Error("doXHR failed!");
            return lazyArray.chunks[chunkNum];
          });

          if (usesGzip || !datalength) {
            // if the server uses gzip or doesn't supply the length, we have to download the whole file to get the (uncompressed) length
            chunkSize = datalength = 1; // this will force getter(0)/doXHR do download the whole file
            datalength = this.getter(0).length;
            chunkSize = datalength;
            console.log("LazyFiles on gzip forces download of the whole file when length is accessed");
          }

          this._length = datalength;
          this._chunkSize = chunkSize;
          this.lengthKnown = true;
        }
        if (typeof XMLHttpRequest !== 'undefined') {
          if (!ENVIRONMENT_IS_WORKER) throw 'Cannot do synchronous binary XHRs outside webworkers in modern browsers. Use --embed-file or --preload-file in emcc';
          var lazyArray = new LazyUint8Array();
          Object.defineProperties(lazyArray, {
            length: {
              get: function() {
                if(!this.lengthKnown) {
                  this.cacheLength();
                }
                return this._length;
              }
            },
            chunkSize: {
              get: function() {
                if(!this.lengthKnown) {
                  this.cacheLength();
                }
                return this._chunkSize;
              }
            }
          });

          var properties = { isDevice: false, contents: lazyArray };
        } else {
          var properties = { isDevice: false, url: url };
        }

        var node = FS.createFile(parent, name, properties, canRead, canWrite);
        // This is a total hack, but I want to get this lazy file code out of the
        // core of MEMFS. If we want to keep this lazy file concept I feel it should
        // be its own thin LAZYFS proxying calls to MEMFS.
        if (properties.contents) {
          node.contents = properties.contents;
        } else if (properties.url) {
          node.contents = null;
          node.url = properties.url;
        }
        // Add a function that defers querying the file size until it is asked the first time.
        Object.defineProperties(node, {
          usedBytes: {
            get: function() { return this.contents.length; }
          }
        });
        // override each stream op with one that tries to force load the lazy file first
        var stream_ops = {};
        var keys = Object.keys(node.stream_ops);
        keys.forEach(function(key) {
          var fn = node.stream_ops[key];
          stream_ops[key] = function forceLoadLazyFile() {
            if (!FS.forceLoadFile(node)) {
              throw new FS.ErrnoError(ERRNO_CODES.EIO);
            }
            return fn.apply(null, arguments);
          };
        });
        // use a custom read function
        stream_ops.read = function stream_ops_read(stream, buffer, offset, length, position) {
          if (!FS.forceLoadFile(node)) {
            throw new FS.ErrnoError(ERRNO_CODES.EIO);
          }
          var contents = stream.node.contents;
          if (position >= contents.length)
            return 0;
          var size = Math.min(contents.length - position, length);
          assert(size >= 0);
          if (contents.slice) { // normal array
            for (var i = 0; i < size; i++) {
              buffer[offset + i] = contents[position + i];
            }
          } else {
            for (var i = 0; i < size; i++) { // LazyUint8Array from sync binary XHR
              buffer[offset + i] = contents.get(position + i);
            }
          }
          return size;
        };
        node.stream_ops = stream_ops;
        return node;
      },createPreloadedFile:function (parent, name, url, canRead, canWrite, onload, onerror, dontCreateFile, canOwn, preFinish) {
        Browser.init(); // XXX perhaps this method should move onto Browser?
        // TODO we should allow people to just pass in a complete filename instead
        // of parent and name being that we just join them anyways
        var fullname = name ? PATH.resolve(PATH.join2(parent, name)) : parent;
        var dep = getUniqueRunDependency('cp ' + fullname); // might have several active requests for the same fullname
        function processData(byteArray) {
          function finish(byteArray) {
            if (preFinish) preFinish();
            if (!dontCreateFile) {
              FS.createDataFile(parent, name, byteArray, canRead, canWrite, canOwn);
            }
            if (onload) onload();
            removeRunDependency(dep);
          }
          var handled = false;
          Module['preloadPlugins'].forEach(function(plugin) {
            if (handled) return;
            if (plugin['canHandle'](fullname)) {
              plugin['handle'](byteArray, fullname, finish, function() {
                if (onerror) onerror();
                removeRunDependency(dep);
              });
              handled = true;
            }
          });
          if (!handled) finish(byteArray);
        }
        addRunDependency(dep);
        if (typeof url == 'string') {
          Browser.asyncLoad(url, function(byteArray) {
            processData(byteArray);
          }, onerror);
        } else {
          processData(url);
        }
      },indexedDB:function () {
        return window.indexedDB || window.mozIndexedDB || window.webkitIndexedDB || window.msIndexedDB;
      },DB_NAME:function () {
        return 'EM_FS_' + window.location.pathname;
      },DB_VERSION:20,DB_STORE_NAME:"FILE_DATA",saveFilesToDB:function (paths, onload, onerror) {
        onload = onload || function(){};
        onerror = onerror || function(){};
        var indexedDB = FS.indexedDB();
        try {
          var openRequest = indexedDB.open(FS.DB_NAME(), FS.DB_VERSION);
        } catch (e) {
          return onerror(e);
        }
        openRequest.onupgradeneeded = function openRequest_onupgradeneeded() {
          console.log('creating db');
          var db = openRequest.result;
          db.createObjectStore(FS.DB_STORE_NAME);
        };
        openRequest.onsuccess = function openRequest_onsuccess() {
          var db = openRequest.result;
          var transaction = db.transaction([FS.DB_STORE_NAME], 'readwrite');
          var files = transaction.objectStore(FS.DB_STORE_NAME);
          var ok = 0, fail = 0, total = paths.length;
          function finish() {
            if (fail == 0) onload(); else onerror();
          }
          paths.forEach(function(path) {
            var putRequest = files.put(FS.analyzePath(path).object.contents, path);
            putRequest.onsuccess = function putRequest_onsuccess() { ok++; if (ok + fail == total) finish() };
            putRequest.onerror = function putRequest_onerror() { fail++; if (ok + fail == total) finish() };
          });
          transaction.onerror = onerror;
        };
        openRequest.onerror = onerror;
      },loadFilesFromDB:function (paths, onload, onerror) {
        onload = onload || function(){};
        onerror = onerror || function(){};
        var indexedDB = FS.indexedDB();
        try {
          var openRequest = indexedDB.open(FS.DB_NAME(), FS.DB_VERSION);
        } catch (e) {
          return onerror(e);
        }
        openRequest.onupgradeneeded = onerror; // no database to load from
        openRequest.onsuccess = function openRequest_onsuccess() {
          var db = openRequest.result;
          try {
            var transaction = db.transaction([FS.DB_STORE_NAME], 'readonly');
          } catch(e) {
            onerror(e);
            return;
          }
          var files = transaction.objectStore(FS.DB_STORE_NAME);
          var ok = 0, fail = 0, total = paths.length;
          function finish() {
            if (fail == 0) onload(); else onerror();
          }
          paths.forEach(function(path) {
            var getRequest = files.get(path);
            getRequest.onsuccess = function getRequest_onsuccess() {
              if (FS.analyzePath(path).exists) {
                FS.unlink(path);
              }
              FS.createDataFile(PATH.dirname(path), PATH.basename(path), getRequest.result, true, true, true);
              ok++;
              if (ok + fail == total) finish();
            };
            getRequest.onerror = function getRequest_onerror() { fail++; if (ok + fail == total) finish() };
          });
          transaction.onerror = onerror;
        };
        openRequest.onerror = onerror;
      }};var SYSCALLS={DEFAULT_POLLMASK:5,mappings:{},umask:511,calculateAt:function (dirfd, path) {
        if (path[0] !== '/') {
          // relative path
          var dir;
          if (dirfd === -100) {
            dir = FS.cwd();
          } else {
            var dirstream = FS.getStream(dirfd);
            if (!dirstream) throw new FS.ErrnoError(ERRNO_CODES.EBADF);
            dir = dirstream.path;
          }
          path = PATH.join2(dir, path);
        }
        return path;
      },doStat:function (func, path, buf) {
        try {
          var stat = func(path);
        } catch (e) {
          if (e && e.node && PATH.normalize(path) !== PATH.normalize(FS.getPath(e.node))) {
            // an error occurred while trying to look up the path; we should just report ENOTDIR
            return -ERRNO_CODES.ENOTDIR;
          }
          throw e;
        }
        HEAP32[((buf)>>2)]=stat.dev;
        HEAP32[(((buf)+(4))>>2)]=0;
        HEAP32[(((buf)+(8))>>2)]=stat.ino;
        HEAP32[(((buf)+(12))>>2)]=stat.mode;
        HEAP32[(((buf)+(16))>>2)]=stat.nlink;
        HEAP32[(((buf)+(20))>>2)]=stat.uid;
        HEAP32[(((buf)+(24))>>2)]=stat.gid;
        HEAP32[(((buf)+(28))>>2)]=stat.rdev;
        HEAP32[(((buf)+(32))>>2)]=0;
        HEAP32[(((buf)+(36))>>2)]=stat.size;
        HEAP32[(((buf)+(40))>>2)]=4096;
        HEAP32[(((buf)+(44))>>2)]=stat.blocks;
        HEAP32[(((buf)+(48))>>2)]=(stat.atime.getTime() / 1000)|0;
        HEAP32[(((buf)+(52))>>2)]=0;
        HEAP32[(((buf)+(56))>>2)]=(stat.mtime.getTime() / 1000)|0;
        HEAP32[(((buf)+(60))>>2)]=0;
        HEAP32[(((buf)+(64))>>2)]=(stat.ctime.getTime() / 1000)|0;
        HEAP32[(((buf)+(68))>>2)]=0;
        HEAP32[(((buf)+(72))>>2)]=stat.ino;
        return 0;
      },doMsync:function (addr, stream, len, flags) {
        var buffer = new Uint8Array(HEAPU8.subarray(addr, addr + len));
        FS.msync(stream, buffer, 0, len, flags);
      },doMkdir:function (path, mode) {
        // remove a trailing slash, if one - /a/b/ has basename of '', but
        // we want to create b in the context of this function
        path = PATH.normalize(path);
        if (path[path.length-1] === '/') path = path.substr(0, path.length-1);
        FS.mkdir(path, mode, 0);
        return 0;
      },doMknod:function (path, mode, dev) {
        // we don't want this in the JS API as it uses mknod to create all nodes.
        switch (mode & 61440) {
          case 32768:
          case 8192:
          case 24576:
          case 4096:
          case 49152:
            break;
          default: return -ERRNO_CODES.EINVAL;
        }
        FS.mknod(path, mode, dev);
        return 0;
      },doReadlink:function (path, buf, bufsize) {
        if (bufsize <= 0) return -ERRNO_CODES.EINVAL;
        var ret = FS.readlink(path);

        var len = Math.min(bufsize, lengthBytesUTF8(ret));
        var endChar = HEAP8[buf+len];
        stringToUTF8(ret, buf, bufsize+1);
        // readlink is one of the rare functions that write out a C string, but does never append a null to the output buffer(!)
        // stringToUTF8() always appends a null byte, so restore the character under the null byte after the write.
        HEAP8[buf+len] = endChar;

        return len;
      },doAccess:function (path, amode) {
        if (amode & ~7) {
          // need a valid mode
          return -ERRNO_CODES.EINVAL;
        }
        var node;
        var lookup = FS.lookupPath(path, { follow: true });
        node = lookup.node;
        var perms = '';
        if (amode & 4) perms += 'r';
        if (amode & 2) perms += 'w';
        if (amode & 1) perms += 'x';
        if (perms /* otherwise, they've just passed F_OK */ && FS.nodePermissions(node, perms)) {
          return -ERRNO_CODES.EACCES;
        }
        return 0;
      },doDup:function (path, flags, suggestFD) {
        var suggest = FS.getStream(suggestFD);
        if (suggest) FS.close(suggest);
        return FS.open(path, flags, 0, suggestFD, suggestFD).fd;
      },doReadv:function (stream, iov, iovcnt, offset) {
        var ret = 0;
        for (var i = 0; i < iovcnt; i++) {
          var ptr = HEAP32[(((iov)+(i*8))>>2)];
          var len = HEAP32[(((iov)+(i*8 + 4))>>2)];
          var curr = FS.read(stream, HEAP8,ptr, len, offset);
          if (curr < 0) return -1;
          ret += curr;
          if (curr < len) break; // nothing more to read
        }
        return ret;
      },doWritev:function (stream, iov, iovcnt, offset) {
        var ret = 0;
        for (var i = 0; i < iovcnt; i++) {
          var ptr = HEAP32[(((iov)+(i*8))>>2)];
          var len = HEAP32[(((iov)+(i*8 + 4))>>2)];
          var curr = FS.write(stream, HEAP8,ptr, len, offset);
          if (curr < 0) return -1;
          ret += curr;
        }
        return ret;
      },varargs:0,get:function (varargs) {
        SYSCALLS.varargs += 4;
        var ret = HEAP32[(((SYSCALLS.varargs)-(4))>>2)];
        return ret;
      },getStr:function () {
        var ret = Pointer_stringify(SYSCALLS.get());
        return ret;
      },getStreamFromFD:function () {
        var stream = FS.getStream(SYSCALLS.get());
        if (!stream) throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        return stream;
      },getSocketFromFD:function () {
        var socket = SOCKFS.getSocket(SYSCALLS.get());
        if (!socket) throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        return socket;
      },getSocketAddress:function (allowNull) {
        var addrp = SYSCALLS.get(), addrlen = SYSCALLS.get();
        if (allowNull && addrp === 0) return null;
        var info = __read_sockaddr(addrp, addrlen);
        if (info.errno) throw new FS.ErrnoError(info.errno);
        info.addr = DNS.lookup_addr(info.addr) || info.addr;
        return info;
      },get64:function () {
        var low = SYSCALLS.get(), high = SYSCALLS.get();
        if (low >= 0) assert(high === 0);
        else assert(high === -1);
        return low;
      },getZero:function () {
        assert(SYSCALLS.get() === 0);
      }};function ___syscall63(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // dup2
      var old = SYSCALLS.getStreamFromFD(), suggestFD = SYSCALLS.get();
      if (old.fd === suggestFD) return suggestFD;
      return SYSCALLS.doDup(old.path, old.flags, suggestFD);
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }


  function __ZSt18uncaught_exceptionv() { // std::uncaught_exception()
      return !!__ZSt18uncaught_exceptionv.uncaught_exception;
    }



  var EXCEPTIONS={last:0,caught:[],infos:{},deAdjust:function (adjusted) {
        if (!adjusted || EXCEPTIONS.infos[adjusted]) return adjusted;
        for (var ptr in EXCEPTIONS.infos) {
          var info = EXCEPTIONS.infos[ptr];
          if (info.adjusted === adjusted) {
            return ptr;
          }
        }
        return adjusted;
      },addRef:function (ptr) {
        if (!ptr) return;
        var info = EXCEPTIONS.infos[ptr];
        info.refcount++;
      },decRef:function (ptr) {
        if (!ptr) return;
        var info = EXCEPTIONS.infos[ptr];
        assert(info.refcount > 0);
        info.refcount--;
        // A rethrown exception can reach refcount 0; it must not be discarded
        // Its next handler will clear the rethrown flag and addRef it, prior to
        // final decRef and destruction here
        if (info.refcount === 0 && !info.rethrown) {
          if (info.destructor) {
            Module['dynCall_vi'](info.destructor, ptr);
          }
          delete EXCEPTIONS.infos[ptr];
          ___cxa_free_exception(ptr);
        }
      },clearRef:function (ptr) {
        if (!ptr) return;
        var info = EXCEPTIONS.infos[ptr];
        info.refcount = 0;
      }};
  function ___resumeException(ptr) {
      if (!EXCEPTIONS.last) { EXCEPTIONS.last = ptr; }
      throw ptr;
    }function ___cxa_find_matching_catch() {
      var thrown = EXCEPTIONS.last;
      if (!thrown) {
        // just pass through the null ptr
        return ((Runtime.setTempRet0(0),0)|0);
      }
      var info = EXCEPTIONS.infos[thrown];
      var throwntype = info.type;
      if (!throwntype) {
        // just pass through the thrown ptr
        return ((Runtime.setTempRet0(0),thrown)|0);
      }
      var typeArray = Array.prototype.slice.call(arguments);

      var pointer = Module['___cxa_is_pointer_type'](throwntype);
      // can_catch receives a **, add indirection
      if (!___cxa_find_matching_catch.buffer) ___cxa_find_matching_catch.buffer = _malloc(4);
      HEAP32[((___cxa_find_matching_catch.buffer)>>2)]=thrown;
      thrown = ___cxa_find_matching_catch.buffer;
      // The different catch blocks are denoted by different types.
      // Due to inheritance, those types may not precisely match the
      // type of the thrown object. Find one which matches, and
      // return the type of the catch block which should be called.
      for (var i = 0; i < typeArray.length; i++) {
        if (typeArray[i] && Module['___cxa_can_catch'](typeArray[i], throwntype, thrown)) {
          thrown = HEAP32[((thrown)>>2)]; // undo indirection
          info.adjusted = thrown;
          return ((Runtime.setTempRet0(typeArray[i]),thrown)|0);
        }
      }
      // Shouldn't happen unless we have bogus data in typeArray
      // or encounter a type for which emscripten doesn't have suitable
      // typeinfo defined. Best-efforts match just in case.
      thrown = HEAP32[((thrown)>>2)]; // undo indirection
      return ((Runtime.setTempRet0(throwntype),thrown)|0);
    }function ___cxa_throw(ptr, type, destructor) {
      EXCEPTIONS.infos[ptr] = {
        ptr: ptr,
        adjusted: ptr,
        type: type,
        destructor: destructor,
        refcount: 0,
        caught: false,
        rethrown: false
      };
      EXCEPTIONS.last = ptr;
      if (!("uncaught_exception" in __ZSt18uncaught_exceptionv)) {
        __ZSt18uncaught_exceptionv.uncaught_exception = 1;
      } else {
        __ZSt18uncaught_exceptionv.uncaught_exception++;
      }
      throw ptr;
    }


  Module["_memset"] = _memset;


  Module["_bitshift64Shl"] = _bitshift64Shl;

  function _abort() {
      Module['abort']();
    }

  function _kill(pid, sig) {
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/kill.html
      // Makes no sense in a single-process environment.
  	  // Should kill itself somtimes depending on `pid`
      Module.printErr('Calling stub instead of kill()');
      ___setErrNo(ERRNO_CODES.EPERM);
      return -1;
    }


  function _execl(/* ... */) {
      // int execl(const char *path, const char *arg0, ... /*, (char *)0 */);
      // http://pubs.opengroup.org/onlinepubs/009695399/functions/exec.html
      // We don't support executing external code.
      ___setErrNo(ERRNO_CODES.ENOEXEC);
      return -1;
    }function _execlp() {
  return _execl.apply(null, arguments)
  }

  function ___lock() {}

  function ___unlock() {}

  function ___syscall168(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // poll
      var fds = SYSCALLS.get(), nfds = SYSCALLS.get(), timeout = SYSCALLS.get();
      var nonzero = 0;
      for (var i = 0; i < nfds; i++) {
        var pollfd = fds + 8 * i;
        var fd = HEAP32[((pollfd)>>2)];
        var events = HEAP16[(((pollfd)+(4))>>1)];
        var mask = 32;
        var stream = FS.getStream(fd);
        if (stream) {
          mask = SYSCALLS.DEFAULT_POLLMASK;
          if (stream.stream_ops.poll) {
            mask = stream.stream_ops.poll(stream);
          }
        }
        mask &= events | 8 | 16;
        if (mask) nonzero++;
        HEAP16[(((pollfd)+(6))>>1)]=mask;
      }
      return nonzero;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }


  function _usleep(useconds) {
      // int usleep(useconds_t useconds);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/usleep.html
      // We're single-threaded, so use a busy loop. Super-ugly.
      var msec = useconds / 1000;
      if ((ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER) && self['performance'] && self['performance']['now']) {
        var start = self['performance']['now']();
        while (self['performance']['now']() - start < msec) {
          // Do nothing.
        }
      } else {
        var start = Date.now();
        while (Date.now() - start < msec) {
          // Do nothing.
        }
      }
      return 0;
    }function _nanosleep(rqtp, rmtp) {
      // int nanosleep(const struct timespec  *rqtp, struct timespec *rmtp);
      var seconds = HEAP32[((rqtp)>>2)];
      var nanoseconds = HEAP32[(((rqtp)+(4))>>2)];
      if (rmtp !== 0) {
        HEAP32[((rmtp)>>2)]=0;
        HEAP32[(((rmtp)+(4))>>2)]=0;
      }
      return _usleep((seconds * 1e6) + (nanoseconds / 1000));
    }



  function __exit(status) {
      // void _exit(int status);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/exit.html
      Module['exit'](status);
    }function _exit(status) {
      __exit(status);
    }function __Exit(status) {
      __exit(status);
    }

  function _system(command) {
      // int system(const char *command);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/system.html
      // Can't call external programs.
      ___setErrNo(ERRNO_CODES.EAGAIN);
      return -1;
    }


  function _emscripten_memcpy_big(dest, src, num) {
      HEAPU8.set(HEAPU8.subarray(src, src+num), dest);
      return dest;
    }
  Module["_memcpy"] = _memcpy;

  function ___syscall91(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // munmap
      var addr = SYSCALLS.get(), len = SYSCALLS.get();
      // TODO: support unmmap'ing parts of allocations
      var info = SYSCALLS.mappings[addr];
      if (!info) return 0;
      if (len === info.len) {
        var stream = FS.getStream(info.fd);
        SYSCALLS.doMsync(addr, stream, len, info.flags)
        FS.munmap(stream);
        SYSCALLS.mappings[addr] = null;
        if (info.allocated) {
          _free(info.malloc);
        }
      }
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }



  function _malloc(bytes) {
      /* Over-allocate to make sure it is byte-aligned by 8.
       * This will leak memory, but this is only the dummy
       * implementation (replaced by dlmalloc normally) so
       * not an issue.
       */
      var ptr = Runtime.dynamicAlloc(bytes + 8);
      return (ptr+8) & 0xFFFFFFF8;
    }
  Module["_malloc"] = _malloc;function ___cxa_allocate_exception(size) {
      return _malloc(size);
    }

  function ___syscall54(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // ioctl
      var stream = SYSCALLS.getStreamFromFD(), op = SYSCALLS.get();
      switch (op) {
        case 21505: {
          if (!stream.tty) return -ERRNO_CODES.ENOTTY;
          return 0;
        }
        case 21506: {
          if (!stream.tty) return -ERRNO_CODES.ENOTTY;
          return 0; // no-op, not actually adjusting terminal settings
        }
        case 21519: {
          if (!stream.tty) return -ERRNO_CODES.ENOTTY;
          var argp = SYSCALLS.get();
          HEAP32[((argp)>>2)]=0;
          return 0;
        }
        case 21520: {
          if (!stream.tty) return -ERRNO_CODES.ENOTTY;
          return -ERRNO_CODES.EINVAL; // not supported
        }
        case 21531: {
          var argp = SYSCALLS.get();
          return FS.ioctl(stream, op, argp);
        }
        case 21523: {
          // TODO: in theory we should write to the winsize struct that gets
          // passed in, but for now musl doesn't read anything on it
          if (!stream.tty) return -ERRNO_CODES.ENOTTY;
          return 0;
        }
        default: abort('bad ioctl syscall ' + op);
      }
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function _fork() {
      // pid_t fork(void);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fork.html
      // We don't support multiple processes.
      ___setErrNo(ERRNO_CODES.EAGAIN);
      return -1;
    }


  Module["_bitshift64Lshr"] = _bitshift64Lshr;

  function ___syscall33(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // access
      var path = SYSCALLS.getStr(), amode = SYSCALLS.get();
      return SYSCALLS.doAccess(path, amode);
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }



  function _emscripten_get_now() { abort() }

  function _emscripten_get_now_is_monotonic() {
      // return whether emscripten_get_now is guaranteed monotonic; the Date.now
      // implementation is not :(
      return ENVIRONMENT_IS_NODE || (typeof dateNow !== 'undefined') ||
          ((ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER) && self['performance'] && self['performance']['now']);
    }function _clock_gettime(clk_id, tp) {
      // int clock_gettime(clockid_t clk_id, struct timespec *tp);
      var now;
      if (clk_id === 0) {
        now = Date.now();
      } else if (clk_id === 1 && _emscripten_get_now_is_monotonic()) {
        now = _emscripten_get_now();
      } else {
        ___setErrNo(ERRNO_CODES.EINVAL);
        return -1;
      }
      HEAP32[((tp)>>2)]=(now/1000)|0; // seconds
      HEAP32[(((tp)+(4))>>2)]=((now % 1000)*1000*1000)|0; // nanoseconds
      return 0;
    }function ___clock_gettime() {
  return _clock_gettime.apply(null, arguments)
  }





  var _environ=STATICTOP; STATICTOP += 16;;var ___environ=_environ;function ___buildEnvironment(env) {
      // WARNING: Arbitrary limit!
      var MAX_ENV_VALUES = 64;
      var TOTAL_ENV_SIZE = 1024;

      // Statically allocate memory for the environment.
      var poolPtr;
      var envPtr;
      if (!___buildEnvironment.called) {
        ___buildEnvironment.called = true;
        // Set default values. Use string keys for Closure Compiler compatibility.
        ENV['USER'] = ENV['LOGNAME'] = 'web_user';
        ENV['PATH'] = '/';
        ENV['PWD'] = '/';
        ENV['HOME'] = '/home/web_user';
        ENV['LANG'] = 'C';
        ENV['_'] = Module['thisProgram'];
        // Allocate memory.
        poolPtr = allocate(TOTAL_ENV_SIZE, 'i8', ALLOC_STATIC);
        envPtr = allocate(MAX_ENV_VALUES * 4,
                          'i8*', ALLOC_STATIC);
        HEAP32[((envPtr)>>2)]=poolPtr;
        HEAP32[((_environ)>>2)]=envPtr;
      } else {
        envPtr = HEAP32[((_environ)>>2)];
        poolPtr = HEAP32[((envPtr)>>2)];
      }

      // Collect key=value lines.
      var strings = [];
      var totalSize = 0;
      for (var key in env) {
        if (typeof env[key] === 'string') {
          var line = key + '=' + env[key];
          strings.push(line);
          totalSize += line.length;
        }
      }
      if (totalSize > TOTAL_ENV_SIZE) {
        throw new Error('Environment size exceeded TOTAL_ENV_SIZE!');
      }

      // Make new.
      var ptrSize = 4;
      for (var i = 0; i < strings.length; i++) {
        var line = strings[i];
        writeAsciiToMemory(line, poolPtr);
        HEAP32[(((envPtr)+(i * ptrSize))>>2)]=poolPtr;
        poolPtr += line.length + 1;
      }
      HEAP32[(((envPtr)+(strings.length * ptrSize))>>2)]=0;
    }var ENV={};function _getenv(name) {
      // char *getenv(const char *name);
      // http://pubs.opengroup.org/onlinepubs/009695399/functions/getenv.html
      if (name === 0) return 0;
      name = Pointer_stringify(name);
      if (!ENV.hasOwnProperty(name)) return 0;

      if (_getenv.ret) _free(_getenv.ret);
      _getenv.ret = allocate(intArrayFromString(ENV[name]), 'i8', ALLOC_NORMAL);
      return _getenv.ret;
    }

  function ___map_file(pathname, size) {
      ___setErrNo(ERRNO_CODES.EPERM);
      return -1;
    }

  function ___cxa_find_matching_catch_2() {
          return ___cxa_find_matching_catch.apply(null, arguments);
        }

  function ___syscall3(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // read
      var stream = SYSCALLS.getStreamFromFD(), buf = SYSCALLS.get(), count = SYSCALLS.get();
      return FS.read(stream, HEAP8,buf, count);
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall5(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // open
      var pathname = SYSCALLS.getStr(), flags = SYSCALLS.get(), mode = SYSCALLS.get() // optional TODO
      var stream = FS.open(pathname, flags, mode);
      return stream.fd;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall4(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // write
      var stream = SYSCALLS.getStreamFromFD(), buf = SYSCALLS.get(), count = SYSCALLS.get();
      return FS.write(stream, HEAP8,buf, count);
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall6(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // close
      var stream = SYSCALLS.getStreamFromFD();
      FS.close(stream);
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }



  var cttz_i8 = allocate([8,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,6,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,7,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,6,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0], "i8", ALLOC_STATIC);
  Module["_llvm_cttz_i32"] = _llvm_cttz_i32;
  Module["___udivmoddi4"] = ___udivmoddi4;
  Module["___udivdi3"] = ___udivdi3;

  function ___syscall10(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // unlink
      var path = SYSCALLS.getStr();
      FS.unlink(path);
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }



  Module["___muldsi3"] = ___muldsi3;
  Module["___muldi3"] = ___muldi3;

  var _llvm_pow_f64=Math_pow;


  Module["_sbrk"] = _sbrk;


  Module["_memmove"] = _memmove;

  function ___syscall146(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // writev
      var stream = SYSCALLS.getStreamFromFD(), iov = SYSCALLS.get(), iovcnt = SYSCALLS.get();
      return SYSCALLS.doWritev(stream, iov, iovcnt);
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }


  var __sigalrm_handler=0;function _signal(sig, func) {
      if (sig == 14 /*SIGALRM*/) {
        __sigalrm_handler = func;
      } else {
        Module.printErr('Calling stub instead of signal()');
      }
      return 0;
    }

  function ___gxx_personality_v0() {
    }


  Module["___uremdi3"] = ___uremdi3;


  function _wait(stat_loc) {
      // pid_t wait(int *stat_loc);
      // http://pubs.opengroup.org/onlinepubs/009695399/functions/wait.html
      // Makes no sense in a single-process environment.
      ___setErrNo(ERRNO_CODES.ECHILD);
      return -1;
    }function _waitpid() {
  return _wait.apply(null, arguments)
  }


  Module["_llvm_bswap_i32"] = _llvm_bswap_i32;

  function ___syscall221(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // fcntl64
      var stream = SYSCALLS.getStreamFromFD(), cmd = SYSCALLS.get();
      switch (cmd) {
        case 0: {
          var arg = SYSCALLS.get();
          if (arg < 0) {
            return -ERRNO_CODES.EINVAL;
          }
          var newStream;
          newStream = FS.open(stream.path, stream.flags, 0, arg);
          return newStream.fd;
        }
        case 1:
        case 2:
          return 0;  // FD_CLOEXEC makes no sense for a single process.
        case 3:
          return stream.flags;
        case 4: {
          var arg = SYSCALLS.get();
          stream.flags |= arg;
          return 0;
        }
        case 12:
        case 12: {
          var arg = SYSCALLS.get();
          var offset = 0;
          // We're always unlocked.
          HEAP16[(((arg)+(offset))>>1)]=2;
          return 0;
        }
        case 13:
        case 14:
        case 13:
        case 14:
          return 0; // Pretend that the locking is successful.
        case 16:
        case 8:
          return -ERRNO_CODES.EINVAL; // These are for sockets. We don't have them fully implemented yet.
        case 9:
          // musl trusts getown return values, due to a bug where they must be, as they overlap with errors. just return -1 here, so fnctl() returns that, and we set errno ourselves.
          ___setErrNo(ERRNO_CODES.EINVAL);
          return -1;
        default: {
          return -ERRNO_CODES.EINVAL;
        }
      }
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }


  function ___syscall195(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // SYS_stat64
      var path = SYSCALLS.getStr(), buf = SYSCALLS.get();
      return SYSCALLS.doStat(FS.stat, path, buf);
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall140(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // llseek
      var stream = SYSCALLS.getStreamFromFD(), offset_high = SYSCALLS.get(), offset_low = SYSCALLS.get(), result = SYSCALLS.get(), whence = SYSCALLS.get();
      var offset = offset_low;
      assert(offset_high === 0);
      FS.llseek(stream, offset, whence);
      HEAP32[((result)>>2)]=stream.position;
      if (stream.getdents && offset === 0 && whence === 0) stream.getdents = null; // reset readdir state
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall145(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // readv
      var stream = SYSCALLS.getStreamFromFD(), iov = SYSCALLS.get(), iovcnt = SYSCALLS.get();
      return SYSCALLS.doReadv(stream, iov, iovcnt);
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }


  function ___syscall51(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // acct
      return -ERRNO_CODES.ENOSYS; // unsupported features
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }function ___syscall42() {
  return ___syscall51.apply(null, arguments)
  }

  function ___syscall40(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // rmdir
      var path = SYSCALLS.getStr();
      FS.rmdir(path);
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall220(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // SYS_getdents64
      var stream = SYSCALLS.getStreamFromFD(), dirp = SYSCALLS.get(), count = SYSCALLS.get();
      if (!stream.getdents) {
        stream.getdents = FS.readdir(stream.path);
      }
      var pos = 0;
      while (stream.getdents.length > 0 && pos + 268 <= count) {
        var id;
        var type;
        var name = stream.getdents.pop();
        assert(name.length < 256); // limit of dirent struct
        if (name[0] === '.') {
          id = 1;
          type = 4; // DT_DIR
        } else {
          var child = FS.lookupNode(stream.node, name);
          id = child.id;
          type = FS.isChrdev(child.mode) ? 2 :  // DT_CHR, character device.
                 FS.isDir(child.mode) ? 4 :     // DT_DIR, directory.
                 FS.isLink(child.mode) ? 10 :   // DT_LNK, symbolic link.
                 8;                             // DT_REG, regular file.
        }
        HEAP32[((dirp + pos)>>2)]=id;
        HEAP32[(((dirp + pos)+(4))>>2)]=stream.position;
        HEAP16[(((dirp + pos)+(8))>>1)]=268;
        HEAP8[(((dirp + pos)+(10))>>0)]=type;
        for (var i = 0; i < name.length; i++) {
          HEAP8[(((dirp + pos)+(11 + i))>>0)]=name.charCodeAt(i);
        }
        HEAP8[(((dirp + pos)+(11 + i))>>0)]=0;
        pos += 268;
      }
      return pos;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }
FS.staticInit();__ATINIT__.unshift(function() { if (!Module["noFSInit"] && !FS.init.initialized) FS.init() });__ATMAIN__.push(function() { FS.ignorePermissions = false });__ATEXIT__.push(function() { FS.quit() });Module["FS_createFolder"] = FS.createFolder;Module["FS_createPath"] = FS.createPath;Module["FS_createDataFile"] = FS.createDataFile;Module["FS_createPreloadedFile"] = FS.createPreloadedFile;Module["FS_createLazyFile"] = FS.createLazyFile;Module["FS_createLink"] = FS.createLink;Module["FS_createDevice"] = FS.createDevice;Module["FS_unlink"] = FS.unlink;;
__ATINIT__.unshift(function() { TTY.init() });__ATEXIT__.push(function() { TTY.shutdown() });;
if (ENVIRONMENT_IS_NODE) { var fs = require("fs"); var NODEJS_PATH = require("path"); NODEFS.staticInit(); };
if (ENVIRONMENT_IS_NODE) {
    _emscripten_get_now = function _emscripten_get_now_actual() {
      var t = process['hrtime']();
      return t[0] * 1e3 + t[1] / 1e6;
    };
  } else if (typeof dateNow !== 'undefined') {
    _emscripten_get_now = dateNow;
  } else if (typeof self === 'object' && self['performance'] && typeof self['performance']['now'] === 'function') {
    _emscripten_get_now = function() { return self['performance']['now'](); };
  } else if (typeof performance === 'object' && typeof performance['now'] === 'function') {
    _emscripten_get_now = function() { return performance['now'](); };
  } else {
    _emscripten_get_now = Date.now;
  };
___buildEnvironment(ENV);;
DYNAMICTOP_PTR = allocate(1, "i32", ALLOC_STATIC);

STACK_BASE = STACKTOP = Runtime.alignMemory(STATICTOP);

STACK_MAX = STACK_BASE + TOTAL_STACK;

DYNAMIC_BASE = Runtime.alignMemory(STACK_MAX);

HEAP32[DYNAMICTOP_PTR>>2] = DYNAMIC_BASE;

staticSealed = true; // seal the static portion of memory

assert(DYNAMIC_BASE < TOTAL_MEMORY, "TOTAL_MEMORY not big enough for stack");



function nullFunc_iiii(x) { Module["printErr"]("Invalid function pointer called with signature 'iiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_viiiii(x) { Module["printErr"]("Invalid function pointer called with signature 'viiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_vi(x) { Module["printErr"]("Invalid function pointer called with signature 'vi'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_ii(x) { Module["printErr"]("Invalid function pointer called with signature 'ii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_v(x) { Module["printErr"]("Invalid function pointer called with signature 'v'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_viiiiii(x) { Module["printErr"]("Invalid function pointer called with signature 'viiiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_iii(x) { Module["printErr"]("Invalid function pointer called with signature 'iii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_viiii(x) { Module["printErr"]("Invalid function pointer called with signature 'viiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function invoke_iiii(index,a1,a2,a3) {
  try {
    return Module["dynCall_iiii"](index,a1,a2,a3);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function jsCall_iiii(index,a1,a2,a3) {
    return Runtime.functionPointers[index](a1,a2,a3);
}

function invoke_viiiii(index,a1,a2,a3,a4,a5) {
  try {
    Module["dynCall_viiiii"](index,a1,a2,a3,a4,a5);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function jsCall_viiiii(index,a1,a2,a3,a4,a5) {
    Runtime.functionPointers[index](a1,a2,a3,a4,a5);
}

function invoke_vi(index,a1) {
  try {
    Module["dynCall_vi"](index,a1);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function jsCall_vi(index,a1) {
    Runtime.functionPointers[index](a1);
}

function invoke_ii(index,a1) {
  try {
    return Module["dynCall_ii"](index,a1);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function jsCall_ii(index,a1) {
    return Runtime.functionPointers[index](a1);
}

function invoke_v(index) {
  try {
    Module["dynCall_v"](index);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function jsCall_v(index) {
    Runtime.functionPointers[index]();
}

function invoke_viiiiii(index,a1,a2,a3,a4,a5,a6) {
  try {
    Module["dynCall_viiiiii"](index,a1,a2,a3,a4,a5,a6);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function jsCall_viiiiii(index,a1,a2,a3,a4,a5,a6) {
    Runtime.functionPointers[index](a1,a2,a3,a4,a5,a6);
}

function invoke_iii(index,a1,a2) {
  try {
    return Module["dynCall_iii"](index,a1,a2);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function jsCall_iii(index,a1,a2) {
    return Runtime.functionPointers[index](a1,a2);
}

function invoke_viiii(index,a1,a2,a3,a4) {
  try {
    Module["dynCall_viiii"](index,a1,a2,a3,a4);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function jsCall_viiii(index,a1,a2,a3,a4) {
    Runtime.functionPointers[index](a1,a2,a3,a4);
}

Module.asmGlobalArg = { "Math": Math, "Int8Array": Int8Array, "Int16Array": Int16Array, "Int32Array": Int32Array, "Uint8Array": Uint8Array, "Uint16Array": Uint16Array, "Uint32Array": Uint32Array, "Float32Array": Float32Array, "Float64Array": Float64Array, "NaN": NaN, "Infinity": Infinity };

Module.asmLibraryArg = { "abort": abort, "assert": assert, "enlargeMemory": enlargeMemory, "getTotalMemory": getTotalMemory, "abortOnCannotGrowMemory": abortOnCannotGrowMemory, "abortStackOverflow": abortStackOverflow, "nullFunc_iiii": nullFunc_iiii, "nullFunc_viiiii": nullFunc_viiiii, "nullFunc_vi": nullFunc_vi, "nullFunc_ii": nullFunc_ii, "nullFunc_v": nullFunc_v, "nullFunc_viiiiii": nullFunc_viiiiii, "nullFunc_iii": nullFunc_iii, "nullFunc_viiii": nullFunc_viiii, "invoke_iiii": invoke_iiii, "jsCall_iiii": jsCall_iiii, "invoke_viiiii": invoke_viiiii, "jsCall_viiiii": jsCall_viiiii, "invoke_vi": invoke_vi, "jsCall_vi": jsCall_vi, "invoke_ii": invoke_ii, "jsCall_ii": jsCall_ii, "invoke_v": invoke_v, "jsCall_v": jsCall_v, "invoke_viiiiii": invoke_viiiiii, "jsCall_viiiiii": jsCall_viiiiii, "invoke_iii": invoke_iii, "jsCall_iii": jsCall_iii, "invoke_viiii": invoke_viiii, "jsCall_viiii": jsCall_viiii, "___syscall221": ___syscall221, "___syscall220": ___syscall220, "_emscripten_get_now_is_monotonic": _emscripten_get_now_is_monotonic, "_llvm_pow_f64": _llvm_pow_f64, "___syscall168": ___syscall168, "___syscall63": ___syscall63, "_abort": _abort, "___syscall40": ___syscall40, "___syscall42": ___syscall42, "_fork": _fork, "___gxx_personality_v0": ___gxx_personality_v0, "_system": _system, "__Exit": __Exit, "___cxa_find_matching_catch_2": ___cxa_find_matching_catch_2, "__ZSt18uncaught_exceptionv": __ZSt18uncaught_exceptionv, "___buildEnvironment": ___buildEnvironment, "_execlp": _execlp, "_clock_gettime": _clock_gettime, "_signal": _signal, "_wait": _wait, "___setErrNo": ___setErrNo, "_usleep": _usleep, "_emscripten_memcpy_big": _emscripten_memcpy_big, "___resumeException": ___resumeException, "___cxa_find_matching_catch": ___cxa_find_matching_catch, "_execl": _execl, "_nanosleep": _nanosleep, "___syscall195": ___syscall195, "___syscall91": ___syscall91, "_kill": _kill, "_getenv": _getenv, "___syscall51": ___syscall51, "___map_file": ___map_file, "___syscall33": ___syscall33, "___syscall54": ___syscall54, "___unlock": ___unlock, "_emscripten_get_now": _emscripten_get_now, "___syscall10": ___syscall10, "___cxa_throw": ___cxa_throw, "___lock": ___lock, "___syscall6": ___syscall6, "___syscall5": ___syscall5, "___clock_gettime": ___clock_gettime, "___syscall3": ___syscall3, "___cxa_allocate_exception": ___cxa_allocate_exception, "___syscall4": ___syscall4, "___syscall140": ___syscall140, "_exit": _exit, "___syscall145": ___syscall145, "___syscall146": ___syscall146, "_waitpid": _waitpid, "DYNAMICTOP_PTR": DYNAMICTOP_PTR, "tempDoublePtr": tempDoublePtr, "ABORT": ABORT, "STACKTOP": STACKTOP, "STACK_MAX": STACK_MAX, "cttz_i8": cttz_i8 };
// EMSCRIPTEN_START_ASM
var asm = (function(global, env, buffer) {
  'almost asm';


  var HEAP8 = new global.Int8Array(buffer);
  var HEAP16 = new global.Int16Array(buffer);
  var HEAP32 = new global.Int32Array(buffer);
  var HEAPU8 = new global.Uint8Array(buffer);
  var HEAPU16 = new global.Uint16Array(buffer);
  var HEAPU32 = new global.Uint32Array(buffer);
  var HEAPF32 = new global.Float32Array(buffer);
  var HEAPF64 = new global.Float64Array(buffer);


  var DYNAMICTOP_PTR=env.DYNAMICTOP_PTR|0;
  var tempDoublePtr=env.tempDoublePtr|0;
  var ABORT=env.ABORT|0;
  var STACKTOP=env.STACKTOP|0;
  var STACK_MAX=env.STACK_MAX|0;
  var cttz_i8=env.cttz_i8|0;

  var __THREW__ = 0;
  var threwValue = 0;
  var setjmpId = 0;
  var undef = 0;
  var nan = global.NaN, inf = global.Infinity;
  var tempInt = 0, tempBigInt = 0, tempBigIntP = 0, tempBigIntS = 0, tempBigIntR = 0.0, tempBigIntI = 0, tempBigIntD = 0, tempValue = 0, tempDouble = 0.0;
  var tempRet0 = 0;

  var Math_floor=global.Math.floor;
  var Math_abs=global.Math.abs;
  var Math_sqrt=global.Math.sqrt;
  var Math_pow=global.Math.pow;
  var Math_cos=global.Math.cos;
  var Math_sin=global.Math.sin;
  var Math_tan=global.Math.tan;
  var Math_acos=global.Math.acos;
  var Math_asin=global.Math.asin;
  var Math_atan=global.Math.atan;
  var Math_atan2=global.Math.atan2;
  var Math_exp=global.Math.exp;
  var Math_log=global.Math.log;
  var Math_ceil=global.Math.ceil;
  var Math_imul=global.Math.imul;
  var Math_min=global.Math.min;
  var Math_max=global.Math.max;
  var Math_clz32=global.Math.clz32;
  var abort=env.abort;
  var assert=env.assert;
  var enlargeMemory=env.enlargeMemory;
  var getTotalMemory=env.getTotalMemory;
  var abortOnCannotGrowMemory=env.abortOnCannotGrowMemory;
  var abortStackOverflow=env.abortStackOverflow;
  var nullFunc_iiii=env.nullFunc_iiii;
  var nullFunc_viiiii=env.nullFunc_viiiii;
  var nullFunc_vi=env.nullFunc_vi;
  var nullFunc_ii=env.nullFunc_ii;
  var nullFunc_v=env.nullFunc_v;
  var nullFunc_viiiiii=env.nullFunc_viiiiii;
  var nullFunc_iii=env.nullFunc_iii;
  var nullFunc_viiii=env.nullFunc_viiii;
  var invoke_iiii=env.invoke_iiii;
  var jsCall_iiii=env.jsCall_iiii;
  var invoke_viiiii=env.invoke_viiiii;
  var jsCall_viiiii=env.jsCall_viiiii;
  var invoke_vi=env.invoke_vi;
  var jsCall_vi=env.jsCall_vi;
  var invoke_ii=env.invoke_ii;
  var jsCall_ii=env.jsCall_ii;
  var invoke_v=env.invoke_v;
  var jsCall_v=env.jsCall_v;
  var invoke_viiiiii=env.invoke_viiiiii;
  var jsCall_viiiiii=env.jsCall_viiiiii;
  var invoke_iii=env.invoke_iii;
  var jsCall_iii=env.jsCall_iii;
  var invoke_viiii=env.invoke_viiii;
  var jsCall_viiii=env.jsCall_viiii;
  var ___syscall221=env.___syscall221;
  var ___syscall220=env.___syscall220;
  var _emscripten_get_now_is_monotonic=env._emscripten_get_now_is_monotonic;
  var _llvm_pow_f64=env._llvm_pow_f64;
  var ___syscall168=env.___syscall168;
  var ___syscall63=env.___syscall63;
  var _abort=env._abort;
  var ___syscall40=env.___syscall40;
  var ___syscall42=env.___syscall42;
  var _fork=env._fork;
  var ___gxx_personality_v0=env.___gxx_personality_v0;
  var _system=env._system;
  var __Exit=env.__Exit;
  var ___cxa_find_matching_catch_2=env.___cxa_find_matching_catch_2;
  var __ZSt18uncaught_exceptionv=env.__ZSt18uncaught_exceptionv;
  var ___buildEnvironment=env.___buildEnvironment;
  var _execlp=env._execlp;
  var _clock_gettime=env._clock_gettime;
  var _signal=env._signal;
  var _wait=env._wait;
  var ___setErrNo=env.___setErrNo;
  var _usleep=env._usleep;
  var _emscripten_memcpy_big=env._emscripten_memcpy_big;
  var ___resumeException=env.___resumeException;
  var ___cxa_find_matching_catch=env.___cxa_find_matching_catch;
  var _execl=env._execl;
  var _nanosleep=env._nanosleep;
  var ___syscall195=env.___syscall195;
  var ___syscall91=env.___syscall91;
  var _kill=env._kill;
  var _getenv=env._getenv;
  var ___syscall51=env.___syscall51;
  var ___map_file=env.___map_file;
  var ___syscall33=env.___syscall33;
  var ___syscall54=env.___syscall54;
  var ___unlock=env.___unlock;
  var _emscripten_get_now=env._emscripten_get_now;
  var ___syscall10=env.___syscall10;
  var ___cxa_throw=env.___cxa_throw;
  var ___lock=env.___lock;
  var ___syscall6=env.___syscall6;
  var ___syscall5=env.___syscall5;
  var ___clock_gettime=env.___clock_gettime;
  var ___syscall3=env.___syscall3;
  var ___cxa_allocate_exception=env.___cxa_allocate_exception;
  var ___syscall4=env.___syscall4;
  var ___syscall140=env.___syscall140;
  var _exit=env._exit;
  var ___syscall145=env.___syscall145;
  var ___syscall146=env.___syscall146;
  var _waitpid=env._waitpid;
  var tempFloat = 0.0;

// EMSCRIPTEN_START_FUNCS

function stackAlloc(size) {
  size = size|0;
  var ret = 0;
  ret = STACKTOP;
  STACKTOP = (STACKTOP + size)|0;
  STACKTOP = (STACKTOP + 15)&-16;
  if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(size|0);

  return ret|0;
}
function stackSave() {
  return STACKTOP|0;
}
function stackRestore(top) {
  top = top|0;
  STACKTOP = top;
}
function establishStackSpace(stackBase, stackMax) {
  stackBase = stackBase|0;
  stackMax = stackMax|0;
  STACKTOP = stackBase;
  STACK_MAX = stackMax;
}

function setThrew(threw, value) {
  threw = threw|0;
  value = value|0;
  if ((__THREW__|0) == 0) {
    __THREW__ = threw;
    threwValue = value;
  }
}

function setTempRet0(value) {
  value = value|0;
  tempRet0 = value;
}
function getTempRet0() {
  return tempRet0|0;
}

function __Z13GetFileLengthPKc($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(96|0);
 $3 = sp;
 $2 = $0;
 $4 = $2;
 $5 = (_stat($4,$3)|0);
 $6 = ($5|0)!=(0);
 do {
  if ($6) {
   $1 = 0;
  } else {
   $7 = ((($3)) + 12|0);
   $8 = HEAP32[$7>>2]|0;
   $9 = $8 & 61440;
   $10 = ($9|0)==(16384);
   if ($10) {
    $1 = -2;
    break;
   } else {
    $11 = ((($3)) + 36|0);
    $12 = HEAP32[$11>>2]|0;
    $1 = $12;
    break;
   }
  }
 } while(0);
 $13 = $1;
 STACKTOP = sp;return ($13|0);
}
function __Z5Alloci($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 $1 = $0;
 $3 = $1;
 $4 = (_malloc($3)|0);
 $2 = $4;
 $5 = ($4|0)==(0|0);
 if ($5) {
  $6 = HEAP32[1451]|0;
  (_fprintf($6,16900,$vararg_buffer)|0);
 }
 $7 = $2;
 STACKTOP = sp;return ($7|0);
}
function __Z4FreePv($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = ($2|0)!=(0|0);
 if ($3) {
  $4 = $1;
  _free($4);
 }
 STACKTOP = sp;return;
}
function __Z11MarkerEventijiiPh($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $10 = 0, $11 = 0.0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0.0;
 var $5 = 0, $50 = 0.0, $51 = 0, $52 = 0.0, $53 = 0.0, $54 = 0.0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0;
 var $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0;
 var $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $9 = $4;
 $13 = HEAP32[10445]|0;
 $14 = ($13|0)==(0|0);
 if ($14) {
  STACKTOP = sp;return;
 }
 $15 = HEAP32[10446]|0;
 $16 = HEAP32[10447]|0;
 $17 = (($16) - 2)|0;
 $18 = ($15|0)>=($17|0);
 if ($18) {
  STACKTOP = sp;return;
 }
 $19 = HEAP32[10446]|0;
 $20 = (($19) + 1)|0;
 HEAP32[10446] = $20;
 $21 = HEAP32[10445]|0;
 $22 = (($21) + (($19*36)|0)|0);
 $10 = $22;
 $23 = $5;
 $24 = $10;
 HEAP32[$24>>2] = $23;
 $25 = HEAP32[10453]|0;
 $26 = $10;
 $27 = ((($26)) + 4|0);
 HEAP32[$27>>2] = $25;
 $28 = HEAP32[10454]|0;
 $29 = $10;
 $30 = ((($29)) + 24|0);
 HEAP32[$30>>2] = $28;
 $31 = $6;
 $32 = $31 & 16777215;
 $33 = $10;
 $34 = ((($33)) + 8|0);
 HEAP32[$34>>2] = $32;
 $35 = $6;
 $36 = $35 >>> 24;
 $37 = $10;
 $38 = ((($37)) + 12|0);
 HEAP32[$38>>2] = $36;
 $39 = HEAP32[10448]|0;
 $40 = HEAP32[18778]|0;
 $41 = (($39) + ($40))|0;
 $42 = $9;
 $43 = HEAP32[20233]|0;
 $44 = $42;
 $45 = $43;
 $46 = (($44) - ($45))|0;
 $47 = (($46|0) / 2)&-1;
 $48 = (($41) + ($47))|0;
 $49 = (+($48|0));
 $50 = $49 * 1000.0;
 $51 = HEAP32[20211]|0;
 $52 = (+($51|0));
 $53 = $50 / $52;
 $11 = $53;
 $54 = $11;
 $55 = (~~(($54)));
 $56 = $10;
 $57 = ((($56)) + 16|0);
 HEAP32[$57>>2] = $55;
 $58 = HEAP32[10448]|0;
 $59 = HEAP32[18778]|0;
 $60 = (($58) + ($59))|0;
 $61 = $9;
 $62 = HEAP32[20233]|0;
 $63 = $61;
 $64 = $62;
 $65 = (($63) - ($64))|0;
 $66 = (($65|0) / 2)&-1;
 $67 = (($60) + ($66))|0;
 $68 = $10;
 $69 = ((($68)) + 20|0);
 HEAP32[$69>>2] = $67;
 $70 = $5;
 $71 = ($70|0)==(3);
 $72 = $5;
 $73 = ($72|0)==(4);
 $or$cond = $71 | $73;
 if ($or$cond) {
  $74 = $7;
  $75 = HEAP32[10478]|0;
  $76 = (($75) + ($74)|0);
  $77 = $10;
  $78 = ((($77)) + 28|0);
  HEAP32[$78>>2] = $76;
  STACKTOP = sp;return;
 }
 $79 = $5;
 $80 = ($79|0)==(7);
 if ($80) {
  $81 = $10;
  $82 = ((($81)) + 28|0);
  $12 = $82;
  $83 = $7;
  $84 = $12;
  HEAP32[$84>>2] = $83;
  $85 = $8;
  $86 = $12;
  $87 = ((($86)) + 4|0);
  HEAP32[$87>>2] = $85;
  STACKTOP = sp;return;
 } else {
  $88 = $7;
  $89 = $10;
  $90 = ((($89)) + 28|0);
  HEAP32[$90>>2] = $88;
  STACKTOP = sp;return;
 }
}
function __Z17sync_espeak_SynthjPKvjj20espeak_POSITION_TYPEjjPv($0,$1,$2,$3,$4,$5,$6,$7) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond3 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $8 = $0;
 $9 = $1;
 $10 = $2;
 $11 = $3;
 $12 = $4;
 $13 = $5;
 $14 = $6;
 $15 = $7;
 $18 = $14;
 __Z8InitTexti($18);
 $19 = $8;
 HEAP32[10453] = $19;
 $20 = $15;
 HEAP32[10454] = $20;
 $17 = 0;
 while(1) {
  $21 = $17;
  $22 = ($21|0)<(15);
  if (!($22)) {
   break;
  }
  $23 = $17;
  $24 = ((41932) + ($23<<2)|0);
  $25 = HEAP32[$24>>2]|0;
  $26 = $17;
  $27 = (43208 + ($26<<2)|0);
  HEAP32[$27>>2] = $25;
  $28 = $17;
  $29 = (($28) + 1)|0;
  $17 = $29;
 }
 $30 = $12;
 switch ($30|0) {
 case 1:  {
  $31 = $11;
  HEAP32[19167] = $31;
  break;
 }
 case 2:  {
  $32 = $11;
  HEAP32[19166] = $32;
  break;
 }
 case 3:  {
  $33 = $11;
  HEAP32[19165] = $33;
  break;
 }
 default: {
 }
 }
 $34 = HEAP32[19167]|0;
 $35 = ($34|0)!=(0);
 $36 = HEAP32[19166]|0;
 $37 = ($36|0)!=(0);
 $or$cond = $35 | $37;
 $38 = HEAP32[19165]|0;
 $39 = ($38|0)!=(0);
 $or$cond3 = $or$cond | $39;
 if (!($or$cond3)) {
  $40 = $13;
  HEAP32[19169] = $40;
  $41 = $8;
  $42 = $9;
  $43 = $14;
  $44 = (__ZL10SynthesizejPKvi($41,$42,$43)|0);
  $16 = $44;
  $45 = $16;
  STACKTOP = sp;return ($45|0);
 }
 HEAP32[19168] = 1;
 $40 = $13;
 HEAP32[19169] = $40;
 $41 = $8;
 $42 = $9;
 $43 = $14;
 $44 = (__ZL10SynthesizejPKvi($41,$42,$43)|0);
 $16 = $44;
 $45 = $16;
 STACKTOP = sp;return ($45|0);
}
function __ZL10SynthesizejPKvi($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0;
 var $84 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $10 = sp + 8|0;
 $11 = sp;
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $8 = 0;
 $9 = 0;
 $12 = HEAP32[10444]|0;
 $13 = ($12|0)==(0|0);
 $14 = HEAP32[10445]|0;
 $15 = ($14|0)==(0|0);
 $or$cond = $13 | $15;
 if ($or$cond) {
  $3 = -1;
  $84 = $3;
  STACKTOP = sp;return ($84|0);
 }
 $16 = $6;
 $17 = $16 & 7;
 HEAP32[19238] = $17;
 $18 = $6;
 $19 = $18 & 16;
 HEAP32[19161] = $19;
 $20 = $6;
 $21 = $20 & 256;
 HEAP32[19162] = $21;
 $22 = $6;
 $23 = $22 & 4096;
 HEAP32[19157] = $23;
 HEAP32[10448] = 0;
 $24 = HEAP32[19149]|0;
 $25 = ($24|0)==(0|0);
 if ($25) {
  (__Z14SetVoiceByNamePKc(27818)|0);
 }
 $26 = $5;
 (__Z15SpeakNextClauseP8_IO_FILEPKvi(0,$26,0)|0);
 $27 = HEAP32[45]|0;
 $28 = ($27|0)==(3);
 if ($28) {
  while(1) {
   HEAP32[$10>>2] = 0;
   $29 = ((($10)) + 4|0);
   HEAP32[$29>>2] = 300000000;
   (_nanosleep(($10|0),($11|0))|0);
   $30 = (__Z12SynthOnTimerv()|0);
   $31 = ($30|0)!=(0);
   if ($31) {
    break;
   }
  }
  $3 = 0;
  $84 = $3;
  STACKTOP = sp;return ($84|0);
 }
 while(1) {
  $32 = HEAP32[10444]|0;
  HEAP32[20232] = $32;
  $33 = HEAP32[20235]|0;
  $34 = HEAP32[10444]|0;
  $35 = (($34) + ($33)|0);
  HEAP32[20234] = $35;
  HEAP32[10446] = 0;
  (__Z11WavegenFilli(0)|0);
  $36 = HEAP32[20232]|0;
  $37 = HEAP32[10444]|0;
  $38 = $36;
  $39 = $37;
  $40 = (($38) - ($39))|0;
  $41 = (($40|0) / 2)&-1;
  $7 = $41;
  $42 = $7;
  $43 = HEAP32[10448]|0;
  $44 = (($43) + ($42))|0;
  HEAP32[10448] = $44;
  $45 = HEAP32[10446]|0;
  $46 = HEAP32[10445]|0;
  $47 = (($46) + (($45*36)|0)|0);
  HEAP32[$47>>2] = 0;
  $48 = HEAP32[10453]|0;
  $49 = HEAP32[10446]|0;
  $50 = HEAP32[10445]|0;
  $51 = (($50) + (($49*36)|0)|0);
  $52 = ((($51)) + 4|0);
  HEAP32[$52>>2] = $48;
  $53 = HEAP32[10454]|0;
  $54 = HEAP32[10446]|0;
  $55 = HEAP32[10445]|0;
  $56 = (($55) + (($54*36)|0)|0);
  $57 = ((($56)) + 24|0);
  HEAP32[$57>>2] = $53;
  $58 = $9;
  $59 = (($58) + 1)|0;
  $9 = $59;
  $60 = HEAP32[45]|0;
  $61 = ($60|0)==(0);
  if (!($61)) {
   $62 = HEAP32[10450]|0;
   $63 = HEAP32[10444]|0;
   $64 = $7;
   $65 = HEAP32[10445]|0;
   $66 = (FUNCTION_TABLE_iiii[$62 & 31]($63,$64,$65)|0);
   $8 = $66;
  }
  $67 = $8;
  $68 = ($67|0)!=(0);
  if ($68) {
   label = 11;
   break;
  }
  $69 = (__Z8GenerateP12PHONEME_LISTPii(51088,51084,1)|0);
  $70 = ($69|0)==(0);
  if (!($70)) {
   continue;
  }
  $71 = (__Z9WcmdqUsedv()|0);
  $72 = ($71|0)==(0);
  if (!($72)) {
   continue;
  }
  $73 = HEAP32[10445]|0;
  HEAP32[$73>>2] = 0;
  $74 = HEAP32[10453]|0;
  $75 = HEAP32[10445]|0;
  $76 = ((($75)) + 4|0);
  HEAP32[$76>>2] = $74;
  $77 = HEAP32[10454]|0;
  $78 = HEAP32[10445]|0;
  $79 = ((($78)) + 24|0);
  HEAP32[$79>>2] = $77;
  $80 = (__Z15SpeakNextClauseP8_IO_FILEPKvi(0,0,1)|0);
  $81 = ($80|0)==(0);
  if ($81) {
   label = 15;
   break;
  }
 }
 if ((label|0) == 11) {
  (__Z15SpeakNextClauseP8_IO_FILEPKvi(0,0,2)|0);
 }
 else if ((label|0) == 15) {
  $82 = HEAP32[10450]|0;
  $83 = HEAP32[10445]|0;
  (FUNCTION_TABLE_iiii[$82 & 31](0,0,$83)|0);
 }
 $3 = 0;
 $84 = $3;
 STACKTOP = sp;return ($84|0);
}
function _espeak_SetSynthCallback($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 HEAP32[10450] = $2;
 STACKTOP = sp;return;
}
function _espeak_Initialize($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $or$cond = 0, $or$cond3 = 0, $vararg_buffer = 0, $vararg_ptr4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $vararg_buffer = sp;
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $10 = (_setlocale(0,33069)|0);
 $11 = ($10|0)==(0|0);
 if ($11) {
  $12 = (_setlocale(0,16923)|0);
  $13 = ($12|0)==(0|0);
  if ($13) {
   $14 = (_setlocale(0,16929)|0);
   $15 = ($14|0)==(0|0);
   if ($15) {
    (_setlocale(0,122378)|0);
   }
  }
 }
 $16 = $7;
 __ZL9init_pathPKc($16);
 $17 = $8;
 (__ZL10initialisei($17)|0);
 $18 = $5;
 __ZL13select_output19espeak_AUDIO_OUTPUT($18);
 $19 = HEAP32[11248]|0;
 $20 = ($19|0)!=(0|0);
 if ($20) {
  $21 = HEAP32[11248]|0;
  $22 = $5;
  $23 = $8;
  HEAP32[$vararg_buffer>>2] = $22;
  $vararg_ptr4 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr4>>2] = $23;
  (_fprintf($21,16941,$vararg_buffer)|0);
 }
 $24 = $6;
 $25 = ($24|0)==(0);
 $26 = $5;
 $27 = ($26|0)==(0);
 $or$cond = $25 | $27;
 $28 = $5;
 $29 = ($28|0)==(3);
 $or$cond3 = $or$cond | $29;
 if ($or$cond3) {
  $6 = 200;
 }
 $30 = $6;
 $31 = HEAP32[20211]|0;
 $32 = Math_imul($30, $31)|0;
 $33 = (($32|0) / 500)&-1;
 HEAP32[20235] = $33;
 $34 = HEAP32[10444]|0;
 $35 = HEAP32[20235]|0;
 $36 = (_realloc($34,$35)|0);
 HEAP32[10444] = $36;
 $37 = HEAP32[10444]|0;
 HEAP32[20233] = $37;
 $38 = ($37|0)==(0|0);
 if ($38) {
  $4 = -1;
  $64 = $4;
  STACKTOP = sp;return ($64|0);
 }
 $39 = $6;
 $40 = ($39*200)|0;
 $41 = (($40|0) / 1000)&-1;
 $42 = (($41) + 20)|0;
 HEAP32[10447] = $42;
 $43 = HEAP32[10445]|0;
 $44 = HEAP32[10447]|0;
 $45 = ($44*36)|0;
 $46 = (_realloc($43,$45)|0);
 HEAP32[10445] = $46;
 $47 = ($46|0)==(0|0);
 if ($47) {
  $4 = -1;
  $64 = $4;
  STACKTOP = sp;return ($64|0);
 }
 HEAP32[19154] = 0;
 $48 = $8;
 $49 = $48 & 3;
 HEAP32[19155] = $49;
 __Z10VoiceReseti(0);
 $9 = 0;
 while(1) {
  $50 = $9;
  $51 = ($50|0)<(15);
  if (!($51)) {
   break;
  }
  $52 = $9;
  $53 = (1404 + ($52<<2)|0);
  $54 = HEAP32[$53>>2]|0;
  $55 = $9;
  $56 = (43208 + ($55<<2)|0);
  HEAP32[$56>>2] = $54;
  $57 = $9;
  $58 = ((41932) + ($57<<2)|0);
  HEAP32[$58>>2] = $54;
  $59 = $9;
  $60 = (($59) + 1)|0;
  $9 = $60;
 }
 __Z12SetParameteriii(1,175,0);
 __Z12SetParameteriii(2,100,0);
 $61 = HEAP32[19158]|0;
 __Z12SetParameteriii(6,$61,0);
 $62 = HEAP32[19159]|0;
 __Z12SetParameteriii(5,$62,0);
 __Z12SetParameteriii(7,0,0);
 $63 = HEAP32[20211]|0;
 $4 = $63;
 $64 = $4;
 STACKTOP = sp;return ($64|0);
}
function __ZL9init_pathPKc($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $vararg_buffer4 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $1 = $0;
 $3 = $1;
 $4 = ($3|0)!=(0|0);
 if ($4) {
  $5 = $1;
  HEAP32[$vararg_buffer>>2] = $5;
  (_snprintf(119484,160,17023,$vararg_buffer)|0);
  STACKTOP = sp;return;
 }
 $6 = (_getenv((17038|0))|0);
 $2 = $6;
 $7 = ($6|0)!=(0|0);
 if ($7) {
  $8 = $2;
  HEAP32[$vararg_buffer1>>2] = $8;
  (_snprintf(119484,160,17023,$vararg_buffer1)|0);
  $9 = (__Z13GetFileLengthPKc(119484)|0);
  $10 = ($9|0)==(-2);
  if ($10) {
   STACKTOP = sp;return;
  }
 }
 $11 = (_getenv((17055|0))|0);
 HEAP32[$vararg_buffer4>>2] = $11;
 (_snprintf(119484,160,17023,$vararg_buffer4)|0);
 $12 = (_access(119484,4)|0);
 $13 = ($12|0)!=(0);
 if (!($13)) {
  STACKTOP = sp;return;
 }
 (_strcpy(119484,17060)|0);
 STACKTOP = sp;return;
}
function __ZL10initialisei($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_ptr3 = 0, $vararg_ptr4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $4 = sp + 20|0;
 $1 = $0;
 HEAP32[$4>>2] = 22050;
 HEAP32[10456] = 0;
 __Z10LoadConfigv();
 $5 = (__Z10LoadPhDataPi($4)|0);
 $3 = $5;
 $6 = ($5|0)!=(1);
 do {
  if ($6) {
   $7 = $3;
   $8 = ($7|0)==(-1);
   $9 = HEAP32[1451]|0;
   if (!($8)) {
    $13 = $3;
    $14 = HEAP32[728]|0;
    HEAP32[$vararg_buffer1>>2] = $13;
    $vararg_ptr3 = ((($vararg_buffer1)) + 4|0);
    HEAP32[$vararg_ptr3>>2] = $14;
    $vararg_ptr4 = ((($vararg_buffer1)) + 8|0);
    HEAP32[$vararg_ptr4>>2] = 119484;
    (_fprintf($9,17101,$vararg_buffer1)|0);
    break;
   }
   (_fprintf($9,17073,$vararg_buffer)|0);
   $10 = $1;
   $11 = $10 & 32768;
   $12 = ($11|0)==(0);
   if ($12) {
    _exit(1);
    // unreachable;
   }
  }
 } while(0);
 $15 = HEAP32[$4>>2]|0;
 __Z11WavegenInitii($15,0);
 ;HEAP32[78088>>2]=0|0;HEAP32[78088+4>>2]=0|0;HEAP32[78088+8>>2]=0|0;HEAP32[78088+12>>2]=0|0;HEAP32[78088+16>>2]=0|0;HEAP32[78088+20>>2]=0|0;
 __Z13SetVoiceStackP12espeak_VOICEPKc(0,122378);
 __Z14SynthesizeInitv();
 __Z12InitNamedatav();
 $2 = 0;
 while(1) {
  $16 = $2;
  $17 = ($16|0)<(15);
  if (!($17)) {
   break;
  }
  $18 = $2;
  $19 = (1404 + ($18<<2)|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = $2;
  $22 = ((41932) + ($21<<2)|0);
  HEAP32[$22>>2] = $20;
  $23 = $2;
  $24 = (($23) + 1)|0;
  $2 = $24;
 }
 STACKTOP = sp;return 0;
}
function __ZL13select_output19espeak_AUDIO_OUTPUT($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 HEAP32[45] = $2;
 HEAP32[10449] = 0;
 HEAP32[44] = 1;
 HEAP32[20195] = 1;
 HEAP32[10457] = 0;
 $3 = HEAP32[45]|0;
 switch ($3|0) {
 case 0:  {
  HEAP32[44] = 0;
  break;
 }
 case 1:  {
  HEAP32[44] = 0;
  break;
 }
 case 3:  {
  HEAP32[20195] = 0;
  (__Z16WavegenInitSoundv()|0);
  break;
 }
 default: {
 }
 }
 STACKTOP = sp;return;
}
function _espeak_Synth($0,$1,$2,$3,$4,$5,$6,$7) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr3 = 0, $vararg_ptr4 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $vararg_buffer = sp;
 $9 = $0;
 $10 = $1;
 $11 = $2;
 $12 = $3;
 $13 = $4;
 $14 = $5;
 $15 = $6;
 $16 = $7;
 $18 = HEAP32[11248]|0;
 $19 = ($18|0)!=(0|0);
 if ($19) {
  $20 = HEAP32[11248]|0;
  $21 = $11;
  $22 = $13;
  $23 = $12;
  $24 = $14;
  $25 = $9;
  HEAP32[$vararg_buffer>>2] = $21;
  $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr1>>2] = $22;
  $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
  HEAP32[$vararg_ptr2>>2] = $23;
  $vararg_ptr3 = ((($vararg_buffer)) + 12|0);
  HEAP32[$vararg_ptr3>>2] = $24;
  $vararg_ptr4 = ((($vararg_buffer)) + 16|0);
  HEAP32[$vararg_ptr4>>2] = $25;
  (_fprintf($20,16968,$vararg_buffer)|0);
  $26 = HEAP32[11248]|0;
  (_fflush($26)|0);
 }
 $17 = -1;
 $27 = $15;
 $28 = ($27|0)==(0|0);
 if ($28) {
  $15 = 41820;
 }
 $29 = $15;
 HEAP32[$29>>2] = 0;
 $30 = HEAP32[44]|0;
 $31 = ($30|0)!=(0);
 if ($31) {
  $32 = $9;
  $33 = $10;
  $34 = $11;
  $35 = $12;
  $36 = $13;
  $37 = $14;
  $38 = $16;
  $39 = (__Z17sync_espeak_SynthjPKvjj20espeak_POSITION_TYPEjjPv(0,$32,$33,$34,$35,$36,$37,$38)|0);
  $8 = $39;
  $41 = $8;
  STACKTOP = sp;return ($41|0);
 } else {
  $40 = $17;
  $8 = $40;
  $41 = $8;
  STACKTOP = sp;return ($41|0);
 }
 return (0)|0;
}
function _espeak_SetVoiceByName($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = (__Z14SetVoiceByNamePKc($2)|0);
 STACKTOP = sp;return ($3|0);
}
function _espeak_SetVoiceByProperties($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = (__Z20SetVoiceByPropertiesP12espeak_VOICE($2)|0);
 STACKTOP = sp;return ($3|0);
}
function _espeak_SetParameter($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $vararg_buffer = sp;
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $6 = HEAP32[11248]|0;
 $7 = ($6|0)!=(0|0);
 if (!($7)) {
  $12 = $3;
  $13 = $4;
  $14 = $5;
  __Z12SetParameteriii($12,$13,$14);
  STACKTOP = sp;return 0;
 }
 $8 = HEAP32[11248]|0;
 $9 = $3;
 $10 = $4;
 $11 = $5;
 HEAP32[$vararg_buffer>>2] = $9;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $10;
 $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
 HEAP32[$vararg_ptr2>>2] = $11;
 (_fprintf($8,17004,$vararg_buffer)|0);
 $12 = $3;
 $13 = $4;
 $14 = $5;
 __Z12SetParameteriii($12,$13,$14);
 STACKTOP = sp;return 0;
}
function __Z8isspace2j($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $4 = $2;
 $5 = $4 & 255;
 $3 = $5;
 $6 = ($5|0)==(0);
 $7 = $2;
 $8 = ($7>>>0)>(32);
 $or$cond = $6 | $8;
 if ($or$cond) {
  $1 = 0;
 } else {
  $1 = 1;
 }
 $9 = $1;
 STACKTOP = sp;return ($9|0);
}
function __Z14LookupMnemNameP8MNEM_TABi($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 while(1) {
  $5 = $3;
  $6 = HEAP32[$5>>2]|0;
  $7 = ($6|0)!=(0|0);
  if (!($7)) {
   label = 6;
   break;
  }
  $8 = $3;
  $9 = ((($8)) + 4|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = $4;
  $12 = ($10|0)==($11|0);
  $13 = $3;
  if ($12) {
   label = 4;
   break;
  }
  $15 = ((($13)) + 8|0);
  $3 = $15;
 }
 if ((label|0) == 4) {
  $14 = HEAP32[$13>>2]|0;
  $2 = $14;
  $16 = $2;
  STACKTOP = sp;return ($16|0);
 }
 else if ((label|0) == 6) {
  $2 = 122378;
  $16 = $2;
  STACKTOP = sp;return ($16|0);
 }
 return (0)|0;
}
function __Z22print_dictionary_flagsPjPci($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $vararg_buffer = 0, $vararg_buffer1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $10 = 0;
 $11 = $4;
 HEAP8[$11>>0] = 0;
 $12 = $3;
 $13 = HEAP32[$12>>2]|0;
 $14 = $13 & 15;
 $6 = $14;
 $15 = ($14|0)!=(0);
 if ($15) {
  $16 = $4;
  $17 = $6;
  $18 = (($17) + 64)|0;
  $19 = (__Z14LookupMnemNameP8MNEM_TABi(328,$18)|0);
  HEAP32[$vararg_buffer>>2] = $19;
  (_sprintf($16,25552,$vararg_buffer)|0);
  $20 = $4;
  $21 = (_strlen($20)|0);
  $10 = $21;
  $22 = $10;
  $23 = $4;
  $24 = (($23) + ($22)|0);
  $4 = $24;
 }
 $7 = 8;
 while(1) {
  $25 = $7;
  $26 = ($25|0)<(64);
  if (!($26)) {
   break;
  }
  $27 = $7;
  $28 = ($27|0)<(30);
  if ($28) {
   $29 = $3;
   $30 = HEAP32[$29>>2]|0;
   $31 = $7;
   $32 = 1 << $31;
   $33 = $30 & $32;
   $34 = ($33|0)!=(0);
   if ($34) {
    label = 9;
   } else {
    label = 7;
   }
  } else {
   label = 7;
  }
  if ((label|0) == 7) {
   label = 0;
   $35 = $7;
   $36 = ($35|0)>=(32);
   if ($36) {
    $37 = $3;
    $38 = ((($37)) + 4|0);
    $39 = HEAP32[$38>>2]|0;
    $40 = $7;
    $41 = (($40) - 32)|0;
    $42 = 1 << $41;
    $43 = $39 & $42;
    $44 = ($43|0)!=(0);
    if ($44) {
     label = 9;
    }
   }
  }
  if ((label|0) == 9) {
   label = 0;
   $45 = $7;
   $46 = (__Z14LookupMnemNameP8MNEM_TABi(328,$45)|0);
   $8 = $46;
   $47 = $8;
   $48 = (_strlen($47)|0);
   $49 = (($48) + 1)|0;
   $9 = $49;
   $50 = $9;
   $51 = $10;
   $52 = (($51) + ($50))|0;
   $10 = $52;
   $53 = $10;
   $54 = $5;
   $55 = ($53|0)>=($54|0);
   if (!($55)) {
    $56 = $4;
    $57 = $8;
    HEAP32[$vararg_buffer1>>2] = $57;
    (_sprintf($56,20891,$vararg_buffer1)|0);
    $58 = $9;
    $59 = $4;
    $60 = (($59) + ($58)|0);
    $4 = $60;
   }
  }
  $61 = $7;
  $62 = (($61) + 1)|0;
  $7 = $62;
 }
 STACKTOP = sp;return;
}
function __Z10DecodeRulePKciPci($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$ = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0;
 var $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0;
 var $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0;
 var $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0;
 var $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0;
 var $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0;
 var $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0;
 var $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0;
 var $244 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0;
 var $98 = 0, $99 = 0, $or$cond = 0, $vararg_buffer = 0, $vararg_buffer3 = 0, $vararg_buffer6 = 0, $vararg_buffer9 = 0, $vararg_ptr2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 528|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(528|0);
 $vararg_buffer9 = sp + 24|0;
 $vararg_buffer6 = sp + 16|0;
 $vararg_buffer3 = sp + 8|0;
 $vararg_buffer = sp;
 $22 = sp + 312|0;
 $23 = sp + 112|0;
 $24 = sp + 92|0;
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $3;
 $14 = 0;
 $16 = 0;
 $19 = 0;
 $20 = 0;
 $13 = 0;
 HEAP8[$23>>0] = 0;
 $12 = 0;
 while(1) {
  $25 = $12;
  $26 = $5;
  $27 = ($25|0)<($26|0);
  $28 = $12;
  if (!($27)) {
   break;
  }
  $29 = $4;
  $30 = (($29) + ($28)|0);
  $31 = HEAP8[$30>>0]|0;
  $32 = $12;
  $33 = (($22) + ($32)|0);
  HEAP8[$33>>0] = $31;
  $34 = $12;
  $35 = (($34) + 1)|0;
  $12 = $35;
 }
 $36 = (($22) + ($28)|0);
 HEAP8[$36>>0] = 0;
 $37 = (_strlen($22)|0);
 $38 = (($22) + ($37)|0);
 $10 = $38;
 L5: while(1) {
  $39 = $14;
  $40 = ($39|0)!=(0);
  $41 = $40 ^ 1;
  if (!($41)) {
   break;
  }
  $42 = $6;
  $43 = ((($42)) + 1|0);
  $6 = $43;
  $44 = HEAP8[$42>>0]|0;
  $8 = $44;
  $45 = $8;
  $46 = $45&255;
  $47 = ($46|0)<=(9);
  $48 = $8;
  $49 = $48&255;
  if ($47) {
   switch ($49|0) {
   case 3: case 0:  {
    $14 = 1;
    continue L5;
    break;
   }
   case 8:  {
    $20 = 1;
    break;
   }
   case 1:  {
    break;
   }
   case 2:  {
    $13 = 2;
    $51 = $10;
    HEAP8[$51>>0] = 0;
    (_strcat($22,17645)|0);
    $52 = (_strlen($22)|0);
    $53 = (($22) + ($52)|0);
    $10 = $53;
    continue L5;
    break;
   }
   case 9:  {
    $58 = $6;
    $59 = ((($58)) + 1|0);
    $60 = HEAP8[$59>>0]|0;
    $61 = $60 << 24 >> 24;
    $62 = $61 & 255;
    $63 = (($62) - 1)|0;
    $15 = $63;
    $64 = $6;
    $65 = HEAP8[$64>>0]|0;
    $66 = $65 << 24 >> 24;
    $67 = $66 & 255;
    $68 = (($67) - 1)|0;
    $69 = $15;
    $70 = ($69*255)|0;
    $71 = (($68) + ($70))|0;
    $16 = $71;
    $72 = $6;
    $73 = ((($72)) + 2|0);
    $6 = $73;
    continue L5;
    break;
   }
   case 5:  {
    $54 = $6;
    $55 = ((($54)) + 1|0);
    $6 = $55;
    $56 = HEAP8[$54>>0]|0;
    $57 = $56 << 24 >> 24;
    $19 = $57;
    continue L5;
    break;
   }
   default: {
    continue L5;
   }
   }
   $13 = 1;
   $50 = $10;
   HEAP8[$50>>0] = 0;
   $10 = $23;
   continue;
  }
  $74 = ($49|0)==(28);
  do {
   if ($74) {
    $75 = $6;
    $76 = ((($75)) + 1|0);
    $6 = $76;
    $77 = HEAP8[$75>>0]|0;
    $78 = $77 << 24 >> 24;
    $79 = $78 & 255;
    $15 = $79;
    $80 = $15;
    $81 = ($80|0)!=(1);
    if ($81) {
     label = 17;
    } else {
     $82 = $7;
     $83 = $82 & -2147483648;
     $84 = ($83|0)!=(0);
     if ($84) {
      label = 17;
     }
    }
    if ((label|0) == 17) {
     label = 0;
     $85 = $10;
     HEAP8[$85>>0] = 36;
     $86 = $15;
     $87 = (__Z14LookupMnemNameP8MNEM_TABi(184,$86)|0);
     $21 = $87;
     $88 = $10;
     $89 = ((($88)) + 1|0);
     $90 = $21;
     (_strcpy($89,$90)|0);
     $91 = $21;
     $92 = (_strlen($91)|0);
     $93 = (($92) + 1)|0;
     $94 = $10;
     $95 = (($94) + ($93)|0);
     $10 = $95;
    }
    $9 = 32;
   } else {
    $96 = $8;
    $97 = $96&255;
    $98 = ($97|0)==(14);
    if ($98) {
     $99 = $6;
     $100 = HEAP8[$99>>0]|0;
     $101 = $100 << 24 >> 24;
     $102 = $101 & 127;
     $103 = $102 << 8;
     $104 = $6;
     $105 = ((($104)) + 1|0);
     $106 = HEAP8[$105>>0]|0;
     $107 = $106 << 24 >> 24;
     $108 = $107 & 127;
     $109 = (($103) + ($108))|0;
     $17 = $109;
     $18 = 83;
     $110 = $17;
     $111 = $110 & 4;
     $112 = ($111|0)!=(0);
     $$ = $112 ? 80 : 83;
     $18 = $$;
     $113 = $18;
     $114 = $6;
     $115 = ((($114)) + 2|0);
     $116 = HEAP8[$115>>0]|0;
     $117 = $116 << 24 >> 24;
     $118 = $117 & 127;
     HEAP32[$vararg_buffer>>2] = $113;
     $vararg_ptr2 = ((($vararg_buffer)) + 4|0);
     HEAP32[$vararg_ptr2>>2] = $118;
     (_sprintf($24,17648,$vararg_buffer)|0);
     $119 = $6;
     $120 = ((($119)) + 3|0);
     $6 = $120;
     $12 = 0;
     while(1) {
      $121 = $12;
      $122 = ($121|0)<(9);
      if (!($122)) {
       break;
      }
      $123 = $17;
      $124 = $123 & 1;
      $125 = ($124|0)!=(0);
      if ($125) {
       $126 = (_strlen($24)|0);
       $127 = (($24) + ($126)|0);
       $128 = $12;
       $129 = HEAP32[198]|0;
       $130 = (($129) + ($128)|0);
       $131 = HEAP8[$130>>0]|0;
       $132 = $131 << 24 >> 24;
       HEAP32[$vararg_buffer3>>2] = $132;
       (_sprintf($127,23346,$vararg_buffer3)|0);
      }
      $133 = $17;
      $134 = $133 >> 1;
      $17 = $134;
      $135 = $12;
      $136 = (($135) + 1)|0;
      $12 = $136;
     }
     $137 = $10;
     (_strcpy($137,$24)|0);
     $138 = (_strlen($24)|0);
     $139 = $10;
     $140 = (($139) + ($138)|0);
     $10 = $140;
     $9 = 32;
     break;
    }
    $141 = $8;
    $142 = $141&255;
    $143 = ($142|0)==(17);
    if ($143) {
     $144 = $6;
     $145 = ((($144)) + 1|0);
     $6 = $145;
     $146 = HEAP8[$144>>0]|0;
     $147 = $146 << 24 >> 24;
     $148 = (($147) - 65)|0;
     $149 = (17653 + ($148)|0);
     $150 = HEAP8[$149>>0]|0;
     $9 = $150;
     break;
    }
    $151 = $8;
    $152 = $151&255;
    $153 = ($152|0)==(18);
    if ($153) {
     $154 = $6;
     $155 = ((($154)) + 1|0);
     $6 = $155;
     $156 = HEAP8[$154>>0]|0;
     $157 = $156 << 24 >> 24;
     $158 = (($157) - 65)|0;
     $15 = $158;
     $159 = $10;
     HEAP8[$159>>0] = 76;
     $160 = $15;
     $161 = (($160|0) / 10)&-1;
     $162 = (($161) + 48)|0;
     $163 = $162&255;
     $164 = $10;
     $165 = ((($164)) + 1|0);
     HEAP8[$165>>0] = $163;
     $166 = $15;
     $167 = (($166|0) % 10)&-1;
     $168 = (($167) + 48)|0;
     $169 = $168&255;
     $9 = $169;
     $170 = $13;
     $171 = ($170|0)==(1);
     if ($171) {
      $172 = $9;
      $173 = $10;
      HEAP8[$173>>0] = $172;
      $9 = 76;
     }
     $174 = $10;
     $175 = ((($174)) + 2|0);
     $10 = $175;
     break;
    }
    $176 = $8;
    $177 = $176&255;
    $178 = ($177|0)<=(31);
    $179 = $8;
    $180 = $179&255;
    if ($178) {
     $181 = (17660 + ($180)|0);
     $182 = HEAP8[$181>>0]|0;
     $9 = $182;
     break;
    }
    $183 = ($180|0)==(32);
    if ($183) {
     $9 = 95;
     break;
    } else {
     $184 = $8;
     $9 = $184;
     break;
    }
   }
  } while(0);
  $185 = $9;
  $186 = $10;
  $187 = ((($186)) + 1|0);
  $10 = $187;
  HEAP8[$186>>0] = $185;
 }
 $188 = $10;
 HEAP8[$188>>0] = 0;
 $10 = 119644;
 $189 = $10;
 $190 = ((($189)) + 80|0);
 $191 = ((($190)) + -1|0);
 $11 = $191;
 $192 = $16;
 $193 = ($192|0)>(0);
 if ($193) {
  $194 = $10;
  $195 = $16;
  HEAP32[$vararg_buffer6>>2] = $195;
  (_sprintf($194,17692,$vararg_buffer6)|0);
  $196 = $10;
  $197 = ((($196)) + 7|0);
  $10 = $197;
 }
 $198 = $19;
 $199 = ($198|0)>(0);
 if ($199) {
  $200 = $10;
  $201 = $19;
  HEAP32[$vararg_buffer9>>2] = $201;
  (_sprintf($200,17698,$vararg_buffer9)|0);
  $202 = $10;
  $203 = (_strlen($202)|0);
  $204 = $10;
  $205 = (($204) + ($203)|0);
  $10 = $205;
 }
 $206 = (_strlen($23)|0);
 $12 = $206;
 $207 = ($206|0)>(0);
 $208 = $20;
 $209 = ($208|0)!=(0);
 $or$cond = $207 | $209;
 if ($or$cond) {
  $210 = $20;
  $211 = ($210|0)!=(0);
  if ($211) {
   $212 = $10;
   $213 = ((($212)) + 1|0);
   $10 = $213;
   HEAP8[$212>>0] = 95;
  }
  while(1) {
   $214 = $12;
   $215 = (($214) + -1)|0;
   $12 = $215;
   $216 = ($215|0)>=(0);
   if (!($216)) {
    break;
   }
   $217 = $10;
   $218 = $11;
   $219 = ((($218)) + -3|0);
   $220 = ($217>>>0)<($219>>>0);
   if (!($220)) {
    break;
   }
   $221 = $12;
   $222 = (($23) + ($221)|0);
   $223 = HEAP8[$222>>0]|0;
   $224 = $10;
   $225 = ((($224)) + 1|0);
   $10 = $225;
   HEAP8[$224>>0] = $223;
  }
  $226 = $10;
  $227 = ((($226)) + 1|0);
  $10 = $227;
  HEAP8[$226>>0] = 41;
  $228 = $10;
  $229 = ((($228)) + 1|0);
  $10 = $229;
  HEAP8[$228>>0] = 32;
 }
 $230 = $10;
 HEAP8[$230>>0] = 0;
 $231 = $11;
 $232 = $10;
 $233 = $231;
 $234 = $232;
 $235 = (($233) - ($234))|0;
 $236 = (($22) + ($235)|0);
 HEAP8[$236>>0] = 0;
 $237 = $10;
 (_strcat($237,$22)|0);
 $238 = (_strlen(119644)|0);
 $12 = $238;
 while(1) {
  $239 = $12;
  $240 = ($239|0)<(8);
  $241 = $12;
  if (!($240)) {
   break;
  }
  $242 = (($241) + 1)|0;
  $12 = $242;
  $243 = (119644 + ($241)|0);
  HEAP8[$243>>0] = 32;
 }
 $244 = (119644 + ($241)|0);
 HEAP8[$244>>0] = 0;
 STACKTOP = sp;return (119644|0);
}
function __Z8strncpy0PcPKci($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $6 = $3;
 $7 = $4;
 $8 = $5;
 (_strncpy($6,$7,$8)|0);
 $9 = $5;
 $10 = (($9) - 1)|0;
 $11 = $3;
 $12 = (($11) + ($10)|0);
 HEAP8[$12>>0] = 0;
 STACKTOP = sp;return;
}
function __Z13Reverse4Bytesi($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 STACKTOP = sp;return ($2|0);
}
function __Z10LookupMnemP8MNEM_TABPKc($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 while(1) {
  $5 = $3;
  $6 = HEAP32[$5>>2]|0;
  $7 = ($6|0)!=(0|0);
  if (!($7)) {
   label = 6;
   break;
  }
  $8 = $4;
  $9 = $3;
  $10 = HEAP32[$9>>2]|0;
  $11 = (_strcmp($8,$10)|0);
  $12 = ($11|0)==(0);
  $13 = $3;
  if ($12) {
   label = 4;
   break;
  }
  $16 = ((($13)) + 8|0);
  $3 = $16;
 }
 if ((label|0) == 4) {
  $14 = ((($13)) + 4|0);
  $15 = HEAP32[$14>>2]|0;
  $2 = $15;
  $20 = $2;
  STACKTOP = sp;return ($20|0);
 }
 else if ((label|0) == 6) {
  $17 = $3;
  $18 = ((($17)) + 4|0);
  $19 = HEAP32[$18>>2]|0;
  $2 = $19;
  $20 = $2;
  STACKTOP = sp;return ($20|0);
 }
 return (0)|0;
}
function __Z14LoadDictionaryP10TranslatorPKci($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0;
 var $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0;
 var $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0;
 var $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0;
 var $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0;
 var $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond = 0, $or$cond3 = 0, $or$cond5 = 0, $vararg_buffer = 0, $vararg_buffer11 = 0, $vararg_buffer14 = 0, $vararg_buffer19 = 0, $vararg_buffer8 = 0, $vararg_ptr17 = 0, $vararg_ptr18 = 0;
 var $vararg_ptr6 = 0, $vararg_ptr7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 272|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(272|0);
 $vararg_buffer19 = sp + 48|0;
 $vararg_buffer14 = sp + 32|0;
 $vararg_buffer11 = sp + 24|0;
 $vararg_buffer8 = sp + 16|0;
 $vararg_buffer = sp;
 $13 = sp + 92|0;
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $14 = $5;
 (_strcpy(119724,$14)|0);
 $15 = $4;
 $16 = ((($15)) + 340|0);
 $17 = $5;
 (_strcpy($16,$17)|0);
 $18 = $5;
 HEAP32[$vararg_buffer>>2] = 119484;
 $vararg_ptr6 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr6>>2] = 47;
 $vararg_ptr7 = ((($vararg_buffer)) + 8|0);
 HEAP32[$vararg_ptr7>>2] = $18;
 (_sprintf($13,17716,$vararg_buffer)|0);
 $19 = (__Z13GetFileLengthPKc($13)|0);
 $12 = $19;
 $20 = $4;
 $21 = ((($20)) + 808|0);
 $22 = HEAP32[$21>>2]|0;
 $23 = ($22|0)!=(0|0);
 if ($23) {
  $24 = $4;
  $25 = ((($24)) + 808|0);
  $26 = HEAP32[$25>>2]|0;
  __Z4FreePv($26);
  $27 = $4;
  $28 = ((($27)) + 808|0);
  HEAP32[$28>>2] = 0;
 }
 $29 = (_fopen($13,22846)|0);
 $11 = $29;
 $30 = $11;
 $31 = ($30|0)==(0|0);
 $32 = $12;
 $33 = ($32>>>0)<=(0);
 $or$cond = $31 | $33;
 if ($or$cond) {
  $34 = $6;
  $35 = ($34|0)==(0);
  if ($35) {
   $36 = HEAP32[1451]|0;
   HEAP32[$vararg_buffer8>>2] = $13;
   (_fprintf($36,17728,$vararg_buffer8)|0);
  }
  $3 = 1;
  $112 = $3;
  STACKTOP = sp;return ($112|0);
 }
 $37 = $12;
 $38 = (__Z5Alloci($37)|0);
 $39 = $4;
 $40 = ((($39)) + 808|0);
 HEAP32[$40>>2] = $38;
 $41 = $4;
 $42 = ((($41)) + 808|0);
 $43 = HEAP32[$42>>2]|0;
 $44 = $12;
 $45 = $11;
 $46 = (_fread($43,1,$44,$45)|0);
 $12 = $46;
 $47 = $11;
 (_fclose($47)|0);
 $48 = $4;
 $49 = ((($48)) + 808|0);
 $50 = HEAP32[$49>>2]|0;
 $9 = $50;
 $51 = $9;
 $52 = ((($51)) + 4|0);
 $53 = HEAP32[$52>>2]|0;
 $54 = (__Z13Reverse4Bytesi($53)|0);
 $10 = $54;
 $55 = $12;
 $56 = ($55>>>0)<=(1032);
 if ($56) {
  $57 = HEAP32[1451]|0;
  HEAP32[$vararg_buffer11>>2] = $13;
  (_fprintf($57,17762,$vararg_buffer11)|0);
  $3 = 2;
  $112 = $3;
  STACKTOP = sp;return ($112|0);
 }
 $58 = $9;
 $59 = HEAP32[$58>>2]|0;
 $60 = (__Z13Reverse4Bytesi($59)|0);
 $61 = ($60|0)!=(1024);
 $62 = $10;
 $63 = ($62|0)<=(0);
 $or$cond3 = $61 | $63;
 $64 = $10;
 $65 = ($64|0)>(134217728);
 $or$cond5 = $or$cond3 | $65;
 if ($or$cond5) {
  $66 = HEAP32[1451]|0;
  $67 = $9;
  $68 = HEAP32[$67>>2]|0;
  $69 = (__Z13Reverse4Bytesi($68)|0);
  $70 = $10;
  HEAP32[$vararg_buffer14>>2] = $13;
  $vararg_ptr17 = ((($vararg_buffer14)) + 4|0);
  HEAP32[$vararg_ptr17>>2] = $69;
  $vararg_ptr18 = ((($vararg_buffer14)) + 8|0);
  HEAP32[$vararg_ptr18>>2] = $70;
  (_fprintf($66,17785,$vararg_buffer14)|0);
  $3 = 2;
  $112 = $3;
  STACKTOP = sp;return ($112|0);
 }
 $71 = $10;
 $72 = $4;
 $73 = ((($72)) + 808|0);
 $74 = HEAP32[$73>>2]|0;
 $75 = (($74) + ($71)|0);
 $76 = $4;
 $77 = ((($76)) + 804|0);
 HEAP32[$77>>2] = $75;
 $78 = $4;
 __ZL10InitGroupsP10Translator($78);
 $79 = $4;
 $80 = ((($79)) + 808|0);
 $81 = HEAP32[$80>>2]|0;
 $82 = ((($81)) + 8|0);
 $8 = $82;
 $7 = 0;
 while(1) {
  $83 = $7;
  $84 = ($83|0)<(1024);
  if (!($84)) {
   break;
  }
  $85 = $8;
  $86 = $7;
  $87 = $4;
  $88 = ((($87)) + 812|0);
  $89 = (($88) + ($86<<2)|0);
  HEAP32[$89>>2] = $85;
  while(1) {
   $90 = $8;
   $91 = HEAP8[$90>>0]|0;
   $92 = $91 << 24 >> 24;
   $10 = $92;
   $93 = ($92|0)!=(0);
   if (!($93)) {
    break;
   }
   $94 = $10;
   $95 = $8;
   $96 = (($95) + ($94)|0);
   $8 = $96;
  }
  $97 = $8;
  $98 = ((($97)) + 1|0);
  $8 = $98;
  $99 = $7;
  $100 = (($99) + 1)|0;
  $7 = $100;
 }
 $101 = $4;
 $102 = ((($101)) + 444|0);
 $103 = HEAP32[$102>>2]|0;
 $104 = ($103|0)>(0);
 if ($104) {
  $105 = $12;
  $106 = $4;
  $107 = ((($106)) + 444|0);
  $108 = HEAP32[$107>>2]|0;
  $109 = ($105>>>0)<($108>>>0);
  if ($109) {
   $110 = HEAP32[1451]|0;
   $111 = $5;
   HEAP32[$vararg_buffer19>>2] = $111;
   (_fprintf($110,17816,$vararg_buffer19)|0);
  }
 }
 $3 = 0;
 $112 = $3;
 STACKTOP = sp;return ($112|0);
}
function __ZL10InitGroupsP10Translator($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0;
 var $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0;
 var $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0;
 var $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0;
 var $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0;
 var $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond = 0, $vararg_buffer = 0, $vararg_ptr2 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $vararg_buffer = sp;
 $1 = $0;
 $9 = $1;
 $10 = ((($9)) + 7784|0);
 HEAP32[$10>>2] = 0;
 $2 = 0;
 while(1) {
  $11 = $2;
  $12 = ($11|0)<(256);
  if (!($12)) {
   break;
  }
  $13 = $2;
  $14 = $1;
  $15 = ((($14)) + 5288|0);
  $16 = (($15) + ($13<<2)|0);
  HEAP32[$16>>2] = 0;
  $17 = $2;
  $18 = $1;
  $19 = ((($18)) + 7788|0);
  $20 = (($19) + ($17)|0);
  HEAP8[$20>>0] = 0;
  $21 = $2;
  $22 = $1;
  $23 = ((($22)) + 8044|0);
  $24 = (($23) + ($21)|0);
  HEAP8[$24>>0] = -1;
  $25 = $2;
  $26 = (($25) + 1)|0;
  $2 = $26;
 }
 $27 = $1;
 $28 = ((($27)) + 4908|0);
 _memset(($28|0),0,380)|0;
 $29 = $1;
 $30 = ((($29)) + 6312|0);
 _memset(($30|0),0,512)|0;
 $31 = $1;
 $32 = ((($31)) + 804|0);
 $33 = HEAP32[$32>>2]|0;
 $3 = $33;
 while(1) {
  $34 = $3;
  $35 = HEAP8[$34>>0]|0;
  $36 = $35 << 24 >> 24;
  $37 = ($36|0)!=(0);
  if (!($37)) {
   label = 28;
   break;
  }
  $38 = $3;
  $39 = HEAP8[$38>>0]|0;
  $40 = $39 << 24 >> 24;
  $41 = ($40|0)!=(6);
  if ($41) {
   break;
  }
  $50 = $3;
  $51 = ((($50)) + 1|0);
  $3 = $51;
  $52 = $3;
  $53 = HEAP8[$52>>0]|0;
  $54 = $53 << 24 >> 24;
  $55 = ($54|0)==(20);
  $56 = $3;
  if ($55) {
   $57 = $56;
   $58 = (($57) + 4)|0;
   $59 = $58 & -4;
   $60 = $59;
   $5 = $60;
   $61 = $5;
   $62 = $1;
   $63 = ((($62)) + 284|0);
   HEAP32[$63>>2] = $61;
   while(1) {
    $64 = $5;
    $65 = HEAP32[$64>>2]|0;
    $66 = ($65|0)!=(0);
    $67 = $5;
    if (!($66)) {
     break;
    }
    $68 = ((($67)) + 8|0);
    $5 = $68;
   }
   $69 = ((($67)) + 4|0);
   $3 = $69;
   continue;
  }
  $70 = HEAP8[$56>>0]|0;
  $71 = $70 << 24 >> 24;
  $72 = ($71|0)==(18);
  $73 = $3;
  do {
   if ($72) {
    $74 = ((($73)) + 1|0);
    $75 = HEAP8[$74>>0]|0;
    $76 = $75 << 24 >> 24;
    $77 = (($76) - 65)|0;
    $2 = $77;
    $78 = $3;
    $79 = ((($78)) + 2|0);
    $3 = $79;
    $80 = $2;
    $81 = ($80|0)>=(0);
    $82 = $2;
    $83 = ($82|0)<(95);
    $or$cond = $81 & $83;
    if ($or$cond) {
     $84 = $3;
     $85 = $2;
     $86 = $1;
     $87 = ((($86)) + 4908|0);
     $88 = (($87) + ($85<<2)|0);
     HEAP32[$88>>2] = $84;
    }
   } else {
    $89 = (_strlen($73)|0);
    $8 = $89;
    $90 = $3;
    $4 = $90;
    $91 = $4;
    $92 = HEAP8[$91>>0]|0;
    $6 = $92;
    $93 = $4;
    $94 = ((($93)) + 1|0);
    $95 = HEAP8[$94>>0]|0;
    $7 = $95;
    $96 = $8;
    $97 = (($96) + 1)|0;
    $98 = $3;
    $99 = (($98) + ($97)|0);
    $3 = $99;
    $100 = $8;
    $101 = ($100|0)==(1);
    if ($101) {
     $102 = $3;
     $103 = $6;
     $104 = $103&255;
     $105 = $1;
     $106 = ((($105)) + 5288|0);
     $107 = (($106) + ($104<<2)|0);
     HEAP32[$107>>2] = $102;
     break;
    }
    $108 = $8;
    $109 = ($108|0)==(0);
    if ($109) {
     $110 = $3;
     $111 = $1;
     $112 = ((($111)) + 5288|0);
     HEAP32[$112>>2] = $110;
     break;
    }
    $113 = $6;
    $114 = $113&255;
    $115 = ($114|0)==(1);
    if ($115) {
     $116 = $3;
     $117 = $7;
     $118 = $117&255;
     $119 = (($118) - 1)|0;
     $120 = $1;
     $121 = ((($120)) + 6312|0);
     $122 = (($121) + ($119<<2)|0);
     HEAP32[$122>>2] = $116;
     break;
    }
    $123 = $6;
    $124 = $123&255;
    $125 = $1;
    $126 = ((($125)) + 8044|0);
    $127 = (($126) + ($124)|0);
    $128 = HEAP8[$127>>0]|0;
    $129 = $128&255;
    $130 = ($129|0)==(255);
    if ($130) {
     $131 = $1;
     $132 = ((($131)) + 7784|0);
     $133 = HEAP32[$132>>2]|0;
     $134 = $133&255;
     $135 = $6;
     $136 = $135&255;
     $137 = $1;
     $138 = ((($137)) + 8044|0);
     $139 = (($138) + ($136)|0);
     HEAP8[$139>>0] = $134;
    }
    $140 = $6;
    $141 = $140&255;
    $142 = $1;
    $143 = ((($142)) + 7788|0);
    $144 = (($143) + ($141)|0);
    $145 = HEAP8[$144>>0]|0;
    $146 = (($145) + 1)<<24>>24;
    HEAP8[$144>>0] = $146;
    $147 = $3;
    $148 = $1;
    $149 = ((($148)) + 7784|0);
    $150 = HEAP32[$149>>2]|0;
    $151 = $1;
    $152 = ((($151)) + 6824|0);
    $153 = (($152) + ($150<<2)|0);
    HEAP32[$153>>2] = $147;
    $154 = $6;
    $155 = $154&255;
    $156 = $7;
    $157 = $156&255;
    $158 = $157 << 8;
    $159 = (($155) + ($158))|0;
    $160 = $1;
    $161 = ((($160)) + 7784|0);
    $162 = HEAP32[$161>>2]|0;
    $163 = (($162) + 1)|0;
    HEAP32[$161>>2] = $163;
    $164 = $1;
    $165 = ((($164)) + 7304|0);
    $166 = (($165) + ($162<<2)|0);
    HEAP32[$166>>2] = $159;
   }
  } while(0);
  while(1) {
   $167 = $3;
   $168 = HEAP8[$167>>0]|0;
   $169 = $168 << 24 >> 24;
   $170 = ($169|0)!=(7);
   $171 = $3;
   if (!($170)) {
    break;
   }
   $172 = (_strlen($171)|0);
   $173 = (($172) + 1)|0;
   $174 = $3;
   $175 = (($174) + ($173)|0);
   $3 = $175;
  }
  $176 = ((($171)) + 1|0);
  $3 = $176;
 }
 if ((label|0) == 28) {
  STACKTOP = sp;return;
 }
 $42 = HEAP32[1451]|0;
 $43 = $3;
 $44 = $1;
 $45 = ((($44)) + 804|0);
 $46 = HEAP32[$45>>2]|0;
 $47 = $43;
 $48 = $46;
 $49 = (($47) - ($48))|0;
 HEAP32[$vararg_buffer>>2] = 119724;
 $vararg_ptr2 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr2>>2] = $49;
 (_fprintf($42,17859,$vararg_buffer)|0);
 STACKTOP = sp;return;
}
function __Z14HashDictionaryPKc($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $3 = 0;
 $4 = 0;
 while(1) {
  $5 = $1;
  $6 = ((($5)) + 1|0);
  $1 = $6;
  $7 = HEAP8[$5>>0]|0;
  $8 = $7 << 24 >> 24;
  $9 = $8 & 255;
  $2 = $9;
  $10 = ($9|0)!=(0);
  $11 = $4;
  if (!($10)) {
   break;
  }
  $12 = $11<<3;
  $13 = $2;
  $14 = (($12) + ($13))|0;
  $4 = $14;
  $15 = $4;
  $16 = $15 & 1023;
  $17 = $4;
  $18 = $17 >> 8;
  $19 = $16 ^ $18;
  $4 = $19;
  $20 = $3;
  $21 = (($20) + 1)|0;
  $3 = $21;
 }
 $22 = $3;
 $23 = (($11) + ($22))|0;
 $24 = $23 & 1023;
 STACKTOP = sp;return ($24|0);
}
function __Z14EncodePhonemesPKcPcPi($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $16 = 0;
 var $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0;
 var $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0;
 var $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0;
 var $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0;
 var $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $cond = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $15 = $6;
 $16 = ($15|0)!=(0|0);
 if ($16) {
  $17 = $6;
  HEAP32[$17>>2] = 0;
 }
 while(1) {
  $18 = $4;
  $19 = HEAP8[$18>>0]|0;
  $20 = $19 << 24 >> 24;
  $21 = (_isspace($20)|0);
  $22 = ($21|0)!=(0);
  if (!($22)) {
   break;
  }
  $23 = $4;
  $24 = ((($23)) + 1|0);
  $4 = $24;
 }
 while(1) {
  $25 = $4;
  $26 = HEAP8[$25>>0]|0;
  $8 = $26;
  $27 = $26&255;
  $28 = ($27|0)!=(0);
  if (!($28)) {
   label = 39;
   break;
  }
  $29 = $8;
  $30 = $29&255;
  $31 = (_isspace($30)|0);
  $32 = ($31|0)!=(0);
  $33 = $32 ^ 1;
  if (!($33)) {
   label = 39;
   break;
  }
  $12 = 0;
  $34 = $8;
  $35 = $34&255;
  $cond = ($35|0)==(124);
  if ($cond) {
   $36 = $4;
   $37 = ((($36)) + 1|0);
   $38 = HEAP8[$37>>0]|0;
   $8 = $38;
   $39 = $38&255;
   $40 = ($39|0)==(124);
   if (!($40)) {
    $41 = $4;
    $42 = ((($41)) + 1|0);
    $4 = $42;
    continue;
   }
  }
  $10 = -1;
  $11 = 0;
  $7 = 1;
  while(1) {
   $43 = $7;
   $44 = HEAP32[11250]|0;
   $45 = ($43|0)<($44|0);
   if (!($45)) {
    break;
   }
   $46 = $7;
   $47 = (45008 + ($46<<2)|0);
   $48 = HEAP32[$47>>2]|0;
   $49 = ($48|0)==(0|0);
   do {
    if (!($49)) {
     $50 = $7;
     $51 = (45008 + ($50<<2)|0);
     $52 = HEAP32[$51>>2]|0;
     $53 = ((($52)) + 11|0);
     $54 = HEAP8[$53>>0]|0;
     $55 = $54&255;
     $56 = ($55|0)==(15);
     if (!($56)) {
      $9 = 0;
      $57 = $7;
      $58 = (45008 + ($57<<2)|0);
      $59 = HEAP32[$58>>2]|0;
      $60 = HEAP32[$59>>2]|0;
      $13 = $60;
      while(1) {
       $61 = $9;
       $62 = $4;
       $63 = (($62) + ($61)|0);
       $64 = HEAP8[$63>>0]|0;
       $8 = $64;
       $65 = $64&255;
       $66 = ($65|0)>(32);
       $67 = $9;
       $68 = ($67|0)<(4);
       $or$cond = $66 & $68;
       if ($or$cond) {
        $69 = $8;
        $70 = $69&255;
        $71 = $13;
        $72 = $9;
        $73 = $72<<3;
        $74 = $71 >>> $73;
        $75 = $74 & 255;
        $76 = ($70|0)==($75|0);
        $152 = $76;
       } else {
        $152 = 0;
       }
       $77 = $9;
       if (!($152)) {
        break;
       }
       $78 = (($77) + 1)|0;
       $9 = $78;
      }
      $79 = $10;
      $80 = ($77|0)>($79|0);
      if ($80) {
       $81 = $9;
       $82 = ($81|0)==(4);
       if (!($82)) {
        $83 = $13;
        $84 = $9;
        $85 = $84<<3;
        $86 = $83 >>> $85;
        $87 = $86 & 255;
        $88 = ($87|0)==(0);
        if (!($88)) {
         break;
        }
       }
       $89 = $9;
       $10 = $89;
       $90 = $7;
       $91 = (45008 + ($90<<2)|0);
       $92 = HEAP32[$91>>2]|0;
       $93 = ((($92)) + 10|0);
       $94 = HEAP8[$93>>0]|0;
       $95 = $94&255;
       $11 = $95;
      }
     }
    }
   } while(0);
   $96 = $7;
   $97 = (($96) + 1)|0;
   $7 = $97;
  }
  $98 = $11;
  $99 = ($98|0)==(0);
  if ($99) {
   label = 25;
   break;
  }
  $108 = $10;
  $109 = ($108|0)<=(0);
  if ($109) {
   $10 = 1;
  }
  $110 = $12;
  $111 = $10;
  $112 = (($110) + ($111))|0;
  $113 = $4;
  $114 = (($113) + ($112)|0);
  $4 = $114;
  $115 = $11;
  $116 = $115&255;
  $117 = $5;
  $118 = ((($117)) + 1|0);
  $5 = $118;
  HEAP8[$117>>0] = $116;
  $119 = $11;
  $120 = ($119|0)==(21);
  if (!($120)) {
   continue;
  }
  $121 = $5;
  $14 = $121;
  while(1) {
   $122 = $4;
   $123 = HEAP8[$122>>0]|0;
   $8 = $123;
   $124 = $123&255;
   $125 = (_isspace($124)|0);
   $126 = ($125|0)!=(0);
   if ($126) {
    break;
   }
   $127 = $8;
   $128 = $127&255;
   $129 = ($128|0)!=(0);
   if (!($129)) {
    break;
   }
   $130 = $4;
   $131 = ((($130)) + 1|0);
   $4 = $131;
   $132 = $8;
   $133 = $132&255;
   $134 = (_tolower($133)|0);
   $135 = $134&255;
   $136 = $5;
   $137 = ((($136)) + 1|0);
   $5 = $137;
   HEAP8[$136>>0] = $135;
  }
  $138 = $5;
  HEAP8[$138>>0] = 0;
  $139 = $8;
  $140 = $139&255;
  $141 = ($140|0)==(0);
  if ($141) {
   $142 = $14;
   $143 = (_strcmp($142,25529)|0);
   $144 = ($143|0)==(0);
   if ($144) {
    label = 37;
    break;
   } else {
    continue;
   }
  } else {
   $147 = $5;
   $148 = ((($147)) + 1|0);
   $5 = $148;
   HEAP8[$147>>0] = 124;
   continue;
  }
 }
 if ((label|0) == 25) {
  $100 = $6;
  $101 = ($100|0)!=(0|0);
  if ($101) {
   $102 = $6;
   $103 = $4;
   (__Z7utf8_inPiPKc($102,$103)|0);
  }
  $104 = $5;
  $105 = ((($104)) + 1|0);
  $5 = $105;
  HEAP8[$104>>0] = 0;
  $106 = $4;
  $107 = ((($106)) + 1|0);
  $3 = $107;
  $151 = $3;
  STACKTOP = sp;return ($151|0);
 }
 else if ((label|0) == 37) {
  $145 = $14;
  HEAP8[$145>>0] = 0;
  $146 = $4;
  $3 = $146;
  $151 = $3;
  STACKTOP = sp;return ($151|0);
 }
 else if ((label|0) == 39) {
  $149 = $5;
  HEAP8[$149>>0] = 0;
  $150 = $4;
  $3 = $150;
  $151 = $3;
  STACKTOP = sp;return ($151|0);
 }
 return (0)|0;
}
function __Z14DecodePhonemesPKcPc($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $vararg_buffer = sp;
 $2 = $0;
 $3 = $1;
 $8 = $3;
 (_sprintf($8,17896,$vararg_buffer)|0);
 L1: while(1) {
  $9 = $2;
  $10 = ((($9)) + 1|0);
  $2 = $10;
  $11 = HEAP8[$9>>0]|0;
  $4 = $11;
  $12 = $11&255;
  $13 = ($12|0)>(0);
  if (!($13)) {
   break;
  }
  $14 = $4;
  $15 = $14&255;
  $16 = ($15|0)==(255);
  if ($16) {
   continue;
  }
  $17 = $4;
  $18 = $17&255;
  $19 = (45008 + ($18<<2)|0);
  $20 = HEAP32[$19>>2]|0;
  $7 = $20;
  $21 = ($20|0)==(0|0);
  if ($21) {
   continue;
  }
  $22 = $7;
  $23 = ((($22)) + 11|0);
  $24 = HEAP8[$23>>0]|0;
  $25 = $24&255;
  $26 = ($25|0)==(1);
  if ($26) {
   $27 = $7;
   $28 = ((($27)) + 14|0);
   $29 = HEAP8[$28>>0]|0;
   $30 = $29&255;
   $31 = ($30|0)<=(4);
   if ($31) {
    $32 = $7;
    $33 = ((($32)) + 8|0);
    $34 = HEAP16[$33>>1]|0;
    $35 = $34&65535;
    $36 = ($35|0)==(0);
    if ($36) {
     $37 = $7;
     $38 = ((($37)) + 14|0);
     $39 = HEAP8[$38>>0]|0;
     $40 = $39&255;
     $41 = ($40|0)>(1);
     if (!($41)) {
      continue;
     }
     $42 = $7;
     $43 = ((($42)) + 14|0);
     $44 = HEAP8[$43>>0]|0;
     $45 = $44&255;
     $46 = HEAP32[199]|0;
     $47 = (($46) + ($45)|0);
     $48 = HEAP8[$47>>0]|0;
     $49 = $3;
     $50 = ((($49)) + 1|0);
     $3 = $50;
     HEAP8[$49>>0] = $48;
     continue;
    }
   }
  }
  $51 = $7;
  $52 = HEAP32[$51>>2]|0;
  $6 = $52;
  while(1) {
   $53 = $6;
   $54 = $53 & 255;
   $55 = $54&255;
   $5 = $55;
   $56 = $55&255;
   $57 = ($56|0)!=(0);
   if (!($57)) {
    break;
   }
   $58 = $5;
   $59 = $3;
   $60 = ((($59)) + 1|0);
   $3 = $60;
   HEAP8[$59>>0] = $58;
   $61 = $6;
   $62 = $61 >>> 8;
   $6 = $62;
  }
  $63 = $4;
  $64 = $63&255;
  $65 = ($64|0)==(21);
  if (!($65)) {
   continue;
  }
  while(1) {
   $66 = $2;
   $67 = HEAP8[$66>>0]|0;
   $68 = $67 << 24 >> 24;
   $69 = (_isalpha($68)|0);
   $70 = ($69|0)!=(0);
   if (!($70)) {
    continue L1;
   }
   $71 = $2;
   $72 = ((($71)) + 1|0);
   $2 = $72;
   $73 = HEAP8[$71>>0]|0;
   $74 = $3;
   $75 = ((($74)) + 1|0);
   $3 = $75;
   HEAP8[$74>>0] = $73;
  }
 }
 $76 = $3;
 HEAP8[$76>>0] = 0;
 STACKTOP = sp;return;
}
function __Z15WritePhMnemonicPcP11PHONEME_TABP12PHONEME_LISTiPi($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0;
 var $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond = 0, $or$cond3 = 0;
 var $or$cond5 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 208|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(208|0);
 $vararg_buffer = sp;
 $17 = sp + 8|0;
 $6 = $0;
 $7 = $1;
 $8 = $2;
 $9 = $3;
 $10 = $4;
 $15 = 0;
 $18 = $7;
 $19 = ((($18)) + 10|0);
 $20 = HEAP8[$19>>0]|0;
 $21 = $20&255;
 $22 = ($21|0)==(15);
 if ($22) {
  $23 = $6;
  HEAP8[$23>>0] = 0;
  $24 = $6;
  $5 = $24;
  $142 = $5;
  STACKTOP = sp;return ($142|0);
 }
 $25 = $7;
 $26 = ((($25)) + 10|0);
 $27 = HEAP8[$26>>0]|0;
 $28 = $27&255;
 $29 = ($28|0)==(21);
 if ($29) {
  $30 = $8;
  $31 = ((($30)) + 7|0);
  $32 = HEAP8[$31>>0]|0;
  $33 = $32&255;
  $34 = (46048 + (($33*48)|0)|0);
  $16 = $34;
  $35 = $6;
  $36 = $16;
  HEAP32[$vararg_buffer>>2] = $36;
  (_sprintf($35,17908,$vararg_buffer)|0);
  $37 = $6;
  $38 = $6;
  $39 = (_strlen($38)|0);
  $40 = (($37) + ($39)|0);
  $5 = $40;
  $142 = $5;
  STACKTOP = sp;return ($142|0);
 }
 $41 = $9;
 $42 = ($41|0)!=(0);
 if ($42) {
  $43 = ((($17)) + 132|0);
  HEAP8[$43>>0] = 0;
  $44 = $8;
  $45 = ($44|0)==(0|0);
  if ($45) {
   $46 = $7;
   $47 = ((($46)) + 10|0);
   $48 = HEAP8[$47>>0]|0;
   $49 = $48&255;
   __Z17InterpretPhoneme2iP12PHONEME_DATA($49,$17);
  } else {
   $50 = $8;
   __Z16InterpretPhonemeP10TranslatoriP12PHONEME_LISTP12PHONEME_DATAP12WORD_PH_DATA(0,0,$50,$17,0);
  }
  $51 = ((($17)) + 132|0);
  $16 = $51;
  $52 = $16;
  $53 = HEAP8[$52>>0]|0;
  $54 = $53 << 24 >> 24;
  $55 = ($54|0)==(32);
  if ($55) {
   $56 = $6;
   HEAP8[$56>>0] = 0;
   $57 = $6;
   $5 = $57;
   $142 = $5;
   STACKTOP = sp;return ($142|0);
  }
  $58 = $16;
  $59 = HEAP8[$58>>0]|0;
  $60 = $59 << 24 >> 24;
  $61 = ($60|0)!=(0);
  if ($61) {
   $62 = $16;
   $63 = HEAP8[$62>>0]|0;
   $64 = $63 << 24 >> 24;
   $65 = $64 & 255;
   $66 = ($65|0)<(32);
   if ($66) {
    $67 = $10;
    $68 = ($67|0)!=(0|0);
    if ($68) {
     $69 = $16;
     $70 = HEAP8[$69>>0]|0;
     $71 = $70 << 24 >> 24;
     $72 = $10;
     HEAP32[$72>>2] = $71;
    }
    $73 = $16;
    $74 = ((($73)) + 1|0);
    $16 = $74;
   }
  }
  $75 = $16;
  $76 = (_strlen($75)|0);
  $13 = $76;
  $77 = $13;
  $78 = ($77|0)>(0);
  if ($78) {
   $79 = $6;
   $80 = $16;
   (_strcpy($79,$80)|0);
   $81 = $13;
   $82 = $6;
   $83 = (($82) + ($81)|0);
   $6 = $83;
   $84 = $6;
   HEAP8[$84>>0] = 0;
   $85 = $6;
   $5 = $85;
   $142 = $5;
   STACKTOP = sp;return ($142|0);
  }
 }
 $14 = 1;
 $86 = $7;
 $87 = HEAP32[$86>>2]|0;
 $12 = $87;
 L29: while(1) {
  $88 = $12;
  $89 = $88 & 255;
  $11 = $89;
  $90 = ($89|0)!=(0);
  if (!($90)) {
   break;
  }
  $91 = $11;
  $92 = ($91|0)==(47);
  $93 = HEAP32[19163]|0;
  $94 = ($93|0)==(0);
  $or$cond = $92 & $94;
  if ($or$cond) {
   break;
  }
  $95 = $9;
  $96 = ($95|0)!=(0);
  do {
   if ($96) {
    $97 = $14;
    $98 = ($97|0)!=(0);
    $99 = $11;
    $100 = ($99|0)==(95);
    $or$cond3 = $98 & $100;
    if ($or$cond3) {
     break L29;
    }
    $101 = $11;
    $102 = ($101|0)==(35);
    if ($102) {
     $103 = $7;
     $104 = ((($103)) + 11|0);
     $105 = HEAP8[$104>>0]|0;
     $106 = $105&255;
     $107 = ($106|0)==(2);
     if ($107) {
      break L29;
     }
    }
    $108 = $14;
    $109 = ($108|0)!=(0);
    if (!($109)) {
     $110 = $11;
     $111 = (__Z9IsDigit09j($110)|0);
     $112 = ($111|0)!=(0);
     if ($112) {
      break;
     }
    }
    $113 = $11;
    $114 = ($113|0)>=(32);
    $115 = $11;
    $116 = ($115|0)<(128);
    $or$cond5 = $114 & $116;
    if ($or$cond5) {
     $117 = $11;
     $118 = (($117) - 32)|0;
     $119 = (6292 + ($118<<1)|0);
     $120 = HEAP16[$119>>1]|0;
     $121 = $120&65535;
     $11 = $121;
    }
    $122 = $11;
    $123 = $15;
    $124 = $6;
    $125 = (($124) + ($123)|0);
    $126 = (__Z8utf8_outjPc($122,$125)|0);
    $127 = $15;
    $128 = (($127) + ($126))|0;
    $15 = $128;
    label = 31;
   } else {
    $129 = $11;
    $130 = $129&255;
    $131 = $15;
    $132 = (($131) + 1)|0;
    $15 = $132;
    $133 = $6;
    $134 = (($133) + ($131)|0);
    HEAP8[$134>>0] = $130;
    label = 31;
   }
  } while(0);
  if ((label|0) == 31) {
   label = 0;
   $14 = 0;
  }
  $135 = $12;
  $136 = $135 >> 8;
  $12 = $136;
 }
 $137 = $15;
 $138 = $6;
 $139 = (($138) + ($137)|0);
 $6 = $139;
 $140 = $6;
 HEAP8[$140>>0] = 0;
 $141 = $6;
 $5 = $141;
 $142 = $5;
 STACKTOP = sp;return ($142|0);
}
function __Z26GetTranslatedPhonemeStringi($0) {
 $0 = $0|0;
 var $$ = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0;
 var $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0;
 var $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0;
 var $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond = 0, $or$cond3 = 0, $or$cond5 = 0, $or$cond7 = 0, $or$cond9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(128|0);
 $7 = sp + 32|0;
 $11 = sp + 16|0;
 $15 = sp + 90|0;
 $16 = sp + 60|0;
 $2 = $0;
 $5 = 0;
 $18 = HEAP32[10459]|0;
 $19 = ($18|0)==(0|0);
 if ($19) {
  HEAP32[10460] = 500;
  $20 = HEAP32[10459]|0;
  $21 = HEAP32[10460]|0;
  $22 = (_realloc($20,$21)|0);
  HEAP32[10459] = $22;
  $23 = ($22|0)==(0|0);
  if ($23) {
   HEAP32[10460] = 0;
   $1 = 122378;
   $207 = $1;
   STACKTOP = sp;return ($207|0);
  }
 }
 $24 = $2;
 $25 = $24 & 2;
 $12 = $25;
 $26 = $2;
 $27 = $26 & 128;
 $28 = ($27|0)!=(0);
 $29 = $2;
 $30 = $29 >> 8;
 if ($28) {
  $13 = $30;
  $14 = 0;
 } else {
  $14 = $30;
  $13 = 0;
 }
 $3 = 1;
 while(1) {
  $31 = $3;
  $32 = HEAP32[12771]|0;
  $33 = (($32) - 2)|0;
  $34 = ($31|0)<($33|0);
  if (!($34)) {
   label = 44;
   break;
  }
  $9 = $15;
  $35 = $3;
  $36 = (51088 + (($35*24)|0)|0);
  $17 = $36;
  $37 = $17;
  $38 = ((($37)) + 8|0);
  $39 = HEAP32[$38>>2]|0;
  $40 = $17;
  $41 = $12;
  (__Z15WritePhMnemonicPcP11PHONEME_TABP12PHONEME_LISTiPi($16,$39,$40,$41,$11)|0);
  $42 = $17;
  $43 = ((($42)) + 21|0);
  $44 = HEAP8[$43>>0]|0;
  $45 = ($44<<24>>24)!=(0);
  if ($45) {
   $46 = $9;
   $47 = ((($46)) + 1|0);
   $9 = $47;
   HEAP8[$46>>0] = 32;
  }
  $48 = $17;
  $49 = ((($48)) + 21|0);
  $50 = HEAP8[$49>>0]|0;
  $51 = ($50<<24>>24)==(0);
  $52 = $14;
  $53 = ($52|0)==(32);
  $or$cond = $51 | $53;
  if ($or$cond) {
   $54 = $14;
   $55 = ($54|0)!=(0);
   $56 = $3;
   $57 = ($56|0)>(1);
   $or$cond3 = $55 & $57;
   if ($or$cond3) {
    (__Z7utf8_inPiPKc($7,$16)|0);
    $58 = HEAP32[$7>>2]|0;
    $59 = ($58|0)<(688);
    $60 = HEAP32[$7>>2]|0;
    $61 = ($60|0)>(879);
    $or$cond5 = $59 | $61;
    if ($or$cond5) {
     $62 = $14;
     $63 = $9;
     $64 = (__Z8utf8_outjPc($62,$63)|0);
     $65 = $9;
     $66 = (($65) + ($64)|0);
     $9 = $66;
    }
   }
  }
  $67 = $17;
  $68 = HEAP16[$67>>1]|0;
  $69 = $68&65535;
  $70 = $69 & 4;
  $71 = ($70|0)!=(0);
  if ($71) {
   $72 = $17;
   $73 = ((($72)) + 3|0);
   $74 = HEAP8[$73>>0]|0;
   $75 = $74&255;
   $6 = $75;
   $76 = ($75|0)>(1);
   if ($76) {
    HEAP32[$7>>2] = 0;
    $77 = $6;
    $78 = ($77|0)>(5);
    if ($78) {
     $6 = 5;
    }
    $79 = $12;
    $80 = ($79|0)!=(0);
    if ($80) {
     HEAP32[$7>>2] = 716;
     $81 = $6;
     $82 = ($81|0)>(3);
     $$ = $82 ? 712 : 716;
     HEAP32[$7>>2] = $$;
    } else {
     $83 = $6;
     $84 = HEAP32[200]|0;
     $85 = (($84) + ($83)|0);
     $86 = HEAP8[$85>>0]|0;
     $87 = $86 << 24 >> 24;
     HEAP32[$7>>2] = $87;
    }
    $88 = HEAP32[$7>>2]|0;
    $89 = ($88|0)!=(0);
    if ($89) {
     $90 = HEAP32[$7>>2]|0;
     $91 = $9;
     $92 = (__Z8utf8_outjPc($90,$91)|0);
     $93 = $9;
     $94 = (($93) + ($92)|0);
     $9 = $94;
    }
   }
  }
  HEAP32[$11>>2] = 0;
  $10 = 0;
  $8 = $16;
  while(1) {
   $95 = $8;
   $96 = HEAP8[$95>>0]|0;
   $97 = $96 << 24 >> 24;
   $98 = ($97|0)!=(0);
   if (!($98)) {
    break;
   }
   $99 = $8;
   $100 = (__Z7utf8_inPiPKc($7,$99)|0);
   $101 = $8;
   $102 = (($101) + ($100)|0);
   $8 = $102;
   $103 = $13;
   $104 = ($103|0)!=(0);
   $105 = $10;
   $106 = ($105|0)>(0);
   $or$cond9 = $104 & $106;
   if ($or$cond9) {
    $107 = HEAP32[$11>>2]|0;
    $108 = $10;
    $109 = (($108) - 1)|0;
    $110 = 1 << $109;
    $111 = $107 & $110;
    $112 = ($111|0)!=(0);
    if (!($112)) {
     $113 = HEAP32[$7>>2]|0;
     $114 = ($113|0)<(688);
     $115 = HEAP32[$7>>2]|0;
     $116 = ($115|0)>(879);
     $or$cond7 = $114 | $116;
     if ($or$cond7) {
      $117 = HEAP32[$7>>2]|0;
      $118 = (__Z9iswalpha2i($117)|0);
      $119 = ($118|0)!=(0);
      if ($119) {
       $120 = $13;
       $121 = $9;
       $122 = (__Z8utf8_outjPc($120,$121)|0);
       $123 = $9;
       $124 = (($123) + ($122)|0);
       $9 = $124;
      }
     }
    }
   }
   $125 = HEAP32[$7>>2]|0;
   $126 = $9;
   $127 = (__Z8utf8_outjPc($125,$126)|0);
   $128 = $9;
   $129 = (($128) + ($127)|0);
   $9 = $129;
   $130 = $10;
   $131 = (($130) + 1)|0;
   $10 = $131;
  }
  $132 = $17;
  $133 = ((($132)) + 8|0);
  $134 = HEAP32[$133>>2]|0;
  $135 = ((($134)) + 10|0);
  $136 = HEAP8[$135>>0]|0;
  $137 = $136&255;
  $138 = ($137|0)!=(21);
  if ($138) {
   $139 = $17;
   $140 = HEAP16[$139>>1]|0;
   $141 = $140&65535;
   $142 = $141 & 8;
   $143 = ($142|0)!=(0);
   if ($143) {
    $144 = $9;
    $145 = HEAP32[(45056)>>2]|0;
    $146 = $12;
    $147 = (__Z15WritePhMnemonicPcP11PHONEME_TABP12PHONEME_LISTiPi($144,$145,0,$146,0)|0);
    $9 = $147;
   }
   $148 = $17;
   $149 = HEAP16[$148>>1]|0;
   $150 = $149&65535;
   $151 = $150 & 4;
   $152 = ($151|0)!=(0);
   if ($152) {
    $153 = $17;
    $154 = ((($153)) + 17|0);
    $155 = HEAP8[$154>>0]|0;
    $156 = $155&255;
    $157 = ($156|0)!=(2);
    if ($157) {
     $158 = $9;
     $159 = HEAP32[(45088)>>2]|0;
     $160 = $12;
     $161 = (__Z15WritePhMnemonicPcP11PHONEME_TABP12PHONEME_LISTiPi($158,$159,0,$160,0)|0);
     $9 = $161;
    }
   }
   $162 = $17;
   $163 = ((($162)) + 7|0);
   $164 = HEAP8[$163>>0]|0;
   $165 = $164&255;
   $166 = ($165|0)>(0);
   if ($166) {
    $167 = $9;
    $168 = $17;
    $169 = ((($168)) + 7|0);
    $170 = HEAP8[$169>>0]|0;
    $171 = $170&255;
    $172 = (45008 + ($171<<2)|0);
    $173 = HEAP32[$172>>2]|0;
    $174 = $12;
    $175 = (__Z15WritePhMnemonicPcP11PHONEME_TABP12PHONEME_LISTiPi($167,$173,0,$174,0)|0);
    $9 = $175;
   }
  }
  $176 = $9;
  $177 = $176;
  $178 = $15;
  $179 = (($177) - ($178))|0;
  $4 = $179;
  $180 = $5;
  $181 = $4;
  $182 = (($180) + ($181))|0;
  $183 = HEAP32[10460]|0;
  $184 = ($182>>>0)>=($183>>>0);
  if ($184) {
   $185 = $5;
   $186 = $4;
   $187 = (($185) + ($186))|0;
   $188 = (($187) + 500)|0;
   HEAP32[10460] = $188;
   $189 = HEAP32[10459]|0;
   $190 = HEAP32[10460]|0;
   $191 = (_realloc($189,$190)|0);
   HEAP32[10459] = $191;
   $192 = ($191|0)==(0|0);
   if ($192) {
    label = 42;
    break;
   }
  }
  $193 = $4;
  $194 = (($15) + ($193)|0);
  HEAP8[$194>>0] = 0;
  $195 = $5;
  $196 = HEAP32[10459]|0;
  $197 = (($196) + ($195)|0);
  (_strcpy($197,$15)|0);
  $198 = $4;
  $199 = $5;
  $200 = (($199) + ($198))|0;
  $5 = $200;
  $201 = $3;
  $202 = (($201) + 1)|0;
  $3 = $202;
 }
 if ((label|0) == 42) {
  HEAP32[10460] = 0;
  $1 = 122378;
  $207 = $1;
  STACKTOP = sp;return ($207|0);
 }
 else if ((label|0) == 44) {
  $203 = $5;
  $204 = HEAP32[10459]|0;
  $205 = (($204) + ($203)|0);
  HEAP8[$205>>0] = 0;
  $206 = HEAP32[10459]|0;
  $1 = $206;
  $207 = $1;
  STACKTOP = sp;return ($207|0);
 }
 return (0)|0;
}
function __Z7IsVowelP10Translatori($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $4 = $2;
 $5 = $3;
 $6 = (__ZL8IsLetterP10Translatorii($4,$5,7)|0);
 STACKTOP = sp;return ($6|0);
}
function __ZL8IsLetterP10Translatorii($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond3 = 0, $or$cond5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $8 = $0;
 $9 = $1;
 $10 = $2;
 $12 = $10;
 $13 = $8;
 $14 = ((($13)) + 724|0);
 $15 = (($14) + ($12<<2)|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = ($16|0)!=(0|0);
 $18 = $10;
 if ($17) {
  $19 = $8;
  $20 = ((($19)) + 724|0);
  $21 = (($20) + ($18<<2)|0);
  $22 = HEAP32[$21>>2]|0;
  $23 = $9;
  $5 = $22;
  $6 = $23;
  $24 = $5;
  $25 = $6;
  $3 = $24;
  $4 = $25;
  $26 = $3;
  $27 = $4;
  $28 = (_wcschr($26,$27)|0);
  $29 = ($28|0)!=(0|0);
  if ($29) {
   $7 = 1;
   $73 = $7;
   STACKTOP = sp;return ($73|0);
  } else {
   $7 = 0;
   $73 = $7;
   STACKTOP = sp;return ($73|0);
  }
 }
 $30 = ($18|0)>(7);
 if ($30) {
  $7 = 0;
  $73 = $7;
  STACKTOP = sp;return ($73|0);
 }
 $31 = $8;
 $32 = ((($31)) + 720|0);
 $33 = HEAP32[$32>>2]|0;
 $34 = ($33|0)>(0);
 $35 = $9;
 do {
  if ($34) {
   $36 = $8;
   $37 = ((($36)) + 720|0);
   $38 = HEAP32[$37>>2]|0;
   $39 = (($35) - ($38))|0;
   $11 = $39;
   $40 = ($39|0)>(0);
   $41 = $11;
   $42 = ($41|0)<(256);
   $or$cond = $40 & $42;
   if ($or$cond) {
    $43 = $11;
    $9 = $43;
    break;
   }
   $7 = 0;
   $73 = $7;
   STACKTOP = sp;return ($73|0);
  } else {
   $44 = ($35|0)>=(192);
   $45 = $9;
   $46 = ($45|0)<(606);
   $or$cond3 = $44 & $46;
   if ($or$cond3) {
    $47 = $9;
    $48 = (($47) - 192)|0;
    $49 = (17920 + ($48)|0);
    $50 = HEAP8[$49>>0]|0;
    $51 = $50&255;
    $52 = $8;
    $53 = ((($52)) + 464|0);
    $54 = (($53) + ($51)|0);
    $55 = HEAP8[$54>>0]|0;
    $56 = $55&255;
    $57 = $10;
    $58 = 1 << $57;
    $59 = $56 & $58;
    $7 = $59;
    $73 = $7;
    STACKTOP = sp;return ($73|0);
   }
  }
 } while(0);
 $60 = $9;
 $61 = ($60|0)>=(0);
 $62 = $9;
 $63 = ($62|0)<(256);
 $or$cond5 = $61 & $63;
 if ($or$cond5) {
  $64 = $9;
  $65 = $8;
  $66 = ((($65)) + 464|0);
  $67 = (($66) + ($64)|0);
  $68 = HEAP8[$67>>0]|0;
  $69 = $68&255;
  $70 = $10;
  $71 = 1 << $70;
  $72 = $69 & $71;
  $7 = $72;
  $73 = $7;
  STACKTOP = sp;return ($73|0);
 } else {
  $7 = 0;
  $73 = $7;
  STACKTOP = sp;return ($73|0);
 }
 return (0)|0;
}
function __Z14UnpronouncableP10TranslatorPci($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0;
 var $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond = 0, $or$cond3 = 0, $or$cond5 = 0, $or$cond7 = 0, $or$cond9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $7 = sp + 20|0;
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $8 = 0;
 $9 = 9;
 $13 = $5;
 (__Z7utf8_inPiPKc($7,$13)|0);
 $14 = $4;
 $15 = ((($14)) + 720|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = ($16|0)>(0);
 $18 = HEAP32[$7>>2]|0;
 $19 = ($18|0)<(577);
 $or$cond = $17 & $19;
 if ($or$cond) {
  $3 = 0;
  $106 = $3;
  STACKTOP = sp;return ($106|0);
 }
 $20 = HEAP32[$7>>2]|0;
 $21 = (__Z16AlphabetFromChari($20)|0);
 $12 = $21;
 $22 = ($21|0)!=(0|0);
 if ($22) {
  $23 = $12;
  $24 = ((($23)) + 4|0);
  $25 = HEAP32[$24>>2]|0;
  $26 = $4;
  $27 = ((($26)) + 720|0);
  $28 = HEAP32[$27>>2]|0;
  $29 = ($25|0)!=($28|0);
  if ($29) {
   $3 = 0;
   $106 = $3;
   STACKTOP = sp;return ($106|0);
  }
 }
 $30 = $4;
 $31 = ((($30)) + 24|0);
 $32 = ((($31)) + 20|0);
 $33 = HEAP32[$32>>2]|0;
 $34 = ($33|0)==(1);
 if ($34) {
  $3 = 0;
  $106 = $3;
  STACKTOP = sp;return ($106|0);
 }
 $35 = $5;
 $36 = HEAP8[$35>>0]|0;
 $37 = $36 << 24 >> 24;
 HEAP32[$7>>2] = $37;
 $38 = ($37|0)==(32);
 $39 = HEAP32[$7>>2]|0;
 $40 = ($39|0)==(0);
 $or$cond3 = $38 | $40;
 $41 = HEAP32[$7>>2]|0;
 $42 = ($41|0)==(39);
 $or$cond5 = $or$cond3 | $42;
 if ($or$cond5) {
  $3 = 0;
  $106 = $3;
  STACKTOP = sp;return ($106|0);
 }
 $10 = 0;
 $11 = 0;
 while(1) {
  $43 = $10;
  $44 = $5;
  $45 = (($44) + ($43)|0);
  $46 = (__Z7utf8_inPiPKc($7,$45)|0);
  $47 = $10;
  $48 = (($47) + ($46))|0;
  $10 = $48;
  $49 = HEAP32[$7>>2]|0;
  $50 = ($49|0)==(0);
  $51 = HEAP32[$7>>2]|0;
  $52 = ($51|0)==(32);
  $or$cond7 = $50 | $52;
  if ($or$cond7) {
   break;
  }
  $53 = HEAP32[$7>>2]|0;
  $54 = ($53|0)==(39);
  if ($54) {
   $55 = $11;
   $56 = ($55|0)>(1);
   $57 = $6;
   $58 = ($57|0)>(0);
   $or$cond9 = $56 | $58;
   if ($or$cond9) {
    break;
   }
  }
  $59 = $11;
  $60 = ($59|0)==(0);
  if ($60) {
   $61 = HEAP32[$7>>2]|0;
   $8 = $61;
  }
  $62 = HEAP32[$7>>2]|0;
  $63 = ($62|0)==(39);
  if ($63) {
   $64 = $4;
   $65 = ((($64)) + 24|0);
   $66 = ((($65)) + 20|0);
   $67 = HEAP32[$66>>2]|0;
   $68 = ($67|0)==(3);
   if (!($68)) {
    label = 18;
   }
  } else {
   label = 18;
  }
  if ((label|0) == 18) {
   label = 0;
   $69 = $11;
   $70 = (($69) + 1)|0;
   $11 = $70;
  }
  $71 = $4;
  $72 = HEAP32[$7>>2]|0;
  $73 = (__Z7IsVowelP10Translatori($71,$72)|0);
  $74 = ($73|0)!=(0);
  if ($74) {
   label = 20;
   break;
  }
  $76 = HEAP32[$7>>2]|0;
  $77 = ($76|0)!=(39);
  if (!($77)) {
   continue;
  }
  $78 = HEAP32[$7>>2]|0;
  $79 = (__Z9iswalpha2i($78)|0);
  $80 = ($79|0)!=(0);
  if (!($80)) {
   label = 23;
   break;
  }
 }
 if ((label|0) == 20) {
  $75 = $11;
  $9 = $75;
 }
 else if ((label|0) == 23) {
  $3 = 0;
  $106 = $3;
  STACKTOP = sp;return ($106|0);
 }
 $81 = $9;
 $82 = ($81|0)>(2);
 if ($82) {
  $83 = $4;
  $84 = ((($83)) + 24|0);
  $85 = ((($84)) + 20|0);
  $86 = HEAP32[$85>>2]|0;
  $87 = ($86|0)==(2);
  if ($87) {
   $88 = $4;
   $89 = $5;
   $90 = (__ZL15Unpronouncable2P10TranslatorPc($88,$89)|0);
   $3 = $90;
   $106 = $3;
   STACKTOP = sp;return ($106|0);
  }
 }
 $91 = $8;
 $92 = $4;
 $93 = ((($92)) + 24|0);
 $94 = ((($93)) + 20|0);
 $95 = HEAP32[$94>>2]|0;
 $96 = ($91|0)==($95|0);
 if ($96) {
  $97 = $9;
  $98 = (($97) + -1)|0;
  $9 = $98;
 }
 $99 = $9;
 $100 = $4;
 $101 = ((($100)) + 268|0);
 $102 = HEAP8[$101>>0]|0;
 $103 = $102 << 24 >> 24;
 $104 = (($103) + 1)|0;
 $105 = ($99|0)>($104|0);
 if ($105) {
  $3 = 1;
  $106 = $3;
  STACKTOP = sp;return ($106|0);
 } else {
  $3 = 0;
  $106 = $3;
  STACKTOP = sp;return ($106|0);
 }
 return (0)|0;
}
function __ZL15Unpronouncable2P10TranslatorPc($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 224|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(224|0);
 $7 = sp + 24|0;
 $3 = $0;
 $4 = $1;
 HEAP8[$7>>0] = 0;
 $8 = $4;
 $9 = ((($8)) + -1|0);
 $10 = HEAP8[$9>>0]|0;
 $11 = $10 << 24 >> 24;
 $5 = $11;
 $12 = $4;
 $13 = ((($12)) + -1|0);
 HEAP8[$13>>0] = 32;
 $14 = $3;
 $15 = $4;
 $16 = (__Z14TranslateRulesP10TranslatorPcS1_iS1_iPj($14,$15,$7,200,0,-2147483648,0)|0);
 $6 = $16;
 $17 = $5;
 $18 = $17&255;
 $19 = $4;
 $20 = ((($19)) + -1|0);
 HEAP8[$20>>0] = $18;
 $21 = $6;
 $22 = ($21|0)==(0);
 if (!($22)) {
  $23 = $6;
  $24 = $23 & 32768;
  $25 = ($24|0)!=(0);
  if (!($25)) {
   $2 = 0;
   $26 = $2;
   STACKTOP = sp;return ($26|0);
  }
 }
 $2 = 1;
 $26 = $2;
 STACKTOP = sp;return ($26|0);
}
function __Z14TranslateRulesP10TranslatorPcS1_iS1_iPj($0,$1,$2,$3,$4,$5,$6) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 var $$old = 0, $$old14 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0;
 var $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0;
 var $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0;
 var $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0;
 var $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0;
 var $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0;
 var $298 = 0, $299 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0;
 var $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0;
 var $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0;
 var $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0;
 var $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0;
 var $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0;
 var $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0;
 var $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0;
 var $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0;
 var $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0;
 var $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0;
 var $498 = 0, $499 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0;
 var $98 = 0, $99 = 0, $or$cond = 0, $or$cond11 = 0, $or$cond13 = 0, $or$cond15 = 0, $or$cond18 = 0, $or$cond21 = 0, $or$cond5 = 0, $or$cond7 = 0, $or$cond9 = 0, $vararg_buffer = 0, $vararg_buffer22 = 0, $vararg_buffer25 = 0, $vararg_buffer29 = 0, $vararg_buffer33 = 0, $vararg_buffer37 = 0, $vararg_ptr28 = 0, $vararg_ptr32 = 0, $vararg_ptr36 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 560|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(560|0);
 $vararg_buffer37 = sp + 40|0;
 $vararg_buffer33 = sp + 32|0;
 $vararg_buffer29 = sp + 24|0;
 $vararg_buffer25 = sp + 16|0;
 $vararg_buffer22 = sp + 8|0;
 $vararg_buffer = sp;
 $18 = sp + 132|0;
 $20 = sp + 124|0;
 $25 = sp + 104|0;
 $29 = sp + 88|0;
 $32 = sp + 64|0;
 $33 = sp + 48|0;
 $34 = sp + 504|0;
 $35 = sp + 344|0;
 $36 = sp + 224|0;
 $38 = sp + 216|0;
 $39 = sp + 176|0;
 $8 = $0;
 $9 = $1;
 $10 = $2;
 $11 = $3;
 $12 = $4;
 $13 = $5;
 $14 = $6;
 HEAP32[$18>>2] = 0;
 $26 = 0;
 $28 = 0;
 $31 = 0;
 $40 = $8;
 $41 = ((($40)) + 804|0);
 $42 = HEAP32[$41>>2]|0;
 $43 = ($42|0)==(0|0);
 if ($43) {
  $7 = 0;
  $506 = $7;
  STACKTOP = sp;return ($506|0);
 }
 $44 = $14;
 $45 = ($44|0)!=(0|0);
 if ($45) {
  $46 = $14;
  $47 = HEAP32[$46>>2]|0;
  $31 = $47;
 }
 $27 = 0;
 $$old = $27;
 $$old14 = ($$old|0)<(159);
 if ($$old14) {
  while(1) {
   $48 = $27;
   $49 = $9;
   $50 = (($49) + ($48)|0);
   $51 = HEAP8[$50>>0]|0;
   $15 = $51;
   $52 = $15;
   $53 = $27;
   $54 = (($53) + 1)|0;
   $27 = $54;
   $55 = (($35) + ($53)|0);
   HEAP8[$55>>0] = $52;
   $56 = $15;
   $57 = $56&255;
   $58 = ($57|0)!=(0);
   $59 = $27;
   $60 = ($59|0)<(159);
   $or$cond15 = $58 & $60;
   if (!($or$cond15)) {
    break;
   }
  }
 }
 $61 = $27;
 $62 = (($35) + ($61)|0);
 HEAP8[$62>>0] = 0;
 $63 = HEAP32[19154]|0;
 $64 = $63 & 8;
 $65 = ($64|0)!=(0);
 do {
  if ($65) {
   $66 = $13;
   $67 = $66 & 268435456;
   $68 = ($67|0)==(0);
   if ($68) {
    $37 = 0;
    while(1) {
     $69 = $37;
     $70 = $9;
     $71 = (($70) + ($69)|0);
     $72 = HEAP8[$71>>0]|0;
     $15 = $72;
     $73 = $72&255;
     $74 = ($73|0)!=(32);
     if (!($74)) {
      break;
     }
     $75 = $15;
     $76 = $75&255;
     $77 = ($76|0)!=(0);
     $78 = $37;
     $79 = ($78>>>0)<(119);
     $or$cond18 = $77 & $79;
     if (!($or$cond18)) {
      break;
     }
     $80 = $15;
     $81 = $37;
     $82 = (($36) + ($81)|0);
     HEAP8[$82>>0] = $80;
     $83 = $37;
     $84 = (($83) + 1)|0;
     $37 = $84;
    }
    $85 = $37;
    $86 = (($36) + ($85)|0);
    HEAP8[$86>>0] = 0;
    $87 = $13;
    $88 = $87 & -2147483648;
    $89 = ($88|0)!=(0);
    $90 = HEAP32[19151]|0;
    if ($89) {
     HEAP32[$vararg_buffer>>2] = $36;
     (_fprintf($90,18526,$vararg_buffer)|0);
     break;
    } else {
     HEAP32[$vararg_buffer22>>2] = $36;
     (_fprintf($90,18548,$vararg_buffer22)|0);
     break;
    }
   }
  }
 } while(0);
 $91 = $9;
 HEAP32[$29>>2] = $91;
 $92 = $8;
 $93 = ((($92)) + 8328|0);
 HEAP32[$93>>2] = 0;
 $94 = $8;
 $95 = ((($94)) + 8332|0);
 HEAP32[$95>>2] = 0;
 $96 = $12;
 $97 = ($96|0)!=(0|0);
 if ($97) {
  $98 = $12;
  HEAP8[$98>>0] = 0;
 }
 L26: while(1) {
  $99 = HEAP32[$29>>2]|0;
  $100 = HEAP8[$99>>0]|0;
  $15 = $100;
  $101 = $100&255;
  $102 = ($101|0)!=(32);
  if (!($102)) {
   break;
  }
  $103 = $15;
  $104 = $103&255;
  $105 = ($104|0)!=(0);
  if (!($105)) {
   break;
  }
  $106 = HEAP32[$29>>2]|0;
  $107 = (__Z7utf8_inPiPKc($18,$106)|0);
  $19 = $107;
  $108 = HEAP32[$18>>2]|0;
  $109 = (__Z7IsAlphaj($108)|0);
  $110 = ($109|0)!=(0);
  if ($110) {
   $111 = $26;
   $112 = (($111) + 1)|0;
   $26 = $112;
  }
  $113 = $15;
  $114 = $113&255;
  $115 = $8;
  $116 = ((($115)) + 7788|0);
  $117 = (($116) + ($114)|0);
  $118 = HEAP8[$117>>0]|0;
  $119 = $118&255;
  $24 = $119;
  $120 = HEAP32[$18>>2]|0;
  $121 = (__Z7IsDigitj($120)|0);
  $122 = ($121|0)!=(0);
  if ($122) {
   $123 = $8;
   $124 = ((($123)) + 270|0);
   $125 = HEAP8[$124>>0]|0;
   $126 = $125 << 24 >> 24;
   $127 = ($126|0)!=(0);
   $128 = $26;
   $129 = ($128|0)!=(0);
   $or$cond = $127 & $129;
   if (!($or$cond)) {
    HEAP8[$38>>0] = 95;
    $130 = ((($38)) + 1|0);
    $131 = HEAP32[$29>>2]|0;
    $132 = $19;
    _memcpy(($130|0),($131|0),($132|0))|0;
    $133 = $19;
    $134 = (1 + ($133))|0;
    $135 = (($38) + ($134)|0);
    HEAP8[$135>>0] = 0;
    $136 = $8;
    (__Z6LookupP10TranslatorPKcPc($136,$38,$39)|0);
    $137 = $28;
    $138 = (($137) + 1)|0;
    $28 = $138;
    $139 = ($138>>>0)>=(2);
    if ($139) {
     (_strcat($39,18564)|0);
     $28 = 0;
    }
    $140 = $8;
    $141 = $10;
    $142 = $11;
    __Z14AppendPhonemesP10TranslatorPciPKc($140,$141,$142,$39);
    $143 = $19;
    $144 = HEAP32[$29>>2]|0;
    $145 = (($144) + ($143)|0);
    HEAP32[$29>>2] = $145;
    continue;
   }
  }
  $28 = 0;
  $21 = 0;
  $146 = HEAP32[$18>>2]|0;
  $147 = $8;
  $148 = ((($147)) + 720|0);
  $149 = HEAP32[$148>>2]|0;
  $150 = (($146) - ($149))|0;
  $27 = $150;
  $151 = ($150|0)>=(0);
  $152 = $27;
  $153 = ($152|0)<(128);
  $or$cond5 = $151 & $153;
  if ($or$cond5) {
   $154 = $27;
   $155 = $8;
   $156 = ((($155)) + 6312|0);
   $157 = (($156) + ($154<<2)|0);
   $158 = HEAP32[$157>>2]|0;
   $159 = ($158|0)!=(0|0);
   if ($159) {
    $160 = $8;
    $161 = $9;
    $162 = $19;
    $163 = $27;
    $164 = $8;
    $165 = ((($164)) + 6312|0);
    $166 = (($165) + ($163<<2)|0);
    $167 = HEAP32[$166>>2]|0;
    $168 = $13;
    $169 = $31;
    __ZL9MatchRuleP10TranslatorPPcS1_iS1_P11MatchRecordii($160,$29,$161,$162,$167,$32,$168,$169);
    $21 = 1;
   }
  }
  $170 = $21;
  $171 = ($170|0)==(0);
  $172 = $24;
  $173 = ($172|0)>(0);
  $or$cond7 = $171 & $173;
  L44: do {
   if ($or$cond7) {
    $174 = HEAP32[$29>>2]|0;
    $175 = ((($174)) + 1|0);
    $176 = HEAP8[$175>>0]|0;
    $16 = $176;
    $177 = $15;
    $178 = $177&255;
    $179 = $16;
    $180 = $179&255;
    $181 = $180 << 8;
    $182 = (($178) + ($181))|0;
    $17 = $182;
    $183 = $15;
    $184 = $183&255;
    $185 = $8;
    $186 = ((($185)) + 8044|0);
    $187 = (($186) + ($184)|0);
    $188 = HEAP8[$187>>0]|0;
    $189 = $188&255;
    $23 = $189;
    $190 = $23;
    $22 = $190;
    while(1) {
     $191 = $22;
     $192 = $23;
     $193 = $24;
     $194 = (($192) + ($193))|0;
     $195 = ($191|0)<($194|0);
     if (!($195)) {
      break L44;
     }
     $196 = $22;
     $197 = $8;
     $198 = ((($197)) + 7304|0);
     $199 = (($198) + ($196<<2)|0);
     $200 = HEAP32[$199>>2]|0;
     $201 = $17;
     $202 = ($200|0)==($201|0);
     if ($202) {
      $21 = 1;
      $203 = HEAP32[$29>>2]|0;
      HEAP32[$20>>2] = $203;
      $204 = $8;
      $205 = $9;
      $206 = $22;
      $207 = $8;
      $208 = ((($207)) + 6824|0);
      $209 = (($208) + ($206<<2)|0);
      $210 = HEAP32[$209>>2]|0;
      $211 = $13;
      $212 = $31;
      __ZL9MatchRuleP10TranslatorPPcS1_iS1_P11MatchRecordii($204,$20,$205,2,$210,$33,$211,$212);
      $213 = HEAP32[$33>>2]|0;
      $214 = ($213|0)>(0);
      if ($214) {
       $215 = HEAP32[$33>>2]|0;
       $216 = (($215) + 35)|0;
       HEAP32[$33>>2] = $216;
      }
      $217 = $8;
      $218 = $9;
      $219 = $15;
      $220 = $219&255;
      $221 = $8;
      $222 = ((($221)) + 5288|0);
      $223 = (($222) + ($220<<2)|0);
      $224 = HEAP32[$223>>2]|0;
      $225 = $13;
      $226 = $31;
      __ZL9MatchRuleP10TranslatorPPcS1_iS1_P11MatchRecordii($217,$29,$218,1,$224,$32,$225,$226);
      $227 = HEAP32[$33>>2]|0;
      $228 = HEAP32[$32>>2]|0;
      $229 = ($227|0)>=($228|0);
      if ($229) {
       ;HEAP32[$32>>2]=HEAP32[$33>>2]|0;HEAP32[$32+4>>2]=HEAP32[$33+4>>2]|0;HEAP32[$32+8>>2]=HEAP32[$33+8>>2]|0;HEAP32[$32+12>>2]=HEAP32[$33+12>>2]|0;
       $230 = HEAP32[$20>>2]|0;
       HEAP32[$29>>2] = $230;
      }
     }
     $231 = $22;
     $232 = (($231) + 1)|0;
     $22 = $232;
    }
   }
  } while(0);
  $233 = $21;
  $234 = ($233|0)!=(0);
  do {
   if (!($234)) {
    $235 = $15;
    $236 = $235&255;
    $237 = $8;
    $238 = ((($237)) + 5288|0);
    $239 = (($238) + ($236<<2)|0);
    $240 = HEAP32[$239>>2]|0;
    $241 = ($240|0)!=(0|0);
    $242 = $8;
    $243 = $9;
    do {
     if ($241) {
      $244 = $15;
      $245 = $244&255;
      $246 = $8;
      $247 = ((($246)) + 5288|0);
      $248 = (($247) + ($245<<2)|0);
      $249 = HEAP32[$248>>2]|0;
      $250 = $13;
      $251 = $31;
      __ZL9MatchRuleP10TranslatorPPcS1_iS1_P11MatchRecordii($242,$29,$243,1,$249,$32,$250,$251);
     } else {
      $252 = $8;
      $253 = ((($252)) + 5288|0);
      $254 = HEAP32[$253>>2]|0;
      $255 = $13;
      $256 = $31;
      __ZL9MatchRuleP10TranslatorPPcS1_iS1_P11MatchRecordii($242,$29,$243,0,$254,$32,$255,$256);
      $257 = HEAP32[$32>>2]|0;
      $258 = ($257|0)==(0);
      if ($258) {
       $259 = HEAP32[19160]|0;
       $260 = $259 & 16;
       $261 = ($260|0)==(0);
       if ($261) {
        $262 = HEAP32[$29>>2]|0;
        $263 = ((($262)) + -1|0);
        $264 = (__Z7utf8_inPiPKc($25,$263)|0);
        $265 = (($264) - 1)|0;
        $24 = $265;
        $266 = $8;
        $267 = ((($266)) + 720|0);
        $268 = HEAP32[$267>>2]|0;
        $269 = ($268|0)>(0);
        $270 = HEAP32[$25>>2]|0;
        $271 = ($270|0)<=(577);
        $or$cond21 = $269 & $271;
        if ($or$cond21) {
         $272 = HEAP32[$25>>2]|0;
         $273 = (__Z9iswalpha2i($272)|0);
         $274 = ($273|0)!=(0);
         if ($274) {
          label = 46;
          break L26;
         }
        }
        $278 = HEAP32[$25>>2]|0;
        $279 = ($278|0)==(57384);
        do {
         if ($279) {
          $280 = HEAP32[19175]|0;
          $281 = $8;
          $282 = ((($281)) + 108|0);
          $283 = ((($282)) + 64|0);
          $284 = HEAP32[$283>>2]|0;
          $285 = ($280|0)<($284|0);
          if (!($285)) {
           break;
          }
          $286 = $8;
          $287 = ((($286)) + 108|0);
          $288 = ((($287)) + 64|0);
          $289 = HEAP32[$288>>2]|0;
          HEAP32[19175] = $289;
         }
        } while(0);
        $290 = HEAP32[$25>>2]|0;
        $291 = (__Z9IsBracketi($290)|0);
        $292 = ($291|0)!=(0);
        do {
         if ($292) {
          $293 = HEAP32[19175]|0;
          $294 = $8;
          $295 = ((($294)) + 24|0);
          $296 = ((($295)) + 64|0);
          $297 = HEAP32[$296>>2]|0;
          $298 = ($293|0)<($297|0);
          if (!($298)) {
           break;
          }
          $299 = $8;
          $300 = ((($299)) + 24|0);
          $301 = ((($300)) + 64|0);
          $302 = HEAP32[$301>>2]|0;
          HEAP32[19175] = $302;
         }
        } while(0);
        $303 = HEAP32[$25>>2]|0;
        $304 = ($303|0)>=(192);
        $305 = HEAP32[$25>>2]|0;
        $306 = ($305|0)<(606);
        $or$cond9 = $304 & $306;
        do {
         if ($or$cond9) {
          $307 = HEAP32[$25>>2]|0;
          $308 = (($307) - 192)|0;
          $309 = (17920 + ($308)|0);
          $310 = HEAP8[$309>>0]|0;
          $311 = $310&255;
          $27 = $311;
          $312 = ($311|0)!=(0);
          if (!($312)) {
           break;
          }
          $313 = HEAP32[$29>>2]|0;
          $314 = ((($313)) + -2|0);
          $315 = HEAP8[$314>>0]|0;
          $316 = $315 << 24 >> 24;
          $317 = ($316|0)!=(32);
          if (!($317)) {
           $318 = $24;
           $319 = HEAP32[$29>>2]|0;
           $320 = (($319) + ($318)|0);
           $321 = HEAP8[$320>>0]|0;
           $322 = $321 << 24 >> 24;
           $323 = ($322|0)!=(32);
           if (!($323)) {
            break;
           }
          }
          $324 = HEAP32[$29>>2]|0;
          $325 = ((($324)) + -1|0);
          HEAP32[$20>>2] = $325;
          $326 = $27;
          $327 = $326&255;
          $328 = HEAP32[$29>>2]|0;
          $329 = ((($328)) + -1|0);
          HEAP8[$329>>0] = $327;
          while(1) {
           $330 = $24;
           $331 = HEAP32[$29>>2]|0;
           $332 = (($331) + ($330)|0);
           $333 = HEAP8[$332>>0]|0;
           $334 = HEAP32[$29>>2]|0;
           HEAP8[$334>>0] = $333;
           $335 = $333 << 24 >> 24;
           $336 = ($335|0)!=(32);
           if (!($336)) {
            break;
           }
           $337 = HEAP32[$29>>2]|0;
           $338 = ((($337)) + 1|0);
           HEAP32[$29>>2] = $338;
          }
          while(1) {
           $339 = $24;
           $340 = (($339) + -1)|0;
           $24 = $340;
           $341 = ($339|0)>(0);
           if (!($341)) {
            break;
           }
           $342 = HEAP32[$29>>2]|0;
           $343 = ((($342)) + 1|0);
           HEAP32[$29>>2] = $343;
           HEAP8[$342>>0] = 32;
          }
          $344 = $8;
          $345 = ((($344)) + 24|0);
          $346 = ((($345)) + 4|0);
          $347 = HEAP32[$346>>2]|0;
          $348 = ($347|0)!=(0);
          do {
           if ($348) {
            $349 = HEAP32[$25>>2]|0;
            $350 = (__Z11lookupwcharPKti(6484,$349)|0);
            $351 = ($350|0)>(0);
            if (!($351)) {
             break;
            }
            $352 = HEAP32[$20>>2]|0;
            HEAP32[$29>>2] = $352;
            continue L26;
           }
          } while(0);
          $353 = $10;
          HEAP8[$353>>0] = 0;
          $354 = $9;
          HEAP32[$29>>2] = $354;
          $355 = $8;
          $356 = ((($355)) + 8328|0);
          HEAP32[$356>>2] = 0;
          $357 = $8;
          $358 = ((($357)) + 8332|0);
          HEAP32[$358>>2] = 0;
          continue L26;
         }
        } while(0);
        $359 = HEAP32[$25>>2]|0;
        $360 = (__Z16AlphabetFromChari($359)|0);
        $30 = $360;
        $361 = ($360|0)!=(0|0);
        if (!($361)) {
         break;
        }
        $362 = $30;
        $363 = ((($362)) + 4|0);
        $364 = HEAP32[$363>>2]|0;
        $365 = $8;
        $366 = ((($365)) + 720|0);
        $367 = HEAP32[$366>>2]|0;
        $368 = ($364|0)!=($367|0);
        if (!($368)) {
         break;
        }
        $369 = $8;
        $370 = ((($369)) + 300|0);
        $371 = HEAP32[$370>>2]|0;
        $372 = $30;
        $373 = ((($372)) + 4|0);
        $374 = HEAP32[$373>>2]|0;
        $375 = ($371|0)==($374|0);
        if ($375) {
         label = 69;
         break L26;
        }
        $381 = $30;
        $382 = ((($381)) + 16|0);
        $383 = HEAP32[$382>>2]|0;
        $384 = $383 & 4;
        $385 = ($384|0)!=(0);
        if ($385) {
         label = 71;
         break L26;
        }
       }
      }
     }
    } while(0);
    $391 = HEAP32[$32>>2]|0;
    $392 = ($391|0)==(0);
    if (!($392)) {
     $424 = $8;
     $425 = ((($424)) + 400|0);
     HEAP32[$425>>2] = 0;
     break;
    }
    $393 = HEAP32[$18>>2]|0;
    $394 = ($393|0)>=(768);
    $395 = HEAP32[$18>>2]|0;
    $396 = ($395|0)<=(879);
    $or$cond11 = $394 & $396;
    do {
     if (!($or$cond11)) {
      $397 = HEAP32[$18>>2]|0;
      $398 = (__Z7IsAlphaj($397)|0);
      $399 = ($398|0)!=(0);
      if ($399) {
       $400 = $26;
       $401 = ($400|0)>(1);
       if ($401) {
        label = 77;
        break L26;
       }
       $402 = $19;
       $403 = (($402) - 1)|0;
       $404 = HEAP32[$29>>2]|0;
       $405 = (($404) + ($403)|0);
       $406 = HEAP8[$405>>0]|0;
       $407 = $406 << 24 >> 24;
       $408 = ($407|0)>(32);
       if ($408) {
        label = 77;
        break L26;
       } else {
        break;
       }
      } else {
       $415 = $8;
       $416 = HEAP32[$18>>2]|0;
       __Z12LookupLetterP10TranslatorjiPci($415,$416,-1,$34,0);
       $417 = HEAP8[$34>>0]|0;
       $418 = ($417<<24>>24)!=(0);
       if (!($418)) {
        break;
       }
       $419 = ((($32)) + 4|0);
       HEAP32[$419>>2] = $34;
       HEAP32[$32>>2] = 1;
       break;
      }
     }
    } while(0);
    $420 = $19;
    $421 = (($420) - 1)|0;
    $422 = HEAP32[$29>>2]|0;
    $423 = (($422) + ($421)|0);
    HEAP32[$29>>2] = $423;
   }
  } while(0);
  $426 = ((($32)) + 4|0);
  $427 = HEAP32[$426>>2]|0;
  $428 = ($427|0)==(0|0);
  if ($428) {
   $429 = ((($32)) + 4|0);
   HEAP32[$429>>2] = 122378;
  }
  $430 = HEAP32[$32>>2]|0;
  $431 = ($430|0)>(0);
  if (!($431)) {
   continue;
  }
  $432 = $13;
  $433 = $432 & -2147483648;
  $434 = ($433|0)!=(0);
  if ($434) {
   label = 87;
   break;
  }
  $438 = ((($32)) + 4|0);
  $439 = HEAP32[$438>>2]|0;
  $440 = HEAP8[$439>>0]|0;
  $441 = $440 << 24 >> 24;
  $442 = ($441|0)==(21);
  if ($442) {
   $443 = $13;
   $444 = $443 & 4096;
   $445 = ($444|0)==(0);
   if ($445) {
    label = 90;
    break;
   }
  }
  $449 = HEAP32[19154]|0;
  $450 = $449 & 8;
  $451 = ($450|0)!=(0);
  if ($451) {
   $452 = $13;
   $453 = $452 & 268435456;
   $454 = ($453|0)==(0);
   if ($454) {
    $455 = HEAP32[19151]|0;
    (_fprintf($455,22796,$vararg_buffer37)|0);
   }
  }
  $456 = ((($32)) + 8|0);
  $457 = HEAP32[$456>>2]|0;
  $458 = $457 & -32769;
  HEAP32[$456>>2] = $458;
  $459 = ((($32)) + 8|0);
  $460 = HEAP32[$459>>2]|0;
  $461 = ($460|0)!=(0);
  $462 = $12;
  $463 = ($462|0)!=(0|0);
  $or$cond13 = $461 & $463;
  if ($or$cond13) {
   $464 = ((($32)) + 8|0);
   $465 = HEAP32[$464>>2]|0;
   $466 = $465 & 1024;
   $467 = ($466|0)!=(0);
   if (!($467)) {
    label = 97;
    break;
   }
   $468 = $13;
   $469 = $468 & 536870912;
   $470 = ($469|0)!=(0);
   if (!($470)) {
    label = 97;
    break;
   }
  }
  $494 = ((($32)) + 12|0);
  $495 = HEAP32[$494>>2]|0;
  $496 = ($495|0)!=(0|0);
  if ($496) {
   $497 = ((($32)) + 12|0);
   $498 = HEAP32[$497>>2]|0;
   HEAP8[$498>>0] = 69;
  }
  $499 = $8;
  $500 = $10;
  $501 = $11;
  $502 = ((($32)) + 4|0);
  $503 = HEAP32[$502>>2]|0;
  __Z14AppendPhonemesP10TranslatorPciPKc($499,$500,$501,$503);
 }
 if ((label|0) == 46) {
  $275 = $10;
  $276 = $8;
  $277 = ((($276)) + 288|0);
  HEAP32[$vararg_buffer25>>2] = 21;
  $vararg_ptr28 = ((($vararg_buffer25)) + 4|0);
  HEAP32[$vararg_ptr28>>2] = $277;
  (_sprintf($275,26563,$vararg_buffer25)|0);
  $7 = 0;
  $506 = $7;
  STACKTOP = sp;return ($506|0);
 }
 else if ((label|0) == 69) {
  $376 = $10;
  $377 = $8;
  $378 = ((($377)) + 304|0);
  $379 = HEAP32[$378>>2]|0;
  $380 = (__Z13WordToString2j($379)|0);
  HEAP32[$vararg_buffer29>>2] = 21;
  $vararg_ptr32 = ((($vararg_buffer29)) + 4|0);
  HEAP32[$vararg_ptr32>>2] = $380;
  (_sprintf($376,26563,$vararg_buffer29)|0);
  $7 = 0;
  $506 = $7;
  STACKTOP = sp;return ($506|0);
 }
 else if ((label|0) == 71) {
  $386 = $10;
  $387 = $30;
  $388 = ((($387)) + 12|0);
  $389 = HEAP32[$388>>2]|0;
  $390 = (__Z13WordToString2j($389)|0);
  HEAP32[$vararg_buffer33>>2] = 21;
  $vararg_ptr36 = ((($vararg_buffer33)) + 4|0);
  HEAP32[$vararg_ptr36>>2] = $390;
  (_sprintf($386,26563,$vararg_buffer33)|0);
  $7 = 0;
  $506 = $7;
  STACKTOP = sp;return ($506|0);
 }
 else if ((label|0) == 77) {
  $409 = $10;
  HEAP8[$409>>0] = 0;
  $410 = $14;
  $411 = ($410|0)!=(0|0);
  if ($411) {
   $412 = $14;
   $413 = HEAP32[$412>>2]|0;
   $414 = $413 | 4096;
   HEAP32[$412>>2] = $414;
  }
 }
 else if ((label|0) == 87) {
  $435 = ((($32)) + 8|0);
  $436 = HEAP32[$435>>2]|0;
  $437 = $436 | 1;
  $7 = $437;
  $506 = $7;
  STACKTOP = sp;return ($506|0);
 }
 else if ((label|0) == 90) {
  $446 = $10;
  $447 = ((($32)) + 4|0);
  $448 = HEAP32[$447>>2]|0;
  (_strcpy($446,$448)|0);
  $7 = 0;
  $506 = $7;
  STACKTOP = sp;return ($506|0);
 }
 else if ((label|0) == 97) {
  $471 = ((($32)) + 8|0);
  $472 = HEAP32[$471>>2]|0;
  $473 = $472 & 1024;
  $474 = ($473|0)!=(0);
  if ($474) {
   $475 = ((($32)) + 8|0);
   $476 = HEAP32[$475>>2]|0;
   $477 = $476 & 127;
   $478 = ($477|0)==(0);
   if ($478) {
    $479 = HEAP32[$29>>2]|0;
    $480 = $9;
    $481 = $479;
    $482 = $480;
    $483 = (($481) - ($482))|0;
    $484 = ((($32)) + 8|0);
    $485 = HEAP32[$484>>2]|0;
    $486 = $485 | $483;
    HEAP32[$484>>2] = $486;
   }
  }
  $487 = $12;
  $488 = ((($32)) + 4|0);
  $489 = HEAP32[$488>>2]|0;
  (_strcpy($487,$489)|0);
  $490 = $9;
  $491 = (_strlen($35)|0);
  _memcpy(($490|0),($35|0),($491|0))|0;
  $492 = ((($32)) + 8|0);
  $493 = HEAP32[$492>>2]|0;
  $7 = $493;
  $506 = $7;
  STACKTOP = sp;return ($506|0);
 }
 $504 = $9;
 $505 = (_strlen($35)|0);
 _memcpy(($504|0),($35|0),($505|0))|0;
 $7 = 0;
 $506 = $7;
 STACKTOP = sp;return ($506|0);
}
function __Z6LookupP10TranslatorPKcPc($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(112|0);
 $7 = sp + 8|0;
 $9 = sp;
 $10 = sp + 32|0;
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $11 = $4;
 HEAP32[$9>>2] = $11;
 HEAP32[$7>>2] = 0;
 $12 = ((($7)) + 4|0);
 HEAP32[$12>>2] = 1073741824;
 $13 = $3;
 $14 = $5;
 $15 = (__Z14LookupDictListP10TranslatorPPcS1_PjiP8WORD_TAB($13,$9,$14,$7,2,0)|0);
 $6 = $15;
 $16 = ($15|0)!=(0);
 if ($16) {
  $17 = HEAP32[$7>>2]|0;
  $6 = $17;
 }
 $18 = HEAP32[$7>>2]|0;
 $19 = $18 & 536870912;
 $20 = ($19|0)!=(0);
 if (!($20)) {
  $29 = $6;
  STACKTOP = sp;return ($29|0);
 }
 $21 = HEAP32[19160]|0;
 $8 = $21;
 HEAP32[19160] = 0;
 HEAP8[$10>>0] = 0;
 $22 = ((($10)) + 1|0);
 $23 = HEAP32[$9>>2]|0;
 __Z8strncpy0PcPKci($22,$23,80);
 $24 = $3;
 $25 = ((($10)) + 1|0);
 $26 = (__Z13TranslateWordP10TranslatorPciP8WORD_TABS1_($24,$25,0,0,0)|0);
 $6 = $26;
 $27 = $5;
 (_strcpy($27,120548)|0);
 $28 = $8;
 HEAP32[19160] = $28;
 $29 = $6;
 STACKTOP = sp;return ($29|0);
}
function __Z14AppendPhonemesP10TranslatorPciPKc($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $3;
 $12 = $7;
 $13 = (_strlen($12)|0);
 $14 = $5;
 $15 = (_strlen($14)|0);
 $16 = (($13) + ($15))|0;
 $11 = $16;
 $17 = $11;
 $18 = $6;
 $19 = ($17|0)>=($18|0);
 if ($19) {
  STACKTOP = sp;return;
 }
 $10 = 0;
 $20 = $7;
 $8 = $20;
 while(1) {
  $21 = $8;
  $22 = ((($21)) + 1|0);
  $8 = $22;
  $23 = HEAP8[$21>>0]|0;
  $9 = $23;
  $24 = $23&255;
  $25 = ($24|0)!=(0);
  if (!($25)) {
   break;
  }
  $26 = $9;
  $27 = $26&255;
  $28 = HEAP32[11250]|0;
  $29 = ($27|0)>=($28|0);
  if ($29) {
   continue;
  }
  $30 = $9;
  $31 = $30&255;
  $32 = (45008 + ($31<<2)|0);
  $33 = HEAP32[$32>>2]|0;
  $34 = ((($33)) + 11|0);
  $35 = HEAP8[$34>>0]|0;
  $36 = $35&255;
  $37 = ($36|0)==(1);
  $38 = $9;
  $39 = $38&255;
  $40 = (45008 + ($39<<2)|0);
  $41 = HEAP32[$40>>2]|0;
  if ($37) {
   $42 = ((($41)) + 14|0);
   $43 = HEAP8[$42>>0]|0;
   $44 = $43&255;
   $45 = ($44|0)<(4);
   if (!($45)) {
    continue;
   }
   $10 = 1;
   continue;
  }
  $46 = ((($41)) + 11|0);
  $47 = HEAP8[$46>>0]|0;
  $48 = $47&255;
  $49 = ($48|0)==(2);
  if (!($49)) {
   continue;
  }
  $50 = $9;
  $51 = $50&255;
  $52 = (45008 + ($51<<2)|0);
  $53 = HEAP32[$52>>2]|0;
  $54 = ((($53)) + 4|0);
  $55 = HEAP32[$54>>2]|0;
  $56 = $55 & 2;
  $57 = ($56|0)==(0);
  $58 = $10;
  $59 = ($58|0)==(0);
  $or$cond = $57 & $59;
  if ($or$cond) {
   $60 = $4;
   $61 = ((($60)) + 8332|0);
   $62 = HEAP32[$61>>2]|0;
   $63 = (($62) + 1)|0;
   HEAP32[$61>>2] = $63;
  }
  $10 = 0;
  $64 = $4;
  $65 = ((($64)) + 8328|0);
  $66 = HEAP32[$65>>2]|0;
  $67 = (($66) + 1)|0;
  HEAP32[$65>>2] = $67;
 }
 $68 = $5;
 $69 = ($68|0)!=(0|0);
 if (!($69)) {
  STACKTOP = sp;return;
 }
 $70 = $5;
 $71 = $7;
 (_strcat($70,$71)|0);
 STACKTOP = sp;return;
}
function __ZL9MatchRuleP10TranslatorPPcS1_iS1_P11MatchRecordii($0,$1,$2,$3,$4,$5,$6,$7) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 var $$ = 0, $$1 = 0, $$3 = 0, $$4 = 0, $$7 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0;
 var $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0;
 var $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0;
 var $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0;
 var $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0;
 var $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0;
 var $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0;
 var $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0;
 var $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0;
 var $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0;
 var $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0;
 var $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0;
 var $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0;
 var $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0;
 var $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0;
 var $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0;
 var $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0;
 var $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0;
 var $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0;
 var $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0;
 var $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0;
 var $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0;
 var $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0;
 var $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0;
 var $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0;
 var $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0;
 var $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0;
 var $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0;
 var $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0;
 var $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0;
 var $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0;
 var $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0;
 var $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0;
 var $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0;
 var $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0;
 var $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0;
 var $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0;
 var $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond = 0, $or$cond6 = 0, $vararg_buffer = 0, $vararg_ptr8 = 0, $vararg_ptr9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 448|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(448|0);
 $vararg_buffer = sp;
 $18 = sp + 164|0;
 $40 = sp + 80|0;
 $41 = sp + 64|0;
 $46 = sp + 280|0;
 $52 = sp + 24|0;
 $56 = sp + 200|0;
 $8 = $0;
 $9 = $1;
 $10 = $2;
 $11 = $3;
 $12 = $4;
 $13 = $5;
 $14 = $6;
 $15 = $7;
 $57 = $9;
 $58 = HEAP32[$57>>2]|0;
 $45 = $58;
 $59 = $12;
 $60 = ($59|0)==(0|0);
 if ($60) {
  $61 = $13;
  HEAP32[$61>>2] = 0;
  $62 = $9;
  $63 = HEAP32[$62>>2]|0;
  $64 = ((($63)) + 1|0);
  HEAP32[$62>>2] = $64;
  STACKTOP = sp;return;
 }
 $42 = 0;
 $44 = 0;
 $26 = 0;
 HEAP32[10461] = 0;
 HEAP32[(41848)>>2] = 122378;
 HEAP32[(41852)>>2] = 0;
 HEAP32[(41856)>>2] = 0;
 L5: while(1) {
  $65 = $12;
  $66 = HEAP8[$65>>0]|0;
  $67 = $66 << 24 >> 24;
  $68 = ($67|0)!=(7);
  if (!($68)) {
   break;
  }
  $69 = $14;
  $70 = $69 & -2147483648;
  $28 = $70;
  $26 = 0;
  $29 = 0;
  $17 = 0;
  $33 = -6;
  $34 = -2;
  $39 = 0;
  HEAP32[$41>>2] = 1;
  $71 = ((($41)) + 8|0);
  HEAP32[$71>>2] = 0;
  $72 = ((($41)) + 12|0);
  HEAP32[$72>>2] = 0;
  $73 = $9;
  $74 = HEAP32[$73>>2]|0;
  $21 = $74;
  $75 = $9;
  $76 = HEAP32[$75>>2]|0;
  $77 = $11;
  $78 = (($76) + ($77)|0);
  $22 = $78;
  $79 = $12;
  $23 = $79;
  $27 = 0;
  L8: while(1) {
   $80 = $27;
   $81 = ($80|0)!=(0);
   $82 = $81 ^ 1;
   if (!($82)) {
    break;
   }
   $83 = $12;
   $84 = ((($83)) + 1|0);
   $12 = $84;
   $85 = HEAP8[$83>>0]|0;
   $16 = $85;
   $86 = $16;
   $87 = $86&255;
   $88 = ($87|0)<=(9);
   if ($88) {
    $89 = $16;
    $90 = $89&255;
    switch ($90|0) {
    case 0:  {
     $91 = $44;
     $92 = ($91|0)!=(0|0);
     L15: do {
      if ($92) {
       $93 = $44;
       $94 = ((($41)) + 4|0);
       HEAP32[$94>>2] = $93;
       while(1) {
        $95 = ((($41)) + 4|0);
        $96 = HEAP32[$95>>2]|0;
        $97 = ((($96)) + 1|0);
        HEAP32[$95>>2] = $97;
        $98 = HEAP8[$96>>0]|0;
        $16 = $98;
        $99 = $98&255;
        $100 = ($99|0)!=(0);
        if (!($100)) {
         break L15;
        }
        $101 = $16;
        $102 = $101&255;
        $103 = ($102|0)!=(3);
        if (!($103)) {
         break L15;
        }
        $104 = $16;
        $105 = $104&255;
        $106 = ($105|0)==(5);
        if ($106) {
         $107 = ((($41)) + 4|0);
         $108 = HEAP32[$107>>2]|0;
         $109 = ((($108)) + 1|0);
         HEAP32[$107>>2] = $109;
        }
        $110 = $16;
        $111 = $110&255;
        $112 = ($111|0)==(9);
        if (!($112)) {
         continue;
        }
        $113 = ((($41)) + 4|0);
        $114 = HEAP32[$113>>2]|0;
        $115 = ((($114)) + 2|0);
        HEAP32[$113>>2] = $115;
       }
      } else {
       $116 = ((($41)) + 4|0);
       HEAP32[$116>>2] = 122378;
      }
     } while(0);
     $117 = $12;
     $118 = ((($117)) + -1|0);
     $12 = $118;
     $27 = 2;
     continue L8;
     break;
    }
    case 8:  {
     $39 = 1;
     $28 = 0;
     $26 = 1;
     continue L8;
     break;
    }
    case 1:  {
     $26 = 1;
     $119 = $14;
     $120 = $119 & -2147483648;
     $121 = ($120|0)!=(0);
     if (!($121)) {
      continue L8;
     }
     $27 = 1;
     continue L8;
     break;
    }
    case 2:  {
     $26 = 2;
     continue L8;
     break;
    }
    case 3:  {
     $122 = $12;
     $123 = ((($41)) + 4|0);
     HEAP32[$123>>2] = $122;
     $27 = 2;
     continue L8;
     break;
    }
    case 4:  {
     $124 = $12;
     $44 = $124;
     continue L8;
     break;
    }
    case 5:  {
     $125 = $12;
     $126 = ((($125)) + 1|0);
     $12 = $126;
     $127 = HEAP8[$125>>0]|0;
     $43 = $127;
     $128 = $43;
     $129 = $128&255;
     $130 = ($129|0)>=(32);
     $131 = $8;
     $132 = ((($131)) + 440|0);
     $133 = HEAP32[$132>>2]|0;
     $134 = $43;
     $135 = $134&255;
     if ($130) {
      $136 = (($135) - 32)|0;
      $137 = 1 << $136;
      $138 = $133 & $137;
      $139 = ($138|0)!=(0);
      if ($139) {
       $27 = 1;
      }
     } else {
      $140 = 1 << $135;
      $141 = $133 & $140;
      $142 = ($141|0)==(0);
      if ($142) {
       $27 = 1;
      }
     }
     $143 = $27;
     $144 = ($143|0)!=(0);
     if ($144) {
      continue L8;
     }
     $145 = HEAP32[$41>>2]|0;
     $146 = (($145) + 1)|0;
     HEAP32[$41>>2] = $146;
     continue L8;
     break;
    }
    case 9:  {
     $147 = $12;
     $148 = ((($147)) + 2|0);
     $12 = $148;
     continue L8;
     break;
    }
    default: {
     continue L8;
    }
    }
   }
   $37 = 0;
   $149 = $26;
   L43: do {
    switch ($149|0) {
    case 0:  {
     $150 = $17;
     $20 = $150;
     $151 = $22;
     $152 = ((($151)) + 1|0);
     $22 = $152;
     $153 = HEAP8[$151>>0]|0;
     $17 = $153;
     $154 = $17;
     $155 = $154&255;
     $156 = $16;
     $157 = $156&255;
     $158 = ($155|0)==($157|0);
     do {
      if (!($158)) {
       $159 = $17;
       $160 = $159&255;
       $161 = ($160|0)==(69);
       if ($161) {
        $162 = $16;
        $163 = $162&255;
        $164 = ($163|0)==(101);
        if ($164) {
         break;
        }
       }
       $27 = 1;
       break L43;
      }
     } while(0);
     $165 = $17;
     $166 = $165&255;
     $167 = $166 & 192;
     $168 = ($167|0)!=(128);
     if ($168) {
      $37 = 21;
     }
     $169 = $29;
     $170 = (($169) + 1)|0;
     $29 = $170;
     break;
    }
    case 2:  {
     $171 = $33;
     $172 = (($171) + 6)|0;
     $33 = $172;
     $173 = $33;
     $174 = ($173|0)>(18);
     $$ = $174 ? 19 : $172;
     $33 = $$;
     $175 = $17;
     $20 = $175;
     $176 = $22;
     $177 = (__Z7utf8_inPiPKc($18,$176)|0);
     $178 = (($177) - 1)|0;
     $19 = $178;
     $179 = $22;
     $180 = ((($179)) + 1|0);
     $22 = $180;
     $181 = HEAP8[$179>>0]|0;
     $17 = $181;
     $182 = $16;
     $183 = $182&255;
     do {
      switch ($183|0) {
      case 17:  {
       $184 = $12;
       $185 = ((($184)) + 1|0);
       $12 = $185;
       $186 = HEAP8[$184>>0]|0;
       $187 = $186 << 24 >> 24;
       $188 = (($187) - 65)|0;
       $32 = $188;
       $189 = $8;
       $190 = HEAP32[$18>>2]|0;
       $191 = $32;
       $192 = (__ZL8IsLetterP10Translatorii($189,$190,$191)|0);
       $193 = ($192|0)!=(0);
       if ($193) {
        $35 = 20;
        $194 = $32;
        $195 = ($194|0)==(2);
        $$1 = $195 ? 19 : 20;
        $35 = $$1;
        $196 = $35;
        $197 = $33;
        $198 = (($196) - ($197))|0;
        $37 = $198;
        $199 = $19;
        $200 = $22;
        $201 = (($200) + ($199)|0);
        $22 = $201;
        break L43;
       } else {
        $27 = 1;
        break L43;
       }
       break;
      }
      case 18:  {
       $202 = $12;
       $203 = ((($202)) + 1|0);
       $12 = $203;
       $204 = HEAP8[$202>>0]|0;
       $205 = $204 << 24 >> 24;
       $206 = (($205) - 65)|0;
       $32 = $206;
       $207 = $8;
       $208 = $22;
       $209 = ((($208)) + -1|0);
       $210 = $32;
       $211 = (__ZL13IsLetterGroupP10TranslatorPcii($207,$209,$210,0)|0);
       $36 = $211;
       $212 = ($211|0)>(0);
       if ($212) {
        $213 = $33;
        $214 = (20 - ($213))|0;
        $37 = $214;
        $215 = $36;
        $216 = (($215) - 1)|0;
        $217 = $22;
        $218 = (($217) + ($216)|0);
        $22 = $218;
        break L43;
       } else {
        $27 = 1;
        break L43;
       }
       break;
      }
      case 25:  {
       $219 = $8;
       $220 = HEAP32[$18>>2]|0;
       $221 = (__ZL8IsLetterP10Translatorii($219,$220,0)|0);
       $222 = ($221|0)!=(0);
       do {
        if (!($222)) {
         $223 = HEAP32[$18>>2]|0;
         $224 = ($223|0)==(32);
         if ($224) {
          $225 = $14;
          $226 = $225 & 134217728;
          $227 = ($226|0)!=(0);
          if ($227) {
           break;
          }
         }
         $228 = $33;
         $229 = (20 - ($228))|0;
         $37 = $229;
         $230 = $19;
         $231 = $22;
         $232 = (($231) + ($230)|0);
         $22 = $232;
         break L43;
        }
       } while(0);
       $27 = 1;
       break L43;
       break;
      }
      case 15:  {
       $233 = HEAP32[$18>>2]|0;
       $234 = (__Z7IsDigitj($233)|0);
       $235 = ($234|0)!=(0);
       if ($235) {
        $236 = $33;
        $237 = (20 - ($236))|0;
        $37 = $237;
        $238 = $19;
        $239 = $22;
        $240 = (($239) + ($238)|0);
        $22 = $240;
        break L43;
       }
       $241 = $8;
       $242 = ((($241)) + 270|0);
       $243 = HEAP8[$242>>0]|0;
       $244 = ($243<<24>>24)!=(0);
       if ($244) {
        $245 = $33;
        $246 = (20 - ($245))|0;
        $37 = $246;
        $247 = $22;
        $248 = ((($247)) + -1|0);
        $22 = $248;
        break L43;
       } else {
        $27 = 1;
        break L43;
       }
       break;
      }
      case 16:  {
       $249 = HEAP32[$18>>2]|0;
       $250 = (__Z9iswalpha2i($249)|0);
       $251 = ($250|0)!=(0);
       if ($251) {
        $27 = 1;
        break L43;
       } else {
        $252 = $33;
        $253 = (21 - ($252))|0;
        $37 = $253;
        $254 = $19;
        $255 = $22;
        $256 = (($255) + ($254)|0);
        $22 = $256;
        break L43;
       }
       break;
      }
      case 11:  {
       $257 = $17;
       $258 = $257&255;
       $259 = $20;
       $260 = $259&255;
       $261 = ($258|0)==($260|0);
       if ($261) {
        $262 = $33;
        $263 = (21 - ($262))|0;
        $37 = $263;
        break L43;
       } else {
        $27 = 1;
        break L43;
       }
       break;
      }
      case 28:  {
       $264 = $12;
       $265 = ((($264)) + 1|0);
       $12 = $265;
       $266 = HEAP8[$264>>0]|0;
       $267 = $266 << 24 >> 24;
       $38 = $267;
       $268 = $38;
       $269 = ($268|0)==(1);
       if ($269) {
        $270 = ((($41)) + 8|0);
        HEAP32[$270>>2] = 32768;
        break L43;
       }
       $271 = $38;
       $272 = ($271|0)==(2);
       if ($272) {
        $273 = $14;
        $274 = $273 & 8388608;
        $275 = ($274|0)!=(0);
        if ($275) {
         $27 = 1;
         break L43;
        } else {
         $37 = 1;
         break L43;
        }
       }
       $276 = $38;
       $277 = $276 & 240;
       $278 = ($277|0)==(16);
       if ($278) {
        $279 = $15;
        $280 = $38;
        $281 = $280 & 15;
        $282 = (14 + ($281))|0;
        $283 = 1 << $282;
        $284 = $279 & $283;
        $285 = ($284|0)!=(0);
        if ($285) {
         $37 = 23;
         break L43;
        } else {
         $27 = 1;
         break L43;
        }
       }
       $286 = $38;
       $287 = $286 & 240;
       $288 = ($287|0)==(32);
       $289 = $38;
       $290 = ($289|0)==(3);
       $or$cond = $288 | $290;
       if (!($or$cond)) {
        break L43;
       }
       $291 = $9;
       $292 = HEAP32[$291>>2]|0;
       $293 = $10;
       $294 = $292;
       $295 = $293;
       $296 = (($294) - ($295))|0;
       $297 = $29;
       $298 = (($296) + ($297))|0;
       $299 = $11;
       $300 = (($298) + ($299))|0;
       $301 = (($300) + 1)|0;
       $25 = $301;
       $302 = $10;
       $303 = ((($302)) + -1|0);
       $304 = $25;
       _memcpy(($46|0),($303|0),($304|0))|0;
       $305 = $25;
       $306 = (($46) + ($305)|0);
       HEAP8[$306>>0] = 32;
       $307 = $25;
       $308 = (($307) + 1)|0;
       $309 = (($46) + ($308)|0);
       HEAP8[$309>>0] = 0;
       $310 = $8;
       $311 = ((($46)) + 1|0);
       (__Z11LookupFlagsP10TranslatorPKcPPj($310,$311,$40)|0);
       $312 = $38;
       $313 = ($312|0)==(3);
       if ($313) {
        $314 = HEAP32[$40>>2]|0;
        $315 = HEAP32[$314>>2]|0;
        $316 = $315 & -2147483648;
        $317 = ($316|0)!=(0);
        if ($317) {
         $318 = HEAP32[$40>>2]|0;
         $319 = ((($318)) + 4|0);
         $320 = HEAP32[$319>>2]|0;
         $321 = $320 & 16384;
         $322 = ($321|0)!=(0);
         if (!($322)) {
          $37 = 23;
          break L43;
         }
        }
       }
       $323 = HEAP32[$40>>2]|0;
       $324 = HEAP32[$323>>2]|0;
       $325 = $38;
       $326 = $325 & 15;
       $327 = (14 + ($326))|0;
       $328 = 1 << $327;
       $329 = $324 & $328;
       $330 = ($329|0)!=(0);
       if ($330) {
        $37 = 23;
        break L43;
       } else {
        $27 = 1;
        break L43;
       }
       break;
      }
      case 45:  {
       $331 = $17;
       $332 = $331&255;
       $333 = ($332|0)==(45);
       do {
        if (!($333)) {
         $334 = $17;
         $335 = $334&255;
         $336 = ($335|0)==(32);
         if ($336) {
          $337 = $14;
          $338 = $337 & 16384;
          $339 = ($338|0)!=(0);
          if ($339) {
           break;
          }
         }
         $27 = 1;
         break L43;
        }
       } while(0);
       $340 = $33;
       $341 = (22 - ($340))|0;
       $37 = $341;
       break L43;
       break;
      }
      case 21:  {
       $342 = $22;
       $343 = $19;
       $344 = (($342) + ($343)|0);
       $47 = $344;
       $48 = 0;
       $30 = 1;
       while(1) {
        $345 = $12;
        $346 = HEAP8[$345>>0]|0;
        $347 = $346 << 24 >> 24;
        $348 = ($347|0)==(21);
        if (!($348)) {
         break;
        }
        $349 = $12;
        $350 = ((($349)) + 1|0);
        $12 = $350;
        $351 = $30;
        $352 = (($351) + 1)|0;
        $30 = $352;
       }
       $31 = 0;
       while(1) {
        $353 = HEAP32[$18>>2]|0;
        $354 = ($353|0)!=(32);
        if (!($354)) {
         break;
        }
        $355 = $31;
        $356 = ($355|0)==(0);
        if ($356) {
         $357 = $8;
         $358 = HEAP32[$18>>2]|0;
         $359 = (__ZL8IsLetterP10Translatorii($357,$358,7)|0);
         $360 = ($359|0)!=(0);
         if ($360) {
          $361 = $48;
          $362 = (($361) + 1)|0;
          $48 = $362;
         }
        }
        $363 = $8;
        $364 = HEAP32[$18>>2]|0;
        $365 = (__ZL8IsLetterP10Translatorii($363,$364,7)|0);
        $31 = $365;
        $366 = $47;
        $367 = (__Z7utf8_inPiPKc($18,$366)|0);
        $368 = $47;
        $369 = (($368) + ($367)|0);
        $47 = $369;
       }
       $370 = $30;
       $371 = $48;
       $372 = ($370|0)<=($371|0);
       if ($372) {
        $373 = $30;
        $374 = (18 + ($373))|0;
        $375 = $33;
        $376 = (($374) - ($375))|0;
        $37 = $376;
        break L43;
       } else {
        $27 = 1;
        break L43;
       }
       break;
      }
      case 29:  {
       $377 = $22;
       $378 = $19;
       $379 = (($377) + ($378)|0);
       $49 = $379;
       while(1) {
        $380 = HEAP32[$18>>2]|0;
        $381 = ($380|0)!=(32);
        if (!($381)) {
         break;
        }
        $382 = $8;
        $383 = HEAP32[$18>>2]|0;
        $384 = (__ZL8IsLetterP10Translatorii($382,$383,7)|0);
        $385 = ($384|0)!=(0);
        if ($385) {
         label = 102;
         break;
        }
        $386 = $49;
        $387 = (__Z7utf8_inPiPKc($18,$386)|0);
        $388 = $49;
        $389 = (($388) + ($387)|0);
        $49 = $389;
       }
       if ((label|0) == 102) {
        label = 0;
        $27 = 1;
       }
       $390 = $27;
       $391 = ($390|0)!=(0);
       if ($391) {
        break L43;
       }
       $392 = $33;
       $393 = (19 - ($392))|0;
       $37 = $393;
       break L43;
       break;
      }
      case 23:  {
       $394 = $22;
       $395 = $19;
       $396 = (($394) + ($395)|0);
       $50 = $396;
       $397 = $50;
       $51 = $397;
       $398 = $12;
       (__Z7utf8_inPiPKc($52,$398)|0);
       while(1) {
        $399 = HEAP32[$18>>2]|0;
        $400 = HEAP32[$52>>2]|0;
        $401 = ($399|0)!=($400|0);
        $402 = HEAP32[$18>>2]|0;
        $403 = ($402|0)!=(32);
        $404 = $401 ? $403 : 0;
        if (!($404)) {
         break;
        }
        $405 = $50;
        $51 = $405;
        $406 = $50;
        $407 = (__Z7utf8_inPiPKc($18,$406)|0);
        $408 = $50;
        $409 = (($408) + ($407)|0);
        $50 = $409;
       }
       $410 = HEAP32[$18>>2]|0;
       $411 = HEAP32[$52>>2]|0;
       $412 = ($410|0)==($411|0);
       if (!($412)) {
        break L43;
       }
       $413 = $51;
       $22 = $413;
       break L43;
       break;
      }
      case 12:  {
       $37 = 20;
       break L43;
       break;
      }
      case 13:  {
       $414 = $9;
       $415 = HEAP32[$414>>2]|0;
       $416 = $11;
       $417 = (($415) + ($416)|0);
       $24 = $417;
       while(1) {
        $418 = $24;
        $419 = $22;
        $420 = ($418>>>0)<($419>>>0);
        if (!($420)) {
         break L43;
        }
        $421 = $24;
        $422 = HEAP8[$421>>0]|0;
        $423 = $422 << 24 >> 24;
        $424 = ($423|0)==(101);
        $425 = $24;
        if ($424) {
         break;
        }
        $427 = ((($425)) + 1|0);
        $24 = $427;
       }
       $426 = ((($41)) + 12|0);
       HEAP32[$426>>2] = $425;
       break L43;
       break;
      }
      case 14:  {
       $428 = $12;
       $429 = HEAP8[$428>>0]|0;
       $430 = $429 << 24 >> 24;
       $431 = $430 << 16;
       $432 = $12;
       $433 = ((($432)) + 1|0);
       $434 = HEAP8[$433>>0]|0;
       $435 = $434 << 24 >> 24;
       $436 = $435 & 127;
       $437 = $436 << 8;
       $438 = (($431) + ($437))|0;
       $439 = $12;
       $440 = ((($439)) + 2|0);
       $441 = HEAP8[$440>>0]|0;
       $442 = $441 << 24 >> 24;
       $443 = $442 & 127;
       $444 = (($438) + ($443))|0;
       $53 = $444;
       $445 = $8;
       $446 = ((($445)) + 8328|0);
       $447 = HEAP32[$446>>2]|0;
       $448 = ($447|0)==(0);
       if ($448) {
        $449 = $53;
        $450 = $449 & 1024;
        $451 = ($450|0)!=(0);
        if (!($451)) {
         $452 = $8;
         $453 = ((($452)) + 24|0);
         $454 = ((($453)) + 76|0);
         $455 = HEAP32[$454>>2]|0;
         $456 = $455 & 1;
         $457 = ($456|0)!=(0);
         if ($457) {
          $27 = 1;
          break L43;
         }
        }
       }
       $458 = $53;
       $459 = ((($41)) + 8|0);
       HEAP32[$459>>2] = $458;
       $460 = $12;
       $461 = ((($460)) + 3|0);
       $12 = $461;
       break L43;
       break;
      }
      case 24:  {
       $462 = $14;
       $463 = $462 & 8192;
       $464 = ($463|0)!=(0);
       if ($464) {
        $27 = 1;
        break L43;
       } else {
        $37 = 1;
        break L43;
       }
       break;
      }
      default: {
       $465 = $17;
       $466 = $465&255;
       $467 = $16;
       $468 = $467&255;
       $469 = ($466|0)==($468|0);
       if (!($469)) {
        $27 = 1;
        break L43;
       }
       $470 = $17;
       $471 = $470&255;
       $472 = $471 & 192;
       $473 = ($472|0)!=(128);
       if (!($473)) {
        break L43;
       }
       $474 = $33;
       $475 = (21 - ($474))|0;
       $37 = $475;
       break L43;
      }
      }
     } while(0);
     break;
    }
    case 1:  {
     $476 = $34;
     $477 = (($476) + 2)|0;
     $34 = $477;
     $478 = $34;
     $479 = ($478|0)>(18);
     $$3 = $479 ? 19 : $477;
     $34 = $$3;
     $480 = $21;
     $481 = HEAP8[$480>>0]|0;
     $20 = $481;
     $482 = $21;
     $483 = ((($482)) + -1|0);
     $21 = $483;
     $484 = $21;
     $485 = (__Z8utf8_in2PiPKci($18,$484,1)|0);
     $486 = (($485) - 1)|0;
     $19 = $486;
     $487 = $21;
     $488 = HEAP8[$487>>0]|0;
     $17 = $488;
     $489 = $16;
     $490 = $489&255;
     do {
      switch ($490|0) {
      case 17:  {
       $491 = $12;
       $492 = ((($491)) + 1|0);
       $12 = $492;
       $493 = HEAP8[$491>>0]|0;
       $494 = $493 << 24 >> 24;
       $495 = (($494) - 65)|0;
       $32 = $495;
       $496 = $8;
       $497 = HEAP32[$18>>2]|0;
       $498 = $32;
       $499 = (__ZL8IsLetterP10Translatorii($496,$497,$498)|0);
       $500 = ($499|0)!=(0);
       if ($500) {
        $35 = 20;
        $501 = $32;
        $502 = ($501|0)==(2);
        $$4 = $502 ? 19 : 20;
        $35 = $$4;
        $503 = $35;
        $504 = $34;
        $505 = (($503) - ($504))|0;
        $37 = $505;
        $506 = $19;
        $507 = $21;
        $508 = (0 - ($506))|0;
        $509 = (($507) + ($508)|0);
        $21 = $509;
        break L43;
       } else {
        $27 = 1;
        break L43;
       }
       break;
      }
      case 18:  {
       $510 = $12;
       $511 = ((($510)) + 1|0);
       $12 = $511;
       $512 = HEAP8[$510>>0]|0;
       $513 = $512 << 24 >> 24;
       $514 = (($513) - 65)|0;
       $32 = $514;
       $515 = $8;
       $516 = $21;
       $517 = $32;
       $518 = (__ZL13IsLetterGroupP10TranslatorPcii($515,$516,$517,1)|0);
       $36 = $518;
       $519 = ($518|0)>(0);
       if ($519) {
        $520 = $33;
        $521 = (20 - ($520))|0;
        $37 = $521;
        $522 = $36;
        $523 = (($522) - 1)|0;
        $524 = $21;
        $525 = (0 - ($523))|0;
        $526 = (($524) + ($525)|0);
        $21 = $526;
        break L43;
       } else {
        $27 = 1;
        break L43;
       }
       break;
      }
      case 25:  {
       $527 = $8;
       $528 = HEAP32[$18>>2]|0;
       $529 = (__ZL8IsLetterP10Translatorii($527,$528,0)|0);
       $530 = ($529|0)!=(0);
       if ($530) {
        $27 = 1;
        break L43;
       } else {
        $531 = $34;
        $532 = (20 - ($531))|0;
        $37 = $532;
        $533 = $19;
        $534 = $21;
        $535 = (0 - ($533))|0;
        $536 = (($534) + ($535)|0);
        $21 = $536;
        break L43;
       }
       break;
      }
      case 11:  {
       $537 = $17;
       $538 = $537&255;
       $539 = $20;
       $540 = $539&255;
       $541 = ($538|0)==($540|0);
       if ($541) {
        $542 = $34;
        $543 = (21 - ($542))|0;
        $37 = $543;
        break L43;
       } else {
        $27 = 1;
        break L43;
       }
       break;
      }
      case 15:  {
       $544 = HEAP32[$18>>2]|0;
       $545 = (__Z7IsDigitj($544)|0);
       $546 = ($545|0)!=(0);
       if ($546) {
        $547 = $34;
        $548 = (21 - ($547))|0;
        $37 = $548;
        $549 = $19;
        $550 = $21;
        $551 = (0 - ($549))|0;
        $552 = (($550) + ($551)|0);
        $21 = $552;
        break L43;
       } else {
        $27 = 1;
        break L43;
       }
       break;
      }
      case 16:  {
       $553 = HEAP32[$18>>2]|0;
       $554 = (__Z9iswalpha2i($553)|0);
       $555 = ($554|0)!=(0);
       if ($555) {
        $27 = 1;
        break L43;
       } else {
        $556 = $33;
        $557 = (21 - ($556))|0;
        $37 = $557;
        $558 = $19;
        $559 = $21;
        $560 = (0 - ($558))|0;
        $561 = (($559) + ($560)|0);
        $21 = $561;
        break L43;
       }
       break;
      }
      case 28:  {
       $562 = $12;
       $563 = ((($562)) + 1|0);
       $12 = $563;
       $564 = HEAP8[$562>>0]|0;
       $565 = $564 << 24 >> 24;
       $38 = $565;
       $566 = $38;
       $567 = ($566|0)==(3);
       if (!($567)) {
        $568 = $38;
        $569 = $568 & 240;
        $570 = ($569|0)==(32);
        if (!($570)) {
         break L43;
        }
       }
       $571 = $9;
       $572 = HEAP32[$571>>2]|0;
       $573 = $10;
       $574 = $572;
       $575 = $573;
       $576 = (($574) - ($575))|0;
       $577 = (($576) + 1)|0;
       $25 = $577;
       $578 = $10;
       $579 = ((($578)) + -1|0);
       $580 = $25;
       _memcpy(($46|0),($579|0),($580|0))|0;
       $581 = $25;
       $582 = (($46) + ($581)|0);
       HEAP8[$582>>0] = 32;
       $583 = $25;
       $584 = (($583) + 1)|0;
       $585 = (($46) + ($584)|0);
       HEAP8[$585>>0] = 0;
       $586 = $8;
       $587 = ((($46)) + 1|0);
       (__Z11LookupFlagsP10TranslatorPKcPPj($586,$587,$40)|0);
       $588 = $38;
       $589 = ($588|0)==(3);
       if ($589) {
        $590 = HEAP32[$40>>2]|0;
        $591 = HEAP32[$590>>2]|0;
        $592 = $591 & -2147483648;
        $593 = ($592|0)!=(0);
        if ($593) {
         $594 = HEAP32[$40>>2]|0;
         $595 = ((($594)) + 4|0);
         $596 = HEAP32[$595>>2]|0;
         $597 = $596 & 16384;
         $598 = ($597|0)!=(0);
         if (!($598)) {
          $37 = 23;
          break L43;
         }
        }
       }
       $599 = HEAP32[$40>>2]|0;
       $600 = HEAP32[$599>>2]|0;
       $601 = $38;
       $602 = $601 & 15;
       $603 = (14 + ($602))|0;
       $604 = 1 << $603;
       $605 = $600 & $604;
       $606 = ($605|0)!=(0);
       if ($606) {
        $37 = 23;
        break L43;
       } else {
        $27 = 1;
        break L43;
       }
       break;
      }
      case 21:  {
       $30 = 1;
       while(1) {
        $607 = $12;
        $608 = HEAP8[$607>>0]|0;
        $609 = $608 << 24 >> 24;
        $610 = ($609|0)==(21);
        if (!($610)) {
         break;
        }
        $611 = $12;
        $612 = ((($611)) + 1|0);
        $12 = $612;
        $613 = $30;
        $614 = (($613) + 1)|0;
        $30 = $614;
       }
       $615 = $30;
       $616 = $8;
       $617 = ((($616)) + 8328|0);
       $618 = HEAP32[$617>>2]|0;
       $619 = ($615|0)<=($618|0);
       if ($619) {
        $620 = $30;
        $621 = (18 + ($620))|0;
        $622 = $34;
        $623 = (($621) - ($622))|0;
        $37 = $623;
        break L43;
       } else {
        $27 = 1;
        break L43;
       }
       break;
      }
      case 10:  {
       $624 = $8;
       $625 = ((($624)) + 8332|0);
       $626 = HEAP32[$625>>2]|0;
       $627 = ($626|0)>(0);
       if ($627) {
        $37 = 19;
        break L43;
       } else {
        $27 = 1;
        break L43;
       }
       break;
      }
      case 29:  {
       $628 = $21;
       $629 = $19;
       $630 = (0 - ($629))|0;
       $631 = (($628) + ($630)|0);
       $632 = ((($631)) + -1|0);
       $54 = $632;
       while(1) {
        $633 = HEAP32[$18>>2]|0;
        $634 = ($633|0)!=(32);
        if (!($634)) {
         break;
        }
        $635 = $8;
        $636 = HEAP32[$18>>2]|0;
        $637 = (__ZL8IsLetterP10Translatorii($635,$636,7)|0);
        $638 = ($637|0)!=(0);
        if ($638) {
         label = 169;
         break;
        }
        $639 = $54;
        $640 = (__Z8utf8_in2PiPKci($18,$639,1)|0);
        $641 = $54;
        $642 = (0 - ($640))|0;
        $643 = (($641) + ($642)|0);
        $54 = $643;
       }
       if ((label|0) == 169) {
        label = 0;
        $27 = 1;
       }
       $644 = $27;
       $645 = ($644|0)!=(0);
       if ($645) {
        break L43;
       }
       $37 = 3;
       break L43;
       break;
      }
      case 26:  {
       $646 = $8;
       $647 = ((($646)) + 8304|0);
       $648 = HEAP32[$647>>2]|0;
       $649 = ($648|0)!=(0);
       if ($649) {
        $37 = 1;
        break L43;
       } else {
        $27 = 1;
        break L43;
       }
       break;
      }
      case 19:  {
       $650 = $14;
       $651 = $650 & 2;
       $652 = ($651|0)!=(0);
       if ($652) {
        $37 = 1;
        break L43;
       } else {
        $27 = 1;
        break L43;
       }
       break;
      }
      case 46:  {
       $653 = $21;
       $24 = $653;
       while(1) {
        $654 = $24;
        $655 = HEAP8[$654>>0]|0;
        $656 = $655 << 24 >> 24;
        $657 = ($656|0)!=(32);
        if (!($657)) {
         break;
        }
        $658 = $24;
        $659 = HEAP8[$658>>0]|0;
        $660 = $659 << 24 >> 24;
        $661 = ($660|0)==(46);
        if ($661) {
         label = 182;
         break;
        }
        $662 = $24;
        $663 = ((($662)) + -1|0);
        $24 = $663;
       }
       if ((label|0) == 182) {
        label = 0;
        $37 = 50;
       }
       $664 = $24;
       $665 = HEAP8[$664>>0]|0;
       $666 = $665 << 24 >> 24;
       $667 = ($666|0)==(32);
       if (!($667)) {
        break L43;
       }
       $27 = 1;
       break L43;
       break;
      }
      case 45:  {
       $668 = $17;
       $669 = $668&255;
       $670 = ($669|0)==(45);
       do {
        if (!($670)) {
         $671 = $17;
         $672 = $671&255;
         $673 = ($672|0)==(32);
         if ($673) {
          $674 = $14;
          $675 = $674 & 128;
          $676 = ($675|0)!=(0);
          if ($676) {
           break;
          }
         }
         $27 = 1;
         break L43;
        }
       } while(0);
       $677 = $33;
       $678 = (22 - ($677))|0;
       $37 = $678;
       break L43;
       break;
      }
      default: {
       $679 = $17;
       $680 = $679&255;
       $681 = $16;
       $682 = $681&255;
       $683 = ($680|0)==($682|0);
       if (!($683)) {
        $27 = 1;
        break L43;
       }
       $684 = $17;
       $685 = $684&255;
       $686 = ($685|0)==(32);
       if ($686) {
        $37 = 4;
        break L43;
       }
       $687 = $17;
       $688 = $687&255;
       $689 = $688 & 192;
       $690 = ($689|0)!=(128);
       if (!($690)) {
        break L43;
       }
       $691 = $34;
       $692 = (21 - ($691))|0;
       $37 = $692;
       break L43;
      }
      }
     } while(0);
     break;
    }
    default: {
    }
    }
   } while(0);
   $693 = $27;
   $694 = ($693|0)==(0);
   if (!($694)) {
    continue;
   }
   $695 = $37;
   $696 = HEAP32[$41>>2]|0;
   $697 = (($696) + ($695))|0;
   HEAP32[$41>>2] = $697;
  }
  $698 = $27;
  $699 = ($698|0)==(2);
  $700 = $28;
  $701 = ($700|0)==(0);
  $or$cond6 = $699 & $701;
  do {
   if ($or$cond6) {
    $702 = $39;
    $703 = ($702|0)==(0);
    if (!($703)) {
     $704 = $21;
     $705 = ((($704)) + -1|0);
     $706 = HEAP8[$705>>0]|0;
     $707 = $706 << 24 >> 24;
     $708 = ($707|0)==(32);
     if (!($708)) {
      break;
     }
    }
    $709 = $39;
    $710 = ($709|0)!=(0);
    if ($710) {
     $711 = HEAP32[$41>>2]|0;
     $712 = (($711) + 4)|0;
     HEAP32[$41>>2] = $712;
    }
    $713 = HEAP32[$41>>2]|0;
    $714 = HEAP32[10461]|0;
    $715 = ($713|0)>=($714|0);
    if ($715) {
     ;HEAP32[41844>>2]=HEAP32[$41>>2]|0;HEAP32[41844+4>>2]=HEAP32[$41+4>>2]|0;HEAP32[41844+8>>2]=HEAP32[$41+8>>2]|0;HEAP32[41844+12>>2]=HEAP32[$41+12>>2]|0;
     $716 = $29;
     $42 = $716;
    }
    $717 = HEAP32[19154]|0;
    $718 = $717 & 8;
    $719 = ($718|0)!=(0);
    if ($719) {
     $720 = HEAP32[$41>>2]|0;
     $721 = ($720|0)>(0);
     if ($721) {
      $722 = $14;
      $723 = $722 & 268435456;
      $724 = ($723|0)==(0);
      if ($724) {
       $725 = HEAP32[$41>>2]|0;
       $55 = $725;
       $726 = $11;
       $727 = ($726|0)>(1);
       if ($727) {
        $728 = $55;
        $729 = (($728) + 35)|0;
        $55 = $729;
       }
       $730 = ((($41)) + 4|0);
       $731 = HEAP32[$730>>2]|0;
       __Z14DecodePhonemesPKcPc($731,$56);
       $732 = HEAP32[19151]|0;
       $733 = $55;
       $734 = $45;
       $735 = $11;
       $736 = $23;
       $737 = $14;
       $738 = (__Z10DecodeRulePKciPci($734,$735,$736,$737)|0);
       HEAP32[$vararg_buffer>>2] = $733;
       $vararg_ptr8 = ((($vararg_buffer)) + 4|0);
       HEAP32[$vararg_ptr8>>2] = $738;
       $vararg_ptr9 = ((($vararg_buffer)) + 8|0);
       HEAP32[$vararg_ptr9>>2] = $56;
       (_fprintf($732,18566,$vararg_buffer)|0);
      }
     }
    }
   }
  } while(0);
  while(1) {
   $739 = $12;
   $740 = ((($739)) + 1|0);
   $12 = $740;
   $741 = HEAP8[$739>>0]|0;
   $742 = $741 << 24 >> 24;
   $743 = ($742|0)!=(0);
   if (!($743)) {
    continue L5;
   }
  }
 }
 $744 = $11;
 $745 = $42;
 $746 = (($745) + ($744))|0;
 $42 = $746;
 $747 = $42;
 $748 = ($747|0)==(0);
 $$7 = $748 ? 1 : $746;
 $42 = $$7;
 $749 = $42;
 $750 = $9;
 $751 = HEAP32[$750>>2]|0;
 $752 = (($751) + ($749)|0);
 HEAP32[$750>>2] = $752;
 $753 = HEAP32[10461]|0;
 $754 = ($753|0)==(0);
 if ($754) {
  HEAP32[(41848)>>2] = 122378;
 }
 $755 = $13;
 ;HEAP32[$755>>2]=HEAP32[41844>>2]|0;HEAP32[$755+4>>2]=HEAP32[41844+4>>2]|0;HEAP32[$755+8>>2]=HEAP32[41844+8>>2]|0;HEAP32[$755+12>>2]=HEAP32[41844+12>>2]|0;
 STACKTOP = sp;return;
}
function __ZL13IsLetterGroupP10TranslatorPcii($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $11 = 0;
 $12 = $7;
 $13 = $5;
 $14 = ((($13)) + 4908|0);
 $15 = (($14) + ($12<<2)|0);
 $16 = HEAP32[$15>>2]|0;
 $9 = $16;
 $17 = $9;
 $18 = ($17|0)==(0|0);
 if ($18) {
  $4 = 0;
  $65 = $4;
  STACKTOP = sp;return ($65|0);
 }
 L4: while(1) {
  $19 = $9;
  $20 = HEAP8[$19>>0]|0;
  $21 = $20 << 24 >> 24;
  $22 = ($21|0)!=(7);
  if (!($22)) {
   label = 15;
   break;
  }
  $23 = $8;
  $24 = ($23|0)!=(0);
  if ($24) {
   $25 = $9;
   $26 = (_strlen($25)|0);
   $11 = $26;
   $27 = $6;
   $28 = $11;
   $29 = (0 - ($28))|0;
   $30 = (($27) + ($29)|0);
   $31 = ((($30)) + 1|0);
   $10 = $31;
  } else {
   $32 = $6;
   $10 = $32;
  }
  while(1) {
   $33 = $9;
   $34 = HEAP8[$33>>0]|0;
   $35 = $34 << 24 >> 24;
   $36 = $10;
   $37 = HEAP8[$36>>0]|0;
   $38 = $37 << 24 >> 24;
   $39 = ($35|0)==($38|0);
   if (!($39)) {
    break;
   }
   $40 = $10;
   $41 = HEAP8[$40>>0]|0;
   $42 = $41 << 24 >> 24;
   $43 = ($42|0)!=(0);
   if (!($43)) {
    break;
   }
   $44 = $10;
   $45 = ((($44)) + 1|0);
   $10 = $45;
   $46 = $9;
   $47 = ((($46)) + 1|0);
   $9 = $47;
  }
  $48 = $9;
  $49 = HEAP8[$48>>0]|0;
  $50 = $49 << 24 >> 24;
  $51 = ($50|0)==(0);
  if ($51) {
   break;
  }
  while(1) {
   $60 = $9;
   $61 = ((($60)) + 1|0);
   $9 = $61;
   $62 = HEAP8[$60>>0]|0;
   $63 = $62 << 24 >> 24;
   $64 = ($63|0)!=(0);
   if (!($64)) {
    continue L4;
   }
  }
 }
 if ((label|0) == 15) {
  $4 = 0;
  $65 = $4;
  STACKTOP = sp;return ($65|0);
 }
 $52 = $8;
 $53 = ($52|0)!=(0);
 if ($53) {
  $54 = $11;
  $4 = $54;
  $65 = $4;
  STACKTOP = sp;return ($65|0);
 } else {
  $55 = $10;
  $56 = $6;
  $57 = $55;
  $58 = $56;
  $59 = (($57) - ($58))|0;
  $4 = $59;
  $65 = $4;
  STACKTOP = sp;return ($65|0);
 }
 return (0)|0;
}
function __Z11LookupFlagsP10TranslatorPKcPPj($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(128|0);
 $6 = sp + 16|0;
 $7 = sp;
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $8 = $4;
 HEAP32[$7>>2] = $8;
 HEAP32[(41864)>>2] = 0;
 HEAP32[10465] = 0;
 $9 = $3;
 (__Z14LookupDictListP10TranslatorPPcS1_PjiP8WORD_TAB($9,$7,$6,41860,0,0)|0);
 $10 = $5;
 HEAP32[$10>>2] = 41860;
 $11 = HEAP32[10465]|0;
 STACKTOP = sp;return ($11|0);
}
function __Z14LookupDictListP10TranslatorPPcS1_PjiP8WORD_TAB($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0;
 var $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0;
 var $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0;
 var $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0;
 var $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
 var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0;
 var $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond = 0, $vararg_buffer = 0, $vararg_buffer2 = 0, $vararg_ptr5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 240|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(240|0);
 $vararg_buffer2 = sp + 8|0;
 $vararg_buffer = sp;
 $20 = sp + 72|0;
 $21 = sp + 16|0;
 $7 = $0;
 $8 = $1;
 $9 = $2;
 $10 = $3;
 $11 = $4;
 $12 = $5;
 $13 = 0;
 $22 = $8;
 $23 = HEAP32[$22>>2]|0;
 $15 = $23;
 $16 = $23;
 while(1) {
  $24 = $16;
  $25 = (__Z11utf8_nbytesPKc($24)|0);
  $18 = $25;
  $26 = $16;
  $27 = (($26) + ($25)|0);
  $28 = HEAP8[$27>>0]|0;
  $29 = $28 << 24 >> 24;
  $30 = ($29|0)==(32);
  if ($30) {
   $31 = $18;
   $32 = (($31) + 1)|0;
   $33 = $16;
   $34 = (($33) + ($32)|0);
   $35 = HEAP8[$34>>0]|0;
   $36 = $35 << 24 >> 24;
   $37 = ($36|0)==(46);
   $250 = $37;
  } else {
   $250 = 0;
  }
  $38 = $13;
  if (!($250)) {
   break;
  }
  $39 = (($20) + ($38)|0);
  $40 = $16;
  $41 = $18;
  _memcpy(($39|0),($40|0),($41|0))|0;
  $42 = $18;
  $43 = $13;
  $44 = (($43) + ($42))|0;
  $13 = $44;
  $45 = $13;
  $46 = (($45) + 1)|0;
  $13 = $46;
  $47 = (($20) + ($45)|0);
  HEAP8[$47>>0] = 46;
  $48 = $18;
  $49 = (($48) + 3)|0;
  $50 = $16;
  $51 = (($50) + ($49)|0);
  $16 = $51;
 }
 $52 = ($38|0)>(0);
 if ($52) {
  $18 = 0;
  while(1) {
   $53 = $18;
   $54 = $16;
   $55 = (($54) + ($53)|0);
   $56 = HEAP8[$55>>0]|0;
   $17 = $56;
   $57 = $56&255;
   $58 = ($57|0)!=(0);
   if (!($58)) {
    break;
   }
   $59 = $17;
   $60 = $59&255;
   $61 = ($60|0)!=(32);
   if (!($61)) {
    break;
   }
   $62 = $18;
   $63 = (($62) + 1)|0;
   $18 = $63;
  }
  $64 = $13;
  $65 = (($20) + ($64)|0);
  $66 = $16;
  $67 = $18;
  _memcpy(($65|0),($66|0),($67|0))|0;
  $68 = $13;
  $69 = $18;
  $70 = (($68) + ($69))|0;
  $71 = (($20) + ($70)|0);
  HEAP8[$71>>0] = 0;
  $72 = $7;
  $73 = $16;
  $74 = $9;
  $75 = $10;
  $76 = $11;
  $77 = $12;
  $78 = (__ZL11LookupDict2P10TranslatorPKcS2_PcPjiP8WORD_TAB($72,$20,$73,$74,$75,$76,$77)|0);
  $14 = $78;
  $79 = $14;
  $80 = ($79|0)!=(0|0);
  if ($80) {
   $81 = $10;
   $82 = HEAP32[$81>>2]|0;
   $83 = $82 | 128;
   HEAP32[$81>>2] = $83;
   $84 = $13;
   HEAP32[10458] = $84;
   $6 = 1;
   $249 = $6;
   STACKTOP = sp;return ($249|0);
  }
 }
 $13 = 0;
 while(1) {
  $85 = $13;
  $86 = ($85|0)<(159);
  if (!($86)) {
   break;
  }
  $87 = $15;
  $88 = ((($87)) + 1|0);
  $15 = $88;
  $89 = HEAP8[$87>>0]|0;
  $17 = $89;
  $90 = $89&255;
  $91 = ($90|0)==(0);
  if ($91) {
   break;
  }
  $92 = $17;
  $93 = $92&255;
  $94 = ($93|0)==(32);
  if ($94) {
   break;
  }
  $95 = $17;
  $96 = $95&255;
  $97 = ($96|0)==(46);
  $98 = $13;
  $99 = ($98|0)>(0);
  $or$cond = $97 & $99;
  if ($or$cond) {
   $100 = $13;
   $101 = (($100) - 1)|0;
   $102 = (($20) + ($101)|0);
   $103 = HEAP8[$102>>0]|0;
   $104 = $103 << 24 >> 24;
   $105 = (__Z9IsDigit09j($104)|0);
   $106 = ($105|0)!=(0);
   if ($106) {
    break;
   }
  }
  $107 = $17;
  $108 = $13;
  $109 = (($20) + ($108)|0);
  HEAP8[$109>>0] = $107;
  $110 = $13;
  $111 = (($110) + 1)|0;
  $13 = $111;
 }
 $112 = $13;
 $113 = (($20) + ($112)|0);
 HEAP8[$113>>0] = 0;
 $114 = $7;
 $115 = $15;
 $116 = $9;
 $117 = $10;
 $118 = $11;
 $119 = $12;
 $120 = (__ZL11LookupDict2P10TranslatorPKcS2_PcPjiP8WORD_TAB($114,$20,$115,$116,$117,$118,$119)|0);
 $14 = $120;
 $121 = $10;
 $122 = HEAP32[$121>>2]|0;
 $123 = $122 & 134217728;
 $124 = ($123|0)!=(0);
 do {
  if ($124) {
   $125 = $9;
   $126 = $7;
   $127 = ((($126)) + 380|0);
   $128 = (_strcmp($125,$127)|0);
   $129 = ($128|0)==(0);
   $130 = $7;
   if (!($129)) {
    $139 = ((($130)) + 380|0);
    $140 = $9;
    __Z8strncpy0PcPKci($139,$140,20);
    $141 = $7;
    $142 = ((($141)) + 400|0);
    HEAP32[$142>>2] = 1;
    break;
   }
   $131 = ((($130)) + 400|0);
   $132 = HEAP32[$131>>2]|0;
   $133 = (($132) + 1)|0;
   HEAP32[$131>>2] = $133;
   $134 = $7;
   $135 = ((($134)) + 400|0);
   $136 = HEAP32[$135>>2]|0;
   $137 = ($136|0)>(3);
   if ($137) {
    $138 = $9;
    HEAP8[$138>>0] = 0;
   }
  } else {
   $143 = $7;
   $144 = ((($143)) + 400|0);
   HEAP32[$144>>2] = 0;
  }
 } while(0);
 $145 = $14;
 $146 = ($145|0)==(0|0);
 if ($146) {
  $147 = $10;
  $148 = ((($147)) + 4|0);
  $149 = HEAP32[$148>>2]|0;
  $150 = $149 & 2048;
  $151 = ($150|0)!=(0);
  if ($151) {
   $16 = $20;
   $152 = $16;
   $153 = HEAP8[$152>>0]|0;
   $154 = $153 << 24 >> 24;
   $155 = ($154|0)==(95);
   if ($155) {
    $156 = $16;
    $157 = ((($156)) + 1|0);
    $16 = $157;
   }
   $158 = $16;
   $159 = (__Z7utf8_inPiPKc($21,$158)|0);
   $19 = $159;
   $160 = $7;
   $161 = HEAP32[$21>>2]|0;
   $162 = $9;
   __Z20LookupAccentedLetterP10TranslatorjPc($160,$161,$162);
   $163 = $16;
   $164 = $19;
   $165 = (($163) + ($164)|0);
   $14 = $165;
  }
 }
 $166 = $14;
 $167 = ($166|0)==(0|0);
 do {
  if ($167) {
   $168 = $9;
   HEAP8[$168>>0] = 0;
   $169 = $11;
   $170 = $169 & 16;
   $171 = ($170|0)!=(0);
   if ($171) {
    $172 = $13;
    $173 = (($172) - 1)|0;
    $174 = (($20) + ($173)|0);
    $175 = HEAP8[$174>>0]|0;
    $176 = $175 << 24 >> 24;
    $177 = ($176|0)==(101);
    if ($177) {
     $178 = $13;
     $179 = (($178) - 1)|0;
     $180 = (($20) + ($179)|0);
     HEAP8[$180>>0] = 0;
     $181 = $7;
     $182 = $15;
     $183 = $9;
     $184 = $10;
     $185 = $11;
     $186 = $12;
     $187 = (__ZL11LookupDict2P10TranslatorPKcS2_PcPjiP8WORD_TAB($181,$20,$182,$183,$184,$185,$186)|0);
     $14 = $187;
     break;
    }
   }
   $188 = $11;
   $189 = $188 & 4096;
   $190 = ($189|0)!=(0);
   if ($190) {
    $191 = $13;
    $192 = (($191) - 1)|0;
    $193 = (($20) + ($192)|0);
    $194 = HEAP8[$193>>0]|0;
    $195 = $194 << 24 >> 24;
    $196 = $13;
    $197 = (($196) - 2)|0;
    $198 = (($20) + ($197)|0);
    $199 = HEAP8[$198>>0]|0;
    $200 = $199 << 24 >> 24;
    $201 = ($195|0)==($200|0);
    if ($201) {
     $202 = $13;
     $203 = (($202) - 1)|0;
     $204 = (($20) + ($203)|0);
     HEAP8[$204>>0] = 0;
     $205 = $7;
     $206 = $15;
     $207 = $9;
     $208 = $10;
     $209 = $11;
     $210 = $12;
     $211 = (__ZL11LookupDict2P10TranslatorPKcS2_PcPjiP8WORD_TAB($205,$20,$206,$207,$208,$209,$210)|0);
     $14 = $211;
    }
   }
  }
 } while(0);
 $212 = $14;
 $213 = ($212|0)!=(0|0);
 if (!($213)) {
  $248 = $9;
  HEAP8[$248>>0] = 0;
  $6 = 0;
  $249 = $6;
  STACKTOP = sp;return ($249|0);
 }
 $214 = $7;
 $215 = ((($214)) + 272|0);
 $216 = HEAP8[$215>>0]|0;
 $217 = ($216<<24>>24)!=(0);
 if ($217) {
  $218 = $10;
  $219 = HEAP32[$218>>2]|0;
  $220 = $219 ^ 536870912;
  HEAP32[$218>>2] = $220;
 }
 $221 = $10;
 $222 = HEAP32[$221>>2]|0;
 $223 = $222 & 536870912;
 $224 = ($223|0)!=(0);
 if (!($224)) {
  $6 = 1;
  $249 = $6;
  STACKTOP = sp;return ($249|0);
 }
 $225 = $11;
 $226 = $225 & 2;
 $227 = ($226|0)!=(0);
 if ($227) {
  HEAP8[119764] = 0;
  HEAP8[(119765)>>0] = 32;
  $228 = $9;
  HEAP32[$vararg_buffer>>2] = $228;
  (_sprintf((119766),25485,$vararg_buffer)|0);
  $229 = $8;
  $230 = HEAP32[$229>>2]|0;
  $15 = $230;
  $231 = $8;
  HEAP32[$231>>2] = (119766);
  $232 = HEAP32[19154]|0;
  $233 = $232 & 8;
  $234 = ($233|0)!=(0);
  if ($234) {
   $235 = $14;
   $236 = $15;
   $237 = $235;
   $238 = $236;
   $239 = (($237) - ($238))|0;
   $19 = $239;
   $240 = $15;
   $241 = $19;
   _memcpy(($20|0),($240|0),($241|0))|0;
   $242 = $19;
   $243 = (($20) + ($242)|0);
   HEAP8[$243>>0] = 0;
   $244 = HEAP32[19151]|0;
   $245 = $8;
   $246 = HEAP32[$245>>2]|0;
   HEAP32[$vararg_buffer2>>2] = $20;
   $vararg_ptr5 = ((($vararg_buffer2)) + 4|0);
   HEAP32[$vararg_ptr5>>2] = $246;
   (_fprintf($244,18579,$vararg_buffer2)|0);
  }
 }
 $247 = $9;
 HEAP8[$247>>0] = 0;
 $6 = 0;
 $249 = $6;
 STACKTOP = sp;return ($249|0);
}
function __ZL11LookupDict2P10TranslatorPKcS2_PcPjiP8WORD_TAB($0,$1,$2,$3,$4,$5,$6) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0;
 var $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0;
 var $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0;
 var $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0;
 var $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0;
 var $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0;
 var $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0;
 var $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0;
 var $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0;
 var $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0;
 var $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0;
 var $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0;
 var $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0;
 var $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0;
 var $56 = 0, $57 = 0, $58 = 0, $59 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0;
 var $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0;
 var $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond = 0, $or$cond3 = 0, $vararg_buffer = 0, $vararg_buffer12 = 0, $vararg_buffer5 = 0, $vararg_buffer9 = 0, $vararg_ptr15 = 0, $vararg_ptr4 = 0, $vararg_ptr8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 592|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(592|0);
 $vararg_buffer12 = sp + 24|0;
 $vararg_buffer9 = sp + 16|0;
 $vararg_buffer5 = sp + 8|0;
 $vararg_buffer = sp;
 $28 = sp + 52|0;
 $33 = sp + 416|0;
 $34 = sp + 336|0;
 $35 = sp + 136|0;
 $8 = $0;
 $9 = $1;
 $10 = $2;
 $11 = $3;
 $12 = $4;
 $13 = $5;
 $14 = $6;
 $23 = 0;
 $31 = 0;
 $37 = $14;
 $38 = ($37|0)!=(0|0);
 if ($38) {
  $39 = $14;
  $40 = HEAP32[$39>>2]|0;
  $31 = $40;
 }
 $41 = $12;
 $42 = ((($41)) + 4|0);
 $43 = HEAP32[$42>>2]|0;
 $44 = $43 & 1073741824;
 $32 = $44;
 $45 = $9;
 $30 = $45;
 $46 = $8;
 $47 = ((($46)) + 332|0);
 $48 = HEAP32[$47>>2]|0;
 $49 = ($48|0)>(0);
 if ($49) {
  $50 = $9;
  __Z8strncpy0PcPKci($33,$50,160);
  $51 = $8;
  $52 = (__Z17TransposeAlphabetP10TranslatorPc($51,$33)|0);
  $19 = $52;
  $9 = $33;
 } else {
  $53 = $9;
  $54 = (_strlen($53)|0);
  $19 = $54;
 }
 $55 = $9;
 $56 = (__Z14HashDictionaryPKc($55)|0);
 $17 = $56;
 $57 = $17;
 $58 = $8;
 $59 = ((($58)) + 812|0);
 $60 = (($59) + ($57<<2)|0);
 $61 = HEAP32[$60>>2]|0;
 $15 = $61;
 $62 = $15;
 $63 = ($62|0)==(0|0);
 if ($63) {
  $64 = $12;
  $65 = ($64|0)!=(0|0);
  if ($65) {
   $66 = $12;
   HEAP32[$66>>2] = 0;
  }
  $7 = 0;
  $413 = $7;
  STACKTOP = sp;return ($413|0);
 }
 L14: while(1) {
  $67 = $15;
  $68 = HEAP8[$67>>0]|0;
  $69 = $68 << 24 >> 24;
  $70 = ($69|0)!=(0);
  if (!($70)) {
   label = 104;
   break;
  }
  $71 = $15;
  $72 = $15;
  $73 = HEAP8[$72>>0]|0;
  $74 = $73 << 24 >> 24;
  $75 = (($71) + ($74)|0);
  $16 = $75;
  $76 = $15;
  $77 = ((($76)) + 1|0);
  $78 = HEAP8[$77>>0]|0;
  $79 = $78 << 24 >> 24;
  $80 = $79 & 127;
  $81 = $19;
  $82 = ($80|0)!=($81|0);
  if (!($82)) {
   $83 = $9;
   $84 = $15;
   $85 = ((($84)) + 2|0);
   $86 = $19;
   $87 = $86 & 63;
   $88 = (_memcmp($83,$85,$87)|0);
   $89 = ($88|0)!=(0);
   if (!($89)) {
    $91 = $10;
    $29 = $91;
    $21 = 0;
    $22 = 0;
    $92 = $15;
    $93 = ((($92)) + 1|0);
    $94 = HEAP8[$93>>0]|0;
    $95 = $94 << 24 >> 24;
    $96 = $95 & 128;
    $25 = $96;
    $97 = $15;
    $98 = ((($97)) + 1|0);
    $99 = HEAP8[$98>>0]|0;
    $100 = $99 << 24 >> 24;
    $101 = $100 & 63;
    $102 = (($101) + 2)|0;
    $103 = $15;
    $104 = (($103) + ($102)|0);
    $15 = $104;
    $105 = $25;
    $106 = ($105|0)!=(0);
    $107 = $11;
    if ($106) {
     HEAP8[$107>>0] = 0;
     $18 = 0;
    } else {
     $108 = $15;
     (_strcpy($107,$108)|0);
     $109 = $15;
     $110 = (_strlen($109)|0);
     $18 = $110;
     $111 = $18;
     $112 = (($111) + 1)|0;
     $113 = $15;
     $114 = (($113) + ($112)|0);
     $15 = $114;
    }
    while(1) {
     $115 = $15;
     $116 = $16;
     $117 = ($115>>>0)<($116>>>0);
     if (!($117)) {
      break;
     }
     $118 = $15;
     $119 = ((($118)) + 1|0);
     $15 = $119;
     $120 = HEAP8[$118>>0]|0;
     $20 = $120;
     $121 = $20;
     $122 = $121&255;
     $123 = ($122|0)>=(100);
     $124 = $20;
     $125 = $124&255;
     if ($123) {
      $126 = ($125|0)>=(132);
      $127 = $8;
      $128 = ((($127)) + 440|0);
      $129 = HEAP32[$128>>2]|0;
      $130 = $20;
      $131 = $130&255;
      if ($126) {
       $132 = (($131) - 132)|0;
       $133 = 1 << $132;
       $134 = $129 & $133;
       $135 = ($134|0)!=(0);
       if (!($135)) {
        continue;
       }
       $23 = 1;
       continue;
      } else {
       $136 = (($131) - 100)|0;
       $137 = 1 << $136;
       $138 = $129 & $137;
       $139 = ($138|0)==(0);
       if (!($139)) {
        continue;
       }
       $23 = 1;
       continue;
      }
     }
     $140 = ($125|0)>(80);
     if (!($140)) {
      $177 = $20;
      $178 = $177&255;
      $179 = ($178|0)>(64);
      if ($179) {
       $180 = $21;
       $181 = $180 & -16;
       $182 = $20;
       $183 = $182&255;
       $184 = $183 & 15;
       $185 = $181 | $184;
       $21 = $185;
       $186 = $20;
       $187 = $186&255;
       $188 = $187 & 12;
       $189 = ($188|0)==(12);
       if (!($189)) {
        continue;
       }
       $190 = $21;
       $191 = $190 | 512;
       $21 = $191;
       continue;
      }
      $192 = $20;
      $193 = $192&255;
      $194 = ($193|0)>=(32);
      $195 = $20;
      $196 = $195&255;
      if ($194) {
       $197 = (($196) - 32)|0;
       $198 = 1 << $197;
       $199 = $22;
       $200 = $199 | $198;
       $22 = $200;
       continue;
      } else {
       $201 = 1 << $196;
       $202 = $21;
       $203 = $202 | $201;
       $21 = $203;
       continue;
      }
     }
     $141 = $16;
     $142 = $15;
     $143 = $141;
     $144 = $142;
     $145 = (($143) - ($144))|0;
     $24 = $145;
     $146 = $20;
     $147 = $146&255;
     $148 = (($147) - 80)|0;
     $26 = $148;
     $149 = $14;
     $150 = ($149|0)!=(0|0);
     L44: do {
      if ($150) {
       $27 = 0;
       while(1) {
        $151 = $27;
        $152 = $26;
        $153 = ($151|0)<=($152|0);
        if (!($153)) {
         break L44;
        }
        $154 = $27;
        $155 = $14;
        $156 = (($155) + (($154*12)|0)|0);
        $157 = HEAP32[$156>>2]|0;
        $158 = $157 & 3072;
        $159 = ($158|0)!=(0);
        if ($159) {
         $23 = 1;
        }
        $160 = $27;
        $161 = (($160) + 1)|0;
        $27 = $161;
       }
      }
     } while(0);
     $162 = $10;
     $163 = $15;
     $164 = $24;
     $165 = (_memcmp($162,$163,$164)|0);
     $166 = ($165|0)!=(0);
     if ($166) {
      $23 = 1;
     }
     $167 = $23;
     $168 = ($167|0)!=(0);
     if ($168) {
      label = 34;
      break;
     }
     $170 = $21;
     $171 = $170 | 128;
     $21 = $171;
     $172 = $26;
     HEAP32[10458] = $172;
     $173 = $16;
     $15 = $173;
     $174 = $10;
     $175 = $24;
     $176 = (($174) + ($175)|0);
     $29 = $176;
    }
    if ((label|0) == 34) {
     label = 0;
     $169 = $16;
     $15 = $169;
    }
    $204 = $23;
    $205 = ($204|0)!=(0);
    if ($205) {
     $23 = 0;
     continue;
    }
    $206 = $13;
    $207 = $206 & 4;
    $208 = ($207|0)==(0);
    if ($208) {
     $209 = $22;
     $210 = $209 & 65536;
     $211 = ($210|0)!=(0);
     if ($211) {
      continue;
     }
    }
    $212 = $13;
    $213 = $212 & 1024;
    $214 = ($213|0)!=(0);
    if ($214) {
     $215 = $22;
     $216 = $215 & 49152;
     $217 = ($216|0)!=(0);
     if ($217) {
      continue;
     }
    }
    $218 = $13;
    $219 = $218 & 4;
    $220 = ($219|0)!=(0);
    if ($220) {
     $221 = $22;
     $222 = $221 & 16384;
     $223 = ($222|0)!=(0);
     if ($223) {
      continue;
     }
     $224 = $22;
     $225 = $224 & 32768;
     $226 = ($225|0)!=(0);
     if ($226) {
      $227 = $13;
      $228 = $227 & 8;
      $229 = ($228|0)==(0);
      if ($229) {
       continue;
      }
     }
    }
    $230 = $22;
    $231 = $230 & 4096;
    $232 = ($231|0)!=(0);
    if ($232) {
     $233 = $31;
     $234 = $233 & 16384;
     $235 = ($234|0)!=(0);
     if (!($235)) {
      continue;
     }
    }
    $236 = $22;
    $237 = $236 & 512;
    $238 = ($237|0)!=(0);
    if ($238) {
     $239 = $31;
     $240 = $239 & 2;
     $241 = ($240|0)!=(0);
     if (!($241)) {
      continue;
     }
    }
    $242 = $22;
    $243 = $242 & 1024;
    $244 = ($243|0)!=(0);
    if ($244) {
     $245 = $31;
     $246 = $245 & 1;
     $247 = ($246|0)!=(0);
     if (!($247)) {
      continue;
     }
    }
    $248 = $21;
    $249 = $248 & 33554432;
    $250 = ($249|0)!=(0);
    if ($250) {
     $251 = $31;
     $252 = $251 & 65536;
     $253 = ($252|0)!=(0);
     if (!($253)) {
      continue;
     }
    }
    $254 = $22;
    $255 = $254 & 131072;
    $256 = ($255|0)!=(0);
    if ($256) {
     $257 = $29;
     $258 = HEAP32[19149]|0;
     $259 = ((($258)) + 8324|0);
     $260 = HEAP32[$259>>2]|0;
     $261 = ($257>>>0)<($260>>>0);
     $262 = $32;
     $263 = ($262|0)==(0);
     $or$cond = $261 & $263;
     if ($or$cond) {
      continue;
     }
    }
    $264 = $22;
    $265 = $264 & 262144;
    $266 = ($265|0)!=(0);
    if ($266) {
     $267 = $14;
     $268 = HEAP32[$267>>2]|0;
     $269 = $268 & 512;
     $270 = ($269|0)!=(0);
     if (!($270)) {
      continue;
     }
    }
    $271 = $22;
    $272 = $271 & 8192;
    $273 = ($272|0)!=(0);
    if ($273) {
     $274 = HEAP32[19149]|0;
     $275 = ((($274)) + 8360|0);
     $276 = HEAP32[$275>>2]|0;
     $277 = $276 & 524288;
     $278 = ($277|0)!=(0);
     if (!($278)) {
      continue;
     }
    }
    $279 = $22;
    $280 = $279 & 16;
    $281 = ($280|0)!=(0);
    do {
     if ($281) {
      $282 = $8;
      $283 = ((($282)) + 8304|0);
      $284 = HEAP32[$283>>2]|0;
      $285 = ($284|0)!=(0);
      if (!($285)) {
       $286 = $8;
       $287 = ((($286)) + 8312|0);
       $288 = HEAP32[$287>>2]|0;
       $289 = ($288|0)!=(0);
       if (!($289)) {
        continue L14;
       }
       $290 = $13;
       $291 = $290 & 8;
       $292 = ($291|0)!=(0);
       if (!($292)) {
        continue L14;
       }
      }
      $293 = $8;
      $294 = ((($293)) + 324|0);
      $295 = HEAP32[$294>>2]|0;
      $296 = ($295|0)==(25966);
      if (!($296)) {
       break;
      }
      $297 = $8;
      $298 = ((($297)) + 8352|0);
      $299 = HEAP32[$298>>2]|0;
      $300 = $299 & 2097152;
      $301 = ($300|0)!=(0);
      if (!($301)) {
       break;
      }
      $302 = $13;
      $303 = $302 & 8;
      $304 = ($303|0)!=(0);
      if ($304) {
       continue L14;
      }
     }
    } while(0);
    $305 = $22;
    $306 = $305 & 64;
    $307 = ($306|0)!=(0);
    if ($307) {
     $308 = $8;
     $309 = ((($308)) + 8308|0);
     $310 = HEAP32[$309>>2]|0;
     $311 = ($310|0)!=(0);
     if (!($311)) {
      continue;
     }
    }
    $312 = $22;
    $313 = $312 & 32;
    $314 = ($313|0)!=(0);
    if ($314) {
     $315 = $8;
     $316 = ((($315)) + 8316|0);
     $317 = HEAP32[$316>>2]|0;
     $318 = ($317|0)!=(0);
     if (!($318)) {
      continue;
     }
     $319 = $13;
     $320 = $319 & 2048;
     $321 = ($320|0)!=(0);
     if ($321) {
      continue;
     }
    }
    $322 = $22;
    $323 = $322 & 524288;
    $324 = ($323|0)!=(0);
    if ($324) {
     $325 = $8;
     $326 = HEAP32[19149]|0;
     $327 = ($325|0)!=($326|0);
     if ($327) {
      continue;
     }
    }
    $328 = $21;
    $329 = $328 & 65536;
    $330 = ($329|0)!=(0);
    if (!($330)) {
     break;
    }
    $331 = $8;
    $332 = ((($331)) + 324|0);
    $333 = HEAP32[$332>>2]|0;
    $334 = ($333|0)==(26741);
    if (!($334)) {
     break;
    }
    $335 = $8;
    $336 = ((($335)) + 8352|0);
    $337 = HEAP32[$336>>2]|0;
    $338 = $337 & 32768;
    $339 = ($338|0)!=(0);
    if ($339) {
     break;
    } else {
     continue;
    }
   }
  }
  $90 = $16;
  $15 = $90;
 }
 if ((label|0) == 104) {
  $7 = 0;
  $413 = $7;
  STACKTOP = sp;return ($413|0);
 }
 $340 = $12;
 $341 = ($340|0)!=(0|0);
 if ($341) {
  $342 = $21;
  $343 = $342 | 1073741824;
  $344 = $12;
  HEAP32[$344>>2] = $343;
  $345 = $22;
  $346 = $12;
  $347 = ((($346)) + 4|0);
  HEAP32[$347>>2] = $345;
 }
 $348 = $18;
 $349 = ($348|0)==(0);
 if ($349) {
  $350 = HEAP32[19154]|0;
  $351 = $350 & 8;
  $352 = ($351|0)!=(0);
  if ($352) {
   $353 = $12;
   __Z22print_dictionary_flagsPjPci($353,$34,80);
   $354 = HEAP32[19151]|0;
   $355 = $30;
   HEAP32[$vararg_buffer>>2] = $355;
   $vararg_ptr4 = ((($vararg_buffer)) + 4|0);
   HEAP32[$vararg_ptr4>>2] = $34;
   (_fprintf($354,18596,$vararg_buffer)|0);
  }
  $7 = 0;
  $413 = $7;
  STACKTOP = sp;return ($413|0);
 }
 $356 = $12;
 $357 = ($356|0)!=(0|0);
 if ($357) {
  $358 = $12;
  $359 = HEAP32[$358>>2]|0;
  $360 = $359 | -2147483648;
  HEAP32[$358>>2] = $360;
 }
 $361 = HEAP32[19154]|0;
 $362 = $361 & 8;
 $363 = ($362|0)!=(0);
 if ($363) {
  $364 = $11;
  __Z14DecodePhonemesPKcPc($364,$35);
  $365 = $21;
  $366 = $365 & 536870912;
  $367 = ($366|0)==(0);
  if ($367) {
   $36 = 0;
  } else {
   $36 = 1;
  }
  $368 = $36;
  $369 = HEAP32[19149]|0;
  $370 = ((($369)) + 272|0);
  $371 = HEAP8[$370>>0]|0;
  $372 = $371 << 24 >> 24;
  $373 = ($368|0)==($372|0);
  if ($373) {
   $374 = $21;
   $375 = $374 & 128;
   $376 = ($375|0)!=(0);
   $377 = $14;
   $378 = ($377|0)!=(0|0);
   $or$cond3 = $376 & $378;
   if ($or$cond3) {
    $379 = $10;
    $380 = $29;
    $381 = $10;
    $382 = $380;
    $383 = $381;
    $384 = (($382) - ($383))|0;
    _memcpy(($33|0),($379|0),($384|0))|0;
    $385 = $29;
    $386 = $10;
    $387 = $385;
    $388 = $386;
    $389 = (($387) - ($388))|0;
    $390 = (($389) - 1)|0;
    $391 = (($33) + ($390)|0);
    HEAP8[$391>>0] = 0;
    $392 = HEAP32[19151]|0;
    $393 = $30;
    HEAP32[$vararg_buffer5>>2] = $393;
    $vararg_ptr8 = ((($vararg_buffer5)) + 4|0);
    HEAP32[$vararg_ptr8>>2] = $33;
    (_fprintf($392,18612,$vararg_buffer5)|0);
   } else {
    $394 = HEAP32[19151]|0;
    $395 = $30;
    HEAP32[$vararg_buffer9>>2] = $395;
    (_fprintf($394,18627,$vararg_buffer9)|0);
   }
   $396 = $12;
   __Z22print_dictionary_flagsPjPci($396,$34,80);
   $397 = HEAP32[19151]|0;
   HEAP32[$vararg_buffer12>>2] = $35;
   $vararg_ptr15 = ((($vararg_buffer12)) + 4|0);
   HEAP32[$vararg_ptr15>>2] = $34;
   (_fprintf($397,18638,$vararg_buffer12)|0);
  }
 }
 $398 = $9;
 $399 = (__Z7utf8_inPiPKc($28,$398)|0);
 $27 = $399;
 $400 = $27;
 $401 = $9;
 $402 = (($401) + ($400)|0);
 $403 = HEAP8[$402>>0]|0;
 $404 = $403 << 24 >> 24;
 $405 = ($404|0)==(0);
 if ($405) {
  $406 = HEAP32[$28>>2]|0;
  $407 = (__Z7IsAlphaj($406)|0);
  $408 = ($407|0)!=(0);
  if (!($408)) {
   $409 = $12;
   $410 = HEAP32[$409>>2]|0;
   $411 = $410 | 134217728;
   HEAP32[$409>>2] = $411;
  }
 }
 $412 = $29;
 $7 = $412;
 $413 = $7;
 STACKTOP = sp;return ($413|0);
}
function __Z17TransposeAlphabetP10TranslatorPc($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0;
 var $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 240|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(240|0);
 $5 = sp + 56|0;
 $20 = sp + 72|0;
 $3 = $0;
 $4 = $1;
 $21 = $4;
 $12 = $21;
 $14 = 1;
 $22 = $3;
 $23 = ((($22)) + 332|0);
 $24 = HEAP32[$23>>2]|0;
 $25 = (($24) - 1)|0;
 $8 = $25;
 $26 = $3;
 $27 = ((($26)) + 332|0);
 $28 = HEAP32[$27>>2]|0;
 $9 = $28;
 $29 = $3;
 $30 = ((($29)) + 328|0);
 $31 = HEAP32[$30>>2]|0;
 $10 = $31;
 $32 = $3;
 $33 = ((($32)) + 336|0);
 $34 = HEAP32[$33>>2]|0;
 $11 = $34;
 $35 = $10;
 $36 = $9;
 $37 = (($35) - ($36))|0;
 $38 = (($37) + 2)|0;
 $17 = $38;
 $19 = 0;
 L1: while(1) {
  $39 = $12;
  $40 = (__Z7utf8_inPiPKc($5,$39)|0);
  $41 = $12;
  $42 = (($41) + ($40)|0);
  $12 = $42;
  $43 = HEAP32[$5>>2]|0;
  $44 = ($43|0)!=(0);
  do {
   if ($44) {
    $45 = HEAP32[$5>>2]|0;
    $46 = $9;
    $47 = ($45|0)>=($46|0);
    if (!($47)) {
     label = 10;
     break L1;
    }
    $48 = HEAP32[$5>>2]|0;
    $49 = $10;
    $50 = ($48|0)<=($49|0);
    if (!($50)) {
     label = 10;
     break L1;
    }
    $51 = $11;
    $52 = ($51|0)==(0|0);
    $53 = HEAP32[$5>>2]|0;
    if ($52) {
     $54 = $8;
     $55 = (($53) - ($54))|0;
     $56 = $55&255;
     $57 = $19;
     $58 = (($57) + 1)|0;
     $19 = $58;
     $59 = (($20) + ($57)|0);
     HEAP8[$59>>0] = $56;
     break;
    }
    $60 = $9;
    $61 = (($53) - ($60))|0;
    $62 = $11;
    $63 = (($62) + ($61)|0);
    $64 = HEAP8[$63>>0]|0;
    $65 = $64 << 24 >> 24;
    $66 = ($65|0)>(0);
    if (!($66)) {
     label = 9;
     break L1;
    }
    $67 = HEAP32[$5>>2]|0;
    $68 = $9;
    $69 = (($67) - ($68))|0;
    $70 = $11;
    $71 = (($70) + ($69)|0);
    $72 = HEAP8[$71>>0]|0;
    $73 = $19;
    $74 = (($73) + 1)|0;
    $19 = $74;
    $75 = (($20) + ($73)|0);
    HEAP8[$75>>0] = $72;
   }
  } while(0);
  $76 = HEAP32[$5>>2]|0;
  $77 = ($76|0)!=(0);
  $78 = $19;
  $79 = ($78|0)<(160);
  $80 = $77 ? $79 : 0;
  if (!($80)) {
   break;
  }
 }
 if ((label|0) == 9) {
  $14 = 0;
 }
 else if ((label|0) == 10) {
  $14 = 0;
 }
 $81 = $19;
 $82 = (($20) + ($81)|0);
 HEAP8[$82>>0] = 0;
 $83 = $14;
 $84 = ($83|0)!=(0);
 if (!($84)) {
  $155 = $4;
  $156 = (_strlen($155)|0);
  $2 = $156;
  $157 = $2;
  STACKTOP = sp;return ($157|0);
 }
 $16 = 0;
 $15 = 0;
 $12 = $20;
 $13 = $20;
 while(1) {
  $85 = $12;
  $86 = ((($85)) + 1|0);
  $12 = $86;
  $87 = HEAP8[$85>>0]|0;
  $88 = $87 << 24 >> 24;
  HEAP32[$5>>2] = $88;
  $89 = ($88|0)!=(0);
  if (!($89)) {
   break;
  }
  $90 = $3;
  $91 = ((($90)) + 8300|0);
  $92 = HEAP32[$91>>2]|0;
  $18 = $92;
  $93 = ($92|0)!=(0|0);
  L23: do {
   if ($93) {
    $94 = HEAP32[$5>>2]|0;
    $95 = $12;
    $96 = HEAP8[$95>>0]|0;
    $97 = $96 << 24 >> 24;
    $98 = $97 << 8;
    $99 = (($94) + ($98))|0;
    $6 = $99;
    $7 = 0;
    while(1) {
     $100 = $6;
     $101 = $7;
     $102 = $18;
     $103 = (($102) + ($101<<1)|0);
     $104 = HEAP16[$103>>1]|0;
     $105 = $104 << 16 >> 16;
     $106 = ($100|0)>=($105|0);
     if (!($106)) {
      break L23;
     }
     $107 = $6;
     $108 = $7;
     $109 = $18;
     $110 = (($109) + ($108<<1)|0);
     $111 = HEAP16[$110>>1]|0;
     $112 = $111 << 16 >> 16;
     $113 = ($107|0)==($112|0);
     $114 = $7;
     if ($113) {
      break;
     }
     $119 = (($114) + 1)|0;
     $7 = $119;
    }
    $115 = $17;
    $116 = (($114) + ($115))|0;
    HEAP32[$5>>2] = $116;
    $117 = $12;
    $118 = ((($117)) + 1|0);
    $12 = $118;
   }
  } while(0);
  $120 = $16;
  $121 = $120 << 6;
  $122 = HEAP32[$5>>2]|0;
  $123 = $122 & 63;
  $124 = (($121) + ($123))|0;
  $16 = $124;
  $125 = $15;
  $126 = (($125) + 6)|0;
  $15 = $126;
  $127 = $15;
  $128 = ($127|0)>=(8);
  if (!($128)) {
   continue;
  }
  $129 = $15;
  $130 = (($129) - 8)|0;
  $15 = $130;
  $131 = $16;
  $132 = $15;
  $133 = $131 >> $132;
  $134 = $133&255;
  $135 = $13;
  $136 = ((($135)) + 1|0);
  $13 = $136;
  HEAP8[$135>>0] = $134;
 }
 $137 = $15;
 $138 = ($137|0)>(0);
 if ($138) {
  $139 = $16;
  $140 = $15;
  $141 = (8 - ($140))|0;
  $142 = $139 << $141;
  $143 = $142&255;
  $144 = $13;
  $145 = ((($144)) + 1|0);
  $13 = $145;
  HEAP8[$144>>0] = $143;
 }
 $146 = $13;
 HEAP8[$146>>0] = 0;
 $147 = $13;
 $148 = $147;
 $149 = $20;
 $150 = (($148) - ($149))|0;
 $7 = $150;
 $151 = $4;
 $152 = $7;
 _memcpy(($151|0),($20|0),($152|0))|0;
 $153 = $7;
 $154 = $153 | 64;
 $2 = $154;
 $157 = $2;
 STACKTOP = sp;return ($157|0);
}
function __Z16ChangeWordStressP10TranslatorPci($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0;
 var $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 336|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(336|0);
 $9 = sp + 4|0;
 $10 = sp;
 $11 = sp + 136|0;
 $12 = sp + 32|0;
 $3 = $0;
 $4 = $1;
 $5 = $2;
 HEAP32[$10>>2] = 0;
 $13 = $4;
 (_strcpy($11,$13)|0);
 $14 = $3;
 $15 = (__ZL14GetVowelStressP10TranslatorPhPaPiS3_i($14,$11,$12,$9,$10,0)|0);
 $8 = $15;
 $16 = $5;
 $17 = ($16|0)>=(4);
 $6 = 1;
 L1: do {
  if ($17) {
   while(1) {
    $18 = $6;
    $19 = HEAP32[$9>>2]|0;
    $20 = ($18|0)<($19|0);
    if (!($20)) {
     break L1;
    }
    $21 = $6;
    $22 = (($12) + ($21)|0);
    $23 = HEAP8[$22>>0]|0;
    $24 = $23 << 24 >> 24;
    $25 = $8;
    $26 = ($24|0)>=($25|0);
    if ($26) {
     break;
    }
    $31 = $6;
    $32 = (($31) + 1)|0;
    $6 = $32;
   }
   $27 = $5;
   $28 = $27&255;
   $29 = $6;
   $30 = (($12) + ($29)|0);
   HEAP8[$30>>0] = $28;
  } else {
   while(1) {
    $33 = $6;
    $34 = HEAP32[$9>>2]|0;
    $35 = ($33|0)<($34|0);
    if (!($35)) {
     break L1;
    }
    $36 = $6;
    $37 = (($12) + ($36)|0);
    $38 = HEAP8[$37>>0]|0;
    $39 = $38 << 24 >> 24;
    $40 = $5;
    $41 = ($39|0)>($40|0);
    if ($41) {
     $42 = $5;
     $43 = $42&255;
     $44 = $6;
     $45 = (($12) + ($44)|0);
     HEAP8[$45>>0] = $43;
    }
    $46 = $6;
    $47 = (($46) + 1)|0;
    $6 = $47;
   }
  }
 } while(0);
 $6 = 1;
 $7 = $11;
 while(1) {
  $48 = $7;
  $49 = HEAP8[$48>>0]|0;
  $50 = $49&255;
  $51 = ($50|0)!=(0);
  if (!($51)) {
   break;
  }
  $52 = $7;
  $53 = HEAP8[$52>>0]|0;
  $54 = $53&255;
  $55 = (45008 + ($54<<2)|0);
  $56 = HEAP32[$55>>2]|0;
  $57 = ((($56)) + 11|0);
  $58 = HEAP8[$57>>0]|0;
  $59 = $58&255;
  $60 = ($59|0)==(2);
  if ($60) {
   $61 = $7;
   $62 = HEAP8[$61>>0]|0;
   $63 = $62&255;
   $64 = (45008 + ($63<<2)|0);
   $65 = HEAP32[$64>>2]|0;
   $66 = ((($65)) + 4|0);
   $67 = HEAP32[$66>>2]|0;
   $68 = $67 & 1048576;
   $69 = ($68|0)!=(0);
   if (!($69)) {
    $70 = $6;
    $71 = (($12) + ($70)|0);
    $72 = HEAP8[$71>>0]|0;
    $73 = $72 << 24 >> 24;
    $74 = ($73|0)==(0);
    if ($74) {
     label = 16;
    } else {
     $75 = $6;
     $76 = (($12) + ($75)|0);
     $77 = HEAP8[$76>>0]|0;
     $78 = $77 << 24 >> 24;
     $79 = ($78|0)>(1);
     if ($79) {
      label = 16;
     }
    }
    if ((label|0) == 16) {
     label = 0;
     $80 = $6;
     $81 = (($12) + ($80)|0);
     $82 = HEAP8[$81>>0]|0;
     $83 = $82&255;
     $84 = (18650 + ($83)|0);
     $85 = HEAP8[$84>>0]|0;
     $86 = $4;
     $87 = ((($86)) + 1|0);
     $4 = $87;
     HEAP8[$86>>0] = $85;
    }
    $88 = $6;
    $89 = (($88) + 1)|0;
    $6 = $89;
   }
  }
  $90 = $7;
  $91 = ((($90)) + 1|0);
  $7 = $91;
  $92 = HEAP8[$90>>0]|0;
  $93 = $4;
  $94 = ((($93)) + 1|0);
  $4 = $94;
  HEAP8[$93>>0] = $92;
 }
 $95 = $4;
 HEAP8[$95>>0] = 0;
 STACKTOP = sp;return;
}
function __ZL14GetVowelStressP10TranslatorPhPaPiS3_i($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0;
 var $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0;
 var $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0;
 var $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $6 = $0;
 $7 = $1;
 $8 = $2;
 $9 = $3;
 $10 = $4;
 $11 = $5;
 $21 = $7;
 $14 = $21;
 $15 = 1;
 $16 = -1;
 $19 = -1;
 $20 = 0;
 $22 = $8;
 HEAP8[$22>>0] = 1;
 L1: while(1) {
  $23 = $7;
  $24 = ((($23)) + 1|0);
  $7 = $24;
  $25 = HEAP8[$23>>0]|0;
  $12 = $25;
  $26 = $25&255;
  $27 = ($26|0)!=(0);
  $28 = $15;
  $29 = ($28|0)<(99);
  $30 = $27 ? $29 : 0;
  if (!($30)) {
   break;
  }
  $31 = $12;
  $32 = $31&255;
  $33 = (45008 + ($32<<2)|0);
  $34 = HEAP32[$33>>2]|0;
  $13 = $34;
  $35 = ($34|0)==(0|0);
  if ($35) {
   continue;
  }
  $36 = $13;
  $37 = ((($36)) + 11|0);
  $38 = HEAP8[$37>>0]|0;
  $39 = $38&255;
  $40 = ($39|0)==(1);
  if ($40) {
   $41 = $13;
   $42 = ((($41)) + 8|0);
   $43 = HEAP16[$42>>1]|0;
   $44 = $43&65535;
   $45 = ($44|0)==(0);
   if ($45) {
    $46 = $12;
    $47 = $46&255;
    $48 = ($47|0)==(8);
    if (!($48)) {
     $96 = $13;
     $97 = ((($96)) + 14|0);
     $98 = HEAP8[$97>>0]|0;
     $99 = $98&255;
     $100 = ($99|0)<(4);
     if (!($100)) {
      $101 = $10;
      $102 = HEAP32[$101>>2]|0;
      $103 = ($102|0)==(0);
      if (!($103)) {
       continue;
      }
     }
     $104 = $13;
     $105 = ((($104)) + 14|0);
     $106 = HEAP8[$105>>0]|0;
     $107 = $106&255;
     $19 = $107;
     $108 = $19;
     $109 = $16;
     $110 = ($108|0)>($109|0);
     if (!($110)) {
      continue;
     }
     $111 = $19;
     $16 = $111;
     continue;
    }
    $49 = $15;
    $50 = (($49) - 1)|0;
    $18 = $50;
    while(1) {
     $51 = $18;
     $52 = ($51|0)>(0);
     if (!($52)) {
      continue L1;
     }
     $53 = $10;
     $54 = HEAP32[$53>>2]|0;
     $55 = ($54|0)==(0);
     if (!($55)) {
      continue L1;
     }
     $56 = $18;
     $57 = $8;
     $58 = (($57) + ($56)|0);
     $59 = HEAP8[$58>>0]|0;
     $60 = $59 << 24 >> 24;
     $61 = ($60|0)<(4);
     if (!($61)) {
      continue L1;
     }
     $62 = $18;
     $63 = $8;
     $64 = (($63) + ($62)|0);
     $65 = HEAP8[$64>>0]|0;
     $66 = $65 << 24 >> 24;
     $67 = ($66|0)!=(0);
     if ($67) {
      $68 = $18;
      $69 = $8;
      $70 = (($69) + ($68)|0);
      $71 = HEAP8[$70>>0]|0;
      $72 = $71 << 24 >> 24;
      $73 = ($72|0)!=(1);
      if ($73) {
       break;
      }
     }
     $94 = $18;
     $95 = (($94) + -1)|0;
     $18 = $95;
    }
    $74 = $18;
    $75 = $8;
    $76 = (($75) + ($74)|0);
    HEAP8[$76>>0] = 4;
    $77 = $16;
    $78 = ($77|0)<(4);
    if ($78) {
     $16 = 4;
     $79 = $18;
     $20 = $79;
    }
    $17 = 1;
    while(1) {
     $80 = $17;
     $81 = $18;
     $82 = ($80|0)<($81|0);
     if (!($82)) {
      continue L1;
     }
     $83 = $17;
     $84 = $8;
     $85 = (($84) + ($83)|0);
     $86 = HEAP8[$85>>0]|0;
     $87 = $86 << 24 >> 24;
     $88 = ($87|0)==(4);
     if ($88) {
      $89 = $17;
      $90 = $8;
      $91 = (($90) + ($89)|0);
      HEAP8[$91>>0] = 3;
     }
     $92 = $17;
     $93 = (($92) + 1)|0;
     $17 = $93;
    }
   }
  }
  $112 = $13;
  $113 = ((($112)) + 11|0);
  $114 = HEAP8[$113>>0]|0;
  $115 = $114&255;
  $116 = ($115|0)==(2);
  if ($116) {
   $117 = $13;
   $118 = ((($117)) + 4|0);
   $119 = HEAP32[$118>>2]|0;
   $120 = $119 & 1048576;
   $121 = ($120|0)!=(0);
   if ($121) {
    label = 35;
   } else {
    $122 = $19;
    $123 = $122&255;
    $124 = $15;
    $125 = $8;
    $126 = (($125) + ($124)|0);
    HEAP8[$126>>0] = $123;
    $127 = $19;
    $128 = ($127|0)>=(4);
    if ($128) {
     $129 = $19;
     $130 = $16;
     $131 = ($129|0)>=($130|0);
     if ($131) {
      $132 = $15;
      $20 = $132;
      $133 = $19;
      $16 = $133;
     }
    }
    $134 = $19;
    $135 = ($134|0)<(0);
    if ($135) {
     $136 = $11;
     $137 = $136 & 1;
     $138 = ($137|0)!=(0);
     if ($138) {
      $139 = $13;
      $140 = ((($139)) + 4|0);
      $141 = HEAP32[$140>>2]|0;
      $142 = $141 & 2;
      $143 = ($142|0)!=(0);
      if ($143) {
       $144 = $15;
       $145 = $8;
       $146 = (($145) + ($144)|0);
       HEAP8[$146>>0] = 1;
      }
     }
    }
    $147 = $15;
    $148 = (($147) + 1)|0;
    $15 = $148;
    $19 = -1;
   }
  } else {
   label = 35;
  }
  if ((label|0) == 35) {
   label = 0;
   $149 = $12;
   $150 = $149&255;
   $151 = ($150|0)==(20);
   if ($151) {
    $152 = $19;
    $153 = $152&255;
    $154 = $15;
    $155 = $8;
    $156 = (($155) + ($154)|0);
    HEAP8[$156>>0] = $153;
    $157 = $19;
    $158 = ($157|0)==(0);
    if ($158) {
     $159 = $11;
     $160 = $159 & 1;
     $161 = ($160|0)!=(0);
     if ($161) {
      $162 = $15;
      $163 = (($162) + 1)|0;
      $15 = $163;
      $164 = $8;
      $165 = (($164) + ($162)|0);
      HEAP8[$165>>0] = 1;
     }
    }
   }
  }
  $166 = $12;
  $167 = $14;
  $168 = ((($167)) + 1|0);
  $14 = $168;
  HEAP8[$167>>0] = $166;
 }
 $169 = $15;
 $170 = $8;
 $171 = (($170) + ($169)|0);
 HEAP8[$171>>0] = 1;
 $172 = $14;
 HEAP8[$172>>0] = 0;
 $173 = $10;
 $174 = HEAP32[$173>>2]|0;
 $175 = ($174|0)>(0);
 if ($175) {
  $176 = $10;
  $177 = HEAP32[$176>>2]|0;
  $178 = $15;
  $179 = ($177|0)>=($178|0);
  if ($179) {
   $180 = $15;
   $181 = (($180) - 1)|0;
   $182 = $10;
   HEAP32[$182>>2] = $181;
  }
  $183 = $10;
  $184 = HEAP32[$183>>2]|0;
  $185 = $8;
  $186 = (($185) + ($184)|0);
  HEAP8[$186>>0] = 4;
  $16 = 4;
  $187 = $10;
  $188 = HEAP32[$187>>2]|0;
  $20 = $188;
 }
 $189 = $16;
 $190 = ($189|0)==(5);
 if (!($190)) {
  $220 = $20;
  $221 = $10;
  HEAP32[$221>>2] = $220;
  $222 = $15;
  $223 = $9;
  HEAP32[$223>>2] = $222;
  $224 = $16;
  STACKTOP = sp;return ($224|0);
 }
 $17 = 1;
 while(1) {
  $191 = $17;
  $192 = $15;
  $193 = ($191|0)<($192|0);
  if (!($193)) {
   break;
  }
  $194 = $17;
  $195 = $8;
  $196 = (($195) + ($194)|0);
  $197 = HEAP8[$196>>0]|0;
  $198 = $197 << 24 >> 24;
  $199 = ($198|0)==(4);
  do {
   if ($199) {
    $200 = $6;
    $201 = ((($200)) + 12|0);
    $202 = HEAP32[$201>>2]|0;
    $203 = $202 & 131072;
    $204 = ($203|0)!=(0);
    $205 = $17;
    $206 = $8;
    $207 = (($206) + ($205)|0);
    if ($204) {
     HEAP8[$207>>0] = 1;
     break;
    } else {
     HEAP8[$207>>0] = 3;
     break;
    }
   }
  } while(0);
  $208 = $17;
  $209 = $8;
  $210 = (($209) + ($208)|0);
  $211 = HEAP8[$210>>0]|0;
  $212 = $211 << 24 >> 24;
  $213 = ($212|0)==(5);
  if ($213) {
   $214 = $17;
   $215 = $8;
   $216 = (($215) + ($214)|0);
   HEAP8[$216>>0] = 4;
   $217 = $17;
   $20 = $217;
  }
  $218 = $17;
  $219 = (($218) + 1)|0;
  $17 = $219;
 }
 $16 = 4;
 $220 = $20;
 $221 = $10;
 HEAP32[$221>>2] = $220;
 $222 = $15;
 $223 = $9;
 HEAP32[$223>>2] = $222;
 $224 = $16;
 STACKTOP = sp;return ($224|0);
}
function __Z13SetWordStressP10TranslatorPcPjii($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$ = 0, $$33 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0;
 var $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0;
 var $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0;
 var $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0;
 var $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0;
 var $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0;
 var $298 = 0, $299 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0;
 var $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0;
 var $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0;
 var $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0;
 var $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0;
 var $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0;
 var $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0;
 var $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0;
 var $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0;
 var $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0;
 var $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0;
 var $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0;
 var $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0;
 var $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0;
 var $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0;
 var $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0;
 var $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0;
 var $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0;
 var $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0;
 var $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0;
 var $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0;
 var $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0;
 var $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0;
 var $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0;
 var $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0;
 var $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0;
 var $768 = 0, $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0, $783 = 0, $784 = 0, $785 = 0;
 var $786 = 0, $787 = 0, $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0, $799 = 0, $8 = 0, $80 = 0, $800 = 0, $801 = 0, $802 = 0;
 var $803 = 0, $804 = 0, $805 = 0, $806 = 0, $807 = 0, $808 = 0, $809 = 0, $81 = 0, $810 = 0, $811 = 0, $812 = 0, $813 = 0, $814 = 0, $815 = 0, $816 = 0, $817 = 0, $818 = 0, $819 = 0, $82 = 0, $820 = 0;
 var $821 = 0, $822 = 0, $823 = 0, $824 = 0, $825 = 0, $826 = 0, $827 = 0, $828 = 0, $829 = 0, $83 = 0, $830 = 0, $831 = 0, $832 = 0, $833 = 0, $834 = 0, $835 = 0, $836 = 0, $837 = 0, $838 = 0, $839 = 0;
 var $84 = 0, $840 = 0, $841 = 0, $842 = 0, $843 = 0, $844 = 0, $845 = 0, $846 = 0, $847 = 0, $848 = 0, $849 = 0, $85 = 0, $850 = 0, $851 = 0, $852 = 0, $853 = 0, $854 = 0, $855 = 0, $856 = 0, $857 = 0;
 var $858 = 0, $859 = 0, $86 = 0, $860 = 0, $861 = 0, $862 = 0, $863 = 0, $864 = 0, $865 = 0, $866 = 0, $867 = 0, $868 = 0, $869 = 0, $87 = 0, $870 = 0, $871 = 0, $872 = 0, $873 = 0, $874 = 0, $875 = 0;
 var $876 = 0, $877 = 0, $878 = 0, $879 = 0, $88 = 0, $880 = 0, $881 = 0, $882 = 0, $883 = 0, $884 = 0, $885 = 0, $886 = 0, $887 = 0, $888 = 0, $889 = 0, $89 = 0, $890 = 0, $891 = 0, $892 = 0, $893 = 0;
 var $894 = 0, $895 = 0, $896 = 0, $897 = 0, $898 = 0, $899 = 0, $9 = 0, $90 = 0, $900 = 0, $901 = 0, $902 = 0, $903 = 0, $904 = 0, $905 = 0, $906 = 0, $907 = 0, $908 = 0, $909 = 0, $91 = 0, $910 = 0;
 var $911 = 0, $912 = 0, $913 = 0, $914 = 0, $915 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond = 0, $or$cond11 = 0, $or$cond13 = 0, $or$cond15 = 0, $or$cond17 = 0, $or$cond19 = 0, $or$cond21 = 0;
 var $or$cond23 = 0, $or$cond25 = 0, $or$cond28 = 0, $or$cond3 = 0, $or$cond30 = 0, $or$cond32 = 0, $or$cond35 = 0, $or$cond37 = 0, $or$cond5 = 0, $or$cond7 = 0, $or$cond9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 640|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(640|0);
 $16 = sp + 88|0;
 $20 = sp + 72|0;
 $34 = sp + 536|0;
 $35 = sp + 436|0;
 $36 = sp + 336|0;
 $37 = sp + 136|0;
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $9 = $4;
 $22 = 0;
 $31 = 0;
 $43 = $5;
 $44 = ((($43)) + 12|0);
 $45 = HEAP32[$44>>2]|0;
 $30 = $45;
 $46 = $7;
 $47 = ($46|0)!=(0|0);
 if ($47) {
  $48 = $7;
  $49 = HEAP32[$48>>2]|0;
  $31 = $49;
 }
 $17 = 0;
 while(1) {
  $50 = $17;
  $51 = ($50|0)<(200);
  if (!($51)) {
   break;
  }
  $52 = $17;
  $53 = $6;
  $54 = (($53) + ($52)|0);
  $55 = HEAP8[$54>>0]|0;
  $56 = $17;
  $57 = (($37) + ($56)|0);
  HEAP8[$57>>0] = $55;
  $58 = $17;
  $59 = (($37) + ($58)|0);
  $60 = HEAP8[$59>>0]|0;
  $61 = $60&255;
  $62 = HEAP32[11250]|0;
  $63 = ($61|0)>=($62|0);
  if ($63) {
   $64 = $17;
   $65 = (($37) + ($64)|0);
   HEAP8[$65>>0] = 13;
  }
  $66 = $17;
  $67 = (($37) + ($66)|0);
  $68 = HEAP8[$67>>0]|0;
  $69 = $68&255;
  $70 = ($69|0)==(0);
  if ($70) {
   break;
  }
  $71 = $17;
  $72 = (($71) + 1)|0;
  $17 = $72;
 }
 $73 = $17;
 $74 = ($73|0)==(0);
 if ($74) {
  STACKTOP = sp;return;
 }
 $75 = $17;
 $76 = (($75) - 1)|0;
 $77 = (($37) + ($76)|0);
 $78 = HEAP8[$77>>0]|0;
 $79 = $78&255;
 $24 = $79;
 $80 = $17;
 $81 = (($80) - 2)|0;
 $82 = (($37) + ($81)|0);
 $83 = HEAP8[$82>>0]|0;
 $84 = $83&255;
 $25 = $84;
 $85 = $6;
 $86 = ((($85)) + 197|0);
 $23 = $86;
 $87 = $31;
 $88 = $87 & 7;
 HEAP32[$20>>2] = $88;
 $89 = $31;
 $90 = $89 & 8;
 $91 = ($90|0)!=(0);
 if ($91) {
  $92 = $31;
  $93 = $92 & 3;
  HEAP32[$20>>2] = $93;
  $22 = 1;
 }
 $94 = $5;
 $95 = (__ZL14GetVowelStressP10TranslatorPhPaPiS3_i($94,$37,$34,$16,$20,1)|0);
 $15 = $95;
 $14 = $95;
 $96 = $14;
 $97 = ($96|0)<(0);
 $98 = $7;
 $99 = ($98|0)!=(0|0);
 $or$cond = $97 & $99;
 $$33 = $or$cond ? 0 : $95;
 $14 = $$33;
 $17 = 1;
 $11 = $37;
 while(1) {
  $100 = $11;
  $101 = HEAP8[$100>>0]|0;
  $102 = $101&255;
  $103 = ($102|0)!=(0);
  if (!($103)) {
   break;
  }
  $104 = $11;
  $105 = HEAP8[$104>>0]|0;
  $106 = $105&255;
  $107 = (45008 + ($106<<2)|0);
  $108 = HEAP32[$107>>2]|0;
  $109 = ((($108)) + 11|0);
  $110 = HEAP8[$109>>0]|0;
  $111 = $110&255;
  $112 = ($111|0)==(2);
  if ($112) {
   $113 = $11;
   $114 = HEAP8[$113>>0]|0;
   $115 = $114&255;
   $116 = (45008 + ($115<<2)|0);
   $117 = HEAP32[$116>>2]|0;
   $118 = ((($117)) + 4|0);
   $119 = HEAP32[$118>>2]|0;
   $120 = $119 & 1048576;
   $121 = ($120|0)!=(0);
   if (!($121)) {
    $38 = 0;
    $39 = 0;
    $122 = $11;
    $123 = ((($122)) + 1|0);
    $124 = HEAP8[$123>>0]|0;
    $125 = $124&255;
    $126 = (45008 + ($125<<2)|0);
    $127 = HEAP32[$126>>2]|0;
    $128 = ((($127)) + 10|0);
    $129 = HEAP8[$128>>0]|0;
    $130 = $129&255;
    $131 = ($130|0)==(12);
    if ($131) {
     $39 = 1;
    }
    $132 = $39;
    $133 = ($132|0)!=(0);
    if ($133) {
     label = 20;
    } else {
     $134 = $11;
     $135 = HEAP8[$134>>0]|0;
     $136 = $135&255;
     $137 = (45008 + ($136<<2)|0);
     $138 = HEAP32[$137>>2]|0;
     $139 = ((($138)) + 4|0);
     $140 = HEAP32[$139>>2]|0;
     $141 = $140 & 2097152;
     $142 = ($141|0)!=(0);
     if ($142) {
      label = 20;
     }
    }
    if ((label|0) == 20) {
     label = 0;
     $143 = $38;
     $144 = (($143) + 1)|0;
     $38 = $144;
    }
    $145 = $38;
    $146 = $145&255;
    $147 = $17;
    $148 = (($36) + ($147)|0);
    HEAP8[$148>>0] = $146;
    $149 = $39;
    $150 = ($149|0)!=(0);
    if ($150) {
     $151 = $11;
     $152 = ((($151)) + 1|0);
     $11 = $152;
    }
    $153 = $11;
    $154 = ((($153)) + 1|0);
    $155 = HEAP8[$154>>0]|0;
    $156 = $155&255;
    $157 = (45008 + ($156<<2)|0);
    $158 = HEAP32[$157>>2]|0;
    $159 = ((($158)) + 11|0);
    $160 = HEAP8[$159>>0]|0;
    $161 = $160&255;
    $162 = (18657 + ($161)|0);
    $163 = HEAP8[$162>>0]|0;
    $164 = ($163<<24>>24)!=(0);
    do {
     if ($164) {
      $165 = $11;
      $166 = ((($165)) + 2|0);
      $167 = HEAP8[$166>>0]|0;
      $168 = $167&255;
      $169 = (45008 + ($168<<2)|0);
      $170 = HEAP32[$169>>2]|0;
      $171 = ((($170)) + 11|0);
      $172 = HEAP8[$171>>0]|0;
      $173 = $172&255;
      $174 = ($173|0)!=(2);
      if (!($174)) {
       $175 = $11;
       $176 = ((($175)) + 1|0);
       $177 = HEAP8[$176>>0]|0;
       $178 = $177&255;
       $179 = (45008 + ($178<<2)|0);
       $180 = HEAP32[$179>>2]|0;
       $181 = ((($180)) + 4|0);
       $182 = HEAP32[$181>>2]|0;
       $183 = $182 & 2097152;
       $184 = ($183|0)!=(0);
       if (!($184)) {
        break;
       }
      }
      $185 = $38;
      $186 = (($185) + 1)|0;
      $38 = $186;
     }
    } while(0);
    $187 = $38;
    $188 = $187&255;
    $189 = $17;
    $190 = (($35) + ($189)|0);
    HEAP8[$190>>0] = $188;
    $191 = $17;
    $192 = (($191) + 1)|0;
    $17 = $192;
   }
  }
  $193 = $11;
  $194 = ((($193)) + 1|0);
  $11 = $194;
 }
 $195 = $5;
 $196 = ((($195)) + 8|0);
 $197 = HEAP32[$196>>2]|0;
 L43: do {
  switch ($197|0) {
  case 8:  {
   $198 = ((($35)) + 1|0);
   $199 = HEAP8[$198>>0]|0;
   $200 = $199 << 24 >> 24;
   $201 = ($200|0)>(0);
   if (!($201)) {
    $202 = ((($35)) + 2|0);
    $203 = HEAP8[$202>>0]|0;
    $204 = $203 << 24 >> 24;
    $205 = ($204|0)==(0);
    if (!($205)) {
     label = 32;
    }
   }
   break;
  }
  case 1:  {
   label = 32;
   break;
  }
  case 10:  {
   $214 = HEAP32[$20>>2]|0;
   $215 = ($214|0)==(0);
   $216 = HEAP32[$16>>2]|0;
   $217 = ($216|0)<(4);
   $or$cond35 = $215 & $217;
   if ($or$cond35) {
    $218 = HEAP32[$16>>2]|0;
    $219 = (($218) - 1)|0;
    $220 = (($34) + ($219)|0);
    HEAP8[$220>>0] = 4;
    $14 = 4;
   } else {
    label = 38;
   }
   break;
  }
  case 2:  {
   label = 38;
   break;
  }
  case 3:  {
   $351 = HEAP32[$20>>2]|0;
   $352 = ($351|0)==(0);
   if ($352) {
    $353 = HEAP32[$16>>2]|0;
    $354 = (($353) - 1)|0;
    HEAP32[$20>>2] = $354;
    while(1) {
     $355 = HEAP32[$20>>2]|0;
     $356 = ($355|0)>(0);
     if (!($356)) {
      break;
     }
     $357 = HEAP32[$20>>2]|0;
     $358 = (($34) + ($357)|0);
     $359 = HEAP8[$358>>0]|0;
     $360 = $359 << 24 >> 24;
     $361 = ($360|0)<(0);
     $362 = HEAP32[$20>>2]|0;
     if ($361) {
      label = 72;
      break;
     }
     $364 = (($362) + -1)|0;
     HEAP32[$20>>2] = $364;
    }
    if ((label|0) == 72) {
     $363 = (($34) + ($362)|0);
     HEAP8[$363>>0] = 4;
    }
    $14 = 4;
   }
   break;
  }
  case 4:  {
   $365 = HEAP32[$20>>2]|0;
   $366 = ($365|0)==(0);
   if ($366) {
    $367 = HEAP32[$16>>2]|0;
    $368 = (($367) - 3)|0;
    HEAP32[$20>>2] = $368;
    $369 = HEAP32[$20>>2]|0;
    $370 = ($369|0)<(1);
    $$ = $370 ? 1 : $368;
    HEAP32[$20>>2] = $$;
    $371 = $14;
    $372 = ($371|0)==(0);
    if ($372) {
     $373 = HEAP32[$20>>2]|0;
     $374 = (($34) + ($373)|0);
     HEAP8[$374>>0] = 4;
    }
    $14 = 4;
   }
   break;
  }
  case 5:  {
   $375 = HEAP32[$20>>2]|0;
   $376 = ($375|0)==(0);
   if ($376) {
    $377 = HEAP32[$16>>2]|0;
    $378 = (($377) - 3)|0;
    HEAP32[$20>>2] = $378;
    $379 = HEAP32[$16>>2]|0;
    $380 = ($379|0)<(16);
    do {
     if ($380) {
      $381 = $24;
      $382 = (45008 + ($381<<2)|0);
      $383 = HEAP32[$382>>2]|0;
      $384 = ((($383)) + 11|0);
      $385 = HEAP8[$384>>0]|0;
      $386 = $385&255;
      $387 = ($386|0)==(2);
      if ($387) {
       $388 = HEAP32[$16>>2]|0;
       $389 = (18673 + ($388)|0);
       $390 = HEAP8[$389>>0]|0;
       $391 = $390 << 24 >> 24;
       HEAP32[$20>>2] = $391;
       break;
      }
      $392 = $24;
      $393 = (45008 + ($392<<2)|0);
      $394 = HEAP32[$393>>2]|0;
      $395 = ((($394)) + 11|0);
      $396 = HEAP8[$395>>0]|0;
      $397 = $396&255;
      $398 = ($397|0)==(4);
      $399 = HEAP32[$16>>2]|0;
      if ($398) {
       $400 = (18689 + ($399)|0);
       $401 = HEAP8[$400>>0]|0;
       $402 = $401 << 24 >> 24;
       HEAP32[$20>>2] = $402;
       break;
      } else {
       $403 = (18705 + ($399)|0);
       $404 = HEAP8[$403>>0]|0;
       $405 = $404 << 24 >> 24;
       HEAP32[$20>>2] = $405;
       break;
      }
     }
    } while(0);
    $406 = HEAP32[$20>>2]|0;
    $407 = (($34) + ($406)|0);
    HEAP8[$407>>0] = 4;
    $14 = 4;
   }
   break;
  }
  case 6:  {
   $408 = HEAP32[$20>>2]|0;
   $409 = ($408|0)==(0);
   if ($409) {
    $41 = -1;
    $17 = 1;
    while(1) {
     $410 = $17;
     $411 = HEAP32[$16>>2]|0;
     $412 = (($411) - 1)|0;
     $413 = ($410|0)<($412|0);
     if (!($413)) {
      break;
     }
     $414 = $17;
     $415 = (($34) + ($414)|0);
     $416 = HEAP8[$415>>0]|0;
     $417 = $416 << 24 >> 24;
     $418 = ($417|0)<(0);
     if ($418) {
      $419 = $17;
      $420 = (($35) + ($419)|0);
      $421 = HEAP8[$420>>0]|0;
      $422 = $421 << 24 >> 24;
      $40 = $422;
      $423 = $41;
      $424 = ($422|0)>=($423|0);
      if ($424) {
       $425 = $40;
       $41 = $425;
       $426 = $17;
       HEAP32[$20>>2] = $426;
      }
     }
     $427 = $17;
     $428 = (($427) + 1)|0;
     $17 = $428;
    }
    $429 = HEAP32[$16>>2]|0;
    $430 = (($429) - 1)|0;
    $431 = (($35) + ($430)|0);
    $432 = HEAP8[$431>>0]|0;
    $433 = $432 << 24 >> 24;
    $434 = ($433|0)==(2);
    $435 = $41;
    $436 = ($435|0)<(2);
    $or$cond9 = $434 & $436;
    if ($or$cond9) {
     $437 = HEAP32[$16>>2]|0;
     $438 = (($437) - 1)|0;
     HEAP32[$20>>2] = $438;
    } else {
     $439 = $41;
     $440 = ($439|0)<=(0);
     if ($440) {
      HEAP32[$20>>2] = 1;
     }
    }
    $441 = HEAP32[$20>>2]|0;
    $442 = (($34) + ($441)|0);
    HEAP8[$442>>0] = 4;
    $14 = 4;
   }
   break;
  }
  case 7:  {
   $443 = HEAP32[$20>>2]|0;
   $444 = ($443|0)==(0);
   if ($444) {
    $445 = HEAP32[$16>>2]|0;
    $446 = (($445) - 1)|0;
    HEAP32[$20>>2] = $446;
    $17 = 1;
    while(1) {
     $447 = $17;
     $448 = HEAP32[$16>>2]|0;
     $449 = ($447|0)<($448|0);
     if (!($449)) {
      break;
     }
     $450 = $17;
     $451 = (($34) + ($450)|0);
     $452 = HEAP8[$451>>0]|0;
     $453 = $452 << 24 >> 24;
     $454 = ($453|0)==(1);
     $455 = $17;
     if ($454) {
      label = 103;
      break;
     }
     $457 = (($455) + 1)|0;
     $17 = $457;
    }
    if ((label|0) == 103) {
     $456 = (($455) - 1)|0;
     HEAP32[$20>>2] = $456;
    }
    $458 = HEAP32[$20>>2]|0;
    $459 = (($34) + ($458)|0);
    HEAP8[$459>>0] = 4;
    $14 = 4;
   }
   break;
  }
  case 9:  {
   $17 = 1;
   while(1) {
    $460 = $17;
    $461 = HEAP32[$16>>2]|0;
    $462 = ($460|0)<($461|0);
    if (!($462)) {
     break L43;
    }
    $463 = $17;
    $464 = (($34) + ($463)|0);
    $465 = HEAP8[$464>>0]|0;
    $466 = $465 << 24 >> 24;
    $467 = ($466|0)<(0);
    if ($467) {
     $468 = $17;
     $469 = (($34) + ($468)|0);
     HEAP8[$469>>0] = 4;
    }
    $470 = $17;
    $471 = (($470) + 1)|0;
    $17 = $471;
   }
   break;
  }
  case 12:  {
   $33 = 0;
   $17 = 1;
   while(1) {
    $472 = $17;
    $473 = HEAP32[$16>>2]|0;
    $474 = ($472|0)<($473|0);
    if (!($474)) {
     break;
    }
    $475 = $17;
    $476 = (($34) + ($475)|0);
    $477 = HEAP8[$476>>0]|0;
    $478 = $477 << 24 >> 24;
    $479 = ($478|0)==(4);
    if ($479) {
     $480 = $17;
     $481 = (($34) + ($480)|0);
     HEAP8[$481>>0] = 3;
    }
    $482 = $17;
    $483 = (($36) + ($482)|0);
    $484 = HEAP8[$483>>0]|0;
    $485 = $484 << 24 >> 24;
    $486 = ($485|0)>(0);
    if ($486) {
     $487 = $17;
     $33 = $487;
     $488 = $17;
     $489 = (($34) + ($488)|0);
     HEAP8[$489>>0] = 3;
    }
    $490 = $17;
    $491 = (($490) + 1)|0;
    $17 = $491;
   }
   $492 = HEAP32[$20>>2]|0;
   $493 = ($492|0)==(0);
   do {
    if ($493) {
     $494 = $33;
     $495 = ($494|0)>(0);
     if ($495) {
      $496 = $33;
      HEAP32[$20>>2] = $496;
      break;
     }
     $497 = HEAP32[$16>>2]|0;
     $498 = ($497|0)>(5);
     $499 = HEAP32[$16>>2]|0;
     if ($498) {
      $500 = (($499) - 3)|0;
      HEAP32[$20>>2] = $500;
      break;
     } else {
      $501 = (($499) - 1)|0;
      HEAP32[$20>>2] = $501;
      break;
     }
    }
   } while(0);
   $502 = HEAP32[$20>>2]|0;
   $503 = (($34) + ($502)|0);
   HEAP8[$503>>0] = 4;
   $14 = 4;
   break;
  }
  case 13:  {
   $504 = HEAP32[$20>>2]|0;
   $505 = ($504|0)==(0);
   if ($505) {
    HEAP32[$20>>2] = 1;
    $506 = ((($36)) + 1|0);
    $507 = HEAP8[$506>>0]|0;
    $508 = $507 << 24 >> 24;
    $509 = ($508|0)==(0);
    $510 = HEAP32[$16>>2]|0;
    $511 = ($510|0)>(2);
    $or$cond11 = $509 & $511;
    if ($or$cond11) {
     $512 = ((($36)) + 2|0);
     $513 = HEAP8[$512>>0]|0;
     $514 = $513 << 24 >> 24;
     $515 = ($514|0)>(0);
     if ($515) {
      HEAP32[$20>>2] = 2;
     }
    }
    $516 = HEAP32[$20>>2]|0;
    $517 = (($34) + ($516)|0);
    HEAP8[$517>>0] = 4;
    $14 = 4;
   }
   break;
  }
  default: {
  }
  }
 } while(0);
 do {
  if ((label|0) == 32) {
   $206 = HEAP32[$20>>2]|0;
   $207 = ($206|0)==(0);
   $208 = HEAP32[$16>>2]|0;
   $209 = ($208|0)>(2);
   $or$cond3 = $207 & $209;
   if ($or$cond3) {
    HEAP32[$20>>2] = 2;
    $210 = $14;
    $211 = ($210|0)==(0);
    if ($211) {
     $212 = HEAP32[$20>>2]|0;
     $213 = (($34) + ($212)|0);
     HEAP8[$213>>0] = 4;
    }
    $14 = 4;
   }
  }
  else if ((label|0) == 38) {
   $221 = HEAP32[$20>>2]|0;
   $222 = ($221|0)==(0);
   if ($222) {
    $14 = 4;
    $223 = HEAP32[$16>>2]|0;
    $224 = ($223|0)>(2);
    do {
     if ($224) {
      $225 = HEAP32[$16>>2]|0;
      $226 = (($225) - 2)|0;
      HEAP32[$20>>2] = $226;
      $227 = $30;
      $228 = $227 & 512;
      $229 = ($228|0)!=(0);
      do {
       if ($229) {
        $230 = $24;
        $231 = (45008 + ($230<<2)|0);
        $232 = HEAP32[$231>>2]|0;
        $233 = ((($232)) + 11|0);
        $234 = HEAP8[$233>>0]|0;
        $235 = $234&255;
        $236 = ($235|0)!=(2);
        if ($236) {
         $237 = $24;
         $238 = (45008 + ($237<<2)|0);
         $239 = HEAP32[$238>>2]|0;
         $240 = HEAP32[$239>>2]|0;
         $26 = $240;
         $241 = $5;
         $242 = ((($241)) + 324|0);
         $243 = HEAP32[$242>>2]|0;
         $244 = ($243|0)==(24942);
         if ($244) {
          $245 = $26;
          $246 = ($245|0)!=(115);
          $247 = $26;
          $248 = ($247|0)!=(110);
          $or$cond5 = $246 & $248;
          if (!($or$cond5)) {
           $249 = $25;
           $250 = (45008 + ($249<<2)|0);
           $251 = HEAP32[$250>>2]|0;
           $252 = ((($251)) + 11|0);
           $253 = HEAP8[$252>>0]|0;
           $254 = $253&255;
           $255 = ($254|0)!=(2);
           if (!($255)) {
            break;
           }
          }
          $256 = HEAP32[$16>>2]|0;
          $257 = (($256) - 1)|0;
          HEAP32[$20>>2] = $257;
          break;
         }
         $258 = $5;
         $259 = ((($258)) + 324|0);
         $260 = HEAP32[$259>>2]|0;
         $261 = ($260|0)==(26977);
         $262 = $26;
         if ($261) {
          $263 = ($262|0)!=(115);
          if (!($263)) {
           $264 = $25;
           $265 = (45008 + ($264<<2)|0);
           $266 = HEAP32[$265>>2]|0;
           $267 = ((($266)) + 11|0);
           $268 = HEAP8[$267>>0]|0;
           $269 = $268&255;
           $270 = ($269|0)!=(2);
           if (!($270)) {
            break;
           }
          }
          $271 = HEAP32[$16>>2]|0;
          $272 = (($271) - 1)|0;
          HEAP32[$20>>2] = $272;
          break;
         }
         $273 = ($262|0)==(115);
         if ($273) {
          $274 = $25;
          $275 = (45008 + ($274<<2)|0);
          $276 = HEAP32[$275>>2]|0;
          $277 = ((($276)) + 11|0);
          $278 = HEAP8[$277>>0]|0;
          $279 = $278&255;
          $280 = ($279|0)==(8);
          if ($280) {
           break;
          }
         }
         $281 = $24;
         $282 = (45008 + ($281<<2)|0);
         $283 = HEAP32[$282>>2]|0;
         $284 = ((($283)) + 11|0);
         $285 = HEAP8[$284>>0]|0;
         $286 = $285&255;
         $287 = ($286|0)!=(8);
         $288 = $26;
         $289 = ($288|0)!=(115);
         $or$cond7 = $287 & $289;
         if (!($or$cond7)) {
          $290 = $25;
          $291 = (45008 + ($290<<2)|0);
          $292 = HEAP32[$291>>2]|0;
          $293 = ((($292)) + 11|0);
          $294 = HEAP8[$293>>0]|0;
          $295 = $294&255;
          $296 = ($295|0)!=(2);
          if (!($296)) {
           break;
          }
         }
         $297 = HEAP32[$16>>2]|0;
         $298 = (($297) - 1)|0;
         HEAP32[$20>>2] = $298;
        }
       }
      } while(0);
      $299 = $30;
      $300 = $299 & 524288;
      $301 = ($300|0)!=(0);
      if ($301) {
       $302 = HEAP32[$16>>2]|0;
       $303 = (($302) - 1)|0;
       $304 = (($36) + ($303)|0);
       $305 = HEAP8[$304>>0]|0;
       $306 = $305 << 24 >> 24;
       $307 = HEAP32[$16>>2]|0;
       $308 = (($307) - 2)|0;
       $309 = (($36) + ($308)|0);
       $310 = HEAP8[$309>>0]|0;
       $311 = $310 << 24 >> 24;
       $312 = ($306|0)>($311|0);
       if ($312) {
        $313 = HEAP32[$16>>2]|0;
        $314 = (($313) - 1)|0;
        HEAP32[$20>>2] = $314;
       }
      }
      $315 = HEAP32[$20>>2]|0;
      $316 = (($34) + ($315)|0);
      $317 = HEAP8[$316>>0]|0;
      $318 = $317 << 24 >> 24;
      $319 = ($318|0)==(0);
      if (!($319)) {
       $320 = HEAP32[$20>>2]|0;
       $321 = (($34) + ($320)|0);
       $322 = HEAP8[$321>>0]|0;
       $323 = $322 << 24 >> 24;
       $324 = ($323|0)==(1);
       if (!($324)) {
        break;
       }
      }
      $325 = HEAP32[$20>>2]|0;
      $326 = ($325|0)>(1);
      $327 = HEAP32[$20>>2]|0;
      if ($326) {
       $328 = (($327) + -1)|0;
       HEAP32[$20>>2] = $328;
       break;
      } else {
       $329 = (($327) + 1)|0;
       HEAP32[$20>>2] = $329;
       break;
      }
     } else {
      HEAP32[$20>>2] = 1;
     }
    } while(0);
    $330 = HEAP32[$20>>2]|0;
    $331 = (($34) + ($330)|0);
    $332 = HEAP8[$331>>0]|0;
    $333 = $332 << 24 >> 24;
    $334 = ($333|0)<(0);
    if ($334) {
     $335 = HEAP32[$20>>2]|0;
     $336 = (($335) - 1)|0;
     $337 = (($34) + ($336)|0);
     $338 = HEAP8[$337>>0]|0;
     $339 = $338 << 24 >> 24;
     $340 = ($339|0)<(4);
     if (!($340)) {
      $341 = HEAP32[$20>>2]|0;
      $342 = (($341) + 1)|0;
      $343 = (($34) + ($342)|0);
      $344 = HEAP8[$343>>0]|0;
      $345 = $344 << 24 >> 24;
      $346 = ($345|0)<(4);
      if (!($346)) {
       break;
      }
     }
     $347 = $14;
     $348 = $347&255;
     $349 = HEAP32[$20>>2]|0;
     $350 = (($34) + ($349)|0);
     HEAP8[$350>>0] = $348;
    }
   }
  }
 } while(0);
 $518 = $30;
 $519 = $518 & 256;
 $520 = ($519|0)!=(0);
 if ($520) {
  $521 = $9;
  $522 = $521 & 2;
  $523 = ($522|0)==(0);
  $524 = HEAP32[$16>>2]|0;
  $525 = ($524|0)>(2);
  $or$cond13 = $523 & $525;
  $526 = $15;
  $527 = ($526|0)<(3);
  $or$cond15 = $or$cond13 & $527;
  if ($or$cond15) {
   $528 = HEAP32[$16>>2]|0;
   $529 = (($528) - 1)|0;
   $530 = (($34) + ($529)|0);
   $531 = HEAP8[$530>>0]|0;
   $532 = $531 << 24 >> 24;
   $533 = ($532|0)==(4);
   if ($533) {
    $534 = $24;
    $535 = (45008 + ($534<<2)|0);
    $536 = HEAP32[$535>>2]|0;
    $537 = ((($536)) + 11|0);
    $538 = HEAP8[$537>>0]|0;
    $539 = $538&255;
    $540 = ($539|0)==(2);
    if ($540) {
     $541 = HEAP32[$16>>2]|0;
     $542 = (($541) - 1)|0;
     $543 = (($34) + ($542)|0);
     HEAP8[$543>>0] = 1;
     $544 = HEAP32[$16>>2]|0;
     $545 = (($544) - 2)|0;
     $546 = (($34) + ($545)|0);
     HEAP8[$546>>0] = 4;
    }
   }
  }
 }
 $547 = $14;
 $548 = ($547|0)<(4);
 if ($548) {
  $13 = 4;
 } else {
  $13 = 3;
 }
 $549 = $22;
 $550 = ($549|0)==(0);
 if ($550) {
  $551 = $30;
  $552 = $551 & 4096;
  $553 = ($552|0)!=(0);
  $554 = HEAP32[$16>>2]|0;
  $555 = ($554|0)==(3);
  $or$cond17 = $553 & $555;
  if ($or$cond17) {
   $556 = ((($34)) + 1|0);
   $557 = HEAP8[$556>>0]|0;
   $558 = $557 << 24 >> 24;
   $559 = ($558|0)==(4);
   if ($559) {
    $560 = ((($34)) + 2|0);
    HEAP8[$560>>0] = 3;
   }
   $561 = ((($34)) + 2|0);
   $562 = HEAP8[$561>>0]|0;
   $563 = $562 << 24 >> 24;
   $564 = ($563|0)==(4);
   if ($564) {
    $565 = ((($34)) + 1|0);
    HEAP8[$565>>0] = 3;
   }
  }
  $566 = $30;
  $567 = $566 & 8192;
  $568 = ($567|0)!=(0);
  if ($568) {
   $569 = ((($34)) + 1|0);
   $570 = HEAP8[$569>>0]|0;
   $571 = $570 << 24 >> 24;
   $572 = ($571|0)<(0);
   $573 = HEAP32[$16>>2]|0;
   $574 = ($573|0)>(3);
   $or$cond37 = $572 & $574;
   if ($or$cond37) {
    $575 = ((($34)) + 2|0);
    $576 = HEAP8[$575>>0]|0;
    $577 = $576 << 24 >> 24;
    $578 = ($577|0)>=(4);
    if ($578) {
     $579 = ((($34)) + 1|0);
     HEAP8[$579>>0] = 3;
    }
   }
  }
 }
 $29 = 0;
 $32 = 0;
 $18 = 1;
 while(1) {
  $580 = $18;
  $581 = HEAP32[$16>>2]|0;
  $582 = ($580|0)<($581|0);
  if (!($582)) {
   break;
  }
  $583 = $18;
  $584 = (($34) + ($583)|0);
  $585 = HEAP8[$584>>0]|0;
  $586 = $585 << 24 >> 24;
  $587 = ($586|0)<(0);
  do {
   if ($587) {
    $588 = $30;
    $589 = $588 & 16;
    $590 = ($589|0)!=(0);
    $591 = $13;
    $592 = ($591|0)<(4);
    $or$cond19 = $590 & $592;
    if ($or$cond19) {
     $593 = $18;
     $594 = HEAP32[$16>>2]|0;
     $595 = (($594) - 1)|0;
     $596 = ($593|0)==($595|0);
     if ($596) {
      label = 166;
      break;
     }
    }
    $597 = $30;
    $598 = $597 & 32768;
    $599 = ($598|0)!=(0);
    $600 = $29;
    $601 = ($600|0)==(0);
    $or$cond21 = $599 & $601;
    if ($or$cond21) {
     $602 = $13;
     $603 = $602&255;
     $604 = $18;
     $605 = (($34) + ($604)|0);
     HEAP8[$605>>0] = $603;
     $29 = 1;
     $13 = 3;
     label = 166;
     break;
    }
    $606 = $18;
    $607 = (($606) - 1)|0;
    $608 = (($34) + ($607)|0);
    $609 = HEAP8[$608>>0]|0;
    $610 = $609 << 24 >> 24;
    $611 = ($610|0)<=(1);
    if ($611) {
     $612 = $18;
     $613 = (($612) + 1)|0;
     $614 = (($34) + ($613)|0);
     $615 = HEAP8[$614>>0]|0;
     $616 = $615 << 24 >> 24;
     $617 = ($616|0)<=(1);
     if (!($617)) {
      $618 = $13;
      $619 = ($618|0)==(4);
      if (!($619)) {
       label = 166;
       break;
      }
      $620 = $18;
      $621 = (($620) + 1)|0;
      $622 = (($34) + ($621)|0);
      $623 = HEAP8[$622>>0]|0;
      $624 = $623 << 24 >> 24;
      $625 = ($624|0)<=(2);
      if (!($625)) {
       label = 166;
       break;
      }
     }
     $626 = $13;
     $627 = ($626|0)==(3);
     if ($627) {
      $628 = $30;
      $629 = $628 & 32;
      $630 = ($629|0)!=(0);
      if ($630) {
       break;
      }
     }
     $631 = $18;
     $632 = ($631|0)>(1);
     if ($632) {
      $633 = $30;
      $634 = $633 & 64;
      $635 = ($634|0)!=(0);
      if ($635) {
       $636 = $18;
       $637 = (($35) + ($636)|0);
       $638 = HEAP8[$637>>0]|0;
       $639 = $638 << 24 >> 24;
       $640 = ($639|0)==(0);
       if ($640) {
        $641 = $18;
        $642 = (($641) + 1)|0;
        $643 = (($35) + ($642)|0);
        $644 = HEAP8[$643>>0]|0;
        $645 = $644 << 24 >> 24;
        $646 = ($645|0)>(0);
        if ($646) {
         break;
        }
       }
      }
     }
     $647 = $13;
     $648 = $647&255;
     $649 = $18;
     $650 = (($34) + ($649)|0);
     HEAP8[$650>>0] = $648;
     $29 = 1;
     $13 = 3;
     label = 166;
    } else {
     label = 166;
    }
   } else {
    label = 166;
   }
  } while(0);
  do {
   if ((label|0) == 166) {
    label = 0;
    $651 = $18;
    $652 = (($34) + ($651)|0);
    $653 = HEAP8[$652>>0]|0;
    $654 = $653 << 24 >> 24;
    $655 = ($654|0)>=(4);
    if ($655) {
     $656 = $32;
     $657 = ($656|0)==(0);
     if ($657) {
      $658 = $18;
      $32 = $658;
      break;
     }
     $659 = $30;
     $660 = $659 & 128;
     $661 = ($660|0)!=(0);
     if ($661) {
      $662 = $18;
      $663 = (($34) + ($662)|0);
      HEAP8[$663>>0] = 3;
     }
    }
   }
  } while(0);
  $664 = $18;
  $665 = (($664) + 1)|0;
  $18 = $665;
 }
 $666 = $22;
 $667 = ($666|0)!=(0);
 $668 = $8;
 $669 = ($668|0)<(0);
 $or$cond23 = $667 & $669;
 do {
  if ($or$cond23) {
   $670 = HEAP32[$16>>2]|0;
   $671 = ($670|0)<=(2);
   $672 = $5;
   if ($671) {
    $673 = ((($672)) + 16|0);
    $674 = HEAP32[$673>>2]|0;
    $8 = $674;
    break;
   } else {
    $675 = ((($672)) + 20|0);
    $676 = HEAP32[$675>>2]|0;
    $8 = $676;
    break;
   }
  }
 } while(0);
 $14 = 0;
 $21 = 0;
 $18 = 1;
 while(1) {
  $677 = $18;
  $678 = HEAP32[$16>>2]|0;
  $679 = ($677|0)<($678|0);
  if (!($679)) {
   break;
  }
  $680 = $18;
  $681 = (($34) + ($680)|0);
  $682 = HEAP8[$681>>0]|0;
  $683 = $682 << 24 >> 24;
  $684 = $14;
  $685 = ($683|0)>=($684|0);
  if ($685) {
   $686 = $18;
   $687 = (($34) + ($686)|0);
   $688 = HEAP8[$687>>0]|0;
   $689 = $688 << 24 >> 24;
   $14 = $689;
   $690 = $18;
   $21 = $690;
  }
  $691 = $18;
  $692 = (($691) + 1)|0;
  $18 = $692;
 }
 $693 = $8;
 $694 = ($693|0)>=(0);
 if ($694) {
  $695 = $8;
  $696 = $14;
  $697 = ($695|0)>($696|0);
  $698 = $14;
  $699 = ($698|0)<=(4);
  $or$cond25 = $697 | $699;
  if ($or$cond25) {
   $700 = $8;
   $701 = $700&255;
   $702 = $21;
   $703 = (($34) + ($702)|0);
   HEAP8[$703>>0] = $701;
  }
  $704 = $8;
  $14 = $704;
 }
 $11 = $37;
 $18 = 1;
 $705 = $9;
 $706 = $705 & 1;
 $707 = ($706|0)!=(0);
 do {
  if (!($707)) {
   $708 = $11;
   $709 = HEAP8[$708>>0]|0;
   $710 = $709&255;
   $711 = (45008 + ($710<<2)|0);
   $712 = HEAP32[$711>>2]|0;
   $12 = $712;
   $713 = ($712|0)!=(0|0);
   if ($713) {
    while(1) {
     $714 = $12;
     $715 = ((($714)) + 11|0);
     $716 = HEAP8[$715>>0]|0;
     $717 = $716&255;
     $718 = ($717|0)==(1);
     if (!($718)) {
      $719 = $11;
      $720 = HEAP8[$719>>0]|0;
      $721 = $720&255;
      $722 = ($721|0)==(15);
      if (!($722)) {
       break;
      }
     }
     $723 = $11;
     $724 = ((($723)) + 1|0);
     $11 = $724;
     $725 = $11;
     $726 = HEAP8[$725>>0]|0;
     $727 = $726&255;
     $728 = (45008 + ($727<<2)|0);
     $729 = HEAP32[$728>>2]|0;
     $12 = $729;
    }
    $730 = $5;
    $731 = ((($730)) + 4|0);
    $732 = HEAP32[$731>>2]|0;
    $733 = $732 & 48;
    $734 = ($733|0)!=(0);
    if ($734) {
     $735 = $12;
     $736 = ((($735)) + 11|0);
     $737 = HEAP8[$736>>0]|0;
     $738 = $737&255;
     $739 = ($738|0)==(2);
     if ($739) {
      $740 = $5;
      $741 = ((($740)) + 4|0);
      $742 = HEAP32[$741>>2]|0;
      $743 = $742 & 32;
      $744 = ($743|0)!=(0);
      if ($744) {
       $745 = ((($34)) + 1|0);
       $746 = HEAP8[$745>>0]|0;
       $747 = $746 << 24 >> 24;
       $748 = ($747|0)>=(4);
       if ($748) {
        $749 = $6;
        $750 = ((($749)) + 1|0);
        $6 = $750;
        HEAP8[$749>>0] = 11;
        break;
       }
      }
      $751 = $6;
      $752 = ((($751)) + 1|0);
      $6 = $752;
      HEAP8[$751>>0] = 23;
     }
    }
   }
  }
 } while(0);
 $11 = $37;
 $27 = 0;
 while(1) {
  $753 = $11;
  $754 = ((($753)) + 1|0);
  $11 = $754;
  $755 = HEAP8[$753>>0]|0;
  $10 = $755;
  $756 = $755&255;
  $757 = ($756|0)!=(0);
  if (!($757)) {
   break;
  }
  $758 = $6;
  $759 = $23;
  $760 = ($758>>>0)<($759>>>0);
  if (!($760)) {
   break;
  }
  $761 = $10;
  $762 = $761&255;
  $763 = (45008 + ($762<<2)|0);
  $764 = HEAP32[$763>>2]|0;
  $12 = $764;
  $765 = ($764|0)==(0|0);
  if ($765) {
   continue;
  }
  $766 = $12;
  $767 = ((($766)) + 11|0);
  $768 = HEAP8[$767>>0]|0;
  $769 = $768&255;
  $770 = ($769|0)==(0);
  do {
   if ($770) {
    $771 = $5;
    $772 = ((($771)) + 8320|0);
    HEAP32[$772>>2] = 0;
   } else {
    $773 = $12;
    $774 = ((($773)) + 11|0);
    $775 = HEAP8[$774>>0]|0;
    $776 = $775&255;
    $777 = ($776|0)==(2);
    if ($777) {
     $778 = $12;
     $779 = ((($778)) + 4|0);
     $780 = HEAP32[$779>>2]|0;
     $781 = $780 & 1048576;
     $782 = ($781|0)!=(0);
     if ($782) {
      label = 204;
     }
    } else {
     label = 204;
    }
    if ((label|0) == 204) {
     label = 0;
     $783 = $11;
     $784 = HEAP8[$783>>0]|0;
     $785 = $784&255;
     $786 = ($785|0)==(20);
     if (!($786)) {
      break;
     }
    }
    $787 = $18;
    $788 = (($34) + ($787)|0);
    $789 = HEAP8[$788>>0]|0;
    $790 = $789 << 24 >> 24;
    $19 = $790;
    $791 = $19;
    $792 = $5;
    $793 = ((($792)) + 8320|0);
    HEAP32[$793>>2] = $791;
    $794 = $18;
    $795 = (($794) - 1)|0;
    $796 = (($34) + ($795)|0);
    $797 = HEAP8[$796>>0]|0;
    $798 = $797 << 24 >> 24;
    $799 = $14;
    $800 = ($798|0)>=($799|0);
    if ($800) {
     $27 = 1;
    }
    $801 = $19;
    $802 = ($801|0)<=(1);
    L285: do {
     if ($802) {
      $803 = $18;
      $804 = ($803|0)>(1);
      $805 = $14;
      $806 = ($805|0)>=(2);
      $or$cond28 = $804 & $806;
      do {
       if ($or$cond28) {
        $807 = $30;
        $808 = $807 & 4;
        $809 = ($808|0)!=(0);
        if (!($809)) {
         break;
        }
        $810 = $18;
        $811 = HEAP32[$16>>2]|0;
        $812 = (($811) - 1)|0;
        $813 = ($810|0)==($812|0);
        if (!($813)) {
         break;
        }
        $19 = 0;
        break L285;
       }
      } while(0);
      $814 = $30;
      $815 = $814 & 2;
      $816 = ($815|0)!=(0);
      $817 = $18;
      $818 = ($817|0)==(1);
      $or$cond30 = $816 | $818;
      do {
       if (!($or$cond30)) {
        $819 = $18;
        $820 = HEAP32[$16>>2]|0;
        $821 = (($820) - 1)|0;
        $822 = ($819|0)==($821|0);
        if ($822) {
         break;
        }
        $823 = $18;
        $824 = HEAP32[$16>>2]|0;
        $825 = (($824) - 2)|0;
        $826 = ($823|0)==($825|0);
        do {
         if ($826) {
          $827 = HEAP32[$16>>2]|0;
          $828 = (($827) - 1)|0;
          $829 = (($34) + ($828)|0);
          $830 = HEAP8[$829>>0]|0;
          $831 = $830 << 24 >> 24;
          $832 = ($831|0)<=(1);
          if (!($832)) {
           break;
          }
          $19 = 1;
          break L285;
         }
        } while(0);
        $833 = $18;
        $834 = (($833) - 1)|0;
        $835 = (($34) + ($834)|0);
        $836 = HEAP8[$835>>0]|0;
        $837 = $836 << 24 >> 24;
        $838 = ($837|0)<(0);
        if (!($838)) {
         $839 = $30;
         $840 = $839 & 65536;
         $841 = ($840|0)==(0);
         if (!($841)) {
          break L285;
         }
        }
        $19 = 0;
        $842 = $19;
        $843 = $842&255;
        $844 = $18;
        $845 = (($34) + ($844)|0);
        HEAP8[$845>>0] = $843;
        break L285;
       }
      } while(0);
      $19 = 1;
     }
    } while(0);
    $846 = $19;
    $847 = ($846|0)==(0);
    $848 = $19;
    $849 = ($848|0)>(1);
    $or$cond32 = $847 | $849;
    if ($or$cond32) {
     $850 = $19;
     $851 = (18650 + ($850)|0);
     $852 = HEAP8[$851>>0]|0;
     $853 = $6;
     $854 = ((($853)) + 1|0);
     $6 = $854;
     HEAP8[$853>>0] = $852;
    }
    $855 = $18;
    $856 = (($34) + ($855)|0);
    $857 = HEAP8[$856>>0]|0;
    $858 = $857 << 24 >> 24;
    $859 = $14;
    $860 = ($858|0)>($859|0);
    if ($860) {
     $861 = $18;
     $862 = (($34) + ($861)|0);
     $863 = HEAP8[$862>>0]|0;
     $864 = $863 << 24 >> 24;
     $14 = $864;
    }
    $865 = $11;
    $866 = HEAP8[$865>>0]|0;
    $867 = $866&255;
    $868 = ($867|0)==(12);
    do {
     if ($868) {
      $869 = $5;
      $870 = ((($869)) + 24|0);
      $871 = ((($870)) + 8|0);
      $872 = HEAP32[$871>>2]|0;
      $28 = $872;
      $873 = $872 & 1;
      $874 = ($873|0)!=(0);
      if (!($874)) {
       break;
      }
      $42 = 0;
      $875 = $28;
      $876 = $875 & 16;
      $877 = ($876|0)!=(0);
      do {
       if ($877) {
        $878 = $18;
        $879 = $21;
        $880 = ($878|0)!=($879|0);
        if (!($880)) {
         break;
        }
        $42 = 1;
       } else {
        $881 = $19;
        $882 = ($881|0)<(4);
        if (!($882)) {
         break;
        }
        $42 = 1;
       }
      } while(0);
      $883 = $42;
      $884 = ($883|0)!=(0);
      if (!($884)) {
       break;
      }
      $885 = $11;
      $886 = ((($885)) + 1|0);
      $11 = $886;
     }
    } while(0);
    $887 = $19;
    $888 = ($887|0)>=(4);
    do {
     if ($888) {
      $889 = $5;
      $890 = ((($889)) + 24|0);
      $891 = ((($890)) + 8|0);
      $892 = HEAP32[$891>>2]|0;
      $893 = ($892|0)==(2);
      if (!($893)) {
       break;
      }
      $894 = $18;
      $895 = HEAP32[$16>>2]|0;
      $896 = (($895) - 2)|0;
      $897 = ($894|0)==($896|0);
      if (!($897)) {
       break;
      }
      $898 = $18;
      $899 = (($35) + ($898)|0);
      $900 = HEAP8[$899>>0]|0;
      $901 = $900 << 24 >> 24;
      $902 = ($901|0)==(0);
      if (!($902)) {
       break;
      }
      $903 = $10;
      $904 = $6;
      $905 = ((($904)) + 1|0);
      $6 = $905;
      HEAP8[$904>>0] = $903;
      $10 = 12;
     }
    } while(0);
    $906 = $18;
    $907 = (($906) + 1)|0;
    $18 = $907;
   }
  } while(0);
  $908 = $10;
  $909 = $908&255;
  $910 = ($909|0)!=(1);
  if (!($910)) {
   continue;
  }
  $911 = $10;
  $912 = $6;
  $913 = ((($912)) + 1|0);
  $6 = $913;
  HEAP8[$912>>0] = $911;
 }
 $914 = $6;
 $915 = ((($914)) + 1|0);
 $6 = $915;
 HEAP8[$914>>0] = 0;
 STACKTOP = sp;return;
}
function __Z22ApplySpecialAttribute2P10TranslatorPci($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $9 = $4;
 $10 = (_strlen($9)|0);
 $7 = $10;
 $11 = $3;
 $12 = ((($11)) + 24|0);
 $13 = ((($12)) + 60|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = $14 & 2;
 $16 = ($15|0)!=(0);
 if (!($16)) {
  STACKTOP = sp;return;
 }
 $6 = 0;
 while(1) {
  $17 = $6;
  $18 = $7;
  $19 = (($18) - 1)|0;
  $20 = ($17|0)<($19|0);
  if (!($20)) {
   label = 15;
   break;
  }
  $21 = $6;
  $22 = $4;
  $23 = (($22) + ($21)|0);
  $24 = HEAP8[$23>>0]|0;
  $25 = $24 << 24 >> 24;
  $26 = ($25|0)==(6);
  $27 = $6;
  $28 = (($27) + 1)|0;
  if ($26) {
   break;
  }
  $6 = $28;
 }
 if ((label|0) == 15) {
  STACKTOP = sp;return;
 }
 $29 = $4;
 $30 = (($29) + ($28)|0);
 $8 = $30;
 $31 = $5;
 $32 = $31 & 65536;
 $33 = ($32|0)!=(0);
 $34 = $8;
 $35 = HEAP8[$34>>0]|0;
 $36 = $35 << 24 >> 24;
 if ($33) {
  $37 = (__Z11PhonemeCodej(69)|0);
  $38 = ($36|0)==($37|0);
  if ($38) {
   $39 = (__Z11PhonemeCodej(101)|0);
   $40 = $39&255;
   $41 = $8;
   HEAP8[$41>>0] = $40;
  }
  $42 = $8;
  $43 = HEAP8[$42>>0]|0;
  $44 = $43 << 24 >> 24;
  $45 = (__Z11PhonemeCodej(79)|0);
  $46 = ($44|0)==($45|0);
  if (!($46)) {
   STACKTOP = sp;return;
  }
  $47 = (__Z11PhonemeCodej(111)|0);
  $48 = $47&255;
  $49 = $8;
  HEAP8[$49>>0] = $48;
  STACKTOP = sp;return;
 } else {
  $50 = (__Z11PhonemeCodej(101)|0);
  $51 = ($36|0)==($50|0);
  if ($51) {
   $52 = (__Z11PhonemeCodej(69)|0);
   $53 = $52&255;
   $54 = $8;
   HEAP8[$54>>0] = $53;
  }
  $55 = $8;
  $56 = HEAP8[$55>>0]|0;
  $57 = $56 << 24 >> 24;
  $58 = (__Z11PhonemeCodej(111)|0);
  $59 = ($57|0)==($58|0);
  if (!($59)) {
   STACKTOP = sp;return;
  }
  $60 = (__Z11PhonemeCodej(79)|0);
  $61 = $60&255;
  $62 = $8;
  HEAP8[$62>>0] = $61;
  STACKTOP = sp;return;
 }
}
function __Z12RemoveEndingP10TranslatorPciS1_($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0;
 var $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0;
 var $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0;
 var $227 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0;
 var $96 = 0, $97 = 0, $98 = 0, $99 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(96|0);
 $vararg_buffer = sp;
 $14 = sp + 44|0;
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $3;
 $15 = $5;
 $9 = $15;
 while(1) {
  $16 = $9;
  $17 = HEAP8[$16>>0]|0;
  $18 = $17 << 24 >> 24;
  $19 = ($18|0)!=(32);
  $20 = $9;
  if (!($19)) {
   break;
  }
  $21 = HEAP8[$20>>0]|0;
  $22 = $21 << 24 >> 24;
  $23 = ($22|0)==(69);
  if ($23) {
   $24 = $9;
   HEAP8[$24>>0] = 101;
  }
  $25 = $9;
  $26 = ((($25)) + 1|0);
  $9 = $26;
 }
 $27 = $5;
 $28 = $20;
 $29 = $27;
 $30 = (($28) - ($29))|0;
 $8 = $30;
 $31 = $7;
 $32 = ($31|0)!=(0|0);
 if ($32) {
  $33 = $7;
  $34 = $5;
  $35 = $8;
  _memcpy(($33|0),($34|0),($35|0))|0;
  $36 = $8;
  $37 = $7;
  $38 = (($37) + ($36)|0);
  HEAP8[$38>>0] = 0;
 }
 $39 = $6;
 $40 = $39 & 63;
 $8 = $40;
 $10 = $40;
 while(1) {
  $41 = $8;
  $42 = ($41|0)>(0);
  if (!($42)) {
   break;
  }
  $43 = $9;
  $44 = ((($43)) + -1|0);
  $9 = $44;
  while(1) {
   $45 = $9;
   $46 = HEAP8[$45>>0]|0;
   $47 = $46 << 24 >> 24;
   $48 = $47 & 192;
   $49 = ($48|0)==(128);
   if (!($49)) {
    break;
   }
   $50 = $9;
   $51 = ((($50)) + -1|0);
   $9 = $51;
   $52 = $10;
   $53 = (($52) + 1)|0;
   $10 = $53;
  }
  $54 = $8;
  $55 = (($54) + -1)|0;
  $8 = $55;
 }
 $8 = 0;
 while(1) {
  $56 = $8;
  $57 = $10;
  $58 = ($56|0)<($57|0);
  $59 = $8;
  $60 = ($59|0)<(49);
  $61 = $58 ? $60 : 0;
  $62 = $8;
  if (!($61)) {
   break;
  }
  $63 = $9;
  $64 = (($63) + ($62)|0);
  $65 = HEAP8[$64>>0]|0;
  $66 = $8;
  $67 = (($14) + ($66)|0);
  HEAP8[$67>>0] = $65;
  $68 = $8;
  $69 = $9;
  $70 = (($69) + ($68)|0);
  HEAP8[$70>>0] = 32;
  $71 = $8;
  $72 = (($71) + 1)|0;
  $8 = $72;
 }
 $73 = (($14) + ($62)|0);
 HEAP8[$73>>0] = 0;
 $74 = $9;
 $75 = ((($74)) + -1|0);
 $9 = $75;
 $76 = $6;
 $77 = $76 & 65520;
 $78 = $77 | 4;
 $11 = $78;
 $79 = $6;
 $80 = $79 & 512;
 $81 = ($80|0)!=(0);
 if ($81) {
  $82 = $9;
  $83 = HEAP8[$82>>0]|0;
  $84 = $83 << 24 >> 24;
  $85 = ($84|0)==(105);
  if ($85) {
   $86 = $9;
   HEAP8[$86>>0] = 121;
  }
 }
 $87 = $6;
 $88 = $87 & 256;
 $89 = ($88|0)!=(0);
 if ($89) {
  $90 = $4;
  $91 = ((($90)) + 324|0);
  $92 = HEAP32[$91>>2]|0;
  $93 = ($92|0)==(28268);
  L29: do {
   if ($93) {
    $94 = $9;
    $95 = HEAP8[$94>>0]|0;
    $96 = $95 << 24 >> 24;
    $97 = $96 & 128;
    $98 = ($97|0)==(0);
    if ($98) {
     $99 = $9;
     $100 = ((($99)) + -1|0);
     $101 = HEAP8[$100>>0]|0;
     $102 = $101 << 24 >> 24;
     $103 = $102 & 128;
     $104 = ($103|0)==(0);
     if ($104) {
      $105 = $4;
      $106 = $9;
      $107 = ((($106)) + -1|0);
      $108 = HEAP8[$107>>0]|0;
      $109 = $108 << 24 >> 24;
      $110 = (__Z7IsVowelP10Translatori($105,$109)|0);
      $111 = ($110|0)!=(0);
      if ($111) {
       $112 = $4;
       $113 = $9;
       $114 = HEAP8[$113>>0]|0;
       $115 = $114 << 24 >> 24;
       $116 = (__ZL8IsLetterP10Translatorii($112,$115,2)|0);
       $117 = ($116|0)!=(0);
       if ($117) {
        $118 = $4;
        $119 = $9;
        $120 = ((($119)) + -2|0);
        $121 = HEAP8[$120>>0]|0;
        $122 = $121 << 24 >> 24;
        $123 = (__Z7IsVowelP10Translatori($118,$122)|0);
        $124 = ($123|0)!=(0);
        if (!($124)) {
         $125 = $9;
         $126 = HEAP8[$125>>0]|0;
         $127 = $9;
         $128 = ((($127)) + 1|0);
         HEAP8[$128>>0] = $126;
         $129 = $9;
         $130 = ((($129)) + -1|0);
         $131 = HEAP8[$130>>0]|0;
         $132 = $9;
         HEAP8[$132>>0] = $131;
         $133 = $9;
         $134 = ((($133)) + 2|0);
         HEAP8[$134>>0] = 32;
        }
       }
      }
     }
    }
   } else {
    $135 = $4;
    $136 = ((($135)) + 324|0);
    $137 = HEAP32[$136>>2]|0;
    $138 = ($137|0)==(25966);
    $139 = $4;
    if (!($138)) {
     $190 = ((($139)) + 316|0);
     $191 = HEAP32[$190>>2]|0;
     $192 = ($191|0)!=(0);
     if (!($192)) {
      break;
     }
     $193 = $11;
     $194 = $193 | 16;
     $11 = $194;
     break;
    }
    $140 = $9;
    $141 = ((($140)) + -1|0);
    $142 = HEAP8[$141>>0]|0;
    $143 = $142 << 24 >> 24;
    $144 = (__ZL8IsLetterP10Translatorii($139,$143,7)|0);
    $145 = ($144|0)!=(0);
    if ($145) {
     $146 = $4;
     $147 = $9;
     $148 = HEAP8[$147>>0]|0;
     $149 = $148 << 24 >> 24;
     $150 = (__ZL8IsLetterP10Translatorii($146,$149,1)|0);
     $151 = ($150|0)!=(0);
     if ($151) {
      $8 = 0;
      while(1) {
       $152 = $8;
       $153 = (804 + ($152<<2)|0);
       $154 = HEAP32[$153>>2]|0;
       $12 = $154;
       $155 = ($154|0)!=(0|0);
       if (!($155)) {
        break;
       }
       $156 = $12;
       $157 = (_strlen($156)|0);
       $13 = $157;
       $158 = $12;
       $159 = $13;
       $160 = (1 - ($159))|0;
       $161 = $9;
       $162 = (($161) + ($160)|0);
       $163 = $13;
       $164 = (_memcmp($158,$162,$163)|0);
       $165 = ($164|0)==(0);
       if ($165) {
        break;
       }
       $166 = $8;
       $167 = (($166) + 1)|0;
       $8 = $167;
      }
      $168 = $12;
      $169 = ($168|0)==(0|0);
      if (!($169)) {
       break;
      }
      $170 = $11;
      $171 = $170 | 16;
      $11 = $171;
      break;
     }
    }
    $8 = 0;
    while(1) {
     $172 = $8;
     $173 = (812 + ($172<<2)|0);
     $174 = HEAP32[$173>>2]|0;
     $12 = $174;
     $175 = ($174|0)!=(0|0);
     if (!($175)) {
      break L29;
     }
     $176 = $12;
     $177 = (_strlen($176)|0);
     $13 = $177;
     $178 = $12;
     $179 = $13;
     $180 = (1 - ($179))|0;
     $181 = $9;
     $182 = (($181) + ($180)|0);
     $183 = $13;
     $184 = (_memcmp($178,$182,$183)|0);
     $185 = ($184|0)==(0);
     if ($185) {
      break;
     }
     $188 = $8;
     $189 = (($188) + 1)|0;
     $8 = $189;
    }
    $186 = $11;
    $187 = $186 | 16;
    $11 = $187;
   }
  } while(0);
  $195 = $11;
  $196 = $195 & 16;
  $197 = ($196|0)!=(0);
  if ($197) {
   $198 = $4;
   $199 = ((($198)) + 316|0);
   $200 = HEAP32[$199>>2]|0;
   $201 = $9;
   $202 = ((($201)) + 1|0);
   (__Z8utf8_outjPc($200,$202)|0);
   $203 = HEAP32[19154]|0;
   $204 = $203 & 8;
   $205 = ($204|0)!=(0);
   if ($205) {
    $206 = HEAP32[19151]|0;
    (_fprintf($206,18721,$vararg_buffer)|0);
   }
  }
 }
 $207 = $6;
 $208 = $207 & 2048;
 $209 = ($208|0)!=(0);
 if ($209) {
  $210 = $4;
  $211 = ((($210)) + 8304|0);
  $212 = HEAP32[$211>>2]|0;
  $213 = ($212|0)==(0);
  if ($213) {
   $214 = $4;
   $215 = ((($214)) + 8304|0);
   HEAP32[$215>>2] = 1;
  }
 }
 $216 = (_strcmp($14,21517)|0);
 $217 = ($216|0)==(0);
 if ($217) {
  label = 52;
 } else {
  $218 = (_strcmp($14,23388)|0);
  $219 = ($218|0)==(0);
  if ($219) {
   label = 52;
  }
 }
 if ((label|0) == 52) {
  $220 = $11;
  $221 = $220 | 8;
  $11 = $221;
 }
 $222 = HEAP8[$14>>0]|0;
 $223 = $222 << 24 >> 24;
 $224 = ($223|0)==(39);
 if (!($224)) {
  $227 = $11;
  STACKTOP = sp;return ($227|0);
 }
 $225 = $11;
 $226 = $225 & -5;
 $11 = $226;
 $227 = $11;
 STACKTOP = sp;return ($227|0);
}
function __Z11CalcPitchesP10Translatori($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$ = 0, $$2 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0;
 var $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0;
 var $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0;
 var $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0;
 var $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0;
 var $98 = 0, $99 = 0, $or$cond = 0, $or$cond4 = 0, $or$cond6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 6080|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(6080|0);
 $22 = sp + 80|0;
 $2 = $0;
 $3 = $1;
 $14 = 0;
 $23 = HEAP32[12771]|0;
 $21 = $23;
 HEAP32[10469] = $22;
 $9 = 0;
 $18 = 0;
 $6 = 0;
 while(1) {
  $24 = $6;
  $25 = HEAP32[12771]|0;
  $26 = (($25) - 1)|0;
  $27 = ($24|0)<($26|0);
  if (!($27)) {
   break;
  }
  $28 = $6;
  $29 = (51088 + (($28*24)|0)|0);
  $4 = $29;
  $30 = $4;
  $31 = HEAP16[$30>>1]|0;
  $32 = $31&65535;
  $33 = $32 & 4;
  $34 = ($33|0)!=(0);
  if ($34) {
   $35 = $9;
   $36 = HEAP32[10469]|0;
   $37 = (($36) + (($35*6)|0)|0);
   $38 = ((($37)) + 2|0);
   HEAP8[$38>>0] = 0;
   $39 = $9;
   $40 = HEAP32[10469]|0;
   $41 = (($40) + (($39*6)|0)|0);
   $42 = ((($41)) + 1|0);
   HEAP8[$42>>0] = 0;
   $43 = $6;
   $44 = (($43) + 1)|0;
   $45 = (51088 + (($44*24)|0)|0);
   $46 = ((($45)) + 17|0);
   $47 = HEAP8[$46>>0]|0;
   $48 = $9;
   $49 = HEAP32[10469]|0;
   $50 = (($49) + (($48*6)|0)|0);
   $51 = ((($50)) + 3|0);
   HEAP8[$51>>0] = $47;
   $52 = $4;
   $53 = ((($52)) + 3|0);
   $54 = HEAP8[$53>>0]|0;
   $55 = $9;
   $56 = (($55) + 1)|0;
   $9 = $56;
   $57 = HEAP32[10469]|0;
   $58 = (($57) + (($55*6)|0)|0);
   HEAP8[$58>>0] = $54;
   $59 = $4;
   $60 = ((($59)) + 3|0);
   $61 = HEAP8[$60>>0]|0;
   $62 = $61&255;
   $63 = ($62|0)>=(4);
   if ($63) {
    $64 = $18;
    $65 = (($64) + 1)|0;
    $18 = $65;
   }
  } else {
   $66 = $4;
   $67 = ((($66)) + 8|0);
   $68 = HEAP32[$67>>2]|0;
   $69 = ((($68)) + 10|0);
   $70 = HEAP8[$69>>0]|0;
   $71 = $70&255;
   $72 = ($71|0)==(27);
   $73 = $9;
   $74 = ($73|0)>(0);
   $or$cond = $72 & $74;
   if ($or$cond) {
    $75 = $9;
    $76 = (($75) - 1)|0;
    $77 = HEAP32[10469]|0;
    $78 = (($77) + (($76*6)|0)|0);
    $79 = ((($78)) + 2|0);
    $80 = HEAP8[$79>>0]|0;
    $81 = $80 << 24 >> 24;
    $82 = $81 | 4;
    $83 = $82&255;
    HEAP8[$79>>0] = $83;
   }
  }
  $84 = $6;
  $85 = (($84) + 1)|0;
  $6 = $85;
 }
 $86 = $9;
 $87 = HEAP32[10469]|0;
 $88 = (($87) + (($86*6)|0)|0);
 HEAP8[$88>>0] = 0;
 $89 = $9;
 $90 = ($89|0)==(0);
 if ($90) {
  STACKTOP = sp;return;
 }
 $91 = $2;
 $92 = ((($91)) + 244|0);
 $93 = HEAP32[$92>>2]|0;
 $94 = ($93|0)==(1);
 $95 = $2;
 if ($94) {
  $96 = $3;
  __ZL16CalcPitches_ToneP10Translatori($95,$96);
  STACKTOP = sp;return;
 }
 $97 = ((($95)) + 248|0);
 $98 = HEAP32[$97>>2]|0;
 $10 = $98;
 $99 = $10;
 $100 = ($99|0)>=(8);
 $$ = $100 ? 1 : $98;
 $10 = $$;
 $101 = $10;
 $102 = ($101|0)==(0);
 $103 = $3;
 if ($102) {
  $104 = $2;
  $105 = ((($104)) + 252|0);
  $106 = (($105) + ($103)|0);
  $107 = HEAP8[$106>>0]|0;
  $108 = $107&255;
  $11 = $108;
  $109 = $2;
  $110 = ((($109)) + 252|0);
  $111 = ((($110)) + 5|0);
  $112 = HEAP8[$111>>0]|0;
  $113 = $112&255;
  $12 = $113;
  $114 = $2;
  $115 = ((($114)) + 252|0);
  $116 = ((($115)) + 1|0);
  $117 = HEAP8[$116>>0]|0;
  $118 = $117&255;
  $13 = $118;
 } else {
  $119 = $10;
  $120 = $2;
  $121 = ((($120)) + 756|0);
  $122 = (($121) + (($119*6)|0)|0);
  $123 = (($122) + ($103)|0);
  $124 = HEAP8[$123>>0]|0;
  $125 = $124&255;
  $11 = $125;
  $126 = $10;
  $127 = $2;
  $128 = ((($127)) + 756|0);
  $129 = (($128) + (($126*6)|0)|0);
  $130 = ((($129)) + 5|0);
  $131 = HEAP8[$130>>0]|0;
  $132 = $131&255;
  $12 = $132;
  $133 = $10;
  $134 = $2;
  $135 = ((($134)) + 756|0);
  $136 = (($135) + (($133*6)|0)|0);
  $137 = ((($136)) + 1|0);
  $138 = HEAP8[$137>>0]|0;
  $139 = $138&255;
  $13 = $139;
 }
 $140 = $3;
 $141 = ($140|0)==(4);
 if ($141) {
  HEAP32[10470] = 1;
 } else {
  HEAP32[10470] = 0;
 }
 $15 = 0;
 $19 = 0;
 $8 = 0;
 while(1) {
  $142 = $8;
  $143 = $9;
  $144 = ($142|0)<($143|0);
  if (!($144)) {
   break;
  }
  $145 = $8;
  $146 = HEAP32[10469]|0;
  $147 = (($146) + (($145*6)|0)|0);
  $5 = $147;
  $148 = $5;
  $149 = HEAP8[$148>>0]|0;
  $150 = $149 << 24 >> 24;
  $151 = ($150|0)>=(4);
  if ($151) {
   $152 = $19;
   $153 = (($152) + 1)|0;
   $19 = $153;
  }
  $154 = $5;
  $155 = HEAP8[$154>>0]|0;
  $156 = $155 << 24 >> 24;
  $157 = ($156|0)==(6);
  L32: do {
   if ($157) {
    $158 = $8;
    $159 = (($158) - 1)|0;
    $6 = $159;
    while(1) {
     $160 = $6;
     $161 = $15;
     $162 = ($160|0)>=($161|0);
     if (!($162)) {
      break;
     }
     $163 = $6;
     $164 = $8;
     $165 = (($164) - 3)|0;
     $166 = ($163|0)>=($165|0);
     if (!($166)) {
      break;
     }
     $167 = $6;
     $168 = HEAP32[10469]|0;
     $169 = (($168) + (($167*6)|0)|0);
     $170 = HEAP8[$169>>0]|0;
     $171 = $170 << 24 >> 24;
     $172 = ($171|0)==(6);
     if ($172) {
      break;
     }
     $173 = $6;
     $174 = HEAP32[10469]|0;
     $175 = (($174) + (($173*6)|0)|0);
     $176 = HEAP8[$175>>0]|0;
     $177 = $176 << 24 >> 24;
     $178 = ($177|0)==(4);
     $179 = $6;
     if ($178) {
      label = 28;
      break;
     }
     $182 = (($179) + -1)|0;
     $6 = $182;
    }
    if ((label|0) == 28) {
     label = 0;
     $180 = HEAP32[10469]|0;
     $181 = (($180) + (($179*6)|0)|0);
     HEAP8[$181>>0] = 3;
    }
    $183 = $8;
    $184 = (($183) + 1)|0;
    $6 = $184;
    while(1) {
     $185 = $6;
     $186 = $9;
     $187 = ($185|0)<($186|0);
     if (!($187)) {
      break L32;
     }
     $188 = $6;
     $189 = HEAP32[10469]|0;
     $190 = (($189) + (($188*6)|0)|0);
     $191 = HEAP8[$190>>0]|0;
     $192 = $191 << 24 >> 24;
     $193 = ($192|0)==(4);
     if ($193) {
      break L32;
     }
     $194 = $6;
     $195 = HEAP32[10469]|0;
     $196 = (($195) + (($194*6)|0)|0);
     $197 = HEAP8[$196>>0]|0;
     $198 = $197 << 24 >> 24;
     $199 = ($198|0)==(6);
     if ($199) {
      break;
     }
     $205 = $6;
     $206 = (($205) + 1)|0;
     $6 = $206;
    }
    $200 = $8;
    $201 = HEAP32[10469]|0;
    $202 = (($201) + (($200*6)|0)|0);
    $203 = ((($202)) + 2|0);
    HEAP8[$203>>0] = 2;
    $204 = $5;
    HEAP8[$204>>0] = 5;
   }
  } while(0);
  $207 = $5;
  $208 = HEAP8[$207>>0]|0;
  $209 = $208 << 24 >> 24;
  $210 = ($209|0)==(6);
  if ($210) {
   $211 = $8;
   $212 = HEAP32[10469]|0;
   $213 = (($212) + (($211*6)|0)|0);
   $214 = ((($213)) + 2|0);
   HEAP8[$214>>0] = 2;
   $17 = 0;
   $215 = $18;
   $216 = $19;
   $217 = (($215) - ($216))|0;
   $218 = ($217|0)>(1);
   $$2 = $218 ? 1 : 0;
   $17 = $$2;
   $219 = $8;
   $220 = (($219) + 1)|0;
   $6 = $220;
   while(1) {
    $221 = $6;
    $222 = $9;
    $223 = ($221|0)<($222|0);
    if (!($223)) {
     break;
    }
    $224 = $6;
    $225 = HEAP32[10469]|0;
    $226 = (($225) + (($224*6)|0)|0);
    $227 = HEAP8[$226>>0]|0;
    $228 = $227 << 24 >> 24;
    $229 = ($228|0)>(4);
    if ($229) {
     break;
    }
    $230 = $6;
    $231 = HEAP32[10469]|0;
    $232 = (($231) + (($230*6)|0)|0);
    $233 = HEAP8[$232>>0]|0;
    $234 = $233 << 24 >> 24;
    $235 = ($234|0)==(4);
    if ($235) {
     $236 = $17;
     $237 = (($236) + 1)|0;
     $17 = $237;
     $238 = $17;
     $239 = ($238|0)>(1);
     if ($239) {
      break;
     }
    }
    $240 = $6;
    $241 = (($240) + 1)|0;
    $6 = $241;
   }
   $242 = $15;
   $243 = $6;
   $244 = $9;
   __ZL18count_pitch_vowelsiii($242,$243,$244);
   $245 = $6;
   $246 = $9;
   $247 = ($245|0)<($246|0);
   $248 = $3;
   $249 = ($248|0)==(0);
   $or$cond4 = $247 | $249;
   $250 = $10;
   $251 = $15;
   $252 = $6;
   $253 = $11;
   (__ZL12calc_pitchesiiii($250,$251,$252,$253)|0);
   do {
    if ($or$cond4) {
     $254 = $3;
     $255 = ($254|0)==(1);
     $256 = $3;
     $257 = ($256|0)==(2);
     $or$cond6 = $255 | $257;
     $258 = $2;
     $259 = ((($258)) + 252|0);
     if ($or$cond6) {
      $260 = ((($259)) + 1|0);
      $261 = HEAP8[$260>>0]|0;
      $262 = $261&255;
      $11 = $262;
      break;
     } else {
      $263 = HEAP8[$259>>0]|0;
      $264 = $263&255;
      $11 = $264;
      break;
     }
    }
   } while(0);
   $265 = $6;
   $15 = $265;
  }
  $266 = $15;
  $267 = $8;
  $268 = ($266|0)<($267|0);
  if ($268) {
   $269 = $5;
   $270 = ((($269)) + 2|0);
   $271 = HEAP8[$270>>0]|0;
   $272 = $271 << 24 >> 24;
   $273 = $272 & 4;
   $274 = ($273|0)!=(0);
   if ($274) {
    $275 = $8;
    $276 = (($275) + 1)|0;
    $16 = $276;
    $277 = $15;
    $278 = $16;
    $279 = $16;
    __ZL18count_pitch_vowelsiii($277,$278,$279);
    $280 = $10;
    $281 = $15;
    $282 = $16;
    $283 = $13;
    (__ZL12calc_pitchesiiii($280,$281,$282,$283)|0);
    $284 = $16;
    $15 = $284;
   }
  }
  $285 = $8;
  $286 = (($285) + 1)|0;
  $8 = $286;
 }
 $287 = $15;
 $288 = $8;
 $289 = ($287|0)<($288|0);
 if ($289) {
  $290 = $15;
  $291 = $8;
  $292 = $9;
  __ZL18count_pitch_vowelsiii($290,$291,$292);
  $293 = $10;
  $294 = $15;
  $295 = $8;
  $296 = $11;
  (__ZL12calc_pitchesiiii($293,$294,$295,$296)|0);
 }
 $8 = 0;
 $297 = $14;
 $6 = $297;
 while(1) {
  $298 = $6;
  $299 = $21;
  $300 = ($298|0)<($299|0);
  if (!($300)) {
   break;
  }
  $301 = $6;
  $302 = (51088 + (($301*24)|0)|0);
  $4 = $302;
  $303 = $8;
  $304 = HEAP32[10469]|0;
  $305 = (($304) + (($303*6)|0)|0);
  $306 = HEAP8[$305>>0]|0;
  $307 = $4;
  $308 = ((($307)) + 3|0);
  HEAP8[$308>>0] = $306;
  $309 = $4;
  $310 = HEAP16[$309>>1]|0;
  $311 = $310&65535;
  $312 = $311 & 4;
  $313 = ($312|0)!=(0);
  if ($313) {
   $314 = $8;
   $315 = HEAP32[10469]|0;
   $316 = (($315) + (($314*6)|0)|0);
   $5 = $316;
   $317 = $5;
   $318 = ((($317)) + 4|0);
   $319 = HEAP8[$318>>0]|0;
   $320 = $4;
   $321 = ((($320)) + 22|0);
   HEAP8[$321>>0] = $319;
   $322 = $5;
   $323 = ((($322)) + 5|0);
   $324 = HEAP8[$323>>0]|0;
   $325 = $4;
   $326 = ((($325)) + 23|0);
   HEAP8[$326>>0] = $324;
   $327 = $4;
   $328 = ((($327)) + 16|0);
   HEAP8[$328>>0] = 0;
   $329 = $5;
   $330 = ((($329)) + 2|0);
   $331 = HEAP8[$330>>0]|0;
   $332 = $331 << 24 >> 24;
   $333 = $332 & 1;
   $334 = ($333|0)!=(0);
   $335 = $4;
   if ($334) {
    $336 = ((($335)) + 16|0);
    HEAP8[$336>>0] = 2;
   } else {
    $337 = ((($335)) + 3|0);
    $338 = HEAP8[$337>>0]|0;
    $339 = $338&255;
    $340 = ($339|0)>(5);
    if ($340) {
     $341 = $5;
     $342 = ((($341)) + 1|0);
     $343 = HEAP8[$342>>0]|0;
     $344 = $4;
     $345 = ((($344)) + 16|0);
     HEAP8[$345>>0] = $343;
    }
   }
   $346 = $4;
   $347 = ((($346)) + 22|0);
   $348 = HEAP8[$347>>0]|0;
   $349 = $348&255;
   $350 = $4;
   $351 = ((($350)) + 23|0);
   $352 = HEAP8[$351>>0]|0;
   $353 = $352&255;
   $354 = ($349|0)>($353|0);
   if ($354) {
    $355 = $4;
    $356 = ((($355)) + 22|0);
    $357 = HEAP8[$356>>0]|0;
    $358 = $357&255;
    $7 = $358;
    $359 = $4;
    $360 = ((($359)) + 23|0);
    $361 = HEAP8[$360>>0]|0;
    $362 = $4;
    $363 = ((($362)) + 22|0);
    HEAP8[$363>>0] = $361;
    $364 = $7;
    $365 = $364&255;
    $366 = $4;
    $367 = ((($366)) + 23|0);
    HEAP8[$367>>0] = $365;
   }
   $368 = $4;
   $369 = ((($368)) + 7|0);
   $370 = HEAP8[$369>>0]|0;
   $371 = ($370<<24>>24)!=(0);
   if ($371) {
    $372 = $4;
    $373 = ((($372)) + 7|0);
    $374 = HEAP8[$373>>0]|0;
    $375 = $374&255;
    $376 = (45008 + ($375<<2)|0);
    $377 = HEAP32[$376>>2]|0;
    $20 = $377;
    $378 = $4;
    $379 = ((($378)) + 22|0);
    $380 = HEAP8[$379>>0]|0;
    $381 = $380&255;
    $382 = $4;
    $383 = ((($382)) + 23|0);
    $384 = HEAP8[$383>>0]|0;
    $385 = $384&255;
    $386 = (($381) + ($385))|0;
    $387 = (($386|0) / 2)&-1;
    $7 = $387;
    $388 = $7;
    $389 = $20;
    $390 = ((($389)) + 13|0);
    $391 = HEAP8[$390>>0]|0;
    $392 = $391&255;
    $393 = (($388) + ($392))|0;
    $394 = $393&255;
    $395 = $4;
    $396 = ((($395)) + 23|0);
    HEAP8[$396>>0] = $394;
    $397 = $7;
    $398 = $20;
    $399 = ((($398)) + 12|0);
    $400 = HEAP8[$399>>0]|0;
    $401 = $400&255;
    $402 = (($397) + ($401))|0;
    $403 = $402&255;
    $404 = $4;
    $405 = ((($404)) + 22|0);
    HEAP8[$405>>0] = $403;
   }
   $406 = $5;
   $407 = ((($406)) + 2|0);
   $408 = HEAP8[$407>>0]|0;
   $409 = $408 << 24 >> 24;
   $410 = $409 & 2;
   $411 = ($410|0)!=(0);
   if ($411) {
    $412 = $4;
    $413 = ((($412)) + 3|0);
    $414 = HEAP8[$413>>0]|0;
    $415 = $414&255;
    $416 = $415 | 8;
    $417 = $416&255;
    HEAP8[$413>>0] = $417;
   }
   $418 = $8;
   $419 = (($418) + 1)|0;
   $8 = $419;
  }
  $420 = $6;
  $421 = (($420) + 1)|0;
  $6 = $421;
 }
 STACKTOP = sp;return;
}
function __ZL16CalcPitches_ToneP10Translatori($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0;
 var $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0;
 var $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0;
 var $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0;
 var $244 = 0, $245 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0;
 var $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(80|0);
 $2 = $0;
 $3 = $1;
 $6 = 0;
 $7 = 0;
 $15 = 0;
 $16 = 0;
 $17 = 0;
 $18 = 0;
 $4 = 51088;
 $5 = 0;
 while(1) {
  $19 = $5;
  $20 = HEAP32[12771]|0;
  $21 = ($19|0)<($20|0);
  if (!($21)) {
   break;
  }
  $22 = $4;
  $23 = ((($22)) + 17|0);
  $24 = HEAP8[$23>>0]|0;
  $25 = $24&255;
  $26 = ($25|0)==(2);
  if ($26) {
   $27 = $4;
   $28 = ((($27)) + 3|0);
   $29 = HEAP8[$28>>0]|0;
   $30 = $29&255;
   $31 = ($30|0)>=(4);
   if ($31) {
    $32 = $6;
    $33 = ($32|0)==(0);
    if ($33) {
     $34 = $5;
     $7 = $34;
    }
    $35 = $4;
    $36 = ((($35)) + 3|0);
    $37 = HEAP8[$36>>0]|0;
    $38 = $37&255;
    $39 = ($38|0)>=(4);
    if ($39) {
     $40 = $5;
     $7 = $40;
     $41 = $6;
     $42 = (($41) + 1)|0;
     $6 = $42;
    }
   }
  }
  $43 = $5;
  $44 = (($43) + 1)|0;
  $5 = $44;
  $45 = $4;
  $46 = ((($45)) + 24|0);
  $4 = $46;
 }
 $47 = $7;
 $48 = (51088 + (($47*24)|0)|0);
 $49 = ((($48)) + 3|0);
 HEAP8[$49>>0] = 7;
 $50 = $2;
 $51 = ((($50)) + 324|0);
 $52 = HEAP32[$51>>2]|0;
 $53 = ($52|0)==(30313);
 if ($53) {
  $54 = $7;
  $55 = (51088 + (($54*24)|0)|0);
  $4 = $55;
  $56 = $4;
  $57 = ((($56)) + 7|0);
  $58 = HEAP8[$57>>0]|0;
  $59 = $58&255;
  $60 = ($59|0)==(0);
  if ($60) {
   $61 = (__Z11PhonemeCodej(55)|0);
   $62 = $61&255;
   $63 = $4;
   $64 = ((($63)) + 7|0);
   HEAP8[$64>>0] = $62;
  }
 }
 $9 = 1;
 $10 = 0;
 $4 = 51088;
 $14 = 51088;
 $65 = HEAP32[(45044)>>2]|0;
 $13 = $65;
 $12 = $65;
 $5 = 0;
 while(1) {
  $66 = $5;
  $67 = HEAP32[12771]|0;
  $68 = ($66|0)<($67|0);
  if (!($68)) {
   break;
  }
  $69 = $4;
  $70 = ((($69)) + 17|0);
  $71 = HEAP8[$70>>0]|0;
  $72 = $71&255;
  $73 = ($72|0)==(0);
  if ($73) {
   $74 = $4;
   $75 = ((($74)) + 8|0);
   $76 = HEAP32[$75>>2]|0;
   $77 = ((($76)) + 14|0);
   $78 = HEAP8[$77>>0]|0;
   $79 = $78&255;
   $80 = ($79|0)>(50);
   if ($80) {
    $9 = 1;
    $81 = HEAP32[(45044)>>2]|0;
    $13 = $81;
   }
  }
  $82 = $4;
  $83 = ((($82)) + 21|0);
  $84 = HEAP8[$83>>0]|0;
  $85 = ($84<<24>>24)!=(0);
  if ($85) {
   $86 = HEAP32[(45044)>>2]|0;
   $12 = $86;
  }
  $87 = $4;
  $88 = HEAP16[$87>>1]|0;
  $89 = $88&65535;
  $90 = $89 & 4;
  $91 = ($90|0)!=(0);
  if ($91) {
   $92 = $4;
   $93 = ((($92)) + 7|0);
   $94 = HEAP8[$93>>0]|0;
   $95 = $94&255;
   $8 = $95;
   $96 = $8;
   $97 = (45008 + ($96<<2)|0);
   $98 = HEAP32[$97>>2]|0;
   $11 = $98;
   $99 = $2;
   $100 = ((($99)) + 324|0);
   $101 = HEAP32[$100>>2]|0;
   $102 = ($101|0)==(31336);
   if ($102) {
    $103 = $8;
    $104 = ($103|0)==(0);
    if ($104) {
     $105 = $9;
     $106 = ($105|0)!=(0);
     $107 = $10;
     $108 = ($107|0)!=(0);
     $or$cond = $106 | $108;
     if ($or$cond) {
      $109 = (__Z11PhonemeCodej(13621)|0);
      $8 = $109;
      $10 = 1;
     } else {
      $110 = (__Z11PhonemeCodej(12593)|0);
      $8 = $110;
     }
     $111 = $8;
     $112 = $111&255;
     $113 = $4;
     $114 = ((($113)) + 7|0);
     HEAP8[$114>>0] = $112;
     $115 = $8;
     $116 = (45008 + ($115<<2)|0);
     $117 = HEAP32[$116>>2]|0;
     $11 = $117;
    } else {
     $10 = 0;
    }
    $118 = $5;
    $119 = $7;
    $120 = ($118|0)==($119|0);
    do {
     if ($120) {
      $121 = $11;
      $122 = HEAP32[$121>>2]|0;
      $123 = ($122|0)==(13621);
      if (!($123)) {
       $124 = $11;
       $125 = HEAP32[$124>>2]|0;
       $126 = ($125|0)==(12597);
       if (!($126)) {
        break;
       }
      }
      $127 = $7;
      $128 = (51088 + (($127*24)|0)|0);
      $129 = ((($128)) + 3|0);
      HEAP8[$129>>0] = 6;
     }
    } while(0);
    $130 = $13;
    $131 = HEAP32[$130>>2]|0;
    $132 = ($131|0)==(3420466);
    do {
     if ($132) {
      $133 = $11;
      $134 = HEAP32[$133>>2]|0;
      $135 = ($134|0)==(3420466);
      if ($135) {
       $136 = (__Z11PhonemeCodej(13619)|0);
       $137 = $136&255;
       $138 = $14;
       $139 = ((($138)) + 7|0);
       HEAP8[$139>>0] = $137;
       break;
      } else {
       $140 = (__Z11PhonemeCodej(12594)|0);
       $141 = $140&255;
       $142 = $14;
       $143 = ((($142)) + 7|0);
       HEAP8[$143>>0] = $141;
       break;
      }
     }
    } while(0);
    $144 = $12;
    $145 = HEAP32[$144>>2]|0;
    $146 = ($145|0)==(12597);
    if ($146) {
     $147 = $11;
     $148 = HEAP32[$147>>2]|0;
     $149 = ($148|0)==(12597);
     if ($149) {
      $150 = (__Z11PhonemeCodej(13109)|0);
      $151 = $150&255;
      $152 = $14;
      $153 = ((($152)) + 7|0);
      HEAP8[$153>>0] = $151;
     }
    }
    $154 = $11;
    $155 = HEAP32[$154>>2]|0;
    $156 = ($155|0)==(12593);
    if ($156) {
     $157 = $13;
     $158 = HEAP32[$157>>2]|0;
     $159 = ($158|0)==(13621);
     if ($159) {
      $160 = (__Z11PhonemeCodej(12850)|0);
      $161 = $160&255;
      $162 = $4;
      $163 = ((($162)) + 7|0);
      HEAP8[$163>>0] = $161;
     }
     $164 = $13;
     $165 = HEAP32[$164>>2]|0;
     $166 = ($165|0)==(13619);
     if ($166) {
      $167 = (__Z11PhonemeCodej(13107)|0);
      $168 = $167&255;
      $169 = $4;
      $170 = ((($169)) + 7|0);
      HEAP8[$170>>0] = $168;
     }
     $171 = $13;
     $172 = HEAP32[$171>>2]|0;
     $173 = ($172|0)==(3420466);
     if ($173) {
      $174 = (__Z11PhonemeCodej(13364)|0);
      $175 = $174&255;
      $176 = $4;
      $177 = ((($176)) + 7|0);
      HEAP8[$177>>0] = $175;
     }
     $178 = $4;
     $179 = ((($178)) + 3|0);
     HEAP8[$179>>0] = 0;
    }
   }
   $180 = $4;
   $14 = $180;
   $181 = $11;
   $12 = $181;
   $13 = $181;
   $9 = 0;
  }
  $182 = $5;
  $183 = (($182) + 1)|0;
  $5 = $183;
  $184 = $4;
  $185 = ((($184)) + 24|0);
  $4 = $185;
 }
 $4 = 51088;
 $5 = 0;
 while(1) {
  $186 = $5;
  $187 = HEAP32[12771]|0;
  $188 = ($186|0)<($187|0);
  if (!($188)) {
   break;
  }
  $189 = $4;
  $190 = HEAP16[$189>>1]|0;
  $191 = $190&65535;
  $192 = $191 & 4;
  $193 = ($192|0)!=(0);
  if ($193) {
   $194 = $4;
   $195 = ((($194)) + 7|0);
   $196 = HEAP8[$195>>0]|0;
   $197 = $196&255;
   $8 = $197;
   $198 = $4;
   $199 = ((($198)) + 3|0);
   $200 = HEAP8[$199>>0]|0;
   $201 = $200&255;
   $202 = ($201|0)!=(0);
   do {
    if ($202) {
     $203 = $5;
     $204 = $7;
     $205 = ($203|0)==($204|0);
     if ($205) {
      $206 = $17;
      $15 = $206;
      break;
     }
     $207 = $16;
     $208 = $15;
     $209 = (($208) - ($207))|0;
     $15 = $209;
     $210 = $15;
     $211 = $17;
     $212 = ($210|0)<=($211|0);
     if ($212) {
      $213 = $18;
      $15 = $213;
     }
    }
   } while(0);
   $214 = $8;
   $215 = ($214|0)==(0);
   if ($215) {
    $8 = 17;
    $216 = $8;
    $217 = $216&255;
    $218 = $4;
    $219 = ((($218)) + 7|0);
    HEAP8[$219>>0] = $217;
   }
   $220 = $15;
   $221 = $8;
   $222 = (45008 + ($221<<2)|0);
   $223 = HEAP32[$222>>2]|0;
   $224 = ((($223)) + 12|0);
   $225 = HEAP8[$224>>0]|0;
   $226 = $225&255;
   $227 = (($220) + ($226))|0;
   $228 = $227&255;
   $229 = $4;
   $230 = ((($229)) + 22|0);
   HEAP8[$230>>0] = $228;
   $231 = $15;
   $232 = $8;
   $233 = (45008 + ($232<<2)|0);
   $234 = HEAP32[$233>>2]|0;
   $235 = ((($234)) + 13|0);
   $236 = HEAP8[$235>>0]|0;
   $237 = $236&255;
   $238 = (($231) + ($237))|0;
   $239 = $238&255;
   $240 = $4;
   $241 = ((($240)) + 23|0);
   HEAP8[$241>>0] = $239;
  }
  $242 = $5;
  $243 = (($242) + 1)|0;
  $5 = $243;
  $244 = $4;
  $245 = ((($244)) + 24|0);
  $4 = $245;
 }
 STACKTOP = sp;return;
}
function __ZL18count_pitch_vowelsiii($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $8 = 0;
 $9 = 0;
 $10 = 0;
 HEAP32[10471] = -1;
 HEAP32[10476] = 0;
 HEAP32[10474] = 0;
 HEAP32[10477] = -1;
 $11 = $3;
 $6 = $11;
 while(1) {
  $12 = $6;
  $13 = $4;
  $14 = ($12|0)<($13|0);
  if (!($14)) {
   break;
  }
  $15 = $6;
  $16 = HEAP32[10469]|0;
  $17 = (($16) + (($15*6)|0)|0);
  $18 = HEAP8[$17>>0]|0;
  $19 = $18 << 24 >> 24;
  $7 = $19;
  $20 = $7;
  $21 = $8;
  $22 = ($20|0)>=($21|0);
  if ($22) {
   $23 = $7;
   $24 = $8;
   $25 = ($23|0)>($24|0);
   if ($25) {
    $26 = $6;
    $10 = $26;
   } else {
    $27 = $9;
    $10 = $27;
   }
   $28 = $6;
   $9 = $28;
   $29 = $7;
   $8 = $29;
  }
  $30 = $7;
  $31 = ($30|0)>=(4);
  if ($31) {
   $32 = HEAP32[10471]|0;
   $33 = ($32|0)<(0);
   if ($33) {
    $34 = $6;
    $35 = $3;
    $36 = (($34) - ($35))|0;
    HEAP32[10471] = $36;
   }
   $37 = $6;
   HEAP32[10477] = $37;
  }
  $38 = $6;
  $39 = (($38) + 1)|0;
  $6 = $39;
 }
 $40 = HEAP32[10471]|0;
 $41 = ($40|0)<(0);
 if ($41) {
  $42 = $4;
  HEAP32[10471] = $42;
 }
 $43 = $4;
 $44 = $9;
 $45 = (($43) - ($44))|0;
 $46 = (($45) - 1)|0;
 HEAP32[10474] = $46;
 $47 = $9;
 HEAP32[10473] = $47;
 $48 = $10;
 HEAP32[10472] = $48;
 $49 = HEAP32[10470]|0;
 $50 = ($49|0)!=(0);
 if ($50) {
  $51 = $4;
  HEAP32[10472] = $51;
  HEAP32[10473] = $51;
  STACKTOP = sp;return;
 }
 $52 = HEAP32[10477]|0;
 $53 = ($52|0)>=(0);
 if (!($53)) {
  $60 = HEAP32[10473]|0;
  $61 = HEAP32[10469]|0;
  $62 = (($61) + (($60*6)|0)|0);
  HEAP8[$62>>0] = 7;
  STACKTOP = sp;return;
 }
 $54 = $4;
 $55 = $5;
 $56 = ($54|0)==($55|0);
 if (!($56)) {
  STACKTOP = sp;return;
 }
 $57 = HEAP32[10477]|0;
 $58 = HEAP32[10469]|0;
 $59 = (($58) + (($57*6)|0)|0);
 HEAP8[$59>>0] = 7;
 STACKTOP = sp;return;
}
function __ZL12calc_pitchesiiii($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0;
 var $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0;
 var $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0;
 var $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0;
 var $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $13 = 0;
 $14 = $5;
 $15 = ($14|0)==(0);
 $16 = $6;
 if ($15) {
  $17 = $7;
  $18 = $8;
  $19 = (__ZL13calc_pitches2iii($16,$17,$18)|0);
  $4 = $19;
  $136 = $4;
  STACKTOP = sp;return ($136|0);
 }
 $20 = ($16|0)>(0);
 if ($20) {
  $13 = 1;
 }
 $21 = $8;
 $22 = (924 + ($21<<4)|0);
 $10 = $22;
 $23 = $8;
 $24 = (1132 + ($23<<4)|0);
 $11 = $24;
 $25 = $6;
 $9 = $25;
 $26 = $9;
 $27 = $9;
 $28 = HEAP32[10471]|0;
 $29 = (($27) + ($28))|0;
 $30 = $10;
 $31 = HEAP8[$30>>0]|0;
 $32 = $31&255;
 $33 = $10;
 $34 = ((($33)) + 1|0);
 $35 = HEAP8[$34>>0]|0;
 $36 = $35&255;
 __ZL16SetPitchGradientiiii($26,$29,$32,$36);
 $37 = HEAP32[10471]|0;
 $38 = $9;
 $39 = (($38) + ($37))|0;
 $9 = $39;
 $40 = HEAP32[19153]|0;
 $41 = $40 & 512;
 $42 = ($41|0)!=(0);
 if ($42) {
  $43 = HEAP32[10472]|0;
  HEAP32[10473] = $43;
 }
 $44 = $9;
 $45 = HEAP32[10473]|0;
 $46 = $10;
 $47 = $11;
 $48 = $13;
 $49 = (__ZL18calc_pitch_segmentiiP9TONE_HEADP12TONE_NUCLEUSii($44,$45,$46,$47,4,$48)|0);
 $9 = $49;
 $50 = HEAP32[10470]|0;
 $51 = ($50|0)!=(0);
 if ($51) {
  $4 = 0;
  $136 = $4;
  STACKTOP = sp;return ($136|0);
 }
 $52 = $11;
 $53 = ((($52)) + 14|0);
 $54 = HEAP8[$53>>0]|0;
 $55 = $54&255;
 $56 = $55 & 1;
 $57 = ($56|0)!=(0);
 if ($57) {
  $58 = $9;
  $59 = HEAP32[10469]|0;
  $60 = (($59) + (($58*6)|0)|0);
  $61 = ((($60)) + 2|0);
  $62 = HEAP8[$61>>0]|0;
  $63 = $62 << 24 >> 24;
  $64 = $63 | 2;
  $65 = $64&255;
  HEAP8[$61>>0] = $65;
 }
 $66 = HEAP32[10474]|0;
 $67 = ($66|0)==(0);
 $68 = $11;
 if ($67) {
  $69 = HEAP8[$68>>0]|0;
  $70 = $69&255;
  HEAP32[10475] = $70;
  $71 = $11;
  $72 = ((($71)) + 1|0);
  $73 = HEAP8[$72>>0]|0;
  $74 = $73&255;
  $75 = $11;
  $76 = ((($75)) + 2|0);
  $77 = HEAP8[$76>>0]|0;
  $78 = $77&255;
  $79 = (($74) - ($78))|0;
  $12 = $79;
  $80 = $9;
  $81 = (($80) + 1)|0;
  $9 = $81;
  $82 = HEAP32[10469]|0;
  $83 = (($82) + (($80*6)|0)|0);
  $84 = $11;
  $85 = ((($84)) + 2|0);
  $86 = HEAP8[$85>>0]|0;
  $87 = $86&255;
  $88 = $12;
  __ZL9set_pitchP8SYLLABLEii($83,$87,$88);
 } else {
  $89 = ((($68)) + 3|0);
  $90 = HEAP8[$89>>0]|0;
  $91 = $90&255;
  HEAP32[10475] = $91;
  $92 = $11;
  $93 = ((($92)) + 4|0);
  $94 = HEAP8[$93>>0]|0;
  $95 = $94&255;
  $96 = $11;
  $97 = ((($96)) + 5|0);
  $98 = HEAP8[$97>>0]|0;
  $99 = $98&255;
  $100 = (($95) - ($99))|0;
  $12 = $100;
  $101 = $9;
  $102 = (($101) + 1)|0;
  $9 = $102;
  $103 = HEAP32[10469]|0;
  $104 = (($103) + (($101*6)|0)|0);
  $105 = $11;
  $106 = ((($105)) + 5|0);
  $107 = HEAP8[$106>>0]|0;
  $108 = $107&255;
  $109 = $12;
  __ZL9set_pitchP8SYLLABLEii($104,$108,$109);
 }
 $110 = HEAP32[10475]|0;
 $111 = $110&255;
 $112 = HEAP32[10473]|0;
 $113 = HEAP32[10469]|0;
 $114 = (($113) + (($112*6)|0)|0);
 $115 = ((($114)) + 1|0);
 HEAP8[$115>>0] = $111;
 $116 = HEAP32[10473]|0;
 $117 = HEAP32[10469]|0;
 $118 = (($117) + (($116*6)|0)|0);
 $119 = HEAP8[$118>>0]|0;
 $120 = $119 << 24 >> 24;
 $121 = ($120|0)==(4);
 if ($121) {
  $122 = HEAP32[10473]|0;
  $123 = HEAP32[10469]|0;
  $124 = (($123) + (($122*6)|0)|0);
  HEAP8[$124>>0] = 6;
 }
 $125 = $9;
 $126 = $7;
 $127 = $11;
 $128 = ((($127)) + 12|0);
 $129 = HEAP8[$128>>0]|0;
 $130 = $129&255;
 $131 = $11;
 $132 = ((($131)) + 13|0);
 $133 = HEAP8[$132>>0]|0;
 $134 = $133&255;
 __ZL16SetPitchGradientiiii($125,$126,$130,$134);
 $135 = HEAP32[10475]|0;
 $4 = $135;
 $136 = $4;
 STACKTOP = sp;return ($136|0);
}
function __ZL13calc_pitches2iii($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0;
 var $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0;
 var $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0;
 var $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0;
 var $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $10 = $6;
 $11 = HEAP32[10468]|0;
 $12 = (($11) + (($10*68)|0)|0);
 $8 = $12;
 $13 = $4;
 $7 = $13;
 $14 = $7;
 $15 = $7;
 $16 = HEAP32[10471]|0;
 $17 = (($15) + ($16))|0;
 $18 = $8;
 $19 = ((($18)) + 24|0);
 $20 = HEAP8[$19>>0]|0;
 $21 = $20&255;
 $22 = $8;
 $23 = ((($22)) + 25|0);
 $24 = HEAP8[$23>>0]|0;
 $25 = $24&255;
 __ZL16SetPitchGradientiiii($14,$17,$21,$25);
 $26 = HEAP32[10471]|0;
 $27 = $7;
 $28 = (($27) + ($26))|0;
 $7 = $28;
 $29 = HEAP32[19153]|0;
 $30 = $29 & 512;
 $31 = ($30|0)!=(0);
 if ($31) {
  $32 = HEAP32[10472]|0;
  HEAP32[10473] = $32;
 }
 $33 = $8;
 $34 = $7;
 $35 = HEAP32[10473]|0;
 $36 = (__ZL17SetHeadIntonationP4TUNEiii($33,$34,$35,0)|0);
 $7 = $36;
 $37 = HEAP32[10470]|0;
 $38 = ($37|0)!=(0);
 if ($38) {
  $3 = 0;
  $110 = $3;
  STACKTOP = sp;return ($110|0);
 }
 $39 = HEAP32[10474]|0;
 $40 = ($39|0)==(0);
 $41 = $8;
 if ($40) {
  $42 = ((($41)) + 42|0);
  $43 = HEAP8[$42>>0]|0;
  $44 = $43&255;
  HEAP32[10475] = $44;
  $45 = $8;
  $46 = ((($45)) + 43|0);
  $47 = HEAP8[$46>>0]|0;
  $48 = $47&255;
  $49 = $8;
  $50 = ((($49)) + 44|0);
  $51 = HEAP8[$50>>0]|0;
  $52 = $51&255;
  $53 = (($48) - ($52))|0;
  $9 = $53;
  $54 = $7;
  $55 = (($54) + 1)|0;
  $7 = $55;
  $56 = HEAP32[10469]|0;
  $57 = (($56) + (($54*6)|0)|0);
  $58 = $8;
  $59 = ((($58)) + 44|0);
  $60 = HEAP8[$59>>0]|0;
  $61 = $60&255;
  $62 = $9;
  __ZL9set_pitchP8SYLLABLEii($57,$61,$62);
 } else {
  $63 = ((($41)) + 45|0);
  $64 = HEAP8[$63>>0]|0;
  $65 = $64&255;
  HEAP32[10475] = $65;
  $66 = $8;
  $67 = ((($66)) + 46|0);
  $68 = HEAP8[$67>>0]|0;
  $69 = $68&255;
  $70 = $8;
  $71 = ((($70)) + 47|0);
  $72 = HEAP8[$71>>0]|0;
  $73 = $72&255;
  $74 = (($69) - ($73))|0;
  $9 = $74;
  $75 = $7;
  $76 = (($75) + 1)|0;
  $7 = $76;
  $77 = HEAP32[10469]|0;
  $78 = (($77) + (($75*6)|0)|0);
  $79 = $8;
  $80 = ((($79)) + 47|0);
  $81 = HEAP8[$80>>0]|0;
  $82 = $81&255;
  $83 = $9;
  __ZL9set_pitchP8SYLLABLEii($78,$82,$83);
 }
 $84 = HEAP32[10475]|0;
 $85 = $84&255;
 $86 = HEAP32[10473]|0;
 $87 = HEAP32[10469]|0;
 $88 = (($87) + (($86*6)|0)|0);
 $89 = ((($88)) + 1|0);
 HEAP8[$89>>0] = $85;
 $90 = HEAP32[10473]|0;
 $91 = HEAP32[10469]|0;
 $92 = (($91) + (($90*6)|0)|0);
 $93 = HEAP8[$92>>0]|0;
 $94 = $93 << 24 >> 24;
 $95 = ($94|0)==(4);
 if ($95) {
  $96 = HEAP32[10473]|0;
  $97 = HEAP32[10469]|0;
  $98 = (($97) + (($96*6)|0)|0);
  HEAP8[$98>>0] = 6;
 }
 $99 = $7;
 $100 = $5;
 $101 = $8;
 $102 = ((($101)) + 48|0);
 $103 = HEAP8[$102>>0]|0;
 $104 = $103&255;
 $105 = $8;
 $106 = ((($105)) + 49|0);
 $107 = HEAP8[$106>>0]|0;
 $108 = $107&255;
 __ZL16SetPitchGradientiiii($99,$100,$104,$108);
 $109 = HEAP32[10475]|0;
 $3 = $109;
 $110 = $3;
 STACKTOP = sp;return ($110|0);
}
function __ZL16SetPitchGradientiiii($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $3;
 $15 = $7;
 $16 = $6;
 $17 = (($15) - ($16))|0;
 $18 = $17 << 8;
 $11 = $18;
 $19 = $5;
 $20 = $4;
 $21 = (($19) - ($20))|0;
 $12 = $21;
 $22 = $12;
 $23 = ($22|0)<=(0);
 if ($23) {
  STACKTOP = sp;return;
 }
 $24 = $12;
 $25 = ($24|0)>(1);
 if ($25) {
  $26 = $11;
  $27 = $12;
  $28 = (($26|0) / ($27|0))&-1;
  $11 = $28;
 }
 $29 = $6;
 $30 = $29 << 8;
 $10 = $30;
 $31 = $4;
 $8 = $31;
 while(1) {
  $32 = $8;
  $33 = $5;
  $34 = ($32|0)<($33|0);
  if (!($34)) {
   break;
  }
  $35 = $8;
  $36 = HEAP32[10469]|0;
  $37 = (($36) + (($35*6)|0)|0);
  $14 = $37;
  $38 = $14;
  $39 = HEAP8[$38>>0]|0;
  $40 = $39 << 24 >> 24;
  $9 = $40;
  $41 = $11;
  $42 = ($41|0)>(0);
  if ($42) {
   $43 = $14;
   $44 = $10;
   $45 = $44 >> 8;
   $46 = $11;
   $47 = $46 >> 8;
   $48 = (0 - ($47))|0;
   __ZL9set_pitchP8SYLLABLEii($43,$45,$48);
   $49 = $11;
   $50 = $10;
   $51 = (($50) + ($49))|0;
   $10 = $51;
  } else {
   $52 = $11;
   $53 = $52 >> 8;
   $54 = (0 - ($53))|0;
   $13 = $54;
   $55 = $13;
   $56 = $9;
   $57 = (1340 + ($56<<2)|0);
   $58 = HEAP32[$57>>2]|0;
   $59 = ($55|0)<($58|0);
   if ($59) {
    $60 = $9;
    $61 = (1340 + ($60<<2)|0);
    $62 = HEAP32[$61>>2]|0;
    $13 = $62;
   }
   $63 = $11;
   $64 = $10;
   $65 = (($64) + ($63))|0;
   $10 = $65;
   $66 = $13;
   $67 = ($66|0)>(18);
   if ($67) {
    $13 = 18;
   }
   $68 = $14;
   $69 = $10;
   $70 = $69 >> 8;
   $71 = $13;
   __ZL9set_pitchP8SYLLABLEii($68,$70,$71);
  }
  $72 = $8;
  $73 = (($72) + 1)|0;
  $8 = $73;
 }
 STACKTOP = sp;return;
}
function __ZL18calc_pitch_segmentiiP9TONE_HEADP12TONE_NUCLEUSii($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $19 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0;
 var $98 = 0, $99 = 0, $or$cond = 0, $or$cond3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(80|0);
 $6 = $0;
 $7 = $1;
 $8 = $2;
 $9 = $3;
 $10 = $4;
 $11 = $5;
 $13 = 0;
 $14 = 0;
 $15 = 0;
 $16 = 0;
 $18 = 0;
 $25 = $8;
 $26 = ((($25)) + 4|0);
 $27 = HEAP32[$26>>2]|0;
 $22 = $27;
 $28 = $8;
 $29 = ((($28)) + 3|0);
 $30 = HEAP8[$29>>0]|0;
 $31 = $30&255;
 $32 = $8;
 $33 = ((($32)) + 2|0);
 $34 = HEAP8[$33>>0]|0;
 $35 = $34&255;
 $36 = (($31) - ($35))|0;
 $37 = $36 << 8;
 $20 = $37;
 $38 = $20;
 $39 = (Math_abs(($38|0))|0);
 $21 = $39;
 $40 = $11;
 $41 = ($40|0)!=(0);
 if ($41) {
  $17 = 0;
  $18 = 0;
  $19 = 5;
  $23 = 20336;
  $42 = $20;
  $43 = $8;
  $44 = ((($43)) + 8|0);
  $45 = HEAP8[$44>>0]|0;
  $46 = $45&255;
  $47 = (($46) - 1)|0;
  $48 = (($42|0) / ($47|0))&-1;
  $14 = $48;
 } else {
  $49 = $8;
  $50 = ((($49)) + 10|0);
  $51 = HEAP8[$50>>0]|0;
  $52 = $51&255;
  $19 = $52;
  $53 = $8;
  $54 = ((($53)) + 12|0);
  $55 = HEAP32[$54>>2]|0;
  $23 = $55;
  $17 = 1;
 }
 while(1) {
  $56 = $6;
  $57 = $7;
  $58 = ($56|0)<($57|0);
  $59 = $6;
  if (!($58)) {
   break;
  }
  $60 = HEAP32[10469]|0;
  $61 = (($60) + (($59*6)|0)|0);
  $24 = $61;
  $62 = $24;
  $63 = HEAP8[$62>>0]|0;
  $64 = $63 << 24 >> 24;
  $12 = $64;
  $65 = $17;
  $66 = ($65|0)!=(0);
  if ($66) {
   label = 7;
  } else {
   $67 = $12;
   $68 = $10;
   $69 = ($67|0)>=($68|0);
   if ($69) {
    label = 7;
   }
  }
  if ((label|0) == 7) {
   label = 0;
   $70 = $17;
   $71 = ($70|0)!=(0);
   $72 = $12;
   $73 = ($72|0)==(5);
   $or$cond = $71 | $73;
   do {
    if ($or$cond) {
     $17 = 0;
     $18 = 0;
     $74 = $6;
     $75 = $7;
     $76 = $10;
     $77 = (__ZL16count_incrementsiii($74,$75,$76)|0);
     $15 = $77;
     $16 = $77;
     $78 = $16;
     $79 = $8;
     $80 = ((($79)) + 8|0);
     $81 = HEAP8[$80>>0]|0;
     $82 = $81&255;
     $83 = ($78|0)>($82|0);
     if ($83) {
      $84 = $8;
      $85 = ((($84)) + 8|0);
      $86 = HEAP8[$85>>0]|0;
      $87 = $86&255;
      $16 = $87;
     }
     $88 = $16;
     $89 = ($88|0)>(1);
     if ($89) {
      $90 = $20;
      $91 = $16;
      $92 = (($91) - 1)|0;
      $93 = (($90|0) / ($92|0))&-1;
      $14 = $93;
     } else {
      $14 = 0;
     }
     $94 = $8;
     $95 = ((($94)) + 2|0);
     $96 = HEAP8[$95>>0]|0;
     $97 = $96&255;
     $98 = $97 << 8;
     $13 = $98;
    } else {
     $99 = $16;
     $100 = ($99|0)>(0);
     if ($100) {
      $101 = $14;
      $102 = $13;
      $103 = (($102) + ($101))|0;
      $13 = $103;
      break;
     }
     $104 = $8;
     $105 = ((($104)) + 3|0);
     $106 = HEAP8[$105>>0]|0;
     $107 = $106&255;
     $108 = $107 << 8;
     $109 = $21;
     $110 = $18;
     $111 = (($110) + 1)|0;
     $18 = $111;
     $112 = $23;
     $113 = (($112) + ($110)|0);
     $114 = HEAP8[$113>>0]|0;
     $115 = $114 << 24 >> 24;
     $116 = Math_imul($109, $115)|0;
     $117 = (($116|0) / 64)&-1;
     $118 = (($108) + ($117))|0;
     $13 = $118;
     $119 = $18;
     $120 = $19;
     $121 = ($119|0)>=($120|0);
     if ($121) {
      $18 = 0;
      $122 = $8;
      $123 = ((($122)) + 12|0);
      $124 = HEAP32[$123>>2]|0;
      $23 = $124;
     }
    }
   } while(0);
   $125 = $16;
   $126 = (($125) + -1)|0;
   $16 = $126;
   $127 = $15;
   $128 = (($127) + -1)|0;
   $15 = $128;
   $129 = $9;
   $130 = ((($129)) + 8|0);
   $131 = HEAP32[$130>>2]|0;
   $132 = ($131|0)!=(0|0);
   $133 = $15;
   $134 = ($133|0)<(2);
   $or$cond3 = $132 & $134;
   if ($or$cond3) {
    $135 = $15;
    $136 = $9;
    $137 = ((($136)) + 8|0);
    $138 = HEAP32[$137>>2]|0;
    $139 = (($138) + ($135<<1)|0);
    $140 = HEAP16[$139>>1]|0;
    $141 = $140 << 16 >> 16;
    $142 = $141 << 8;
    $13 = $142;
   }
  }
  $143 = $12;
  $144 = ($143|0)>=(4);
  do {
   if ($144) {
    $145 = $24;
    HEAP8[$145>>0] = 6;
    $146 = $24;
    $147 = $13;
    $148 = $147 >> 8;
    $149 = $12;
    $150 = $22;
    $151 = (($150) + ($149<<2)|0);
    $152 = HEAP32[$151>>2]|0;
    __ZL9set_pitchP8SYLLABLEii($146,$148,$152);
   } else {
    $153 = $12;
    $154 = ($153|0)>=(3);
    if ($154) {
     $155 = $24;
     $156 = $13;
     $157 = $156 >> 8;
     $158 = $12;
     $159 = $22;
     $160 = (($159) + ($158<<2)|0);
     $161 = HEAP32[$160>>2]|0;
     __ZL9set_pitchP8SYLLABLEii($155,$157,$161);
     break;
    }
    $162 = $6;
    $163 = (($162) - 1)|0;
    $164 = HEAP32[10469]|0;
    $165 = (($164) + (($163*6)|0)|0);
    $166 = HEAP8[$165>>0]|0;
    $167 = $166 << 24 >> 24;
    $168 = $167 & 63;
    $169 = ($168|0)>=(3);
    $170 = $24;
    $171 = $13;
    $172 = $171 >> 8;
    if ($169) {
     $173 = $8;
     $174 = ((($173)) + 9|0);
     $175 = HEAP8[$174>>0]|0;
     $176 = $175 << 24 >> 24;
     $177 = (($172) - ($176))|0;
     $178 = $12;
     $179 = $22;
     $180 = (($179) + ($178<<2)|0);
     $181 = HEAP32[$180>>2]|0;
     __ZL9set_pitchP8SYLLABLEii($170,$177,$181);
     break;
    } else {
     $182 = $12;
     $183 = $22;
     $184 = (($183) + ($182<<2)|0);
     $185 = HEAP32[$184>>2]|0;
     __ZL9set_pitchP8SYLLABLEii($170,$172,$185);
     break;
    }
   }
  } while(0);
  $186 = $6;
  $187 = (($186) + 1)|0;
  $6 = $187;
 }
 STACKTOP = sp;return ($59|0);
}
function __ZL9set_pitchP8SYLLABLEii($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$ = 0, $$$ = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $8 = 0;
 $9 = $4;
 $10 = ($9|0)<(0);
 if ($10) {
  $4 = 0;
 }
 $11 = $4;
 $7 = $11;
 $12 = $5;
 $13 = ($12|0)<(0);
 if ($13) {
  $8 = 1;
  $14 = $5;
  $15 = (0 - ($14))|0;
  $5 = $15;
 }
 $16 = $7;
 $17 = $5;
 $18 = (($16) + ($17))|0;
 $6 = $18;
 $19 = $6;
 $20 = ($19|0)<(0);
 $$ = $20 ? 0 : $18;
 $6 = $$;
 $21 = $6;
 $22 = ($21|0)>(254);
 $$$ = $22 ? 254 : $$;
 $6 = $$$;
 $23 = $7;
 $24 = ($23|0)>(254);
 if ($24) {
  $7 = 254;
 }
 $25 = $6;
 $26 = $25&255;
 $27 = $3;
 $28 = ((($27)) + 4|0);
 HEAP8[$28>>0] = $26;
 $29 = $7;
 $30 = $29&255;
 $31 = $3;
 $32 = ((($31)) + 5|0);
 HEAP8[$32>>0] = $30;
 $33 = $8;
 $34 = $3;
 $35 = ((($34)) + 2|0);
 $36 = HEAP8[$35>>0]|0;
 $37 = $36 << 24 >> 24;
 $38 = $37 | $33;
 $39 = $38&255;
 HEAP8[$35>>0] = $39;
 STACKTOP = sp;return;
}
function __ZL16count_incrementsiii($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $6 = 0;
 while(1) {
  $8 = $3;
  $9 = $4;
  $10 = ($8|0)<($9|0);
  if (!($10)) {
   label = 6;
   break;
  }
  $11 = $3;
  $12 = (($11) + 1)|0;
  $3 = $12;
  $13 = HEAP32[10469]|0;
  $14 = (($13) + (($11*6)|0)|0);
  $15 = HEAP8[$14>>0]|0;
  $16 = $15 << 24 >> 24;
  $7 = $16;
  $17 = $7;
  $18 = ($17|0)>=(7);
  if ($18) {
   label = 6;
   break;
  }
  $19 = $7;
  $20 = $5;
  $21 = ($19|0)>=($20|0);
  if (!($21)) {
   continue;
  }
  $22 = $6;
  $23 = (($22) + 1)|0;
  $6 = $23;
 }
 if ((label|0) == 6) {
  $24 = $6;
  STACKTOP = sp;return ($24|0);
 }
 return (0)|0;
}
function __ZL17SetHeadIntonationP4TUNEiii($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$ = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0;
 var $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0;
 var $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0;
 var $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0;
 var $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0;
 var $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0;
 var $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0;
 var $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0;
 var $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0;
 var $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0;
 var $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0;
 var $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond = 0, $or$cond3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(96|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $3;
 $11 = 0;
 $12 = 0;
 $13 = 0;
 $16 = 0;
 $20 = 0;
 $21 = 0;
 $23 = 0;
 $26 = $6;
 $24 = $26;
 $25 = 2;
 $27 = $4;
 $28 = ((($27)) + 32|0);
 $29 = HEAP8[$28>>0]|0;
 $30 = $29&255;
 $31 = $4;
 $32 = ((($31)) + 31|0);
 $33 = HEAP8[$32>>0]|0;
 $34 = $33&255;
 $35 = (($30) - ($34))|0;
 $36 = $35 << 8;
 $17 = $36;
 $37 = $17;
 $38 = (Math_abs(($37|0))|0);
 $18 = $38;
 $19 = 1372;
 $15 = 1;
 $14 = 0;
 $39 = $4;
 $40 = ((($39)) + 30|0);
 $41 = HEAP8[$40>>0]|0;
 $42 = $41&255;
 $43 = ($42|0)==(255);
 $$ = $43 ? 1 : 0;
 $14 = $$;
 $44 = $4;
 $45 = ((($44)) + 33|0);
 $46 = HEAP8[$45>>0]|0;
 $47 = $46&255;
 $48 = ($47|0)!=(255);
 L1: do {
  if ($48) {
   $49 = $6;
   $50 = (($49) - 1)|0;
   $10 = $50;
   while(1) {
    $51 = $10;
    $52 = $5;
    $53 = ($51|0)>=($52|0);
    if (!($53)) {
     break L1;
    }
    $54 = $10;
    $55 = HEAP32[10469]|0;
    $56 = (($55) + (($54*6)|0)|0);
    $57 = HEAP8[$56>>0]|0;
    $58 = $57 << 24 >> 24;
    $59 = ($58|0)>=(4);
    $60 = $10;
    if ($59) {
     break;
    }
    $61 = (($60) + -1)|0;
    $10 = $61;
   }
   $24 = $60;
  }
 } while(0);
 while(1) {
  $62 = $5;
  $63 = $6;
  $64 = ($62|0)<($63|0);
  $65 = $5;
  if (!($64)) {
   break;
  }
  $66 = HEAP32[10469]|0;
  $67 = (($66) + (($65*6)|0)|0);
  $9 = $67;
  $68 = $9;
  $69 = HEAP8[$68>>0]|0;
  $70 = $69 << 24 >> 24;
  $8 = $70;
  $71 = $15;
  $72 = ($71|0)!=(0);
  $73 = $8;
  $74 = ($73|0)>=(4);
  $or$cond = $72 | $74;
  if ($or$cond) {
   $75 = $15;
   $76 = ($75|0)!=(0);
   $77 = $8;
   $78 = ($77|0)==(5);
   $or$cond3 = $76 | $78;
   do {
    if ($or$cond3) {
     $15 = 0;
     $16 = 0;
     $79 = $4;
     $80 = ((($79)) + 30|0);
     $81 = HEAP8[$80>>0]|0;
     $82 = $81&255;
     $83 = ($82|0)==(255);
     $84 = $5;
     if ($83) {
      $85 = $24;
      $86 = (__ZL16count_incrementsiii($84,$85,4)|0);
      $13 = $86;
      $87 = $4;
      $88 = ((($87)) + 31|0);
      $89 = HEAP8[$88>>0]|0;
      $90 = $89&255;
      $91 = $90 << 8;
      $11 = $91;
     } else {
      $92 = (($84) + 1)|0;
      $93 = $24;
      $94 = (__ZL16count_incrementsiii($92,$93,4)|0);
      $13 = $94;
      $95 = $4;
      $96 = ((($95)) + 30|0);
      $97 = HEAP8[$96>>0]|0;
      $98 = $97&255;
      $99 = $98 << 8;
      $11 = $99;
      $23 = 1;
     }
     $100 = $13;
     $101 = $4;
     $102 = ((($101)) + 34|0);
     $103 = HEAP8[$102>>0]|0;
     $104 = $103&255;
     $105 = ($100|0)>($104|0);
     if ($105) {
      $106 = $4;
      $107 = ((($106)) + 34|0);
      $108 = HEAP8[$107>>0]|0;
      $109 = $108&255;
      $13 = $109;
     }
     $110 = $13;
     $111 = ($110|0)>(1);
     if ($111) {
      $112 = $17;
      $113 = $13;
      $114 = (($113) - 1)|0;
      $115 = (($112|0) / ($114|0))&-1;
      $12 = $115;
      break;
     } else {
      $12 = 0;
      break;
     }
    } else {
     $116 = $5;
     $117 = $24;
     $118 = ($116|0)==($117|0);
     if ($118) {
      $119 = $4;
      $120 = ((($119)) + 33|0);
      $121 = HEAP8[$120>>0]|0;
      $122 = $121&255;
      $123 = $122 << 8;
      $11 = $123;
      $14 = 2;
      break;
     }
     $124 = $23;
     $125 = ($124|0)!=(0);
     if ($125) {
      $14 = 1;
      $23 = 0;
      $126 = $4;
      $127 = ((($126)) + 31|0);
      $128 = HEAP8[$127>>0]|0;
      $129 = $128&255;
      $130 = $129 << 8;
      $11 = $130;
      $131 = $13;
      $132 = (($131) + 1)|0;
      $13 = $132;
      break;
     }
     $133 = $13;
     $134 = ($133|0)>(0);
     if ($134) {
      $135 = $12;
      $136 = $11;
      $137 = (($136) + ($135))|0;
      $11 = $137;
      break;
     }
     $138 = $4;
     $139 = ((($138)) + 32|0);
     $140 = HEAP8[$139>>0]|0;
     $141 = $140&255;
     $142 = $141 << 8;
     $143 = $18;
     $144 = $16;
     $145 = (($144) + 1)|0;
     $16 = $145;
     $146 = $4;
     $147 = ((($146)) + 16|0);
     $148 = (($147) + ($144)|0);
     $149 = HEAP8[$148>>0]|0;
     $150 = $149 << 24 >> 24;
     $151 = Math_imul($143, $150)|0;
     $152 = (($151|0) / 64)&-1;
     $153 = (($142) + ($152))|0;
     $11 = $153;
     $154 = $16;
     $155 = $4;
     $156 = ((($155)) + 35|0);
     $157 = HEAP8[$156>>0]|0;
     $158 = $157&255;
     $159 = ($154|0)>=($158|0);
     if ($159) {
      $16 = 0;
     }
    }
   } while(0);
   $160 = $13;
   $161 = (($160) + -1)|0;
   $13 = $161;
  }
  $162 = $8;
  $163 = ($162|0)>=(4);
  do {
   if ($163) {
    $164 = $5;
    $165 = (($164) + 1)|0;
    $166 = $6;
    $167 = $25;
    $168 = (__ZL15CountUnstressediii($165,$166,$167)|0);
    $20 = $168;
    $21 = 0;
    $169 = $9;
    HEAP8[$169>>0] = 6;
    $170 = $4;
    $171 = ((($170)) + 26|0);
    $172 = HEAP8[$171>>0]|0;
    $173 = $9;
    $174 = ((($173)) + 1|0);
    HEAP8[$174>>0] = $172;
    $175 = $9;
    $176 = $11;
    $177 = $176 >> 8;
    $178 = $4;
    $179 = ((($178)) + 27|0);
    $180 = HEAP8[$179>>0]|0;
    $181 = $180&255;
    __ZL9set_pitchP8SYLLABLEii($175,$177,$181);
   } else {
    $182 = $8;
    $183 = $25;
    $184 = ($182|0)>=($183|0);
    if ($184) {
     $185 = $5;
     $186 = (($185) + 1)|0;
     $187 = $6;
     $188 = $25;
     $189 = (__ZL15CountUnstressediii($186,$187,$188)|0);
     $20 = $189;
     $21 = 0;
     $190 = $9;
     $191 = $11;
     $192 = $191 >> 8;
     $193 = $8;
     $194 = $19;
     $195 = (($194) + ($193<<2)|0);
     $196 = HEAP32[$195>>2]|0;
     __ZL9set_pitchP8SYLLABLEii($190,$192,$196);
     break;
    }
    $197 = $20;
    $198 = ($197|0)>(1);
    if ($198) {
     $199 = $14;
     $200 = $4;
     $201 = ((($200)) + 39|0);
     $202 = (($201) + ($199)|0);
     $203 = HEAP8[$202>>0]|0;
     $204 = $203 << 24 >> 24;
     $205 = $14;
     $206 = $4;
     $207 = ((($206)) + 36|0);
     $208 = (($207) + ($205)|0);
     $209 = HEAP8[$208>>0]|0;
     $210 = $209 << 24 >> 24;
     $211 = (($204) - ($210))|0;
     $212 = $20;
     $213 = (($212) - 1)|0;
     $214 = (($211|0) / ($213|0))&-1;
     $22 = $214;
    } else {
     $22 = 0;
    }
    $215 = $9;
    $216 = $11;
    $217 = $216 >> 8;
    $218 = $14;
    $219 = $4;
    $220 = ((($219)) + 36|0);
    $221 = (($220) + ($218)|0);
    $222 = HEAP8[$221>>0]|0;
    $223 = $222 << 24 >> 24;
    $224 = (($217) + ($223))|0;
    $225 = $22;
    $226 = $21;
    $227 = Math_imul($225, $226)|0;
    $228 = (($224) + ($227))|0;
    $229 = $8;
    $230 = $19;
    $231 = (($230) + ($229<<2)|0);
    $232 = HEAP32[$231>>2]|0;
    __ZL9set_pitchP8SYLLABLEii($215,$228,$232);
    $233 = $21;
    $234 = (($233) + 1)|0;
    $21 = $234;
   }
  } while(0);
  $235 = $5;
  $236 = (($235) + 1)|0;
  $5 = $236;
 }
 STACKTOP = sp;return ($65|0);
}
function __ZL15CountUnstressediii($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $7 = $3;
 $6 = $7;
 while(1) {
  $8 = $6;
  $9 = $4;
  $10 = ($8|0)<=($9|0);
  if (!($10)) {
   break;
  }
  $11 = $6;
  $12 = HEAP32[10469]|0;
  $13 = (($12) + (($11*6)|0)|0);
  $14 = HEAP8[$13>>0]|0;
  $15 = $14 << 24 >> 24;
  $16 = $5;
  $17 = ($15|0)>=($16|0);
  if ($17) {
   break;
  }
  $18 = $6;
  $19 = (($18) + 1)|0;
  $6 = $19;
 }
 $20 = $6;
 $21 = $3;
 $22 = (($20) - ($21))|0;
 STACKTOP = sp;return ($22|0);
}
function __Z9iswalpha2i($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $2;
 $4 = ($3|0)<(128);
 $5 = $2;
 do {
  if ($4) {
   $6 = (_isalpha($5)|0);
   $1 = $6;
  } else {
   $7 = ($5|0)>(12352);
   $8 = $2;
   $9 = ($8|0)<=(42752);
   $or$cond = $7 & $9;
   if ($or$cond) {
    $1 = 1;
    break;
   }
   $10 = $2;
   $11 = ($10|0)>(591);
   $12 = $2;
   if ($11) {
    $13 = (_iswalpha($12)|0);
    $1 = $13;
    break;
   } else {
    $14 = (($12) - 128)|0;
    $15 = (20356 + ($14)|0);
    $16 = HEAP8[$15>>0]|0;
    $17 = $16&255;
    $1 = $17;
    break;
   }
  }
 } while(0);
 $18 = $1;
 STACKTOP = sp;return ($18|0);
}
function __Z9iswlower2i($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $2;
 $4 = ($3|0)<(128);
 $5 = $2;
 do {
  if ($4) {
   $6 = (_islower($5)|0);
   $1 = $6;
  } else {
   $7 = ($5|0)>(591);
   $8 = $2;
   if ($7) {
    $9 = (_iswlower($8)|0);
    $1 = $9;
    break;
   }
   $10 = (($8) - 128)|0;
   $11 = (20356 + ($10)|0);
   $12 = HEAP8[$11>>0]|0;
   $13 = $12&255;
   $14 = ($13|0)==(255);
   if ($14) {
    $1 = 1;
    break;
   } else {
    $1 = 0;
    break;
   }
  }
 } while(0);
 $15 = $1;
 STACKTOP = sp;return ($15|0);
}
function __Z9iswupper2i($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $4 = $2;
 $5 = ($4|0)<(128);
 $6 = $2;
 do {
  if ($5) {
   $7 = (_isupper($6)|0);
   $1 = $7;
  } else {
   $8 = ($6|0)>(591);
   $9 = $2;
   if ($8) {
    $10 = (_iswupper($9)|0);
    $1 = $10;
    break;
   }
   $11 = (($9) - 128)|0;
   $12 = (20356 + ($11)|0);
   $13 = HEAP8[$12>>0]|0;
   $14 = $13&255;
   $3 = $14;
   $15 = ($14|0)>(0);
   $16 = $3;
   $17 = ($16|0)<(254);
   $or$cond = $15 & $17;
   if ($or$cond) {
    $1 = 1;
    break;
   } else {
    $1 = 0;
    break;
   }
  }
 } while(0);
 $18 = $1;
 STACKTOP = sp;return ($18|0);
}
function __Z9towlower2j($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $5 = $2;
 $6 = ($5|0)==(73);
 if ($6) {
  $7 = HEAP32[19149]|0;
  $8 = ((($7)) + 273|0);
  $9 = HEAP8[$8>>0]|0;
  $10 = ($9<<24>>24)!=(0);
  if ($10) {
   $2 = 305;
  }
 }
 $11 = $2;
 $12 = ($11>>>0)<(128);
 $13 = $2;
 if ($12) {
  $14 = (_tolower($13)|0);
  $1 = $14;
  $46 = $1;
  STACKTOP = sp;return ($46|0);
 }
 $15 = ($13>>>0)>(591);
 $16 = $2;
 if ($15) {
  $17 = (_towlower($16)|0);
  $1 = $17;
  $46 = $1;
  STACKTOP = sp;return ($46|0);
 }
 $18 = (($16) - 128)|0;
 $19 = (20356 + ($18)|0);
 $20 = HEAP8[$19>>0]|0;
 $21 = $20&255;
 $3 = $21;
 $22 = ($21|0)>=(254);
 if ($22) {
  $23 = $2;
  $1 = $23;
  $46 = $1;
  STACKTOP = sp;return ($46|0);
 }
 $24 = $3;
 $25 = ($24|0)==(253);
 L17: do {
  if ($25) {
   $4 = 0;
   while(1) {
    $26 = $4;
    $27 = (6498 + ($26<<1)|0);
    $28 = HEAP16[$27>>1]|0;
    $29 = $28 << 16 >> 16;
    $30 = ($29|0)!=(0);
    if (!($30)) {
     break L17;
    }
    $31 = $4;
    $32 = (6498 + ($31<<1)|0);
    $33 = HEAP16[$32>>1]|0;
    $34 = $33 << 16 >> 16;
    $35 = $2;
    $36 = ($34|0)==($35|0);
    $37 = $4;
    if ($36) {
     break;
    }
    $42 = (($37) + 2)|0;
    $4 = $42;
   }
   $38 = (($37) + 1)|0;
   $39 = (6498 + ($38<<1)|0);
   $40 = HEAP16[$39>>1]|0;
   $41 = $40 << 16 >> 16;
   $1 = $41;
   $46 = $1;
   STACKTOP = sp;return ($46|0);
  }
 } while(0);
 $43 = $2;
 $44 = $3;
 $45 = (($43) + ($44))|0;
 $1 = $45;
 $46 = $1;
 STACKTOP = sp;return ($46|0);
}
function __Z9towupper2j($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $4 = $2;
 $5 = ($4>>>0)>(591);
 $6 = $2;
 do {
  if ($5) {
   $7 = (_towupper($6)|0);
   $1 = $7;
  } else {
   $8 = (($6) - 32)|0;
   $9 = (__Z9towlower2j($8)|0);
   $10 = $2;
   $11 = ($9|0)==($10|0);
   $12 = $2;
   if ($11) {
    $13 = (($12) - 32)|0;
    $1 = $13;
    break;
   }
   $14 = (($12) - 1)|0;
   $15 = (__Z9towlower2j($14)|0);
   $16 = $2;
   $17 = ($15|0)==($16|0);
   if ($17) {
    $18 = $2;
    $19 = (($18) - 1)|0;
    $1 = $19;
    break;
   }
   $3 = 0;
   while(1) {
    $20 = $3;
    $21 = (6538 + ($20<<1)|0);
    $22 = HEAP16[$21>>1]|0;
    $23 = $22 << 16 >> 16;
    $24 = ($23|0)!=(0);
    if (!($24)) {
     label = 12;
     break;
    }
    $25 = $3;
    $26 = (6538 + ($25<<1)|0);
    $27 = HEAP16[$26>>1]|0;
    $28 = $27 << 16 >> 16;
    $29 = $2;
    $30 = ($28|0)==($29|0);
    $31 = $3;
    if ($30) {
     label = 10;
     break;
    }
    $36 = (($31) + 2)|0;
    $3 = $36;
   }
   if ((label|0) == 10) {
    $32 = (($31) + 1)|0;
    $33 = (6538 + ($32<<1)|0);
    $34 = HEAP16[$33>>1]|0;
    $35 = $34 << 16 >> 16;
    $1 = $35;
    break;
   }
   else if ((label|0) == 12) {
    $37 = $2;
    $1 = $37;
    break;
   }
  }
 } while(0);
 $38 = $1;
 STACKTOP = sp;return ($38|0);
}
function __Z3Eofv() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = HEAP32[10817]|0;
 $2 = ($1|0)!=(0);
 do {
  if ($2) {
   $0 = 0;
  } else {
   $3 = HEAP32[10818]|0;
   $4 = ($3|0)!=(0|0);
   if ($4) {
    $5 = HEAP32[10818]|0;
    $6 = (_feof($5)|0);
    $0 = $6;
    break;
   } else {
    $7 = HEAP32[10819]|0;
    $0 = $7;
    break;
   }
  }
 } while(0);
 $8 = $0;
 STACKTOP = sp;return ($8|0);
}
function __Z13WordToString2j($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $3 = 119924;
 $2 = 3;
 while(1) {
  $4 = $2;
  $5 = ($4|0)>=(0);
  if (!($5)) {
   break;
  }
  $6 = $1;
  $7 = $2;
  $8 = $7<<3;
  $9 = $6 >>> $8;
  $10 = $9&255;
  $11 = $3;
  HEAP8[$11>>0] = $10;
  $12 = $10 << 24 >> 24;
  $13 = ($12|0)!=(0);
  if ($13) {
   $14 = $3;
   $15 = ((($14)) + 1|0);
   $3 = $15;
  }
  $16 = $2;
  $17 = (($16) + -1)|0;
  $2 = $17;
 }
 $18 = $3;
 HEAP8[$18>>0] = 0;
 STACKTOP = sp;return (119924|0);
}
function __Z10Read4BytesP8_IO_FILE($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $4 = 0;
 $2 = 0;
 while(1) {
  $5 = $2;
  $6 = ($5|0)<(4);
  if (!($6)) {
   break;
  }
  $7 = $1;
  $8 = (_fgetc($7)|0);
  $9 = $8 & 255;
  $10 = $9&255;
  $3 = $10;
  $11 = $3;
  $12 = $11&255;
  $13 = $2;
  $14 = $13<<3;
  $15 = $12 << $14;
  $16 = $4;
  $17 = (($16) + ($15))|0;
  $4 = $17;
  $18 = $2;
  $19 = (($18) + 1)|0;
  $2 = $19;
 }
 $20 = $4;
 STACKTOP = sp;return ($20|0);
}
function __Z11AddNameDataPKci($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $3 = $0;
 $4 = $1;
 $8 = $4;
 $9 = ($8|0)!=(0);
 $10 = $3;
 if ($9) {
  $11 = (_wcslen($10)|0);
  $12 = (($11) + 1)|0;
  $13 = $12<<2;
  $6 = $13;
  $14 = HEAP32[10820]|0;
  $15 = (($14) + 4)|0;
  $16 = (($15) - 1)|0;
  $17 = (($16>>>0) % 4)&-1;
  HEAP32[10820] = $17;
 } else {
  $18 = (_strlen($10)|0);
  $19 = (($18) + 1)|0;
  $6 = $19;
 }
 $20 = HEAP32[10821]|0;
 $21 = $6;
 $22 = (($20) + ($21))|0;
 $23 = HEAP32[10820]|0;
 $24 = ($22|0)>=($23|0);
 do {
  if ($24) {
   $25 = HEAP32[10478]|0;
   $26 = HEAP32[10821]|0;
   $27 = $6;
   $28 = (($26) + ($27))|0;
   $29 = (($28) + 1000)|0;
   $30 = (_realloc($25,$29)|0);
   $7 = $30;
   $31 = ($30|0)==(0|0);
   if (!($31)) {
    $32 = $7;
    HEAP32[10478] = $32;
    $33 = HEAP32[10821]|0;
    $34 = $6;
    $35 = (($33) + ($34))|0;
    $36 = (($35) + 1000)|0;
    HEAP32[10820] = $36;
    break;
   }
   $2 = -1;
   $46 = $2;
   STACKTOP = sp;return ($46|0);
  }
 } while(0);
 $37 = HEAP32[10821]|0;
 $5 = $37;
 $38 = HEAP32[10478]|0;
 $39 = (($38) + ($37)|0);
 $40 = $3;
 $41 = $6;
 _memcpy(($39|0),($40|0),($41|0))|0;
 $42 = $6;
 $43 = HEAP32[10821]|0;
 $44 = (($43) + ($42))|0;
 HEAP32[10821] = $44;
 $45 = $5;
 $2 = $45;
 $46 = $2;
 STACKTOP = sp;return ($46|0);
}
function __Z13SetVoiceStackP12espeak_VOICEPKc($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $4 = 43288;
 $5 = $2;
 $6 = ($5|0)==(0|0);
 if ($6) {
  $7 = $4;
  dest=$7; stop=dest+76|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
  STACKTOP = sp;return;
 }
 $8 = $2;
 $9 = ((($8)) + 4|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ($10|0)!=(0|0);
 if ($11) {
  $12 = $4;
  $13 = ((($12)) + 56|0);
  $14 = $2;
  $15 = ((($14)) + 4|0);
  $16 = HEAP32[$15>>2]|0;
  (_strcpy($13,$16)|0);
 }
 $17 = $2;
 $18 = HEAP32[$17>>2]|0;
 $19 = ($18|0)!=(0|0);
 if ($19) {
  $20 = $4;
  $21 = ((($20)) + 16|0);
  $22 = $2;
  $23 = HEAP32[$22>>2]|0;
  __Z8strncpy0PcPKci($21,$23,40);
 }
 $24 = $2;
 $25 = ((($24)) + 14|0);
 $26 = HEAP8[$25>>0]|0;
 $27 = $26&255;
 $28 = $4;
 $29 = ((($28)) + 4|0);
 HEAP32[$29>>2] = $27;
 $30 = $2;
 $31 = ((($30)) + 13|0);
 $32 = HEAP8[$31>>0]|0;
 $33 = $32&255;
 $34 = $4;
 $35 = ((($34)) + 12|0);
 HEAP32[$35>>2] = $33;
 $36 = $2;
 $37 = ((($36)) + 12|0);
 $38 = HEAP8[$37>>0]|0;
 $39 = $38&255;
 $40 = $4;
 $41 = ((($40)) + 8|0);
 HEAP32[$41>>2] = $39;
 $42 = $3;
 $43 = (_memcmp($42,20820,2)|0);
 $44 = ($43|0)==(0);
 if ($44) {
  $45 = $3;
  $46 = ((($45)) + 3|0);
  $3 = $46;
 }
 $47 = $3;
 __Z8strncpy0PcPKci(119929,$47,40);
 ;HEAP32[44808>>2]=HEAP32[78088>>2]|0;HEAP32[44808+4>>2]=HEAP32[78088+4>>2]|0;HEAP32[44808+8>>2]=HEAP32[78088+8>>2]|0;HEAP32[44808+12>>2]=HEAP32[78088+12>>2]|0;HEAP32[44808+16>>2]=HEAP32[78088+16>>2]|0;HEAP32[44808+20>>2]=HEAP32[78088+20>>2]|0;
 STACKTOP = sp;return;
}
function __Z10ReadClauseP10TranslatorP8_IO_FILEPcPsPiiS5_S3_($0,$1,$2,$3,$4,$5,$6,$7) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0;
 var $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0;
 var $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0;
 var $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0;
 var $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0;
 var $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0;
 var $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0;
 var $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0;
 var $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0;
 var $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0;
 var $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0;
 var $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0;
 var $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0;
 var $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0;
 var $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0;
 var $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0;
 var $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0;
 var $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0;
 var $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0;
 var $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0;
 var $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0;
 var $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0;
 var $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0;
 var $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0;
 var $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0;
 var $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0;
 var $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0;
 var $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0;
 var $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0;
 var $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0;
 var $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0;
 var $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0;
 var $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0, $77 = 0, $770 = 0, $771 = 0;
 var $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0, $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0, $788 = 0, $789 = 0, $79 = 0;
 var $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0, $799 = 0, $8 = 0, $80 = 0, $800 = 0, $801 = 0, $802 = 0, $803 = 0, $804 = 0, $805 = 0, $806 = 0, $807 = 0;
 var $808 = 0, $809 = 0, $81 = 0, $810 = 0, $811 = 0, $812 = 0, $813 = 0, $814 = 0, $815 = 0, $816 = 0, $817 = 0, $818 = 0, $819 = 0, $82 = 0, $820 = 0, $821 = 0, $822 = 0, $83 = 0, $84 = 0, $85 = 0;
 var $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond = 0, $or$cond11 = 0, $or$cond13 = 0, $or$cond17 = 0, $or$cond19 = 0;
 var $or$cond21 = 0, $or$cond24 = 0, $or$cond29 = 0, $or$cond3 = 0, $or$cond31 = 0, $or$cond33 = 0, $or$cond36 = 0, $or$cond38 = 0, $or$cond40 = 0, $or$cond42 = 0, $or$cond44 = 0, $or$cond47 = 0, $or$cond49 = 0, $or$cond5 = 0, $or$cond51 = 0, $or$cond53 = 0, $or$cond55 = 0, $or$cond57 = 0, $or$cond59 = 0, $or$cond61 = 0;
 var $or$cond63 = 0, $or$cond65 = 0, $or$cond67 = 0, $or$cond7 = 0, $or$cond9 = 0, $vararg_buffer = 0, $vararg_buffer70 = 0, $vararg_buffer73 = 0, $vararg_buffer76 = 0, $vararg_buffer79 = 0, $vararg_ptr68 = 0, $vararg_ptr69 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1328|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(1328|0);
 $vararg_buffer79 = sp + 40|0;
 $vararg_buffer76 = sp + 32|0;
 $vararg_buffer73 = sp + 24|0;
 $vararg_buffer70 = sp + 16|0;
 $vararg_buffer = sp;
 $21 = sp + 1168|0;
 $22 = sp + 1164|0;
 $27 = sp + 1144|0;
 $44 = sp + 52|0;
 $45 = sp + 1296|0;
 $47 = sp + 1256|0;
 $48 = sp + 1224|0;
 $13 = $0;
 $14 = $1;
 $15 = $2;
 $16 = $3;
 $17 = $4;
 $18 = $5;
 $19 = $6;
 $20 = $7;
 HEAP32[$21>>2] = 32;
 $23 = 32;
 $24 = 32;
 HEAP32[$27>>2] = 0;
 $30 = 0;
 $31 = 0;
 $36 = 0;
 $38 = 0;
 $40 = 0;
 $41 = 0;
 $42 = 0;
 $43 = 0;
 $50 = HEAP32[11208]|0;
 $51 = ($50|0)!=(0);
 if ($51) {
  HEAP32[19168] = 0;
  HEAP32[11208] = 0;
 }
 $52 = $13;
 $53 = ((($52)) + 400|0);
 HEAP32[$53>>2] = 0;
 $54 = $13;
 $55 = ((($54)) + 8336|0);
 HEAP32[$55>>2] = 0;
 $56 = $13;
 $57 = ((($56)) + 8340|0);
 HEAP32[$57>>2] = 0;
 HEAP32[10819] = 0;
 $58 = $19;
 HEAP32[$58>>2] = 0;
 $59 = $20;
 HEAP8[$59>>0] = 0;
 $60 = $14;
 HEAP32[10818] = $60;
 $61 = HEAP32[11209]|0;
 $62 = ($61|0)!=(0|0);
 if ($62) {
  $63 = $15;
  $64 = HEAP32[11209]|0;
  (_strcpy($63,$64)|0);
  $65 = HEAP32[11209]|0;
  $66 = (_strlen($65)|0);
  $67 = HEAP32[$27>>2]|0;
  $68 = (($67) + ($66))|0;
  HEAP32[$27>>2] = $68;
  HEAP32[11209] = 0;
 }
 $69 = HEAP32[11210]|0;
 $70 = ($69|0)!=(0);
 if ($70) {
  $71 = HEAP32[11210]|0;
  HEAP32[$22>>2] = $71;
 } else {
  $72 = (__ZL4GetCv()|0);
  HEAP32[$22>>2] = $72;
 }
 L10: while(1) {
  $73 = (__Z3Eofv()|0);
  $74 = ($73|0)==(0);
  $75 = HEAP32[10817]|0;
  $76 = ($75|0)!=(0);
  $or$cond = $74 | $76;
  $77 = HEAP32[11210]|0;
  $78 = ($77|0)!=(0);
  $or$cond3 = $or$cond | $78;
  $79 = HEAP32[366]|0;
  $80 = ($79|0)>=(0);
  $or$cond67 = $or$cond3 | $80;
  if (!($or$cond67)) {
   label = 244;
   break;
  }
  $81 = HEAP32[$21>>2]|0;
  $82 = (_iswalnum($81)|0);
  $83 = ($82|0)!=(0);
  if (!($83)) {
   $84 = HEAP32[19169]|0;
   $85 = ($84|0)>(0);
   if ($85) {
    $86 = HEAP32[10481]|0;
    $87 = HEAP32[19169]|0;
    $88 = ($86|0)>($87|0);
    if ($88) {
     label = 12;
     break;
    }
   }
   $89 = HEAP32[19167]|0;
   $90 = ($89|0)>(0);
   if ($90) {
    $91 = HEAP32[10481]|0;
    $92 = HEAP32[19167]|0;
    $93 = ($91|0)>=($92|0);
    if ($93) {
     label = 15;
     break;
    }
   }
  }
  $95 = $23;
  $24 = $95;
  $96 = HEAP32[$21>>2]|0;
  $23 = $96;
  $97 = HEAP32[$22>>2]|0;
  HEAP32[$21>>2] = $97;
  $98 = HEAP32[366]|0;
  $99 = ($98|0)>=(0);
  if ($99) {
   $100 = HEAP32[366]|0;
   $101 = (119969 + ($100)|0);
   $102 = HEAP8[$101>>0]|0;
   $103 = $102 << 24 >> 24;
   $104 = ($103|0)==(0);
   if ($104) {
    HEAP32[366] = -1;
   }
  }
  $105 = HEAP32[366]|0;
  $106 = ($105|0)==(0);
  $107 = HEAP32[11210]|0;
  $108 = ($107|0)==(0);
  $or$cond5 = $106 & $108;
  if ($or$cond5) {
   $109 = HEAP32[366]|0;
   $110 = (($109) + 1)|0;
   HEAP32[366] = $110;
   $111 = (119969 + ($109)|0);
   $112 = HEAP8[$111>>0]|0;
   $113 = $112 << 24 >> 24;
   HEAP32[$21>>2] = $113;
  }
  $114 = HEAP32[366]|0;
  $115 = ($114|0)>=(0);
  if ($115) {
   $116 = HEAP32[366]|0;
   $117 = (($116) + 1)|0;
   HEAP32[366] = $117;
   $118 = (119969 + ($116)|0);
   $119 = HEAP8[$118>>0]|0;
   $120 = $119 << 24 >> 24;
   HEAP32[$22>>2] = $120;
  } else {
   $121 = (__ZL4GetCv()|0);
   HEAP32[$22>>2] = $121;
   $122 = (__Z3Eofv()|0);
   $123 = ($122|0)!=(0);
   if ($123) {
    HEAP32[$22>>2] = 32;
   }
  }
  HEAP32[11210] = 0;
  $124 = HEAP32[19161]|0;
  $125 = ($124|0)!=(0);
  $126 = $31;
  $127 = ($126|0)==(0);
  $or$cond7 = $125 & $127;
  L32: do {
   if ($or$cond7) {
    $128 = HEAP32[11211]|0;
    $129 = ($128|0)!=(38);
    $130 = HEAP32[$21>>2]|0;
    $131 = ($130|0)==(38);
    $or$cond9 = $129 & $131;
    do {
     if ($or$cond9) {
      $132 = HEAP32[$22>>2]|0;
      $133 = ($132|0)==(35);
      if (!($133)) {
       $134 = HEAP32[$22>>2]|0;
       $135 = ($134|0)>=(97);
       $136 = HEAP32[$22>>2]|0;
       $137 = ($136|0)<=(122);
       $or$cond11 = $135 & $137;
       if (!($or$cond11)) {
        break;
       }
      }
      $32 = 0;
      $138 = HEAP32[$22>>2]|0;
      HEAP32[$21>>2] = $138;
      while(1) {
       $139 = (__Z3Eofv()|0);
       $140 = ($139|0)!=(0);
       if ($140) {
        break;
       }
       $141 = HEAP32[$21>>2]|0;
       $142 = (_iswalnum($141)|0);
       $143 = ($142|0)!=(0);
       $144 = HEAP32[$21>>2]|0;
       $145 = ($144|0)==(35);
       $or$cond13 = $143 | $145;
       $146 = $32;
       $147 = ($146|0)<(20);
       $or$cond61 = $or$cond13 & $147;
       if (!($or$cond61)) {
        break;
       }
       $148 = HEAP32[$21>>2]|0;
       $149 = $148&255;
       $150 = $32;
       $151 = (($150) + 1)|0;
       $32 = $151;
       $152 = (($45) + ($150)|0);
       HEAP8[$152>>0] = $149;
       $153 = (__ZL4GetCv()|0);
       HEAP32[$21>>2] = $153;
      }
      $154 = $32;
      $155 = (($45) + ($154)|0);
      HEAP8[$155>>0] = 0;
      $156 = (__ZL4GetCv()|0);
      HEAP32[$22>>2] = $156;
      $157 = HEAP32[$21>>2]|0;
      $158 = HEAP32[$22>>2]|0;
      HEAP32[$vararg_buffer>>2] = $45;
      $vararg_ptr68 = ((($vararg_buffer)) + 4|0);
      HEAP32[$vararg_ptr68>>2] = $157;
      $vararg_ptr69 = ((($vararg_buffer)) + 8|0);
      HEAP32[$vararg_ptr69>>2] = $158;
      (_sprintf(119969,20823,$vararg_buffer)|0);
      $159 = HEAP32[$21>>2]|0;
      $160 = ($159|0)==(59);
      do {
       if ($160) {
        $161 = HEAP8[$45>>0]|0;
        $162 = $161 << 24 >> 24;
        $163 = ($162|0)==(35);
        if ($163) {
         $164 = ((($45)) + 1|0);
         $165 = HEAP8[$164>>0]|0;
         $166 = $165 << 24 >> 24;
         $167 = ($166|0)==(120);
         if ($167) {
          $168 = ((($45)) + 2|0);
          HEAP32[$vararg_buffer70>>2] = $21;
          $169 = (_sscanf($168,22266,$vararg_buffer70)|0);
          $35 = $169;
          break;
         } else {
          $170 = ((($45)) + 1|0);
          HEAP32[$vararg_buffer73>>2] = $21;
          $171 = (_sscanf($170,25637,$vararg_buffer73)|0);
          $35 = $171;
          break;
         }
        } else {
         $172 = (__Z10LookupMnemP8MNEM_TABPKc(1468,$45)|0);
         $35 = $172;
         $173 = ($172|0)!=(-1);
         if (!($173)) {
          break;
         }
         $174 = $35;
         HEAP32[$21>>2] = $174;
         $175 = HEAP32[$22>>2]|0;
         $176 = ($175|0)==(0);
         if (!($176)) {
          break;
         }
         HEAP32[$22>>2] = 32;
         break;
        }
       } else {
        $35 = -1;
       }
      } while(0);
      $177 = $35;
      $178 = ($177|0)<=(0);
      if ($178) {
       HEAP32[366] = 0;
       HEAP32[$21>>2] = 38;
       HEAP32[$22>>2] = 32;
      }
      $179 = HEAP32[$21>>2]|0;
      $180 = ($179|0)<=(32);
      if (!($180)) {
       break L32;
      }
      $181 = HEAP32[11212]|0;
      $182 = ($181|0)==(20);
      $183 = HEAP32[11212]|0;
      $184 = ($183|0)==(36);
      $or$cond17 = $182 | $184;
      if (!($or$cond17)) {
       break L32;
      }
      $185 = HEAP32[$21>>2]|0;
      $186 = (($185) + 57344)|0;
      HEAP32[$21>>2] = $186;
      break L32;
     }
    } while(0);
    $187 = HEAP32[$21>>2]|0;
    $188 = ($187|0)==(60);
    $189 = HEAP32[11211]|0;
    $190 = ($189|0)!=(60);
    $or$cond19 = $188 & $190;
    if ($or$cond19) {
     $191 = HEAP32[$22>>2]|0;
     $192 = ($191|0)==(33);
     if ($192) {
      while(1) {
       $193 = (__Z3Eofv()|0);
       $194 = ($193|0)!=(0);
       $195 = HEAP32[$21>>2]|0;
       $196 = ($195|0)!=(62);
       $197 = $194 ? 0 : $196;
       if (!($197)) {
        break;
       }
       $198 = (__ZL4GetCv()|0);
       HEAP32[$21>>2] = $198;
      }
      HEAP32[$22>>2] = 32;
      break;
     }
     $199 = HEAP32[$22>>2]|0;
     $200 = ($199|0)==(47);
     if (!($200)) {
      $201 = HEAP32[$22>>2]|0;
      $202 = (__Z9iswalpha2i($201)|0);
      $203 = ($202|0)!=(0);
      if (!($203)) {
       break;
      }
     }
     $204 = HEAP32[$27>>2]|0;
     $205 = $18;
     $206 = (($205) - 20)|0;
     $207 = ($204|0)>($206|0);
     if ($207) {
      label = 55;
      break L10;
     }
     $32 = 0;
     $217 = HEAP32[$22>>2]|0;
     HEAP32[$21>>2] = $217;
     while(1) {
      $218 = (__Z3Eofv()|0);
      $219 = ($218|0)==(0);
      $220 = HEAP32[$21>>2]|0;
      $221 = ($220|0)!=(62);
      $or$cond21 = $219 & $221;
      $222 = $32;
      $223 = ($222|0)<(256);
      $or$cond63 = $or$cond21 & $223;
      if (!($or$cond63)) {
       break;
      }
      $224 = HEAP32[$21>>2]|0;
      $225 = $32;
      $226 = (($225) + 1)|0;
      $32 = $226;
      $227 = (($44) + ($225<<2)|0);
      HEAP32[$227>>2] = $224;
      $228 = (__ZL4GetCv()|0);
      HEAP32[$21>>2] = $228;
     }
     $229 = $32;
     $230 = (($44) + ($229<<2)|0);
     HEAP32[$230>>2] = 0;
     HEAP32[$22>>2] = 32;
     $37 = 0;
     $231 = $32;
     $232 = (($231) - 1)|0;
     $233 = (($44) + ($232<<2)|0);
     $234 = HEAP32[$233>>2]|0;
     $235 = ($234|0)==(47);
     if ($235) {
      $236 = $32;
      $237 = (($236) - 1)|0;
      $238 = (($44) + ($237<<2)|0);
      HEAP32[$238>>2] = 32;
      $37 = 1;
     }
     $239 = $15;
     $240 = $18;
     $241 = $37;
     $242 = (__ZL14ProcessSsmlTagPwPcPiii($44,$239,$27,$240,$241)|0);
     $33 = $242;
     $243 = $33;
     $244 = ($243|0)!=(0);
     if ($244) {
      label = 62;
      break L10;
     }
     HEAP32[$21>>2] = 32;
     $260 = (__ZL4GetCv()|0);
     HEAP32[$22>>2] = $260;
     continue L10;
    }
   }
  } while(0);
  HEAP32[11211] = 0;
  $261 = HEAP32[11213]|0;
  $262 = ($261|0)!=(0);
  if ($262) {
   continue;
  }
  $263 = HEAP32[$22>>2]|0;
  $264 = ($263|0)==(10);
  $265 = HEAP32[19239]|0;
  $266 = ($265|0)==(-1);
  $or$cond24 = $264 & $266;
  $267 = HEAP32[$21>>2]|0;
  if ($or$cond24) {
   label = 70;
   break;
  }
  $297 = ($267|0)==(1);
  if ($297) {
   label = 76;
  } else {
   $298 = HEAP32[$21>>2]|0;
   $299 = HEAP8[23007]|0;
   $300 = $299 << 24 >> 24;
   $301 = ($298|0)==($300|0);
   if ($301) {
    label = 76;
   }
  }
  if ((label|0) == 76) {
   label = 0;
   $302 = HEAP32[$22>>2]|0;
   $303 = ($302|0)==(86);
   if ($303) {
    label = 77;
    break;
   }
   $327 = HEAP32[$22>>2]|0;
   $328 = ($327|0)==(66);
   if ($328) {
    $329 = HEAP32[$27>>2]|0;
    $330 = $15;
    $331 = (($330) + ($329)|0);
    (_strcpy($331,20830)|0);
    $332 = HEAP32[$27>>2]|0;
    $333 = (($332) + 3)|0;
    HEAP32[$27>>2] = $333;
    $334 = (__ZL4GetCv()|0);
    HEAP32[$22>>2] = $334;
    $335 = ($334|0)==(48);
    if ($335) {
     HEAP32[19159] = 0;
    } else {
     HEAP32[19159] = 1;
     HEAP32[19178] = 0;
     $336 = HEAP32[$22>>2]|0;
     $337 = ($336|0)!=(49);
     if ($337) {
      $28 = 0;
      while(1) {
       $338 = HEAP32[$22>>2]|0;
       $339 = (_iswspace($338)|0);
       $340 = ($339|0)!=(0);
       if ($340) {
        break;
       }
       $341 = (__Z3Eofv()|0);
       $342 = ($341|0)!=(0);
       $343 = $342 ^ 1;
       if (!($343)) {
        break;
       }
       $344 = HEAP32[$22>>2]|0;
       $345 = $28;
       $346 = (($345) + 1)|0;
       $28 = $346;
       $347 = (76712 + ($345<<2)|0);
       HEAP32[$347>>2] = $344;
       $348 = (__ZL4GetCv()|0);
       HEAP32[$22>>2] = $348;
       $349 = HEAP32[$27>>2]|0;
       $350 = (($349) + 1)|0;
       HEAP32[$27>>2] = $350;
       $351 = $15;
       $352 = (($351) + ($349)|0);
       HEAP8[$352>>0] = 32;
      }
      $353 = $28;
      $354 = (76712 + ($353<<2)|0);
      HEAP32[$354>>2] = 0;
      HEAP32[19159] = 2;
     }
    }
    $355 = (__ZL4GetCv()|0);
    HEAP32[$22>>2] = $355;
    continue;
   }
  }
  $356 = $30;
  $357 = (($356) + 1)|0;
  $30 = $357;
  $358 = $13;
  $359 = ((($358)) + 460|0);
  $360 = HEAP32[$359>>2]|0;
  $361 = HEAP32[$21>>2]|0;
  $362 = (__Z12lookupwchar2PKti($360,$361)|0);
  $28 = $362;
  $363 = ($362|0)!=(0);
  if ($363) {
   $364 = $28;
   $365 = ($364|0)==(1);
   if ($365) {
    continue;
   }
   $366 = $28;
   HEAP32[$21>>2] = $366;
  }
  $367 = HEAP32[$21>>2]|0;
  $368 = (_iswalnum($367)|0);
  $369 = ($368|0)!=(0);
  if ($369) {
   $36 = 1;
  } else {
   $370 = $41;
   $371 = ($370|0)!=(0);
   if ($371) {
    $41 = 0;
    HEAP32[$21>>2] = 1328;
    $372 = HEAP32[$22>>2]|0;
    __ZL6UngetCi($372);
    HEAP32[$22>>2] = 32;
   }
   $373 = HEAP32[$21>>2]|0;
   $374 = ($373|0)==(3851);
   if ($374) {
    HEAP32[$21>>2] = 32;
   }
   $375 = HEAP32[$21>>2]|0;
   $376 = (_iswspace($375)|0);
   $377 = ($376|0)!=(0);
   do {
    if ($377) {
     $378 = $13;
     $379 = ((($378)) + 324|0);
     $380 = HEAP32[$379>>2]|0;
     $381 = ($380|0)==(6972015);
     if (!($381)) {
      break;
     }
     $382 = HEAP32[$27>>2]|0;
     $383 = (($382) - 1)|0;
     $384 = $15;
     $385 = (($384) + ($383)|0);
     $46 = $385;
     $386 = $46;
     $387 = HEAP8[$386>>0]|0;
     $388 = $387 << 24 >> 24;
     $389 = ($388|0)==(105);
     if (!($389)) {
      break;
     }
     $390 = $46;
     $391 = ((($390)) + -1|0);
     $392 = HEAP8[$391>>0]|0;
     $393 = $392 << 24 >> 24;
     $394 = ($393|0)==(46);
     if ($394) {
      $395 = $46;
      $396 = ((($395)) + -1|0);
      $46 = $396;
     }
     $397 = $46;
     $398 = ((($397)) + -1|0);
     $399 = HEAP8[$398>>0]|0;
     $400 = $399 << 24 >> 24;
     $401 = ($400|0)==(32);
     if ($401) {
      label = 108;
      break L10;
     }
    }
   } while(0);
   $404 = HEAP32[$21>>2]|0;
   $405 = ($404|0)==(3405);
   $406 = HEAP32[$22>>2]|0;
   $407 = ($406|0)==(8205);
   $or$cond65 = $405 & $407;
   if ($or$cond65) {
    HEAP32[$21>>2] = 3406;
   }
  }
  $408 = HEAP32[$21>>2]|0;
  $409 = (__Z9iswupper2i($408)|0);
  $410 = ($409|0)!=(0);
  do {
   if ($410) {
    $411 = $13;
    $412 = ((($411)) + 8336|0);
    $413 = HEAP32[$412>>2]|0;
    $414 = (($413) + 1)|0;
    HEAP32[$412>>2] = $414;
    $415 = HEAP32[19158]|0;
    $416 = ($415|0)==(2);
    $417 = HEAP32[11212]|0;
    $418 = ($417|0)==(0);
    $or$cond29 = $416 & $418;
    if ($or$cond29) {
     $419 = $23;
     $420 = (__Z9iswupper2i($419)|0);
     $421 = ($420|0)!=(0);
     if (!($421)) {
      $422 = $13;
      $423 = (__ZL13LookupSpecialP10TranslatorPKcPc($422,22247,$48)|0);
      $424 = ($423|0)!=(0|0);
      if ($424) {
       HEAP32[$vararg_buffer76>>2] = $48;
       (_sprintf($47,25552,$vararg_buffer76)|0);
       $425 = (_strlen($47)|0);
       $28 = $425;
       $426 = HEAP32[$27>>2]|0;
       $427 = $28;
       $428 = (($426) + ($427))|0;
       $429 = $18;
       $430 = ($428|0)<($429|0);
       if (!($430)) {
        break;
       }
       $431 = HEAP32[$27>>2]|0;
       $432 = $15;
       $433 = (($432) + ($431)|0);
       (_strcpy($433,$47)|0);
       $434 = $28;
       $435 = HEAP32[$27>>2]|0;
       $436 = (($435) + ($434))|0;
       HEAP32[$27>>2] = $436;
      }
     }
    }
   } else {
    $437 = HEAP32[$21>>2]|0;
    $438 = (__Z9iswalpha2i($437)|0);
    $439 = ($438|0)!=(0);
    if ($439) {
     $440 = $13;
     $441 = ((($440)) + 8340|0);
     $442 = HEAP32[$441>>2]|0;
     $443 = (($442) + 1)|0;
     HEAP32[$441>>2] = $443;
    }
   }
  } while(0);
  $444 = HEAP32[19162]|0;
  $445 = ($444|0)!=(0);
  do {
   if ($445) {
    $446 = $31;
    $447 = ($446|0)>(0);
    if ($447) {
     $448 = $31;
     $449 = (($448) + -1)|0;
     $31 = $449;
     break;
    }
    $450 = HEAP32[$21>>2]|0;
    $451 = ($450|0)==(91);
    $452 = HEAP32[$22>>2]|0;
    $453 = ($452|0)==(91);
    $or$cond31 = $451 & $453;
    if ($or$cond31) {
     $31 = -1;
     break;
    }
    $454 = HEAP32[$21>>2]|0;
    $455 = ($454|0)==(93);
    $456 = HEAP32[$22>>2]|0;
    $457 = ($456|0)==(93);
    $or$cond33 = $455 & $457;
    if (!($or$cond33)) {
     break;
    }
    $31 = 2;
   }
  } while(0);
  $458 = HEAP32[$21>>2]|0;
  $459 = ($458|0)==(10);
  if ($459) {
   $26 = 0;
   while(1) {
    $460 = (__Z3Eofv()|0);
    $461 = ($460|0)!=(0);
    if ($461) {
     break;
    }
    $462 = HEAP32[$22>>2]|0;
    $463 = (_iswspace($462)|0);
    $464 = ($463|0)!=(0);
    if (!($464)) {
     break;
    }
    $465 = HEAP32[$22>>2]|0;
    $466 = ($465|0)==(10);
    if ($466) {
     $467 = $26;
     $468 = (($467) + 1)|0;
     $26 = $468;
    }
    $469 = (__ZL4GetCv()|0);
    HEAP32[$22>>2] = $469;
   }
   $470 = $26;
   $471 = ($470|0)>(0);
   if ($471) {
    label = 134;
    break;
   }
   $492 = $30;
   $493 = HEAP32[19239]|0;
   $494 = ($492|0)<=($493|0);
   if ($494) {
    label = 142;
    break;
   }
   $30 = 0;
  }
  $40 = 0;
  $503 = $31;
  $504 = ($503|0)==(0);
  $505 = HEAP32[11212]|0;
  $506 = ($505|0)==(0);
  $or$cond36 = $504 & $506;
  do {
   if ($or$cond36) {
    $39 = 0;
    $507 = $42;
    $508 = ($507|0)!=(0);
    do {
     if ($508) {
      $509 = HEAP32[$21>>2]|0;
      $510 = (_iswspace($509)|0);
      $511 = ($510|0)!=(0);
      if ($511) {
       break;
      }
      $512 = HEAP32[$21>>2]|0;
      $513 = (__Z7IsAlphaj($512)|0);
      $514 = ($513|0)!=(0);
      if (!($514)) {
       label = 149;
       break L10;
      }
      $515 = HEAP32[$21>>2]|0;
      $516 = (__Z9iswlower2i($515)|0);
      $517 = ($516|0)!=(0);
      if (!($517)) {
       label = 149;
       break L10;
      }
      $42 = 0;
     }
    } while(0);
    $528 = HEAP32[$21>>2]|0;
    $529 = ($528|0)==(46);
    $530 = HEAP32[$22>>2]|0;
    $531 = ($530|0)==(46);
    $or$cond38 = $529 & $531;
    do {
     if ($or$cond38) {
      while(1) {
       $532 = (__ZL4GetCv()|0);
       $25 = $532;
       $533 = ($532|0)==(46);
       if (!($533)) {
        break;
       }
       HEAP32[$21>>2] = 8230;
       HEAP32[$22>>2] = 32;
      }
      $534 = HEAP32[$21>>2]|0;
      $535 = ($534|0)==(8230);
      $536 = $25;
      if ($535) {
       HEAP32[$22>>2] = $536;
       break;
      } else {
       __ZL6UngetCi($536);
       break;
      }
     }
    } while(0);
    $38 = 0;
    $537 = HEAP32[$21>>2]|0;
    $538 = (__Z11lookupwcharPKti(6602,$537)|0);
    $34 = $538;
    $539 = ($538|0)!=(0);
    L173: do {
     if ($539) {
      $540 = $34;
      $541 = (1524 + ($540<<2)|0);
      $542 = HEAP32[$541>>2]|0;
      $38 = $542;
      $543 = $38;
      $544 = $543 & 1048576;
      $545 = ($544|0)!=(0);
      if ($545) {
       $41 = 1;
       $546 = $38;
       $547 = $546 >> 12;
       $548 = $547 & 15;
       $549 = $19;
       HEAP32[$549>>2] = $548;
       continue L10;
      }
      $550 = HEAP32[$22>>2]|0;
      $551 = (_iswspace($550)|0);
      $552 = ($551|0)!=(0);
      do {
       if (!($552)) {
        $553 = $38;
        $554 = $553 & 32768;
        $555 = ($554|0)!=(0);
        if ($555) {
         break;
        }
        $556 = HEAP32[$22>>2]|0;
        $557 = (__Z9IsBracketi($556)|0);
        $558 = ($557|0)!=(0);
        $559 = HEAP32[$22>>2]|0;
        $560 = ($559|0)==(63);
        $or$cond40 = $558 | $560;
        if ($or$cond40) {
         break;
        }
        $561 = (__Z3Eofv()|0);
        $562 = ($561|0)!=(0);
        if ($562) {
         break;
        }
        $563 = HEAP32[$22>>2]|0;
        $564 = HEAP8[23007]|0;
        $565 = $564 << 24 >> 24;
        $566 = ($563|0)==($565|0);
        if (!($566)) {
         break L173;
        }
       }
      } while(0);
      $39 = 1;
     }
    } while(0);
    $567 = HEAP32[$21>>2]|0;
    $568 = ($567|0)==(57404);
    if ($568) {
     HEAP32[$21>>2] = 60;
    }
    $569 = HEAP32[19159]|0;
    $570 = ($569|0)!=(0);
    do {
     if ($570) {
      $571 = HEAP32[$21>>2]|0;
      $572 = (_iswpunct($571)|0);
      $573 = ($572|0)!=(0);
      $574 = HEAP32[11214]|0;
      $575 = ($574|0)==(0);
      $or$cond42 = $573 & $575;
      if (!($or$cond42)) {
       break;
      }
      $576 = HEAP32[19159]|0;
      $577 = ($576|0)==(1);
      if (!($577)) {
       $578 = HEAP32[$21>>2]|0;
       $10 = 76712;
       $11 = $578;
       $579 = $10;
       $580 = $11;
       $8 = $579;
       $9 = $580;
       $581 = $8;
       $582 = $9;
       $583 = (_wcschr($581,$582)|0);
       $584 = ($583|0)!=(0|0);
       if (!($584)) {
        break;
       }
      }
      $585 = $13;
      $586 = ((($585)) + 400|0);
      HEAP32[$586>>2] = 0;
      $587 = $13;
      $588 = HEAP32[$21>>2]|0;
      $589 = $15;
      $590 = $39;
      $591 = (__ZL19AnnouncePunctuationP10TranslatoriPiPcS1_i($587,$588,$22,$589,$27,$590)|0);
      $33 = $591;
      $592 = ($591|0)>=(0);
      if ($592) {
       label = 173;
       break L10;
      }
      $594 = HEAP32[$21>>2]|0;
      $40 = $594;
     }
    } while(0);
    $595 = $38;
    $596 = $595 & 2097152;
    $597 = ($596|0)!=(0);
    $598 = $40;
    $599 = ($598|0)==(0);
    $or$cond44 = $597 & $599;
    do {
     if ($or$cond44) {
      $600 = HEAP32[$27>>2]|0;
      $601 = $15;
      $602 = (($601) + ($600)|0);
      $49 = $602;
      $603 = $49;
      $604 = $13;
      $605 = HEAP32[$21>>2]|0;
      $606 = (__ZL14LookupCharNameP10Translatorii($604,$605,1)|0);
      HEAP32[$vararg_buffer79>>2] = $606;
      (_sprintf($603,25552,$vararg_buffer79)|0);
      $607 = $49;
      $608 = HEAP8[$607>>0]|0;
      $609 = $608 << 24 >> 24;
      $610 = ($609|0)!=(0);
      if (!($610)) {
       break;
      }
      $611 = $49;
      $612 = (_strlen($611)|0);
      $613 = HEAP32[$27>>2]|0;
      $614 = (($613) + ($612))|0;
      HEAP32[$27>>2] = $614;
      $615 = HEAP32[$21>>2]|0;
      $40 = $615;
      $616 = $38;
      $617 = $616 & -28673;
      $38 = $617;
     }
    } while(0);
    $618 = $39;
    $619 = ($618|0)!=(0);
    if (!($619)) {
     break;
    }
    $29 = 0;
    $620 = HEAP32[$22>>2]|0;
    $25 = $620;
    $621 = $25;
    $622 = (_iswspace($621)|0);
    $623 = ($622|0)!=(0);
    L201: do {
     if ($623) {
      while(1) {
       $624 = (__Z3Eofv()|0);
       $625 = ($624|0)!=(0);
       if ($625) {
        break L201;
       }
       $626 = $25;
       $627 = (_iswspace($626)|0);
       $628 = ($627|0)!=(0);
       if (!($628)) {
        break L201;
       }
       $629 = $25;
       $630 = ($629|0)==(10);
       if ($630) {
        $631 = $29;
        $632 = (($631) + 1)|0;
        $29 = $632;
       }
       $633 = (__ZL4GetCv()|0);
       $25 = $633;
      }
     }
    } while(0);
    $634 = HEAP32[$21>>2]|0;
    $635 = ($634|0)==(46);
    $636 = $29;
    $637 = ($636|0)<(2);
    $or$cond47 = $635 & $637;
    if ($or$cond47) {
     $638 = $38;
     $639 = $638 | 4194304;
     $38 = $639;
    }
    $640 = $29;
    $641 = ($640|0)==(0);
    do {
     if ($641) {
      $642 = HEAP32[$21>>2]|0;
      $643 = ($642|0)==(44);
      $644 = $23;
      $645 = ($644|0)==(46);
      $or$cond49 = $643 & $645;
      do {
       if ($or$cond49) {
        $646 = $13;
        $647 = ((($646)) + 324|0);
        $648 = HEAP32[$647>>2]|0;
        $649 = ($648|0)==(26741);
        if (!($649)) {
         break;
        }
        $650 = $24;
        $651 = (_iswdigit($650)|0);
        $652 = ($651|0)!=(0);
        if (!($652)) {
         break;
        }
        $653 = $25;
        $654 = (_iswdigit($653)|0);
        $655 = ($654|0)!=(0);
        if (!($655)) {
         $656 = $25;
         $657 = (__Z9iswlower2i($656)|0);
         $658 = ($657|0)!=(0);
         if (!($658)) {
          break;
         }
        }
        HEAP32[$21>>2] = 1367;
        $39 = 0;
       }
      } while(0);
      $659 = HEAP32[$21>>2]|0;
      $660 = ($659|0)==(46);
      do {
       if ($660) {
        $661 = $13;
        $662 = ((($661)) + 200|0);
        $663 = HEAP32[$662>>2]|0;
        $664 = $663 & 65536;
        $665 = ($664|0)!=(0);
        L225: do {
         if ($665) {
          $666 = $23;
          $667 = (_iswdigit($666)|0);
          $668 = ($667|0)!=(0);
          do {
           if (!($668)) {
            $669 = $23;
            $670 = (__ZL8IsRomanUj($669)|0);
            $671 = ($670|0)!=(0);
            if (!($671)) {
             label = 204;
             break L225;
            }
            $672 = $24;
            $673 = (__ZL8IsRomanUj($672)|0);
            $674 = ($673|0)!=(0);
            if ($674) {
             break;
            }
            $675 = $24;
            $676 = (_iswspace($675)|0);
            $677 = ($676|0)!=(0);
            if (!($677)) {
             label = 204;
             break L225;
            }
           }
          } while(0);
          $678 = $23;
          $679 = (_iswdigit($678)|0);
          $680 = ($679|0)!=(0);
          if (!($680)) {
           $39 = 0;
           break;
          }
          $681 = $25;
          $682 = (__Z9iswlower2i($681)|0);
          $683 = ($682|0)!=(0);
          $684 = $25;
          $685 = ($684|0)==(45);
          $or$cond51 = $683 | $685;
          if (!($or$cond51)) {
           break;
          }
          $39 = 0;
         } else {
          label = 204;
         }
        } while(0);
        do {
         if ((label|0) == 204) {
          label = 0;
          $686 = $25;
          $687 = ($686|0)==(39);
          if (!($687)) {
           break;
          }
          $39 = 0;
         }
        } while(0);
        $688 = $25;
        $689 = (__Z9iswlower2i($688)|0);
        $690 = ($689|0)!=(0);
        if ($690) {
         $39 = 0;
        }
        $691 = $36;
        $692 = ($691|0)==(0);
        if (!($692)) {
         break;
        }
        HEAP32[$21>>2] = 32;
        $39 = 0;
       } else {
        $693 = $36;
        $694 = ($693|0)==(0);
        if (!($694)) {
         break;
        }
        $39 = 0;
       }
      } while(0);
      $695 = $39;
      $696 = ($695|0)!=(0);
      $697 = HEAP32[$21>>2]|0;
      $698 = ($697|0)==(46);
      $or$cond53 = $696 & $698;
      $699 = $25;
      $700 = ($699|0)==(60);
      $or$cond55 = $or$cond53 & $700;
      $701 = HEAP32[19161]|0;
      $702 = ($701|0)!=(0);
      $or$cond57 = $or$cond55 & $702;
      if (!($or$cond57)) {
       break;
      }
      $39 = 0;
      $703 = HEAP32[$27>>2]|0;
      $43 = $703;
      $704 = $38;
      $42 = $704;
     }
    } while(0);
    $705 = $39;
    $706 = ($705|0)!=(0);
    if ($706) {
     label = 215;
     break L10;
    }
    $731 = (__Z3Eofv()|0);
    $732 = ($731|0)!=(0);
    if ($732) {
     break;
    }
    $733 = HEAP32[$22>>2]|0;
    $734 = (_iswspace($733)|0);
    $735 = ($734|0)!=(0);
    if (!($735)) {
     break;
    }
    $736 = $25;
    __ZL6UngetCi($736);
   }
  } while(0);
  $737 = HEAP32[11215]|0;
  $738 = ($737|0)==(1);
  if ($738) {
   continue;
  }
  $739 = HEAP32[$21>>2]|0;
  $740 = $40;
  $741 = ($739|0)==($740|0);
  do {
   if ($741) {
    $742 = HEAP32[$21>>2]|0;
    $743 = (__Z9IsBracketi($742)|0);
    $744 = ($743|0)!=(0);
    if ($744) {
     HEAP32[$21>>2] = 57384;
     break;
    }
    $745 = HEAP32[$21>>2]|0;
    $746 = ($745|0)!=(45);
    if (!($746)) {
     break;
    }
    HEAP32[$21>>2] = 32;
   }
  } while(0);
  $747 = HEAP32[$27>>2]|0;
  $748 = (($747) + 1)|0;
  $28 = $748;
  $749 = HEAP32[$21>>2]|0;
  $750 = ($749|0)==(57404);
  if ($750) {
   HEAP32[$21>>2] = 60;
  }
  $751 = HEAP32[$21>>2]|0;
  $752 = HEAP32[$27>>2]|0;
  $753 = $15;
  $754 = (($753) + ($752)|0);
  $755 = (__Z8utf8_outjPc($751,$754)|0);
  $756 = HEAP32[$27>>2]|0;
  $757 = (($756) + ($755))|0;
  HEAP32[$27>>2] = $757;
  $758 = HEAP32[$21>>2]|0;
  $759 = (_iswspace($758)|0);
  $760 = ($759|0)!=(0);
  L264: do {
   if (!($760)) {
    $761 = HEAP32[$21>>2]|0;
    $762 = (__Z9IsBracketi($761)|0);
    $763 = ($762|0)!=(0);
    if ($763) {
     break;
    }
    $764 = HEAP32[10481]|0;
    $765 = HEAP32[19172]|0;
    $766 = (($764) - ($765))|0;
    $767 = $766&65535;
    $768 = HEAP32[$27>>2]|0;
    $769 = $16;
    $770 = (($769) + ($768<<1)|0);
    HEAP16[$770>>1] = $767;
    while(1) {
     $771 = $28;
     $772 = HEAP32[$27>>2]|0;
     $773 = ($771|0)<($772|0);
     if (!($773)) {
      break L264;
     }
     $774 = $28;
     $775 = (($774) + 1)|0;
     $28 = $775;
     $776 = $16;
     $777 = (($776) + ($774<<1)|0);
     HEAP16[$777>>1] = -1;
    }
   }
  } while(0);
  $778 = HEAP32[$27>>2]|0;
  $779 = $17;
  HEAP32[$779>>2] = $778;
  $780 = HEAP32[$27>>2]|0;
  $781 = $18;
  $782 = (($781) - 75)|0;
  $783 = ($780|0)>($782|0);
  do {
   if ($783) {
    $784 = HEAP32[$21>>2]|0;
    $785 = (__Z7IsAlphaj($784)|0);
    $786 = ($785|0)!=(0);
    if ($786) {
     break;
    }
    $787 = HEAP32[$21>>2]|0;
    $788 = (_iswdigit($787)|0);
    $789 = ($788|0)!=(0);
    if (!($789)) {
     label = 243;
     break L10;
    }
   }
  } while(0);
  $790 = HEAP32[$27>>2]|0;
  $791 = $18;
  $792 = (($791) - 4)|0;
  $793 = ($790|0)>=($792|0);
  if ($793) {
   label = 243;
   break;
  }
 }
 switch (label|0) {
  case 12: {
   HEAP32[10819] = 1;
   $12 = 589864;
   $822 = $12;
   STACKTOP = sp;return ($822|0);
   break;
  }
  case 15: {
   HEAP32[11208] = 1;
   HEAP32[19167] = 0;
   $94 = HEAP32[$22>>2]|0;
   __ZL6UngetCi($94);
   $12 = 16384;
   $822 = $12;
   STACKTOP = sp;return ($822|0);
   break;
  }
  case 55: {
   $208 = HEAP32[$22>>2]|0;
   __ZL6UngetCi($208);
   $209 = HEAP32[$21>>2]|0;
   HEAP32[11210] = $209;
   $210 = HEAP32[$27>>2]|0;
   $211 = $15;
   $212 = (($211) + ($210)|0);
   HEAP8[$212>>0] = 32;
   $213 = HEAP32[$27>>2]|0;
   $214 = (($213) + 1)|0;
   $215 = $15;
   $216 = (($215) + ($214)|0);
   HEAP8[$216>>0] = 0;
   $12 = 16384;
   $822 = $12;
   STACKTOP = sp;return ($822|0);
   break;
  }
  case 62: {
   $245 = $42;
   $246 = ($245|0)!=(0);
   if ($246) {
    $247 = $43;
    HEAP32[$27>>2] = $247;
   }
   $248 = HEAP32[$27>>2]|0;
   $249 = $15;
   $250 = (($249) + ($248)|0);
   HEAP8[$250>>0] = 32;
   $251 = HEAP32[$27>>2]|0;
   $252 = (($251) + 1)|0;
   HEAP32[$27>>2] = $252;
   $253 = $15;
   $254 = (($253) + ($251)|0);
   HEAP8[$254>>0] = 0;
   $255 = $33;
   $256 = $255 & 131072;
   $257 = ($256|0)!=(0);
   if ($257) {
    $258 = $20;
    (_strcpy($258,119993)|0);
   }
   $259 = $33;
   $12 = $259;
   $822 = $12;
   STACKTOP = sp;return ($822|0);
   break;
  }
  case 70: {
   $268 = (__Z11lookupwcharPKti(6602,$267)|0);
   $34 = $268;
   $269 = ($268|0)==(0);
   if ($269) {
    $270 = HEAP32[10481]|0;
    $271 = HEAP32[19172]|0;
    $272 = (($270) - ($271))|0;
    $273 = $272&65535;
    $274 = HEAP32[$27>>2]|0;
    $275 = $16;
    $276 = (($275) + ($274<<1)|0);
    HEAP16[$276>>1] = $273;
    $277 = HEAP32[$27>>2]|0;
    $278 = $17;
    HEAP32[$278>>2] = $277;
    $279 = HEAP32[$21>>2]|0;
    $280 = HEAP32[$27>>2]|0;
    $281 = $15;
    $282 = (($281) + ($280)|0);
    $283 = (__Z8utf8_outjPc($279,$282)|0);
    $284 = HEAP32[$27>>2]|0;
    $285 = (($284) + ($283))|0;
    HEAP32[$27>>2] = $285;
    $33 = 524328;
   } else {
    $286 = $34;
    $287 = (1524 + ($286<<2)|0);
    $288 = HEAP32[$287>>2]|0;
    $33 = $288;
   }
   $289 = HEAP32[$27>>2]|0;
   $290 = $15;
   $291 = (($290) + ($289)|0);
   HEAP8[$291>>0] = 32;
   $292 = HEAP32[$27>>2]|0;
   $293 = (($292) + 1)|0;
   $294 = $15;
   $295 = (($294) + ($293)|0);
   HEAP8[$295>>0] = 0;
   $296 = $33;
   $12 = $296;
   $822 = $12;
   STACKTOP = sp;return ($822|0);
   break;
  }
  case 77: {
   $304 = HEAP32[$27>>2]|0;
   $305 = (($304) + 1)|0;
   HEAP32[$27>>2] = $305;
   $306 = $15;
   $307 = (($306) + ($304)|0);
   HEAP8[$307>>0] = 0;
   while(1) {
    $308 = (__ZL4GetCv()|0);
    HEAP32[$21>>2] = $308;
    $309 = (_iswspace($308)|0);
    $310 = ($309|0)!=(0);
    if ($310) {
     break;
    }
    $311 = (__Z3Eofv()|0);
    $312 = ($311|0)!=(0);
    if ($312) {
     break;
    }
    $313 = HEAP32[$27>>2]|0;
    $314 = $18;
    $315 = (($314) - 1)|0;
    $316 = ($313|0)<($315|0);
    if (!($316)) {
     break;
    }
    $317 = HEAP32[$21>>2]|0;
    $318 = $317&255;
    $319 = HEAP32[$27>>2]|0;
    $320 = (($319) + 1)|0;
    HEAP32[$27>>2] = $320;
    $321 = $15;
    $322 = (($321) + ($319)|0);
    HEAP8[$322>>0] = $318;
   }
   $323 = HEAP32[$27>>2]|0;
   $324 = (($323) + 1)|0;
   HEAP32[$27>>2] = $324;
   $325 = $15;
   $326 = (($325) + ($323)|0);
   HEAP8[$326>>0] = 0;
   $12 = 147456;
   $822 = $12;
   STACKTOP = sp;return ($822|0);
   break;
  }
  case 108: {
   HEAP32[11209] = 20834;
   $402 = HEAP32[$22>>2]|0;
   __ZL6UngetCi($402);
   $403 = $46;
   HEAP8[$403>>0] = 0;
   $12 = 524328;
   $822 = $12;
   STACKTOP = sp;return ($822|0);
   break;
  }
  case 134: {
   $472 = HEAP32[$22>>2]|0;
   __ZL6UngetCi($472);
   $473 = $42;
   $474 = ($473|0)!=(0);
   if ($474) {
    $475 = $43;
    $476 = $15;
    $477 = (($476) + ($475)|0);
    __ZL10RemoveCharPc($477);
   }
   $478 = HEAP32[$27>>2]|0;
   $479 = $15;
   $480 = (($479) + ($478)|0);
   HEAP8[$480>>0] = 32;
   $481 = HEAP32[$27>>2]|0;
   $482 = (($481) + 1)|0;
   $483 = $15;
   $484 = (($483) + ($482)|0);
   HEAP8[$484>>0] = 0;
   $485 = $26;
   $486 = ($485|0)>(3);
   if ($486) {
    $26 = 3;
   }
   $487 = HEAP32[19161]|0;
   $488 = ($487|0)!=(0);
   if ($488) {
    $26 = 1;
   }
   $489 = $26;
   $490 = ($489*30)|0;
   $491 = (524328 + ($490))|0;
   $12 = $491;
   $822 = $12;
   STACKTOP = sp;return ($822|0);
   break;
  }
  case 142: {
   $495 = HEAP32[$22>>2]|0;
   __ZL6UngetCi($495);
   $496 = HEAP32[$27>>2]|0;
   $497 = $15;
   $498 = (($497) + ($496)|0);
   HEAP8[$498>>0] = 32;
   $499 = HEAP32[$27>>2]|0;
   $500 = (($499) + 1)|0;
   $501 = $15;
   $502 = (($501) + ($500)|0);
   HEAP8[$502>>0] = 0;
   $12 = 262174;
   $822 = $12;
   STACKTOP = sp;return ($822|0);
   break;
  }
  case 149: {
   $518 = HEAP32[$22>>2]|0;
   __ZL6UngetCi($518);
   $519 = HEAP32[$21>>2]|0;
   HEAP32[11210] = $519;
   $520 = $43;
   $521 = $15;
   $522 = (($521) + ($520)|0);
   HEAP8[$522>>0] = 32;
   $523 = $43;
   $524 = (($523) + 1)|0;
   $525 = $15;
   $526 = (($525) + ($524)|0);
   HEAP8[$526>>0] = 0;
   $527 = $42;
   $12 = $527;
   $822 = $12;
   STACKTOP = sp;return ($822|0);
   break;
  }
  case 173: {
   $593 = $33;
   $12 = $593;
   $822 = $12;
   STACKTOP = sp;return ($822|0);
   break;
  }
  case 215: {
   $707 = $25;
   __ZL6UngetCi($707);
   $708 = HEAP32[$27>>2]|0;
   $709 = $15;
   $710 = (($709) + ($708)|0);
   HEAP8[$710>>0] = 32;
   $711 = HEAP32[$27>>2]|0;
   $712 = (($711) + 1)|0;
   $713 = $15;
   $714 = (($713) + ($712)|0);
   HEAP8[$714>>0] = 0;
   $715 = $23;
   $716 = (_iswdigit($715)|0);
   $717 = ($716|0)!=(0);
   if ($717) {
    $718 = $25;
    $719 = (__Z7IsAlphaj($718)|0);
    $720 = ($719|0)!=(0);
    if (!($720)) {
     $721 = $38;
     $722 = $721 & -4194305;
     $38 = $722;
    }
   }
   $723 = $29;
   $724 = ($723|0)>(1);
   $725 = $38;
   if (!($724)) {
    $12 = $725;
    $822 = $12;
    STACKTOP = sp;return ($822|0);
   }
   $726 = ($725|0)==(532520);
   $727 = $38;
   $728 = ($727|0)==(536621);
   $or$cond59 = $726 | $728;
   if ($or$cond59) {
    $729 = $38;
    $730 = (($729) + 35)|0;
    $12 = $730;
    $822 = $12;
    STACKTOP = sp;return ($822|0);
   } else {
    $12 = 524358;
    $822 = $12;
    STACKTOP = sp;return ($822|0);
   }
   break;
  }
  case 243: {
   $794 = HEAP32[$27>>2]|0;
   $795 = $15;
   $796 = (($795) + ($794)|0);
   HEAP8[$796>>0] = 32;
   $797 = HEAP32[$27>>2]|0;
   $798 = (($797) + 1)|0;
   $799 = $15;
   $800 = (($799) + ($798)|0);
   HEAP8[$800>>0] = 0;
   $801 = HEAP32[$22>>2]|0;
   __ZL6UngetCi($801);
   $12 = 16384;
   $822 = $12;
   STACKTOP = sp;return ($822|0);
   break;
  }
  case 244: {
   $802 = $41;
   $803 = ($802|0)!=(0);
   if ($803) {
    $804 = HEAP32[$27>>2]|0;
    $805 = $15;
    $806 = (($805) + ($804)|0);
    $807 = (__Z8utf8_outjPc(1328,$806)|0);
    $808 = HEAP32[$27>>2]|0;
    $809 = (($808) + ($807))|0;
    HEAP32[$27>>2] = $809;
   }
   $810 = $42;
   $811 = ($810|0)!=(0);
   if ($811) {
    $812 = $43;
    $813 = $15;
    $814 = (($813) + ($812)|0);
    __ZL10RemoveCharPc($814);
   }
   $815 = HEAP32[$27>>2]|0;
   $816 = $15;
   $817 = (($816) + ($815)|0);
   HEAP8[$817>>0] = 32;
   $818 = HEAP32[$27>>2]|0;
   $819 = (($818) + 1)|0;
   $820 = $15;
   $821 = (($820) + ($819)|0);
   HEAP8[$821>>0] = 0;
   $12 = 589864;
   $822 = $12;
   STACKTOP = sp;return ($822|0);
   break;
  }
 }
 return (0)|0;
}
function __ZL4GetCv() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $or$cond = 0, $or$cond3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $4 = sp + 8|0;
 $7 = HEAP32[10817]|0;
 $2 = $7;
 $8 = ($7|0)!=(0);
 if ($8) {
  HEAP32[10817] = 0;
  $9 = $2;
  $0 = $9;
  $95 = $0;
  STACKTOP = sp;return ($95|0);
 }
 $10 = HEAP32[11234]|0;
 $11 = ($10|0)!=(0);
 if ($11) {
  $12 = HEAP32[11234]|0;
  $2 = $12;
  HEAP32[11234] = 0;
 } else {
  $13 = (__ZL8GetC_getv()|0);
  $2 = $13;
 }
 $14 = HEAP32[19238]|0;
 $15 = ($14|0)==(3);
 $16 = HEAP32[19238]|0;
 $17 = ($16|0)==(4);
 $or$cond = $15 | $17;
 if ($or$cond) {
  $18 = HEAP32[10481]|0;
  $19 = (($18) + 1)|0;
  HEAP32[10481] = $19;
  $20 = $2;
  $0 = $20;
  $95 = $0;
  STACKTOP = sp;return ($95|0);
 }
 $21 = HEAP32[19238]|0;
 $22 = ($21|0)<(2);
 if ($22) {
  $23 = $2;
  $24 = $23 & 128;
  $25 = ($24|0)!=(0);
  if ($25) {
   $6 = 0;
   $26 = $2;
   $27 = $26 & 224;
   $28 = ($27|0)==(192);
   if ($28) {
    $29 = $2;
    $30 = $29 & 30;
    $31 = ($30|0)!=(0);
    if ($31) {
     $6 = 1;
    } else {
     label = 13;
    }
   } else {
    label = 13;
   }
   do {
    if ((label|0) == 13) {
     $32 = $2;
     $33 = $32 & 240;
     $34 = ($33|0)==(224);
     if ($34) {
      $6 = 2;
      break;
     }
     $35 = $2;
     $36 = $35 & 248;
     $37 = ($36|0)==(240);
     if ($37) {
      $38 = $2;
      $39 = $38 & 15;
      $40 = ($39|0)<=(4);
      if ($40) {
       $6 = 3;
      }
     }
    }
   } while(0);
   $41 = $6;
   $5 = $41;
   $42 = ($41|0)>(0);
   if ($42) {
    $43 = $2;
    $44 = $5;
    $45 = (21659 + ($44)|0);
    $46 = HEAP8[$45>>0]|0;
    $47 = $46&255;
    $48 = $43 & $47;
    $1 = $48;
    while(1) {
     $49 = $5;
     $50 = ($49|0)>(0);
     if (!($50)) {
      break;
     }
     $51 = (__ZL8GetC_getv()|0);
     $52 = $5;
     $53 = (($4) + ($52<<2)|0);
     HEAP32[$53>>2] = $51;
     $3 = $51;
     $54 = ($51|0)==(0);
     if ($54) {
      label = 22;
      break;
     }
     $57 = $3;
     $58 = $57 & 192;
     $59 = ($58|0)!=(128);
     if ($59) {
      label = 26;
      break;
     }
     $67 = $1;
     $68 = $67 << 6;
     $69 = $3;
     $70 = $69 & 63;
     $71 = (($68) + ($70))|0;
     $1 = $71;
     $72 = $5;
     $73 = (($72) + -1)|0;
     $5 = $73;
    }
    if ((label|0) == 22) {
     $55 = HEAP32[19238]|0;
     $56 = ($55|0)==(0);
     if ($56) {
      HEAP32[19238] = 2;
     }
     __ZL10GetC_ungeti(32);
    }
    else if ((label|0) == 26) {
     $60 = $6;
     $61 = ($60|0)==(2);
     $62 = $5;
     $63 = ($62|0)==(1);
     $or$cond3 = $61 & $63;
     if ($or$cond3) {
      $64 = ((($4)) + 8|0);
      $65 = HEAP32[$64>>2]|0;
      HEAP32[11234] = $65;
     }
     $66 = $3;
     __ZL10GetC_ungeti($66);
    }
    $74 = $5;
    $75 = ($74|0)==(0);
    if ($75) {
     $76 = HEAP32[10481]|0;
     $77 = (($76) + 1)|0;
     HEAP32[10481] = $77;
     $78 = $1;
     $0 = $78;
     $95 = $0;
     STACKTOP = sp;return ($95|0);
    }
   }
   $79 = HEAP32[19238]|0;
   $80 = ($79|0)==(0);
   if ($80) {
    $81 = (__Z3Eofv()|0);
    $82 = ($81|0)!=(0);
    if (!($82)) {
     HEAP32[19238] = 2;
    }
   }
  }
 }
 $83 = HEAP32[10481]|0;
 $84 = (($83) + 1)|0;
 HEAP32[10481] = $84;
 $85 = $2;
 $86 = ($85|0)>=(160);
 $87 = $2;
 if ($86) {
  $88 = (($87) - 160)|0;
  $89 = HEAP32[19149]|0;
  $90 = ((($89)) + 448|0);
  $91 = HEAP32[$90>>2]|0;
  $92 = (($91) + ($88<<1)|0);
  $93 = HEAP16[$92>>1]|0;
  $94 = $93&65535;
  $0 = $94;
  $95 = $0;
  STACKTOP = sp;return ($95|0);
 } else {
  $0 = $87;
  $95 = $0;
  STACKTOP = sp;return ($95|0);
 }
 return (0)|0;
}
function __ZL6UngetCi($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 HEAP32[10817] = $2;
 STACKTOP = sp;return;
}
function __ZL14ProcessSsmlTagPwPcPiii($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$ = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0;
 var $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0;
 var $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0;
 var $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0;
 var $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0;
 var $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0;
 var $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0;
 var $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0;
 var $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0;
 var $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0;
 var $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0;
 var $299 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0;
 var $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0;
 var $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0;
 var $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0;
 var $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0;
 var $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0;
 var $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0;
 var $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0;
 var $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0;
 var $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0;
 var $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0;
 var $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $vararg_buffer = 0, $vararg_buffer11 = 0, $vararg_buffer15 = 0, $vararg_buffer19 = 0, $vararg_buffer3 = 0, $vararg_buffer7 = 0, $vararg_ptr10 = 0, $vararg_ptr14 = 0;
 var $vararg_ptr18 = 0, $vararg_ptr2 = 0, $vararg_ptr22 = 0, $vararg_ptr6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 528|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(528|0);
 $vararg_buffer19 = sp + 40|0;
 $vararg_buffer15 = sp + 32|0;
 $vararg_buffer11 = sp + 24|0;
 $vararg_buffer7 = sp + 16|0;
 $vararg_buffer3 = sp + 8|0;
 $vararg_buffer = sp;
 $26 = sp + 480|0;
 $27 = sp + 400|0;
 $30 = sp + 144|0;
 $6 = $0;
 $7 = $1;
 $8 = $2;
 $9 = $3;
 $10 = $4;
 $11 = 0;
 while(1) {
  $31 = $11;
  $32 = ($31>>>0)<(39);
  if (!($32)) {
   break;
  }
  $33 = $11;
  $34 = $6;
  $35 = (($34) + ($33<<2)|0);
  $36 = HEAP32[$35>>2]|0;
  $13 = $36;
  $37 = ($36|0)==(0);
  if ($37) {
   break;
  }
  $38 = $13;
  $39 = (_iswspace($38)|0);
  $40 = ($39|0)!=(0);
  if ($40) {
   break;
  }
  $41 = $13;
  $42 = $41&255;
  $43 = $42 << 24 >> 24;
  $44 = (_tolower($43)|0);
  $45 = $44&255;
  $46 = $11;
  $47 = (($26) + ($46)|0);
  HEAP8[$47>>0] = $45;
  $48 = $11;
  $49 = (($48) + 1)|0;
  $11 = $49;
 }
 $50 = $11;
 $51 = (($26) + ($50)|0);
 HEAP8[$51>>0] = 0;
 $52 = $11;
 $53 = $6;
 $54 = (($53) + ($52<<2)|0);
 $19 = $54;
 $55 = HEAP8[$26>>0]|0;
 $56 = $55 << 24 >> 24;
 $57 = ($56|0)==(47);
 if ($57) {
  $58 = ((($26)) + 1|0);
  $59 = (__Z10LookupMnemP8MNEM_TABPKc(1704,$58)|0);
  $14 = $59;
  $60 = ($59|0)!=(16);
  if ($60) {
   $61 = $8;
   $62 = HEAP32[$61>>2]|0;
   $63 = (($62) + 1)|0;
   HEAP32[$61>>2] = $63;
   $64 = $7;
   $65 = (($64) + ($62)|0);
   HEAP8[$65>>0] = 32;
  }
  $66 = $14;
  $67 = (($66) + 32)|0;
  $14 = $67;
 } else {
  $68 = (__Z10LookupMnemP8MNEM_TABPKc(1704,$26)|0);
  $14 = $68;
  $69 = ($68|0)!=(16);
  if ($69) {
   $70 = $8;
   $71 = HEAP32[$70>>2]|0;
   $72 = (($71) + 1)|0;
   HEAP32[$70>>2] = $72;
   $73 = $7;
   $74 = (($73) + ($71)|0);
   HEAP8[$74>>0] = 32;
  }
  $75 = $10;
  $76 = ($75|0)!=(0);
  if ($76) {
   $77 = $14;
   $78 = (20992 + ($77)|0);
   $79 = HEAP8[$78>>0]|0;
   $80 = ($79<<24>>24)!=(0);
   if ($80) {
    $5 = 0;
    $455 = $5;
    STACKTOP = sp;return ($455|0);
   }
  }
 }
 $18 = 0;
 $23 = 16384;
 $81 = HEAP32[11230]|0;
 $82 = (($81) - 1)|0;
 $83 = (43288 + (($82*76)|0)|0);
 $29 = $83;
 $84 = $14;
 L20: do {
  switch ($84|0) {
  case 10:  {
   $85 = $14;
   $86 = (__ZL14PushParamStacki($85)|0);
   $28 = $86;
   $87 = $19;
   $88 = (__ZL16GetSsmlAttributePwPKc($87,21011)|0);
   $20 = $88;
   $89 = $19;
   $90 = (__ZL16GetSsmlAttributePwPKc($89,21017)|0);
   $21 = $90;
   $91 = $20;
   $92 = (__ZL7attrcmpPKwPKc($91,21022)|0);
   $93 = ($92|0)==(0);
   if ($93) {
    $94 = $21;
    $95 = (__ZL10attrlookupPKwPK8MNEM_TAB($94,1968)|0);
    $15 = $95;
    $96 = $15;
    $97 = $28;
    $98 = ((($97)) + 4|0);
    $99 = ((($98)) + 20|0);
    HEAP32[$99>>2] = $96;
   } else {
    $100 = $20;
    $101 = (__ZL7attrcmpPKwPKc($100,21034)|0);
    $102 = ($101|0)==(0);
    if ($102) {
     $103 = $21;
     $104 = (__ZL10attrlookupPKwPK8MNEM_TAB($103,2000)|0);
     $15 = $104;
     $105 = $15;
     $106 = $28;
     $107 = ((($106)) + 4|0);
     $108 = ((($107)) + 24|0);
     HEAP32[$108>>2] = $105;
    }
   }
   $109 = $7;
   $110 = $8;
   __ZL17ProcessParamStackPcPi($109,$110);
   break;
  }
  case 3:  {
   $111 = $14;
   $112 = (__ZL14PushParamStacki($111)|0);
   $28 = $112;
   $25 = 1;
   while(1) {
    $113 = $25;
    $114 = ($113|0)<=(4);
    if (!($114)) {
     break;
    }
    $115 = $19;
    $116 = $25;
    $117 = (2040 + ($116<<2)|0);
    $118 = HEAP32[$117>>2]|0;
    $119 = (__ZL16GetSsmlAttributePwPKc($115,$118)|0);
    $20 = $119;
    $120 = ($119|0)!=(0|0);
    if ($120) {
     $121 = $25;
     $122 = $20;
     $123 = $28;
     __ZL19SetProsodyParameteriPwP11PARAM_STACK($121,$122,$123);
    }
    $124 = $25;
    $125 = (($124) + 1)|0;
    $25 = $125;
   }
   $126 = $7;
   $127 = $8;
   __ZL17ProcessParamStackPcPi($126,$127);
   break;
  }
  case 12:  {
   $128 = $14;
   $129 = (__ZL14PushParamStacki($128)|0);
   $28 = $129;
   $15 = 3;
   $130 = $19;
   $131 = (__ZL16GetSsmlAttributePwPKc($130,21050)|0);
   $20 = $131;
   $132 = ($131|0)!=(0|0);
   if ($132) {
    $133 = $20;
    $134 = (__ZL10attrlookupPKwPK8MNEM_TAB($133,2060)|0);
    $15 = $134;
   }
   $135 = HEAP32[19149]|0;
   $136 = ((($135)) + 244|0);
   $137 = HEAP32[$136>>2]|0;
   $138 = ($137|0)==(1);
   $139 = $15;
   if ($138) {
    $140 = (21056 + ($139)|0);
    $141 = HEAP8[$140>>0]|0;
    $142 = $141&255;
    $143 = $28;
    $144 = ((($143)) + 4|0);
    $145 = ((($144)) + 16|0);
    HEAP32[$145>>2] = $142;
    $146 = $15;
    $147 = (21062 + ($146)|0);
    $148 = HEAP8[$147>>0]|0;
    $149 = $148&255;
    $150 = $28;
    $151 = ((($150)) + 4|0);
    $152 = ((($151)) + 8|0);
    HEAP32[$152>>2] = $149;
   } else {
    $153 = (21068 + ($139)|0);
    $154 = HEAP8[$153>>0]|0;
    $155 = $154&255;
    $156 = $28;
    $157 = ((($156)) + 4|0);
    $158 = ((($157)) + 8|0);
    HEAP32[$158>>2] = $155;
    $159 = $15;
    $160 = $28;
    $161 = ((($160)) + 4|0);
    $162 = ((($161)) + 48|0);
    HEAP32[$162>>2] = $159;
   }
   $163 = $7;
   $164 = $8;
   __ZL17ProcessParamStackPcPi($163,$164);
   break;
  }
  case 44: case 35: case 42:  {
   $165 = $14;
   $166 = $7;
   $167 = $8;
   __ZL13PopParamStackiPcPi($165,$166,$167);
   break;
  }
  case 4:  {
   $168 = $19;
   $169 = (__ZL16GetSsmlAttributePwPKc($168,21074)|0);
   $20 = $169;
   $170 = $19;
   $171 = (__ZL16GetSsmlAttributePwPKc($170,21087)|0);
   $21 = $171;
   $172 = $19;
   $173 = (__ZL16GetSsmlAttributePwPKc($172,21094)|0);
   $22 = $173;
   $174 = $20;
   $175 = (__ZL10attrlookupPKwPK8MNEM_TAB($174,2108)|0);
   $15 = $175;
   $176 = $21;
   $177 = (__ZL10attrlookupPKwPK8MNEM_TAB($176,2156)|0);
   $16 = $177;
   $178 = $16;
   $179 = ($178|0)==(1);
   if ($179) {
    $15 = 19;
   }
   $180 = $22;
   $181 = (__ZL10attrnumberPKwii($180,0,0)|0);
   $17 = $181;
   $182 = $15;
   $183 = ($182|0)==(64);
   do {
    if ($183) {
     $184 = $17;
     $185 = ($184|0)<=(1);
     if ($185) {
      $15 = 193;
      break;
     } else {
      $186 = $17;
      $187 = (64 + ($186))|0;
      $15 = $187;
      break;
     }
    }
   } while(0);
   $188 = $15;
   HEAP32[$vararg_buffer>>2] = 1;
   $vararg_ptr2 = ((($vararg_buffer)) + 4|0);
   HEAP32[$vararg_ptr2>>2] = $188;
   (_sprintf($27,21101,$vararg_buffer)|0);
   $189 = $8;
   $190 = HEAP32[$189>>2]|0;
   $191 = $7;
   $192 = (($191) + ($190)|0);
   (_strcpy($192,$27)|0);
   $193 = (_strlen($27)|0);
   $194 = $8;
   $195 = HEAP32[$194>>2]|0;
   $196 = (($195) + ($193))|0;
   HEAP32[$194>>2] = $196;
   $197 = $8;
   $198 = HEAP32[$197>>2]|0;
   HEAP32[11231] = $198;
   $199 = $15;
   HEAP32[11212] = $199;
   break;
  }
  case 36:  {
   $200 = HEAP32[11212]|0;
   $201 = ($200|0)==(36);
   if ($201) {
    $202 = $8;
    $203 = HEAP32[$202>>2]|0;
    $204 = $7;
    $205 = (($204) + ($203)|0);
    HEAP8[$205>>0] = 0;
    $206 = $7;
    $207 = HEAP32[11231]|0;
    $208 = $8;
    (__ZL14ReplaceKeyNamePciPi($206,$207,$208)|0);
   }
   $209 = $8;
   $210 = HEAP32[$209>>2]|0;
   $211 = (($210) + 1)|0;
   HEAP32[$209>>2] = $211;
   $212 = $7;
   $213 = (($212) + ($210)|0);
   HEAP8[$213>>0] = 1;
   $214 = $8;
   $215 = HEAP32[$214>>2]|0;
   $216 = (($215) + 1)|0;
   HEAP32[$214>>2] = $216;
   $217 = $7;
   $218 = (($217) + ($215)|0);
   HEAP8[$218>>0] = 89;
   HEAP32[11212] = 0;
   break;
  }
  case 9:  {
   $219 = $19;
   $220 = (__ZL16GetSsmlAttributePwPKc($219,21107)|0);
   $20 = $220;
   $221 = ($220|0)!=(0|0);
   if ($221) {
    HEAP32[11213] = 1;
    $222 = $8;
    $223 = HEAP32[$222>>2]|0;
    $224 = $7;
    $225 = (($224) + ($223)|0);
    $226 = $20;
    $227 = $9;
    $228 = $8;
    $229 = HEAP32[$228>>2]|0;
    $230 = (($227) - ($229))|0;
    $231 = (__ZL13attrcopy_utf8PcPKwi($225,$226,$230)|0);
    $232 = $8;
    $233 = HEAP32[$232>>2]|0;
    $234 = (($233) + ($231))|0;
    HEAP32[$232>>2] = $234;
   }
   break;
  }
  case 14:  {
   HEAP32[11213] = 1;
   break;
  }
  case 46: case 41:  {
   HEAP32[11213] = 0;
   break;
  }
  case 5:  {
   $235 = $19;
   $236 = (__ZL16GetSsmlAttributePwPKc($235,25927)|0);
   $20 = $236;
   $237 = ($236|0)!=(0|0);
   if ($237) {
    $238 = $20;
    (__ZL13attrcopy_utf8PcPKwi($27,$238,80)|0);
    $239 = (_strcmp(120498,$27)|0);
    $240 = ($239|0)==(0);
    if ($240) {
     HEAP32[11208] = 1;
     HEAP8[120498] = 0;
     $5 = 16384;
     $455 = $5;
     STACKTOP = sp;return ($455|0);
    } else {
     $241 = (__Z11AddNameDataPKci($27,0)|0);
     $12 = $241;
     $242 = ($241|0)>=(0);
     if (!($242)) {
      break L20;
     }
     $243 = $12;
     HEAP32[$vararg_buffer3>>2] = 1;
     $vararg_ptr6 = ((($vararg_buffer3)) + 4|0);
     HEAP32[$vararg_ptr6>>2] = $243;
     (_sprintf($27,21113,$vararg_buffer3)|0);
     $244 = $8;
     $245 = HEAP32[$244>>2]|0;
     $246 = $7;
     $247 = (($246) + ($245)|0);
     (_strcpy($247,$27)|0);
     $248 = (_strlen($27)|0);
     $249 = $8;
     $250 = HEAP32[$249>>2]|0;
     $251 = (($250) + ($248))|0;
     HEAP32[$249>>2] = $251;
     break L20;
    }
   }
   break;
  }
  case 11:  {
   $252 = $14;
   $253 = (__ZL14PushParamStacki($252)|0);
   $28 = $253;
   $254 = $19;
   $255 = (__ZL16GetSsmlAttributePwPKc($254,21119)|0);
   $20 = $255;
   $256 = ($255|0)!=(0|0);
   do {
    if ($256) {
     $257 = $20;
     (__ZL13attrcopy_utf8PcPKwi($27,$257,80)|0);
     $258 = HEAP32[10451]|0;
     $259 = ($258|0)==(0|0);
     if (!($259)) {
      $281 = (__Z11AddNameDataPKci($27,0)|0);
      $12 = $281;
      $282 = ($281|0)>=(0);
      if (!($282)) {
       break;
      }
      $283 = $12;
      $284 = HEAP32[10478]|0;
      $285 = (($284) + ($283)|0);
      $24 = $285;
      $286 = HEAP32[10451]|0;
      $287 = $24;
      $288 = HEAP32[543]|0;
      $289 = (FUNCTION_TABLE_iiii[$286 & 31](1,$287,$288)|0);
      $290 = ($289|0)==(0);
      if (!($290)) {
       break;
      }
      $291 = $12;
      HEAP32[$vararg_buffer15>>2] = 1;
      $vararg_ptr18 = ((($vararg_buffer15)) + 4|0);
      HEAP32[$vararg_ptr18>>2] = $291;
      (_sprintf($27,21135,$vararg_buffer15)|0);
      $292 = $8;
      $293 = HEAP32[$292>>2]|0;
      $294 = $7;
      $295 = (($294) + ($293)|0);
      (_strcpy($295,$27)|0);
      $296 = (_strlen($27)|0);
      $297 = $8;
      $298 = HEAP32[$297>>2]|0;
      $299 = (($298) + ($296))|0;
      HEAP32[$297>>2] = $299;
      $300 = $28;
      $301 = ((($300)) + 4|0);
      HEAP32[$301>>2] = 1;
      break;
     }
     $260 = HEAP32[543]|0;
     $261 = ($260|0)!=(0|0);
     if ($261) {
      $262 = HEAP8[$27>>0]|0;
      $263 = $262 << 24 >> 24;
      $264 = ($263|0)!=(47);
      if ($264) {
       $265 = HEAP32[543]|0;
       HEAP32[$vararg_buffer7>>2] = $265;
       $vararg_ptr10 = ((($vararg_buffer7)) + 4|0);
       HEAP32[$vararg_ptr10>>2] = $27;
       (_sprintf($30,21123,$vararg_buffer7)|0);
       $266 = (__ZL14LoadSoundFile2PKc($30)|0);
       $12 = $266;
      } else {
       label = 58;
      }
     } else {
      label = 58;
     }
     if ((label|0) == 58) {
      $267 = (__ZL14LoadSoundFile2PKc($27)|0);
      $12 = $267;
     }
     $268 = $12;
     $269 = ($268|0)>=(0);
     if ($269) {
      $270 = $12;
      HEAP32[$vararg_buffer11>>2] = 1;
      $vararg_ptr14 = ((($vararg_buffer11)) + 4|0);
      HEAP32[$vararg_ptr14>>2] = $270;
      (_sprintf($27,21129,$vararg_buffer11)|0);
      $271 = $8;
      $272 = HEAP32[$271>>2]|0;
      $273 = $7;
      $274 = (($273) + ($272)|0);
      (_strcpy($274,$27)|0);
      $275 = (_strlen($27)|0);
      $276 = $8;
      $277 = HEAP32[$276>>2]|0;
      $278 = (($277) + ($275))|0;
      HEAP32[$276>>2] = $278;
      $279 = $28;
      $280 = ((($279)) + 4|0);
      HEAP32[$280>>2] = 1;
     }
    }
   } while(0);
   $302 = $7;
   $303 = $8;
   __ZL17ProcessParamStackPcPi($302,$303);
   $304 = $10;
   $305 = ($304|0)!=(0);
   if ($305) {
    $306 = $14;
    $307 = $7;
    $308 = $8;
    __ZL13PopParamStackiPcPi($306,$307,$308);
   } else {
    HEAP32[11214] = 1;
   }
   $5 = 16384;
   $455 = $5;
   STACKTOP = sp;return ($455|0);
   break;
  }
  case 43:  {
   $309 = $14;
   $310 = $7;
   $311 = $8;
   __ZL13PopParamStackiPcPi($309,$310,$311);
   HEAP32[11214] = 0;
   $5 = 16384;
   $455 = $5;
   STACKTOP = sp;return ($455|0);
   break;
  }
  case 13:  {
   $15 = 21;
   $23 = 16384;
   $312 = $19;
   $313 = (__ZL16GetSsmlAttributePwPKc($312,21141)|0);
   $20 = $313;
   $314 = ($313|0)!=(0|0);
   if ($314) {
    $315 = $20;
    $316 = (__ZL10attrlookupPKwPK8MNEM_TAB($315,2176)|0);
    $15 = $316;
    $317 = $15;
    $318 = ($317|0)<(3);
    if ($318) {
     $319 = $8;
     $320 = HEAP32[$319>>2]|0;
     $321 = $7;
     $322 = (($321) + ($320)|0);
     $323 = $15;
     HEAP32[$vararg_buffer19>>2] = 1;
     $vararg_ptr22 = ((($vararg_buffer19)) + 4|0);
     HEAP32[$vararg_ptr22>>2] = $323;
     (_sprintf($322,21150,$vararg_buffer19)|0);
     $324 = $8;
     $325 = HEAP32[$324>>2]|0;
     $326 = (($325) + 3)|0;
     HEAP32[$324>>2] = $326;
     $23 = 0;
    }
    $327 = $15;
    $328 = (2232 + ($327<<2)|0);
    $329 = HEAP32[$328>>2]|0;
    $15 = $329;
   }
   $330 = $19;
   $331 = (__ZL16GetSsmlAttributePwPKc($330,21156)|0);
   $21 = $331;
   $332 = ($331|0)!=(0|0);
   if ($332) {
    $333 = $21;
    $334 = (__ZL10attrnumberPKwii($333,0,1)|0);
    $16 = $334;
    $335 = $16;
    $336 = $335<<8;
    $337 = HEAP32[(75120)>>2]|0;
    $338 = ($337*10)|0;
    $339 = (($336|0) / ($338|0))&-1;
    $15 = $339;
    $340 = $15;
    $341 = ($340|0)<(200);
    if ($341) {
     $342 = $16;
     $343 = $342<<8;
     $344 = HEAP32[18779]|0;
     $345 = ($344*10)|0;
     $346 = (($343|0) / ($345|0))&-1;
     $15 = $346;
    }
    $347 = $23;
    $348 = ($347|0)==(0);
    if ($348) {
     $23 = 16384;
    }
   }
   $349 = $23;
   $350 = ($349|0)!=(0);
   if ($350) {
    $351 = $15;
    $352 = ($351|0)>(4095);
    if ($352) {
     $353 = $15;
     $354 = (($353|0) / 32)&-1;
     $15 = $354;
     $355 = $15;
     $356 = ($355|0)>(4095);
     $$ = $356 ? 4095 : $354;
     $15 = $$;
     $357 = $23;
     $358 = $357 | 8388608;
     $23 = $358;
    }
    $359 = $23;
    $360 = $15;
    $361 = (($359) + ($360))|0;
    $5 = $361;
    $455 = $5;
    STACKTOP = sp;return ($455|0);
   }
   break;
  }
  case 1:  {
   $362 = $19;
   $363 = (__ZL16GetSsmlAttributePwPKc($362,21161)|0);
   $20 = $363;
   $364 = ($363|0)!=(0|0);
   if ($364) {
    $365 = $20;
    (__ZL13attrcopy_utf8PcPKwi($27,$365,80)|0);
    $366 = (__Z11AddNameDataPKci($27,0)|0);
    $12 = $366;
    $367 = ($366|0)>=(0);
    if ($367) {
     $368 = $12;
     $369 = HEAP32[10478]|0;
     $370 = (($369) + ($368)|0);
     HEAP32[543] = $370;
    }
   }
   $371 = $19;
   $372 = $14;
   $373 = (__ZL18GetVoiceAttributesPwi($371,$372)|0);
   $374 = ($373|0)==(0);
   if ($374) {
    $5 = 0;
    $455 = $5;
    STACKTOP = sp;return ($455|0);
   } else {
    $5 = 147456;
    $455 = $5;
    STACKTOP = sp;return ($455|0);
   }
   break;
  }
  case 2:  {
   $375 = $19;
   $376 = $14;
   $377 = (__ZL18GetVoiceAttributesPwi($375,$376)|0);
   $378 = ($377|0)==(0);
   if ($378) {
    $5 = 0;
    $455 = $5;
    STACKTOP = sp;return ($455|0);
   } else {
    $5 = 147456;
    $455 = $5;
    STACKTOP = sp;return ($455|0);
   }
   break;
  }
  case 33:  {
   while(1) {
    $379 = HEAP32[11230]|0;
    $380 = ($379|0)>(1);
    if (!($380)) {
     break;
    }
    $381 = HEAP32[11230]|0;
    $382 = (($381) - 1)|0;
    $383 = (43288 + (($382*76)|0)|0);
    $384 = HEAP32[$383>>2]|0;
    $385 = ($384|0)!=(1);
    if (!($385)) {
     break;
    }
    $386 = HEAP32[11230]|0;
    $387 = (($386) + -1)|0;
    HEAP32[11230] = $387;
   }
   $388 = $19;
   $389 = $14;
   $390 = (__ZL18GetVoiceAttributesPwi($388,$389)|0);
   $391 = (524328 + ($390))|0;
   $5 = $391;
   $455 = $5;
   STACKTOP = sp;return ($455|0);
   break;
  }
  case 34:  {
   while(1) {
    $392 = HEAP32[11230]|0;
    $393 = ($392|0)>(1);
    if (!($393)) {
     break;
    }
    $394 = HEAP32[11230]|0;
    $395 = (($394) - 1)|0;
    $396 = (43288 + (($395*76)|0)|0);
    $397 = HEAP32[$396>>2]|0;
    $398 = ($397|0)!=(2);
    if (!($398)) {
     break;
    }
    $399 = HEAP32[11230]|0;
    $400 = (($399) + -1)|0;
    HEAP32[11230] = $400;
   }
   $23 = 0;
   $401 = $23;
   $402 = $19;
   $403 = $14;
   $404 = (__ZL18GetVoiceAttributesPwi($402,$403)|0);
   $405 = (($401) + ($404))|0;
   $5 = $405;
   $455 = $5;
   STACKTOP = sp;return ($455|0);
   break;
  }
  case 47: case 15:  {
   $5 = 262174;
   $455 = $5;
   STACKTOP = sp;return ($455|0);
   break;
  }
  case 6:  {
   $406 = $29;
   $407 = HEAP32[$406>>2]|0;
   $408 = ($407|0)==(6);
   if ($408) {
    $409 = $19;
    $410 = (__ZL18GetVoiceAttributesPwi($409,38)|0);
    $18 = $410;
   }
   $411 = $19;
   $412 = $14;
   $413 = (__ZL18GetVoiceAttributesPwi($411,$412)|0);
   $414 = $18;
   $415 = $414 | $413;
   $18 = $415;
   $416 = $18;
   $417 = (524358 + ($416))|0;
   $5 = $417;
   $455 = $5;
   STACKTOP = sp;return ($455|0);
   break;
  }
  case 7:  {
   $418 = $29;
   $419 = HEAP32[$418>>2]|0;
   $420 = ($419|0)==(6);
   if ($420) {
    $421 = $19;
    $422 = (__ZL18GetVoiceAttributesPwi($421,38)|0);
    $18 = $422;
   }
   $423 = $29;
   $424 = HEAP32[$423>>2]|0;
   $425 = ($424|0)==(7);
   if ($425) {
    $426 = $19;
    $427 = (__ZL18GetVoiceAttributesPwi($426,39)|0);
    $428 = $18;
    $429 = $428 | $427;
    $18 = $429;
   }
   $430 = $19;
   $431 = $14;
   $432 = (__ZL18GetVoiceAttributesPwi($430,$431)|0);
   $433 = $18;
   $434 = $433 | $432;
   $18 = $434;
   $435 = $18;
   $436 = (524358 + ($435))|0;
   $5 = $436;
   $455 = $5;
   STACKTOP = sp;return ($455|0);
   break;
  }
  case 38:  {
   $437 = $29;
   $438 = HEAP32[$437>>2]|0;
   $439 = ($438|0)==(6);
   if ($439) {
    $440 = $19;
    $441 = $14;
    $442 = (__ZL18GetVoiceAttributesPwi($440,$441)|0);
    $18 = $442;
   }
   $443 = $18;
   $444 = (524328 + ($443))|0;
   $5 = $444;
   $455 = $5;
   STACKTOP = sp;return ($455|0);
   break;
  }
  case 39:  {
   $445 = $29;
   $446 = HEAP32[$445>>2]|0;
   $447 = ($446|0)==(6);
   if (!($447)) {
    $448 = $29;
    $449 = HEAP32[$448>>2]|0;
    $450 = ($449|0)==(7);
    if (!($450)) {
     $5 = 524358;
     $455 = $5;
     STACKTOP = sp;return ($455|0);
    }
   }
   $451 = $19;
   $452 = $14;
   $453 = (__ZL18GetVoiceAttributesPwi($451,$452)|0);
   $454 = (($453) + 524358)|0;
   $5 = $454;
   $455 = $5;
   STACKTOP = sp;return ($455|0);
   break;
  }
  default: {
  }
  }
 } while(0);
 $5 = 0;
 $455 = $5;
 STACKTOP = sp;return ($455|0);
}
function __ZL13LookupSpecialP10TranslatorPKcPc($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(144|0);
 $vararg_buffer = sp;
 $7 = sp + 8|0;
 $8 = sp + 87|0;
 $9 = sp + 32|0;
 $10 = sp + 4|0;
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $11 = $5;
 HEAP32[$10>>2] = $11;
 $12 = ((($7)) + 4|0);
 HEAP32[$12>>2] = 0;
 HEAP32[$7>>2] = 0;
 $13 = $4;
 $14 = (__Z14LookupDictListP10TranslatorPPcS1_PjiP8WORD_TAB($13,$10,$8,$7,0,0)|0);
 $15 = ($14|0)!=(0);
 if ($15) {
  $16 = $4;
  __Z13SetWordStressP10TranslatorPcPjii($16,$8,$7,-1,0);
  __Z14DecodePhonemesPKcPc($8,$9);
  $17 = $6;
  HEAP32[$vararg_buffer>>2] = $9;
  (_sprintf($17,20985,$vararg_buffer)|0);
  $18 = $6;
  $3 = $18;
  $19 = $3;
  STACKTOP = sp;return ($19|0);
 } else {
  $3 = 0;
  $19 = $3;
  STACKTOP = sp;return ($19|0);
 }
 return (0)|0;
}
function __ZL10RemoveCharPc($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = sp;
 $1 = $0;
 $3 = $1;
 $4 = $1;
 $5 = (__Z7utf8_inPiPKc($2,$4)|0);
 _memset(($3|0),32,($5|0))|0;
 STACKTOP = sp;return;
}
function __ZL19AnnouncePunctuationP10TranslatoriPiPcS1_i($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$ = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0;
 var $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0;
 var $135 = 0, $136 = 0, $137 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0;
 var $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0;
 var $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0;
 var $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0;
 var $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond = 0, $or$cond3 = 0, $or$cond5 = 0, $or$cond7 = 0, $vararg_buffer = 0, $vararg_buffer11 = 0, $vararg_buffer13 = 0;
 var $vararg_buffer16 = 0, $vararg_buffer18 = 0, $vararg_buffer8 = 0, $vararg_ptr21 = 0, $vararg_ptr22 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 432|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(432|0);
 $vararg_buffer18 = sp + 40|0;
 $vararg_buffer16 = sp + 32|0;
 $vararg_buffer13 = sp + 24|0;
 $vararg_buffer11 = sp + 16|0;
 $vararg_buffer8 = sp + 8|0;
 $vararg_buffer = sp;
 $21 = sp + 224|0;
 $22 = sp + 144|0;
 $23 = sp + 112|0;
 $7 = $0;
 $8 = $1;
 $9 = $2;
 $10 = $3;
 $11 = $4;
 $12 = $5;
 $14 = 0;
 $24 = $9;
 $25 = HEAP32[$24>>2]|0;
 $18 = $25;
 HEAP8[$21>>0] = 0;
 $26 = $8;
 $27 = (__ZL15LookupSoundiconi($26)|0);
 $15 = $27;
 $28 = ($27|0)>=(0);
 do {
  if ($28) {
   $29 = $15;
   HEAP32[$vararg_buffer>>2] = $29;
   (_sprintf($21,20881,$vararg_buffer)|0);
   $30 = $18;
   __ZL6UngetCi($30);
  } else {
   $31 = $8;
   $32 = ($31|0)==(46);
   $33 = $12;
   $34 = ($33|0)!=(0);
   $or$cond = $32 & $34;
   $35 = $18;
   $36 = ($35|0)!=(46);
   $or$cond3 = $or$cond & $36;
   if ($or$cond3) {
    $37 = $7;
    $38 = (__ZL13LookupSpecialP10TranslatorPKcPc($37,20887,$23)|0);
    $39 = ($38|0)!=(0|0);
    if ($39) {
     $14 = $23;
    }
   }
   $40 = $14;
   $41 = ($40|0)==(0|0);
   if ($41) {
    $42 = $7;
    $43 = $8;
    $44 = (__ZL14LookupCharNameP10Translatorii($42,$43,0)|0);
    $14 = $44;
   }
   $45 = $14;
   $46 = ($45|0)==(0|0);
   if ($46) {
    $6 = -1;
    $137 = $6;
    STACKTOP = sp;return ($137|0);
   }
   $47 = $11;
   $48 = HEAP32[$47>>2]|0;
   $49 = ($48|0)==(0);
   $50 = $12;
   $51 = ($50|0)==(0);
   $or$cond5 = $49 | $51;
   if (!($or$cond5)) {
    $52 = $7;
    $53 = ((($52)) + 24|0);
    $54 = ((($53)) + 68|0);
    $55 = HEAP32[$54>>2]|0;
    $56 = $55 & 2;
    $57 = ($56|0)!=(0);
    if (!($57)) {
     $88 = $18;
     __ZL6UngetCi($88);
     $89 = HEAP32[19161]|0;
     $90 = ($89|0)!=(0);
     if ($90) {
      $91 = $8;
      $92 = ($91|0)==(60);
      $93 = $8;
      $94 = ($93|0)==(38);
      $or$cond7 = $92 | $94;
      if ($or$cond7) {
       $95 = $8;
       HEAP32[11211] = $95;
      }
     }
     $96 = $8;
     HEAP32[11210] = $96;
     HEAP8[$21>>0] = 32;
     $97 = ((($21)) + 1|0);
     HEAP8[$97>>0] = 0;
     break;
    }
   }
   $13 = 1;
   while(1) {
    $58 = $18;
    $59 = $8;
    $60 = ($58|0)==($59|0);
    $61 = $8;
    $62 = ($61|0)!=(60);
    $63 = $60 ? $62 : 0;
    if (!($63)) {
     break;
    }
    $64 = $13;
    $65 = (($64) + 1)|0;
    $13 = $65;
    $66 = (__ZL4GetCv()|0);
    $18 = $66;
   }
   $67 = $18;
   $68 = $9;
   HEAP32[$68>>2] = $67;
   $69 = $12;
   $70 = ($69|0)!=(0);
   if ($70) {
    $71 = $18;
    __ZL6UngetCi($71);
   }
   $72 = $13;
   $73 = ($72|0)==(1);
   if ($73) {
    $74 = $14;
    HEAP32[$vararg_buffer8>>2] = $74;
    (_sprintf($21,20891,$vararg_buffer8)|0);
    break;
   }
   $75 = $13;
   $76 = ($75|0)<(4);
   if (!($76)) {
    $85 = $14;
    $86 = $13;
    $87 = $14;
    HEAP32[$vararg_buffer18>>2] = $85;
    $vararg_ptr21 = ((($vararg_buffer18)) + 4|0);
    HEAP32[$vararg_ptr21>>2] = $86;
    $vararg_ptr22 = ((($vararg_buffer18)) + 8|0);
    HEAP32[$vararg_ptr22>>2] = $87;
    (_sprintf($21,20908,$vararg_buffer18)|0);
    break;
   }
   HEAP8[$21>>0] = 0;
   $77 = HEAP32[(80792)>>2]|0;
   $78 = ($77|0)<(300);
   if ($78) {
    (_sprintf($21,20895,$vararg_buffer11)|0);
   }
   while(1) {
    $79 = $13;
    $80 = (($79) + -1)|0;
    $13 = $80;
    $81 = ($79|0)>(0);
    if (!($81)) {
     break;
    }
    $82 = $14;
    HEAP32[$vararg_buffer13>>2] = $82;
    (_sprintf($22,20891,$vararg_buffer13)|0);
    (_strcat($21,$22)|0);
   }
   $83 = HEAP32[(80792)>>2]|0;
   $84 = ($83|0)<(300);
   if ($84) {
    (_sprintf($22,20901,$vararg_buffer16)|0);
    (_strcat($21,$22)|0);
   }
  }
 } while(0);
 $98 = $11;
 $99 = HEAP32[$98>>2]|0;
 $20 = $99;
 $100 = (_strlen($21)|0);
 $19 = $100;
 $101 = $11;
 $102 = HEAP32[$101>>2]|0;
 $103 = $10;
 $104 = (($103) + ($102)|0);
 (_strcpy($104,$21)|0);
 $105 = $19;
 $106 = $11;
 $107 = HEAP32[$106>>2]|0;
 $108 = (($107) + ($105))|0;
 HEAP32[$106>>2] = $108;
 $109 = $12;
 $110 = ($109|0)==(0);
 if ($110) {
  $6 = -1;
  $137 = $6;
  STACKTOP = sp;return ($137|0);
 }
 $111 = $8;
 $112 = ($111|0)==(45);
 if ($112) {
  $6 = 16384;
  $137 = $6;
  STACKTOP = sp;return ($137|0);
 }
 $113 = $8;
 $114 = (__Z11lookupwcharPKti(6602,$113)|0);
 $115 = (1524 + ($114<<2)|0);
 $116 = HEAP32[$115>>2]|0;
 $16 = $116;
 $17 = 262148;
 $117 = $16;
 $118 = $117 & 28672;
 $119 = ($118|0)==(4096);
 $$ = $119 ? 266244 : 262148;
 $17 = $$;
 $120 = $20;
 $121 = ($120|0)>(0);
 if ($121) {
  $122 = $7;
  $123 = ((($122)) + 24|0);
  $124 = ((($123)) + 68|0);
  $125 = HEAP32[$124>>2]|0;
  $126 = $125 & 2;
  $127 = ($126|0)!=(0);
  if (!($127)) {
   $128 = $16;
   $129 = $128 & -32769;
   $130 = ($129|0)==(266270);
   if ($130) {
    $6 = 262148;
    $137 = $6;
    STACKTOP = sp;return ($137|0);
   } else {
    $131 = $17;
    $6 = $131;
    $137 = $6;
    STACKTOP = sp;return ($137|0);
   }
  }
 }
 $132 = $16;
 $133 = $132 & 524288;
 $134 = ($133|0)!=(0);
 if ($134) {
  $135 = $16;
  $6 = $135;
  $137 = $6;
  STACKTOP = sp;return ($137|0);
 } else {
  $136 = $17;
  $6 = $136;
  $137 = $6;
  STACKTOP = sp;return ($137|0);
 }
 return (0)|0;
}
function __ZL14LookupCharNameP10Translatorii($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer3 = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 208|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(208|0);
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer = sp;
 $7 = sp + 32|0;
 $8 = sp + 176|0;
 $9 = sp + 116|0;
 $10 = sp + 56|0;
 $12 = sp + 20|0;
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $11 = 0;
 HEAP8[120033] = 0;
 HEAP32[$7>>2] = 0;
 $13 = ((($7)) + 4|0);
 HEAP32[$13>>2] = 0;
 HEAP8[$8>>0] = 0;
 $14 = ((($8)) + 1|0);
 HEAP8[$14>>0] = 95;
 $15 = $4;
 $16 = ((($8)) + 2|0);
 $17 = (__Z8utf8_outjPc($15,$16)|0);
 $6 = $17;
 $18 = $6;
 $19 = (2 + ($18))|0;
 $20 = (($8) + ($19)|0);
 HEAP8[$20>>0] = 0;
 $21 = $5;
 $22 = ($21|0)!=(0);
 if ($22) {
  $23 = ((($8)) + 2|0);
  HEAP32[$12>>2] = $23;
  $24 = $3;
  (__Z14LookupDictListP10TranslatorPPcS1_PjiP8WORD_TAB($24,$12,$9,$7,0,0)|0);
 } else {
  $25 = ((($8)) + 1|0);
  HEAP32[$12>>2] = $25;
  $26 = $3;
  $27 = (__Z14LookupDictListP10TranslatorPPcS1_PjiP8WORD_TAB($26,$12,$9,$7,0,0)|0);
  $28 = ($27|0)==(0);
  if ($28) {
   $29 = ((($8)) + 2|0);
   HEAP32[$12>>2] = $29;
   $30 = $3;
   $31 = (__Z14LookupDictListP10TranslatorPPcS1_PjiP8WORD_TAB($30,$12,$9,$7,0,0)|0);
   $32 = ($31|0)==(0);
   if ($32) {
    $33 = ((($8)) + 1|0);
    HEAP8[$33>>0] = 32;
    $34 = $3;
    $35 = ((($8)) + 2|0);
    (__Z14TranslateRulesP10TranslatorPcS1_iS1_iPj($34,$35,$9,60,0,0,0)|0);
   }
  }
 }
 $36 = $5;
 $37 = ($36|0)==(0);
 do {
  if ($37) {
   $38 = HEAP8[$9>>0]|0;
   $39 = $38 << 24 >> 24;
   $40 = ($39|0)==(0);
   if (!($40)) {
    $41 = HEAP8[$9>>0]|0;
    $42 = $41 << 24 >> 24;
    $43 = ($42|0)==(21);
    if (!($43)) {
     break;
    }
   }
   $44 = $3;
   $45 = ((($44)) + 324|0);
   $46 = HEAP32[$45>>2]|0;
   $47 = ($46|0)!=(25966);
   if ($47) {
    (__Z14SetTranslator2PKc(25529)|0);
    $48 = ((($8)) + 1|0);
    HEAP32[$12>>2] = $48;
    $49 = ((($8)) + 1|0);
    HEAP8[$49>>0] = 95;
    $50 = HEAP32[19150]|0;
    $51 = (__Z14LookupDictListP10TranslatorPPcS1_PjiP8WORD_TAB($50,$12,$9,$7,0,0)|0);
    $52 = ($51|0)==(0);
    if ($52) {
     $53 = ((($8)) + 2|0);
     HEAP32[$12>>2] = $53;
     $54 = HEAP32[19150]|0;
     (__Z14LookupDictListP10TranslatorPPcS1_PjiP8WORD_TAB($54,$12,$9,$7,0,0)|0);
    }
    $55 = HEAP8[$9>>0]|0;
    $56 = ($55<<24>>24)!=(0);
    if ($56) {
     $11 = 25529;
     break;
    } else {
     $57 = HEAP32[1124]|0;
     $58 = ((($57)) + 60|0);
     $59 = HEAP32[$58>>2]|0;
     __Z18SelectPhonemeTablei($59);
     break;
    }
   }
  }
 } while(0);
 $60 = HEAP8[$9>>0]|0;
 $61 = ($60<<24>>24)!=(0);
 if (!($61)) {
  $73 = $5;
  $74 = ($73|0)==(0);
  if (!($74)) {
   STACKTOP = sp;return (120033|0);
  }
  (_strcpy(120033,20864)|0);
  STACKTOP = sp;return (120033|0);
 }
 $62 = $11;
 $63 = ($62|0)!=(0|0);
 if ($63) {
  $64 = HEAP32[19150]|0;
  __Z13SetWordStressP10TranslatorPcPjii($64,$9,$7,-1,0);
  __Z14DecodePhonemesPKcPc($9,$10);
  $65 = $3;
  $66 = ((($65)) + 324|0);
  $67 = HEAP32[$66>>2]|0;
  $68 = (__Z13WordToString2j($67)|0);
  HEAP32[$vararg_buffer>>2] = 25529;
  $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr1>>2] = $10;
  $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
  HEAP32[$vararg_ptr2>>2] = $68;
  (_sprintf(120033,20837,$vararg_buffer)|0);
  $69 = HEAP32[1124]|0;
  $70 = ((($69)) + 60|0);
  $71 = HEAP32[$70>>2]|0;
  __Z18SelectPhonemeTablei($71);
  STACKTOP = sp;return (120033|0);
 } else {
  $72 = $3;
  __Z13SetWordStressP10TranslatorPcPjii($72,$9,$7,-1,0);
  __Z14DecodePhonemesPKcPc($9,$10);
  HEAP32[$vararg_buffer3>>2] = $10;
  (_sprintf(120033,20856,$vararg_buffer3)|0);
  STACKTOP = sp;return (120033|0);
 }
 return (0)|0;
}
function __ZL8IsRomanUj($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond3 = 0, $or$cond5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $2;
 $4 = ($3|0)==(73);
 $5 = $2;
 $6 = ($5|0)==(86);
 $or$cond = $4 | $6;
 $7 = $2;
 $8 = ($7|0)==(88);
 $or$cond3 = $or$cond | $8;
 $9 = $2;
 $10 = ($9|0)==(76);
 $or$cond5 = $or$cond3 | $10;
 if ($or$cond5) {
  $1 = 1;
  $11 = $1;
  STACKTOP = sp;return ($11|0);
 } else {
  $1 = 0;
  $11 = $1;
  STACKTOP = sp;return ($11|0);
 }
 return (0)|0;
}
function __ZL15LookupSoundiconi($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = 4;
 while(1) {
  $4 = $3;
  $5 = HEAP32[734]|0;
  $6 = ($4|0)<($5|0);
  if (!($6)) {
   label = 9;
   break;
  }
  $7 = $3;
  $8 = (75180 + ($7<<4)|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = $2;
  $11 = ($9|0)==($10|0);
  $12 = $3;
  if ($11) {
   break;
  }
  $21 = (($12) + 1)|0;
  $3 = $21;
 }
 if ((label|0) == 9) {
  $1 = -1;
  $22 = $1;
  STACKTOP = sp;return ($22|0);
 }
 $13 = (75180 + ($12<<4)|0);
 $14 = ((($13)) + 4|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = ($15|0)==(0);
 if ($16) {
  $17 = $3;
  $18 = (__ZL13LoadSoundFilePKci(0,$17)|0);
  $19 = ($18|0)!=(0);
  if ($19) {
   $1 = -1;
   $22 = $1;
   STACKTOP = sp;return ($22|0);
  }
 }
 $20 = $3;
 $1 = $20;
 $22 = $1;
 STACKTOP = sp;return ($22|0);
}
function __ZL13LoadSoundFilePKci($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0;
 var $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $vararg_buffer = 0, $vararg_buffer4 = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr3 = 0, $vararg_ptr7 = 0, $vararg_ptr8 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 864|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(864|0);
 $vararg_buffer4 = sp + 16|0;
 $vararg_buffer = sp;
 $9 = sp + 756|0;
 $10 = sp + 542|0;
 $13 = sp + 28|0;
 $14 = sp + 76|0;
 $3 = $0;
 $4 = $1;
 $15 = $3;
 $16 = ($15|0)==(0|0);
 if ($16) {
  $17 = $4;
  $18 = (75180 + ($17<<4)|0);
  $19 = ((($18)) + 12|0);
  $20 = HEAP32[$19>>2]|0;
  $3 = $20;
 }
 $21 = $3;
 $22 = ($21|0)==(0|0);
 if ($22) {
  $2 = 1;
  $93 = $2;
  STACKTOP = sp;return ($93|0);
 }
 $23 = $3;
 $24 = HEAP8[$23>>0]|0;
 $25 = $24 << 24 >> 24;
 $26 = ($25|0)!=(47);
 if ($26) {
  $27 = $3;
  HEAP32[$vararg_buffer>>2] = 119484;
  $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr1>>2] = 47;
  $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
  HEAP32[$vararg_ptr2>>2] = 47;
  $vararg_ptr3 = ((($vararg_buffer)) + 12|0);
  HEAP32[$vararg_ptr3>>2] = $27;
  (_sprintf($10,20918,$vararg_buffer)|0);
  $3 = $10;
 }
 $5 = 0;
 $28 = $3;
 $29 = (_fopen($28,22846)|0);
 $5 = $29;
 $30 = ($29|0)!=(0|0);
 do {
  if ($30) {
   $31 = $5;
   (_fseek($31,20,0)|0);
   $11 = 0;
   while(1) {
    $32 = $11;
    $33 = ($32|0)<(3);
    if (!($33)) {
     break;
    }
    $34 = $5;
    $35 = (__Z10Read4BytesP8_IO_FILE($34)|0);
    $36 = $11;
    $37 = (($13) + ($36<<2)|0);
    HEAP32[$37>>2] = $35;
    $38 = $11;
    $39 = (($38) + 1)|0;
    $11 = $39;
   }
   $40 = HEAP32[$13>>2]|0;
   $41 = ($40|0)!=(65537);
   if (!($41)) {
    $42 = ((($13)) + 4|0);
    $43 = HEAP32[$42>>2]|0;
    $44 = HEAP32[20211]|0;
    $45 = ($43|0)!=($44|0);
    if (!($45)) {
     $46 = ((($13)) + 8|0);
     $47 = HEAP32[$46>>2]|0;
     $48 = HEAP32[20211]|0;
     $49 = $48<<1;
     $50 = ($47|0)!=($49|0);
     if (!($50)) {
      break;
     }
    }
   }
   $51 = $5;
   (_fclose($51)|0);
   $5 = 0;
   (_strcpy($9,20937)|0);
   $52 = (_mkstemp($9)|0);
   $12 = $52;
   $53 = ($52|0)>=(0);
   if ($53) {
    $54 = $12;
    (_close($54)|0);
    $55 = $3;
    $56 = HEAP32[20211]|0;
    HEAP32[$vararg_buffer4>>2] = $55;
    $vararg_ptr7 = ((($vararg_buffer4)) + 4|0);
    HEAP32[$vararg_ptr7>>2] = $56;
    $vararg_ptr8 = ((($vararg_buffer4)) + 8|0);
    HEAP32[$vararg_ptr8>>2] = $9;
    (_sprintf($14,20955,$vararg_buffer4)|0);
    $57 = (_system(($14|0))|0);
    $58 = ($57|0)==(0);
    if ($58) {
     $3 = $9;
    }
   }
  }
 } while(0);
 $59 = $5;
 $60 = ($59|0)==(0|0);
 if ($60) {
  $61 = $3;
  $62 = (_fopen($61,22846)|0);
  $5 = $62;
  $63 = $5;
  $64 = ($63|0)==(0|0);
  if ($64) {
   $2 = 3;
   $93 = $2;
   STACKTOP = sp;return ($93|0);
  }
 }
 $65 = $3;
 $66 = (__Z13GetFileLengthPKc($65)|0);
 $8 = $66;
 $67 = $5;
 (_fseek($67,0,0)|0);
 $68 = $4;
 $69 = (75180 + ($68<<4)|0);
 $70 = ((($69)) + 8|0);
 $71 = HEAP32[$70>>2]|0;
 $72 = $8;
 $73 = (_realloc($71,$72)|0);
 $6 = $73;
 $74 = ($73|0)==(0|0);
 if ($74) {
  $75 = $5;
  (_fclose($75)|0);
  $2 = 4;
  $93 = $2;
  STACKTOP = sp;return ($93|0);
 } else {
  $76 = $6;
  $77 = $8;
  $78 = $5;
  $79 = (_fread($76,1,$77,$78)|0);
  $8 = $79;
  $80 = $5;
  (_fclose($80)|0);
  (_remove($9)|0);
  $81 = $6;
  $82 = ((($81)) + 40|0);
  $7 = $82;
  $83 = $7;
  $84 = HEAP32[$83>>2]|0;
  $85 = (($84|0) / 2)&-1;
  $86 = $4;
  $87 = (75180 + ($86<<4)|0);
  $88 = ((($87)) + 4|0);
  HEAP32[$88>>2] = $85;
  $89 = $6;
  $90 = $4;
  $91 = (75180 + ($90<<4)|0);
  $92 = ((($91)) + 8|0);
  HEAP32[$92>>2] = $89;
  $2 = 0;
  $93 = $2;
  STACKTOP = sp;return ($93|0);
 }
 return (0)|0;
}
function __ZL14PushParamStacki($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $4 = HEAP32[11232]|0;
 $5 = (41928 + ($4<<6)|0);
 $3 = $5;
 $6 = HEAP32[11232]|0;
 $7 = ($6|0)<(19);
 if ($7) {
  $8 = HEAP32[11232]|0;
  $9 = (($8) + 1)|0;
  HEAP32[11232] = $9;
 }
 $10 = $1;
 $11 = $3;
 HEAP32[$11>>2] = $10;
 $2 = 0;
 while(1) {
  $12 = $2;
  $13 = ($12|0)<(15);
  if (!($13)) {
   break;
  }
  $14 = $2;
  $15 = $3;
  $16 = ((($15)) + 4|0);
  $17 = (($16) + ($14<<2)|0);
  HEAP32[$17>>2] = -1;
  $18 = $2;
  $19 = (($18) + 1)|0;
  $2 = $19;
 }
 $20 = $3;
 STACKTOP = sp;return ($20|0);
}
function __ZL16GetSsmlAttributePwPKc($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 while(1) {
  $6 = $3;
  $7 = HEAP32[$6>>2]|0;
  $8 = ($7|0)!=(0);
  if (!($8)) {
   label = 19;
   break;
  }
  $9 = $3;
  $10 = ((($9)) + -4|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = (_iswspace($11)|0);
  $13 = ($12|0)!=(0);
  if ($13) {
   $5 = 0;
   while(1) {
    $14 = $3;
    $15 = HEAP32[$14>>2]|0;
    $16 = $5;
    $17 = $4;
    $18 = (($17) + ($16)|0);
    $19 = HEAP8[$18>>0]|0;
    $20 = $19 << 24 >> 24;
    $21 = ($15|0)==($20|0);
    if (!($21)) {
     break;
    }
    $22 = $3;
    $23 = ((($22)) + 4|0);
    $3 = $23;
    $24 = $5;
    $25 = (($24) + 1)|0;
    $5 = $25;
   }
   $26 = $5;
   $27 = $4;
   $28 = (($27) + ($26)|0);
   $29 = HEAP8[$28>>0]|0;
   $30 = $29 << 24 >> 24;
   $31 = ($30|0)==(0);
   if ($31) {
    break;
   }
  }
  $55 = $3;
  $56 = ((($55)) + 4|0);
  $3 = $56;
 }
 if ((label|0) == 19) {
  $2 = 0;
  $57 = $2;
  STACKTOP = sp;return ($57|0);
 }
 while(1) {
  $32 = $3;
  $33 = HEAP32[$32>>2]|0;
  $34 = (_iswspace($33)|0);
  $35 = ($34|0)!=(0);
  $36 = $3;
  if (!($35)) {
   break;
  }
  $37 = ((($36)) + 4|0);
  $3 = $37;
 }
 $38 = HEAP32[$36>>2]|0;
 $39 = ($38|0)==(61);
 if ($39) {
  $40 = $3;
  $41 = ((($40)) + 4|0);
  $3 = $41;
 }
 while(1) {
  $42 = $3;
  $43 = HEAP32[$42>>2]|0;
  $44 = (_iswspace($43)|0);
  $45 = ($44|0)!=(0);
  $46 = $3;
  if (!($45)) {
   break;
  }
  $47 = ((($46)) + 4|0);
  $3 = $47;
 }
 $48 = HEAP32[$46>>2]|0;
 $49 = ($48|0)==(34);
 if (!($49)) {
  $50 = $3;
  $51 = HEAP32[$50>>2]|0;
  $52 = ($51|0)==(39);
  if (!($52)) {
   $2 = 44932;
   $57 = $2;
   STACKTOP = sp;return ($57|0);
  }
 }
 $53 = $3;
 $54 = ((($53)) + 4|0);
 $2 = $54;
 $57 = $2;
 STACKTOP = sp;return ($57|0);
}
function __ZL7attrcmpPKwPKc($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $6 = $3;
 $7 = ($6|0)==(0|0);
 if ($7) {
  $2 = 1;
  $41 = $2;
  STACKTOP = sp;return ($41|0);
 }
 $5 = 0;
 while(1) {
  $8 = $5;
  $9 = $3;
  $10 = (($9) + ($8<<2)|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = $5;
  $13 = $4;
  $14 = (($13) + ($12)|0);
  $15 = HEAP8[$14>>0]|0;
  $16 = $15 << 24 >> 24;
  $17 = ($11|0)==($16|0);
  if (!($17)) {
   break;
  }
  $18 = $5;
  $19 = $3;
  $20 = (($19) + ($18<<2)|0);
  $21 = HEAP32[$20>>2]|0;
  $22 = ($21|0)!=(0);
  if (!($22)) {
   break;
  }
  $23 = $5;
  $24 = (($23) + 1)|0;
  $5 = $24;
 }
 $25 = $5;
 $26 = $3;
 $27 = (($26) + ($25<<2)|0);
 $28 = HEAP32[$27>>2]|0;
 $29 = ($28|0)==(34);
 if ($29) {
  label = 9;
 } else {
  $30 = $5;
  $31 = $3;
  $32 = (($31) + ($30<<2)|0);
  $33 = HEAP32[$32>>2]|0;
  $34 = ($33|0)==(39);
  if ($34) {
   label = 9;
  }
 }
 if ((label|0) == 9) {
  $35 = $5;
  $36 = $4;
  $37 = (($36) + ($35)|0);
  $38 = HEAP8[$37>>0]|0;
  $39 = $38 << 24 >> 24;
  $40 = ($39|0)==(0);
  if ($40) {
   $2 = 0;
   $41 = $2;
   STACKTOP = sp;return ($41|0);
  }
 }
 $2 = 1;
 $41 = $2;
 STACKTOP = sp;return ($41|0);
}
function __ZL10attrlookupPKwPK8MNEM_TAB($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $5 = 0;
 while(1) {
  $6 = $5;
  $7 = $4;
  $8 = (($7) + ($6<<3)|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = ($9|0)!=(0|0);
  if (!($10)) {
   label = 6;
   break;
  }
  $11 = $3;
  $12 = $5;
  $13 = $4;
  $14 = (($13) + ($12<<3)|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = (__ZL7attrcmpPKwPKc($11,$15)|0);
  $17 = ($16|0)==(0);
  $18 = $5;
  if ($17) {
   label = 4;
   break;
  }
  $23 = (($18) + 1)|0;
  $5 = $23;
 }
 if ((label|0) == 4) {
  $19 = $4;
  $20 = (($19) + ($18<<3)|0);
  $21 = ((($20)) + 4|0);
  $22 = HEAP32[$21>>2]|0;
  $2 = $22;
  $29 = $2;
  STACKTOP = sp;return ($29|0);
 }
 else if ((label|0) == 6) {
  $24 = $5;
  $25 = $4;
  $26 = (($25) + ($24<<3)|0);
  $27 = ((($26)) + 4|0);
  $28 = HEAP32[$27>>2]|0;
  $2 = $28;
  $29 = $2;
  STACKTOP = sp;return ($29|0);
 }
 return (0)|0;
}
function __ZL17ProcessParamStackPcPi($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(112|0);
 $vararg_buffer = sp;
 $7 = sp + 92|0;
 $8 = sp + 12|0;
 $2 = $0;
 $3 = $1;
 $4 = 0;
 while(1) {
  $9 = $4;
  $10 = ($9|0)<(15);
  if (!($10)) {
   break;
  }
  $11 = $4;
  $12 = (($8) + ($11<<2)|0);
  HEAP32[$12>>2] = -1;
  $13 = $4;
  $14 = (($13) + 1)|0;
  $4 = $14;
 }
 $5 = 0;
 while(1) {
  $15 = $5;
  $16 = HEAP32[11232]|0;
  $17 = ($15|0)<($16|0);
  $4 = 0;
  if (!($17)) {
   break;
  }
  while(1) {
   $18 = $4;
   $19 = ($18|0)<(15);
   if (!($19)) {
    break;
   }
   $20 = $4;
   $21 = $5;
   $22 = (41928 + ($21<<6)|0);
   $23 = ((($22)) + 4|0);
   $24 = (($23) + ($20<<2)|0);
   $25 = HEAP32[$24>>2]|0;
   $26 = ($25|0)>=(0);
   if ($26) {
    $27 = $4;
    $28 = $5;
    $29 = (41928 + ($28<<6)|0);
    $30 = ((($29)) + 4|0);
    $31 = (($30) + ($27<<2)|0);
    $32 = HEAP32[$31>>2]|0;
    $33 = $4;
    $34 = (($8) + ($33<<2)|0);
    HEAP32[$34>>2] = $32;
   }
   $35 = $4;
   $36 = (($35) + 1)|0;
   $4 = $36;
  }
  $37 = $5;
  $38 = (($37) + 1)|0;
  $5 = $38;
 }
 while(1) {
  $39 = $4;
  $40 = ($39|0)<(15);
  if (!($40)) {
   break;
  }
  $41 = $4;
  $42 = (($8) + ($41<<2)|0);
  $43 = HEAP32[$42>>2]|0;
  $6 = $43;
  $44 = $4;
  $45 = (44860 + ($44<<2)|0);
  $46 = HEAP32[$45>>2]|0;
  $47 = ($43|0)!=($46|0);
  if ($47) {
   HEAP8[$7>>0] = 0;
   $48 = $4;
   switch ($48|0) {
   case 5:  {
    $49 = $6;
    $50 = (($49) - 1)|0;
    HEAP32[19159] = $50;
    break;
   }
   case 6:  {
    $51 = $6;
    HEAP32[19158] = $51;
    break;
   }
   case 12: case 4: case 3: case 2: case 1:  {
    $52 = $6;
    $53 = $4;
    $54 = (21437 + ($53)|0);
    $55 = HEAP8[$54>>0]|0;
    $56 = $55 << 24 >> 24;
    HEAP32[$vararg_buffer>>2] = 1;
    $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
    HEAP32[$vararg_ptr1>>2] = $52;
    $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
    HEAP32[$vararg_ptr2>>2] = $56;
    (_sprintf($7,21452,$vararg_buffer)|0);
    break;
   }
   default: {
   }
   }
   $57 = $4;
   $58 = (($8) + ($57<<2)|0);
   $59 = HEAP32[$58>>2]|0;
   $60 = $4;
   $61 = (44860 + ($60<<2)|0);
   HEAP32[$61>>2] = $59;
   $62 = $3;
   $63 = HEAP32[$62>>2]|0;
   $64 = $2;
   $65 = (($64) + ($63)|0);
   (_strcpy($65,$7)|0);
   $66 = (_strlen($7)|0);
   $67 = $3;
   $68 = HEAP32[$67>>2]|0;
   $69 = (($68) + ($66))|0;
   HEAP32[$67>>2] = $69;
  }
  $70 = $4;
  $71 = (($70) + 1)|0;
  $4 = $71;
 }
 STACKTOP = sp;return;
}
function __ZL19SetProsodyParameteriPwP11PARAM_STACK($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $6 = sp + 4|0;
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $8 = $4;
 $9 = $3;
 $10 = (2332 + ($9<<2)|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = (__ZL10attrlookupPKwPK8MNEM_TAB($8,$11)|0);
 HEAP32[$6>>2] = $12;
 $13 = ($12|0)>=(0);
 $14 = $3;
 if ($13) {
  $15 = ((41932) + ($14<<2)|0);
  $16 = HEAP32[$15>>2]|0;
  $17 = HEAP32[$6>>2]|0;
  $18 = Math_imul($16, $17)|0;
  $19 = (($18|0) / 100)&-1;
  $20 = $3;
  $21 = $5;
  $22 = ((($21)) + 4|0);
  $23 = (($22) + ($20<<2)|0);
  HEAP32[$23>>2] = $19;
  STACKTOP = sp;return;
 }
 $24 = $4;
 $25 = (__ZL18attr_prosody_valueiPKwPi($14,$24,$6)|0);
 $7 = $25;
 $26 = $7;
 $27 = ($26|0)==(0);
 if ($27) {
  $28 = HEAP32[$6>>2]|0;
  $29 = $3;
  $30 = $5;
  $31 = ((($30)) + 4|0);
  $32 = (($31) + ($29<<2)|0);
  HEAP32[$32>>2] = $28;
  STACKTOP = sp;return;
 }
 $33 = $7;
 $34 = ($33|0)==(2);
 $35 = $3;
 $36 = (44860 + ($35<<2)|0);
 $37 = HEAP32[$36>>2]|0;
 $38 = HEAP32[$6>>2]|0;
 if ($34) {
  $39 = Math_imul($37, $38)|0;
  $40 = (($39|0) / 100)&-1;
  $41 = $3;
  $42 = $5;
  $43 = ((($42)) + 4|0);
  $44 = (($43) + ($41<<2)|0);
  HEAP32[$44>>2] = $40;
  STACKTOP = sp;return;
 } else {
  $45 = $7;
  $46 = Math_imul($38, $45)|0;
  $47 = (($37) + ($46))|0;
  $48 = $3;
  $49 = $5;
  $50 = ((($49)) + 4|0);
  $51 = (($50) + ($48<<2)|0);
  HEAP32[$51>>2] = $47;
  STACKTOP = sp;return;
 }
}
function __ZL13PopParamStackiPcPi($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $7 = 0;
 $8 = $3;
 $9 = ($8|0)>=(32);
 if ($9) {
  $10 = $3;
  $11 = (($10) - 32)|0;
  $3 = $11;
 }
 $6 = 0;
 while(1) {
  $12 = $6;
  $13 = HEAP32[11232]|0;
  $14 = ($12|0)<($13|0);
  if (!($14)) {
   break;
  }
  $15 = $6;
  $16 = (41928 + ($15<<6)|0);
  $17 = HEAP32[$16>>2]|0;
  $18 = $3;
  $19 = ($17|0)==($18|0);
  if ($19) {
   $20 = $6;
   $7 = $20;
  }
  $21 = $6;
  $22 = (($21) + 1)|0;
  $6 = $22;
 }
 $23 = $7;
 $24 = ($23|0)>(0);
 if (!($24)) {
  $26 = $4;
  $27 = $5;
  __ZL17ProcessParamStackPcPi($26,$27);
  STACKTOP = sp;return;
 }
 $25 = $7;
 HEAP32[11232] = $25;
 $26 = $4;
 $27 = $5;
 __ZL17ProcessParamStackPcPi($26,$27);
 STACKTOP = sp;return;
}
function __ZL10attrnumberPKwii($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = 0;
 $8 = $4;
 $9 = ($8|0)==(0|0);
 if (!($9)) {
  $10 = $4;
  $11 = HEAP32[$10>>2]|0;
  $12 = (__Z9IsDigit09j($11)|0);
  $13 = ($12|0)!=(0);
  if ($13) {
   while(1) {
    $15 = $4;
    $16 = HEAP32[$15>>2]|0;
    $17 = (__Z9IsDigit09j($16)|0);
    $18 = ($17|0)!=(0);
    if (!($18)) {
     break;
    }
    $19 = $7;
    $20 = ($19*10)|0;
    $21 = $4;
    $22 = ((($21)) + 4|0);
    $4 = $22;
    $23 = HEAP32[$21>>2]|0;
    $24 = (($20) + ($23))|0;
    $25 = (($24) - 48)|0;
    $7 = $25;
   }
   $26 = $6;
   $27 = ($26|0)==(1);
   if ($27) {
    $28 = $4;
    $29 = HEAP32[$28>>2]|0;
    $30 = (_towlower($29)|0);
    $31 = ($30|0)==(115);
    if ($31) {
     $32 = $7;
     $33 = ($32*1000)|0;
     $7 = $33;
    }
   }
   $34 = $7;
   $3 = $34;
   $35 = $3;
   STACKTOP = sp;return ($35|0);
  }
 }
 $14 = $5;
 $3 = $14;
 $35 = $3;
 STACKTOP = sp;return ($35|0);
}
function __ZL14ReplaceKeyNamePciPi($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $10 = $5;
 $11 = $4;
 $12 = (($11) + ($10)|0);
 $9 = $12;
 $13 = $9;
 $14 = (__Z10LookupMnemP8MNEM_TABPKc(2292,$13)|0);
 $8 = $14;
 $15 = ($14|0)!=(0);
 if ($15) {
  $16 = $8;
  $17 = $9;
  $18 = (__Z8utf8_outjPc($16,$17)|0);
  $7 = $18;
  $19 = $5;
  $20 = $7;
  $21 = (($19) + ($20))|0;
  $22 = $6;
  HEAP32[$22>>2] = $21;
  $23 = $8;
  $3 = $23;
  $24 = $3;
  STACKTOP = sp;return ($24|0);
 } else {
  $3 = 0;
  $24 = $3;
  STACKTOP = sp;return ($24|0);
 }
 return (0)|0;
}
function __ZL13attrcopy_utf8PcPKwi($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $7 = 0;
 $9 = 0;
 $10 = $4;
 $11 = ($10|0)!=(0|0);
 L1: do {
  if ($11) {
   while(1) {
    $12 = $7;
    $13 = $5;
    $14 = (($13) - 4)|0;
    $15 = ($12|0)<($14|0);
    if (!($15)) {
     break L1;
    }
    $16 = $4;
    $17 = ((($16)) + 4|0);
    $4 = $17;
    $18 = HEAP32[$16>>2]|0;
    $6 = $18;
    $19 = ($18|0)!=(0);
    if (!($19)) {
     break L1;
    }
    $20 = $6;
    $21 = ($20|0)==(34);
    $22 = $9;
    $23 = ($22|0)!=(92);
    $or$cond = $21 & $23;
    if ($or$cond) {
     break L1;
    }
    $24 = $6;
    $25 = $7;
    $26 = $3;
    $27 = (($26) + ($25)|0);
    $28 = (__Z8utf8_outjPc($24,$27)|0);
    $8 = $28;
    $29 = $8;
    $30 = $7;
    $31 = (($30) + ($29))|0;
    $7 = $31;
    $32 = $6;
    $9 = $32;
   }
  }
 } while(0);
 $33 = $7;
 $34 = $3;
 $35 = (($34) + ($33)|0);
 HEAP8[$35>>0] = 0;
 $36 = $7;
 STACKTOP = sp;return ($36|0);
}
function __ZL14LoadSoundFile2PKc($0) {
 $0 = $0|0;
 var $$ = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = 0;
 while(1) {
  $4 = $3;
  $5 = HEAP32[734]|0;
  $6 = ($4|0)<($5|0);
  if (!($6)) {
   break;
  }
  $7 = $3;
  $8 = (75180 + ($7<<4)|0);
  $9 = ((($8)) + 12|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = ($10|0)!=(0|0);
  if ($11) {
   $12 = $2;
   $13 = $3;
   $14 = (75180 + ($13<<4)|0);
   $15 = ((($14)) + 12|0);
   $16 = HEAP32[$15>>2]|0;
   $17 = (_strcmp($12,$16)|0);
   $18 = ($17|0)==(0);
   if ($18) {
    label = 5;
    break;
   }
  }
  $20 = $3;
  $21 = (($20) + 1)|0;
  $3 = $21;
 }
 if ((label|0) == 5) {
  $19 = $3;
  $1 = $19;
  $47 = $1;
  STACKTOP = sp;return ($47|0);
 }
 $22 = HEAP32[572]|0;
 $23 = (($22) + 1)|0;
 HEAP32[572] = $23;
 $24 = HEAP32[572]|0;
 $25 = ($24|0)>=(4);
 $$ = $25 ? 0 : $23;
 HEAP32[572] = $$;
 $26 = $2;
 $27 = HEAP32[572]|0;
 $28 = (__ZL13LoadSoundFilePKci($26,$27)|0);
 $29 = ($28|0)!=(0);
 if ($29) {
  $1 = -1;
  $47 = $1;
  STACKTOP = sp;return ($47|0);
 } else {
  $30 = $3;
  $31 = (75180 + ($30<<4)|0);
  $32 = ((($31)) + 12|0);
  $33 = HEAP32[$32>>2]|0;
  $34 = $2;
  $35 = (_strlen($34)|0);
  $36 = (($35) + 1)|0;
  $37 = (_realloc($33,$36)|0);
  $38 = HEAP32[572]|0;
  $39 = (75180 + ($38<<4)|0);
  $40 = ((($39)) + 12|0);
  HEAP32[$40>>2] = $37;
  $41 = HEAP32[572]|0;
  $42 = (75180 + ($41<<4)|0);
  $43 = ((($42)) + 12|0);
  $44 = HEAP32[$43>>2]|0;
  $45 = $2;
  (_strcpy($44,$45)|0);
  $46 = HEAP32[572]|0;
  $1 = $46;
  $47 = $1;
  STACKTOP = sp;return ($47|0);
 }
 return (0)|0;
}
function __ZL18GetVoiceAttributesPwi($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $3 = $0;
 $4 = $1;
 $13 = $4;
 $14 = $13 & 32;
 $15 = ($14|0)!=(0);
 if ($15) {
  $16 = HEAP32[11230]|0;
  $17 = ($16|0)>(1);
  if ($17) {
   $18 = HEAP32[11230]|0;
   $19 = (($18) + -1)|0;
   HEAP32[11230] = $19;
  }
 } else {
  $20 = $3;
  $21 = (__ZL16GetSsmlAttributePwPKc($20,21170)|0);
  $5 = $21;
  $22 = $4;
  $23 = ($22|0)!=(2);
  if ($23) {
   $7 = 0;
   $9 = 0;
   $8 = 0;
   $6 = 0;
  } else {
   $24 = $3;
   $25 = (__ZL16GetSsmlAttributePwPKc($24,25927)|0);
   $7 = $25;
   $26 = $3;
   $27 = (__ZL16GetSsmlAttributePwPKc($26,25542)|0);
   $9 = $27;
   $28 = $3;
   $29 = (__ZL16GetSsmlAttributePwPKc($28,21179)|0);
   $8 = $29;
   $30 = $3;
   $31 = (__ZL16GetSsmlAttributePwPKc($30,25941)|0);
   $6 = $31;
  }
  $32 = $4;
  $33 = ($32|0)!=(2);
  $34 = $5;
  $35 = ($34|0)==(0|0);
  $or$cond = $33 & $35;
  if ($or$cond) {
   $2 = 0;
   $68 = $2;
   STACKTOP = sp;return ($68|0);
  }
  $36 = HEAP32[11230]|0;
  $37 = (($36) + 1)|0;
  HEAP32[11230] = $37;
  $38 = (43288 + (($36*76)|0)|0);
  $12 = $38;
  $39 = $12;
  $40 = ((($39)) + 56|0);
  $41 = $5;
  (__ZL13attrcopy_utf8PcPKwi($40,$41,20)|0);
  $42 = $12;
  $43 = ((($42)) + 16|0);
  $44 = $7;
  (__ZL13attrcopy_utf8PcPKwi($43,$44,40)|0);
  $45 = $9;
  $46 = (__ZL10attrnumberPKwii($45,1,0)|0);
  $10 = $46;
  $47 = ($46|0)>(0);
  if ($47) {
   $48 = $10;
   $49 = (($48) + -1)|0;
   $10 = $49;
  }
  $50 = $10;
  $51 = $12;
  $52 = ((($51)) + 4|0);
  HEAP32[$52>>2] = $50;
  $53 = $8;
  $54 = (__ZL10attrnumberPKwii($53,0,0)|0);
  $55 = $12;
  $56 = ((($55)) + 12|0);
  HEAP32[$56>>2] = $54;
  $57 = $6;
  $58 = (__ZL10attrlookupPKwPK8MNEM_TAB($57,2256)|0);
  $59 = $12;
  $60 = ((($59)) + 8|0);
  HEAP32[$60>>2] = $58;
  $61 = $4;
  $62 = $12;
  HEAP32[$62>>2] = $61;
 }
 $63 = (__ZL14VoiceFromStackv()|0);
 $11 = $63;
 $64 = $11;
 $65 = (_strcmp($64,119993)|0);
 $66 = ($65|0)!=(0);
 if ($66) {
  $67 = $11;
  (_strcpy(119993,$67)|0);
  $2 = 131072;
  $68 = $2;
  STACKTOP = sp;return ($68|0);
 } else {
  $2 = 0;
  $68 = $2;
  STACKTOP = sp;return ($68|0);
 }
 return (0)|0;
}
function __ZL14VoiceFromStackv() {
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0;
 var $96 = 0, $97 = 0, $98 = 0, $99 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 208|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(208|0);
 $vararg_buffer = sp;
 $10 = sp + 32|0;
 $11 = sp + 8|0;
 $12 = sp + 160|0;
 $13 = sp + 80|0;
 (_strcpy(120093,(43304))|0);
 (_strcpy($12,(43344))|0);
 $14 = HEAP32[(43300)>>2]|0;
 $15 = $14&255;
 $16 = ((($11)) + 13|0);
 HEAP8[$16>>0] = $15;
 $17 = HEAP32[(43296)>>2]|0;
 $18 = $17&255;
 $19 = ((($11)) + 12|0);
 HEAP8[$19>>0] = $18;
 $20 = HEAP32[(43292)>>2]|0;
 $21 = $20&255;
 $22 = ((($11)) + 14|0);
 HEAP8[$22>>0] = $21;
 $23 = ((($11)) + 8|0);
 HEAP32[$23>>2] = 0;
 $5 = 0;
 while(1) {
  $24 = $5;
  $25 = HEAP32[11230]|0;
  $26 = ($24|0)<($25|0);
  if (!($26)) {
   break;
  }
  $27 = $5;
  $28 = (43288 + (($27*76)|0)|0);
  $7 = $28;
  $9 = 0;
  $29 = $7;
  $30 = ((($29)) + 16|0);
  $31 = HEAP8[$30>>0]|0;
  $32 = $31 << 24 >> 24;
  $33 = ($32|0)!=(0);
  if ($33) {
   $34 = $7;
   $35 = ((($34)) + 16|0);
   $36 = (__Z17SelectVoiceByNamePP12espeak_VOICEPKc(0,$35)|0);
   $37 = ($36|0)!=(0|0);
   if ($37) {
    $9 = 1;
    $38 = $7;
    $39 = ((($38)) + 16|0);
    (_strcpy(120093,$39)|0);
    HEAP8[$12>>0] = 0;
    $40 = ((($11)) + 12|0);
    HEAP8[$40>>0] = 0;
    $41 = ((($11)) + 13|0);
    HEAP8[$41>>0] = 0;
    $42 = ((($11)) + 14|0);
    HEAP8[$42>>0] = 0;
   }
  }
  $43 = $7;
  $44 = ((($43)) + 56|0);
  $45 = HEAP8[$44>>0]|0;
  $46 = $45 << 24 >> 24;
  $47 = ($46|0)!=(0);
  if ($47) {
   $48 = $7;
   $49 = ((($48)) + 56|0);
   (_strcpy($12,$49)|0);
   $50 = HEAP32[(44812)>>2]|0;
   $6 = $50;
   while(1) {
    $51 = $6;
    $52 = ((($51)) + 1|0);
    $6 = $52;
    $53 = HEAP8[$51>>0]|0;
    $54 = $53 << 24 >> 24;
    $55 = ($54|0)!=(0);
    if (!($55)) {
     break;
    }
    $56 = $6;
    $57 = (_strcmp($56,$12)|0);
    $58 = ($57|0)==(0);
    if ($58) {
     label = 10;
     break;
    }
    $61 = $6;
    $62 = (_strlen($61)|0);
    $63 = (($62) + 1)|0;
    $64 = $6;
    $65 = (($64) + ($63)|0);
    $6 = $65;
   }
   if ((label|0) == 10) {
    label = 0;
    $59 = HEAP32[(44812)>>2]|0;
    $60 = ((($59)) + 1|0);
    (_strcpy($12,$60)|0);
   }
   $66 = $9;
   $67 = ($66|0)==(0);
   if ($67) {
    HEAP8[120093] = 0;
   }
  }
  $68 = $7;
  $69 = ((($68)) + 8|0);
  $70 = HEAP32[$69>>2]|0;
  $71 = ($70|0)!=(0);
  if ($71) {
   $72 = $7;
   $73 = ((($72)) + 8|0);
   $74 = HEAP32[$73>>2]|0;
   $75 = $74&255;
   $76 = ((($11)) + 12|0);
   HEAP8[$76>>0] = $75;
  }
  $77 = $7;
  $78 = ((($77)) + 12|0);
  $79 = HEAP32[$78>>2]|0;
  $80 = ($79|0)!=(0);
  if ($80) {
   $81 = $7;
   $82 = ((($81)) + 12|0);
   $83 = HEAP32[$82>>2]|0;
   $84 = $83&255;
   $85 = ((($11)) + 13|0);
   HEAP8[$85>>0] = $84;
  }
  $86 = $7;
  $87 = ((($86)) + 4|0);
  $88 = HEAP32[$87>>2]|0;
  $89 = ($88|0)!=(0);
  if ($89) {
   $90 = $7;
   $91 = ((($90)) + 4|0);
   $92 = HEAP32[$91>>2]|0;
   $93 = $92&255;
   $94 = ((($11)) + 14|0);
   HEAP8[$94>>0] = $93;
  }
  $95 = $5;
  $96 = (($95) + 1)|0;
  $5 = $96;
 }
 HEAP32[$11>>2] = 120093;
 $97 = ((($11)) + 4|0);
 HEAP32[$97>>2] = $12;
 $98 = (__Z11SelectVoiceP12espeak_VOICEPi($11,$10)|0);
 $8 = $98;
 $99 = $8;
 $100 = ($99|0)==(0|0);
 if ($100) {
  $4 = 27818;
  $123 = $4;
  STACKTOP = sp;return ($123|0);
 }
 $101 = $8;
 $2 = $101;
 $3 = 43;
 $102 = $2;
 $103 = $3;
 $0 = $102;
 $1 = $103;
 $104 = $0;
 $105 = $1;
 $106 = (_strchr($104,$105)|0);
 $107 = ($106|0)==(0|0);
 do {
  if ($107) {
   $108 = ((($11)) + 12|0);
   $109 = HEAP8[$108>>0]|0;
   $110 = $109&255;
   $111 = ($110|0)==(0);
   if (!($111)) {
    $112 = ((($11)) + 12|0);
    $113 = HEAP8[$112>>0]|0;
    $114 = $113&255;
    $115 = HEAP8[(44820)>>0]|0;
    $116 = $115&255;
    $117 = ($114|0)==($116|0);
    if (!($117)) {
     break;
    }
   }
   $118 = HEAP8[119929]|0;
   $119 = $118 << 24 >> 24;
   $120 = ($119|0)!=(0);
   if ($120) {
    $121 = $8;
    HEAP32[$vararg_buffer>>2] = $121;
    $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
    HEAP32[$vararg_ptr1>>2] = 119929;
    (_sprintf($13,26618,$vararg_buffer)|0);
    __Z8strncpy0PcPKci(120093,$13,40);
    $4 = 120093;
    $123 = $4;
    STACKTOP = sp;return ($123|0);
   }
  }
 } while(0);
 $122 = $8;
 $4 = $122;
 $123 = $4;
 STACKTOP = sp;return ($123|0);
}
function __ZL18attr_prosody_valueiPKwPi($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0.0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0.0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0.0, $39 = 0.0, $4 = 0, $40 = 0.0, $41 = 0.0, $42 = 0.0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0.0, $53 = 0, $54 = 0.0, $55 = 0.0, $56 = 0.0, $57 = 0.0, $58 = 0.0, $59 = 0.0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0.0, $67 = 0.0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0.0, $72 = 0.0, $73 = 0.0, $74 = 0.0, $75 = 0, $76 = 0, $77 = 0, $78 = 0.0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $9 = 0.0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $8 = sp + 16|0;
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = 0;
 while(1) {
  $11 = $5;
  $12 = HEAP32[$11>>2]|0;
  $13 = (_iswspace($12)|0);
  $14 = ($13|0)!=(0);
  $15 = $5;
  if (!($14)) {
   break;
  }
  $16 = ((($15)) + 4|0);
  $5 = $16;
 }
 $17 = HEAP32[$15>>2]|0;
 $18 = ($17|0)==(43);
 if ($18) {
  $19 = $5;
  $20 = ((($19)) + 4|0);
  $5 = $20;
  $7 = 1;
 }
 $21 = $5;
 $22 = HEAP32[$21>>2]|0;
 $23 = ($22|0)==(45);
 if ($23) {
  $24 = $5;
  $25 = ((($24)) + 4|0);
  $5 = $25;
  $7 = -1;
 }
 $26 = $5;
 $27 = (+_wcstod($26,$8));
 $9 = $27;
 $28 = HEAP32[$8>>2]|0;
 $29 = $5;
 $30 = ($28|0)==($29|0);
 if ($30) {
  $31 = $6;
  HEAP32[$31>>2] = 100;
  $3 = 2;
  $82 = $3;
  STACKTOP = sp;return ($82|0);
 }
 $32 = HEAP32[$8>>2]|0;
 $33 = HEAP32[$32>>2]|0;
 $34 = ($33|0)==(37);
 if ($34) {
  $35 = $7;
  $36 = ($35|0)!=(0);
  if ($36) {
   $37 = $7;
   $38 = (+($37|0));
   $39 = $9;
   $40 = $38 * $39;
   $41 = 100.0 + $40;
   $9 = $41;
  }
  $42 = $9;
  $43 = (~~(($42)));
  $44 = $6;
  HEAP32[$44>>2] = $43;
  $3 = 2;
  $82 = $3;
  STACKTOP = sp;return ($82|0);
 }
 $45 = HEAP32[$8>>2]|0;
 $46 = HEAP32[$45>>2]|0;
 $47 = ($46|0)==(115);
 if ($47) {
  $48 = HEAP32[$8>>2]|0;
  $49 = ((($48)) + 4|0);
  $50 = HEAP32[$49>>2]|0;
  $51 = ($50|0)==(116);
  if ($51) {
   $52 = $9;
   $53 = $7;
   $54 = (+($53|0));
   $55 = $52 * $54;
   $56 = $55 / 12.0;
   $57 = (+Math_pow(2.0,(+$56)));
   $58 = $57 * 100.0;
   $10 = $58;
   $59 = $10;
   $60 = (~~(($59)));
   $61 = $6;
   HEAP32[$61>>2] = $60;
   $3 = 2;
   $82 = $3;
   STACKTOP = sp;return ($82|0);
  }
 }
 $62 = $4;
 $63 = ($62|0)==(1);
 if (!($63)) {
  $78 = $9;
  $79 = (~~(($78)));
  $80 = $6;
  HEAP32[$80>>2] = $79;
  $81 = $7;
  $3 = $81;
  $82 = $3;
  STACKTOP = sp;return ($82|0);
 }
 $64 = $7;
 $65 = ($64|0)==(0);
 if ($65) {
  $66 = $9;
  $67 = $66 * 100.0;
  $68 = (~~(($67)));
  $69 = $6;
  HEAP32[$69>>2] = $68;
 } else {
  $70 = $7;
  $71 = (+($70|0));
  $72 = $9;
  $73 = $71 * $72;
  $74 = $73 * 100.0;
  $75 = (~~(($74)));
  $76 = (100 + ($75))|0;
  $77 = $6;
  HEAP32[$77>>2] = $76;
 }
 $3 = 2;
 $82 = $3;
 STACKTOP = sp;return ($82|0);
}
function __ZL8GetC_getv() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = HEAP32[10818]|0;
 $4 = ($3|0)!=(0|0);
 if ($4) {
  $5 = HEAP32[10818]|0;
  $6 = (_fgetc($5)|0);
  $1 = $6;
  $7 = HEAP32[10818]|0;
  $8 = (_feof($7)|0);
  $9 = ($8|0)!=(0);
  if ($9) {
   $1 = 32;
  }
  $10 = HEAP32[19238]|0;
  $11 = ($10|0)==(4);
  if ($11) {
   $12 = HEAP32[10818]|0;
   $13 = (_fgetc($12)|0);
   $2 = $13;
   $14 = HEAP32[10818]|0;
   $15 = (_feof($14)|0);
   $16 = ($15|0)!=(0);
   if ($16) {
    $2 = 0;
   }
   $17 = $1;
   $18 = $2;
   $19 = $18 << 8;
   $20 = (($17) + ($19))|0;
   $1 = $20;
  }
  $21 = $1;
  $0 = $21;
  $56 = $0;
  STACKTOP = sp;return ($56|0);
 }
 $22 = HEAP32[19238]|0;
 $23 = ($22|0)==(3);
 if ($23) {
  $24 = HEAP32[10480]|0;
  $25 = HEAP32[$24>>2]|0;
  $26 = ($25|0)==(0);
  if ($26) {
   HEAP32[10819] = 1;
   $0 = 0;
   $56 = $0;
   STACKTOP = sp;return ($56|0);
  }
  $27 = HEAP32[10819]|0;
  $28 = ($27|0)!=(0);
  if (!($28)) {
   $29 = HEAP32[10480]|0;
   $30 = ((($29)) + 4|0);
   HEAP32[10480] = $30;
   $31 = HEAP32[$29>>2]|0;
   $0 = $31;
   $56 = $0;
   STACKTOP = sp;return ($56|0);
  }
 } else {
  $32 = HEAP32[10479]|0;
  $33 = HEAP8[$32>>0]|0;
  $34 = $33&255;
  $35 = ($34|0)==(0);
  if ($35) {
   HEAP32[10819] = 1;
   $0 = 0;
   $56 = $0;
   STACKTOP = sp;return ($56|0);
  }
  $36 = HEAP32[10819]|0;
  $37 = ($36|0)!=(0);
  if (!($37)) {
   $38 = HEAP32[19238]|0;
   $39 = ($38|0)==(4);
   $40 = HEAP32[10479]|0;
   if ($39) {
    $41 = HEAP8[$40>>0]|0;
    $42 = $41&255;
    $43 = HEAP32[10479]|0;
    $44 = ((($43)) + 1|0);
    $45 = HEAP8[$44>>0]|0;
    $46 = $45&255;
    $47 = $46 << 8;
    $48 = (($42) + ($47))|0;
    $1 = $48;
    $49 = HEAP32[10479]|0;
    $50 = ((($49)) + 2|0);
    HEAP32[10479] = $50;
    $51 = $1;
    $0 = $51;
    $56 = $0;
    STACKTOP = sp;return ($56|0);
   } else {
    $52 = ((($40)) + 1|0);
    HEAP32[10479] = $52;
    $53 = HEAP8[$40>>0]|0;
    $54 = $53&255;
    $55 = $54 & 255;
    $0 = $55;
    $56 = $0;
    STACKTOP = sp;return ($56|0);
   }
  }
 }
 $0 = 0;
 $56 = $0;
 STACKTOP = sp;return ($56|0);
}
function __ZL10GetC_ungeti($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = HEAP32[10818]|0;
 $3 = ($2|0)!=(0|0);
 if ($3) {
  $4 = $1;
  $5 = HEAP32[10818]|0;
  (_ungetc($4,$5)|0);
  STACKTOP = sp;return;
 } else {
  $6 = HEAP32[10479]|0;
  $7 = ((($6)) + -1|0);
  HEAP32[10479] = $7;
  $8 = $1;
  $9 = $8&255;
  $10 = HEAP32[10479]|0;
  HEAP8[$10>>0] = $9;
  HEAP32[10819] = 0;
  STACKTOP = sp;return;
 }
}
function __Z12InitNamedatav() {
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[10821] = 0;
 $0 = HEAP32[10478]|0;
 $1 = ($0|0)!=(0|0);
 if (!($1)) {
  return;
 }
 $2 = HEAP32[10478]|0;
 _free($2);
 HEAP32[10478] = 0;
 HEAP32[10820] = 0;
 return;
}
function __Z9InitText2v() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 HEAP32[10817] = 0;
 HEAP32[11210] = 0;
 HEAP32[11230] = 1;
 HEAP32[11232] = 1;
 HEAP32[10822] = 0;
 $0 = 0;
 while(1) {
  $1 = $0;
  $2 = ($1|0)<(15);
  if (!($2)) {
   break;
  }
  $3 = $0;
  $4 = ((41932) + ($3<<2)|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = $0;
  $7 = (44860 + ($6<<2)|0);
  HEAP32[$7>>2] = $5;
  $8 = $0;
  $9 = (($8) + 1)|0;
  $0 = $9;
 }
 $10 = HEAP32[(44880)>>2]|0;
 HEAP32[19159] = $10;
 $11 = HEAP32[(44884)>>2]|0;
 HEAP32[19158] = $11;
 HEAP8[119993] = 0;
 HEAP32[11213] = 0;
 HEAP32[11214] = 0;
 HEAP32[11208] = 0;
 HEAP32[10481] = -1;
 HEAP32[11212] = 0;
 HEAP32[543] = 0;
 STACKTOP = sp;return;
}
function __Z8SetSpeedi($0) {
 $0 = $0|0;
 var $$ = 0, $$$ = 0, $$$2 = 0, $$2 = 0, $$3 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0;
 var $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0;
 var $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0;
 var $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0;
 var $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0;
 var $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0.0, $6 = 0, $60 = 0, $61 = 0.0, $62 = 0.0, $63 = 0.0, $64 = 0.0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0.0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0;
 var $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $1 = $0;
 HEAP32[(75144)>>2] = 0;
 HEAP32[(75140)>>2] = 450;
 HEAP32[(75132)>>2] = 110;
 HEAP32[(75136)>>2] = 100;
 HEAP32[(75124)>>2] = 5;
 $8 = HEAP32[(80792)>>2]|0;
 $4 = $8;
 $9 = $1;
 $10 = ($9|0)==(2);
 if ($10) {
  $11 = HEAP32[(80816)>>2]|0;
  $4 = $11;
 }
 $12 = $4;
 $6 = $12;
 $13 = HEAP32[1124]|0;
 $14 = ((($13)) + 84|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = ($15|0)>(0);
 if ($16) {
  $17 = $4;
  $18 = HEAP32[1124]|0;
  $19 = ((($18)) + 84|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = Math_imul($17, $20)|0;
  $22 = (($21|0) / 100)&-1;
  $4 = $22;
 }
 $23 = $1;
 $24 = $23 & 2;
 $25 = ($24|0)!=(0);
 if ($25) {
  __Z12DoSonicSpeedi(1024);
 }
 $26 = $6;
 $27 = ($26|0)>(450);
 if (!($27)) {
  $28 = $6;
  $29 = HEAP32[(75148)>>2]|0;
  $30 = ($28|0)>($29|0);
  $31 = $4;
  $32 = ($31|0)>(350);
  $or$cond = $30 & $32;
  if (!($or$cond)) {
   $66 = $4;
   $67 = ($66|0)>(450);
   if ($67) {
    $4 = 450;
   }
   $68 = $4;
   $69 = ($68|0)>(360);
   if ($69) {
    $70 = $4;
    $71 = (($70) - 360)|0;
    $72 = (($71|0) / 8)&-1;
    HEAP32[(75144)>>2] = $72;
   }
   $73 = $4;
   $5 = $73;
   $74 = $4;
   $75 = ($74|0)>(359);
   $$ = $75 ? 359 : $73;
   $5 = $$;
   $76 = $4;
   $77 = ($76|0)<(80);
   $$$ = $77 ? 80 : $$;
   $5 = $$$;
   $78 = $5;
   $79 = (($78) - 80)|0;
   $80 = (21663 + ($79)|0);
   $81 = HEAP8[$80>>0]|0;
   $82 = $81&255;
   $2 = $82;
   $83 = $4;
   $84 = ($83|0)>=(380);
   $$2 = $84 ? 7 : $82;
   $2 = $$2;
   $85 = $4;
   $86 = ($85|0)>=(400);
   $$$2 = $86 ? 6 : $$2;
   $2 = $$$2;
   $87 = $1;
   $88 = $87 & 1;
   $89 = ($88|0)!=(0);
   if ($89) {
    $90 = $2;
    $91 = HEAP32[1124]|0;
    $92 = ((($91)) + 72|0);
    $93 = HEAP32[$92>>2]|0;
    $94 = Math_imul($90, $93)|0;
    $95 = (($94|0) / 256)&-1;
    HEAP32[646] = $95;
    $96 = $2;
    $97 = HEAP32[1124]|0;
    $98 = ((($97)) + 76|0);
    $99 = HEAP32[$98>>2]|0;
    $100 = Math_imul($96, $99)|0;
    $101 = (($100|0) / 256)&-1;
    HEAP32[647] = $101;
    $102 = $2;
    $103 = HEAP32[1124]|0;
    $104 = ((($103)) + 80|0);
    $105 = HEAP32[$104>>2]|0;
    $106 = Math_imul($102, $105)|0;
    $107 = (($106|0) / 256)&-1;
    HEAP32[648] = $107;
    $108 = $2;
    $109 = ($108|0)<=(7);
    if ($109) {
     $110 = $2;
     HEAP32[646] = $110;
     $111 = $2;
     $112 = (($111) - 1)|0;
     HEAP32[648] = $112;
     HEAP32[647] = $112;
    }
   }
   $113 = $1;
   $114 = $113 & 2;
   $115 = ($114|0)!=(0);
   if (!($115)) {
    STACKTOP = sp;return;
   }
   $116 = $4;
   $117 = ($116|0)>(350);
   $118 = $4;
   if ($117) {
    $119 = (($118) - 350)|0;
    $120 = (($119|0) / 3)&-1;
    $121 = (85 - ($120))|0;
    HEAP32[(75132)>>2] = $121;
    $122 = $4;
    $123 = (($122) - 350)|0;
    $124 = (($123|0) / 8)&-1;
    $125 = (60 - ($124))|0;
    HEAP32[(75136)>>2] = $125;
   } else {
    $126 = ($118|0)>(250);
    if ($126) {
     $127 = $4;
     $128 = (($127) - 250)|0;
     $129 = (($128|0) / 4)&-1;
     $130 = (110 - ($129))|0;
     HEAP32[(75132)>>2] = $130;
     $131 = $4;
     $132 = (($131) - 250)|0;
     $133 = (($132|0) / 2)&-1;
     $134 = (110 - ($133))|0;
     HEAP32[(75136)>>2] = $134;
    }
   }
   $135 = $2;
   $136 = HEAP32[1124]|0;
   $137 = ((($136)) + 72|0);
   $138 = HEAP32[$137>>2]|0;
   $139 = Math_imul($135, $138)|0;
   $140 = (($139|0) / 256)&-1;
   $3 = $140;
   $141 = $4;
   $142 = ($141|0)>=(170);
   $143 = $3;
   if ($142) {
    $144 = ($143*150)|0;
    $145 = (($144|0) / 128)&-1;
    $146 = (110 + ($145))|0;
    HEAP32[(75128)>>2] = $146;
   } else {
    $147 = $143<<7;
    $148 = (($147|0) / 130)&-1;
    $149 = (128 + ($148))|0;
    HEAP32[(75128)>>2] = $149;
   }
   $150 = $4;
   $151 = ($150|0)>=(350);
   if ($151) {
    $152 = $4;
    $153 = (($152) - 350)|0;
    $154 = (21943 + ($153)|0);
    $155 = HEAP8[$154>>0]|0;
    $156 = $155&255;
    HEAP32[(75128)>>2] = $156;
   }
   $157 = $4;
   $158 = ($157|0)>=(390);
   if ($158) {
    $159 = $4;
    $160 = (($159) - 400)|0;
    $161 = (($160|0) / 2)&-1;
    $162 = (450 - ($161))|0;
    HEAP32[(75140)>>2] = $162;
    $163 = $4;
    $164 = ($163|0)>(440);
    if ($164) {
     $165 = $4;
     $166 = (($165) - 440)|0;
     $167 = (420 - ($166))|0;
     HEAP32[(75140)>>2] = $167;
    }
   }
   $168 = HEAP32[(75140)>>2]|0;
   $169 = HEAP32[20212]|0;
   $170 = Math_imul($168, $169)|0;
   $171 = (($170|0) / 22050)&-1;
   HEAP32[(75140)>>2] = $171;
   $172 = $3;
   $173 = $172<<8;
   $174 = (($173|0) / 115)&-1;
   HEAP32[18779] = $174;
   HEAP32[(75120)>>2] = 0;
   $175 = $4;
   $176 = ($175|0)>(430);
   do {
    if ($176) {
     HEAP32[18779] = 12;
    } else {
     $177 = $4;
     $178 = ($177|0)>(400);
     if ($178) {
      HEAP32[18779] = 13;
      break;
     }
     $179 = $4;
     $180 = ($179|0)>(374);
     if ($180) {
      HEAP32[18779] = 14;
      break;
     }
     $181 = $4;
     $182 = ($181|0)>(350);
     if ($182) {
      $183 = $4;
      $184 = (($183) - 350)|0;
      $185 = (22044 + ($184)|0);
      $186 = HEAP8[$185>>0]|0;
      $187 = $186&255;
      HEAP32[18779] = $187;
     }
    }
   } while(0);
   $188 = HEAP32[(75120)>>2]|0;
   $189 = ($188|0)==(0);
   if (!($189)) {
    STACKTOP = sp;return;
   }
   $190 = HEAP32[18779]|0;
   HEAP32[(75120)>>2] = $190;
   $191 = ($190|0)<(16);
   $$3 = $191 ? 16 : $190;
   HEAP32[(75120)>>2] = $$3;
   STACKTOP = sp;return;
  }
 }
 $33 = $4;
 $5 = $33;
 $4 = 175;
 $2 = 73;
 $34 = $1;
 $35 = $34 & 1;
 $36 = ($35|0)!=(0);
 if ($36) {
  $37 = $2;
  $38 = HEAP32[1124]|0;
  $39 = ((($38)) + 72|0);
  $40 = HEAP32[$39>>2]|0;
  $41 = Math_imul($37, $40)|0;
  $42 = (($41|0) / 256)&-1;
  HEAP32[646] = $42;
  $43 = $2;
  $44 = HEAP32[1124]|0;
  $45 = ((($44)) + 76|0);
  $46 = HEAP32[$45>>2]|0;
  $47 = Math_imul($43, $46)|0;
  $48 = (($47|0) / 256)&-1;
  HEAP32[647] = $48;
  $49 = $2;
  $50 = HEAP32[1124]|0;
  $51 = ((($50)) + 80|0);
  $52 = HEAP32[$51>>2]|0;
  $53 = Math_imul($49, $52)|0;
  $54 = (($53|0) / 256)&-1;
  HEAP32[648] = $54;
 }
 $55 = $1;
 $56 = $55 & 2;
 $57 = ($56|0)!=(0);
 if (!($57)) {
  STACKTOP = sp;return;
 }
 $58 = $5;
 $59 = (+($58|0));
 $60 = $4;
 $61 = (+($60|0));
 $62 = $59 / $61;
 $7 = $62;
 $63 = $7;
 $64 = $63 * 1024.0;
 $65 = (~~(($64)));
 __Z12DoSonicSpeedi($65);
 HEAP32[18779] = 85;
 HEAP32[(75120)>>2] = 80;
 HEAP32[(75124)>>2] = 22;
 HEAP32[(75140)>>2] = 900;
 HEAP32[(75128)>>2] = 211;
 HEAP32[(75132)>>2] = 210;
 HEAP32[(75136)>>2] = 170;
 STACKTOP = sp;return;
}
function __Z12SetParameteriii($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $8 = $4;
 $6 = $8;
 $9 = $5;
 $10 = ($9|0)!=(0);
 $11 = $3;
 $12 = ($11|0)<(5);
 $or$cond = $10 & $12;
 if ($or$cond) {
  $13 = $3;
  $14 = (1404 + ($13<<2)|0);
  $15 = HEAP32[$14>>2]|0;
  $7 = $15;
  $16 = $7;
  $17 = $7;
  $18 = $4;
  $19 = Math_imul($17, $18)|0;
  $20 = (($19|0) / 100)&-1;
  $21 = (($16) + ($20))|0;
  $6 = $21;
 }
 $22 = $6;
 $23 = $3;
 $24 = ((41932) + ($23<<2)|0);
 HEAP32[$24>>2] = $22;
 $25 = $6;
 $26 = $3;
 $27 = (43208 + ($26<<2)|0);
 HEAP32[$27>>2] = $25;
 $28 = $3;
 switch ($28|0) {
 case 1:  {
  $29 = $6;
  HEAP32[(80792)>>2] = $29;
  $30 = $6;
  HEAP32[(80816)>>2] = $30;
  __Z8SetSpeedi(3);
  STACKTOP = sp;return;
  break;
 }
 case 2:  {
  $31 = $6;
  HEAP32[(80796)>>2] = $31;
  (__Z12GetAmplitudev()|0);
  STACKTOP = sp;return;
  break;
 }
 case 3:  {
  $32 = $6;
  $33 = ($32|0)>(99);
  if ($33) {
   $6 = 99;
  }
  $34 = $6;
  $35 = ($34|0)<(0);
  if ($35) {
   $6 = 0;
  }
  $36 = $6;
  HEAP32[(80788)>>2] = $36;
  STACKTOP = sp;return;
  break;
 }
 case 4:  {
  $37 = $6;
  $38 = ($37|0)>(99);
  if ($38) {
   $6 = 99;
  }
  $39 = $6;
  HEAP32[(80800)>>2] = $39;
  STACKTOP = sp;return;
  break;
 }
 case 13:  {
  $40 = $6;
  HEAP32[19239] = $40;
  STACKTOP = sp;return;
  break;
 }
 case 7:  {
  $41 = $6;
  HEAP32[19164] = $41;
  STACKTOP = sp;return;
  break;
 }
 case 9:  {
  $42 = $6;
  $43 = $42 & 255;
  $44 = ($43|0)!=(0);
  if ($44) {
   $45 = $6;
   $46 = $45 & 255;
   $47 = HEAP32[19149]|0;
   $48 = ((($47)) + 248|0);
   HEAP32[$48>>2] = $46;
  }
  $49 = $6;
  HEAP32[19153] = $49;
  STACKTOP = sp;return;
  break;
 }
 default: {
  STACKTOP = sp;return;
 }
 }
}
function __Z11CalcLengthsP10Translator($0) {
 $0 = $0|0;
 var $$ = 0, $$4 = 0, $$5 = 0, $$8 = 0, $$old = 0, $$old9 = 0, $1 = 0, $10 = 0, $100 = 0, $1000 = 0, $1001 = 0, $1002 = 0, $1003 = 0, $1004 = 0, $1005 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0;
 var $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0;
 var $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0;
 var $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0;
 var $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0;
 var $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0;
 var $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0;
 var $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0;
 var $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0;
 var $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0;
 var $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0;
 var $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0;
 var $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0;
 var $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0;
 var $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0;
 var $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0;
 var $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0;
 var $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0;
 var $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0;
 var $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0;
 var $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0;
 var $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0;
 var $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0;
 var $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0;
 var $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0;
 var $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0;
 var $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0;
 var $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0;
 var $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0;
 var $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0;
 var $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0;
 var $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0;
 var $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0;
 var $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0;
 var $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0;
 var $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0;
 var $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0;
 var $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0;
 var $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0, $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0, $788 = 0, $789 = 0, $79 = 0, $790 = 0;
 var $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0, $799 = 0, $8 = 0, $80 = 0, $800 = 0, $801 = 0, $802 = 0, $803 = 0, $804 = 0, $805 = 0, $806 = 0, $807 = 0, $808 = 0;
 var $809 = 0, $81 = 0, $810 = 0, $811 = 0, $812 = 0, $813 = 0, $814 = 0, $815 = 0, $816 = 0, $817 = 0, $818 = 0, $819 = 0, $82 = 0, $820 = 0, $821 = 0, $822 = 0, $823 = 0, $824 = 0, $825 = 0, $826 = 0;
 var $827 = 0, $828 = 0, $829 = 0, $83 = 0, $830 = 0, $831 = 0, $832 = 0, $833 = 0, $834 = 0, $835 = 0, $836 = 0, $837 = 0, $838 = 0, $839 = 0, $84 = 0, $840 = 0, $841 = 0, $842 = 0, $843 = 0, $844 = 0;
 var $845 = 0, $846 = 0, $847 = 0, $848 = 0, $849 = 0, $85 = 0, $850 = 0, $851 = 0, $852 = 0, $853 = 0, $854 = 0, $855 = 0, $856 = 0, $857 = 0, $858 = 0, $859 = 0, $86 = 0, $860 = 0, $861 = 0, $862 = 0;
 var $863 = 0, $864 = 0, $865 = 0, $866 = 0, $867 = 0, $868 = 0, $869 = 0, $87 = 0, $870 = 0, $871 = 0, $872 = 0, $873 = 0, $874 = 0, $875 = 0, $876 = 0, $877 = 0, $878 = 0, $879 = 0, $88 = 0, $880 = 0;
 var $881 = 0, $882 = 0, $883 = 0, $884 = 0, $885 = 0, $886 = 0, $887 = 0, $888 = 0, $889 = 0, $89 = 0, $890 = 0, $891 = 0, $892 = 0, $893 = 0, $894 = 0, $895 = 0, $896 = 0, $897 = 0, $898 = 0, $899 = 0;
 var $9 = 0, $90 = 0, $900 = 0, $901 = 0, $902 = 0, $903 = 0, $904 = 0, $905 = 0, $906 = 0, $907 = 0, $908 = 0, $909 = 0, $91 = 0, $910 = 0, $911 = 0, $912 = 0, $913 = 0, $914 = 0, $915 = 0, $916 = 0;
 var $917 = 0, $918 = 0, $919 = 0, $92 = 0, $920 = 0, $921 = 0, $922 = 0, $923 = 0, $924 = 0, $925 = 0, $926 = 0, $927 = 0, $928 = 0, $929 = 0, $93 = 0, $930 = 0, $931 = 0, $932 = 0, $933 = 0, $934 = 0;
 var $935 = 0, $936 = 0, $937 = 0, $938 = 0, $939 = 0, $94 = 0, $940 = 0, $941 = 0, $942 = 0, $943 = 0, $944 = 0, $945 = 0, $946 = 0, $947 = 0, $948 = 0, $949 = 0, $95 = 0, $950 = 0, $951 = 0, $952 = 0;
 var $953 = 0, $954 = 0, $955 = 0, $956 = 0, $957 = 0, $958 = 0, $959 = 0, $96 = 0, $960 = 0, $961 = 0, $962 = 0, $963 = 0, $964 = 0, $965 = 0, $966 = 0, $967 = 0, $968 = 0, $969 = 0, $97 = 0, $970 = 0;
 var $971 = 0, $972 = 0, $973 = 0, $974 = 0, $975 = 0, $976 = 0, $977 = 0, $978 = 0, $979 = 0, $98 = 0, $980 = 0, $981 = 0, $982 = 0, $983 = 0, $984 = 0, $985 = 0, $986 = 0, $987 = 0, $988 = 0, $989 = 0;
 var $99 = 0, $990 = 0, $991 = 0, $992 = 0, $993 = 0, $994 = 0, $995 = 0, $996 = 0, $997 = 0, $998 = 0, $999 = 0, $or$cond = 0, $or$cond10 = 0, $or$cond3 = 0, $or$cond7 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 272|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(272|0);
 $vararg_buffer = sp;
 $21 = sp + 180|0;
 $27 = sp + 8|0;
 $1 = $0;
 $12 = 0;
 $13 = 0;
 $14 = 0;
 HEAP32[$21>>2] = 0;
 $26 = 0;
 $2 = 1;
 while(1) {
  $28 = $2;
  $29 = HEAP32[12771]|0;
  $30 = ($28|0)<($29|0);
  if (!($30)) {
   break;
  }
  $31 = $2;
  $32 = (($31) - 1)|0;
  $33 = (51088 + (($32*24)|0)|0);
  $4 = $33;
  $34 = $2;
  $35 = (51088 + (($34*24)|0)|0);
  $8 = $35;
  $36 = $8;
  $37 = ((($36)) + 3|0);
  $38 = HEAP8[$37>>0]|0;
  $39 = $38&255;
  $40 = $39 & 7;
  $10 = $40;
  $41 = $8;
  $42 = ((($41)) + 3|0);
  $43 = HEAP8[$42>>0]|0;
  $44 = $43&255;
  $45 = $44 & 8;
  $24 = $45;
  $46 = $2;
  $47 = (($46) + 1)|0;
  $48 = (51088 + (($47*24)|0)|0);
  $5 = $48;
  $49 = $8;
  $50 = HEAP16[$49>>1]|0;
  $51 = $50&65535;
  $52 = $51 & 2;
  $53 = ($52|0)!=(0);
  if ($53) {
   __ZL11DoEmbedded2Pi($21);
  }
  $54 = $8;
  $55 = ((($54)) + 17|0);
  $56 = HEAP8[$55>>0]|0;
  $57 = $56&255;
  $11 = $57;
  $58 = $8;
  $59 = HEAP16[$58>>1]|0;
  $60 = $59&65535;
  $61 = $60 & 4;
  $62 = ($61|0)!=(0);
  $$ = $62 ? 2 : $57;
  $11 = $$;
  $63 = $11;
  L7: do {
   switch ($63|0) {
   case 0:  {
    $14 = 0;
    break;
   }
   case 4:  {
    $14 = 0;
    $64 = $4;
    $65 = ((($64)) + 17|0);
    $66 = HEAP8[$65>>0]|0;
    $67 = $66&255;
    $68 = ($67|0)==(6);
    do {
     if ($68) {
      $69 = $8;
      $70 = ((($69)) + 18|0);
      HEAP8[$70>>0] = 25;
     } else {
      $71 = HEAP32[11235]|0;
      $72 = ($71|0)>(0);
      $73 = $10;
      $74 = ($73|0)<(4);
      $or$cond = $72 | $74;
      $75 = $8;
      $76 = ((($75)) + 18|0);
      if ($or$cond) {
       HEAP8[$76>>0] = 48;
       break;
      } else {
       HEAP8[$76>>0] = 60;
       break;
      }
     }
    } while(0);
    $77 = $4;
    $78 = ((($77)) + 17|0);
    $79 = HEAP8[$78>>0]|0;
    $80 = $79&255;
    $81 = ($80|0)==(4);
    if ($81) {
     $82 = $8;
     $83 = ((($82)) + 18|0);
     HEAP8[$83>>0] = 60;
    }
    $84 = $1;
    $85 = HEAP32[$84>>2]|0;
    $86 = $85 & 16;
    $87 = ($86|0)!=(0);
    if ($87) {
     $88 = $8;
     $89 = ((($88)) + 21|0);
     $90 = HEAP8[$89>>0]|0;
     $91 = ($90<<24>>24)!=(0);
     if ($91) {
      $92 = $8;
      $93 = ((($92)) + 18|0);
      HEAP8[$93>>0] = 60;
     }
    }
    $94 = $8;
    $95 = ((($94)) + 8|0);
    $96 = HEAP32[$95>>2]|0;
    $97 = ((($96)) + 4|0);
    $98 = HEAP32[$97>>2]|0;
    $99 = $98 & 4194304;
    $100 = ($99|0)!=(0);
    if ($100) {
     $101 = $8;
     $102 = ((($101)) + 18|0);
     $103 = HEAP8[$102>>0]|0;
     $104 = $103&255;
     $105 = (($104) + 30)|0;
     $106 = $105&255;
     HEAP8[$102>>0] = $106;
    }
    $107 = $8;
    $108 = HEAP16[$107>>1]|0;
    $109 = $108&65535;
    $110 = $109 & 8;
    $111 = ($110|0)!=(0);
    if ($111) {
     $112 = $1;
     $113 = ((($112)) + 260|0);
     $114 = HEAP32[$113>>2]|0;
     $115 = $8;
     $116 = ((($115)) + 18|0);
     $117 = HEAP8[$116>>0]|0;
     $118 = $117&255;
     $119 = (($118) + ($114))|0;
     $120 = $119&255;
     HEAP8[$116>>0] = $120;
    }
    break;
   }
   case 6: case 7:  {
    $121 = $8;
    $122 = ((($121)) + 21|0);
    $123 = HEAP8[$122>>0]|0;
    $124 = ($123<<24>>24)!=(0);
    do {
     if ($124) {
      $125 = $4;
      $126 = ((($125)) + 17|0);
      $127 = HEAP8[$126>>0]|0;
      $128 = $127&255;
      $129 = ($128|0)==(2);
      if ($129) {
       $130 = $8;
       $131 = ((($130)) + 8|0);
       $132 = HEAP32[$131>>2]|0;
       $133 = ((($132)) + 4|0);
       $134 = HEAP32[$133>>2]|0;
       $135 = $134 & 16777216;
       $136 = ($135|0)!=(0);
       if ($136) {
        break;
       }
      }
      $137 = $8;
      $138 = ((($137)) + 18|0);
      HEAP8[$138>>0] = 15;
     }
    } while(0);
    $139 = $5;
    $140 = ((($139)) + 17|0);
    $141 = HEAP8[$140>>0]|0;
    $142 = $141&255;
    $143 = ($142|0)==(0);
    if ($143) {
     $144 = $4;
     $145 = ((($144)) + 17|0);
     $146 = HEAP8[$145>>0]|0;
     $147 = $146&255;
     $148 = ($147|0)==(8);
     if ($148) {
      $149 = $8;
      $150 = ((($149)) + 8|0);
      $151 = HEAP32[$150>>2]|0;
      $152 = ((($151)) + 4|0);
      $153 = HEAP32[$152>>2]|0;
      $154 = $153 & 8;
      $155 = ($154|0)!=(0);
      if (!($155)) {
       $156 = $8;
       $157 = ((($156)) + 18|0);
       HEAP8[$157>>0] = 25;
      }
     }
    }
    $158 = $4;
    $159 = ((($158)) + 8|0);
    $160 = HEAP32[$159>>2]|0;
    $161 = ((($160)) + 4|0);
    $162 = HEAP32[$161>>2]|0;
    $163 = $162 & 16384;
    $164 = ($163|0)!=(0);
    if ($164) {
     $165 = $8;
     $166 = ((($165)) + 18|0);
     HEAP8[$166>>0] = 30;
    }
    $167 = $1;
    $168 = HEAP32[$167>>2]|0;
    $169 = $168 & 16;
    $170 = ($169|0)!=(0);
    if ($170) {
     $171 = $8;
     $172 = ((($171)) + 21|0);
     $173 = HEAP8[$172>>0]|0;
     $174 = ($173<<24>>24)!=(0);
     if ($174) {
      $175 = $8;
      $176 = ((($175)) + 18|0);
      HEAP8[$176>>0] = 30;
     }
    }
    $177 = $8;
    $178 = ((($177)) + 8|0);
    $179 = HEAP32[$178>>2]|0;
    $180 = ((($179)) + 4|0);
    $181 = HEAP32[$180>>2]|0;
    $182 = $181 & 32;
    $183 = ($182|0)!=(0);
    do {
     if ($183) {
      $184 = $5;
      $185 = ((($184)) + 17|0);
      $186 = HEAP8[$185>>0]|0;
      $187 = $186&255;
      $188 = ($187|0)==(4);
      if ($188) {
       $189 = $5;
       $190 = ((($189)) + 21|0);
       $191 = HEAP8[$190>>0]|0;
       $192 = ($191<<24>>24)!=(0);
       if ($192) {
        label = 40;
       } else {
        $193 = $4;
        $194 = ((($193)) + 17|0);
        $195 = HEAP8[$194>>0]|0;
        $196 = $195&255;
        $197 = ($196|0)==(2);
        $198 = $8;
        $199 = ((($198)) + 12|0);
        if ($197) {
         HEAP32[$199>>2] = 200;
         break;
        } else {
         HEAP32[$199>>2] = 150;
         break;
        }
       }
      } else {
       label = 40;
      }
     } else {
      label = 40;
     }
    } while(0);
    if ((label|0) == 40) {
     label = 0;
     $200 = $8;
     $201 = ((($200)) + 12|0);
     HEAP32[$201>>2] = 256;
    }
    $202 = $11;
    $203 = ($202|0)==(7);
    if ($203) {
     $204 = $5;
     $205 = ((($204)) + 17|0);
     $206 = HEAP8[$205>>0]|0;
     $207 = $206&255;
     $208 = ($207|0)==(2);
     if ($208) {
      $13 = 1;
     }
     $209 = $4;
     $210 = ((($209)) + 17|0);
     $211 = HEAP8[$210>>0]|0;
     $212 = $211&255;
     $213 = ($212|0)==(2);
     if (!($213)) {
      $214 = $4;
      $215 = ((($214)) + 17|0);
      $216 = HEAP8[$215>>0]|0;
      $217 = $216&255;
      $218 = ($217|0)==(3);
      if (!($218)) {
       break L7;
      }
     }
     $219 = $4;
     $220 = ((($219)) + 12|0);
     $221 = HEAP32[$220>>2]|0;
     $222 = (255 + ($221))|0;
     $223 = (($222>>>0) / 2)&-1;
     $224 = $8;
     $225 = ((($224)) + 12|0);
     HEAP32[$225>>2] = $223;
    }
    break;
   }
   case 5:  {
    $226 = $4;
    $227 = ((($226)) + 17|0);
    $228 = HEAP8[$227>>0]|0;
    $229 = $228&255;
    $230 = ($229|0)==(7);
    if ($230) {
     label = 51;
    } else {
     $231 = $4;
     $232 = ((($231)) + 17|0);
     $233 = HEAP8[$232>>0]|0;
     $234 = $233&255;
     $235 = ($234|0)==(6);
     if ($235) {
      label = 51;
     } else {
      $236 = $4;
      $237 = ((($236)) + 8|0);
      $238 = HEAP32[$237>>2]|0;
      $239 = ((($238)) + 4|0);
      $240 = HEAP32[$239>>2]|0;
      $241 = $240 & 32;
      $242 = ($241|0)!=(0);
      if ($242) {
       label = 51;
      } else {
       $243 = $4;
       $244 = ((($243)) + 17|0);
       $245 = HEAP8[$244>>0]|0;
       $246 = $245&255;
       $247 = ($246|0)==(3);
       if ($247) {
        label = 51;
       }
      }
     }
    }
    if ((label|0) == 51) {
     label = 0;
     $248 = $8;
     $249 = ((($248)) + 18|0);
     HEAP8[$249>>0] = 30;
    }
    $250 = $5;
    $251 = ((($250)) + 17|0);
    $252 = HEAP8[$251>>0]|0;
    $253 = $252&255;
    $254 = ($253|0)==(2);
    if ($254) {
     label = 54;
    } else {
     $255 = $5;
     $256 = ((($255)) + 17|0);
     $257 = HEAP8[$256>>0]|0;
     $258 = $257&255;
     $259 = ($258|0)==(3);
     if ($259) {
      label = 54;
     }
    }
    do {
     if ((label|0) == 54) {
      label = 0;
      $260 = $5;
      $261 = ((($260)) + 17|0);
      $262 = HEAP8[$261>>0]|0;
      $263 = $262&255;
      $264 = ($263|0)==(2);
      if ($264) {
       label = 56;
      } else {
       $265 = $5;
       $266 = ((($265)) + 21|0);
       $267 = HEAP8[$266>>0]|0;
       $268 = ($267<<24>>24)!=(0);
       if (!($268)) {
        label = 56;
       }
      }
      if ((label|0) == 56) {
       label = 0;
       $13 = 1;
      }
      $269 = $8;
      $270 = ((($269)) + 18|0);
      HEAP8[$270>>0] = 40;
      $271 = $4;
      $272 = ((($271)) + 17|0);
      $273 = HEAP8[$272>>0]|0;
      $274 = $273&255;
      $275 = ($274|0)==(2);
      if ($275) {
       $276 = $8;
       $277 = ((($276)) + 18|0);
       HEAP8[$277>>0] = 0;
       break;
      }
      $278 = $4;
      $279 = ((($278)) + 17|0);
      $280 = HEAP8[$279>>0]|0;
      $281 = $280&255;
      $282 = ($281|0)==(0);
      if ($282) {
       $283 = $4;
       $284 = ((($283)) + 12|0);
       $285 = HEAP32[$284>>2]|0;
       $286 = $8;
       $287 = ((($286)) + 18|0);
       $288 = HEAP8[$287>>0]|0;
       $289 = $288&255;
       $290 = ($285>>>0)<($289>>>0);
       if ($290) {
        $291 = $4;
        $292 = ((($291)) + 12|0);
        $293 = HEAP32[$292>>2]|0;
        $294 = $8;
        $295 = ((($294)) + 18|0);
        $296 = HEAP8[$295>>0]|0;
        $297 = $296&255;
        $298 = (($297) - ($293))|0;
        $299 = $298&255;
        HEAP8[$295>>0] = $299;
        break;
       } else {
        $300 = $8;
        $301 = ((($300)) + 18|0);
        HEAP8[$301>>0] = 0;
        break;
       }
      }
      $302 = $8;
      $303 = ((($302)) + 21|0);
      $304 = HEAP8[$303>>0]|0;
      $305 = $304&255;
      $306 = ($305|0)==(0);
      if ($306) {
       $307 = $4;
       $308 = ((($307)) + 17|0);
       $309 = HEAP8[$308>>0]|0;
       $310 = $309&255;
       $311 = ($310|0)==(3);
       if ($311) {
        $312 = $8;
        $313 = ((($312)) + 18|0);
        HEAP8[$313>>0] = 20;
       }
       $314 = $4;
       $315 = ((($314)) + 17|0);
       $316 = HEAP8[$315>>0]|0;
       $317 = $316&255;
       $318 = ($317|0)==(8);
       if ($318) {
        $319 = $8;
        $320 = ((($319)) + 18|0);
        HEAP8[$320>>0] = 12;
       }
       $321 = $4;
       $322 = ((($321)) + 17|0);
       $323 = HEAP8[$322>>0]|0;
       $324 = $323&255;
       $325 = ($324|0)==(4);
       if ($325) {
        $326 = $4;
        $327 = ((($326)) + 8|0);
        $328 = HEAP32[$327>>2]|0;
        $329 = ((($328)) + 4|0);
        $330 = HEAP32[$329>>2]|0;
        $331 = $330 & 8;
        $332 = ($331|0)!=(0);
        if (!($332)) {
         $333 = $8;
         $334 = ((($333)) + 18|0);
         HEAP8[$334>>0] = 0;
        }
       }
      }
     }
    } while(0);
    $335 = $1;
    $336 = HEAP32[$335>>2]|0;
    $337 = $336 & 16;
    $338 = ($337|0)!=(0);
    if ($338) {
     $339 = $8;
     $340 = ((($339)) + 21|0);
     $341 = HEAP8[$340>>0]|0;
     $342 = ($341<<24>>24)!=(0);
     if ($342) {
      $343 = $8;
      $344 = ((($343)) + 18|0);
      $345 = HEAP8[$344>>0]|0;
      $346 = $345&255;
      $347 = ($346|0)<(20);
      if ($347) {
       $348 = $8;
       $349 = ((($348)) + 18|0);
       HEAP8[$349>>0] = 20;
      }
     }
    }
    break;
   }
   case 8: case 3:  {
    $350 = $1;
    $351 = ((($350)) + 408|0);
    $352 = HEAP8[$351>>0]|0;
    $353 = $8;
    $354 = ((($353)) + 20|0);
    HEAP8[$354>>0] = $352;
    $355 = $8;
    $356 = ((($355)) + 12|0);
    HEAP32[$356>>2] = 256;
    $22 = 0;
    $357 = $8;
    $358 = ((($357)) + 21|0);
    $359 = HEAP8[$358>>0]|0;
    $360 = ($359<<24>>24)!=(0);
    if ($360) {
     $361 = $4;
     $362 = ((($361)) + 17|0);
     $363 = HEAP8[$362>>0]|0;
     $364 = $363&255;
     $365 = ($364|0)==(3);
     if ($365) {
      $366 = $8;
      $367 = ((($366)) + 18|0);
      HEAP8[$367>>0] = 25;
     }
     $368 = $4;
     $369 = ((($368)) + 17|0);
     $370 = HEAP8[$369>>0]|0;
     $371 = $370&255;
     $372 = ($371|0)==(2);
     if ($372) {
      $373 = $8;
      $374 = ((($373)) + 8|0);
      $375 = HEAP32[$374>>2]|0;
      $376 = ((($375)) + 4|0);
      $377 = HEAP32[$376>>2]|0;
      $378 = $377 & 16777216;
      $379 = ($378|0)!=(0);
      if (!($379)) {
       $380 = $8;
       $381 = ((($380)) + 18|0);
       HEAP8[$381>>0] = 12;
      }
     }
    }
    $382 = $5;
    $383 = ((($382)) + 17|0);
    $384 = HEAP8[$383>>0]|0;
    $385 = $384&255;
    $386 = ($385|0)==(2);
    if ($386) {
     $12 = 1;
     break L7;
    }
    $387 = $14;
    $388 = $387&255;
    $389 = $8;
    $390 = ((($389)) + 23|0);
    HEAP8[$390>>0] = $388;
    $391 = $4;
    $392 = ((($391)) + 17|0);
    $393 = HEAP8[$392>>0]|0;
    $394 = $393&255;
    $395 = ($394|0)==(2);
    L115: do {
     if ($395) {
      label = 85;
     } else {
      $396 = $4;
      $397 = ((($396)) + 17|0);
      $398 = HEAP8[$397>>0]|0;
      $399 = $398&255;
      $400 = ($399|0)==(3);
      if ($400) {
       label = 85;
      } else {
       $438 = $2;
       $3 = $438;
       while(1) {
        $439 = $3;
        $440 = HEAP32[12771]|0;
        $441 = ($439|0)<($440|0);
        if (!($441)) {
         break L115;
        }
        $442 = $3;
        $443 = (51088 + (($442*24)|0)|0);
        $444 = ((($443)) + 17|0);
        $445 = HEAP8[$444>>0]|0;
        $446 = $445&255;
        $447 = ($446|0)==(2);
        $448 = $3;
        if ($447) {
         break;
        }
        $454 = (($448) + 1)|0;
        $3 = $454;
       }
       $449 = (51088 + (($448*24)|0)|0);
       $450 = ((($449)) + 23|0);
       $451 = HEAP8[$450>>0]|0;
       $452 = $8;
       $453 = ((($452)) + 23|0);
       HEAP8[$453>>0] = $451;
      }
     }
    } while(0);
    if ((label|0) == 85) {
     label = 0;
     $401 = $4;
     $402 = ((($401)) + 12|0);
     $403 = HEAP32[$402>>2]|0;
     $404 = $8;
     $405 = ((($404)) + 12|0);
     HEAP32[$405>>2] = $403;
     $406 = $8;
     $407 = ((($406)) + 17|0);
     $408 = HEAP8[$407>>0]|0;
     $409 = $408&255;
     $410 = ($409|0)==(3);
     if ($410) {
      $411 = HEAP32[646]|0;
      $412 = $8;
      $413 = ((($412)) + 12|0);
      HEAP32[$413>>2] = $411;
     }
     $414 = $5;
     $415 = ((($414)) + 17|0);
     $416 = HEAP8[$415>>0]|0;
     $417 = $416&255;
     $418 = ($417|0)==(5);
     if ($418) {
      $419 = $8;
      $420 = ((($419)) + 12|0);
      $421 = HEAP32[$420>>2]|0;
      $422 = ($421*160)|0;
      $423 = (($422>>>0) / 100)&-1;
      $424 = $8;
      $425 = ((($424)) + 12|0);
      HEAP32[$425>>2] = $423;
     }
     $426 = $5;
     $427 = ((($426)) + 17|0);
     $428 = HEAP8[$427>>0]|0;
     $429 = $428&255;
     $430 = ($429|0)==(7);
     if ($430) {
      $431 = $8;
      $432 = ((($431)) + 12|0);
      $433 = HEAP32[$432>>2]|0;
      $434 = ($433*120)|0;
      $435 = (($434>>>0) / 100)&-1;
      $436 = $8;
      $437 = ((($436)) + 12|0);
      HEAP32[$437>>2] = $435;
     }
    }
    $455 = $8;
    $456 = ((($455)) + 23|0);
    $457 = HEAP8[$456>>0]|0;
    $458 = $457&255;
    $459 = (($458) - 16)|0;
    $460 = $459&255;
    $461 = $8;
    $462 = ((($461)) + 22|0);
    HEAP8[$462>>0] = $460;
    $463 = $8;
    $464 = ((($463)) + 23|0);
    $465 = HEAP8[$464>>0]|0;
    $466 = $465&255;
    $467 = ($466|0)<(16);
    if ($467) {
     $468 = $8;
     $469 = ((($468)) + 22|0);
     HEAP8[$469>>0] = 0;
    }
    $470 = $8;
    $471 = ((($470)) + 16|0);
    HEAP8[$471>>0] = 0;
    $13 = 0;
    break;
   }
   case 2:  {
    $22 = 0;
    $472 = $2;
    $473 = (($472) + 2)|0;
    $474 = (51088 + (($473*24)|0)|0);
    $6 = $474;
    $475 = $2;
    $476 = (($475) + 3)|0;
    $477 = (51088 + (($476*24)|0)|0);
    $7 = $477;
    $478 = $10;
    $479 = ($478|0)>(7);
    if ($479) {
     $10 = 7;
    }
    $480 = $10;
    $481 = ($480|0)<=(1);
    if ($481) {
     $482 = $10;
     $483 = $482 ^ 1;
     $10 = $483;
    }
    $484 = $12;
    $485 = ($484|0)!=(0);
    $486 = $10;
    $487 = $1;
    $488 = ((($487)) + 408|0);
    $489 = (($488) + ($486)|0);
    $490 = HEAP8[$489>>0]|0;
    if ($485) {
     $491 = $490&255;
     $492 = (($491) - 1)|0;
     $493 = $492&255;
     $494 = $8;
     $495 = ((($494)) + 20|0);
     HEAP8[$495>>0] = $493;
    } else {
     $496 = $8;
     $497 = ((($496)) + 20|0);
     HEAP8[$497>>0] = $490;
    }
    $498 = $24;
    $499 = ($498|0)!=(0);
    if ($499) {
     $500 = $8;
     $501 = ((($500)) + 20|0);
     HEAP8[$501>>0] = 25;
    }
    $502 = $2;
    $503 = HEAP32[12771]|0;
    $504 = (($503) - 3)|0;
    $505 = ($502|0)>=($504|0);
    if ($505) {
     $506 = $8;
     $507 = ((($506)) + 20|0);
     $508 = HEAP8[$507>>0]|0;
     $509 = $508&255;
     $510 = $1;
     $511 = ((($510)) + 24|0);
     $512 = ((($511)) + 36|0);
     $513 = HEAP32[$512>>2]|0;
     $514 = ($509|0)>($513|0);
     if ($514) {
      $515 = $1;
      $516 = ((($515)) + 24|0);
      $517 = ((($516)) + 36|0);
      $518 = HEAP32[$517>>2]|0;
      $519 = $518&255;
      $520 = $8;
      $521 = ((($520)) + 20|0);
      HEAP8[$521>>0] = $519;
     }
    }
    HEAP32[11235] = 0;
    $20 = 0;
    $522 = $8;
    $523 = ((($522)) + 24|0);
    $9 = $523;
    while(1) {
     $524 = $9;
     $525 = ((($524)) + 21|0);
     $526 = HEAP8[$525>>0]|0;
     $527 = $526&255;
     $528 = ($527|0)==(0);
     $529 = $9;
     if (!($528)) {
      break;
     }
     $530 = ((($529)) + 17|0);
     $531 = HEAP8[$530>>0]|0;
     $532 = $531&255;
     $533 = ($532|0)==(2);
     if ($533) {
      $534 = $9;
      $535 = ((($534)) + 8|0);
      $536 = HEAP32[$535>>2]|0;
      $537 = ((($536)) + 4|0);
      $538 = HEAP32[$537>>2]|0;
      $539 = $538 & 1048576;
      $540 = ($539|0)!=(0);
      if (!($540)) {
       $541 = HEAP32[11235]|0;
       $542 = (($541) + 1)|0;
       HEAP32[11235] = $542;
      }
     }
     $543 = $9;
     $544 = ((($543)) + 8|0);
     $545 = HEAP32[$544>>2]|0;
     $546 = ((($545)) + 10|0);
     $547 = HEAP8[$546>>0]|0;
     $548 = $547&255;
     $549 = ($548|0)==(27);
     if ($549) {
      $20 = 2;
     }
     $550 = $9;
     $551 = ((($550)) + 24|0);
     $9 = $551;
    }
    $552 = ((($529)) + 8|0);
    $553 = HEAP32[$552>>2]|0;
    $554 = ((($553)) + 10|0);
    $555 = HEAP8[$554>>0]|0;
    $556 = $555&255;
    $557 = ($556|0)==(27);
    if ($557) {
     $20 = 2;
    }
    $558 = $9;
    $559 = ((($558)) + 21|0);
    $560 = HEAP8[$559>>0]|0;
    $561 = $560&255;
    $562 = $561 & 2;
    $563 = ($562|0)!=(0);
    $564 = HEAP32[11235]|0;
    $565 = ($564|0)==(0);
    $or$cond3 = $563 & $565;
    if ($or$cond3) {
     $20 = 2;
    }
    $566 = $5;
    $567 = ((($566)) + 8|0);
    $568 = HEAP32[$567>>2]|0;
    $569 = ((($568)) + 10|0);
    $570 = HEAP8[$569>>0]|0;
    $571 = $570&255;
    $572 = ($571|0)==(23);
    if ($572) {
     $573 = $6;
     $574 = ((($573)) + 17|0);
     $575 = HEAP8[$574>>0]|0;
     $576 = $575&255;
     $577 = ($576|0)==(0);
     if ($577) {
      $578 = $6;
      $5 = $578;
      $579 = $7;
      $6 = $579;
      $580 = $2;
      $581 = (($580) + 4)|0;
      $582 = (51088 + (($581*24)|0)|0);
      $7 = $582;
     }
    }
    $583 = $6;
    $584 = ((($583)) + 8|0);
    $585 = HEAP32[$584>>2]|0;
    $586 = ((($585)) + 15|0);
    $587 = HEAP8[$586>>0]|0;
    $588 = $587&255;
    $17 = $588;
    $589 = HEAP32[11235]|0;
    $590 = ($589|0)==(0);
    do {
     if ($590) {
      $591 = $5;
      $592 = ((($591)) + 21|0);
      $593 = HEAP8[$592>>0]|0;
      $594 = ($593<<24>>24)!=(0);
      if ($594) {
       $$old = $17;
       $$old9 = ($$old|0)!=(1);
       if ($$old9) {
        label = 130;
       }
      } else {
       $595 = $6;
       $596 = ((($595)) + 21|0);
       $597 = HEAP8[$596>>0]|0;
       $598 = ($597<<24>>24)!=(0);
       $599 = $17;
       $600 = ($599|0)!=(1);
       $or$cond10 = $598 & $600;
       if ($or$cond10) {
        label = 130;
       }
      }
      if ((label|0) == 130) {
       label = 0;
       $17 = 0;
      }
      $601 = $17;
      $602 = ($601*10)|0;
      $603 = $5;
      $604 = ((($603)) + 8|0);
      $605 = HEAP32[$604>>2]|0;
      $606 = ((($605)) + 15|0);
      $607 = HEAP8[$606>>0]|0;
      $608 = $607&255;
      $609 = (($602) + ($608))|0;
      $610 = $1;
      $611 = ((($610)) + 196|0);
      $612 = HEAP32[$611>>2]|0;
      $613 = (($612) + ($609)|0);
      $614 = HEAP8[$613>>0]|0;
      $615 = $614&255;
      $18 = $615;
      $616 = $5;
      $617 = ((($616)) + 21|0);
      $618 = HEAP8[$617>>0]|0;
      $619 = ($618<<24>>24)!=(0);
      if ($619) {
       $620 = $1;
       $621 = HEAP32[$620>>2]|0;
       $622 = $621 & 32;
       $623 = ($622|0)!=(0);
       if ($623) {
        $624 = $18;
        $625 = $5;
        $626 = ((($625)) + 8|0);
        $627 = HEAP32[$626>>2]|0;
        $628 = ((($627)) + 15|0);
        $629 = HEAP8[$628>>0]|0;
        $630 = $629&255;
        $631 = ($630*10)|0;
        $632 = (($631) + 1)|0;
        $633 = $1;
        $634 = ((($633)) + 196|0);
        $635 = HEAP32[$634>>2]|0;
        $636 = (($635) + ($632)|0);
        $637 = HEAP8[$636>>0]|0;
        $638 = $637&255;
        $639 = (($624) + ($638))|0;
        $640 = (($639|0) / 2)&-1;
        $16 = $640;
        break;
       }
      }
      $641 = $18;
      $16 = $641;
     } else {
      $642 = $17;
      $643 = ($642*10)|0;
      $644 = $5;
      $645 = ((($644)) + 8|0);
      $646 = HEAP32[$645>>2]|0;
      $647 = ((($646)) + 15|0);
      $648 = HEAP8[$647>>0]|0;
      $649 = $648&255;
      $650 = (($643) + ($649))|0;
      $651 = $1;
      $652 = ((($651)) + 192|0);
      $653 = HEAP32[$652>>2]|0;
      $654 = (($653) + ($650)|0);
      $655 = HEAP8[$654>>0]|0;
      $656 = $655&255;
      $16 = $656;
      $657 = $5;
      $658 = ((($657)) + 17|0);
      $659 = HEAP8[$658>>0]|0;
      $660 = $659&255;
      $661 = ($660|0)==(8);
      if ($661) {
       $662 = $6;
       $663 = ((($662)) + 17|0);
       $664 = HEAP8[$663>>0]|0;
       $665 = $664&255;
       $666 = ($665|0)==(4);
       if (!($666)) {
        $667 = $6;
        $668 = ((($667)) + 17|0);
        $669 = HEAP8[$668>>0]|0;
        $670 = $669&255;
        $671 = ($670|0)==(5);
        if (!($671)) {
         break;
        }
       }
       $672 = $7;
       $673 = ((($672)) + 8|0);
       $674 = HEAP32[$673>>2]|0;
       $675 = ((($674)) + 4|0);
       $676 = HEAP32[$675>>2]|0;
       $677 = $676 & 8;
       $678 = ($677|0)!=(0);
       if ($678) {
        $679 = $16;
        $680 = (($679) - 15)|0;
        $16 = $680;
       }
      }
     }
    } while(0);
    $681 = HEAP32[11235]|0;
    $682 = ($681|0)==(0);
    do {
     if ($682) {
      $683 = HEAP32[646]|0;
      $684 = $16;
      $685 = Math_imul($684, $683)|0;
      $16 = $685;
     } else {
      $686 = HEAP32[11235]|0;
      $687 = ($686|0)==(1);
      if ($687) {
       $688 = HEAP32[647]|0;
       $689 = $16;
       $690 = Math_imul($689, $688)|0;
       $16 = $690;
       break;
      } else {
       $691 = HEAP32[648]|0;
       $692 = $16;
       $693 = Math_imul($692, $691)|0;
       $16 = $693;
       break;
      }
     }
    } while(0);
    $694 = $16;
    $695 = (($694|0) / 128)&-1;
    $16 = $695;
    $696 = $16;
    $697 = ($696|0)<(8);
    $$4 = $697 ? 8 : $695;
    $16 = $$4;
    $698 = $10;
    $699 = ($698|0)>=(7);
    if ($699) {
     $700 = $1;
     $701 = ((($700)) + 312|0);
     $702 = HEAP32[$701>>2]|0;
     $703 = $16;
     $704 = (($703) + ($702))|0;
     $16 = $704;
     $705 = $24;
     $706 = ($705|0)!=(0);
     if ($706) {
      $707 = $1;
      $708 = ((($707)) + 312|0);
      $709 = HEAP32[$708>>2]|0;
      $710 = (($709|0) / 2)&-1;
      $711 = $16;
      $712 = (($711) + ($710))|0;
      $16 = $712;
     }
    } else {
     $713 = $24;
     $714 = ($713|0)!=(0);
     if ($714) {
      $715 = $1;
      $716 = ((($715)) + 312|0);
      $717 = HEAP32[$716>>2]|0;
      $718 = $16;
      $719 = (($718) + ($717))|0;
      $16 = $719;
     }
    }
    $720 = $10;
    $721 = $1;
    $722 = ((($721)) + 424|0);
    $723 = (($722) + ($720<<1)|0);
    $724 = HEAP16[$723>>1]|0;
    $725 = $724 << 16 >> 16;
    $18 = $725;
    $726 = ($725|0)==(0);
    if ($726) {
     $727 = $1;
     $728 = ((($727)) + 424|0);
     $729 = ((($728)) + 12|0);
     $730 = HEAP16[$729>>1]|0;
     $731 = $730 << 16 >> 16;
     $18 = $731;
    }
    $732 = $16;
    $733 = $18;
    $734 = Math_imul($732, $733)|0;
    $16 = $734;
    $735 = $8;
    $736 = ((($735)) + 7|0);
    $737 = HEAP8[$736>>0]|0;
    $738 = $737&255;
    $739 = ($738|0)!=(0);
    if ($739) {
     $740 = $8;
     $741 = ((($740)) + 7|0);
     $742 = HEAP8[$741>>0]|0;
     $743 = $742&255;
     $744 = (45008 + ($743<<2)|0);
     $745 = HEAP32[$744>>2]|0;
     $746 = ((($745)) + 14|0);
     $747 = HEAP8[$746>>0]|0;
     $748 = $747&255;
     $25 = $748;
     $749 = ($748|0)>(0);
     if ($749) {
      $750 = $16;
      $751 = $25;
      $752 = Math_imul($750, $751)|0;
      $753 = (($752|0) / 100)&-1;
      $16 = $753;
     }
    }
    $754 = $20;
    $755 = ($754|0)==(2);
    if ($755) {
     $756 = $1;
     $757 = ((($756)) + 12|0);
     $758 = HEAP32[$757>>2]|0;
     $759 = $758 & 2097152;
     $760 = ($759|0)!=(0);
     if (!($760)) {
      $761 = $8;
      $762 = ((($761)) + 8|0);
      $763 = HEAP32[$762>>2]|0;
      $764 = ((($763)) + 14|0);
      $765 = HEAP8[$764>>0]|0;
      $766 = $765&255;
      $767 = $766<<1;
      $18 = $767;
      $768 = $1;
      $769 = ((($768)) + 12|0);
      $770 = HEAP32[$769>>2]|0;
      $771 = $770 & 262144;
      $772 = ($771|0)!=(0);
      $$5 = $772 ? 200 : $767;
      $18 = $$5;
      $773 = $16;
      $774 = $18;
      $775 = (280 - ($774))|0;
      $776 = (($775|0) / 3)&-1;
      $777 = (256 + ($776))|0;
      $778 = Math_imul($773, $777)|0;
      $779 = (($778|0) / 256)&-1;
      $16 = $779;
     }
    }
    $780 = $16;
    $781 = $1;
    $782 = ((($781)) + 308|0);
    $783 = HEAP32[$782>>2]|0;
    $784 = HEAP32[646]|0;
    $785 = Math_imul($783, $784)|0;
    $786 = ($780|0)>($785|0);
    if ($786) {
     $787 = $1;
     $788 = ((($787)) + 308|0);
     $789 = HEAP32[$788>>2]|0;
     $790 = HEAP32[646]|0;
     $791 = Math_imul($789, $790)|0;
     $16 = $791;
    }
    $792 = $16;
    $793 = (($792|0) / 128)&-1;
    $16 = $793;
    $794 = $8;
    $795 = ((($794)) + 17|0);
    $796 = HEAP8[$795>>0]|0;
    $797 = $796&255;
    $798 = ($797|0)!=(2);
    if ($798) {
     $16 = 256;
     $22 = 16;
    }
    $799 = $16;
    $800 = $8;
    $801 = ((($800)) + 12|0);
    HEAP32[$801>>2] = $799;
    $802 = $8;
    $803 = ((($802)) + 16|0);
    $804 = HEAP8[$803>>0]|0;
    $805 = $804&255;
    $806 = ($805|0)>=(19);
    if ($806) {
     $807 = HEAP32[1451]|0;
     (_fprintf($807,22069,$vararg_buffer)|0);
     $808 = $8;
     $809 = ((($808)) + 16|0);
     HEAP8[$809>>0] = 0;
    }
    $810 = $8;
    $811 = ((($810)) + 16|0);
    $812 = HEAP8[$811>>0]|0;
    $813 = $812&255;
    $814 = (($813) + 1)|0;
    $19 = $814;
    $815 = $8;
    $816 = ((($815)) + 7|0);
    $817 = HEAP8[$816>>0]|0;
    $818 = $817&255;
    $819 = ($818|0)!=(0);
    if ($819) {
     $820 = $8;
     $821 = ((($820)) + 7|0);
     $822 = HEAP8[$821>>0]|0;
     $823 = $822&255;
     __Z17InterpretPhoneme2iP12PHONEME_DATA($823,$27);
     $824 = ((($27)) + 124|0);
     $825 = HEAP32[$824>>2]|0;
     $826 = (__Z11GetEnvelopei($825)|0);
     $26 = $826;
    } else {
     $827 = $19;
     $828 = (844 + ($827<<2)|0);
     $829 = HEAP32[$828>>2]|0;
     $26 = $829;
    }
    $830 = $8;
    $831 = ((($830)) + 22|0);
    $832 = HEAP8[$831>>0]|0;
    $833 = $832&255;
    $834 = $8;
    $835 = ((($834)) + 23|0);
    $836 = HEAP8[$835>>0]|0;
    $837 = $836&255;
    $838 = $8;
    $839 = ((($838)) + 22|0);
    $840 = HEAP8[$839>>0]|0;
    $841 = $840&255;
    $842 = (($837) - ($841))|0;
    $843 = $26;
    $844 = HEAP8[$843>>0]|0;
    $845 = $844&255;
    $846 = Math_imul($842, $845)|0;
    $847 = (($846|0) / 256)&-1;
    $848 = (($833) + ($847))|0;
    $15 = $848;
    $849 = $12;
    $850 = ($849|0)!=(0);
    $851 = $13;
    $852 = ($851|0)!=(0);
    $or$cond7 = $850 | $852;
    do {
     if ($or$cond7) {
      $853 = $15;
      $854 = ($853|0)==(255);
      if ($854) {
       $855 = $15;
       $14 = $855;
      }
      $856 = $15;
      $857 = $14;
      $858 = (($856) - ($857))|0;
      $859 = ($858|0)>(16);
      if ($859) {
       $860 = $15;
       $861 = (($860) - 16)|0;
       $14 = $861;
      }
      $862 = $14;
      $863 = $862&255;
      $864 = $4;
      $865 = ((($864)) + 22|0);
      HEAP8[$865>>0] = $863;
      $866 = $15;
      $867 = $866&255;
      $868 = $4;
      $869 = ((($868)) + 23|0);
      HEAP8[$869>>0] = $867;
      $870 = $14;
      $871 = $15;
      $872 = ($870|0)<($871|0);
      $873 = $4;
      $874 = ((($873)) + 16|0);
      if ($872) {
       HEAP8[$874>>0] = 2;
       $875 = $19;
       $876 = $875&255;
       $877 = $8;
       $878 = ((($877)) + 16|0);
       HEAP8[$878>>0] = $876;
      } else {
       HEAP8[$874>>0] = 0;
      }
      $879 = $16;
      $880 = $4;
      $881 = ((($880)) + 12|0);
      HEAP32[$881>>2] = $879;
      $882 = $8;
      $883 = ((($882)) + 20|0);
      $884 = HEAP8[$883>>0]|0;
      $885 = $4;
      $886 = ((($885)) + 20|0);
      HEAP8[$886>>0] = $884;
      $887 = $4;
      $888 = ((($887)) + 17|0);
      $889 = HEAP8[$888>>0]|0;
      $890 = $889&255;
      $891 = ($890|0)!=(3);
      if (!($891)) {
       break;
      }
      $892 = $4;
      $893 = ((($892)) + 20|0);
      $894 = HEAP8[$893>>0]|0;
      $895 = $894&255;
      $896 = ($895|0)>(18);
      if (!($896)) {
       break;
      }
      $897 = $4;
      $898 = ((($897)) + 20|0);
      HEAP8[$898>>0] = 18;
     }
    } while(0);
    $899 = $5;
    $900 = HEAP16[$899>>1]|0;
    $901 = $900&65535;
    $902 = $901 & -2;
    $903 = $902&65535;
    HEAP16[$899>>1] = $903;
    $904 = $5;
    $905 = ((($904)) + 17|0);
    $906 = HEAP8[$905>>0]|0;
    $907 = $906&255;
    $908 = ($907|0)==(8);
    do {
     if ($908) {
      $909 = $6;
      $910 = ((($909)) + 17|0);
      $911 = HEAP8[$910>>0]|0;
      $912 = $911&255;
      $913 = ($912|0)!=(2);
      if (!($913)) {
       break;
      }
      $914 = $5;
      $915 = HEAP16[$914>>1]|0;
      $916 = $915&65535;
      $917 = $916 | 1;
      $918 = $917&65535;
      HEAP16[$914>>1] = $918;
     }
    } while(0);
    $919 = $5;
    $920 = ((($919)) + 17|0);
    $921 = HEAP8[$920>>0]|0;
    $922 = $921&255;
    $923 = ($922|0)==(3);
    do {
     if ($923) {
      $924 = $5;
      $925 = HEAP16[$924>>1]|0;
      $926 = $925&65535;
      $927 = $926 | 1;
      $928 = $927&65535;
      HEAP16[$924>>1] = $928;
      $929 = $6;
      $930 = ((($929)) + 17|0);
      $931 = HEAP8[$930>>0]|0;
      $932 = $931&255;
      $933 = ($932|0)==(2);
      if ($933) {
       $934 = $5;
       $935 = HEAP16[$934>>1]|0;
       $936 = $935&65535;
       $937 = $936 & -2;
       $938 = $937&65535;
       HEAP16[$934>>1] = $938;
      }
      $939 = $6;
      $940 = ((($939)) + 17|0);
      $941 = HEAP8[$940>>0]|0;
      $942 = $941&255;
      $943 = ($942|0)!=(2);
      if (!($943)) {
       break;
      }
      $944 = $5;
      $945 = ((($944)) + 8|0);
      $946 = HEAP32[$945>>2]|0;
      $947 = HEAP32[$946>>2]|0;
      $948 = ($947|0)==(12146);
      if (!($948)) {
       break;
      }
      $949 = $5;
      $950 = HEAP16[$949>>1]|0;
      $951 = $950&65535;
      $952 = $951 & -2;
      $953 = $952&65535;
      HEAP16[$949>>1] = $953;
     }
    } while(0);
    $954 = $22;
    $955 = ($954|0)>(0);
    do {
     if ($955) {
      $956 = $8;
      $957 = ((($956)) + 23|0);
      $958 = HEAP8[$957>>0]|0;
      $959 = $958&255;
      $960 = $8;
      $961 = ((($960)) + 22|0);
      $962 = HEAP8[$961>>0]|0;
      $963 = $962&255;
      $964 = (($959) - ($963))|0;
      $965 = $22;
      $966 = ($964|0)<($965|0);
      if (!($966)) {
       break;
      }
      $967 = $8;
      $968 = ((($967)) + 23|0);
      $969 = HEAP8[$968>>0]|0;
      $970 = $969&255;
      $971 = $22;
      $972 = (($970) - ($971))|0;
      $23 = $972;
      $973 = $23;
      $974 = ($973|0)<(0);
      $$8 = $974 ? 0 : $972;
      $23 = $$8;
      $975 = $23;
      $976 = $975&255;
      $977 = $8;
      $978 = ((($977)) + 22|0);
      HEAP8[$978>>0] = $976;
     }
    } while(0);
    $979 = $8;
    $980 = ((($979)) + 22|0);
    $981 = HEAP8[$980>>0]|0;
    $982 = $981&255;
    $983 = $8;
    $984 = ((($983)) + 23|0);
    $985 = HEAP8[$984>>0]|0;
    $986 = $985&255;
    $987 = $8;
    $988 = ((($987)) + 22|0);
    $989 = HEAP8[$988>>0]|0;
    $990 = $989&255;
    $991 = (($986) - ($990))|0;
    $992 = $8;
    $993 = ((($992)) + 16|0);
    $994 = HEAP8[$993>>0]|0;
    $995 = $994&255;
    $996 = (844 + ($995<<2)|0);
    $997 = HEAP32[$996>>2]|0;
    $998 = ((($997)) + 127|0);
    $999 = HEAP8[$998>>0]|0;
    $1000 = $999&255;
    $1001 = Math_imul($991, $1000)|0;
    $1002 = (($1001|0) / 256)&-1;
    $1003 = (($982) + ($1002))|0;
    $14 = $1003;
    $12 = 0;
    $13 = 0;
    break;
   }
   default: {
   }
   }
  } while(0);
  $1004 = $2;
  $1005 = (($1004) + 1)|0;
  $2 = $1005;
 }
 STACKTOP = sp;return;
}
function __ZL11DoEmbedded2Pi($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 while(1) {
  $3 = $1;
  $4 = HEAP32[$3>>2]|0;
  $5 = (($4) + 1)|0;
  HEAP32[$3>>2] = $5;
  $6 = (76960 + ($4<<2)|0);
  $7 = HEAP32[$6>>2]|0;
  $2 = $7;
  $8 = $2;
  $9 = $8 & 31;
  $10 = ($9|0)==(2);
  if ($10) {
   $11 = $2;
   $12 = $11 & 127;
   $13 = $2;
   $14 = $13 >>> 8;
   __Z11SetEmbeddedii($12,$14);
   __Z8SetSpeedi(1);
  }
  $15 = $2;
  $16 = $15 & 128;
  $17 = ($16|0)==(0);
  if (!($17)) {
   break;
  }
 }
 STACKTOP = sp;return;
}
function __Z20LookupAccentedLetterP10TranslatorjPc($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0;
 var $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0;
 var $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0;
 var $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0;
 var $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond = 0, $or$cond3 = 0, $vararg_buffer = 0, $vararg_buffer15 = 0, $vararg_buffer9 = 0, $vararg_ptr12 = 0, $vararg_ptr13 = 0, $vararg_ptr14 = 0, $vararg_ptr18 = 0, $vararg_ptr19 = 0, $vararg_ptr20 = 0, $vararg_ptr21 = 0, $vararg_ptr4 = 0;
 var $vararg_ptr5 = 0, $vararg_ptr6 = 0, $vararg_ptr7 = 0, $vararg_ptr8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 224|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(224|0);
 $vararg_buffer15 = sp + 40|0;
 $vararg_buffer9 = sp + 24|0;
 $vararg_buffer = sp;
 $13 = sp + 190|0;
 $14 = sp + 160|0;
 $15 = sp + 130|0;
 $16 = sp + 100|0;
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $6 = 0;
 $7 = 0;
 $8 = 0;
 $12 = 0;
 HEAP8[$16>>0] = 0;
 $17 = $4;
 $18 = ($17>>>0)>=(224);
 $19 = $4;
 $20 = ($19>>>0)<(383);
 $or$cond = $18 & $20;
 $21 = $4;
 if ($or$cond) {
  $22 = (($21) - 224)|0;
  $23 = (6688 + ($22<<1)|0);
  $24 = HEAP16[$23>>1]|0;
  $25 = $24&65535;
  $6 = $25;
 } else {
  $26 = ($21>>>0)>=(592);
  $27 = $4;
  $28 = ($27>>>0)<=(680);
  $or$cond3 = $26 & $28;
  if ($or$cond3) {
   $29 = $4;
   $30 = (($29) - 592)|0;
   $31 = (7008 + ($30<<1)|0);
   $32 = HEAP16[$31>>1]|0;
   $33 = $32&65535;
   $6 = $33;
  }
 }
 $34 = $6;
 $35 = ($34|0)!=(0);
 if (!($35)) {
  STACKTOP = sp;return;
 }
 $36 = $6;
 $37 = $36 & 63;
 $38 = (($37) + 59)|0;
 $11 = $38;
 $39 = $11;
 $40 = ($39|0)<(97);
 if ($40) {
  $41 = $11;
  $42 = (($41) - 59)|0;
  $43 = (7186 + ($42<<1)|0);
  $44 = HEAP16[$43>>1]|0;
  $45 = $44 << 16 >> 16;
  $11 = $45;
 }
 $46 = $6;
 $47 = $46 & 32768;
 $48 = ($47|0)!=(0);
 $49 = $6;
 $50 = $49 >> 6;
 if ($48) {
  $51 = $50 & 63;
  $12 = $51;
  $52 = $12;
  $53 = (($52) + 59)|0;
  $12 = $53;
  $54 = $6;
  $55 = $54 >> 12;
  $56 = $55 & 7;
  $8 = $56;
 } else {
  $57 = $50 & 31;
  $7 = $57;
  $58 = $6;
  $59 = $58 >> 11;
  $60 = $59 & 15;
  $8 = $60;
 }
 $61 = $3;
 $62 = $7;
 $63 = (2596 + ($62<<3)|0);
 $64 = HEAP32[$63>>2]|0;
 $65 = (__Z6LookupP10TranslatorPKcPc($61,$64,$15)|0);
 $9 = $65;
 $66 = ($65|0)!=(0);
 if (!($66)) {
  STACKTOP = sp;return;
 }
 $67 = $3;
 $68 = $11;
 $69 = (__ZL13LookupLetter2P10TranslatorjPc($67,$68,$13)|0);
 $70 = ($69|0)!=(0);
 if (!($70)) {
  STACKTOP = sp;return;
 }
 $71 = $8;
 $72 = ($71|0)!=(0);
 if ($72) {
  $73 = $3;
  $74 = $8;
  $75 = (2596 + ($74<<3)|0);
  $76 = HEAP32[$75>>2]|0;
  $77 = (__Z6LookupP10TranslatorPKcPc($73,$76,$16)|0);
  $10 = $77;
  $78 = $10;
  $79 = $78 & 4096;
  $80 = ($79|0)!=(0);
  if ($80) {
   $81 = $5;
   (_strcpy($81,$16)|0);
   $82 = $5;
   $83 = (_strlen($82)|0);
   $84 = $5;
   $85 = (($84) + ($83)|0);
   $5 = $85;
   HEAP8[$16>>0] = 0;
  }
 }
 $86 = $12;
 $87 = ($86|0)!=(0);
 if ($87) {
  $88 = $3;
  $89 = $12;
  (__ZL13LookupLetter2P10TranslatorjPc($88,$89,$14)|0);
  $90 = $5;
  HEAP32[$vararg_buffer>>2] = $15;
  $vararg_ptr4 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr4>>2] = 23;
  $vararg_ptr5 = ((($vararg_buffer)) + 8|0);
  HEAP32[$vararg_ptr5>>2] = $13;
  $vararg_ptr6 = ((($vararg_buffer)) + 12|0);
  HEAP32[$vararg_ptr6>>2] = 6;
  $vararg_ptr7 = ((($vararg_buffer)) + 16|0);
  HEAP32[$vararg_ptr7>>2] = $14;
  $vararg_ptr8 = ((($vararg_buffer)) + 20|0);
  HEAP32[$vararg_ptr8>>2] = $16;
  (_sprintf($90,22098,$vararg_buffer)|0);
  STACKTOP = sp;return;
 }
 $91 = $7;
 $92 = ($91|0)==(0);
 if ($92) {
  $93 = $5;
  (_strcpy($93,$13)|0);
  STACKTOP = sp;return;
 }
 $94 = $3;
 $95 = ((($94)) + 240|0);
 $96 = HEAP32[$95>>2]|0;
 $97 = $96 & 1;
 $98 = ($97|0)!=(0);
 if (!($98)) {
  $99 = $9;
  $100 = $99 & 4096;
  $101 = ($100|0)!=(0);
  if (!($101)) {
   $102 = $7;
   $103 = (2596 + ($102<<3)|0);
   $104 = ((($103)) + 4|0);
   $105 = HEAP32[$104>>2]|0;
   $106 = $105 & 1;
   $107 = ($106|0)!=(0);
   if (!($107)) {
    $109 = $5;
    HEAP32[$vararg_buffer15>>2] = 4;
    $vararg_ptr18 = ((($vararg_buffer15)) + 4|0);
    HEAP32[$vararg_ptr18>>2] = $13;
    $vararg_ptr19 = ((($vararg_buffer15)) + 8|0);
    HEAP32[$vararg_ptr19>>2] = 23;
    $vararg_ptr20 = ((($vararg_buffer15)) + 12|0);
    HEAP32[$vararg_ptr20>>2] = $15;
    $vararg_ptr21 = ((($vararg_buffer15)) + 16|0);
    HEAP32[$vararg_ptr21>>2] = 23;
    (_sprintf($109,22120,$vararg_buffer15)|0);
    STACKTOP = sp;return;
   }
  }
 }
 $108 = $5;
 HEAP32[$vararg_buffer9>>2] = $15;
 $vararg_ptr12 = ((($vararg_buffer9)) + 4|0);
 HEAP32[$vararg_ptr12>>2] = 23;
 $vararg_ptr13 = ((($vararg_buffer9)) + 8|0);
 HEAP32[$vararg_ptr13>>2] = 6;
 $vararg_ptr14 = ((($vararg_buffer9)) + 12|0);
 HEAP32[$vararg_ptr14>>2] = $13;
 (_sprintf($108,22111,$vararg_buffer9)|0);
 STACKTOP = sp;return;
}
function __ZL13LookupLetter2P10TranslatorjPc($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $7 = sp + 16|0;
 $3 = $0;
 $4 = $1;
 $5 = $2;
 HEAP8[$7>>0] = 0;
 $8 = ((($7)) + 1|0);
 HEAP8[$8>>0] = 95;
 $9 = $4;
 $10 = ((($7)) + 2|0);
 $11 = (__Z8utf8_outjPc($9,$10)|0);
 $6 = $11;
 $12 = $6;
 $13 = (($12) + 2)|0;
 $14 = (($7) + ($13)|0);
 HEAP8[$14>>0] = 32;
 $15 = $6;
 $16 = (($15) + 3)|0;
 $17 = (($7) + ($16)|0);
 HEAP8[$17>>0] = 0;
 $18 = $3;
 $19 = ((($7)) + 1|0);
 $20 = $5;
 $21 = (__Z6LookupP10TranslatorPKcPc($18,$19,$20)|0);
 $22 = ($21|0)==(0);
 if ($22) {
  $23 = ((($7)) + 1|0);
  HEAP8[$23>>0] = 32;
  $24 = $3;
  $25 = ((($7)) + 2|0);
  $26 = $5;
  $27 = (__Z6LookupP10TranslatorPKcPc($24,$25,$26)|0);
  $28 = ($27|0)==(0);
  if ($28) {
   $29 = $3;
   $30 = ((($7)) + 2|0);
   $31 = $5;
   (__Z14TranslateRulesP10TranslatorPcS1_iS1_iPj($29,$30,$31,20,0,0,0)|0);
  }
 }
 $32 = $5;
 $33 = HEAP8[$32>>0]|0;
 $34 = $33 << 24 >> 24;
 STACKTOP = sp;return ($34|0);
}
function __Z12LookupLetterP10TranslatorjiPci($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0;
 var $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(96|0);
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $11 = sp + 16|0;
 $12 = sp + 48|0;
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $9 = $4;
 $13 = $8;
 HEAP8[$13>>0] = 0;
 $14 = $6;
 $15 = (__Z8utf8_outjPc($14,(120135))|0);
 $10 = $15;
 $16 = $10;
 $17 = (($16) + 2)|0;
 $18 = (120133 + ($17)|0);
 HEAP8[$18>>0] = 32;
 $19 = $7;
 $20 = ($19|0)==(-1);
 if ($20) {
  $21 = $5;
  $22 = $8;
  $23 = (__Z6LookupP10TranslatorPKcPc($21,(120135),$22)|0);
  $24 = ($23|0)!=(0);
  if ($24) {
   STACKTOP = sp;return;
  }
  HEAP8[(120134)>>0] = 95;
  $25 = $5;
  $26 = (__Z6LookupP10TranslatorPKcPc($25,(120134),$12)|0);
  $27 = ($26|0)!=(0);
  if ($27) {
   STACKTOP = sp;return;
  }
  $28 = $5;
  $29 = ((($28)) + 324|0);
  $30 = HEAP32[$29>>2]|0;
  $31 = ($30|0)==(25966);
  if ($31) {
   STACKTOP = sp;return;
  }
  (__Z14SetTranslator2PKc(25529)|0);
  $32 = HEAP32[19150]|0;
  $33 = (__Z6LookupP10TranslatorPKcPc($32,(120135),$12)|0);
  $34 = ($33|0)!=(0);
  if ($34) {
   $35 = $8;
   HEAP32[$vararg_buffer>>2] = 21;
   (_sprintf($35,23346,$vararg_buffer)|0);
  }
  $36 = HEAP32[1124]|0;
  $37 = ((($36)) + 60|0);
  $38 = HEAP32[$37>>2]|0;
  __Z18SelectPhonemeTablei($38);
  STACKTOP = sp;return;
 }
 $39 = $6;
 $40 = ($39>>>0)<=(32);
 if (!($40)) {
  $41 = $6;
  $42 = (_iswspace($41)|0);
  $43 = ($42|0)!=(0);
  if (!($43)) {
   $47 = $7;
   $48 = ($47|0)!=(32);
   if ($48) {
    $7 = 31;
   }
   $49 = $7;
   $50 = $49&255;
   $51 = $10;
   $52 = (3 + ($51))|0;
   $53 = (120133 + ($52)|0);
   HEAP8[$53>>0] = $50;
   HEAP8[(120134)>>0] = 95;
   $54 = ((($11)) + 4|0);
   HEAP32[$54>>2] = 0;
   $55 = $5;
   $56 = (__Z6LookupP10TranslatorPKcPc($55,(120134),$12)|0);
   $57 = ($56|0)==(0);
   if ($57) {
    HEAP8[(120134)>>0] = 32;
    $58 = $5;
    $59 = (__Z6LookupP10TranslatorPKcPc($58,(120135),$12)|0);
    $60 = ($59|0)==(0);
    if ($60) {
     $61 = $5;
     (__Z14TranslateRulesP10TranslatorPcS1_iS1_iPj($61,(120135),$12,40,0,268435456,0)|0);
    }
   }
   $62 = HEAP8[$12>>0]|0;
   $63 = $62 << 24 >> 24;
   $64 = ($63|0)==(0);
   if ($64) {
    $65 = $5;
    $66 = $6;
    __Z20LookupAccentedLetterP10TranslatorjPc($65,$66,$12);
   }
   $67 = $8;
   (_strcpy($67,$12)|0);
   $68 = $8;
   $69 = HEAP8[$68>>0]|0;
   $70 = $69 << 24 >> 24;
   $71 = ($70|0)==(0);
   if ($71) {
    STACKTOP = sp;return;
   }
   $72 = $8;
   $73 = HEAP8[$72>>0]|0;
   $74 = $73 << 24 >> 24;
   $75 = ($74|0)==(21);
   if ($75) {
    STACKTOP = sp;return;
   }
   HEAP32[$11>>2] = 0;
   $76 = ((($11)) + 4|0);
   HEAP32[$76>>2] = 0;
   $77 = $5;
   $78 = $8;
   $79 = $9;
   $80 = $79 & 1;
   __Z13SetWordStressP10TranslatorPcPjii($77,$78,$11,-1,$80);
   STACKTOP = sp;return;
  }
 }
 $44 = $6;
 HEAP32[$vararg_buffer1>>2] = $44;
 (_sprintf((120134),22241,$vararg_buffer1)|0);
 $45 = $5;
 $46 = $8;
 (__Z6LookupP10TranslatorPKcPc($45,(120134),$46)|0);
 STACKTOP = sp;return;
}
function __Z14NonAsciiNumberi($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = 2772;
 while(1) {
  $5 = $3;
  $6 = HEAP32[$5>>2]|0;
  $4 = $6;
  $7 = ($6|0)!=(0);
  if (!($7)) {
   label = 7;
   break;
  }
  $8 = $2;
  $9 = $4;
  $10 = ($8|0)<($9|0);
  if ($10) {
   label = 7;
   break;
  }
  $11 = $2;
  $12 = $4;
  $13 = (($12) + 10)|0;
  $14 = ($11|0)<($13|0);
  if ($14) {
   label = 5;
   break;
  }
  $19 = $3;
  $20 = ((($19)) + 4|0);
  $3 = $20;
 }
 if ((label|0) == 5) {
  $15 = $2;
  $16 = $4;
  $17 = (($15) - ($16))|0;
  $18 = (($17) + 48)|0;
  $1 = $18;
  $21 = $1;
  STACKTOP = sp;return ($21|0);
 }
 else if ((label|0) == 7) {
  $1 = -1;
  $21 = $1;
  STACKTOP = sp;return ($21|0);
 }
 return (0)|0;
}
function __Z13IsSuperscripti($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = 0;
 while(1) {
  $5 = $3;
  $6 = (7216 + ($5<<1)|0);
  $7 = HEAP16[$6>>1]|0;
  $8 = $7&65535;
  $4 = $8;
  $9 = ($8|0)!=(0);
  if (!($9)) {
   label = 7;
   break;
  }
  $10 = $4;
  $11 = $2;
  $12 = ($10|0)>($11|0);
  if ($12) {
   label = 7;
   break;
  }
  $13 = $4;
  $14 = $2;
  $15 = ($13|0)==($14|0);
  $16 = $3;
  if ($15) {
   label = 5;
   break;
  }
  $21 = (($16) + 2)|0;
  $3 = $21;
 }
 if ((label|0) == 5) {
  $17 = (($16) + 1)|0;
  $18 = (7216 + ($17<<1)|0);
  $19 = HEAP16[$18>>1]|0;
  $20 = $19&65535;
  $1 = $20;
  $22 = $1;
  STACKTOP = sp;return ($22|0);
 }
 else if ((label|0) == 7) {
  $1 = 0;
  $22 = $1;
  STACKTOP = sp;return ($22|0);
 }
 return (0)|0;
}
function __Z15TranslateLetterP10TranslatorPcS1_i($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0;
 var $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0;
 var $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0;
 var $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0;
 var $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0;
 var $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0;
 var $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0;
 var $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0;
 var $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0;
 var $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0;
 var $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0;
 var $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0;
 var $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0;
 var $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0;
 var $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0;
 var $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0;
 var $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0;
 var $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond = 0, $or$cond3 = 0, $vararg_buffer = 0, $vararg_buffer10 = 0, $vararg_buffer4 = 0, $vararg_ptr13 = 0, $vararg_ptr14 = 0, $vararg_ptr15 = 0, $vararg_ptr7 = 0, $vararg_ptr8 = 0, $vararg_ptr9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 432|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(432|0);
 $vararg_buffer10 = sp + 24|0;
 $vararg_buffer4 = sp + 8|0;
 $vararg_buffer = sp;
 $10 = sp + 104|0;
 $24 = sp + 400|0;
 $25 = sp + 320|0;
 $26 = sp + 240|0;
 $27 = sp + 160|0;
 $28 = sp + 144|0;
 $32 = sp + 132|0;
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 HEAP8[$25>>0] = 0;
 HEAP8[$27>>0] = 0;
 HEAP8[$24>>0] = 0;
 $33 = HEAP32[19149]|0;
 $34 = ((($33)) + 404|0);
 $35 = HEAP32[$34>>2]|0;
 $22 = $35;
 $36 = $6;
 $37 = (__Z7utf8_inPiPKc($10,$36)|0);
 $9 = $37;
 $38 = HEAP32[$10>>2]|0;
 $39 = $38 & 1048320;
 $40 = ($39|0)==(57344);
 if ($40) {
  $41 = HEAP32[$10>>2]|0;
  $42 = $41 & 255;
  HEAP32[$10>>2] = $42;
 }
 $43 = $8;
 $44 = $43 & 2;
 $45 = ($44|0)!=(0);
 if ($45) {
  $46 = HEAP32[$10>>2]|0;
  $47 = (__Z9iswupper2i($46)|0);
  $48 = ($47|0)!=(0);
  if ($48) {
   $49 = $5;
   (__Z6LookupP10TranslatorPKcPc($49,22247,$24)|0);
  }
 }
 $50 = HEAP32[$10>>2]|0;
 $51 = (__Z9towlower2j($50)|0);
 HEAP32[$10>>2] = $51;
 $52 = $5;
 $53 = HEAP32[$10>>2]|0;
 $54 = $9;
 $55 = $6;
 $56 = (($55) + ($54)|0);
 $57 = HEAP8[$56>>0]|0;
 $58 = $57 << 24 >> 24;
 $59 = $8;
 $60 = $59 & 1;
 __Z12LookupLetterP10TranslatorjiPci($52,$53,$58,$25,$60);
 $61 = HEAP8[$25>>0]|0;
 $62 = $61 << 24 >> 24;
 $63 = ($62|0)==(0);
 if ($63) {
  $64 = HEAP32[$10>>2]|0;
  $65 = (__Z13IsSuperscripti($64)|0);
  $13 = $65;
  $66 = ($65|0)!=(0);
  if ($66) {
   $67 = $13;
   $68 = $67 & 16383;
   HEAP32[$10>>2] = $68;
   $69 = $8;
   $70 = $69 & 4;
   $71 = ($70|0)!=(0);
   if ($71) {
    $72 = $13;
    $73 = $72 >> 14;
    $74 = (2840 + ($73<<2)|0);
    $75 = HEAP32[$74>>2]|0;
    $16 = $75;
    $76 = ($75|0)!=(0|0);
    if ($76) {
     $77 = $5;
     $78 = $16;
     (__Z6LookupP10TranslatorPKcPc($77,$78,$24)|0);
     $79 = HEAP8[$24>>0]|0;
     $80 = $79 << 24 >> 24;
     $81 = ($80|0)==(0);
     if ($81) {
      $82 = (__Z14SetTranslator2PKc(25529)|0);
      $83 = $82&255;
      $84 = ((($24)) + 2|0);
      HEAP8[$84>>0] = $83;
      $85 = HEAP32[19150]|0;
      $86 = $16;
      $87 = ((($24)) + 3|0);
      (__Z6LookupP10TranslatorPKcPc($85,$86,$87)|0);
      $88 = ((($24)) + 3|0);
      $89 = HEAP8[$88>>0]|0;
      $90 = $89 << 24 >> 24;
      $91 = ($90|0)!=(0);
      if ($91) {
       HEAP8[$24>>0] = 9;
       $92 = ((($24)) + 1|0);
       HEAP8[$92>>0] = 21;
       $93 = ((($24)) + 3|0);
       $94 = (_strlen($93)|0);
       $11 = $94;
       $95 = $11;
       $96 = (($95) + 3)|0;
       $97 = (($24) + ($96)|0);
       HEAP8[$97>>0] = 21;
       $98 = $22;
       $99 = $98&255;
       $100 = $11;
       $101 = (($100) + 4)|0;
       $102 = (($24) + ($101)|0);
       HEAP8[$102>>0] = $99;
       $103 = $11;
       $104 = (($103) + 5)|0;
       $105 = (($24) + ($104)|0);
       HEAP8[$105>>0] = 0;
      }
     }
    }
   }
  }
  $106 = $5;
  $107 = HEAP32[$10>>2]|0;
  $108 = $9;
  $109 = $6;
  $110 = (($109) + ($108)|0);
  $111 = HEAP8[$110>>0]|0;
  $112 = $111 << 24 >> 24;
  $113 = $8;
  $114 = $113 & 1;
  __Z12LookupLetterP10TranslatorjiPci($106,$107,$112,$25,$114);
 }
 $115 = HEAP8[$25>>0]|0;
 $116 = $115 << 24 >> 24;
 $117 = ($116|0)==(21);
 if ($117) {
  $118 = $7;
  (_strcpy($118,$25)|0);
  $4 = 0;
  $430 = $4;
  STACKTOP = sp;return ($430|0);
 }
 $119 = HEAP8[$25>>0]|0;
 $120 = $119 << 24 >> 24;
 $121 = ($120|0)==(0);
 if ($121) {
  $122 = HEAP32[$10>>2]|0;
  $123 = (__Z14NonAsciiNumberi($122)|0);
  $21 = $123;
  $124 = ($123|0)>(0);
  if ($124) {
   $125 = $5;
   $126 = $21;
   $127 = $8;
   $128 = $127 & 1;
   __Z12LookupLetterP10TranslatorjiPci($125,$126,0,$25,$128);
  }
 }
 $18 = 0;
 $19 = 0;
 $129 = HEAP32[$10>>2]|0;
 $130 = (__Z16AlphabetFromChari($129)|0);
 $17 = $130;
 $131 = ($130|0)!=(0|0);
 if ($131) {
  $132 = $17;
  $133 = ((($132)) + 4|0);
  $134 = HEAP32[$133>>2]|0;
  $18 = $134;
  $135 = $17;
  $136 = ((($135)) + 16|0);
  $137 = HEAP32[$136>>2]|0;
  $19 = $137;
 }
 $138 = $17;
 $139 = HEAP32[19176]|0;
 $140 = ($138|0)!=($139|0);
 if ($140) {
  $141 = $17;
  HEAP32[19176] = $141;
  $142 = $17;
  $143 = ($142|0)!=(0|0);
  if ($143) {
   $144 = $19;
   $145 = $144 & 1;
   $146 = ($145|0)!=(0);
   if (!($146)) {
    $147 = $18;
    $148 = HEAP32[19149]|0;
    $149 = ((($148)) + 720|0);
    $150 = HEAP32[$149>>2]|0;
    $151 = ($147|0)!=($150|0);
    if ($151) {
     $152 = $19;
     $153 = $152 & 1;
     $154 = ($153|0)!=(0);
     if (!($154)) {
      $155 = $18;
      $156 = HEAP32[19149]|0;
      $157 = ((($156)) + 300|0);
      $158 = HEAP32[$157>>2]|0;
      $159 = ($155|0)==($158|0);
      if (!($159)) {
       $160 = $18;
       $161 = HEAP32[19149]|0;
       $162 = ((($161)) + 296|0);
       $163 = HEAP32[$162>>2]|0;
       $164 = ($160|0)==($163|0);
       if (!($164)) {
        HEAP8[$26>>0] = 0;
        $165 = HEAP32[19149]|0;
        $166 = $17;
        $167 = HEAP32[$166>>2]|0;
        $168 = (__Z6LookupP10TranslatorPKcPc($165,$167,$27)|0);
        $169 = ($168|0)==(0);
        if ($169) {
         $170 = (__Z14SetTranslator2PKc(25529)|0);
         $171 = $170&255;
         $172 = ((($27)) + 2|0);
         HEAP8[$172>>0] = $171;
         $173 = HEAP32[19150]|0;
         $174 = $17;
         $175 = HEAP32[$174>>2]|0;
         (__Z6LookupP10TranslatorPKcPc($173,$175,$26)|0);
        } else {
         $176 = HEAP32[19149]|0;
         $177 = $5;
         $178 = ($176|0)!=($177|0);
         if ($178) {
          $179 = $5;
          $180 = ((($179)) + 404|0);
          $181 = HEAP32[$180>>2]|0;
          $22 = $181;
          (_strcpy($26,$27)|0);
          $182 = HEAP32[19149]|0;
          $183 = ((($182)) + 404|0);
          $184 = HEAP32[$183>>2]|0;
          $185 = $184&255;
          $186 = ((($27)) + 2|0);
          HEAP8[$186>>0] = $185;
         }
        }
        $187 = HEAP8[$26>>0]|0;
        $188 = $187 << 24 >> 24;
        $189 = ($188|0)!=(0);
        if ($189) {
         HEAP8[$27>>0] = 9;
         $190 = ((($27)) + 1|0);
         HEAP8[$190>>0] = 21;
         $191 = ((($27)) + 3|0);
         (_strcpy($191,$26)|0);
         $192 = (_strlen($26)|0);
         $193 = (($192) + 3)|0;
         $11 = $193;
         $194 = $11;
         $195 = (($27) + ($194)|0);
         HEAP8[$195>>0] = 21;
         $196 = $22;
         $197 = $196&255;
         $198 = $11;
         $199 = (($198) + 1)|0;
         $200 = (($27) + ($199)|0);
         HEAP8[$200>>0] = $197;
         $201 = $11;
         $202 = (($201) + 2)|0;
         $203 = (($27) + ($202)|0);
         HEAP8[$203>>0] = 0;
        }
       }
      }
     }
    }
   }
  }
 }
 $204 = HEAP8[$25>>0]|0;
 $205 = $204 << 24 >> 24;
 $206 = ($205|0)==(0);
 if ($206) {
  $207 = $18;
  $208 = ($207|0)!=(0);
  if ($208) {
   $209 = $18;
   $210 = HEAP32[19149]|0;
   $211 = ((($210)) + 300|0);
   $212 = HEAP32[$211>>2]|0;
   $213 = ($209|0)==($212|0);
   if ($213) {
    $214 = HEAP32[19149]|0;
    $215 = ((($214)) + 304|0);
    $216 = HEAP32[$215>>2]|0;
    $20 = $216;
   } else {
    label = 38;
   }
  } else {
   label = 38;
  }
  do {
   if ((label|0) == 38) {
    $217 = $17;
    $218 = ($217|0)!=(0|0);
    if ($218) {
     $219 = $17;
     $220 = ((($219)) + 12|0);
     $221 = HEAP32[$220>>2]|0;
     $222 = ($221|0)!=(0);
     if ($222) {
      $223 = $19;
      $224 = $223 & 2;
      $225 = ($224|0)!=(0);
      if (!($225)) {
       $226 = $17;
       $227 = ((($226)) + 12|0);
       $228 = HEAP32[$227>>2]|0;
       $20 = $228;
       break;
      }
     }
    }
    $20 = 25966;
   }
  } while(0);
  $229 = $20;
  $230 = $5;
  $231 = ((($230)) + 324|0);
  $232 = HEAP32[$231>>2]|0;
  $233 = ($229|0)!=($232|0);
  $234 = $20;
  $235 = ($234|0)==(27503);
  $or$cond = $233 | $235;
  if ($or$cond) {
   $236 = $20;
   $237 = (__Z13WordToString2j($236)|0);
   $238 = (__Z14SetTranslator2PKc($237)|0);
   $239 = $238&255;
   $240 = ((($25)) + 2|0);
   HEAP8[$240>>0] = $239;
   $241 = HEAP32[19150]|0;
   $242 = ($241|0)!=(0|0);
   if ($242) {
    $243 = HEAP32[$10>>2]|0;
    $244 = (($243) - 44032)|0;
    $31 = $244;
    $245 = ($244|0)>=(0);
    $246 = HEAP32[$10>>2]|0;
    $247 = ($246|0)<=(55215);
    $or$cond3 = $245 & $247;
    if ($or$cond3) {
     HEAP8[$32>>0] = 32;
     $248 = ((($32)) + 1|0);
     $29 = $248;
     $249 = $31;
     $250 = (($249|0) / 28)&-1;
     $251 = (($250|0) / 21)&-1;
     $30 = $251;
     $252 = ($251|0)!=(11);
     if ($252) {
      $253 = $30;
      $254 = (($253) + 4352)|0;
      $255 = $29;
      $256 = (__Z8utf8_outjPc($254,$255)|0);
      $257 = $29;
      $258 = (($257) + ($256)|0);
      $29 = $258;
     }
     $259 = $31;
     $260 = (($259|0) / 28)&-1;
     $261 = (($260|0) % 21)&-1;
     $262 = (($261) + 4449)|0;
     $263 = $29;
     (__Z8utf8_outjPc($262,$263)|0);
     $264 = $31;
     $265 = (($264|0) % 28)&-1;
     $266 = (($265) + 4519)|0;
     $267 = $29;
     $268 = ((($267)) + 3|0);
     (__Z8utf8_outjPc($266,$268)|0);
     $269 = $29;
     $270 = ((($269)) + 6|0);
     HEAP8[$270>>0] = 32;
     $271 = $29;
     $272 = ((($271)) + 7|0);
     HEAP8[$272>>0] = 0;
     $273 = ((($25)) + 3|0);
     HEAP8[$273>>0] = 0;
     $274 = HEAP32[19150]|0;
     $275 = ((($32)) + 1|0);
     $276 = ((($25)) + 3|0);
     (__Z14TranslateRulesP10TranslatorPcS1_iS1_iPj($274,$275,$276,77,0,0,0)|0);
     $277 = HEAP32[19150]|0;
     $278 = ((($25)) + 3|0);
     __Z13SetWordStressP10TranslatorPcPjii($277,$278,0,-1,0);
    } else {
     $279 = HEAP32[19150]|0;
     $280 = HEAP32[$10>>2]|0;
     $281 = $9;
     $282 = $6;
     $283 = (($282) + ($281)|0);
     $284 = HEAP8[$283>>0]|0;
     $285 = $284 << 24 >> 24;
     $286 = ((($25)) + 3|0);
     $287 = $8;
     $288 = $287 & 1;
     __Z12LookupLetterP10TranslatorjiPci($279,$280,$285,$286,$288);
    }
    $289 = ((($25)) + 3|0);
    $290 = HEAP8[$289>>0]|0;
    $291 = $290 << 24 >> 24;
    $292 = ($291|0)==(21);
    if ($292) {
     $293 = ((($25)) + 4|0);
     $294 = (__Z14SetTranslator2PKc($293)|0);
     $295 = $294&255;
     $296 = ((($25)) + 2|0);
     HEAP8[$296>>0] = $295;
     $297 = HEAP32[19150]|0;
     $298 = HEAP32[$10>>2]|0;
     $299 = $9;
     $300 = $6;
     $301 = (($300) + ($299)|0);
     $302 = HEAP8[$301>>0]|0;
     $303 = $302 << 24 >> 24;
     $304 = ((($25)) + 3|0);
     $305 = $8;
     $306 = $305 & 1;
     __Z12LookupLetterP10TranslatorjiPci($297,$298,$303,$304,$306);
    }
    $307 = HEAP32[1124]|0;
    $308 = ((($307)) + 60|0);
    $309 = HEAP32[$308>>2]|0;
    __Z18SelectPhonemeTablei($309);
    $310 = ((($25)) + 3|0);
    $311 = HEAP8[$310>>0]|0;
    $312 = $311 << 24 >> 24;
    $313 = ($312|0)!=(0);
    if ($313) {
     HEAP8[$25>>0] = 9;
     $314 = ((($25)) + 1|0);
     HEAP8[$314>>0] = 21;
     $315 = ((($25)) + 3|0);
     $316 = (_strlen($315)|0);
     $317 = (($316) + 3)|0;
     $11 = $317;
     $318 = $11;
     $319 = (($25) + ($318)|0);
     HEAP8[$319>>0] = 21;
     $320 = $5;
     $321 = ((($320)) + 404|0);
     $322 = HEAP32[$321>>2]|0;
     $323 = $322&255;
     $324 = $11;
     $325 = (($324) + 1)|0;
     $326 = (($25) + ($325)|0);
     HEAP8[$326>>0] = $323;
     $327 = $11;
     $328 = (($327) + 2)|0;
     $329 = (($25) + ($328)|0);
     HEAP8[$329>>0] = 0;
    }
   }
  }
 }
 $330 = HEAP8[$25>>0]|0;
 $331 = $330 << 24 >> 24;
 $332 = ($331|0)==(0);
 if ($332) {
  $333 = HEAP8[$25>>0]|0;
  $334 = $333 << 24 >> 24;
  $335 = ($334|0)==(0);
  if ($335) {
   $23 = 1;
   $336 = $19;
   $337 = $336 & 16;
   $338 = ($337|0)!=(0);
   if (!($338)) {
    $339 = HEAP32[$10>>2]|0;
    $340 = (__Z9iswalpha2i($339)|0);
    $341 = ($340|0)!=(0);
    if ($341) {
     $342 = HEAP32[19149]|0;
     (__Z6LookupP10TranslatorPKcPc($342,22252,$25)|0);
    }
    $343 = HEAP8[$25>>0]|0;
    $344 = $343 << 24 >> 24;
    $345 = ($344|0)==(0);
    if ($345) {
     $346 = HEAP32[$10>>2]|0;
     $347 = (_iswspace($346)|0);
     $348 = ($347|0)!=(0);
     if (!($348)) {
      $349 = HEAP32[19149]|0;
      (__Z6LookupP10TranslatorPKcPc($349,22256,$25)|0);
     }
    }
    $350 = HEAP8[$25>>0]|0;
    $351 = $350 << 24 >> 24;
    $352 = ($351|0)==(0);
    if ($352) {
     (__Z14EncodePhonemesPKcPcPi(22260,$25,0)|0);
    }
   }
   $353 = $8;
   $354 = $353 & 4;
   $355 = ($354|0)!=(0);
   if (!($355)) {
    $356 = $19;
    $357 = $356 & 8;
    $358 = ($357|0)!=(0);
    if ($358) {
     $23 = 0;
    }
   }
   $359 = $23;
   $360 = ($359|0)!=(0);
   if ($360) {
    $361 = $18;
    $362 = ($361|0)==(10240);
    if ($362) {
     $14 = $28;
     $12 = 0;
     while(1) {
      $363 = $12;
      $364 = ($363|0)<(8);
      if (!($364)) {
       break;
      }
      $365 = HEAP32[$10>>2]|0;
      $366 = $12;
      $367 = 1 << $366;
      $368 = $365 & $367;
      $369 = ($368|0)!=(0);
      if ($369) {
       $370 = $12;
       $371 = (49 + ($370))|0;
       $372 = $371&255;
       $373 = $14;
       $374 = ((($373)) + 1|0);
       $14 = $374;
       HEAP8[$373>>0] = $372;
      }
      $375 = $12;
      $376 = (($375) + 1)|0;
      $12 = $376;
     }
     $377 = $14;
     HEAP8[$377>>0] = 0;
    } else {
     $378 = HEAP32[$10>>2]|0;
     HEAP32[$vararg_buffer>>2] = $378;
     (_sprintf($28,22266,$vararg_buffer)|0);
    }
    $15 = $25;
    $14 = $28;
    while(1) {
     $379 = $14;
     $380 = HEAP8[$379>>0]|0;
     $381 = $380 << 24 >> 24;
     $382 = ($381|0)!=(0);
     $383 = $15;
     if (!($382)) {
      break;
     }
     $384 = (_strlen($383)|0);
     $385 = $15;
     $386 = (($385) + ($384)|0);
     $15 = $386;
     $387 = $15;
     $388 = ((($387)) + 1|0);
     $15 = $388;
     HEAP8[$387>>0] = 23;
     $389 = HEAP32[19149]|0;
     $390 = $14;
     $391 = HEAP8[$390>>0]|0;
     $392 = $391 << 24 >> 24;
     $393 = $15;
     __Z12LookupLetterP10TranslatorjiPci($389,$392,0,$393,1);
     $394 = $15;
     $395 = HEAP8[$394>>0]|0;
     $396 = $395 << 24 >> 24;
     $397 = ($396|0)==(0);
     if ($397) {
      label = 80;
     } else {
      $398 = $15;
      $399 = HEAP8[$398>>0]|0;
      $400 = $399 << 24 >> 24;
      $401 = ($400|0)==(21);
      if ($401) {
       label = 80;
      }
     }
     if ((label|0) == 80) {
      label = 0;
      $402 = $14;
      $403 = HEAP8[$402>>0]|0;
      $404 = $403 << 24 >> 24;
      $405 = ($404|0)>=(97);
      if ($405) {
       $406 = $14;
       $407 = HEAP8[$406>>0]|0;
       $408 = $407 << 24 >> 24;
       $409 = (($408) - 97)|0;
       $410 = (2856 + ($409<<2)|0);
       $411 = HEAP32[$410>>2]|0;
       $412 = $15;
       (__Z14EncodePhonemesPKcPcPi($411,$412,0)|0);
      }
     }
     $413 = $14;
     $414 = ((($413)) + 1|0);
     $14 = $414;
    }
    (_strcat($383,22269)|0);
   }
  }
 }
 $415 = $7;
 $416 = (_strlen($415)|0);
 $11 = $416;
 $417 = $5;
 $418 = ((($417)) + 240|0);
 $419 = HEAP32[$418>>2]|0;
 $420 = $419 & 2;
 $421 = ($420|0)!=(0);
 if ($421) {
  HEAP32[$vararg_buffer4>>2] = 255;
  $vararg_ptr7 = ((($vararg_buffer4)) + 4|0);
  HEAP32[$vararg_ptr7>>2] = $27;
  $vararg_ptr8 = ((($vararg_buffer4)) + 8|0);
  HEAP32[$vararg_ptr8>>2] = $25;
  $vararg_ptr9 = ((($vararg_buffer4)) + 12|0);
  HEAP32[$vararg_ptr9>>2] = $24;
  (_sprintf($26,22271,$vararg_buffer4)|0);
 } else {
  HEAP32[$vararg_buffer10>>2] = 255;
  $vararg_ptr13 = ((($vararg_buffer10)) + 4|0);
  HEAP32[$vararg_ptr13>>2] = $27;
  $vararg_ptr14 = ((($vararg_buffer10)) + 8|0);
  HEAP32[$vararg_ptr14>>2] = $24;
  $vararg_ptr15 = ((($vararg_buffer10)) + 12|0);
  HEAP32[$vararg_ptr15>>2] = $25;
  (_sprintf($26,22271,$vararg_buffer10)|0);
 }
 $422 = $11;
 $423 = (_strlen($26)|0);
 $424 = (($422) + ($423))|0;
 $425 = ($424>>>0)<(200);
 if ($425) {
  $426 = $11;
  $427 = $7;
  $428 = (($427) + ($426)|0);
  (_strcpy($428,$26)|0);
 }
 $429 = $9;
 $4 = $429;
 $430 = $4;
 STACKTOP = sp;return ($430|0);
}
function __Z17SetSpellingStressP10TranslatorPcii($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0;
 var $85 = 0, $86 = 0, $9 = 0, $or$cond = 0, $or$cond3 = 0, $or$cond5 = 0, $or$cond7 = 0, $or$cond9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 240|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(240|0);
 $13 = sp + 40|0;
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $3;
 $10 = 0;
 $11 = 0;
 $8 = 0;
 while(1) {
  $14 = $8;
  $15 = $5;
  $16 = (($15) + ($14)|0);
  $17 = HEAP8[$16>>0]|0;
  $18 = $17 << 24 >> 24;
  $9 = $18;
  $19 = ($18|0)!=(0);
  if (!($19)) {
   break;
  }
  $20 = $9;
  $21 = ($20|0)==(6);
  $22 = $11;
  $23 = ($22|0)!=(21);
  $or$cond = $21 & $23;
  if ($or$cond) {
   $24 = $10;
   $25 = (($24) + 1)|0;
   $10 = $25;
  }
  $26 = $9;
  $11 = $26;
  $27 = $26&255;
  $28 = $8;
  $29 = (($13) + ($28)|0);
  HEAP8[$29>>0] = $27;
  $30 = $8;
  $31 = (($30) + 1)|0;
  $8 = $31;
 }
 $32 = $8;
 $33 = (($13) + ($32)|0);
 HEAP8[$33>>0] = 0;
 $12 = 0;
 $11 = 0;
 $8 = 0;
 while(1) {
  $34 = $8;
  $35 = (($13) + ($34)|0);
  $36 = HEAP8[$35>>0]|0;
  $37 = $36&255;
  $9 = $37;
  $38 = ($37|0)!=(0);
  if (!($38)) {
   break;
  }
  $39 = $9;
  $40 = ($39|0)==(6);
  $41 = $7;
  $42 = ($41|0)>(1);
  $or$cond3 = $40 & $42;
  $43 = $11;
  $44 = ($43|0)!=(21);
  $or$cond5 = $or$cond3 & $44;
  do {
   if ($or$cond5) {
    $45 = $12;
    $46 = (($45) + 1)|0;
    $12 = $46;
    $47 = $4;
    $48 = ((($47)) + 269|0);
    $49 = HEAP8[$48>>0]|0;
    $50 = $49 << 24 >> 24;
    $51 = ($50|0)==(1);
    $52 = $12;
    if ($51) {
     $53 = ($52|0)>(1);
     if (!($53)) {
      label = 23;
      break;
     }
     $9 = 5;
     label = 23;
     break;
    }
    $54 = $10;
    $55 = ($52|0)!=($54|0);
    if ($55) {
     $56 = $12;
     $57 = (($56|0) % 3)&-1;
     $58 = ($57|0)!=(0);
     if (!($58)) {
      $59 = $12;
      $60 = $10;
      $61 = (($60) - 1)|0;
      $62 = ($59|0)==($61|0);
      if (!($62)) {
       label = 23;
       break;
      }
     }
     $9 = 5;
     label = 23;
    } else {
     label = 23;
    }
   } else {
    $63 = $9;
    $64 = ($63|0)==(255);
    if ($64) {
     $65 = $6;
     $66 = ($65|0)<(2);
     $67 = $8;
     $68 = ($67|0)==(0);
     $or$cond7 = $66 | $68;
     if (!($or$cond7)) {
      $69 = $6;
      $70 = ($69|0)==(4);
      if ($70) {
       $9 = 9;
      }
      $71 = $12;
      $72 = (($71|0) % 3)&-1;
      $73 = ($72|0)==(0);
      $74 = $6;
      $75 = ($74|0)>(2);
      $or$cond9 = $73 | $75;
      if ($or$cond9) {
       $9 = 11;
       label = 23;
       break;
      } else {
       $9 = 23;
       label = 23;
       break;
      }
     }
    } else {
     label = 23;
    }
   }
  } while(0);
  if ((label|0) == 23) {
   label = 0;
   $76 = $9;
   $11 = $76;
   $77 = $76&255;
   $78 = $5;
   $79 = ((($78)) + 1|0);
   $5 = $79;
   HEAP8[$78>>0] = $77;
  }
  $80 = $8;
  $81 = (($80) + 1)|0;
  $8 = $81;
 }
 $82 = $6;
 $83 = ($82|0)>=(2);
 if (!($83)) {
  $86 = $5;
  HEAP8[$86>>0] = 0;
  STACKTOP = sp;return;
 }
 $84 = $5;
 $85 = ((($84)) + 1|0);
 $5 = $85;
 HEAP8[$84>>0] = 11;
 $86 = $5;
 HEAP8[$86>>0] = 0;
 STACKTOP = sp;return;
}
function __Z14TranslateRomanP10TranslatorPcS1_P8WORD_TAB($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0;
 var $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0;
 var $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0;
 var $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0;
 var $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0;
 var $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond = 0, $or$cond3 = 0, $vararg_buffer = 0, $vararg_ptr4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 288|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(288|0);
 $vararg_buffer = sp;
 $24 = sp + 8|0;
 $25 = sp + 256|0;
 $26 = sp + 96|0;
 $9 = $0;
 $10 = $1;
 $11 = $2;
 $12 = $3;
 $20 = 0;
 $21 = 0;
 $23 = 0;
 $16 = 0;
 $17 = 0;
 $19 = 32767;
 $27 = $11;
 HEAP8[$27>>0] = 0;
 HEAP32[$24>>2] = 0;
 $28 = ((($24)) + 4|0);
 HEAP32[$28>>2] = 0;
 $29 = $9;
 $30 = ((($29)) + 200|0);
 $31 = HEAP32[$30>>2]|0;
 $32 = $31 & 33554432;
 $33 = ($32|0)!=(0);
 if ($33) {
  $34 = $12;
  $35 = HEAP32[$34>>2]|0;
  $36 = $35 & 1;
  $37 = ($36|0)!=(0);
  if ($37) {
   label = 3;
  }
 } else {
  label = 3;
 }
 if ((label|0) == 3) {
  $38 = $10;
  $39 = ((($38)) + -2|0);
  $40 = HEAP8[$39>>0]|0;
  $41 = $40 << 24 >> 24;
  $42 = (__Z9IsDigit09j($41)|0);
  $43 = ($42|0)!=(0);
  if (!($43)) {
   $44 = $10;
   $45 = ((($44)) + 1|0);
   $46 = HEAP8[$45>>0]|0;
   $47 = $46 << 24 >> 24;
   $48 = ($47|0)==(32);
   if ($48) {
    $8 = 0;
    $197 = $8;
    STACKTOP = sp;return ($197|0);
   }
   $49 = $10;
   $22 = $49;
   while(1) {
    $50 = $10;
    $51 = ((($50)) + 1|0);
    $10 = $51;
    $52 = HEAP8[$50>>0]|0;
    $53 = $52 << 24 >> 24;
    $13 = $53;
    $54 = ($53|0)!=(32);
    if (!($54)) {
     label = 28;
     break;
    }
    $55 = HEAP32[720]|0;
    $56 = $13;
    $6 = $55;
    $7 = $56;
    $57 = $6;
    $58 = $7;
    $4 = $57;
    $5 = $58;
    $59 = $4;
    $60 = $5;
    $61 = (_strchr($59,$60)|0);
    $15 = $61;
    $62 = ($61|0)==(0|0);
    if ($62) {
     label = 10;
     break;
    }
    $63 = $15;
    $64 = HEAP32[720]|0;
    $65 = $63;
    $66 = $64;
    $67 = (($65) - ($66))|0;
    $68 = (2884 + ($67<<2)|0);
    $69 = HEAP32[$68>>2]|0;
    $18 = $69;
    $70 = $18;
    $71 = $17;
    $72 = ($70|0)==($71|0);
    if ($72) {
     $73 = $20;
     $74 = (($73) + 1)|0;
     $20 = $74;
     $75 = $20;
     $76 = ($75|0)>=(3);
     if ($76) {
      label = 13;
      break;
     }
    } else {
     $20 = 0;
    }
    $77 = $17;
    $78 = ($77|0)>(1);
    $79 = $17;
    $80 = ($79|0)!=(10);
    $or$cond = $78 & $80;
    $81 = $17;
    $82 = ($81|0)!=(100);
    $or$cond3 = $or$cond & $82;
    if ($or$cond3) {
     $83 = $18;
     $84 = $17;
     $85 = ($83|0)>=($84|0);
     if ($85) {
      label = 17;
      break;
     }
    }
    $86 = $17;
    $87 = ($86|0)!=(0);
    if ($87) {
     $88 = $17;
     $89 = $18;
     $90 = ($88|0)<($89|0);
     if ($90) {
      $91 = $16;
      $92 = (($91|0) % 10)&-1;
      $93 = ($92|0)!=(0);
      if ($93) {
       label = 22;
       break;
      }
      $94 = $17;
      $95 = ($94*10)|0;
      $96 = $18;
      $97 = ($95|0)<($96|0);
      if ($97) {
       label = 22;
       break;
      }
      $98 = $17;
      $19 = $98;
      $99 = $19;
      $100 = $18;
      $101 = (($100) - ($99))|0;
      $18 = $101;
     } else {
      label = 24;
     }
    } else {
     label = 24;
    }
    if ((label|0) == 24) {
     label = 0;
     $102 = $18;
     $103 = $19;
     $104 = ($102|0)>=($103|0);
     if ($104) {
      label = 25;
      break;
     }
     $105 = $17;
     $106 = $16;
     $107 = (($106) + ($105))|0;
     $16 = $107;
    }
    $108 = $18;
    $17 = $108;
    $109 = $21;
    $110 = (($109) + 1)|0;
    $21 = $110;
   }
   if ((label|0) == 10) {
    $8 = 0;
    $197 = $8;
    STACKTOP = sp;return ($197|0);
   }
   else if ((label|0) == 13) {
    $8 = 0;
    $197 = $8;
    STACKTOP = sp;return ($197|0);
   }
   else if ((label|0) == 17) {
    $8 = 0;
    $197 = $8;
    STACKTOP = sp;return ($197|0);
   }
   else if ((label|0) == 22) {
    $8 = 0;
    $197 = $8;
    STACKTOP = sp;return ($197|0);
   }
   else if ((label|0) == 25) {
    $8 = 0;
    $197 = $8;
    STACKTOP = sp;return ($197|0);
   }
   else if ((label|0) == 28) {
    $111 = $10;
    $112 = HEAP8[$111>>0]|0;
    $113 = $112 << 24 >> 24;
    $114 = (__Z9IsDigit09j($113)|0);
    $115 = ($114|0)!=(0);
    if ($115) {
     $8 = 0;
     $197 = $8;
     STACKTOP = sp;return ($197|0);
    }
    $116 = $17;
    $117 = $16;
    $118 = (($117) + ($116))|0;
    $16 = $118;
    $119 = $16;
    $120 = $9;
    $121 = ((($120)) + 216|0);
    $122 = HEAP32[$121>>2]|0;
    $123 = ($119|0)<($122|0);
    if ($123) {
     $8 = 0;
     $197 = $8;
     STACKTOP = sp;return ($197|0);
    }
    $124 = $16;
    $125 = $9;
    $126 = ((($125)) + 212|0);
    $127 = HEAP32[$126>>2]|0;
    $128 = ($124|0)>($127|0);
    if ($128) {
     $8 = 0;
     $197 = $8;
     STACKTOP = sp;return ($197|0);
    }
    $129 = $9;
    (__Z6LookupP10TranslatorPKcPc($129,22318,$25)|0);
    $130 = $11;
    $14 = $130;
    $131 = $9;
    $132 = ((($131)) + 200|0);
    $133 = HEAP32[$132>>2]|0;
    $134 = $133 & 67108864;
    $135 = ($134|0)==(0);
    if ($135) {
     $136 = $11;
     (_strcpy($136,$25)|0);
     $137 = (_strlen($25)|0);
     $138 = $11;
     $139 = (($138) + ($137)|0);
     $14 = $139;
    }
    $140 = $16;
    $141 = $9;
    $142 = ((($141)) + 236|0);
    $143 = HEAP32[$142>>2]|0;
    HEAP32[$vararg_buffer>>2] = $140;
    $vararg_ptr4 = ((($vararg_buffer)) + 4|0);
    HEAP32[$vararg_ptr4>>2] = $143;
    (_sprintf($26,22325,$vararg_buffer)|0);
    $144 = $10;
    $145 = HEAP8[$144>>0]|0;
    $146 = $145 << 24 >> 24;
    $147 = ($146|0)==(46);
    if ($147) {
     $8 = 0;
     $197 = $8;
     STACKTOP = sp;return ($197|0);
    }
    $148 = $9;
    $149 = $22;
    $150 = $10;
    $151 = $12;
    $152 = (__ZL15CheckDotOrdinalP10TranslatorPcS1_P8WORD_TABi($148,$149,$150,$151,1)|0);
    $153 = ($152|0)!=(0);
    if ($153) {
     $154 = $12;
     $155 = HEAP32[$154>>2]|0;
     $156 = $155 | 32768;
     HEAP32[$154>>2] = $156;
    }
    $157 = $9;
    $158 = ((($157)) + 200|0);
    $159 = HEAP32[$158>>2]|0;
    $160 = $159 & 134217728;
    $161 = ($160|0)!=(0);
    do {
     if ($161) {
      $162 = $9;
      $163 = ((($162)) + 324|0);
      $164 = HEAP32[$163>>2]|0;
      $165 = ($164|0)==(26741);
      $166 = $12;
      $167 = HEAP32[$166>>2]|0;
      if (!($165)) {
       $180 = $167 | 32768;
       HEAP32[$166>>2] = $180;
       break;
      }
      $168 = $167 & 32768;
      $169 = ($168|0)!=(0);
      if (!($169)) {
       $170 = $12;
       $171 = HEAP32[$170>>2]|0;
       $172 = $171 & 16384;
       $173 = ($172|0)!=(0);
       if ($173) {
        $174 = $10;
        $175 = $16;
        $176 = (__ZL11hu_number_ePKcii($174,0,$175)|0);
        $177 = ($176|0)!=(0);
        if ($177) {
         $178 = $23;
         $179 = $178 | 1;
         $23 = $179;
         break;
        }
       }
       $8 = 0;
       $197 = $8;
       STACKTOP = sp;return ($197|0);
      }
     }
    } while(0);
    $181 = $9;
    $182 = ((($181)) + 8352|0);
    HEAP32[$182>>2] = 0;
    $183 = $9;
    $184 = ((($183)) + 8352|0);
    $185 = ((($184)) + 4|0);
    HEAP32[$185>>2] = 0;
    $186 = $9;
    $187 = ((($26)) + 2|0);
    $188 = $14;
    $189 = $12;
    $190 = $23;
    (__Z15TranslateNumberP10TranslatorPcS1_PjP8WORD_TABi($186,$187,$188,$24,$189,$190)|0);
    $191 = $9;
    $192 = ((($191)) + 200|0);
    $193 = HEAP32[$192>>2]|0;
    $194 = $193 & 67108864;
    $195 = ($194|0)!=(0);
    if ($195) {
     $196 = $11;
     (_strcat($196,$25)|0);
    }
    $8 = 1;
    $197 = $8;
    STACKTOP = sp;return ($197|0);
   }
  }
 }
 $8 = 0;
 $197 = $8;
 STACKTOP = sp;return ($197|0);
}
function __ZL15CheckDotOrdinalP10TranslatorPcS1_P8WORD_TABi($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0;
 var $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0;
 var $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0;
 var $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0;
 var $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $11 = sp + 4|0;
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $9 = $4;
 $10 = 0;
 $13 = $5;
 $14 = ((($13)) + 200|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = $15 & 65536;
 $17 = ($16|0)!=(0);
 do {
  if ($17) {
   $18 = $7;
   $19 = HEAP8[$18>>0]|0;
   $20 = $19 << 24 >> 24;
   $21 = ($20|0)==(46);
   if (!($21)) {
    $22 = $8;
    $23 = HEAP32[$22>>2]|0;
    $24 = $23 & 65536;
    $25 = ($24|0)!=(0);
    if (!($25)) {
     break;
    }
   }
   $26 = $8;
   $27 = ((($26)) + 12|0);
   $28 = HEAP32[$27>>2]|0;
   $29 = $28 & 256;
   $30 = ($29|0)!=(0);
   if (!($30)) {
    $31 = $9;
    $32 = ($31|0)!=(0);
    if (!($32)) {
     $33 = $8;
     $34 = ((($33)) + 12|0);
     $35 = HEAP32[$34>>2]|0;
     $36 = $35 & 2;
     $37 = ($36|0)!=(0);
     if ($37) {
      break;
     }
    }
    $38 = $7;
    $39 = HEAP8[$38>>0]|0;
    $40 = $39 << 24 >> 24;
    $41 = ($40|0)==(46);
    $42 = $7;
    if ($41) {
     $43 = ((($42)) + 2|0);
     (__Z7utf8_inPiPKc($11,$43)|0);
    } else {
     (__Z7utf8_inPiPKc($11,$42)|0);
    }
    $44 = $7;
    $45 = HEAP8[$44>>0]|0;
    $46 = $45 << 24 >> 24;
    $47 = ($46|0)!=(0);
    if ($47) {
     $48 = $7;
     $49 = ((($48)) + 1|0);
     $50 = HEAP8[$49>>0]|0;
     $51 = $50 << 24 >> 24;
     $52 = ($51|0)!=(0);
     if ($52) {
      $53 = HEAP32[$11>>2]|0;
      $54 = ($53|0)==(0);
      if (!($54)) {
       $55 = $8;
       $56 = HEAP32[$55>>2]|0;
       $57 = $56 & 131072;
       $58 = ($57|0)!=(0);
       if (!($58)) {
        $59 = HEAP32[$11>>2]|0;
        $60 = (__Z7IsAlphaj($59)|0);
        $61 = ($60|0)!=(0);
        if (!($61)) {
         break;
        }
       }
      }
      $10 = 2;
      $62 = $7;
      $63 = HEAP8[$62>>0]|0;
      $64 = $63 << 24 >> 24;
      $65 = ($64|0)==(46);
      if ($65) {
       $66 = $7;
       HEAP8[$66>>0] = 32;
      }
      $67 = $9;
      $68 = ($67|0)==(0);
      if ($68) {
       $69 = $5;
       $70 = ((($69)) + 324|0);
       $71 = HEAP32[$70>>2]|0;
       $72 = ($71|0)==(26741);
       if ($72) {
        $12 = 0;
        $73 = HEAP32[$11>>2]|0;
        $74 = (__Z7IsAlphaj($73)|0);
        $75 = ($74|0)!=(0);
        if ($75) {
         $76 = $5;
         $77 = $7;
         $78 = ((($77)) + 2|0);
         $79 = (__Z13TranslateWordP10TranslatorPciP8WORD_TABS1_($76,$78,0,0,0)|0);
         $12 = $79;
        }
        $80 = $5;
        $81 = ((($80)) + 8352|0);
        $82 = HEAP32[$81>>2]|0;
        $83 = $82 & 32768;
        $84 = ($83|0)!=(0);
        do {
         if ($84) {
          $85 = HEAP32[$11>>2]|0;
          $86 = ($85|0)==(0);
          if (!($86)) {
           $87 = $8;
           $88 = HEAP32[$87>>2]|0;
           $89 = $88 & 131072;
           $90 = ($89|0)!=(0);
           if (!($90)) {
            $91 = HEAP32[$11>>2]|0;
            $92 = (_iswdigit($91)|0);
            $93 = ($92|0)!=(0);
            if (!($93)) {
             break;
            }
           }
          }
          $10 = 0;
         }
        } while(0);
        $94 = $12;
        $95 = $94 & 32768;
        $96 = ($95|0)!=(0);
        if ($96) {
         $10 = 0;
        }
        $97 = $12;
        $98 = $97 & 131072;
        $99 = ($98|0)!=(0);
        if ($99) {
         $100 = $6;
         $101 = ((($100)) + -2|0);
         $102 = HEAP8[$101>>0]|0;
         $103 = $102 << 24 >> 24;
         $104 = ($103|0)==(45);
         if ($104) {
          $10 = 0;
         }
         $105 = $5;
         $106 = ((($105)) + 8352|0);
         $107 = HEAP32[$106>>2]|0;
         $108 = $107 & 163840;
         $109 = ($108|0)!=(0);
         if ($109) {
          $10 = 34;
         }
        }
       }
      }
     }
    }
   }
  }
 } while(0);
 $110 = $10;
 STACKTOP = sp;return ($110|0);
}
function __ZL11hu_number_ePKcii($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $4;
 $8 = HEAP8[$7>>0]|0;
 $9 = $8 << 24 >> 24;
 $10 = ($9|0)==(97);
 if (!($10)) {
  $11 = $4;
  $12 = HEAP8[$11>>0]|0;
  $13 = $12 << 24 >> 24;
  $14 = ($13|0)==(101);
  if (!($14)) {
   $3 = 0;
   $45 = $3;
   STACKTOP = sp;return ($45|0);
  }
 }
 $15 = $4;
 $16 = ((($15)) + 1|0);
 $17 = HEAP8[$16>>0]|0;
 $18 = $17 << 24 >> 24;
 $19 = ($18|0)==(32);
 do {
  if (!($19)) {
   $20 = $4;
   $21 = ((($20)) + 1|0);
   $22 = HEAP8[$21>>0]|0;
   $23 = $22 << 24 >> 24;
   $24 = ($23|0)==(122);
   if (!($24)) {
    $25 = $4;
    $26 = ((($25)) + 1|0);
    $27 = HEAP8[$26>>0]|0;
    $28 = $27 << 24 >> 24;
    $29 = ($28|0)==(116);
    if ($29) {
     $30 = $4;
     $31 = ((($30)) + 2|0);
     $32 = HEAP8[$31>>0]|0;
     $33 = $32 << 24 >> 24;
     $34 = ($33|0)==(116);
     if ($34) {
      break;
     }
    }
    $35 = $5;
    $36 = ($35|0)==(1);
    if ($36) {
     label = 10;
    } else {
     $37 = $6;
     $38 = (($37|0) % 1000)&-1;
     $39 = ($38|0)==(0);
     if ($39) {
      label = 10;
     }
    }
    if ((label|0) == 10) {
     $40 = $4;
     $41 = ((($40)) + 1|0);
     $42 = HEAP8[$41>>0]|0;
     $43 = $42 << 24 >> 24;
     $44 = ($43|0)==(108);
     if ($44) {
      $3 = 0;
      $45 = $3;
      STACKTOP = sp;return ($45|0);
     }
    }
    $3 = 1;
    $45 = $3;
    STACKTOP = sp;return ($45|0);
   }
  }
 } while(0);
 $3 = 0;
 $45 = $3;
 STACKTOP = sp;return ($45|0);
}
function __Z15TranslateNumberP10TranslatorPcS1_PjP8WORD_TABi($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $7 = $0;
 $8 = $1;
 $9 = $2;
 $10 = $3;
 $11 = $4;
 $12 = $5;
 $13 = HEAP32[19160]|0;
 $14 = ($13|0)==(193);
 if (!($14)) {
  $15 = $11;
  $16 = HEAP32[$15>>2]|0;
  $17 = $16 & 524288;
  $18 = ($17|0)!=(0);
  if (!($18)) {
   $19 = $7;
   $20 = ((($19)) + 200|0);
   $21 = HEAP32[$20>>2]|0;
   $22 = ($21|0)!=(0);
   if ($22) {
    $23 = $7;
    $24 = $8;
    $25 = $9;
    $26 = $10;
    $27 = $11;
    $28 = $12;
    $29 = (__ZL17TranslateNumber_1P10TranslatorPcS1_PjP8WORD_TABi($23,$24,$25,$26,$27,$28)|0);
    $6 = $29;
    $30 = $6;
    STACKTOP = sp;return ($30|0);
   } else {
    $6 = 0;
    $30 = $6;
    STACKTOP = sp;return ($30|0);
   }
  }
 }
 $6 = 0;
 $30 = $6;
 STACKTOP = sp;return ($30|0);
}
function __ZL17TranslateNumber_1P10TranslatorPcS1_PjP8WORD_TABi($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$ = 0, $$old = 0, $$old20 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0;
 var $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0;
 var $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0;
 var $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0;
 var $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0;
 var $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0;
 var $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0;
 var $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0;
 var $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0;
 var $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0;
 var $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0;
 var $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0;
 var $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0;
 var $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0;
 var $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0;
 var $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0;
 var $497 = 0, $498 = 0, $499 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0;
 var $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0;
 var $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0;
 var $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0;
 var $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0;
 var $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0;
 var $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0;
 var $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0;
 var $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0;
 var $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0;
 var $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0;
 var $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0;
 var $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0;
 var $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond = 0, $or$cond10 = 0, $or$cond12 = 0, $or$cond14 = 0, $or$cond17 = 0, $or$cond19 = 0, $or$cond21 = 0, $or$cond24 = 0, $or$cond27 = 0, $or$cond30 = 0, $or$cond6 = 0, $or$cond8 = 0, $switch$split1052D = 0, $switch$split1082D = 0;
 var $switch$split1112D = 0, $switch$split1142D = 0, $switch$split1172D = 0, $switch$split2D = 0, $vararg_buffer = 0, $vararg_buffer31 = 0, $vararg_buffer34 = 0, $vararg_buffer37 = 0, $vararg_buffer40 = 0, $vararg_buffer43 = 0, $vararg_buffer50 = 0, $vararg_buffer57 = 0, $vararg_buffer60 = 0, $vararg_buffer63 = 0, $vararg_ptr46 = 0, $vararg_ptr47 = 0, $vararg_ptr48 = 0, $vararg_ptr49 = 0, $vararg_ptr53 = 0, $vararg_ptr54 = 0;
 var $vararg_ptr55 = 0, $vararg_ptr56 = 0, $vararg_ptr66 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 816|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(816|0);
 $vararg_buffer63 = sp + 104|0;
 $vararg_buffer60 = sp + 96|0;
 $vararg_buffer57 = sp + 88|0;
 $vararg_buffer50 = sp + 64|0;
 $vararg_buffer43 = sp + 40|0;
 $vararg_buffer40 = sp + 32|0;
 $vararg_buffer37 = sp + 24|0;
 $vararg_buffer34 = sp + 16|0;
 $vararg_buffer31 = sp + 8|0;
 $vararg_buffer = sp;
 $33 = sp + 124|0;
 $34 = sp + 768|0;
 $35 = sp + 668|0;
 $36 = sp + 616|0;
 $37 = sp + 416|0;
 $38 = sp + 362|0;
 $39 = sp + 312|0;
 $40 = sp + 282|0;
 $41 = sp + 232|0;
 $42 = sp + 120|0;
 $43 = sp + 116|0;
 $7 = $0;
 $8 = $1;
 $9 = $2;
 $10 = $3;
 $11 = $4;
 $12 = $5;
 $18 = 0;
 $19 = 0;
 $20 = 0;
 $21 = 1;
 $22 = 0;
 $23 = 0;
 $24 = 0;
 $30 = 0;
 $45 = $10;
 HEAP32[$45>>2] = 0;
 HEAP32[11236] = 0;
 HEAP8[$41>>0] = 0;
 HEAP32[11237] = $41;
 $46 = $12;
 HEAP32[11238] = $46;
 $15 = 0;
 while(1) {
  $47 = $15;
  $48 = $8;
  $49 = (($48) + ($47)|0);
  $50 = HEAP8[$49>>0]|0;
  $51 = $50 << 24 >> 24;
  $52 = (__Z9IsDigit09j($51)|0);
  $53 = ($52|0)!=(0);
  $54 = $15;
  if (!($53)) {
   break;
  }
  $55 = (($54) + 1)|0;
  $15 = $55;
 }
 $13 = $54;
 $56 = $8;
 $57 = (_atoi($56)|0);
 $25 = $57;
 $14 = $57;
 $31 = 3;
 $58 = $7;
 $59 = ((($58)) + 204|0);
 $60 = HEAP32[$59>>2]|0;
 $61 = $60 & 16384;
 $62 = ($61|0)!=(0);
 $$ = $62 ? 4 : 3;
 $31 = $$;
 $63 = $13;
 $64 = $31;
 $65 = ($63|0)==($64|0);
 if ($65) {
  $66 = $8;
  $67 = ((($66)) + -2|0);
  $68 = HEAP8[$67>>0]|0;
  $69 = $68 << 24 >> 24;
  $70 = $7;
  $71 = ((($70)) + 220|0);
  $72 = HEAP32[$71>>2]|0;
  $73 = ($69|0)==($72|0);
  if ($73) {
   $74 = $8;
   $75 = ((($74)) + -3|0);
   $76 = HEAP8[$75>>0]|0;
   $77 = $76 << 24 >> 24;
   $78 = (__Z9IsDigit09j($77)|0);
   $79 = ($78|0)!=(0);
   if ($79) {
    $23 = 1;
   } else {
    label = 8;
   }
  } else {
   label = 8;
  }
 } else {
  label = 8;
 }
 do {
  if ((label|0) == 8) {
   $80 = $7;
   $81 = ((($80)) + 220|0);
   $82 = HEAP32[$81>>2]|0;
   $83 = ($82|0)==(32);
   if ($83) {
    $$old = $13;
    $$old20 = ($$old|0)==(3);
    if (!($$old20)) {
     break;
    }
   } else {
    $84 = $7;
    $85 = ((($84)) + 200|0);
    $86 = HEAP32[$85>>2]|0;
    $87 = $86 & 4096;
    $88 = ($87|0)!=(0);
    $89 = $13;
    $90 = ($89|0)==(3);
    $or$cond21 = $88 & $90;
    if (!($or$cond21)) {
     break;
    }
   }
   $91 = $11;
   $92 = HEAP32[$91>>2]|0;
   $93 = $92 & 262144;
   $94 = ($93|0)!=(0);
   if (!($94)) {
    $95 = $8;
    $96 = ((($95)) + -2|0);
    $97 = HEAP8[$96>>0]|0;
    $98 = $97 << 24 >> 24;
    $99 = (__Z9IsDigit09j($98)|0);
    $100 = ($99|0)!=(0);
    if ($100) {
     $23 = 1;
    }
   }
  }
 } while(0);
 $101 = $23;
 $102 = ($101|0)==(0);
 if ($102) {
  HEAP32[11239] = 0;
 }
 HEAP8[120143] = 0;
 HEAP8[$39>>0] = 0;
 $103 = $23;
 $104 = ($103|0)!=(0);
 if ($104) {
  label = 18;
 } else {
  $105 = $8;
  $106 = HEAP8[$105>>0]|0;
  $107 = $106 << 24 >> 24;
  $108 = ($107|0)!=(48);
  if ($108) {
   label = 18;
  }
 }
 if ((label|0) == 18) {
  $109 = $7;
  $110 = $8;
  $111 = $15;
  $112 = $8;
  $113 = (($112) + ($111)|0);
  $114 = $11;
  $115 = (__ZL15CheckDotOrdinalP10TranslatorPcS1_P8WORD_TABi($109,$110,$113,$114,0)|0);
  $24 = $115;
 }
 $116 = $15;
 $117 = $8;
 $118 = (($117) + ($116)|0);
 $119 = HEAP8[$118>>0]|0;
 $120 = $119 << 24 >> 24;
 $121 = ($120|0)==(46);
 if ($121) {
  $122 = $15;
  $123 = (($122) + 1)|0;
  $124 = $8;
  $125 = (($124) + ($123)|0);
  $126 = HEAP8[$125>>0]|0;
  $127 = $126 << 24 >> 24;
  $128 = (__Z9IsDigit09j($127)|0);
  $129 = ($128|0)!=(0);
  if (!($129)) {
   $130 = $15;
   $131 = (($130) + 2)|0;
   $132 = $8;
   $133 = (($132) + ($131)|0);
   $134 = HEAP8[$133>>0]|0;
   $135 = $134 << 24 >> 24;
   $136 = (__Z9IsDigit09j($135)|0);
   $137 = ($136|0)!=(0);
   if (!($137)) {
    $138 = $11;
    $139 = ((($138)) + 12|0);
    $140 = HEAP32[$139>>2]|0;
    $141 = $140 & 256;
    $142 = ($141|0)!=(0);
    if (!($142)) {
     $143 = $15;
     $144 = $8;
     $145 = (($144) + ($143)|0);
     HEAP8[$145>>0] = 0;
    }
   }
  }
 }
 $146 = $24;
 $147 = ($146|0)==(0);
 if ($147) {
  label = 26;
 } else {
  $148 = $7;
  $149 = ((($148)) + 324|0);
  $150 = HEAP32[$149>>2]|0;
  $151 = ($150|0)==(26741);
  if ($151) {
   label = 26;
  }
 }
 do {
  if ((label|0) == 26) {
   $152 = $15;
   $153 = (($152) + 1)|0;
   $15 = $153;
   HEAP32[$33>>2] = $40;
   $154 = $11;
   $155 = HEAP32[$154>>2]|0;
   $156 = $155 & 16384;
   $157 = ($156|0)!=(0);
   if ($157) {
    $158 = HEAP32[$33>>2]|0;
    $159 = ((($158)) + 1|0);
    HEAP32[$33>>2] = $159;
    HEAP8[$158>>0] = 45;
    $160 = $15;
    $161 = (($160) + 1)|0;
    $15 = $161;
   }
   while(1) {
    $162 = $15;
    $163 = $8;
    $164 = (($163) + ($162)|0);
    $165 = HEAP8[$164>>0]|0;
    $166 = $165 << 24 >> 24;
    $167 = ($166|0)!=(0);
    if (!($167)) {
     break;
    }
    $168 = $15;
    $169 = $8;
    $170 = (($169) + ($168)|0);
    $171 = HEAP8[$170>>0]|0;
    $172 = $171 << 24 >> 24;
    $173 = ($172|0)!=(32);
    $174 = $15;
    $175 = ($174|0)<(29);
    $or$cond24 = $173 & $175;
    if (!($or$cond24)) {
     break;
    }
    $176 = $15;
    $177 = (($176) + 1)|0;
    $15 = $177;
    $178 = $8;
    $179 = (($178) + ($176)|0);
    $180 = HEAP8[$179>>0]|0;
    $181 = HEAP32[$33>>2]|0;
    $182 = ((($181)) + 1|0);
    HEAP32[$33>>2] = $182;
    HEAP8[$181>>0] = $180;
   }
   $183 = HEAP32[$33>>2]|0;
   HEAP8[$183>>0] = 0;
   $184 = HEAP8[$40>>0]|0;
   $185 = $184 << 24 >> 24;
   $186 = ($185|0)!=(0);
   if ($186) {
    $187 = $7;
    $188 = ((($187)) + 232|0);
    $189 = HEAP32[$188>>2]|0;
    $190 = ($189|0)!=(0|0);
    if ($190) {
     $191 = $7;
     $192 = ((($191)) + 232|0);
     $193 = HEAP32[$192>>2]|0;
     $194 = (_strcmp($40,$193)|0);
     $195 = ($194|0)==(0);
     if ($195) {
      $24 = 2;
      break;
     }
    }
    $196 = HEAP8[$40>>0]|0;
    $197 = $196 << 24 >> 24;
    $198 = (__Z9IsDigit09j($197)|0);
    $199 = ($198|0)!=(0);
    if (!($199)) {
     HEAP32[$vararg_buffer>>2] = $40;
     (_sprintf($34,22337,$vararg_buffer)|0);
     $200 = $7;
     $201 = (__Z6LookupP10TranslatorPKcPc($200,$34,120143)|0);
     $202 = ($201|0)!=(0);
     if ($202) {
      $24 = 2;
      $203 = $10;
      $204 = HEAP32[$203>>2]|0;
      $205 = $204 | 128;
      HEAP32[$203>>2] = $205;
      $30 = 1;
      HEAP32[$vararg_buffer31>>2] = $40;
      (_sprintf($34,22342,$vararg_buffer31)|0);
      $206 = $7;
      (__Z6LookupP10TranslatorPKcPc($206,$34,120155)|0);
     }
    }
   }
  }
 } while(0);
 $207 = $11;
 $208 = HEAP32[$207>>2]|0;
 $209 = $208 & 32768;
 $210 = ($209|0)!=(0);
 if ($210) {
  $24 = 2;
 }
 HEAP8[$36>>0] = 0;
 HEAP8[$38>>0] = 0;
 $211 = $8;
 $212 = HEAP8[$211>>0]|0;
 $213 = $212 << 24 >> 24;
 $214 = ($213|0)==(48);
 $215 = $23;
 $216 = ($215|0)==(0);
 $or$cond = $214 & $216;
 L54: do {
  if ($or$cond) {
   $217 = $8;
   $218 = ((($217)) + 1|0);
   $219 = HEAP8[$218>>0]|0;
   $220 = $219 << 24 >> 24;
   $221 = ($220|0)!=(32);
   if ($221) {
    $222 = $8;
    $223 = ((($222)) + 1|0);
    $224 = HEAP8[$223>>0]|0;
    $225 = $224 << 24 >> 24;
    $226 = $7;
    $227 = ((($226)) + 224|0);
    $228 = HEAP32[$227>>2]|0;
    $229 = ($225|0)!=($228|0);
    if ($229) {
     $230 = $13;
     $231 = ($230|0)==(2);
     if ($231) {
      $232 = $8;
      $233 = ((($232)) + 3|0);
      $234 = HEAP8[$233>>0]|0;
      $235 = $234 << 24 >> 24;
      $236 = ($235|0)==(58);
      if ($236) {
       $237 = $8;
       $238 = ((($237)) + 5|0);
       $239 = HEAP8[$238>>0]|0;
       $240 = $239 << 24 >> 24;
       $241 = (__Z9IsDigit09j($240)|0);
       $242 = ($241|0)!=(0);
       if ($242) {
        $243 = $8;
        $244 = ((($243)) + 7|0);
        $245 = HEAP8[$244>>0]|0;
        $246 = $245 << 24 >> 24;
        $247 = (_isspace($246)|0);
        $248 = ($247|0)!=(0);
        if ($248) {
         break;
        }
       }
      }
     }
     $249 = $13;
     $250 = ($249|0)>(3);
     if ($250) {
      $251 = $10;
      $252 = HEAP32[$251>>2]|0;
      $253 = $252 & -129;
      HEAP32[$251>>2] = $253;
      $6 = 0;
      $707 = $6;
      STACKTOP = sp;return ($707|0);
     }
     $15 = 0;
     while(1) {
      $254 = $15;
      $255 = $8;
      $256 = (($255) + ($254)|0);
      $257 = HEAP8[$256>>0]|0;
      $258 = $257 << 24 >> 24;
      $259 = ($258|0)==(48);
      if (!($259)) {
       break L54;
      }
      $260 = $15;
      $261 = $13;
      $262 = (($261) - 1)|0;
      $263 = ($260|0)<($262|0);
      if (!($263)) {
       break L54;
      }
      $264 = $7;
      $265 = (_strlen($39)|0);
      $266 = (($39) + ($265)|0);
      (__Z6LookupP10TranslatorPKcPc($264,22348,$266)|0);
      $267 = $15;
      $268 = (($267) + 1)|0;
      $15 = $268;
     }
    }
   }
  }
 } while(0);
 $269 = $7;
 $270 = ((($269)) + 200|0);
 $271 = HEAP32[$270>>2]|0;
 $272 = $271 & 4096;
 $273 = ($272|0)!=(0);
 if ($273) {
  $274 = $13;
  $275 = $8;
  $276 = (($275) + ($274)|0);
  $277 = HEAP8[$276>>0]|0;
  $278 = $277 << 24 >> 24;
  $279 = ($278|0)==(32);
  if ($279) {
   $22 = 1;
  } else {
   label = 56;
  }
 } else {
  label = 56;
 }
 if ((label|0) == 56) {
  $280 = $13;
  $281 = $8;
  $282 = (($281) + ($280)|0);
  $283 = HEAP8[$282>>0]|0;
  $284 = $283 << 24 >> 24;
  $285 = $7;
  $286 = ((($285)) + 220|0);
  $287 = HEAP32[$286>>2]|0;
  $288 = ($284|0)==($287|0);
  if ($288) {
   $22 = 2;
  }
 }
 $289 = $13;
 $290 = (($289) + 2)|0;
 $29 = $290;
 $291 = $22;
 $292 = ($291|0)>(0);
 L79: do {
  if ($292) {
   $293 = $13;
   $294 = $22;
   $295 = (($293) + ($294))|0;
   $16 = $295;
   while(1) {
    $296 = $20;
    $297 = (($296) + 1)|0;
    $298 = $11;
    $299 = (($298) + (($297*12)|0)|0);
    $300 = HEAP32[$299>>2]|0;
    $301 = $300 & 262144;
    $302 = ($301|0)==(0);
    if (!($302)) {
     break L79;
    }
    $303 = $16;
    $304 = $8;
    $305 = (($304) + ($303)|0);
    $306 = $31;
    $307 = (__Z19CheckThousandsGroupPci($305,$306)|0);
    if (!($307)) {
     break L79;
    }
    $15 = 0;
    while(1) {
     $308 = $15;
     $309 = $31;
     $310 = ($308|0)<($309|0);
     if (!($310)) {
      break;
     }
     $311 = $16;
     $312 = $15;
     $313 = (($311) + ($312))|0;
     $314 = $8;
     $315 = (($314) + ($313)|0);
     $316 = HEAP8[$315>>0]|0;
     $317 = $316 << 24 >> 24;
     $318 = ($317|0)!=(48);
     if ($318) {
      label = 65;
      break;
     }
     $319 = $15;
     $320 = (($319) + 1)|0;
     $15 = $320;
    }
    if ((label|0) == 65) {
     label = 0;
     $21 = 0;
    }
    $321 = $20;
    $322 = (($321) + 1)|0;
    $20 = $322;
    $323 = $31;
    $324 = $16;
    $325 = (($324) + ($323))|0;
    $16 = $325;
    $326 = $16;
    $327 = $8;
    $328 = (($327) + ($326)|0);
    $329 = HEAP8[$328>>0]|0;
    $330 = $329 << 24 >> 24;
    $331 = $7;
    $332 = ((($331)) + 220|0);
    $333 = HEAP32[$332>>2]|0;
    $334 = ($330|0)==($333|0);
    if (!($334)) {
     $335 = $7;
     $336 = ((($335)) + 200|0);
     $337 = HEAP32[$336>>2]|0;
     $338 = $337 & 4096;
     $339 = ($338|0)!=(0);
     if (!($339)) {
      break L79;
     }
     $340 = $16;
     $341 = $8;
     $342 = (($341) + ($340)|0);
     $343 = HEAP8[$342>>0]|0;
     $344 = $343 << 24 >> 24;
     $345 = ($344|0)==(32);
     if (!($345)) {
      break L79;
     }
    }
    $346 = $16;
    $347 = (($346) + 2)|0;
    $29 = $347;
    $348 = $22;
    $349 = $16;
    $350 = (($349) + ($348))|0;
    $16 = $350;
   }
  }
 } while(0);
 $351 = $14;
 $352 = ($351|0)==(0);
 $353 = $23;
 $354 = ($353|0)!=(0);
 $or$cond6 = $352 & $354;
 if ($or$cond6) {
  $18 = 1;
 }
 $355 = $7;
 $356 = ((($355)) + 324|0);
 $357 = HEAP32[$356>>2]|0;
 $358 = ($357|0)==(26741);
 if ($358) {
  $359 = $20;
  $360 = $11;
  $361 = (($360) + (($359*12)|0)|0);
  $362 = HEAP32[$361>>2]|0;
  $363 = $362 & 16384;
  $364 = ($363|0)!=(0);
  $365 = $21;
  $366 = ($365|0)==(1);
  $or$cond8 = $364 & $366;
  if ($or$cond8) {
   $367 = $29;
   $368 = $8;
   $369 = (($368) + ($367)|0);
   $370 = $20;
   $371 = $14;
   $372 = (__ZL11hu_number_ePKcii($369,$370,$371)|0);
   $373 = ($372|0)!=(0);
   if ($373) {
    $374 = HEAP32[11238]|0;
    $375 = $374 | 1;
    HEAP32[11238] = $375;
   }
  }
 }
 $376 = $13;
 $377 = $8;
 $378 = (($377) + ($376)|0);
 $379 = HEAP8[$378>>0]|0;
 $380 = $379 << 24 >> 24;
 $381 = $7;
 $382 = ((($381)) + 224|0);
 $383 = HEAP32[$382>>2]|0;
 $384 = ($380|0)==($383|0);
 if ($384) {
  $385 = $13;
  $386 = (($385) + 1)|0;
  $387 = $8;
  $388 = (($387) + ($386)|0);
  $389 = HEAP8[$388>>0]|0;
  $390 = $389 << 24 >> 24;
  $391 = (__Z9IsDigit09j($390)|0);
  $392 = ($391|0)!=(0);
  if ($392) {
   $393 = $7;
   (__Z6LookupP10TranslatorPKcPc($393,22351,$36)|0);
   $19 = 256;
  } else {
   label = 80;
  }
 } else {
  label = 80;
 }
 do {
  if ((label|0) == 80) {
   $394 = $18;
   $395 = ($394|0)==(0);
   if ($395) {
    $396 = $22;
    $397 = ($396|0)>(0);
    $398 = $20;
    $399 = ($398|0)>(0);
    $or$cond27 = $397 & $399;
    $400 = $18;
    $401 = ($400|0)==(0);
    $or$cond30 = $or$cond27 & $401;
    if (!($or$cond30)) {
     break;
    }
    $402 = $7;
    $403 = $14;
    $404 = $20;
    $405 = $21;
    $406 = (__ZL15LookupThousandsP10TranslatoriiiPc($402,$403,$404,$405,$36)|0);
    $407 = ($406|0)!=(0);
    if (!($407)) {
     break;
    }
    $14 = 0;
    $18 = 1;
    break;
   } else {
    $408 = HEAP32[11239]|0;
    $409 = ($408|0)==(1);
    if (!($409)) {
     break;
    }
    $410 = $20;
    $411 = (($410) + 1)|0;
    HEAP32[$vararg_buffer34>>2] = $411;
    (_sprintf($34,22356,$vararg_buffer34)|0);
    $412 = $7;
    $413 = (__Z6LookupP10TranslatorPKcPc($412,$34,$35)|0);
    $414 = ($413|0)==(0);
    if (!($414)) {
     break;
    }
    $415 = $20;
    HEAP32[$vararg_buffer37>>2] = $415;
    (_sprintf($34,22356,$vararg_buffer37)|0);
    $416 = $7;
    (__Z6LookupP10TranslatorPKcPc($416,$34,$36)|0);
    break;
   }
  }
 } while(0);
 $417 = HEAP8[$36>>0]|0;
 $418 = $417 << 24 >> 24;
 $419 = ($418|0)==(0);
 if ($419) {
  $420 = $13;
  $421 = $8;
  $422 = (($421) + ($420)|0);
  $423 = HEAP8[$422>>0]|0;
  $424 = $423 << 24 >> 24;
  $425 = ($424|0)==(46);
  $426 = $20;
  $427 = ($426|0)==(0);
  $or$cond10 = $425 & $427;
  if ($or$cond10) {
   $428 = $7;
   (__Z6LookupP10TranslatorPKcPc($428,22362,$36)|0);
  }
 }
 $429 = $20;
 $430 = ($429|0)==(0);
 do {
  if ($430) {
   $431 = $8;
   HEAP32[$33>>2] = $431;
   while(1) {
    $432 = HEAP32[$33>>2]|0;
    $433 = ((($432)) + 1|0);
    $434 = HEAP8[$433>>0]|0;
    $435 = $434 << 24 >> 24;
    $436 = (__Z9IsDigit09j($435)|0);
    $437 = ($436|0)!=(0);
    $438 = HEAP32[$33>>2]|0;
    if (!($437)) {
     break;
    }
    $439 = ((($438)) + 1|0);
    HEAP32[$33>>2] = $439;
   }
   $440 = ((($438)) + -1|0);
   $441 = HEAP8[$440>>0]|0;
   $442 = $441 << 24 >> 24;
   $443 = (__Z9IsDigit09j($442)|0);
   $444 = ($443|0)!=(0);
   if ($444) {
    $445 = HEAP32[$33>>2]|0;
    $446 = ((($445)) + -1|0);
    HEAP32[$42>>2] = $446;
    $447 = $7;
    $448 = $10;
    $449 = $11;
    $450 = (__Z14LookupDictListP10TranslatorPPcS1_PjiP8WORD_TAB($447,$42,$41,$448,4,$449)|0);
    $451 = ($450|0)!=(0);
    if ($451) {
     HEAP32[11236] = 2;
    }
   }
   $452 = HEAP8[$41>>0]|0;
   $453 = $452 << 24 >> 24;
   $454 = ($453|0)==(0);
   if ($454) {
    $455 = HEAP32[$33>>2]|0;
    $456 = HEAP8[$455>>0]|0;
    $457 = $456 << 24 >> 24;
    $458 = ($457|0)!=(48);
    if ($458) {
     $459 = $7;
     $460 = $10;
     $461 = $11;
     $462 = (__Z14LookupDictListP10TranslatorPPcS1_PjiP8WORD_TAB($459,$33,$41,$460,4,$461)|0);
     $463 = ($462|0)!=(0);
     if ($463) {
      HEAP32[11236] = 1;
     }
    }
   }
   $464 = $23;
   $465 = ($464|0)==(0);
   if ($465) {
    $466 = $19;
    $467 = ($466|0)==(0);
    $468 = $24;
    $469 = ($468|0)==(0);
    $or$cond12 = $467 & $469;
    do {
     if ($or$cond12) {
      $470 = $14;
      HEAP32[$vararg_buffer40>>2] = $470;
      (_sprintf($34,22365,$vararg_buffer40)|0);
      $471 = $7;
      $472 = $9;
      $473 = (__Z6LookupP10TranslatorPKcPc($471,$34,$472)|0);
      $474 = ($473|0)!=(0);
      if (!($474)) {
       break;
      }
      $6 = 1;
      $707 = $6;
      STACKTOP = sp;return ($707|0);
     }
    } while(0);
    $475 = $7;
    $476 = ((($475)) + 204|0);
    $477 = HEAP32[$476>>2]|0;
    $478 = $477 & 65536;
    $479 = ($478|0)!=(0);
    if ($479) {
     $480 = $8;
     HEAP32[$42>>2] = $480;
     while(1) {
      $481 = HEAP32[$42>>2]|0;
      $482 = HEAP8[$481>>0]|0;
      $483 = $482 << 24 >> 24;
      $484 = ($483|0)!=(32);
      if ($484) {
       $485 = HEAP32[$42>>2]|0;
       $486 = HEAP8[$485>>0]|0;
       $487 = $486 << 24 >> 24;
       $488 = ($487|0)!=(0);
       $708 = $488;
      } else {
       $708 = 0;
      }
      $489 = HEAP32[$42>>2]|0;
      $490 = ((($489)) + 1|0);
      if (!($708)) {
       break;
      }
      HEAP32[$42>>2] = $490;
     }
     $491 = HEAP8[$490>>0]|0;
     $492 = $491 << 24 >> 24;
     $493 = ($492|0)==(37);
     if (!($493)) {
      break;
     }
     $494 = $7;
     $495 = $9;
     (__Z6LookupP10TranslatorPKcPc($494,22370,$495)|0);
     $496 = $9;
     $497 = (_strlen($496)|0);
     $498 = $9;
     $499 = (($498) + ($497)|0);
     $9 = $499;
     $500 = HEAP32[$42>>2]|0;
     $501 = ((($500)) + 1|0);
     HEAP8[$501>>0] = 32;
    }
   }
  }
 } while(0);
 $502 = $7;
 $503 = $14;
 $504 = $18;
 $505 = $20;
 $506 = $23;
 $507 = $24;
 $508 = $506 | $507;
 $509 = $19;
 $510 = $508 | $509;
 (__ZL10LookupNum3P10TranslatoriPciii($502,$503,$37,$504,$505,$510)|0);
 $511 = $20;
 $512 = ($511|0)>(0);
 if ($512) {
  $513 = $7;
  $514 = ((($513)) + 204|0);
  $515 = HEAP32[$514>>2]|0;
  $516 = $515 & 512;
  $517 = ($516|0)!=(0);
  if ($517) {
   $518 = $9;
   HEAP32[$vararg_buffer43>>2] = $39;
   $vararg_ptr46 = ((($vararg_buffer43)) + 4|0);
   HEAP32[$vararg_ptr46>>2] = $36;
   $vararg_ptr47 = ((($vararg_buffer43)) + 8|0);
   HEAP32[$vararg_ptr47>>2] = 15;
   $vararg_ptr48 = ((($vararg_buffer43)) + 12|0);
   HEAP32[$vararg_ptr48>>2] = $38;
   $vararg_ptr49 = ((($vararg_buffer43)) + 16|0);
   HEAP32[$vararg_ptr49>>2] = $37;
   (_sprintf($518,22372,$vararg_buffer43)|0);
  } else {
   label = 116;
  }
 } else {
  label = 116;
 }
 if ((label|0) == 116) {
  $519 = $9;
  HEAP32[$vararg_buffer50>>2] = $39;
  $vararg_ptr53 = ((($vararg_buffer50)) + 4|0);
  HEAP32[$vararg_ptr53>>2] = $38;
  $vararg_ptr54 = ((($vararg_buffer50)) + 8|0);
  HEAP32[$vararg_ptr54>>2] = $37;
  $vararg_ptr55 = ((($vararg_buffer50)) + 12|0);
  HEAP32[$vararg_ptr55>>2] = 15;
  $vararg_ptr56 = ((($vararg_buffer50)) + 16|0);
  HEAP32[$vararg_ptr56>>2] = $36;
  (_sprintf($519,22383,$vararg_buffer50)|0);
 }
 L158: while(1) {
  $520 = $19;
  $521 = ($520|0)!=(0);
  if (!($521)) {
   break;
  }
  $522 = $13;
  $523 = (($522) + 1)|0;
  $13 = $523;
  $26 = 0;
  while(1) {
   $524 = $13;
   $525 = $26;
   $526 = (($524) + ($525))|0;
   $527 = $8;
   $528 = (($527) + ($526)|0);
   $529 = HEAP8[$528>>0]|0;
   $530 = $529 << 24 >> 24;
   $531 = (__Z9IsDigit09j($530)|0);
   $532 = ($531|0)!=(0);
   if (!($532)) {
    break;
   }
   $533 = $26;
   $534 = (($533) + 1)|0;
   $26 = $534;
  }
  $27 = 2;
  $535 = $7;
  $536 = ((($535)) + 200|0);
  $537 = HEAP32[$536>>2]|0;
  $538 = $537 & 57344;
  $28 = $538;
  $switch$split2D = ($538|0)<(32768);
  L165: do {
   if ($switch$split2D) {
    $switch$split1052D = ($538|0)<(16384);
    if ($switch$split1052D) {
     switch ($538|0) {
     case 8192:  {
      label = 128;
      break L165;
      break;
     }
     default: {
      break L165;
     }
     }
    }
    $switch$split1112D = ($538|0)<(24576);
    if ($switch$split1112D) {
     switch ($538|0) {
     case 16384:  {
      label = 123;
      break L165;
      break;
     }
     default: {
      break L165;
     }
     }
    }
    switch ($538|0) {
    case 24576:  {
     break;
    }
    default: {
     break L165;
    }
    }
    $594 = $26;
    $595 = ($594|0)<=(4);
    if (!($595)) {
     break;
    }
    $596 = $13;
    $597 = $8;
    $598 = (($597) + ($596)|0);
    $599 = HEAP8[$598>>0]|0;
    $600 = $599 << 24 >> 24;
    $601 = ($600|0)!=(48);
    if (!($601)) {
     break;
    }
    $602 = $7;
    $603 = $13;
    $604 = $8;
    $605 = (($604) + ($603)|0);
    $606 = (_atoi($605)|0);
    (__ZL10LookupNum3P10TranslatoriPciii($602,$606,$35,0,0,0)|0);
    $607 = $9;
    (_strcat($607,$35)|0);
    $608 = $26;
    $609 = $13;
    $610 = (($609) + ($608))|0;
    $13 = $610;
   } else {
    $switch$split1082D = ($538|0)<(49152);
    if ($switch$split1082D) {
     $switch$split1142D = ($538|0)<(40960);
     if (!($switch$split1142D)) {
      switch ($538|0) {
      case 40960:  {
       label = 128;
       break L165;
       break;
      }
      default: {
       break L165;
      }
      }
     }
     switch ($538|0) {
     case 32768:  {
      break;
     }
     default: {
      break L165;
     }
     }
     $27 = 5;
     label = 123;
     break;
    }
    $switch$split1172D = ($538|0)<(57344);
    if ($switch$split1172D) {
     switch ($538|0) {
     case 49152:  {
      label = 128;
      break L165;
      break;
     }
     default: {
      break L165;
     }
     }
    }
    switch ($538|0) {
    case 57344:  {
     break;
    }
    default: {
     break L165;
    }
    }
    while(1) {
     $611 = $26;
     $612 = (($611) + -1)|0;
     $26 = $612;
     $613 = ($611|0)>(1);
     if (!($613)) {
      break L165;
     }
     $614 = $13;
     $615 = $8;
     $616 = (($615) + ($614)|0);
     $617 = HEAP8[$616>>0]|0;
     $618 = $617 << 24 >> 24;
     HEAP32[$vararg_buffer60>>2] = $618;
     (_sprintf($34,22400,$vararg_buffer60)|0);
     $619 = $7;
     $620 = (__Z6LookupP10TranslatorPKcPc($619,$34,$35)|0);
     $621 = ($620|0)==(0);
     if ($621) {
      break L165;
     }
     $622 = $13;
     $623 = (($622) + 1)|0;
     $13 = $623;
     $624 = $9;
     (_strcat($624,$35)|0);
    }
   }
  } while(0);
  L191: do {
   if ((label|0) == 123) {
    while(1) {
     label = 0;
     $539 = $13;
     $540 = $8;
     $541 = (($540) + ($539)|0);
     $542 = HEAP8[$541>>0]|0;
     $543 = $542 << 24 >> 24;
     $544 = ($543|0)==(48);
     if (!($544)) {
      break;
     }
     $545 = $7;
     (__Z6LookupP10TranslatorPKcPc($545,22348,$35)|0);
     $546 = $9;
     (_strcat($546,$35)|0);
     $547 = $26;
     $548 = (($547) + -1)|0;
     $26 = $548;
     $549 = $13;
     $550 = (($549) + 1)|0;
     $13 = $550;
     label = 123;
    }
    $551 = $26;
    $552 = $27;
    $553 = ($551|0)<=($552|0);
    if ($553) {
     $554 = $13;
     $555 = $8;
     $556 = (($555) + ($554)|0);
     $557 = HEAP8[$556>>0]|0;
     $558 = $557 << 24 >> 24;
     $559 = (__Z9IsDigit09j($558)|0);
     $560 = ($559|0)!=(0);
     if (!($560)) {
      break;
     }
     $561 = $7;
     $562 = $13;
     $563 = $8;
     $564 = (($563) + ($562)|0);
     $565 = (_atoi($564)|0);
     (__ZL10LookupNum3P10TranslatoriPciii($561,$565,$35,0,0,0)|0);
     $566 = $9;
     (_strcat($566,$35)|0);
     $567 = $26;
     $568 = $13;
     $569 = (($568) + ($567))|0;
     $13 = $569;
    }
   }
   else if ((label|0) == 128) {
    label = 0;
    $570 = $7;
    $571 = $13;
    $572 = $8;
    $573 = (($572) + ($571)|0);
    $574 = (_atoi($573)|0);
    (__ZL10LookupNum3P10TranslatoriPciii($570,$574,$37,0,0,0)|0);
    $575 = $13;
    $576 = $8;
    $577 = (($576) + ($575)|0);
    $578 = HEAP8[$577>>0]|0;
    $579 = $578 << 24 >> 24;
    $580 = ($579|0)==(48);
    $581 = $28;
    $582 = ($581|0)!=(8192);
    $or$cond14 = $580 | $582;
    do {
     if ($or$cond14) {
      $583 = $26;
      HEAP32[$vararg_buffer57>>2] = $583;
      (_sprintf($34,22394,$vararg_buffer57)|0);
      $584 = $7;
      $585 = (__Z6LookupP10TranslatorPKcPc($584,$34,$35)|0);
      $586 = ($585|0)==(0);
      if ($586) {
       break L191;
      }
      $587 = $28;
      $588 = ($587|0)==(49152);
      if ($588) {
       $589 = $9;
       (_strcat($589,$35)|0);
       break;
      } else {
       (_strcat($37,$35)|0);
       break;
      }
     }
    } while(0);
    $590 = $9;
    (_strcat($590,$37)|0);
    $591 = $26;
    $592 = $13;
    $593 = (($592) + ($591))|0;
    $13 = $593;
   }
  } while(0);
  while(1) {
   $625 = $13;
   $626 = $8;
   $627 = (($626) + ($625)|0);
   $628 = HEAP8[$627>>0]|0;
   $17 = $628;
   $629 = $628&255;
   $630 = (__Z9IsDigit09j($629)|0);
   $631 = ($630|0)!=(0);
   if (!($631)) {
    break;
   }
   $632 = $9;
   $633 = (_strlen($632)|0);
   $634 = ($633>>>0)<(190);
   if (!($634)) {
    break;
   }
   $635 = $13;
   $636 = (($635) + 1)|0;
   $13 = $636;
   $637 = $8;
   $638 = (($637) + ($635)|0);
   $639 = HEAP8[$638>>0]|0;
   $640 = $639 << 24 >> 24;
   $641 = (($640) - 48)|0;
   $14 = $641;
   $642 = $7;
   $643 = $14;
   (__ZL10LookupNum2P10TranslatoriiiPc($642,$643,0,2,$35)|0);
   $644 = $9;
   $645 = (_strlen($644)|0);
   $32 = $645;
   $646 = $32;
   $647 = $9;
   $648 = (($647) + ($646)|0);
   HEAP32[$vararg_buffer63>>2] = 15;
   $vararg_ptr66 = ((($vararg_buffer63)) + 4|0);
   HEAP32[$vararg_ptr66>>2] = $35;
   (_sprintf($648,26563,$vararg_buffer63)|0);
  }
  $649 = $7;
  $650 = (__Z6LookupP10TranslatorPKcPc($649,22405,$35)|0);
  $651 = ($650|0)!=(0);
  if ($651) {
   $652 = $9;
   (_strcat($652,$35)|0);
  }
  $653 = $17;
  $654 = $653&255;
  $655 = $7;
  $656 = ((($655)) + 224|0);
  $657 = HEAP32[$656>>2]|0;
  $658 = ($654|0)==($657|0);
  do {
   if ($658) {
    $659 = $13;
    $660 = (($659) + 1)|0;
    $661 = $8;
    $662 = (($661) + ($660)|0);
    $663 = HEAP8[$662>>0]|0;
    $664 = $663 << 24 >> 24;
    $665 = (__Z9IsDigit09j($664)|0);
    $666 = ($665|0)!=(0);
    if (!($666)) {
     break;
    }
    $667 = $7;
    (__Z6LookupP10TranslatorPKcPc($667,22351,$35)|0);
    $668 = $9;
    (_strcat($668,$35)|0);
    continue L158;
   }
  } while(0);
  $19 = 0;
 }
 $669 = $9;
 $670 = HEAP8[$669>>0]|0;
 $671 = $670 << 24 >> 24;
 $672 = ($671|0)!=(0);
 if ($672) {
  $673 = $9;
  $674 = HEAP8[$673>>0]|0;
  $675 = $674 << 24 >> 24;
  $676 = ($675|0)!=(21);
  if ($676) {
   $677 = $13;
   $678 = (($677) + 1)|0;
   $679 = $8;
   $680 = (($679) + ($678)|0);
   $44 = $680;
   $681 = $44;
   $682 = (__Z7utf8_inPiPKc($43,$681)|0);
   $683 = $44;
   $684 = (($683) + ($682)|0);
   $44 = $684;
   $685 = $7;
   $686 = ((($685)) + 200|0);
   $687 = HEAP32[$686>>2]|0;
   $688 = $687 & 131072;
   $689 = ($688|0)!=(0);
   $690 = HEAP32[$43>>2]|0;
   $691 = ($690|0)==(32);
   $or$cond17 = $689 & $691;
   if ($or$cond17) {
    $692 = $44;
    (__Z7utf8_inPiPKc($43,$692)|0);
   }
   $693 = HEAP32[$43>>2]|0;
   $694 = (__Z9iswalpha2i($693)|0);
   $695 = ($694|0)==(0);
   $696 = $21;
   $697 = ($696|0)==(0);
   $or$cond19 = $695 & $697;
   if ($or$cond19) {
    $698 = $9;
    (_strcat($698,22411)|0);
   }
  }
 }
 $699 = $10;
 $700 = HEAP32[$699>>2]|0;
 $701 = $700 | -2147483648;
 HEAP32[$699>>2] = $701;
 $702 = HEAP32[11239]|0;
 $703 = (($702) + -1)|0;
 HEAP32[11239] = $703;
 $704 = $30;
 $705 = ($704|0)!=(0);
 if ($705) {
  $706 = $30;
  HEAP32[10458] = $706;
 }
 $6 = 1;
 $707 = $6;
 STACKTOP = sp;return ($707|0);
}
function __Z19CheckThousandsGroupPci($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$expand_i1_val = 0, $$expand_i1_val2 = 0, $$expand_i1_val4 = 0, $$pre_trunc = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = sp + 12|0;
 $3 = $0;
 $4 = $1;
 $6 = $4;
 $7 = $3;
 $8 = (($7) + ($6)|0);
 $9 = HEAP8[$8>>0]|0;
 $10 = $9 << 24 >> 24;
 $11 = (__Z9IsDigit09j($10)|0);
 $12 = ($11|0)!=(0);
 do {
  if ($12) {
   label = 3;
  } else {
   $13 = (__Z9IsDigit09j(-1)|0);
   $14 = ($13|0)!=(0);
   if ($14) {
    label = 3;
   } else {
    $5 = 0;
    while(1) {
     $15 = $5;
     $16 = $4;
     $17 = ($15|0)<($16|0);
     if (!($17)) {
      label = 9;
      break;
     }
     $18 = $5;
     $19 = $3;
     $20 = (($19) + ($18)|0);
     $21 = HEAP8[$20>>0]|0;
     $22 = $21 << 24 >> 24;
     $23 = (__Z9IsDigit09j($22)|0);
     $24 = ($23|0)!=(0);
     if (!($24)) {
      label = 7;
      break;
     }
     $25 = $5;
     $26 = (($25) + 1)|0;
     $5 = $26;
    }
    if ((label|0) == 7) {
     $$expand_i1_val2 = 0;
     HEAP8[$2>>0] = $$expand_i1_val2;
     break;
    }
    else if ((label|0) == 9) {
     $$expand_i1_val4 = 1;
     HEAP8[$2>>0] = $$expand_i1_val4;
     break;
    }
   }
  }
 } while(0);
 if ((label|0) == 3) {
  $$expand_i1_val = 0;
  HEAP8[$2>>0] = $$expand_i1_val;
 }
 $$pre_trunc = HEAP8[$2>>0]|0;
 $27 = $$pre_trunc&1;
 STACKTOP = sp;return ($27|0);
}
function __ZL15LookupThousandsP10TranslatoriiiPc($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0;
 var $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond = 0, $vararg_buffer = 0;
 var $vararg_buffer11 = 0, $vararg_buffer15 = 0, $vararg_buffer19 = 0, $vararg_buffer23 = 0, $vararg_buffer27 = 0, $vararg_buffer3 = 0, $vararg_buffer31 = 0, $vararg_buffer34 = 0, $vararg_buffer37 = 0, $vararg_buffer7 = 0, $vararg_ptr10 = 0, $vararg_ptr14 = 0, $vararg_ptr18 = 0, $vararg_ptr2 = 0, $vararg_ptr22 = 0, $vararg_ptr26 = 0, $vararg_ptr30 = 0, $vararg_ptr40 = 0, $vararg_ptr6 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 224|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(224|0);
 $vararg_buffer37 = sp + 80|0;
 $vararg_buffer34 = sp + 72|0;
 $vararg_buffer31 = sp + 64|0;
 $vararg_buffer27 = sp + 56|0;
 $vararg_buffer23 = sp + 48|0;
 $vararg_buffer19 = sp + 40|0;
 $vararg_buffer15 = sp + 32|0;
 $vararg_buffer11 = sp + 24|0;
 $vararg_buffer7 = sp + 16|0;
 $vararg_buffer3 = sp + 8|0;
 $vararg_buffer = sp;
 $13 = sp + 212|0;
 $14 = sp + 200|0;
 $15 = sp + 160|0;
 $16 = sp + 120|0;
 $6 = $0;
 $7 = $1;
 $8 = $2;
 $9 = $3;
 $10 = $4;
 $12 = 0;
 HEAP8[$14>>0] = 0;
 $17 = $7;
 $18 = ($17|0)>(0);
 if ($18) {
  $19 = $9;
  $20 = $19 & 1;
  $21 = ($20|0)!=(0);
  if ($21) {
   $22 = $9;
   $23 = $22 & 2;
   $24 = ($23|0)!=(0);
   if ($24) {
    $25 = $7;
    $26 = $8;
    HEAP32[$vararg_buffer>>2] = $25;
    $vararg_ptr2 = ((($vararg_buffer)) + 4|0);
    HEAP32[$vararg_ptr2>>2] = $26;
    (_sprintf($13,22541,$vararg_buffer)|0);
    $27 = $6;
    $28 = (__Z6LookupP10TranslatorPKcPc($27,$13,$15)|0);
    $12 = $28;
   }
   $29 = $12;
   $30 = ($29|0)!=(0);
   $31 = $30 ^ 1;
   $32 = $31&1;
   $33 = HEAP32[11238]|0;
   $34 = $33 & 1;
   $35 = $32 & $34;
   $36 = ($35|0)!=(0);
   if ($36) {
    $37 = $7;
    $38 = $8;
    HEAP32[$vararg_buffer3>>2] = $37;
    $vararg_ptr6 = ((($vararg_buffer3)) + 4|0);
    HEAP32[$vararg_ptr6>>2] = $38;
    (_sprintf($13,22549,$vararg_buffer3)|0);
    $39 = $6;
    $40 = (__Z6LookupP10TranslatorPKcPc($39,$13,$15)|0);
    $12 = $40;
   }
   $41 = $12;
   $42 = ($41|0)!=(0);
   if (!($42)) {
    $43 = $7;
    $44 = $8;
    HEAP32[$vararg_buffer7>>2] = $43;
    $vararg_ptr10 = ((($vararg_buffer7)) + 4|0);
    HEAP32[$vararg_ptr10>>2] = $44;
    (_sprintf($13,22557,$vararg_buffer7)|0);
    $45 = $6;
    $46 = (__Z6LookupP10TranslatorPKcPc($45,$13,$15)|0);
    $12 = $46;
   }
  }
  $47 = $12;
  $48 = ($47|0)==(0);
  if ($48) {
   $49 = $7;
   $50 = $8;
   HEAP32[$vararg_buffer11>>2] = $49;
   $vararg_ptr14 = ((($vararg_buffer11)) + 4|0);
   HEAP32[$vararg_ptr14>>2] = $50;
   (_sprintf($13,22565,$vararg_buffer11)|0);
   $51 = $6;
   $52 = (__Z6LookupP10TranslatorPKcPc($51,$13,$15)|0);
   $12 = $52;
  }
 }
 $53 = $12;
 $54 = ($53|0)==(0);
 if ($54) {
  $55 = $7;
  $56 = (($55|0) % 100)&-1;
  $57 = ($56|0)>=(20);
  if ($57) {
   $58 = $6;
   (__Z6LookupP10TranslatorPKcPc($58,22572,$14)|0);
  }
  $11 = 0;
  $59 = $9;
  $60 = $59 & 1;
  $61 = ($60|0)!=(0);
  if ($61) {
   $62 = $9;
   $63 = $62 & 2;
   $64 = ($63|0)!=(0);
   if ($64) {
    $65 = $7;
    $66 = (__ZL9M_Varianti($65)|0);
    $67 = $8;
    HEAP32[$vararg_buffer15>>2] = $66;
    $vararg_ptr18 = ((($vararg_buffer15)) + 4|0);
    HEAP32[$vararg_ptr18>>2] = $67;
    (_sprintf($13,22577,$vararg_buffer15)|0);
    $68 = $6;
    $69 = (__Z6LookupP10TranslatorPKcPc($68,$13,$15)|0);
    $11 = $69;
   }
   $70 = $11;
   $71 = ($70|0)!=(0);
   if (!($71)) {
    $72 = HEAP32[11238]|0;
    $73 = $72 & 1;
    $74 = ($73|0)!=(0);
    if ($74) {
     $75 = $7;
     $76 = (__ZL9M_Varianti($75)|0);
     $77 = $8;
     HEAP32[$vararg_buffer19>>2] = $76;
     $vararg_ptr22 = ((($vararg_buffer19)) + 4|0);
     HEAP32[$vararg_ptr22>>2] = $77;
     (_sprintf($13,22584,$vararg_buffer19)|0);
     $78 = $6;
     $79 = (__Z6LookupP10TranslatorPKcPc($78,$13,$15)|0);
     $11 = $79;
    }
   }
   $80 = $11;
   $81 = ($80|0)!=(0);
   if (!($81)) {
    $82 = $7;
    $83 = (__ZL9M_Varianti($82)|0);
    $84 = $8;
    HEAP32[$vararg_buffer23>>2] = $83;
    $vararg_ptr26 = ((($vararg_buffer23)) + 4|0);
    HEAP32[$vararg_ptr26>>2] = $84;
    (_sprintf($13,22591,$vararg_buffer23)|0);
    $85 = $6;
    $86 = (__Z6LookupP10TranslatorPKcPc($85,$13,$15)|0);
    $11 = $86;
   }
  }
  $87 = $11;
  $88 = ($87|0)==(0);
  if ($88) {
   $89 = $7;
   $90 = (__ZL9M_Varianti($89)|0);
   $91 = $8;
   HEAP32[$vararg_buffer27>>2] = $90;
   $vararg_ptr30 = ((($vararg_buffer27)) + 4|0);
   HEAP32[$vararg_ptr30>>2] = $91;
   (_sprintf($13,22598,$vararg_buffer27)|0);
   $92 = $6;
   $93 = (__Z6LookupP10TranslatorPKcPc($92,$13,$15)|0);
   $94 = ($93|0)==(0);
   if ($94) {
    $95 = $8;
    $96 = ($95|0)>(3);
    if ($96) {
     $97 = $8;
     $98 = (($97) - 1)|0;
     HEAP32[$vararg_buffer31>>2] = $98;
     (_sprintf($13,22356,$vararg_buffer31)|0);
     $99 = $6;
     $100 = (__Z6LookupP10TranslatorPKcPc($99,$13,$16)|0);
     $101 = ($100|0)==(0);
     if ($101) {
      $102 = $6;
      (__Z6LookupP10TranslatorPKcPc($102,22604,$15)|0);
      HEAP32[11239] = 3;
     }
    }
    $103 = HEAP8[$15>>0]|0;
    $104 = $103 << 24 >> 24;
    $105 = ($104|0)==(0);
    if ($105) {
     $106 = $7;
     HEAP32[$vararg_buffer34>>2] = $106;
     (_sprintf($13,22609,$vararg_buffer34)|0);
     $107 = $6;
     $108 = (__Z6LookupP10TranslatorPKcPc($107,$13,$15)|0);
     $12 = $108;
     $109 = ($108|0)==(0);
     if ($109) {
      $110 = $6;
      (__Z6LookupP10TranslatorPKcPc($110,22615,$15)|0);
     }
     HEAP32[11239] = 2;
    }
   }
  }
 }
 $111 = $10;
 HEAP32[$vararg_buffer37>>2] = $14;
 $vararg_ptr40 = ((($vararg_buffer37)) + 4|0);
 HEAP32[$vararg_ptr40>>2] = $15;
 (_sprintf($111,25477,$vararg_buffer37)|0);
 $112 = $7;
 $113 = ($112|0)==(1);
 $114 = $8;
 $115 = ($114|0)==(1);
 $or$cond = $113 & $115;
 if ($or$cond) {
  $116 = $6;
  $117 = ((($116)) + 200|0);
  $118 = HEAP32[$117>>2]|0;
  $119 = $118 & 2097152;
  $120 = ($119|0)!=(0);
  if ($120) {
   $5 = 1;
   $122 = $5;
   STACKTOP = sp;return ($122|0);
  }
 }
 $121 = $12;
 $5 = $121;
 $122 = $5;
 STACKTOP = sp;return ($122|0);
}
function __ZL10LookupNum3P10TranslatoriPciii($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$ = 0, $$26 = 0, $$31 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0;
 var $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0;
 var $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0;
 var $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0;
 var $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0;
 var $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
 var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0;
 var $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond = 0, $or$cond11 = 0, $or$cond13 = 0, $or$cond15 = 0, $or$cond17 = 0, $or$cond19 = 0, $or$cond21 = 0, $or$cond23 = 0, $or$cond25 = 0, $or$cond28 = 0, $or$cond3 = 0, $or$cond30 = 0, $or$cond5 = 0, $or$cond7 = 0, $or$cond7$not = 0;
 var $or$cond9 = 0, $vararg_buffer = 0, $vararg_buffer35 = 0, $vararg_buffer41 = 0, $vararg_buffer44 = 0, $vararg_buffer47 = 0, $vararg_buffer50 = 0, $vararg_buffer56 = 0, $vararg_ptr32 = 0, $vararg_ptr33 = 0, $vararg_ptr34 = 0, $vararg_ptr38 = 0, $vararg_ptr39 = 0, $vararg_ptr40 = 0, $vararg_ptr53 = 0, $vararg_ptr54 = 0, $vararg_ptr55 = 0, $vararg_ptr59 = 0, $vararg_ptr60 = 0, $vararg_ptr61 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 528|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(528|0);
 $vararg_buffer56 = sp + 72|0;
 $vararg_buffer50 = sp + 56|0;
 $vararg_buffer47 = sp + 48|0;
 $vararg_buffer44 = sp + 40|0;
 $vararg_buffer41 = sp + 32|0;
 $vararg_buffer35 = sp + 16|0;
 $vararg_buffer = sp;
 $22 = sp + 516|0;
 $23 = sp + 416|0;
 $24 = sp + 316|0;
 $25 = sp + 296|0;
 $26 = sp + 276|0;
 $27 = sp + 226|0;
 $28 = sp + 176|0;
 $29 = sp + 164|0;
 $30 = sp + 152|0;
 $6 = $0;
 $7 = $1;
 $8 = $2;
 $9 = $3;
 $10 = $4;
 $11 = $5;
 $20 = 0;
 $31 = $11;
 $32 = $31 & 34;
 $18 = $32;
 $33 = $7;
 $34 = (($33|0) / 100)&-1;
 $13 = $34;
 $35 = $7;
 $36 = (($35|0) % 100)&-1;
 $14 = $36;
 HEAP8[$23>>0] = 0;
 HEAP8[$28>>0] = 0;
 HEAP8[$30>>0] = 0;
 $37 = $6;
 $38 = ((($37)) + 200|0);
 $39 = HEAP32[$38>>2]|0;
 $40 = $39 & 4194304;
 $41 = ($40|0)!=(0);
 if ($41) {
  $42 = $11;
  $43 = $42 & 1;
  $44 = ($43|0)!=(0);
  $45 = $13;
  $46 = ($45|0)>=(10);
  $or$cond = $44 | $46;
  if ($or$cond) {
   $20 = 1;
  }
 }
 $47 = $13;
 $48 = ($47|0)>(0);
 $49 = $20;
 $50 = ($49|0)!=(0);
 $or$cond3 = $48 | $50;
 if ($or$cond3) {
  $12 = 0;
  $51 = $18;
  $52 = ($51|0)!=(0);
  $53 = $14;
  $54 = ($53|0)==(0);
  $or$cond5 = $52 & $54;
  if ($or$cond5) {
   $55 = $6;
   $56 = (__Z6LookupP10TranslatorPKcPc($55,22501,$25)|0);
   $12 = $56;
  }
  $57 = $12;
  $58 = ($57|0)==(0);
  if ($58) {
   $59 = $14;
   $60 = ($59|0)==(0);
   if ($60) {
    $61 = $6;
    $62 = (__Z6LookupP10TranslatorPKcPc($61,22506,$25)|0);
    $12 = $62;
   }
   $63 = $12;
   $64 = ($63|0)!=(0);
   if (!($64)) {
    $65 = $6;
    (__Z6LookupP10TranslatorPKcPc($65,22511,$25)|0);
   }
  }
  $66 = $6;
  $67 = ((($66)) + 200|0);
  $68 = HEAP32[$67>>2]|0;
  $69 = $68 & 2048;
  $70 = ($69|0)!=(0);
  $71 = $13;
  $72 = ($71|0)==(19);
  $or$cond7 = $70 & $72;
  $or$cond7$not = $or$cond7 ^ 1;
  $73 = $13;
  $74 = ($73|0)>=(10);
  $or$cond30 = $or$cond7$not & $74;
  if ($or$cond30) {
   HEAP8[$27>>0] = 0;
   $17 = 0;
   $75 = $7;
   $76 = (($75|0) % 1000)&-1;
   $77 = ($76|0)==(0);
   $$ = $77 ? 1 : 0;
   $17 = $$;
   $78 = $10;
   $79 = (($78) + 1)|0;
   $19 = $79;
   $80 = $6;
   $81 = ((($80)) + 204|0);
   $82 = HEAP32[$81>>2]|0;
   $83 = $82 & 16384;
   $84 = ($83|0)!=(0);
   $$31 = $84 ? 0 : $79;
   $19 = $$31;
   $85 = $6;
   $86 = $13;
   $87 = (($86|0) / 10)&-1;
   $88 = $19;
   $89 = $17;
   $90 = $18;
   $91 = $89 | $90;
   $92 = (__ZL15LookupThousandsP10TranslatoriiiPc($85,$87,$88,$91,$26)|0);
   $93 = ($92|0)==(0);
   if ($93) {
    $15 = 0;
    $94 = $6;
    $95 = ((($94)) + 204|0);
    $96 = HEAP32[$95>>2]|0;
    $97 = $19;
    $98 = 1 << $97;
    $99 = $96 & $98;
    $100 = ($99|0)!=(0);
    if ($100) {
     $15 = 8;
    }
    $101 = $6;
    $102 = ((($101)) + 324|0);
    $103 = HEAP32[$102>>2]|0;
    $104 = ($103|0)==(28012);
    if ($104) {
     $15 = 520;
    }
    $105 = $6;
    $106 = $13;
    $107 = (($106|0) / 10)&-1;
    $108 = $10;
    $109 = $15;
    (__ZL10LookupNum2P10TranslatoriiiPc($105,$107,$108,$109,$27)|0);
   }
   $110 = $6;
   $111 = ((($110)) + 204|0);
   $112 = HEAP32[$111>>2]|0;
   $113 = $112 & 512;
   $114 = ($113|0)!=(0);
   if ($114) {
    HEAP32[$vararg_buffer>>2] = $26;
    $vararg_ptr32 = ((($vararg_buffer)) + 4|0);
    HEAP32[$vararg_ptr32>>2] = 15;
    $vararg_ptr33 = ((($vararg_buffer)) + 8|0);
    HEAP32[$vararg_ptr33>>2] = $27;
    $vararg_ptr34 = ((($vararg_buffer)) + 12|0);
    HEAP32[$vararg_ptr34>>2] = 15;
    (_sprintf($28,22515,$vararg_buffer)|0);
   } else {
    HEAP32[$vararg_buffer35>>2] = $27;
    $vararg_ptr38 = ((($vararg_buffer35)) + 4|0);
    HEAP32[$vararg_ptr38>>2] = 15;
    $vararg_ptr39 = ((($vararg_buffer35)) + 8|0);
    HEAP32[$vararg_ptr39>>2] = $26;
    $vararg_ptr40 = ((($vararg_buffer35)) + 12|0);
    HEAP32[$vararg_ptr40>>2] = 15;
    (_sprintf($28,22515,$vararg_buffer35)|0);
   }
   $115 = $13;
   $116 = (($115|0) % 10)&-1;
   $13 = $116;
   $117 = $13;
   $118 = ($117|0)==(0);
   $119 = $20;
   $120 = ($119|0)==(0);
   $or$cond9 = $118 & $120;
   if ($or$cond9) {
    HEAP8[$25>>0] = 0;
   }
   $9 = 1;
   $121 = $11;
   $122 = $121 | 1;
   $11 = $122;
  }
  HEAP8[$27>>0] = 0;
  $123 = $13;
  $124 = ($123|0)>(0);
  $125 = $20;
  $126 = ($125|0)!=(0);
  $or$cond11 = $124 | $126;
  do {
   if ($or$cond11) {
    $127 = $6;
    $128 = ((($127)) + 200|0);
    $129 = HEAP32[$128>>2]|0;
    $130 = $129 & 262144;
    $131 = ($130|0)!=(0);
    do {
     if ($131) {
      $132 = $11;
      $133 = $132 & 1;
      $134 = ($133|0)!=(0);
      if (!($134)) {
       $135 = HEAP8[$28>>0]|0;
       $136 = $135 << 24 >> 24;
       $137 = ($136|0)!=(0);
       if (!($137)) {
        break;
       }
      }
      $138 = $6;
      (__Z6LookupP10TranslatorPKcPc($138,22486,$30)|0);
     }
    } while(0);
    $9 = 1;
    $12 = 0;
    $139 = $18;
    $140 = ($139|0)!=(0);
    do {
     if ($140) {
      $141 = $14;
      $142 = ($141|0)==(0);
      if (!($142)) {
       $143 = $6;
       $144 = ((($143)) + 204|0);
       $145 = HEAP32[$144>>2]|0;
       $146 = $145 & 4096;
       $147 = ($146|0)!=(0);
       if (!($147)) {
        break;
       }
      }
      $148 = $13;
      HEAP32[$vararg_buffer41>>2] = $148;
      (_sprintf($22,22524,$vararg_buffer41)|0);
      $149 = $6;
      $150 = (__Z6LookupP10TranslatorPKcPc($149,$22,$27)|0);
      $12 = $150;
      $151 = $6;
      $152 = ((($151)) + 204|0);
      $153 = HEAP32[$152>>2]|0;
      $154 = $153 & 4096;
      $155 = ($154|0)!=(0);
      $156 = $14;
      $157 = ($156|0)>(0);
      $or$cond13 = $155 & $157;
      if ($or$cond13) {
       (_strcat($27,120143)|0);
      }
     }
    } while(0);
    $158 = $13;
    $159 = ($158|0)==(0);
    $160 = $20;
    $161 = ($160|0)!=(0);
    $or$cond15 = $159 & $161;
    if ($or$cond15) {
     $162 = $6;
     (__Z6LookupP10TranslatorPKcPc($162,22348,$27)|0);
     break;
    }
    $163 = $13;
    $164 = ($163|0)==(1);
    if ($164) {
     $165 = $6;
     $166 = ((($165)) + 204|0);
     $167 = HEAP32[$166>>2]|0;
     $168 = $167 & 131072;
     $169 = ($168|0)!=(0);
     if ($169) {
      $170 = $11;
      $171 = $170 & 1;
      $172 = ($171|0)==(0);
      if (!($172)) {
       label = 40;
      }
     } else {
      label = 40;
     }
    } else {
     label = 40;
    }
    if ((label|0) == 40) {
     $173 = $12;
     $174 = ($173|0)==(0);
     $175 = $14;
     $176 = ($175|0)==(0);
     $or$cond17 = $174 & $176;
     if ($or$cond17) {
      $177 = $13;
      HEAP32[$vararg_buffer44>>2] = $177;
      (_sprintf($22,22530,$vararg_buffer44)|0);
      $178 = $6;
      $179 = (__Z6LookupP10TranslatorPKcPc($178,$22,$27)|0);
      $12 = $179;
     }
     $180 = $12;
     $181 = ($180|0)!=(0);
     if (!($181)) {
      $182 = $13;
      HEAP32[$vararg_buffer47>>2] = $182;
      (_sprintf($22,22536,$vararg_buffer47)|0);
      $183 = $6;
      $184 = (__Z6LookupP10TranslatorPKcPc($183,$22,$27)|0);
      $12 = $184;
     }
    }
    $185 = $12;
    $186 = ($185|0)!=(0);
    if ($186) {
     HEAP8[$25>>0] = 0;
     break;
    }
    $21 = 1;
    $187 = $13;
    $188 = ($187|0)==(1);
    if ($188) {
     $189 = $6;
     $190 = ((($189)) + 200|0);
     $191 = HEAP32[$190>>2]|0;
     $192 = $191 & 1024;
     $193 = ($192|0)!=(0);
     if ($193) {
      $21 = 0;
     }
    }
    $194 = $21;
    $195 = ($194|0)!=(0);
    if ($195) {
     $196 = $6;
     $197 = $13;
     $198 = $10;
     (__ZL10LookupNum2P10TranslatoriiiPc($196,$197,$198,0,$27)|0);
    }
   }
  } while(0);
  HEAP32[$vararg_buffer50>>2] = $28;
  $vararg_ptr53 = ((($vararg_buffer50)) + 4|0);
  HEAP32[$vararg_ptr53>>2] = $30;
  $vararg_ptr54 = ((($vararg_buffer50)) + 8|0);
  HEAP32[$vararg_ptr54>>2] = $27;
  $vararg_ptr55 = ((($vararg_buffer50)) + 12|0);
  HEAP32[$vararg_ptr55>>2] = $25;
  (_sprintf($23,22492,$vararg_buffer50)|0);
 }
 HEAP8[$29>>0] = 0;
 $199 = $14;
 $200 = ($199|0)>(0);
 do {
  if ($200) {
   $201 = $11;
   $202 = $201 & 2;
   $203 = ($202|0)!=(0);
   if ($203) {
    $204 = $6;
    $205 = ((($204)) + 204|0);
    $206 = HEAP32[$205>>2]|0;
    $207 = $206 & 4096;
    $208 = ($207|0)!=(0);
    if ($208) {
     break;
    }
   }
   $209 = $7;
   $210 = ($209|0)>(100);
   if ($210) {
    label = 57;
   } else {
    $211 = $11;
    $212 = $211 & 1;
    $213 = ($212|0)!=(0);
    $214 = $10;
    $215 = ($214|0)==(0);
    $or$cond19 = $213 & $215;
    if ($or$cond19) {
     label = 57;
    }
   }
   do {
    if ((label|0) == 57) {
     $216 = $6;
     $217 = ((($216)) + 200|0);
     $218 = HEAP32[$217>>2]|0;
     $219 = $218 & 64;
     $220 = ($219|0)!=(0);
     if (!($220)) {
      $221 = $6;
      $222 = ((($221)) + 200|0);
      $223 = HEAP32[$222>>2]|0;
      $224 = $223 & 8388608;
      $225 = ($224|0)!=(0);
      $226 = $14;
      $227 = ($226|0)<(10);
      $or$cond21 = $225 & $227;
      if (!($or$cond21)) {
       break;
      }
     }
     $228 = $6;
     (__Z6LookupP10TranslatorPKcPc($228,22486,$29)|0);
    }
   } while(0);
   $229 = $6;
   $230 = ((($229)) + 200|0);
   $231 = HEAP32[$230>>2]|0;
   $232 = $231 & 524288;
   $233 = ($232|0)!=(0);
   $234 = $13;
   $235 = ($234|0)==(0);
   $or$cond23 = $233 & $235;
   if ($or$cond23) {
    $236 = $11;
    $237 = $236 & 1;
    $238 = ($237|0)!=(0);
    if (!($238)) {
     $239 = HEAP8[$28>>0]|0;
     $240 = $239 << 24 >> 24;
     $241 = ($240|0)!=(0);
     if (!($241)) {
      break;
     }
    }
    $242 = $6;
    (__Z6LookupP10TranslatorPKcPc($242,22486,$29)|0);
   }
  }
 } while(0);
 HEAP8[$24>>0] = 0;
 $243 = $14;
 $244 = ($243|0)!=(0);
 $245 = $9;
 $246 = ($245|0)==(0);
 $or$cond25 = $244 | $246;
 if (!($or$cond25)) {
  $292 = HEAP8[120143]|0;
  $293 = $292 << 24 >> 24;
  $294 = ($293|0)!=(0);
  if (!($294)) {
   $307 = $8;
   HEAP32[$vararg_buffer56>>2] = $23;
   $vararg_ptr59 = ((($vararg_buffer56)) + 4|0);
   HEAP32[$vararg_ptr59>>2] = $29;
   $vararg_ptr60 = ((($vararg_buffer56)) + 8|0);
   HEAP32[$vararg_ptr60>>2] = 15;
   $vararg_ptr61 = ((($vararg_buffer56)) + 12|0);
   HEAP32[$vararg_ptr61>>2] = $24;
   (_sprintf($307,25507,$vararg_buffer56)|0);
   STACKTOP = sp;return 0;
  }
  $295 = (_strlen($23)|0);
  $16 = $295;
  $296 = $16;
  $297 = ($296|0)>(0);
  if ($297) {
   $298 = $16;
   $299 = (($298) - 1)|0;
   $300 = (($23) + ($299)|0);
   $301 = HEAP8[$300>>0]|0;
   $302 = $301 << 24 >> 24;
   $303 = ($302|0)==(10);
   if ($303) {
    $304 = $16;
    $305 = (($304) - 1)|0;
    $306 = (($23) + ($305)|0);
    HEAP8[$306>>0] = 0;
   }
  }
  (_strcpy($24,120143)|0);
  $307 = $8;
  HEAP32[$vararg_buffer56>>2] = $23;
  $vararg_ptr59 = ((($vararg_buffer56)) + 4|0);
  HEAP32[$vararg_ptr59>>2] = $29;
  $vararg_ptr60 = ((($vararg_buffer56)) + 8|0);
  HEAP32[$vararg_ptr60>>2] = 15;
  $vararg_ptr61 = ((($vararg_buffer56)) + 12|0);
  HEAP32[$vararg_ptr61>>2] = $24;
  (_sprintf($307,25507,$vararg_buffer56)|0);
  STACKTOP = sp;return 0;
 }
 $15 = 0;
 $247 = $10;
 $248 = ($247|0)==(0);
 if ($248) {
  $15 = 2;
  $249 = $18;
  $250 = ($249|0)!=(0);
  $$26 = $250 ? 3 : 2;
  $15 = $$26;
  $251 = $7;
  $252 = ($251|0)<(100);
  if ($252) {
   $253 = $11;
   $254 = $253 & 1;
   $255 = ($254|0)!=(0);
   if (!($255)) {
    $256 = $15;
    $257 = $256 | 4;
    $15 = $257;
   }
  }
  $258 = $18;
  $259 = $258 & 32;
  $260 = ($259|0)!=(0);
  if ($260) {
   $261 = $15;
   $262 = $261 | 32;
   $15 = $262;
  }
 } else {
  $263 = $6;
  $264 = ((($263)) + 204|0);
  $265 = HEAP32[$264>>2]|0;
  $266 = $10;
  $267 = 1 << $266;
  $268 = $265 & $267;
  $269 = ($268|0)!=(0);
  if ($269) {
   $15 = 8;
  }
 }
 $270 = $6;
 $271 = ((($270)) + 324|0);
 $272 = HEAP32[$271>>2]|0;
 $273 = ($272|0)==(28012);
 $274 = $10;
 $275 = ($274|0)==(1);
 $or$cond28 = $273 & $275;
 if ($or$cond28) {
  $276 = $15;
  $277 = $276 | 520;
  $15 = $277;
 }
 $278 = $6;
 $279 = $14;
 $280 = $10;
 $281 = $15;
 $282 = $11;
 $283 = $282 & 256;
 $284 = $281 | $283;
 $285 = (__ZL10LookupNum2P10TranslatoriiiPc($278,$279,$280,$284,$24)|0);
 $286 = ($285|0)!=(0);
 if (!($286)) {
  $307 = $8;
  HEAP32[$vararg_buffer56>>2] = $23;
  $vararg_ptr59 = ((($vararg_buffer56)) + 4|0);
  HEAP32[$vararg_ptr59>>2] = $29;
  $vararg_ptr60 = ((($vararg_buffer56)) + 8|0);
  HEAP32[$vararg_ptr60>>2] = 15;
  $vararg_ptr61 = ((($vararg_buffer56)) + 12|0);
  HEAP32[$vararg_ptr61>>2] = $24;
  (_sprintf($307,25507,$vararg_buffer56)|0);
  STACKTOP = sp;return 0;
 }
 $287 = $6;
 $288 = ((($287)) + 200|0);
 $289 = HEAP32[$288>>2]|0;
 $290 = $289 & 128;
 $291 = ($290|0)!=(0);
 if (!($291)) {
  $307 = $8;
  HEAP32[$vararg_buffer56>>2] = $23;
  $vararg_ptr59 = ((($vararg_buffer56)) + 4|0);
  HEAP32[$vararg_ptr59>>2] = $29;
  $vararg_ptr60 = ((($vararg_buffer56)) + 8|0);
  HEAP32[$vararg_ptr60>>2] = 15;
  $vararg_ptr61 = ((($vararg_buffer56)) + 12|0);
  HEAP32[$vararg_ptr61>>2] = $24;
  (_sprintf($307,25507,$vararg_buffer56)|0);
  STACKTOP = sp;return 0;
 }
 HEAP8[$29>>0] = 0;
 $307 = $8;
 HEAP32[$vararg_buffer56>>2] = $23;
 $vararg_ptr59 = ((($vararg_buffer56)) + 4|0);
 HEAP32[$vararg_ptr59>>2] = $29;
 $vararg_ptr60 = ((($vararg_buffer56)) + 8|0);
 HEAP32[$vararg_ptr60>>2] = 15;
 $vararg_ptr61 = ((($vararg_buffer56)) + 12|0);
 HEAP32[$vararg_ptr61>>2] = $24;
 (_sprintf($307,25507,$vararg_buffer56)|0);
 STACKTOP = sp;return 0;
}
function __ZL10LookupNum2P10TranslatoriiiPc($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0;
 var $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0;
 var $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0;
 var $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0;
 var $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0;
 var $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0;
 var $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0;
 var $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0;
 var $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0;
 var $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0;
 var $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0;
 var $372 = 0, $373 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0;
 var $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0;
 var $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0;
 var $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond = 0, $or$cond11 = 0, $or$cond3 = 0, $or$cond5 = 0, $or$cond7 = 0, $or$cond9 = 0, $vararg_buffer = 0, $vararg_buffer12 = 0, $vararg_buffer15 = 0, $vararg_buffer19 = 0, $vararg_buffer23 = 0;
 var $vararg_buffer26 = 0, $vararg_buffer29 = 0, $vararg_buffer32 = 0, $vararg_buffer35 = 0, $vararg_buffer39 = 0, $vararg_buffer42 = 0, $vararg_buffer45 = 0, $vararg_buffer48 = 0, $vararg_buffer51 = 0, $vararg_buffer55 = 0, $vararg_buffer58 = 0, $vararg_buffer61 = 0, $vararg_buffer64 = 0, $vararg_buffer67 = 0, $vararg_buffer73 = 0, $vararg_buffer79 = 0, $vararg_buffer83 = 0, $vararg_buffer86 = 0, $vararg_ptr18 = 0, $vararg_ptr22 = 0;
 var $vararg_ptr38 = 0, $vararg_ptr54 = 0, $vararg_ptr70 = 0, $vararg_ptr71 = 0, $vararg_ptr72 = 0, $vararg_ptr76 = 0, $vararg_ptr77 = 0, $vararg_ptr78 = 0, $vararg_ptr82 = 0, $vararg_ptr89 = 0, $vararg_ptr90 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 416|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(416|0);
 $vararg_buffer86 = sp + 192|0;
 $vararg_buffer83 = sp + 184|0;
 $vararg_buffer79 = sp + 176|0;
 $vararg_buffer73 = sp + 160|0;
 $vararg_buffer67 = sp + 144|0;
 $vararg_buffer64 = sp + 136|0;
 $vararg_buffer61 = sp + 128|0;
 $vararg_buffer58 = sp + 120|0;
 $vararg_buffer55 = sp + 112|0;
 $vararg_buffer51 = sp + 104|0;
 $vararg_buffer48 = sp + 96|0;
 $vararg_buffer45 = sp + 88|0;
 $vararg_buffer42 = sp + 80|0;
 $vararg_buffer39 = sp + 72|0;
 $vararg_buffer35 = sp + 64|0;
 $vararg_buffer32 = sp + 56|0;
 $vararg_buffer29 = sp + 48|0;
 $vararg_buffer26 = sp + 40|0;
 $vararg_buffer23 = sp + 32|0;
 $vararg_buffer19 = sp + 24|0;
 $vararg_buffer15 = sp + 16|0;
 $vararg_buffer12 = sp + 8|0;
 $vararg_buffer = sp;
 $19 = sp + 392|0;
 $20 = sp + 372|0;
 $21 = sp + 322|0;
 $22 = sp + 272|0;
 $23 = sp + 260|0;
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $9 = $4;
 $15 = 0;
 $16 = 0;
 $18 = 111;
 $24 = $6;
 $25 = (($24|0) % 10)&-1;
 $12 = $25;
 $26 = $6;
 $27 = (($26|0) / 10)&-1;
 $13 = $27;
 $10 = 0;
 HEAP8[$20>>0] = 0;
 HEAP8[$21>>0] = 0;
 HEAP8[$22>>0] = 0;
 HEAP8[$23>>0] = 0;
 $28 = $8;
 $29 = $28 & 32;
 $30 = ($29|0)!=(0);
 if ($30) {
  $18 = 113;
 }
 $31 = $8;
 $32 = $31 & 1;
 $14 = $32;
 $33 = $8;
 $34 = $33 & 2;
 $35 = ($34|0)!=(0);
 $36 = HEAP32[11236]|0;
 $37 = ($36|0)==(2);
 $or$cond = $35 & $37;
 do {
  if ($or$cond) {
   $38 = $9;
   $39 = HEAP32[11237]|0;
   (_strcpy($38,$39)|0);
  } else {
   $40 = HEAP32[11237]|0;
   $41 = HEAP8[$40>>0]|0;
   $42 = $41 << 24 >> 24;
   $43 = ($42|0)==(0);
   do {
    if ($43) {
     $44 = $8;
     $45 = $44 & 8;
     $46 = ($45|0)!=(0);
     if ($46) {
      $47 = $6;
      HEAP32[$vararg_buffer>>2] = $47;
      (_sprintf($19,22413,$vararg_buffer)|0);
      $48 = $5;
      $49 = (__Z6LookupP10TranslatorPKcPc($48,$19,$22)|0);
      $10 = $49;
      $50 = ($49|0)==(0);
      if ($50) {
       $51 = $6;
       HEAP32[$vararg_buffer12>>2] = $51;
       (_sprintf($19,22419,$vararg_buffer12)|0);
       $52 = $5;
       $53 = (__Z6LookupP10TranslatorPKcPc($52,$19,$22)|0);
       $10 = $53;
      }
     } else {
      $54 = $14;
      $55 = ($54|0)!=(0);
      if ($55) {
       (_strcpy($20,120143)|0);
       $56 = $8;
       $57 = $56 & 4;
       $58 = ($57|0)!=(0);
       if ($58) {
        $59 = $6;
        $60 = $18;
        HEAP32[$vararg_buffer15>>2] = $59;
        $vararg_ptr18 = ((($vararg_buffer15)) + 4|0);
        HEAP32[$vararg_ptr18>>2] = $60;
        (_sprintf($19,22424,$vararg_buffer15)|0);
        $61 = $5;
        $62 = (__Z6LookupP10TranslatorPKcPc($61,$19,$22)|0);
        $10 = $62;
        $63 = ($62|0)!=(0);
        if ($63) {
         $64 = HEAP8[120155]|0;
         $65 = $64 << 24 >> 24;
         $66 = ($65|0)!=(0);
         if ($66) {
          (_strcpy($20,120155)|0);
         }
        }
       }
       $67 = $10;
       $68 = ($67|0)==(0);
       if ($68) {
        $69 = $6;
        $70 = $18;
        HEAP32[$vararg_buffer19>>2] = $69;
        $vararg_ptr22 = ((($vararg_buffer19)) + 4|0);
        HEAP32[$vararg_ptr22>>2] = $70;
        (_sprintf($19,22431,$vararg_buffer19)|0);
        $71 = $5;
        $72 = (__Z6LookupP10TranslatorPKcPc($71,$19,$22)|0);
        $10 = $72;
       }
       $73 = $10;
       $16 = $73;
      }
     }
     $74 = $10;
     $75 = ($74|0)==(0);
     if ($75) {
      $76 = $8;
      $77 = $76 & 2;
      $78 = ($77|0)!=(0);
      if ($78) {
       $79 = HEAP32[11238]|0;
       $80 = $79 & 1;
       $81 = ($80|0)!=(0);
       if ($81) {
        $82 = $6;
        HEAP32[$vararg_buffer23>>2] = $82;
        (_sprintf($19,22437,$vararg_buffer23)|0);
        $83 = $5;
        $84 = (__Z6LookupP10TranslatorPKcPc($83,$19,$22)|0);
        $10 = $84;
       }
      } else {
       $85 = $5;
       $86 = ((($85)) + 204|0);
       $87 = HEAP32[$86>>2]|0;
       $88 = $87 & 262144;
       $89 = ($88|0)!=(0);
       $90 = $7;
       $91 = ($90|0)<=(1);
       $or$cond3 = $89 & $91;
       $92 = $6;
       if ($or$cond3) {
        HEAP32[$vararg_buffer26>>2] = $92;
        (_sprintf($19,22442,$vararg_buffer26)|0);
       } else {
        HEAP32[$vararg_buffer29>>2] = $92;
        (_sprintf($19,22447,$vararg_buffer29)|0);
       }
       $93 = $5;
       $94 = (__Z6LookupP10TranslatorPKcPc($93,$19,$22)|0);
       $10 = $94;
      }
      $95 = $10;
      $96 = ($95|0)!=(0);
      if (!($96)) {
       $97 = $14;
       $98 = ($97|0)!=(0);
       if ($98) {
        $99 = $5;
        $100 = ((($99)) + 204|0);
        $101 = HEAP32[$100>>2]|0;
        $102 = $101 & 8192;
        $103 = ($102|0)!=(0);
        if ($103) {
         break;
        }
       }
       $104 = $6;
       HEAP32[$vararg_buffer32>>2] = $104;
       (_sprintf($19,22452,$vararg_buffer32)|0);
       $105 = $5;
       $106 = (__Z6LookupP10TranslatorPKcPc($105,$19,$22)|0);
       $10 = $106;
      }
     }
    }
   } while(0);
   $107 = $8;
   $108 = $107 & 16;
   $109 = ($108|0)!=(0);
   $110 = $6;
   $111 = ($110|0)<(10);
   $or$cond5 = $109 & $111;
   do {
    if ($or$cond5) {
     $112 = $5;
     (__Z6LookupP10TranslatorPKcPc($112,22348,$21)|0);
    } else {
     $113 = $10;
     $114 = ($113|0)!=(0);
     if ($114) {
      HEAP8[$21>>0] = 0;
      break;
     }
     $115 = $14;
     $116 = ($115|0)!=(0);
     if ($116) {
      $117 = $13;
      $118 = $18;
      HEAP32[$vararg_buffer35>>2] = $117;
      $vararg_ptr38 = ((($vararg_buffer35)) + 4|0);
      HEAP32[$vararg_ptr38>>2] = $118;
      (_sprintf($19,22456,$vararg_buffer35)|0);
      $119 = $5;
      $120 = (__Z6LookupP10TranslatorPKcPc($119,$19,$21)|0);
      $121 = ($120|0)!=(0);
      if ($121) {
       $16 = 1;
       $122 = $12;
       $123 = ($122|0)!=(0);
       if ($123) {
        $124 = $5;
        $125 = ((($124)) + 204|0);
        $126 = HEAP32[$125>>2]|0;
        $127 = $126 & 4096;
        $128 = ($127|0)!=(0);
        if ($128) {
         (_strcat($21,120143)|0);
        }
       }
      }
     }
     $129 = $16;
     $130 = ($129|0)==(0);
     if ($130) {
      $131 = $8;
      $132 = $131 & 512;
      $133 = ($132|0)!=(0);
      $134 = $13;
      if ($133) {
       HEAP32[$vararg_buffer39>>2] = $134;
       (_sprintf($19,22463,$vararg_buffer39)|0);
      } else {
       HEAP32[$vararg_buffer42>>2] = $134;
       (_sprintf($19,22469,$vararg_buffer42)|0);
      }
      $135 = $5;
      (__Z6LookupP10TranslatorPKcPc($135,$19,$21)|0);
     }
     $136 = HEAP8[$21>>0]|0;
     $137 = $136 << 24 >> 24;
     $138 = ($137|0)==(0);
     if ($138) {
      $139 = $5;
      $140 = ((($139)) + 200|0);
      $141 = HEAP32[$140>>2]|0;
      $142 = $141 & 1048576;
      $143 = ($142|0)!=(0);
      if ($143) {
       $144 = $6;
       $145 = (($144|0) % 20)&-1;
       $12 = $145;
       $146 = $13;
       $147 = $146 & 254;
       HEAP32[$vararg_buffer45>>2] = $147;
       (_sprintf($19,22469,$vararg_buffer45)|0);
       $148 = $5;
       (__Z6LookupP10TranslatorPKcPc($148,$19,$21)|0);
      }
     }
     HEAP8[$22>>0] = 0;
     $149 = $12;
     $150 = ($149|0)>(0);
     if ($150) {
      $10 = 0;
      $151 = $8;
      $152 = $151 & 2;
      $153 = ($152|0)!=(0);
      if ($153) {
       $154 = HEAP32[11237]|0;
       $155 = HEAP8[$154>>0]|0;
       $156 = $155 << 24 >> 24;
       $157 = ($156|0)!=(0);
       if ($157) {
        $158 = HEAP32[11237]|0;
        (_strcpy($22,$158)|0);
        $16 = 1;
        HEAP8[$20>>0] = 0;
        break;
       }
      }
      $159 = $8;
      $160 = $159 & 8;
      $161 = ($160|0)!=(0);
      if ($161) {
       $162 = $12;
       HEAP32[$vararg_buffer48>>2] = $162;
       (_sprintf($19,22419,$vararg_buffer48)|0);
       $163 = $5;
       $164 = (__Z6LookupP10TranslatorPKcPc($163,$19,$22)|0);
       $10 = $164;
      }
      $165 = $14;
      $166 = ($165|0)!=(0);
      if ($166) {
       $167 = $5;
       $168 = ((($167)) + 200|0);
       $169 = HEAP32[$168>>2]|0;
       $170 = $169 & 16;
       $171 = ($170|0)==(0);
       if ($171) {
        $172 = $12;
        $173 = $18;
        HEAP32[$vararg_buffer51>>2] = $172;
        $vararg_ptr54 = ((($vararg_buffer51)) + 4|0);
        HEAP32[$vararg_ptr54>>2] = $173;
        (_sprintf($19,22431,$vararg_buffer51)|0);
        $174 = $5;
        $175 = (__Z6LookupP10TranslatorPKcPc($174,$19,$22)|0);
        $10 = $175;
        $176 = ($175|0)!=(0);
        if ($176) {
         $16 = 1;
        }
       }
      }
      $177 = $10;
      $178 = ($177|0)==(0);
      do {
       if ($178) {
        $179 = HEAP32[11238]|0;
        $180 = $179 & 1;
        $181 = ($180|0)!=(0);
        if ($181) {
         $182 = $8;
         $183 = $182 & 2;
         $184 = ($183|0)!=(0);
         if ($184) {
          $185 = $12;
          HEAP32[$vararg_buffer55>>2] = $185;
          (_sprintf($19,22437,$vararg_buffer55)|0);
          $186 = $5;
          $187 = (__Z6LookupP10TranslatorPKcPc($186,$19,$22)|0);
          $10 = $187;
          break;
         }
        }
        $188 = $8;
        $189 = $188 & 2;
        $190 = ($189|0)==(0);
        if (!($190)) {
         $191 = $5;
         $192 = ((($191)) + 200|0);
         $193 = HEAP32[$192>>2]|0;
         $194 = $193 & 16;
         $195 = ($194|0)!=(0);
         if (!($195)) {
          break;
         }
        }
        $196 = $5;
        $197 = ((($196)) + 204|0);
        $198 = HEAP32[$197>>2]|0;
        $199 = $198 & 262144;
        $200 = ($199|0)!=(0);
        $201 = $7;
        $202 = ($201|0)<=(1);
        $or$cond7 = $200 & $202;
        $203 = $12;
        if ($or$cond7) {
         HEAP32[$vararg_buffer58>>2] = $203;
         (_sprintf($19,22442,$vararg_buffer58)|0);
        } else {
         HEAP32[$vararg_buffer61>>2] = $203;
         (_sprintf($19,22447,$vararg_buffer61)|0);
        }
        $204 = $5;
        $205 = (__Z6LookupP10TranslatorPKcPc($204,$19,$22)|0);
        $10 = $205;
       }
      } while(0);
      $206 = $10;
      $207 = ($206|0)==(0);
      if ($207) {
       $208 = $12;
       HEAP32[$vararg_buffer64>>2] = $208;
       (_sprintf($19,22452,$vararg_buffer64)|0);
       $209 = $5;
       (__Z6LookupP10TranslatorPKcPc($209,$19,$22)|0);
      }
     }
    }
   } while(0);
   $210 = $14;
   $211 = ($210|0)!=(0);
   $212 = $16;
   $213 = ($212|0)==(0);
   $or$cond9 = $211 & $213;
   if ($or$cond9) {
    $214 = HEAP8[$20>>0]|0;
    $215 = $214 << 24 >> 24;
    $216 = ($215|0)==(0);
    if ($216) {
     $217 = $6;
     $218 = ($217|0)>=(20);
     do {
      if ($218) {
       $219 = $6;
       $220 = (($219|0) % 10)&-1;
       $221 = ($220|0)==(0);
       if (!($221)) {
        $222 = $5;
        $223 = ((($222)) + 200|0);
        $224 = HEAP32[$223>>2]|0;
        $225 = $224 & 16;
        $226 = ($225|0)!=(0);
        if (!($226)) {
         break;
        }
       }
       $227 = $5;
       (__Z6LookupP10TranslatorPKcPc($227,22474,$20)|0);
      }
     } while(0);
     $228 = HEAP8[$20>>0]|0;
     $229 = $228 << 24 >> 24;
     $230 = ($229|0)==(0);
     if ($230) {
      $231 = $5;
      (__Z6LookupP10TranslatorPKcPc($231,22481,$20)|0);
     }
    }
   }
   $232 = $5;
   $233 = ((($232)) + 200|0);
   $234 = HEAP32[$233>>2]|0;
   $235 = $234 & 48;
   $236 = ($235|0)!=(0);
   if ($236) {
    $237 = HEAP8[$21>>0]|0;
    $238 = $237 << 24 >> 24;
    $239 = ($238|0)!=(0);
    if ($239) {
     $240 = HEAP8[$22>>0]|0;
     $241 = $240 << 24 >> 24;
     $242 = ($241|0)!=(0);
     if ($242) {
      $243 = $5;
      (__Z6LookupP10TranslatorPKcPc($243,22486,$23)|0);
      $244 = $14;
      $245 = ($244|0)!=(0);
      if ($245) {
       $246 = $5;
       $247 = ((($246)) + 204|0);
       $248 = HEAP32[$247>>2]|0;
       $249 = $248 & 2048;
       $250 = ($249|0)!=(0);
       if ($250) {
        HEAP8[$23>>0] = 0;
       }
      }
      $251 = $5;
      $252 = ((($251)) + 200|0);
      $253 = HEAP32[$252>>2]|0;
      $254 = $253 & 16;
      $255 = ($254|0)!=(0);
      $256 = $9;
      if ($255) {
       HEAP32[$vararg_buffer67>>2] = $22;
       $vararg_ptr70 = ((($vararg_buffer67)) + 4|0);
       HEAP32[$vararg_ptr70>>2] = $23;
       $vararg_ptr71 = ((($vararg_buffer67)) + 8|0);
       HEAP32[$vararg_ptr71>>2] = $21;
       $vararg_ptr72 = ((($vararg_buffer67)) + 12|0);
       HEAP32[$vararg_ptr72>>2] = $20;
       (_sprintf($256,22492,$vararg_buffer67)|0);
      } else {
       HEAP32[$vararg_buffer73>>2] = $21;
       $vararg_ptr76 = ((($vararg_buffer73)) + 4|0);
       HEAP32[$vararg_ptr76>>2] = $23;
       $vararg_ptr77 = ((($vararg_buffer73)) + 8|0);
       HEAP32[$vararg_ptr77>>2] = $22;
       $vararg_ptr78 = ((($vararg_buffer73)) + 12|0);
       HEAP32[$vararg_ptr78>>2] = $20;
       (_sprintf($256,22492,$vararg_buffer73)|0);
      }
      $15 = 1;
      break;
     }
    }
   }
   $257 = $5;
   $258 = ((($257)) + 200|0);
   $259 = HEAP32[$258>>2]|0;
   $260 = $259 & 512;
   $261 = ($260|0)!=(0);
   if ($261) {
    $262 = (_strlen($21)|0);
    $263 = (($262) - 1)|0;
    $11 = $263;
    $264 = ($263|0)>=(0);
    if ($264) {
     $265 = HEAP8[$22>>0]|0;
     $266 = $265 << 24 >> 24;
     $267 = ($266|0)!=(0);
     if ($267) {
      $268 = HEAP8[$22>>0]|0;
      $269 = $268 << 24 >> 24;
      $270 = (45008 + ($269<<2)|0);
      $271 = HEAP32[$270>>2]|0;
      $272 = ((($271)) + 11|0);
      $273 = HEAP8[$272>>0]|0;
      $274 = $273&255;
      $17 = $274;
      $275 = ($274|0)==(1);
      if ($275) {
       $276 = ((($22)) + 1|0);
       $277 = HEAP8[$276>>0]|0;
       $278 = $277 << 24 >> 24;
       $279 = (45008 + ($278<<2)|0);
       $280 = HEAP32[$279>>2]|0;
       $281 = ((($280)) + 11|0);
       $282 = HEAP8[$281>>0]|0;
       $283 = $282&255;
       $17 = $283;
      }
      $284 = $11;
      $285 = (($21) + ($284)|0);
      $286 = HEAP8[$285>>0]|0;
      $287 = $286 << 24 >> 24;
      $288 = (45008 + ($287<<2)|0);
      $289 = HEAP32[$288>>2]|0;
      $290 = ((($289)) + 11|0);
      $291 = HEAP8[$290>>0]|0;
      $292 = $291&255;
      $293 = ($292|0)==(2);
      $294 = $17;
      $295 = ($294|0)==(2);
      $or$cond11 = $293 & $295;
      if ($or$cond11) {
       $296 = $11;
       $297 = (($21) + ($296)|0);
       HEAP8[$297>>0] = 0;
      }
     }
    }
   }
   $298 = $5;
   $299 = ((($298)) + 204|0);
   $300 = HEAP32[$299>>2]|0;
   $301 = $300 & 524288;
   $302 = ($301|0)!=(0);
   if ($302) {
    $303 = HEAP8[$20>>0]|0;
    $304 = $303 << 24 >> 24;
    $305 = ($304|0)!=(0);
    if ($305) {
     $306 = $9;
     HEAP32[$vararg_buffer79>>2] = $21;
     $vararg_ptr82 = ((($vararg_buffer79)) + 4|0);
     HEAP32[$vararg_ptr82>>2] = $22;
     $307 = (_sprintf($306,25477,$vararg_buffer79)|0);
     $11 = $307;
     $308 = $11;
     $309 = ($308|0)>(0);
     if ($309) {
      $310 = $11;
      $311 = (($310) - 1)|0;
      $312 = $9;
      $313 = (($312) + ($311)|0);
      $314 = HEAP8[$313>>0]|0;
      $315 = $314&255;
      $316 = (45008 + ($315<<2)|0);
      $317 = HEAP32[$316>>2]|0;
      $318 = ((($317)) + 11|0);
      $319 = HEAP8[$318>>0]|0;
      $320 = $319&255;
      $321 = ($320|0)==(2);
      if ($321) {
       $322 = $11;
       $323 = (($322) + -1)|0;
       $11 = $323;
      }
     }
     $324 = $11;
     $325 = $9;
     $326 = (($325) + ($324)|0);
     HEAP32[$vararg_buffer83>>2] = $20;
     (_sprintf($326,25552,$vararg_buffer83)|0);
     break;
    }
   }
   $327 = $9;
   HEAP32[$vararg_buffer86>>2] = $21;
   $vararg_ptr89 = ((($vararg_buffer86)) + 4|0);
   HEAP32[$vararg_ptr89>>2] = $22;
   $vararg_ptr90 = ((($vararg_buffer86)) + 8|0);
   HEAP32[$vararg_ptr90>>2] = $20;
   (_sprintf($327,23381,$vararg_buffer86)|0);
  }
 } while(0);
 $328 = $5;
 $329 = ((($328)) + 200|0);
 $330 = HEAP32[$329>>2]|0;
 $331 = $330 & 268435456;
 $332 = ($331|0)!=(0);
 if ($332) {
  $10 = 0;
  $11 = 0;
  while(1) {
   $333 = $11;
   $334 = $9;
   $335 = (_strlen($334)|0);
   $336 = ($333|0)<($335|0);
   if (!($336)) {
    break;
   }
   $337 = $11;
   $338 = $9;
   $339 = (($338) + ($337)|0);
   $340 = HEAP8[$339>>0]|0;
   $341 = $340 << 24 >> 24;
   $342 = ($341|0)==(6);
   do {
    if ($342) {
     $343 = $10;
     $344 = ($343|0)!=(0);
     if ($344) {
      $345 = $11;
      $346 = $9;
      $347 = (($346) + ($345)|0);
      HEAP8[$347>>0] = 5;
      break;
     } else {
      $10 = 1;
      break;
     }
    }
   } while(0);
   $348 = $11;
   $349 = (($348) + 1)|0;
   $11 = $349;
  }
  $373 = $15;
  STACKTOP = sp;return ($373|0);
 }
 $350 = $5;
 $351 = ((($350)) + 200|0);
 $352 = HEAP32[$351>>2]|0;
 $353 = $352 & 256;
 $354 = ($353|0)!=(0);
 if (!($354)) {
  $373 = $15;
  STACKTOP = sp;return ($373|0);
 }
 $10 = 0;
 $355 = $9;
 $356 = (_strlen($355)|0);
 $357 = (($356) - 1)|0;
 $11 = $357;
 while(1) {
  $358 = $11;
  $359 = ($358|0)>=(0);
  if (!($359)) {
   break;
  }
  $360 = $11;
  $361 = $9;
  $362 = (($361) + ($360)|0);
  $363 = HEAP8[$362>>0]|0;
  $364 = $363 << 24 >> 24;
  $365 = ($364|0)==(6);
  do {
   if ($365) {
    $366 = $10;
    $367 = ($366|0)!=(0);
    if ($367) {
     $368 = $11;
     $369 = $9;
     $370 = (($369) + ($368)|0);
     HEAP8[$370>>0] = 5;
     break;
    } else {
     $10 = 1;
     break;
    }
   }
  } while(0);
  $371 = $11;
  $372 = (($371) + -1)|0;
  $11 = $372;
 }
 $373 = $15;
 STACKTOP = sp;return ($373|0);
}
function __ZL9M_Varianti($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = 0;
 $4 = $2;
 $5 = (($4|0) % 100)&-1;
 $6 = ($5|0)>(10);
 if ($6) {
  $7 = $2;
  $8 = (($7|0) % 100)&-1;
  $9 = ($8|0)<(20);
  if ($9) {
   $3 = 1;
  }
 }
 $10 = HEAP32[19149]|0;
 $11 = ((($10)) + 204|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = $12 >> 6;
 $14 = $13 & 7;
 L5: do {
  switch ($14|0) {
  case 1:  {
   $15 = $3;
   $16 = ($15|0)==(0);
   if ($16) {
    $17 = $2;
    $18 = (($17|0) % 10)&-1;
    $19 = ($18|0)==(1);
    if ($19) {
     $1 = 22620;
    } else {
     label = 25;
    }
   } else {
    label = 25;
   }
   break;
  }
  case 2:  {
   $20 = $2;
   $21 = ($20|0)>=(2);
   $22 = $2;
   $23 = ($22|0)<=(4);
   $or$cond = $21 & $23;
   if ($or$cond) {
    $1 = 22623;
   } else {
    label = 25;
   }
   break;
  }
  case 3:  {
   $24 = $3;
   $25 = ($24|0)==(0);
   if ($25) {
    $26 = $2;
    $27 = (($26|0) % 10)&-1;
    $28 = ($27|0)>=(2);
    if ($28) {
     $29 = $2;
     $30 = (($29|0) % 10)&-1;
     $31 = ($30|0)<=(4);
     if ($31) {
      $1 = 22623;
     } else {
      label = 25;
     }
    } else {
     label = 25;
    }
   } else {
    label = 25;
   }
   break;
  }
  case 4:  {
   $32 = $3;
   $33 = ($32|0)==(1);
   if (!($33)) {
    $34 = $2;
    $35 = (($34|0) % 10)&-1;
    $36 = ($35|0)==(0);
    if (!($36)) {
     $37 = $2;
     $38 = (($37|0) % 10)&-1;
     $39 = ($38|0)==(1);
     if (!($39)) {
      label = 25;
      break L5;
     }
     $1 = 22623;
     break L5;
    }
   }
   $1 = 22627;
   break;
  }
  case 5:  {
   $40 = $3;
   $41 = ($40|0)==(0);
   if ($41) {
    $42 = $2;
    $43 = (($42|0) % 10)&-1;
    $44 = ($43|0)==(1);
    if ($44) {
     $1 = 22620;
     break L5;
    }
    $45 = $2;
    $46 = (($45|0) % 10)&-1;
    $47 = ($46|0)>=(2);
    if ($47) {
     $48 = $2;
     $49 = (($48|0) % 10)&-1;
     $50 = ($49|0)<=(4);
     if ($50) {
      $1 = 22623;
     } else {
      label = 25;
     }
    } else {
     label = 25;
    }
   } else {
    label = 25;
   }
   break;
  }
  default: {
   label = 25;
  }
  }
 } while(0);
 if ((label|0) == 25) {
  $1 = 22631;
 }
 $51 = $1;
 STACKTOP = sp;return ($51|0);
}
function __Z15LoadMbrolaTablePKcS0_i($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0.0, $56 = 0.0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0;
 var $vararg_buffer12 = 0, $vararg_buffer2 = 0, $vararg_buffer5 = 0, $vararg_buffer9 = 0, $vararg_ptr1 = 0, $vararg_ptr15 = 0, $vararg_ptr8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 256|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(256|0);
 $vararg_buffer12 = sp + 32|0;
 $vararg_buffer9 = sp + 24|0;
 $vararg_buffer5 = sp + 16|0;
 $vararg_buffer2 = sp + 8|0;
 $vararg_buffer = sp;
 $11 = sp + 72|0;
 $4 = $0;
 $5 = $1;
 $6 = $2;
 HEAP8[120473] = 0;
 HEAP32[18778] = 0;
 HEAP32[11240] = 0;
 $12 = $4;
 $13 = ($12|0)==(0|0);
 if ($13) {
  $14 = HEAP32[20212]|0;
  HEAP32[20211] = $14;
  __Z12SetParameteriii(14,0,0);
  $3 = 0;
  $61 = $3;
  STACKTOP = sp;return ($61|0);
 }
 $15 = $4;
 HEAP32[$vararg_buffer>>2] = 119484;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $15;
 (_sprintf($11,22642,$vararg_buffer)|0);
 $16 = (__Z13GetFileLengthPKc($11)|0);
 $17 = ($16|0)<=(0);
 if ($17) {
  $18 = $4;
  HEAP32[$vararg_buffer2>>2] = $18;
  (_sprintf($11,22655,$vararg_buffer2)|0);
  $19 = (__Z13GetFileLengthPKc($11)|0);
  $20 = ($19|0)<=(0);
  if ($20) {
   $21 = $4;
   $22 = $4;
   HEAP32[$vararg_buffer5>>2] = $21;
   $vararg_ptr8 = ((($vararg_buffer5)) + 4|0);
   HEAP32[$vararg_ptr8>>2] = $22;
   (_sprintf($11,22676,$vararg_buffer5)|0);
   $23 = (__Z13GetFileLengthPKc($11)|0);
   $24 = ($23|0)<=(0);
   if ($24) {
    $25 = $4;
    HEAP32[$vararg_buffer9>>2] = $25;
    (_sprintf($11,22700,$vararg_buffer9)|0);
   }
  }
 }
 _close_MBR();
 $26 = (_init_MBR($11)|0);
 $27 = ($26|0)!=(0);
 if ($27) {
  $3 = 2;
  $61 = $3;
  STACKTOP = sp;return ($61|0);
 }
 __ZL14setNoError_MBRi(1);
 $28 = $5;
 HEAP32[$vararg_buffer12>>2] = 119484;
 $vararg_ptr15 = ((($vararg_buffer12)) + 4|0);
 HEAP32[$vararg_ptr15>>2] = $28;
 (_sprintf($11,22728,$vararg_buffer12)|0);
 $29 = (__Z13GetFileLengthPKc($11)|0);
 $7 = $29;
 $30 = (_fopen($11,22846)|0);
 $10 = $30;
 $31 = ($30|0)==(0|0);
 if ($31) {
  _close_MBR();
  $3 = 2;
  $61 = $3;
  STACKTOP = sp;return ($61|0);
 }
 $32 = HEAP32[11241]|0;
 $33 = $7;
 $34 = (_realloc($32,$33)|0);
 HEAP32[11241] = $34;
 $35 = ($34|0)==(0|0);
 $36 = $10;
 if ($35) {
  (_fclose($36)|0);
  _close_MBR();
  $3 = -1;
  $61 = $3;
  STACKTOP = sp;return ($61|0);
 }
 $37 = (__Z10Read4BytesP8_IO_FILE($36)|0);
 HEAP32[11242] = $37;
 $38 = HEAP32[11241]|0;
 $9 = $38;
 $8 = 4;
 while(1) {
  $39 = $8;
  $40 = $7;
  $41 = ($39|0)<($40|0);
  if (!($41)) {
   break;
  }
  $42 = $10;
  $43 = (__Z10Read4BytesP8_IO_FILE($42)|0);
  $44 = $9;
  $45 = ((($44)) + 4|0);
  $9 = $45;
  HEAP32[$44>>2] = $43;
  $46 = $8;
  $47 = (($46) + 4)|0;
  $8 = $47;
 }
 $48 = HEAP32[11241]|0;
 $49 = $7;
 $50 = $10;
 $51 = (_fread($48,1,$49,$50)|0);
 $7 = $51;
 $52 = $10;
 (_fclose($52)|0);
 $53 = HEAP32[11242]|0;
 $54 = $53 & 255;
 $55 = (+($54|0));
 $56 = $55 / 16.0;
 _setVolumeRatio_MBR($56);
 $57 = $6;
 HEAP32[20211] = $57;
 $58 = $6;
 $59 = ($58|0)==(22050);
 if ($59) {
  __Z12SetParameteriii(14,0,0);
 } else {
  __Z12SetParameteriii(14,1,0);
 }
 $60 = $4;
 (_strcpy(120473,$60)|0);
 HEAP32[18778] = 1000;
 $3 = 0;
 $61 = $3;
 STACKTOP = sp;return ($61|0);
}
function __ZL14setNoError_MBRi($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 STACKTOP = sp;return;
}
function __Z15MbrolaTranslateP12PHONEME_LISTiiP8_IO_FILE($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$ = 0, $$1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0;
 var $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0;
 var $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0;
 var $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0;
 var $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0;
 var $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0;
 var $298 = 0, $299 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0;
 var $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0;
 var $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0;
 var $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0;
 var $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0;
 var $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0;
 var $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0;
 var $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0;
 var $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0;
 var $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0;
 var $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $vararg_buffer = 0, $vararg_buffer10 = 0, $vararg_buffer15 = 0, $vararg_buffer19 = 0, $vararg_buffer2 = 0, $vararg_buffer23 = 0;
 var $vararg_buffer6 = 0, $vararg_ptr13 = 0, $vararg_ptr14 = 0, $vararg_ptr18 = 0, $vararg_ptr22 = 0, $vararg_ptr5 = 0, $vararg_ptr9 = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 496|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(496|0);
 $vararg_buffer23 = sp + 56|0;
 $vararg_buffer19 = sp + 48|0;
 $vararg_buffer15 = sp + 40|0;
 $vararg_buffer10 = sp + 24|0;
 $vararg_buffer6 = sp + 16|0;
 $vararg_buffer2 = sp + 8|0;
 $vararg_buffer = sp;
 $17 = sp + 152|0;
 $18 = sp + 104|0;
 $21 = sp + 92|0;
 $22 = sp + 88|0;
 $24 = sp + 80|0;
 $27 = sp + 376|0;
 $28 = sp + 360|0;
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $19 = 0;
 $32 = $7;
 $33 = ($32|0)!=(0);
 if (!($33)) {
  HEAP32[11243] = 1;
  HEAP32[11244] = 0;
  HEAP32[11245] = 0;
 }
 while(1) {
  $34 = HEAP32[11243]|0;
  $35 = $6;
  $36 = ($34|0)<($35|0);
  if (!($36)) {
   label = 63;
   break;
  }
  $37 = (__Z9WcmdqFreev()|0);
  $38 = ($37|0)<(25);
  if ($38) {
   label = 5;
   break;
  }
  $26 = $27;
  $39 = HEAP32[11243]|0;
  $40 = $5;
  $41 = (($40) + (($39*24)|0)|0);
  $15 = $41;
  $42 = HEAP32[11243]|0;
  $43 = (($42) + 1)|0;
  $44 = $5;
  $45 = (($44) + (($43*24)|0)|0);
  $16 = $45;
  $46 = $15;
  $47 = ((($46)) + 8|0);
  $48 = HEAP32[$47>>2]|0;
  $12 = $48;
  $49 = HEAP32[11243]|0;
  $50 = (($49) - 1)|0;
  $51 = $5;
  $52 = (($51) + (($50*24)|0)|0);
  $53 = ((($52)) + 8|0);
  $54 = HEAP32[$53>>2]|0;
  $14 = $54;
  $55 = HEAP32[11243]|0;
  $56 = (($55) + 1)|0;
  $57 = $5;
  $58 = (($57) + (($56*24)|0)|0);
  $59 = ((($58)) + 8|0);
  $60 = HEAP32[$59>>2]|0;
  $13 = $60;
  $61 = $15;
  $62 = HEAP16[$61>>1]|0;
  $63 = $62&65535;
  $64 = $63 & 2;
  $65 = ($64|0)!=(0);
  if ($65) {
   $66 = $15;
   $67 = ((($66)) + 4|0);
   $68 = HEAP16[$67>>1]|0;
   $69 = $68&65535;
   __Z10DoEmbeddedPii(44976,$69);
  }
  $70 = $15;
  $71 = ((($70)) + 21|0);
  $72 = HEAP8[$71>>0]|0;
  $73 = $72&255;
  $74 = $73 & 4;
  $75 = ($74|0)!=(0);
  if ($75) {
   $76 = $15;
   $77 = ((($76)) + 4|0);
   $78 = HEAP16[$77>>1]|0;
   $79 = $78&65535;
   $80 = $79 & 2047;
   $81 = HEAP32[19172]|0;
   $82 = (($80) + ($81))|0;
   $83 = HEAP32[19170]|0;
   __Z8DoMarkeriiii(2,$82,0,$83);
  }
  $84 = $15;
  $85 = ((($84)) + 21|0);
  $86 = HEAP8[$85>>0]|0;
  $87 = $86&255;
  $88 = $87 & 1;
  $89 = ($88|0)!=(0);
  if ($89) {
   $90 = $15;
   $91 = ((($90)) + 4|0);
   $92 = HEAP16[$91>>1]|0;
   $93 = $92&65535;
   $94 = $93 & 2047;
   $95 = HEAP32[19172]|0;
   $96 = (($94) + ($95))|0;
   $97 = $15;
   $98 = ((($97)) + 4|0);
   $99 = HEAP16[$98>>1]|0;
   $100 = $99&65535;
   $101 = $100 >> 11;
   $102 = HEAP32[19173]|0;
   $103 = HEAP32[11245]|0;
   $104 = (($103) + 1)|0;
   HEAP32[11245] = $104;
   $105 = (($102) + ($103))|0;
   __Z8DoMarkeriiii(1,$96,$101,$105);
  }
  $106 = $15;
  $107 = $12;
  $108 = $14;
  $109 = $13;
  $110 = (__ZL10GetMbrNameP12PHONEME_LISTP11PHONEME_TABS2_S2_PiS3_S3_($106,$107,$108,$109,$21,$24,$22)|0);
  $9 = $110;
  $111 = HEAP32[$22>>2]|0;
  $112 = $111 & 1;
  $113 = ($112|0)!=(0);
  if ($113) {
   $114 = HEAP32[11243]|0;
   $115 = (($114) + 1)|0;
   HEAP32[11243] = $115;
  }
  $116 = $9;
  $117 = ($116|0)==(0);
  if ($117) {
   $118 = HEAP32[11243]|0;
   $119 = (($118) + 1)|0;
   HEAP32[11243] = $119;
   continue;
  }
  $120 = $12;
  $121 = ((($120)) + 11|0);
  $122 = HEAP8[$121>>0]|0;
  $123 = $122&255;
  $124 = ($123|0)==(0);
  if ($124) {
   $125 = $9;
   $126 = $12;
   $127 = HEAP32[$126>>2]|0;
   $128 = ($125|0)==($127|0);
   if ($128) {
    $9 = 95;
    $129 = $15;
    $130 = ((($129)) + 12|0);
    $131 = HEAP32[$130>>2]|0;
    $132 = HEAP32[18779]|0;
    $133 = Math_imul($131, $132)|0;
    $134 = (($133>>>0) / 256)&-1;
    $10 = $134;
    $135 = $10;
    $136 = ($135|0)==(0);
    $$ = $136 ? 1 : $134;
    $10 = $$;
   } else {
    label = 19;
   }
  } else {
   label = 19;
  }
  if ((label|0) == 19) {
   label = 0;
   $137 = HEAP32[(75128)>>2]|0;
   $138 = ($137*80)|0;
   $139 = (($138|0) / 256)&-1;
   $10 = $139;
  }
  $140 = $12;
  $141 = ((($140)) + 10|0);
  $142 = HEAP8[$141>>0]|0;
  $143 = $142&255;
  $144 = ($143|0)!=(15);
  if ($144) {
   $145 = $15;
   $146 = ((($145)) + 8|0);
   $147 = HEAP32[$146>>2]|0;
   $148 = $15;
   $149 = HEAP32[19155]|0;
   $150 = $149 & 2;
   (__Z15WritePhMnemonicPcP11PHONEME_TABP12PHONEME_LISTiPi($28,$147,$148,$150,0)|0);
   $151 = $15;
   $152 = ((($151)) + 4|0);
   $153 = HEAP16[$152>>1]|0;
   $154 = $153&65535;
   $155 = $154 & 2047;
   $156 = HEAP32[19172]|0;
   $157 = (($155) + ($156))|0;
   __Z15DoPhonemeMarkeriiiPc(7,$157,0,$28);
  }
  $158 = $26;
  $159 = $9;
  $160 = (__Z12WordToStringj($159)|0);
  HEAP32[$vararg_buffer>>2] = $160;
  $161 = (_sprintf($158,22744,$vararg_buffer)|0);
  $162 = $26;
  $163 = (($162) + ($161)|0);
  $26 = $163;
  $164 = HEAP32[$21>>2]|0;
  $165 = ($164|0)==(95);
  if ($165) {
   $166 = HEAP32[$24>>2]|0;
   $19 = $166;
   HEAP32[$21>>2] = 0;
  }
  $23 = 0;
  $25 = 122378;
  $167 = $12;
  $168 = ((($167)) + 11|0);
  $169 = HEAP8[$168>>0]|0;
  $170 = $169&255;
  switch ($170|0) {
  case 2:  {
   $171 = $12;
   $172 = ((($171)) + 14|0);
   $173 = HEAP8[$172>>0]|0;
   $174 = $173&255;
   $10 = $174;
   $175 = $15;
   $176 = HEAP16[$175>>1]|0;
   $177 = $176&65535;
   $178 = $177 & 8;
   $179 = ($178|0)!=(0);
   if ($179) {
    $180 = HEAP32[(45056)>>2]|0;
    $181 = ((($180)) + 14|0);
    $182 = HEAP8[$181>>0]|0;
    $183 = $182&255;
    $184 = $10;
    $185 = (($184) + ($183))|0;
    $10 = $185;
   }
   $186 = $13;
   $187 = ((($186)) + 11|0);
   $188 = HEAP8[$187>>0]|0;
   $189 = $188&255;
   $190 = ($189|0)==(0);
   if ($190) {
    $191 = $10;
    $192 = (($191) + 50)|0;
    $10 = $192;
   }
   $193 = $10;
   $194 = $15;
   $195 = ((($194)) + 12|0);
   $196 = HEAP32[$195>>2]|0;
   $197 = Math_imul($193, $196)|0;
   $198 = (($197>>>0) / 256)&-1;
   $10 = $198;
   $199 = HEAP32[$21>>2]|0;
   $200 = ($199|0)==(0);
   $201 = $15;
   $202 = ((($201)) + 16|0);
   $203 = HEAP8[$202>>0]|0;
   $204 = $203&255;
   $205 = $15;
   $206 = ((($205)) + 22|0);
   $207 = HEAP8[$206>>0]|0;
   $208 = $207&255;
   $209 = $15;
   $210 = ((($209)) + 23|0);
   $211 = HEAP8[$210>>0]|0;
   $212 = $211&255;
   if ($200) {
    $213 = (__ZL10WritePitchiiiii($204,$208,$212,0,0)|0);
    $29 = $213;
    $214 = $26;
    $215 = $10;
    $216 = $29;
    HEAP32[$vararg_buffer2>>2] = $215;
    $vararg_ptr5 = ((($vararg_buffer2)) + 4|0);
    HEAP32[$vararg_ptr5>>2] = $216;
    $217 = (_sprintf($214,22748,$vararg_buffer2)|0);
    $218 = $26;
    $219 = (($218) + ($217)|0);
    $26 = $219;
   } else {
    $220 = HEAP32[$24>>2]|0;
    $221 = (__ZL10WritePitchiiiii($204,$208,$212,$220,0)|0);
    $30 = $221;
    $222 = $10;
    $223 = HEAP32[$24>>2]|0;
    $224 = Math_imul($222, $223)|0;
    $225 = (($224|0) / 100)&-1;
    $11 = $225;
    $226 = $26;
    $227 = $11;
    $228 = $30;
    HEAP32[$vararg_buffer6>>2] = $227;
    $vararg_ptr9 = ((($vararg_buffer6)) + 4|0);
    HEAP32[$vararg_ptr9>>2] = $228;
    $229 = (_sprintf($226,22748,$vararg_buffer6)|0);
    $230 = $26;
    $231 = (($230) + ($229)|0);
    $26 = $231;
    $232 = $15;
    $233 = ((($232)) + 16|0);
    $234 = HEAP8[$233>>0]|0;
    $235 = $234&255;
    $236 = $15;
    $237 = ((($236)) + 22|0);
    $238 = HEAP8[$237>>0]|0;
    $239 = $238&255;
    $240 = $15;
    $241 = ((($240)) + 23|0);
    $242 = HEAP8[$241>>0]|0;
    $243 = $242&255;
    $244 = HEAP32[$24>>2]|0;
    $245 = (0 - ($244))|0;
    $246 = (__ZL10WritePitchiiiii($235,$239,$243,$245,0)|0);
    $30 = $246;
    $247 = $26;
    $248 = HEAP32[$21>>2]|0;
    $249 = (__Z12WordToStringj($248)|0);
    $250 = $10;
    $251 = $11;
    $252 = (($250) - ($251))|0;
    $253 = $30;
    HEAP32[$vararg_buffer10>>2] = $249;
    $vararg_ptr13 = ((($vararg_buffer10)) + 4|0);
    HEAP32[$vararg_ptr13>>2] = $252;
    $vararg_ptr14 = ((($vararg_buffer10)) + 8|0);
    HEAP32[$vararg_ptr14>>2] = $253;
    $254 = (_sprintf($247,22754,$vararg_buffer10)|0);
    $255 = $26;
    $256 = (($255) + ($254)|0);
    $26 = $256;
   }
   $23 = 1;
   break;
  }
  case 4:  {
   $20 = 0;
   $257 = $16;
   $258 = ((($257)) + 17|0);
   $259 = HEAP8[$258>>0]|0;
   $260 = $259&255;
   $261 = ($260|0)==(2);
   $$1 = $261 ? 1 : 0;
   $20 = $$1;
   $262 = $16;
   $263 = ((($262)) + 17|0);
   $264 = HEAP8[$263>>0]|0;
   $265 = $264&255;
   $266 = ($265|0)==(3);
   if ($266) {
    $267 = $16;
    $268 = ((($267)) + 21|0);
    $269 = HEAP8[$268>>0]|0;
    $270 = ($269<<24>>24)!=(0);
    if (!($270)) {
     $20 = 1;
    }
   }
   $271 = $20;
   $272 = ($271|0)==(0);
   if ($272) {
    $273 = $15;
    $274 = HEAP16[$273>>1]|0;
    $275 = $274&65535;
    $276 = $275 | 8192;
    $277 = $276&65535;
    HEAP16[$273>>1] = $277;
   }
   $278 = $15;
   __Z16InterpretPhonemeP10TranslatoriP12PHONEME_LISTP12PHONEME_DATAP12WORD_PH_DATA(0,0,$278,$17,0);
   $279 = (__Z9DoSample3P12PHONEME_DATAii($17,0,-1)|0);
   $10 = $279;
   $280 = $10;
   $281 = ($280*1000)|0;
   $282 = HEAP32[20211]|0;
   $283 = (($281|0) / ($282|0))&-1;
   $10 = $283;
   $284 = $15;
   $285 = ((($284)) + 18|0);
   $286 = HEAP8[$285>>0]|0;
   $287 = $286&255;
   $288 = (__Z11PauseLengthii($287,1)|0);
   $289 = $10;
   $290 = (($289) + ($288))|0;
   $10 = $290;
   break;
  }
  case 5:  {
   $291 = HEAP32[(75128)>>2]|0;
   $292 = ($291*80)|0;
   $293 = (($292|0) / 256)&-1;
   $10 = $293;
   break;
  }
  case 6:  {
   $10 = 0;
   $294 = $15;
   __Z16InterpretPhonemeP10TranslatoriP12PHONEME_LISTP12PHONEME_DATAP12WORD_PH_DATA(0,0,$294,$17,0);
   $295 = $15;
   $296 = HEAP16[$295>>1]|0;
   $297 = $296&65535;
   $298 = $297 & 8;
   $299 = ($298|0)!=(0);
   if ($299) {
    $300 = $15;
    $301 = ((($300)) + 12|0);
    $302 = HEAP32[$301>>2]|0;
    $303 = (__Z9DoSample3P12PHONEME_DATAii($17,$302,-1)|0);
    $10 = $303;
   }
   $304 = $15;
   $305 = ((($304)) + 12|0);
   $306 = HEAP32[$305>>2]|0;
   $307 = (__Z9DoSample3P12PHONEME_DATAii($17,$306,-1)|0);
   $308 = $10;
   $309 = (($308) + ($307))|0;
   $10 = $309;
   $310 = $10;
   $311 = ($310*1000)|0;
   $312 = HEAP32[20211]|0;
   $313 = (($311|0) / ($312|0))&-1;
   $10 = $313;
   break;
  }
  case 8:  {
   $314 = $16;
   $315 = ((($314)) + 17|0);
   $316 = HEAP8[$315>>0]|0;
   $317 = $316&255;
   $318 = ($317|0)!=(2);
   if ($318) {
    dest=$18; stop=dest+48|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
    $319 = $15;
    __Z16InterpretPhonemeP10TranslatoriP12PHONEME_LISTP12PHONEME_DATAP12WORD_PH_DATA(0,0,$319,$17,0);
    $320 = ((($17)) + 68|0);
    $321 = HEAP32[$320>>2]|0;
    $322 = ((($18)) + 8|0);
    HEAP32[$322>>2] = $321;
    $323 = $15;
    $324 = ((($323)) + 8|0);
    $325 = HEAP32[$324>>2]|0;
    $326 = $15;
    $327 = (__Z8DoSpect2P11PHONEME_TABiP10FMT_PARAMSP12PHONEME_LISTi($325,0,$18,$326,-1)|0);
    $10 = $327;
    $328 = $10;
    $329 = ($328*1000)|0;
    $330 = HEAP32[20211]|0;
    $331 = (($329|0) / ($330|0))&-1;
    $10 = $331;
    $332 = $16;
    $333 = ((($332)) + 17|0);
    $334 = HEAP8[$333>>0]|0;
    $335 = $334&255;
    $336 = ($335|0)==(0);
    if ($336) {
     $337 = $10;
     $338 = (($337) + 50)|0;
     $10 = $338;
    }
    $339 = $15;
    $340 = ((($339)) + 16|0);
    $341 = HEAP8[$340>>0]|0;
    $342 = $341&255;
    $343 = $15;
    $344 = ((($343)) + 22|0);
    $345 = HEAP8[$344>>0]|0;
    $346 = $345&255;
    $347 = $15;
    $348 = ((($347)) + 23|0);
    $349 = HEAP8[$348>>0]|0;
    $350 = $349&255;
    $351 = (__ZL10WritePitchiiiii($342,$346,$350,0,1)|0);
    $25 = $351;
   }
   break;
  }
  case 3:  {
   $352 = $16;
   $353 = ((($352)) + 17|0);
   $354 = HEAP8[$353>>0]|0;
   $355 = $354&255;
   $356 = ($355|0)==(0);
   if ($356) {
    $357 = $10;
    $358 = (($357) + 50)|0;
    $10 = $358;
    $359 = $15;
    $360 = ((($359)) + 16|0);
    $361 = HEAP8[$360>>0]|0;
    $362 = $361&255;
    $363 = $15;
    $364 = ((($363)) + 22|0);
    $365 = HEAP8[$364>>0]|0;
    $366 = $365&255;
    $367 = $15;
    $368 = ((($367)) + 23|0);
    $369 = HEAP8[$368>>0]|0;
    $370 = $369&255;
    $371 = (__ZL10WritePitchiiiii($362,$366,$370,0,1)|0);
    $25 = $371;
   }
   break;
  }
  default: {
  }
  }
  $372 = $23;
  $373 = ($372|0)!=(0);
  if (!($373)) {
   $374 = HEAP32[$21>>2]|0;
   $375 = ($374|0)!=(0);
   if ($375) {
    $376 = $10;
    $377 = HEAP32[$24>>2]|0;
    $378 = Math_imul($376, $377)|0;
    $379 = (($378|0) / 100)&-1;
    $11 = $379;
    $380 = $26;
    $381 = $11;
    $382 = HEAP32[$21>>2]|0;
    $383 = (__Z12WordToStringj($382)|0);
    HEAP32[$vararg_buffer15>>2] = $381;
    $vararg_ptr18 = ((($vararg_buffer15)) + 4|0);
    HEAP32[$vararg_ptr18>>2] = $383;
    $384 = (_sprintf($380,22763,$vararg_buffer15)|0);
    $385 = $26;
    $386 = (($385) + ($384)|0);
    $26 = $386;
    $387 = $11;
    $388 = $10;
    $389 = (($388) - ($387))|0;
    $10 = $389;
   }
   $390 = $26;
   $391 = $10;
   $392 = $25;
   HEAP32[$vararg_buffer19>>2] = $391;
   $vararg_ptr22 = ((($vararg_buffer19)) + 4|0);
   HEAP32[$vararg_ptr22>>2] = $392;
   $393 = (_sprintf($390,22770,$vararg_buffer19)|0);
   $394 = $26;
   $395 = (($394) + ($393)|0);
   $26 = $395;
  }
  $396 = $19;
  $397 = ($396|0)!=(0);
  if ($397) {
   $398 = $19;
   $399 = (__Z11PauseLengthii($398,0)|0);
   $400 = $10;
   $401 = (($400) + ($399))|0;
   $10 = $401;
   $402 = $26;
   $403 = $19;
   $404 = (__Z11PauseLengthii($403,0)|0);
   HEAP32[$vararg_buffer23>>2] = $404;
   $405 = (_sprintf($402,22776,$vararg_buffer23)|0);
   $406 = $26;
   $407 = (($406) + ($405)|0);
   $26 = $407;
   $19 = 0;
  }
  $408 = $8;
  $409 = ($408|0)!=(0|0);
  if ($409) {
   $410 = $26;
   $411 = $410;
   $412 = $27;
   $413 = (($411) - ($412))|0;
   $414 = $8;
   (_fwrite($27,1,$413,$414)|0);
  } else {
   $415 = (_write_MBR($27)|0);
   $31 = $415;
   $416 = $31;
   $417 = ($416|0)<(0);
   if ($417) {
    label = 58;
    break;
   }
   $418 = $31;
   $419 = ($418|0)==(0);
   if ($419) {
    label = 60;
    break;
   }
   $420 = HEAP32[20917]|0;
   $421 = (80944 + ($420<<4)|0);
   HEAP32[$421>>2] = 13;
   $422 = $10;
   $423 = HEAP32[20917]|0;
   $424 = (80944 + ($423<<4)|0);
   $425 = ((($424)) + 4|0);
   HEAP32[$425>>2] = $422;
   __Z8WcmdqIncv();
  }
  $426 = HEAP32[11243]|0;
  $427 = (($426) + 1)|0;
  HEAP32[11243] = $427;
 }
 if ((label|0) == 5) {
  $4 = 1;
  $435 = $4;
  STACKTOP = sp;return ($435|0);
 }
 else if ((label|0) == 58) {
  $4 = 0;
  $435 = $4;
  STACKTOP = sp;return ($435|0);
 }
 else if ((label|0) == 60) {
  $4 = 1;
  $435 = $4;
  STACKTOP = sp;return ($435|0);
 }
 else if ((label|0) == 63) {
  $428 = $8;
  $429 = ($428|0)!=(0|0);
  if (!($429)) {
   (_flush_MBR()|0);
   $430 = HEAP32[20917]|0;
   $431 = (80944 + ($430<<4)|0);
   HEAP32[$431>>2] = 13;
   $432 = HEAP32[20917]|0;
   $433 = (80944 + ($432<<4)|0);
   $434 = ((($433)) + 4|0);
   HEAP32[$434>>2] = 500;
   __Z8WcmdqIncv();
  }
  $4 = 0;
  $435 = $4;
  STACKTOP = sp;return ($435|0);
 }
 return (0)|0;
}
function __ZL10GetMbrNameP12PHONEME_LISTP11PHONEME_TABS2_S2_PiS3_S3_($0,$1,$2,$3,$4,$5,$6) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0;
 var $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0;
 var $56 = 0, $57 = 0, $58 = 0, $59 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0;
 var $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0;
 var $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $8 = $0;
 $9 = $1;
 $10 = $2;
 $11 = $3;
 $12 = $4;
 $13 = $5;
 $14 = $6;
 $17 = 0;
 $18 = $12;
 HEAP32[$18>>2] = 0;
 $19 = $13;
 HEAP32[$19>>2] = 0;
 $20 = $14;
 HEAP32[$20>>2] = 0;
 $21 = $9;
 $22 = HEAP32[$21>>2]|0;
 HEAP32[11246] = $22;
 $23 = HEAP32[11241]|0;
 $15 = $23;
 while(1) {
  $24 = $15;
  $25 = HEAP32[$24>>2]|0;
  $26 = ($25|0)!=(0);
  if (!($26)) {
   break;
  }
  $27 = HEAP32[11246]|0;
  $28 = $15;
  $29 = HEAP32[$28>>2]|0;
  $30 = ($27|0)==($29|0);
  if ($30) {
   $31 = $15;
   $32 = ((($31)) + 4|0);
   $33 = HEAP32[$32>>2]|0;
   $34 = ($33|0)==(0);
   L6: do {
    if ($34) {
     $17 = 1;
    } else {
     $35 = $15;
     $36 = ((($35)) + 4|0);
     $37 = HEAP32[$36>>2]|0;
     $38 = ($37|0)==(58);
     if ($38) {
      $39 = $8;
      $40 = HEAP16[$39>>1]|0;
      $41 = $40&65535;
      $42 = $41 & 8;
      $43 = ($42|0)!=(0);
      if ($43) {
       $17 = 1;
       break;
      }
     }
     $44 = $15;
     $45 = ((($44)) + 20|0);
     $46 = HEAP32[$45>>2]|0;
     $47 = $46 & 2;
     $48 = ($47|0)!=(0);
     do {
      if ($48) {
       $49 = $10;
       $16 = $49;
      } else {
       $50 = $15;
       $51 = ((($50)) + 20|0);
       $52 = HEAP32[$51>>2]|0;
       $53 = $52 & 8;
       $54 = ($53|0)!=(0);
       if ($54) {
        $55 = $8;
        $56 = ((($55)) + 24|0);
        $57 = ((($56)) + 21|0);
        $58 = HEAP8[$57>>0]|0;
        $59 = ($58<<24>>24)!=(0);
        if ($59) {
         $60 = HEAP32[11252]|0;
         $16 = $60;
         break;
        }
       }
       $61 = $11;
       $16 = $61;
      }
     } while(0);
     $62 = $15;
     $63 = ((($62)) + 4|0);
     $64 = HEAP32[$63>>2]|0;
     $65 = $16;
     $66 = HEAP32[$65>>2]|0;
     $67 = ($64|0)==($66|0);
     do {
      if (!($67)) {
       $68 = $15;
       $69 = ((($68)) + 4|0);
       $70 = HEAP32[$69>>2]|0;
       $71 = ($70|0)==(2);
       if ($71) {
        $72 = $16;
        $73 = ((($72)) + 11|0);
        $74 = HEAP8[$73>>0]|0;
        $75 = $74&255;
        $76 = ($75|0)==(2);
        if ($76) {
         break;
        }
       }
       $77 = $15;
       $78 = ((($77)) + 4|0);
       $79 = HEAP32[$78>>2]|0;
       $80 = ($79|0)==(95);
       if (!($80)) {
        break L6;
       }
       $81 = $16;
       $82 = ((($81)) + 11|0);
       $83 = HEAP8[$82>>0]|0;
       $84 = $83&255;
       $85 = ($84|0)==(0);
       if (!($85)) {
        break L6;
       }
      }
     } while(0);
     $17 = 1;
    }
   } while(0);
   $86 = $15;
   $87 = ((($86)) + 20|0);
   $88 = HEAP32[$87>>2]|0;
   $89 = $88 & 4;
   $90 = ($89|0)!=(0);
   if ($90) {
    $91 = $8;
    $92 = ((($91)) + 21|0);
    $93 = HEAP8[$92>>0]|0;
    $94 = $93&255;
    $95 = ($94|0)==(0);
    if ($95) {
     $17 = 0;
    }
   }
   $96 = $15;
   $97 = ((($96)) + 20|0);
   $98 = HEAP32[$97>>2]|0;
   $99 = $98 & 64;
   $100 = ($99|0)!=(0);
   if ($100) {
    $101 = $8;
    $102 = ((($101)) + 24|0);
    $103 = ((($102)) + 21|0);
    $104 = HEAP8[$103>>0]|0;
    $105 = $104&255;
    $106 = ($105|0)==(0);
    if ($106) {
     $17 = 0;
    }
   }
   $107 = $15;
   $108 = ((($107)) + 20|0);
   $109 = HEAP32[$108>>2]|0;
   $110 = $109 & 32;
   $111 = ($110|0)!=(0);
   if ($111) {
    $112 = $8;
    $113 = ((($112)) + 3|0);
    $114 = HEAP8[$113>>0]|0;
    $115 = $114&255;
    $116 = $8;
    $117 = ((($116)) + 6|0);
    $118 = HEAP8[$117>>0]|0;
    $119 = $118&255;
    $120 = ($115|0)<($119|0);
    if ($120) {
     $17 = 0;
    }
   }
   $121 = $17;
   $122 = ($121|0)!=(0);
   if ($122) {
    label = 31;
    break;
   }
  }
  $143 = $15;
  $144 = ((($143)) + 24|0);
  $15 = $144;
 }
 do {
  if ((label|0) == 31) {
   $123 = $15;
   $124 = ((($123)) + 12|0);
   $125 = HEAP32[$124>>2]|0;
   $126 = $12;
   HEAP32[$126>>2] = $125;
   $127 = $15;
   $128 = ((($127)) + 16|0);
   $129 = HEAP32[$128>>2]|0;
   $130 = $13;
   HEAP32[$130>>2] = $129;
   $131 = $15;
   $132 = ((($131)) + 20|0);
   $133 = HEAP32[$132>>2]|0;
   $134 = $14;
   HEAP32[$134>>2] = $133;
   $135 = $15;
   $136 = ((($135)) + 20|0);
   $137 = HEAP32[$136>>2]|0;
   $138 = $137 & 16;
   $139 = ($138|0)!=(0);
   $140 = $15;
   $141 = ((($140)) + 8|0);
   $142 = HEAP32[$141>>2]|0;
   if (!($139)) {
    HEAP32[11246] = $142;
    break;
   }
   HEAP32[11240] = $142;
   $7 = 0;
   $153 = $7;
   STACKTOP = sp;return ($153|0);
  }
 } while(0);
 $145 = HEAP32[11240]|0;
 $146 = ($145|0)!=(0);
 if ($146) {
  $147 = HEAP32[11246]|0;
  $148 = $147 << 8;
  $149 = HEAP32[11240]|0;
  $150 = $149 & 255;
  $151 = $148 | $150;
  HEAP32[11246] = $151;
 }
 HEAP32[11240] = 0;
 $152 = HEAP32[11246]|0;
 $7 = $152;
 $153 = $7;
 STACKTOP = sp;return ($153|0);
}
function __ZL10WritePitchiiiii($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0;
 var $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0;
 var $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0;
 var $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0;
 var $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond = 0, $or$cond3 = 0, $vararg_buffer = 0, $vararg_buffer12 = 0, $vararg_buffer16 = 0, $vararg_buffer4 = 0, $vararg_buffer8 = 0, $vararg_ptr11 = 0;
 var $vararg_ptr15 = 0, $vararg_ptr7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 192|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(192|0);
 $vararg_buffer16 = sp + 32|0;
 $vararg_buffer12 = sp + 24|0;
 $vararg_buffer8 = sp + 16|0;
 $vararg_buffer4 = sp + 8|0;
 $vararg_buffer = sp;
 $12 = sp + 100|0;
 $13 = sp + 96|0;
 $24 = sp + 40|0;
 $26 = sp + 132|0;
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $9 = $4;
 $18 = -1;
 $19 = 999;
 $20 = 0;
 $21 = 0;
 $22 = 80;
 HEAP8[120167] = 0;
 $27 = $5;
 $28 = (844 + ($27<<2)|0);
 $29 = HEAP32[$28>>2]|0;
 $17 = $29;
 $30 = HEAP32[1124]|0;
 $31 = $6;
 $32 = $7;
 __Z9SetPitch2P7voice_tiiPiS1_($30,$31,$32,$12,$13);
 $33 = $8;
 $34 = $33<<7;
 $35 = (($34|0) / 100)&-1;
 $25 = $35;
 $36 = $25;
 $37 = ($36|0)<(0);
 if ($37) {
  $38 = $25;
  $39 = (0 - ($38))|0;
  $25 = $39;
 }
 $10 = 0;
 while(1) {
  $40 = $10;
  $41 = ($40|0)<(128);
  if (!($41)) {
   break;
  }
  $42 = $10;
  $43 = $17;
  $44 = (($43) + ($42)|0);
  $45 = HEAP8[$44>>0]|0;
  $46 = $45&255;
  $47 = $18;
  $48 = ($46|0)>($47|0);
  if ($48) {
   $49 = $10;
   $50 = $17;
   $51 = (($50) + ($49)|0);
   $52 = HEAP8[$51>>0]|0;
   $53 = $52&255;
   $18 = $53;
   $54 = $10;
   $20 = $54;
  }
  $55 = $10;
  $56 = $17;
  $57 = (($56) + ($55)|0);
  $58 = HEAP8[$57>>0]|0;
  $59 = $58&255;
  $60 = $19;
  $61 = ($59|0)<($60|0);
  if ($61) {
   $62 = $10;
   $63 = $17;
   $64 = (($63) + ($62)|0);
   $65 = HEAP8[$64>>0]|0;
   $66 = $65&255;
   $19 = $66;
   $67 = $10;
   $21 = $67;
  }
  $68 = $10;
  $69 = (($68) + 1)|0;
  $10 = $69;
 }
 $70 = ((($24)) + 8|0);
 HEAP32[$70>>2] = 64;
 $71 = $20;
 $72 = ($71|0)>(0);
 $73 = $20;
 $74 = ($73|0)<(127);
 $or$cond = $72 & $74;
 if ($or$cond) {
  $75 = $20;
  $76 = ((($24)) + 8|0);
  HEAP32[$76>>2] = $75;
 }
 $77 = $21;
 $78 = ($77|0)>(0);
 $79 = $21;
 $80 = ($79|0)<(127);
 $or$cond3 = $78 & $80;
 if ($or$cond3) {
  $81 = $21;
  $82 = ((($24)) + 8|0);
  HEAP32[$82>>2] = $81;
 }
 $83 = ((($24)) + 8|0);
 $84 = HEAP32[$83>>2]|0;
 $85 = (($84|0) / 2)&-1;
 $86 = ((($24)) + 4|0);
 HEAP32[$86>>2] = $85;
 $87 = ((($24)) + 8|0);
 $88 = HEAP32[$87>>2]|0;
 $89 = ((($24)) + 8|0);
 $90 = HEAP32[$89>>2]|0;
 $91 = (127 - ($90))|0;
 $92 = (($91|0) / 2)&-1;
 $93 = (($88) + ($92))|0;
 $94 = ((($24)) + 12|0);
 HEAP32[$94>>2] = $93;
 $95 = $17;
 $96 = HEAP8[$95>>0]|0;
 $97 = $96&255;
 $98 = HEAP32[$13>>2]|0;
 $99 = Math_imul($97, $98)|0;
 $100 = $99 >> 8;
 $101 = HEAP32[$12>>2]|0;
 $102 = (($100) + ($101))|0;
 $14 = $102;
 $103 = $17;
 $104 = ((($103)) + 127|0);
 $105 = HEAP8[$104>>0]|0;
 $106 = $105&255;
 $107 = HEAP32[$13>>2]|0;
 $108 = Math_imul($106, $107)|0;
 $109 = $108 >> 8;
 $110 = HEAP32[$12>>2]|0;
 $111 = (($109) + ($110))|0;
 $16 = $111;
 $112 = $8;
 $113 = ($112|0)>=(0);
 if ($113) {
  $114 = $14;
  $115 = (($114|0) / 4096)&-1;
  HEAP32[$vararg_buffer>>2] = $115;
  (_sprintf($26,22783,$vararg_buffer)|0);
  (_strcat(120167,$26)|0);
 }
 $116 = $5;
 $117 = ($116|0)>(1);
 L23: do {
  if ($117) {
   $11 = 1;
   while(1) {
    $118 = $11;
    $119 = ($118|0)<(4);
    if (!($119)) {
     break L23;
    }
    $120 = $11;
    $121 = (($24) + ($120<<2)|0);
    $122 = HEAP32[$121>>2]|0;
    $123 = $17;
    $124 = (($123) + ($122)|0);
    $125 = HEAP8[$124>>0]|0;
    $126 = $125&255;
    $127 = HEAP32[$13>>2]|0;
    $128 = Math_imul($126, $127)|0;
    $129 = $128 >> 8;
    $130 = HEAP32[$12>>2]|0;
    $131 = (($129) + ($130))|0;
    $15 = $131;
    $132 = $8;
    $133 = ($132|0)>(0);
    do {
     if ($133) {
      $134 = $11;
      $135 = (($24) + ($134<<2)|0);
      $136 = HEAP32[$135>>2]|0;
      $137 = $22;
      $138 = Math_imul($136, $137)|0;
      $139 = $25;
      $140 = (($138|0) / ($139|0))&-1;
      $23 = $140;
     } else {
      $141 = $8;
      $142 = ($141|0)<(0);
      $143 = $11;
      $144 = (($24) + ($143<<2)|0);
      $145 = HEAP32[$144>>2]|0;
      if ($142) {
       $146 = $25;
       $147 = (($145) - ($146))|0;
       $148 = $22;
       $149 = Math_imul($147, $148)|0;
       $150 = $25;
       $151 = (($149|0) / ($150|0))&-1;
       $23 = $151;
       break;
      } else {
       $152 = $22;
       $153 = Math_imul($145, $152)|0;
       $154 = (($153|0) / 128)&-1;
       $23 = $154;
       break;
      }
     }
    } while(0);
    $155 = $23;
    $156 = ($155|0)>(0);
    if ($156) {
     $157 = $23;
     $158 = $22;
     $159 = ($157|0)<=($158|0);
     if ($159) {
      $160 = $23;
      $161 = $15;
      $162 = (($161|0) / 4096)&-1;
      HEAP32[$vararg_buffer4>>2] = $160;
      $vararg_ptr7 = ((($vararg_buffer4)) + 4|0);
      HEAP32[$vararg_ptr7>>2] = $162;
      (_sprintf($26,22789,$vararg_buffer4)|0);
      (_strcat(120167,$26)|0);
     }
    }
    $163 = $11;
    $164 = (($163) + 1)|0;
    $11 = $164;
   }
  }
 } while(0);
 $165 = $16;
 $166 = (($165|0) / 4096)&-1;
 $16 = $166;
 $167 = $8;
 $168 = ($167|0)<=(0);
 if ($168) {
  $169 = $22;
  $170 = $16;
  HEAP32[$vararg_buffer8>>2] = $169;
  $vararg_ptr11 = ((($vararg_buffer8)) + 4|0);
  HEAP32[$vararg_ptr11>>2] = $170;
  (_sprintf($26,22789,$vararg_buffer8)|0);
  (_strcat(120167,$26)|0);
 }
 $171 = $22;
 $172 = ($171|0)<(100);
 if ($172) {
  $173 = $16;
  HEAP32[$vararg_buffer12>>2] = 100;
  $vararg_ptr15 = ((($vararg_buffer12)) + 4|0);
  HEAP32[$vararg_ptr15>>2] = $173;
  (_sprintf($26,22789,$vararg_buffer12)|0);
  (_strcat(120167,$26)|0);
 }
 (_strcat(120167,22796)|0);
 $174 = $9;
 $175 = ($174|0)!=(0);
 if (!($175)) {
  STACKTOP = sp;return (120167|0);
 }
 $176 = $16;
 HEAP32[$vararg_buffer16>>2] = $176;
 (_sprintf(120167,22798,$vararg_buffer16)|0);
 STACKTOP = sp;return (120167|0);
}
function __Z14MbrolaGenerateP12PHONEME_LISTPii($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = 0;
 $9 = $5;
 $10 = HEAP32[$9>>2]|0;
 $11 = ($10|0)==(0);
 if ($11) {
  $3 = 0;
  $26 = $3;
  STACKTOP = sp;return ($26|0);
 }
 $12 = HEAP32[19154]|0;
 $13 = $12 & 16;
 $14 = ($13|0)!=(0);
 if ($14) {
  $15 = HEAP32[19151]|0;
  $7 = $15;
 }
 $16 = $4;
 $17 = $5;
 $18 = HEAP32[$17>>2]|0;
 $19 = $6;
 $20 = $7;
 $21 = (__Z15MbrolaTranslateP12PHONEME_LISTiiP8_IO_FILE($16,$18,$19,$20)|0);
 $8 = $21;
 $22 = $8;
 $23 = ($22|0)!=(0);
 if (!($23)) {
  $24 = $5;
  HEAP32[$24>>2] = 0;
 }
 $25 = $8;
 $3 = $25;
 $26 = $3;
 STACKTOP = sp;return ($26|0);
}
function __Z10MbrolaFilliii($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$ = 0, $$$ = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $12 = $5;
 $13 = ($12|0)!=(0);
 if (!($13)) {
  $14 = HEAP32[20211]|0;
  $15 = $4;
  $16 = Math_imul($14, $15)|0;
  $17 = (($16|0) / 1000)&-1;
  HEAP32[11247] = $17;
 }
 $18 = HEAP32[20234]|0;
 $19 = HEAP32[20232]|0;
 $20 = $18;
 $21 = $19;
 $22 = (($20) - ($21))|0;
 $23 = (($22|0) / 2)&-1;
 $7 = $23;
 $24 = $7;
 $25 = HEAP32[11247]|0;
 $26 = ($24|0)>($25|0);
 if ($26) {
  $27 = HEAP32[11247]|0;
  $7 = $27;
 }
 $28 = HEAP32[20232]|0;
 $29 = $7;
 $30 = (_read_MBR($28,$29)|0);
 $8 = $30;
 $31 = $8;
 $32 = ($31|0)<=(0);
 if ($32) {
  $3 = 0;
  $74 = $3;
  STACKTOP = sp;return ($74|0);
 }
 $9 = 0;
 while(1) {
  $33 = $9;
  $34 = $8;
  $35 = ($33|0)<($34|0);
  if (!($35)) {
   break;
  }
  $36 = HEAP32[20232]|0;
  $37 = HEAP8[$36>>0]|0;
  $38 = $37&255;
  $39 = HEAP32[20232]|0;
  $40 = ((($39)) + 1|0);
  $41 = HEAP8[$40>>0]|0;
  $42 = $41&255;
  $43 = $42 << 8;
  $44 = (($38) + ($43))|0;
  $45 = $44&65535;
  $10 = $45;
  $46 = $10;
  $47 = $46 << 16 >> 16;
  $48 = $6;
  $49 = Math_imul($47, $48)|0;
  $11 = $49;
  $50 = $11;
  $51 = (($50|0) / 40)&-1;
  $11 = $51;
  $52 = $11;
  $53 = ($52|0)>(32767);
  $$ = $53 ? 32767 : $51;
  $11 = $$;
  $54 = $11;
  $55 = ($54|0)<(-32768);
  $$$ = $55 ? 32768 : $$;
  $11 = $$$;
  $56 = $11;
  $57 = $56&255;
  $58 = HEAP32[20232]|0;
  HEAP8[$58>>0] = $57;
  $59 = $11;
  $60 = $59 >> 8;
  $61 = $60&255;
  $62 = HEAP32[20232]|0;
  $63 = ((($62)) + 1|0);
  HEAP8[$63>>0] = $61;
  $64 = HEAP32[20232]|0;
  $65 = ((($64)) + 2|0);
  HEAP32[20232] = $65;
  $66 = $9;
  $67 = (($66) + 1)|0;
  $9 = $67;
 }
 $68 = $8;
 $69 = HEAP32[11247]|0;
 $70 = (($69) - ($68))|0;
 HEAP32[11247] = $70;
 $71 = HEAP32[11247]|0;
 $72 = ($71|0)!=(0);
 $73 = $72 ? 1 : 0;
 $3 = $73;
 $74 = $3;
 STACKTOP = sp;return ($74|0);
}
function __Z11MbrolaResetv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 (_reset_MBR()|0);
 return;
}
function __Z10LoadPhDataPi($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0;
 var $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0;
 var $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0;
 var $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0;
 var $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0;
 var $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $7 = sp + 12|0;
 $2 = $0;
 $6 = 1;
 $11 = HEAP32[12720]|0;
 $12 = (__ZL10ReadPhFilePvPKcPi($11,22807,0)|0);
 HEAP32[12720] = $12;
 $13 = ($12|0)==(0|0);
 if ($13) {
  $1 = -1;
  $112 = $1;
  STACKTOP = sp;return ($112|0);
 }
 $14 = HEAP32[11508]|0;
 $15 = (__ZL10ReadPhFilePvPKcPi($14,22815,0)|0);
 HEAP32[11508] = $15;
 $16 = ($15|0)==(0|0);
 if ($16) {
  $1 = -1;
  $112 = $1;
  STACKTOP = sp;return ($112|0);
 }
 $17 = HEAP32[11509]|0;
 $18 = (__ZL10ReadPhFilePvPKcPi($17,22825,0)|0);
 HEAP32[11509] = $18;
 $19 = ($18|0)==(0|0);
 if ($19) {
  $1 = -1;
  $112 = $1;
  STACKTOP = sp;return ($112|0);
 }
 $20 = HEAP32[10468]|0;
 $21 = (__ZL10ReadPhFilePvPKcPi($20,22834,$7)|0);
 HEAP32[10468] = $21;
 $22 = ($21|0)==(0|0);
 if ($22) {
  $1 = -1;
  $112 = $1;
  STACKTOP = sp;return ($112|0);
 }
 $23 = HEAP32[11509]|0;
 HEAP32[11510] = $23;
 $24 = HEAP32[$7>>2]|0;
 $25 = (($24>>>0) / 68)&-1;
 HEAP32[10467] = $25;
 $5 = 0;
 $8 = 0;
 $3 = 0;
 while(1) {
  $26 = $3;
  $27 = ($26|0)<(4);
  if (!($27)) {
   break;
  }
  $28 = $3;
  $29 = HEAP32[11510]|0;
  $30 = (($29) + ($28)|0);
  $31 = HEAP8[$30>>0]|0;
  $32 = $31&255;
  $33 = $3;
  $34 = $33<<3;
  $35 = $32 << $34;
  $36 = $5;
  $37 = (($36) + ($35))|0;
  $5 = $37;
  $38 = $3;
  $39 = (($38) + 4)|0;
  $40 = HEAP32[11510]|0;
  $41 = (($40) + ($39)|0);
  $42 = HEAP8[$41>>0]|0;
  $43 = $42&255;
  $44 = $3;
  $45 = $44<<3;
  $46 = $43 << $45;
  $47 = $8;
  $48 = (($47) + ($46))|0;
  $8 = $48;
  $49 = $3;
  $50 = (($49) + 1)|0;
  $3 = $50;
 }
 $51 = $5;
 $52 = ($51|0)!=(83969);
 if ($52) {
  $53 = $5;
  $6 = $53;
 }
 $54 = HEAP32[12720]|0;
 $9 = $54;
 $55 = $9;
 $56 = HEAP8[$55>>0]|0;
 $57 = $56&255;
 HEAP32[11511] = $57;
 $58 = $9;
 $59 = ((($58)) + 4|0);
 $9 = $59;
 $3 = 0;
 while(1) {
  $60 = $3;
  $61 = HEAP32[11511]|0;
  $62 = ($60|0)<($61|0);
  if (!($62)) {
   break;
  }
  $63 = $9;
  $64 = HEAP8[$63>>0]|0;
  $65 = $64&255;
  $4 = $65;
  $66 = $9;
  $67 = HEAP8[$66>>0]|0;
  $68 = $67&255;
  $69 = $3;
  $70 = (46048 + (($69*48)|0)|0);
  $71 = ((($70)) + 36|0);
  HEAP32[$71>>2] = $68;
  $72 = $9;
  $73 = ((($72)) + 1|0);
  $74 = HEAP8[$73>>0]|0;
  $75 = $74&255;
  $76 = $3;
  $77 = (46048 + (($76*48)|0)|0);
  $78 = ((($77)) + 40|0);
  HEAP32[$78>>2] = $75;
  $79 = $9;
  $10 = $79;
  $80 = $10;
  $81 = ((($80)) + 4|0);
  $82 = HEAP32[$81>>2]|0;
  $83 = (__Z13Reverse4Bytesi($82)|0);
  $84 = $3;
  $85 = (46048 + (($84*48)|0)|0);
  $86 = ((($85)) + 44|0);
  HEAP32[$86>>2] = $83;
  $87 = $9;
  $88 = ((($87)) + 8|0);
  $9 = $88;
  $89 = $3;
  $90 = (46048 + (($89*48)|0)|0);
  $91 = $9;
  dest=$90; src=$91; stop=dest+32|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
  $92 = $9;
  $93 = ((($92)) + 32|0);
  $9 = $93;
  $94 = $9;
  $95 = $3;
  $96 = (46048 + (($95*48)|0)|0);
  $97 = ((($96)) + 32|0);
  HEAP32[$97>>2] = $94;
  $98 = $4;
  $99 = $98<<4;
  $100 = $9;
  $101 = (($100) + ($99)|0);
  $9 = $101;
  $102 = $3;
  $103 = (($102) + 1)|0;
  $3 = $103;
 }
 $104 = HEAP32[12712]|0;
 $105 = HEAP32[11511]|0;
 $106 = ($104|0)>=($105|0);
 if ($106) {
  HEAP32[12712] = 0;
 }
 $107 = $2;
 $108 = ($107|0)!=(0|0);
 if ($108) {
  $109 = $8;
  $110 = $2;
  HEAP32[$110>>2] = $109;
 }
 $111 = $6;
 $1 = $111;
 $112 = $1;
 STACKTOP = sp;return ($112|0);
}
function __ZL10ReadPhFilePvPKcPi($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer3 = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 256|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(256|0);
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer = sp;
 $10 = sp + 48|0;
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $11 = $5;
 HEAP32[$vararg_buffer>>2] = 119484;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = 47;
 $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
 HEAP32[$vararg_ptr2>>2] = $11;
 (_sprintf($10,26611,$vararg_buffer)|0);
 $12 = (__Z13GetFileLengthPKc($10)|0);
 $9 = $12;
 $13 = (_fopen($10,22846)|0);
 $7 = $13;
 $14 = ($13|0)==(0|0);
 if ($14) {
  $15 = HEAP32[1451]|0;
  HEAP32[$vararg_buffer3>>2] = $10;
  (_fprintf($15,22849,$vararg_buffer3)|0);
  $3 = 0;
  $35 = $3;
  STACKTOP = sp;return ($35|0);
 }
 $16 = $4;
 $17 = ($16|0)!=(0|0);
 if ($17) {
  $18 = $4;
  __Z4FreePv($18);
 }
 $19 = $9;
 $20 = (__Z5Alloci($19)|0);
 $8 = $20;
 $21 = ($20|0)==(0|0);
 if ($21) {
  $22 = $7;
  (_fclose($22)|0);
  $3 = 0;
  $35 = $3;
  STACKTOP = sp;return ($35|0);
 }
 $23 = $8;
 $24 = $9;
 $25 = $7;
 $26 = (_fread($23,1,$24,$25)|0);
 $27 = $9;
 $28 = ($26|0)!=($27|0);
 $29 = $7;
 (_fclose($29)|0);
 if ($28) {
  $3 = 0;
  $35 = $3;
  STACKTOP = sp;return ($35|0);
 }
 $30 = $6;
 $31 = ($30|0)!=(0|0);
 if ($31) {
  $32 = $9;
  $33 = $6;
  HEAP32[$33>>2] = $32;
 }
 $34 = $8;
 $3 = $34;
 $35 = $3;
 STACKTOP = sp;return ($35|0);
}
function __Z11PhonemeCodej($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = 0;
 while(1) {
  $4 = $3;
  $5 = HEAP32[11250]|0;
  $6 = ($4|0)<($5|0);
  if (!($6)) {
   label = 7;
   break;
  }
  $7 = $3;
  $8 = (45008 + ($7<<2)|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = ($9|0)==(0|0);
  if (!($10)) {
   $11 = $3;
   $12 = (45008 + ($11<<2)|0);
   $13 = HEAP32[$12>>2]|0;
   $14 = HEAP32[$13>>2]|0;
   $15 = $2;
   $16 = ($14|0)==($15|0);
   if ($16) {
    label = 5;
    break;
   }
  }
  $23 = $3;
  $24 = (($23) + 1)|0;
  $3 = $24;
 }
 if ((label|0) == 5) {
  $17 = $3;
  $18 = (45008 + ($17<<2)|0);
  $19 = HEAP32[$18>>2]|0;
  $20 = ((($19)) + 10|0);
  $21 = HEAP8[$20>>0]|0;
  $22 = $21&255;
  $1 = $22;
  $25 = $1;
  STACKTOP = sp;return ($25|0);
 }
 else if ((label|0) == 7) {
  $1 = 0;
  $25 = $1;
  STACKTOP = sp;return ($25|0);
 }
 return (0)|0;
}
function __Z19LookupPhonemeStringPKc($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $4 = 0;
 $2 = 0;
 while(1) {
  $5 = $2;
  $6 = ($5|0)<(4);
  if (!($6)) {
   label = 5;
   break;
  }
  $7 = $2;
  $8 = $1;
  $9 = (($8) + ($7)|0);
  $10 = HEAP8[$9>>0]|0;
  $11 = $10 << 24 >> 24;
  $12 = ($11|0)==(0);
  if ($12) {
   label = 5;
   break;
  }
  $13 = $2;
  $14 = $1;
  $15 = (($14) + ($13)|0);
  $16 = HEAP8[$15>>0]|0;
  $3 = $16;
  $17 = $3;
  $18 = $17&255;
  $19 = $2;
  $20 = $19<<3;
  $21 = $18 << $20;
  $22 = $4;
  $23 = $22 | $21;
  $4 = $23;
  $24 = $2;
  $25 = (($24) + 1)|0;
  $2 = $25;
 }
 if ((label|0) == 5) {
  $26 = $4;
  $27 = (__Z11PhonemeCodej($26)|0);
  STACKTOP = sp;return ($27|0);
 }
 return (0)|0;
}
function __Z11LookupSpectP11PHONEME_TABiP10FMT_PARAMSPiP12PHONEME_LIST($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$ = 0, $$1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0;
 var $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0;
 var $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0;
 var $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0;
 var $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0;
 var $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0;
 var $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(80|0);
 $11 = sp + 44|0;
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $9 = $4;
 $23 = $7;
 $24 = ((($23)) + 8|0);
 $25 = HEAP32[$24>>2]|0;
 $26 = HEAP32[11509]|0;
 $27 = (($26) + ($25)|0);
 $18 = $27;
 $28 = $18;
 $20 = $28;
 $29 = $18;
 $30 = ((($29)) + 2|0);
 $31 = HEAP8[$30>>0]|0;
 $32 = $31&255;
 HEAP32[$11>>2] = $32;
 $33 = HEAP32[$11>>2]|0;
 $34 = ($33|0)>=(25);
 $$ = $34 ? 24 : $32;
 HEAP32[$11>>2] = $$;
 $35 = $7;
 $36 = ((($35)) + 24|0);
 $37 = HEAP32[$36>>2]|0;
 $38 = $7;
 $39 = ((($38)) + 12|0);
 $40 = HEAP32[$39>>2]|0;
 $41 = (($37) + ($40))|0;
 HEAP32[12715] = $41;
 $13 = 0;
 $10 = 0;
 while(1) {
  $42 = $10;
  $43 = HEAP32[$11>>2]|0;
  $44 = ($42|0)<($43|0);
  if (!($44)) {
   break;
  }
  $45 = $18;
  $46 = ((($45)) + 4|0);
  $47 = HEAP16[$46>>1]|0;
  $48 = $47 << 16 >> 16;
  $49 = $48 & 1;
  $50 = ($49|0)!=(0);
  $51 = $10;
  if ($50) {
   $52 = $20;
   $53 = ((($52)) + 4|0);
   $54 = (($53) + ($51<<6)|0);
   $22 = $54;
  } else {
   $55 = $18;
   $56 = ((($55)) + 4|0);
   $57 = (($56) + (($51*44)|0)|0);
   $22 = $57;
  }
  $58 = $22;
  $59 = $10;
  $60 = (50884 + ($59<<3)|0);
  $61 = ((($60)) + 4|0);
  HEAP32[$61>>2] = $58;
  $62 = $22;
  $63 = HEAP16[$62>>1]|0;
  $64 = $10;
  $65 = (50884 + ($64<<3)|0);
  $66 = ((($65)) + 2|0);
  HEAP16[$66>>1] = $63;
  $67 = $22;
  $68 = ((($67)) + 16|0);
  $69 = HEAP8[$68>>0]|0;
  $70 = $69&255;
  $71 = $10;
  $72 = (50884 + ($71<<3)|0);
  HEAP16[$72>>1] = $70;
  $73 = $22;
  $74 = HEAP16[$73>>1]|0;
  $75 = $74 << 16 >> 16;
  $76 = $75 & 2;
  $77 = ($76|0)!=(0);
  if ($77) {
   $78 = $10;
   $13 = $78;
  }
  $79 = $10;
  $80 = (($79) + 1)|0;
  $10 = $80;
 }
 $14 = 50884;
 $81 = $13;
 $82 = ($81|0)>(0);
 do {
  if ($82) {
   $83 = $6;
   $84 = ($83|0)==(1);
   $85 = $13;
   if ($84) {
    $86 = (($85) + 1)|0;
    HEAP32[$11>>2] = $86;
    break;
   } else {
    $87 = (50884 + ($85<<3)|0);
    $14 = $87;
    $88 = $13;
    $89 = HEAP32[$11>>2]|0;
    $90 = (($89) - ($88))|0;
    HEAP32[$11>>2] = $90;
    break;
   }
  }
 } while(0);
 $91 = $5;
 $92 = ((($91)) + 11|0);
 $93 = HEAP8[$92>>0]|0;
 $94 = $93&255;
 $95 = ($94|0)==(2);
 if ($95) {
  $96 = $7;
  $97 = ((($96)) + 20|0);
  $98 = HEAP32[$97>>2]|0;
  $99 = ($98|0)==(0);
  if ($99) {
   $100 = $7;
   $101 = ((($100)) + 4|0);
   $102 = HEAP32[$101>>2]|0;
   $103 = ($102|0)!=(0);
   if ($103) {
    $104 = $14;
    $105 = $7;
    $106 = ((($105)) + 36|0);
    $107 = HEAP32[$106>>2]|0;
    $108 = $7;
    $109 = ((($108)) + 40|0);
    $110 = HEAP32[$109>>2]|0;
    $111 = $6;
    $112 = (__Z18FormantTransition2P10frameref_tPijjP11PHONEME_TABi($104,$11,$107,$110,0,$111)|0);
    $113 = HEAP32[12715]|0;
    $114 = (($113) + ($112))|0;
    HEAP32[12715] = $114;
   }
  }
 }
 $15 = 0;
 $115 = HEAP32[$11>>2]|0;
 $116 = (($115) - 1)|0;
 $12 = $116;
 $10 = 0;
 while(1) {
  $117 = $10;
  $118 = $12;
  $119 = ($117|0)<($118|0);
  if (!($119)) {
   break;
  }
  $120 = $10;
  $121 = $14;
  $122 = (($121) + ($120<<3)|0);
  $123 = HEAP16[$122>>1]|0;
  $124 = $123 << 16 >> 16;
  $125 = $15;
  $126 = (($125) + ($124))|0;
  $15 = $126;
  $127 = $10;
  $128 = (($127) + 1)|0;
  $10 = $128;
 }
 $129 = $7;
 $130 = ((($129)) + 20|0);
 $131 = HEAP32[$130>>2]|0;
 $132 = ($131|0)!=(0);
 if ($132) {
  $133 = $7;
  $134 = ((($133)) + 20|0);
  $135 = HEAP32[$134>>2]|0;
  $136 = HEAP32[11509]|0;
  $137 = (($136) + ($135)|0);
  $19 = $137;
  $138 = $19;
  $21 = $138;
  $139 = HEAP32[$11>>2]|0;
  $140 = (($139) + -1)|0;
  HEAP32[$11>>2] = $140;
  $10 = 0;
  while(1) {
   $141 = $10;
   $142 = $19;
   $143 = ((($142)) + 2|0);
   $144 = HEAP8[$143>>0]|0;
   $145 = $144&255;
   $146 = ($141|0)<($145|0);
   if (!($146)) {
    break;
   }
   $147 = $19;
   $148 = ((($147)) + 4|0);
   $149 = HEAP16[$148>>1]|0;
   $150 = $149 << 16 >> 16;
   $151 = $150 & 1;
   $152 = ($151|0)!=(0);
   $153 = $10;
   if ($152) {
    $154 = $21;
    $155 = ((($154)) + 4|0);
    $156 = (($155) + ($153<<6)|0);
    $22 = $156;
   } else {
    $157 = $19;
    $158 = ((($157)) + 4|0);
    $159 = (($158) + (($153*44)|0)|0);
    $22 = $159;
   }
   $160 = $22;
   $161 = ((($160)) + 16|0);
   $162 = HEAP8[$161>>0]|0;
   $163 = $162&255;
   $164 = HEAP32[$11>>2]|0;
   $165 = $14;
   $166 = (($165) + ($164<<3)|0);
   HEAP16[$166>>1] = $163;
   $167 = $10;
   $168 = ($167|0)>(0);
   if ($168) {
    $169 = $22;
    $170 = HEAP32[$11>>2]|0;
    $171 = $14;
    $172 = (($171) + ($170<<3)|0);
    $173 = ((($172)) + 4|0);
    HEAP32[$173>>2] = $169;
    $174 = $22;
    $175 = HEAP16[$174>>1]|0;
    $176 = HEAP32[$11>>2]|0;
    $177 = $14;
    $178 = (($177) + ($176<<3)|0);
    $179 = ((($178)) + 2|0);
    HEAP16[$179>>1] = $175;
   }
   $180 = HEAP32[$11>>2]|0;
   $181 = (($180) + 1)|0;
   HEAP32[$11>>2] = $181;
   $182 = $10;
   $183 = (($182) + 1)|0;
   $10 = $183;
  }
  HEAP32[12713] = 0;
 }
 $184 = $15;
 $185 = ($184|0)>(0);
 if (!($185)) {
  $283 = HEAP32[$11>>2]|0;
  $284 = $8;
  HEAP32[$284>>2] = $283;
  $285 = $14;
  STACKTOP = sp;return ($285|0);
 }
 $186 = $6;
 $187 = ($186|0)==(2);
 if ($187) {
  $188 = $7;
  $189 = ((($188)) + 44|0);
  $190 = HEAP32[$189>>2]|0;
  $191 = HEAP32[12715]|0;
  $192 = (($190) + ($191))|0;
  $193 = (($192) - 45)|0;
  $16 = $193;
  $194 = $16;
  $195 = ($194|0)<(10);
  $$1 = $195 ? 10 : $193;
  $16 = $$1;
  $196 = $9;
  $197 = HEAP16[$196>>1]|0;
  $198 = $197&65535;
  $199 = $198 & 8;
  $200 = ($199|0)!=(0);
  if ($200) {
   $201 = HEAP32[(45056)>>2]|0;
   $202 = ((($201)) + 14|0);
   $203 = HEAP8[$202>>0]|0;
   $204 = $203&255;
   $205 = $204<<1;
   $206 = $16;
   $207 = (($206) + ($205))|0;
   $16 = $207;
  }
  $208 = $16;
  $209 = $208<<8;
  $210 = $15;
  $211 = (($209|0) / ($210|0))&-1;
  $17 = $211;
  $10 = 0;
  while(1) {
   $212 = $10;
   $213 = $12;
   $214 = ($212|0)<($213|0);
   if (!($214)) {
    break;
   }
   $215 = $10;
   $216 = $14;
   $217 = (($216) + ($215<<3)|0);
   $218 = HEAP16[$217>>1]|0;
   $219 = $218 << 16 >> 16;
   $220 = $17;
   $221 = Math_imul($219, $220)|0;
   $222 = (($221|0) / 256)&-1;
   $223 = $222&65535;
   $224 = $10;
   $225 = $14;
   $226 = (($225) + ($224<<3)|0);
   HEAP16[$226>>1] = $223;
   $227 = $10;
   $228 = (($227) + 1)|0;
   $10 = $228;
  }
  $283 = HEAP32[$11>>2]|0;
  $284 = $8;
  HEAP32[$284>>2] = $283;
  $285 = $14;
  STACKTOP = sp;return ($285|0);
 }
 $229 = $6;
 $230 = ($229|0)==(1);
 $231 = $7;
 if ($230) {
  $232 = HEAP32[$231>>2]|0;
  $233 = ($232|0)==(1);
  if ($233) {
   $234 = $7;
   $235 = ((($234)) + 44|0);
   $236 = HEAP32[$235>>2]|0;
   $237 = ($236|0)<(130);
   if ($237) {
    $238 = $14;
    $239 = HEAP16[$238>>1]|0;
    $240 = $239 << 16 >> 16;
    $241 = $7;
    $242 = ((($241)) + 44|0);
    $243 = HEAP32[$242>>2]|0;
    $244 = Math_imul($240, $243)|0;
    $245 = (($244|0) / 130)&-1;
    $246 = $245&65535;
    $247 = $14;
    HEAP16[$247>>1] = $246;
   }
  }
 } else {
  $248 = ((($231)) + 44|0);
  $249 = HEAP32[$248>>2]|0;
  $250 = ($249|0)>(0);
  if ($250) {
   $251 = $7;
   $252 = ((($251)) + 44|0);
   $253 = HEAP32[$252>>2]|0;
   $254 = $15;
   $255 = (($253) - ($254))|0;
   $256 = HEAP32[12715]|0;
   $257 = (($256) + ($255))|0;
   HEAP32[12715] = $257;
  }
 }
 $258 = HEAP32[12715]|0;
 $259 = ($258|0)!=(0);
 if (!($259)) {
  $283 = HEAP32[$11>>2]|0;
  $284 = $8;
  HEAP32[$284>>2] = $283;
  $285 = $14;
  STACKTOP = sp;return ($285|0);
 }
 $260 = $15;
 $261 = HEAP32[12715]|0;
 $262 = (($260) + ($261))|0;
 $263 = $262<<8;
 $264 = $15;
 $265 = (($263|0) / ($264|0))&-1;
 $17 = $265;
 $10 = 0;
 while(1) {
  $266 = $10;
  $267 = $12;
  $268 = ($266|0)<($267|0);
  if (!($268)) {
   break;
  }
  $269 = $10;
  $270 = $14;
  $271 = (($270) + ($269<<3)|0);
  $272 = HEAP16[$271>>1]|0;
  $273 = $272 << 16 >> 16;
  $274 = $17;
  $275 = Math_imul($273, $274)|0;
  $276 = (($275|0) / 256)&-1;
  $277 = $276&65535;
  $278 = $10;
  $279 = $14;
  $280 = (($279) + ($278<<3)|0);
  HEAP16[$280>>1] = $277;
  $281 = $10;
  $282 = (($281) + 1)|0;
  $10 = $282;
 }
 $283 = HEAP32[$11>>2]|0;
 $284 = $8;
 HEAP32[$284>>2] = $283;
 $285 = $14;
 STACKTOP = sp;return ($285|0);
}
function __Z11GetEnvelopei($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 $2 = $0;
 $3 = $2;
 $4 = ($3|0)==(0);
 if ($4) {
  $5 = HEAP32[1451]|0;
  (_fprintf($5,22877,$vararg_buffer)|0);
  $6 = HEAP32[211]|0;
  $1 = $6;
  $10 = $1;
  STACKTOP = sp;return ($10|0);
 } else {
  $7 = $2;
  $8 = HEAP32[11509]|0;
  $9 = (($8) + ($7)|0);
  $1 = $9;
  $10 = $1;
  STACKTOP = sp;return ($10|0);
 }
 return (0)|0;
}
function __Z18SelectPhonemeTablei($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 HEAP32[11250] = 0;
 $2 = $1;
 __ZL17SetUpPhonemeTableii($2,0);
 $3 = HEAP32[11250]|0;
 $4 = (($3) + 1)|0;
 HEAP32[11250] = $4;
 $5 = $1;
 HEAP32[11251] = $5;
 STACKTOP = sp;return;
}
function __ZL17SetUpPhonemeTableii($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $2 = $0;
 $3 = $1;
 $8 = $3;
 $9 = ($8|0)==(0);
 if ($9) {
  _memset((120217|0),0,256)|0;
 }
 $10 = $2;
 $11 = (46048 + (($10*48)|0)|0);
 $12 = ((($11)) + 40|0);
 $13 = HEAP32[$12>>2]|0;
 $5 = $13;
 $14 = ($13|0)>(0);
 if ($14) {
  $15 = $5;
  $16 = (($15) - 1)|0;
  __ZL17SetUpPhonemeTableii($16,1);
 }
 $17 = $2;
 $18 = (46048 + (($17*48)|0)|0);
 $19 = ((($18)) + 32|0);
 $20 = HEAP32[$19>>2]|0;
 $7 = $20;
 $4 = 0;
 while(1) {
  $21 = $4;
  $22 = $2;
  $23 = (46048 + (($22*48)|0)|0);
  $24 = ((($23)) + 36|0);
  $25 = HEAP32[$24>>2]|0;
  $26 = ($21|0)<($25|0);
  if (!($26)) {
   break;
  }
  $27 = $4;
  $28 = $7;
  $29 = (($28) + ($27<<4)|0);
  $30 = ((($29)) + 10|0);
  $31 = HEAP8[$30>>0]|0;
  $32 = $31&255;
  $6 = $32;
  $33 = $4;
  $34 = $7;
  $35 = (($34) + ($33<<4)|0);
  $36 = $6;
  $37 = (45008 + ($36<<2)|0);
  HEAP32[$37>>2] = $35;
  $38 = $6;
  $39 = HEAP32[11250]|0;
  $40 = ($38|0)>($39|0);
  if ($40) {
   $41 = $6;
   HEAP32[11250] = $41;
  }
  $42 = $3;
  $43 = ($42|0)==(0);
  if ($43) {
   $44 = $6;
   $45 = (120217 + ($44)|0);
   $46 = HEAP8[$45>>0]|0;
   $47 = $46&255;
   $48 = $47 | 1;
   $49 = $48&255;
   HEAP8[$45>>0] = $49;
  }
  $50 = $4;
  $51 = (($50) + 1)|0;
  $4 = $51;
 }
 STACKTOP = sp;return;
}
function __Z18LookupPhonemeTablePKc($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = 0;
 while(1) {
  $4 = $3;
  $5 = HEAP32[11511]|0;
  $6 = ($4|0)<($5|0);
  if (!($6)) {
   break;
  }
  $7 = $2;
  $8 = $3;
  $9 = (46048 + (($8*48)|0)|0);
  $10 = (_strcmp($7,$9)|0);
  $11 = ($10|0)==(0);
  $12 = $3;
  if ($11) {
   label = 4;
   break;
  }
  $13 = (($12) + 1)|0;
  $3 = $13;
 }
 if ((label|0) == 4) {
  HEAP32[12712] = $12;
 }
 $14 = $3;
 $15 = HEAP32[11511]|0;
 $16 = ($14|0)==($15|0);
 if ($16) {
  $1 = -1;
  $18 = $1;
  STACKTOP = sp;return ($18|0);
 } else {
  $17 = $3;
  $1 = $17;
  $18 = $1;
  STACKTOP = sp;return ($18|0);
 }
 return (0)|0;
}
function __Z22SelectPhonemeTableNamePKc($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $4 = $2;
 $5 = (__Z18LookupPhonemeTablePKc($4)|0);
 $3 = $5;
 $6 = ($5|0)==(-1);
 if ($6) {
  $1 = -1;
  $9 = $1;
  STACKTOP = sp;return ($9|0);
 } else {
  $7 = $3;
  __Z18SelectPhonemeTablei($7);
  $8 = $3;
  $1 = $8;
  $9 = $1;
  STACKTOP = sp;return ($9|0);
 }
 return (0)|0;
}
function __Z10LoadConfigv() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0;
 var $vararg_buffer10 = 0, $vararg_buffer3 = 0, $vararg_buffer7 = 0, $vararg_ptr1 = 0, $vararg_ptr13 = 0, $vararg_ptr2 = 0, $vararg_ptr6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 432|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(432|0);
 $vararg_buffer10 = sp + 32|0;
 $vararg_buffer7 = sp + 24|0;
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer = sp;
 $0 = sp + 258|0;
 $3 = sp + 256|0;
 $5 = sp + 56|0;
 HEAP32[11249] = 0;
 $2 = 0;
 while(1) {
  $6 = $2;
  $7 = ($6|0)<(4);
  if (!($7)) {
   break;
  }
  $8 = $2;
  $9 = (75180 + ($8<<4)|0);
  $10 = ((($9)) + 12|0);
  HEAP32[$10>>2] = 0;
  $11 = $2;
  $12 = (75180 + ($11<<4)|0);
  $13 = ((($12)) + 8|0);
  HEAP32[$13>>2] = 0;
  $14 = $2;
  $15 = (($14) + 1)|0;
  $2 = $15;
 }
 HEAP32[$vararg_buffer>>2] = 119484;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = 47;
 $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
 HEAP32[$vararg_ptr2>>2] = 22898;
 (_sprintf($0,26611,$vararg_buffer)|0);
 $16 = (_fopen($0,25527)|0);
 $1 = $16;
 $17 = ($16|0)==(0|0);
 if ($17) {
  STACKTOP = sp;return;
 }
 while(1) {
  $18 = $1;
  $19 = (_fgets($0,170,$18)|0);
  $20 = ($19|0)!=(0|0);
  if (!($20)) {
   break;
  }
  $21 = HEAP8[$0>>0]|0;
  $22 = $21 << 24 >> 24;
  $23 = ($22|0)==(47);
  if ($23) {
   continue;
  }
  $24 = (_memcmp($0,22905,3)|0);
  $25 = ($24|0)==(0);
  if ($25) {
   $26 = ((($0)) + 4|0);
   HEAP32[$vararg_buffer3>>2] = 44996;
   $vararg_ptr6 = ((($vararg_buffer3)) + 4|0);
   HEAP32[$vararg_ptr6>>2] = $5;
   $27 = (_sscanf($26,22909,$vararg_buffer3)|0);
   $28 = ($27|0)==(2);
   if (!($28)) {
    continue;
   }
   $29 = (_fopen($5,22915)|0);
   HEAP32[11248] = $29;
   continue;
  }
  $30 = (_memcmp($0,26127,4)|0);
  $31 = ($30|0)==(0);
  if ($31) {
   $32 = ((($0)) + 5|0);
   __Z14ReadTonePointsPcPi($32,4436);
   continue;
  }
  $33 = (_memcmp($0,22917,9)|0);
  $34 = ($33|0)==(0);
  if ($34) {
   $35 = ((($0)) + 10|0);
   HEAP32[$vararg_buffer7>>2] = 2916;
   (_sscanf($35,25637,$vararg_buffer7)|0);
   continue;
  }
  $36 = (_memcmp($0,22927,9)|0);
  $37 = ($36|0)==(0);
  if (!($37)) {
   continue;
  }
  $38 = ((($0)) + 10|0);
  HEAP32[$vararg_buffer10>>2] = $3;
  $vararg_ptr13 = ((($vararg_buffer10)) + 4|0);
  HEAP32[$vararg_ptr13>>2] = $5;
  $39 = (_sscanf($38,22937,$vararg_buffer10)|0);
  $2 = $39;
  $40 = $2;
  $41 = ($40|0)==(2);
  if (!($41)) {
   continue;
  }
  $42 = HEAP8[$3>>0]|0;
  $43 = $42 << 24 >> 24;
  $44 = HEAP32[734]|0;
  $45 = (75180 + ($44<<4)|0);
  HEAP32[$45>>2] = $43;
  $46 = (_strlen($5)|0);
  $47 = (($46) + 1)|0;
  $48 = (__Z5Alloci($47)|0);
  $4 = $48;
  $49 = $4;
  (_strcpy($49,$5)|0);
  $50 = $4;
  $51 = HEAP32[734]|0;
  $52 = (75180 + ($51<<4)|0);
  $53 = ((($52)) + 12|0);
  HEAP32[$53>>2] = $50;
  $54 = HEAP32[734]|0;
  $55 = (($54) + 1)|0;
  HEAP32[734] = $55;
  $56 = (75180 + ($54<<4)|0);
  $57 = ((($56)) + 4|0);
  HEAP32[$57>>2] = 0;
 }
 $58 = $1;
 (_fclose($58)|0);
 STACKTOP = sp;return;
}
function __Z13NumInstnWordsPt($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $2 = $0;
 $8 = $2;
 $9 = HEAP16[$8>>1]|0;
 $10 = $9&65535;
 $3 = $10;
 $11 = $3;
 $12 = $11 >> 12;
 $5 = $12;
 $13 = $5;
 $14 = (22944 + ($13)|0);
 $15 = HEAP8[$14>>0]|0;
 $16 = $15 << 24 >> 24;
 $6 = $16;
 $17 = ($16|0)>(0);
 L1: do {
  if ($17) {
   $18 = $6;
   $1 = $18;
  } else {
   $19 = $5;
   switch ($19|0) {
   case 0:  {
    $20 = $3;
    $21 = $20 & 3840;
    $22 = $21 >> 8;
    $23 = ($22|0)==(13);
    if ($23) {
     $24 = $3;
     $25 = $24 & 255;
     $26 = (($25) + 1)|0;
     $27 = (($26|0) / 2)&-1;
     $6 = $27;
     $28 = $6;
     $29 = (($28) + 1)|0;
     $1 = $29;
     break L1;
    } else {
     $1 = 1;
     break L1;
    }
    break;
   }
   case 6:  {
    $30 = $3;
    $31 = $30 & 3840;
    $32 = $31 >> 9;
    $7 = $32;
    $33 = $7;
    $34 = ($33|0)==(5);
    $35 = $7;
    $36 = ($35|0)==(6);
    $or$cond = $34 | $36;
    if ($or$cond) {
     $1 = 12;
     break L1;
    } else {
     $1 = 1;
     break L1;
    }
    break;
   }
   case 3: case 2:  {
    $37 = $3;
    $38 = $37 & 3840;
    $6 = $38;
    $39 = ($38|0)==(1536);
    $40 = $6;
    $41 = ($40|0)==(3328);
    $or$cond3 = $39 | $41;
    if ($or$cond3) {
     $1 = 2;
     break L1;
    } else {
     $1 = 1;
     break L1;
    }
    break;
   }
   default: {
    $42 = $2;
    $43 = ((($42)) + 4|0);
    $44 = HEAP16[$43>>1]|0;
    $45 = $44&65535;
    $4 = $45;
    $46 = $4;
    $47 = $46 >> 12;
    $48 = ($47|0)==(15);
    if ($48) {
     $1 = 4;
     break L1;
    }
    $49 = $4;
    $50 = ($49|0)==(2);
    if ($50) {
     $1 = 3;
     break L1;
    } else {
     $1 = 2;
     break L1;
    }
   }
   }
  }
 } while(0);
 $51 = $1;
 STACKTOP = sp;return ($51|0);
}
function __Z16InterpretPhonemeP10TranslatoriP12PHONEME_LISTP12PHONEME_DATAP12WORD_PH_DATA($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$ = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0;
 var $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0;
 var $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0;
 var $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0;
 var $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0;
 var $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0;
 var $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0;
 var $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0;
 var $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0;
 var $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0;
 var $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0;
 var $299 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0;
 var $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0;
 var $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0;
 var $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0;
 var $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0;
 var $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0;
 var $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond = 0, $or$cond3 = 0, $or$cond5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(112|0);
 $11 = sp + 64|0;
 $22 = sp;
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $9 = $4;
 $21 = 0;
 $23 = $7;
 $24 = ((($23)) + 8|0);
 $25 = HEAP32[$24>>2]|0;
 $10 = $25;
 $26 = $9;
 $27 = ($26|0)!=(0|0);
 if ($27) {
  $28 = $7;
  $29 = ((($28)) + 4|0);
  $30 = HEAP16[$29>>1]|0;
  $31 = ($30<<16>>16)!=(0);
  if ($31) {
   $32 = $9;
   $33 = ((($32)) + 8|0);
   HEAP32[$33>>2] = 0;
  }
 }
 $34 = $8;
 _memset(($34|0),0,152)|0;
 $35 = $10;
 $36 = ((($35)) + 14|0);
 $37 = HEAP8[$36>>0]|0;
 $38 = $37&255;
 $39 = $8;
 $40 = ((($39)) + 4|0);
 $41 = ((($40)) + 40|0);
 HEAP32[$41>>2] = $38;
 $42 = $10;
 $43 = ((($42)) + 15|0);
 $44 = HEAP8[$43>>0]|0;
 $45 = $44&255;
 $46 = $8;
 $47 = ((($46)) + 4|0);
 $48 = ((($47)) + 36|0);
 HEAP32[$48>>2] = $45;
 $49 = $10;
 $50 = ((($49)) + 8|0);
 $51 = HEAP16[$50>>1]|0;
 $52 = $51&65535;
 $53 = ($52|0)==(0);
 if ($53) {
  STACKTOP = sp;return;
 }
 $18 = 0;
 $54 = $10;
 $55 = ((($54)) + 8|0);
 $56 = HEAP16[$55>>1]|0;
 $57 = $56&65535;
 $58 = HEAP32[11508]|0;
 $59 = (($58) + ($57<<1)|0);
 HEAP32[$11>>2] = $59;
 while(1) {
  $60 = $18;
  $61 = ($60|0)!=(1);
  if (!($61)) {
   break;
  }
  $62 = HEAP32[$11>>2]|0;
  $63 = HEAP16[$62>>1]|0;
  $12 = $63;
  $64 = $12;
  $65 = $64&65535;
  $66 = $65 >> 8;
  $67 = $66 & 15;
  $13 = $67;
  $14 = 0;
  $68 = $12;
  $69 = $68&65535;
  $70 = $69 >> 12;
  L11: do {
   switch ($70|0) {
   case 0:  {
    $71 = $12;
    $72 = $71&65535;
    $73 = $72 & 255;
    $17 = $73;
    $74 = $13;
    $75 = ($74|0)==(0);
    if ($75) {
     $76 = $17;
     switch ($76|0) {
     case 2:  {
      break L11;
      break;
     }
     case 1:  {
      $18 = 1;
      break L11;
      break;
     }
     default: {
      $77 = $10;
      $78 = $12;
      $79 = $78&65535;
      __ZL12InvalidInstnP11PHONEME_TABi($77,$79);
      break L11;
     }
     }
    }
    $80 = $13;
    $81 = ($80|0)==(5);
    if ($81) {
     $82 = $7;
     $83 = ((($82)) + 24|0);
     $84 = ((($83)) + 2|0);
     $85 = HEAP8[$84>>0]|0;
     $86 = $85&255;
     $87 = (45008 + ($86<<2)|0);
     $88 = HEAP32[$87>>2]|0;
     $89 = ((($88)) + 11|0);
     $90 = HEAP8[$89>>0]|0;
     $91 = $90&255;
     $92 = ($91|0)==(2);
     if (!($92)) {
      break L11;
     }
     $93 = $17;
     $94 = $8;
     $95 = ((($94)) + 4|0);
     $96 = ((($95)) + 16|0);
     HEAP32[$96>>2] = $93;
     break L11;
    }
    $97 = $13;
    $98 = ($97|0)==(12);
    if ($98) {
     $99 = $17;
     $100 = $99 & 128;
     $101 = ($100|0)!=(0);
     if ($101) {
      $102 = $17;
      $103 = (256 - ($102))|0;
      $104 = (0 - ($103))|0;
      $17 = $104;
     }
     $105 = $17;
     $106 = $8;
     $107 = ((($106)) + 4|0);
     $108 = ((($107)) + 40|0);
     $109 = HEAP32[$108>>2]|0;
     $110 = (($109) + ($105))|0;
     HEAP32[$108>>2] = $110;
     break L11;
    }
    $111 = $13;
    $112 = ($111|0)==(13);
    if ($112) {
     $19 = 0;
     while(1) {
      $113 = $19;
      $114 = $17;
      $115 = ($113|0)<($114|0);
      $116 = $19;
      $117 = ($116|0)<(16);
      $118 = $115 ? $117 : 0;
      if (!($118)) {
       break;
      }
      $119 = HEAP32[$11>>2]|0;
      $120 = ((($119)) + 2|0);
      HEAP32[$11>>2] = $120;
      $121 = HEAP32[$11>>2]|0;
      $122 = HEAP16[$121>>1]|0;
      $123 = $122&65535;
      $124 = $123 >> 8;
      $125 = $124&255;
      $126 = $19;
      $127 = $8;
      $128 = ((($127)) + 132|0);
      $129 = (($128) + ($126)|0);
      HEAP8[$129>>0] = $125;
      $130 = HEAP32[$11>>2]|0;
      $131 = HEAP16[$130>>1]|0;
      $132 = $131&65535;
      $133 = $132 & 255;
      $134 = $133&255;
      $135 = $19;
      $136 = (($135) + 1)|0;
      $137 = $8;
      $138 = ((($137)) + 132|0);
      $139 = (($138) + ($136)|0);
      HEAP8[$139>>0] = $134;
      $140 = $19;
      $141 = (($140) + 2)|0;
      $19 = $141;
     }
     $142 = $19;
     $143 = $8;
     $144 = ((($143)) + 132|0);
     $145 = (($144) + ($142)|0);
     HEAP8[$145>>0] = 0;
     break L11;
    }
    $146 = $13;
    $147 = ($146|0)<(16);
    if (!($147)) {
     $164 = $10;
     $165 = $12;
     $166 = $165&65535;
     __ZL12InvalidInstnP11PHONEME_TABi($164,$166);
     break L11;
    }
    $148 = $13;
    $149 = ($148|0)==(12);
    if ($149) {
     $150 = $17;
     $151 = $8;
     $152 = ((($151)) + 4|0);
     $153 = ((($152)) + 4|0);
     HEAP32[$153>>2] = $150;
    }
    $154 = $17;
    $155 = $13;
    $156 = $8;
    $157 = ((($156)) + 4|0);
    $158 = (($157) + ($155<<2)|0);
    HEAP32[$158>>2] = $154;
    $159 = $13;
    $160 = ($159|0)==(1);
    if ($160) {
     $161 = $6;
     $162 = $161 & 256;
     $163 = ($162|0)!=(0);
     if ($163) {
      $18 = 1;
     }
    }
    break;
   }
   case 1:  {
    $167 = $5;
    $168 = ($167|0)!=(0|0);
    $169 = $13;
    $170 = ($169|0)<(8);
    $or$cond5 = $168 & $170;
    if ($or$cond5) {
     $171 = $5;
     $172 = $7;
     $173 = $13;
     $174 = $173 & 7;
     $175 = (__ZL15StressConditionP10TranslatorP12PHONEME_LISTii($171,$172,$174,1)|0);
     $176 = $175&1;
     $177 = ($176|0)==(1);
     if ($177) {
      $178 = $12;
      $179 = $178&65535;
      $180 = $179 & 255;
      $181 = $8;
      $182 = ((($181)) + 4|0);
      $183 = ((($182)) + 4|0);
      HEAP32[$183>>2] = $180;
      $18 = 1;
     }
    }
    break;
   }
   case 3: case 2:  {
    $14 = 0;
    $15 = 1;
    while(1) {
     $184 = $12;
     $185 = $184&65535;
     $186 = $185 & 57344;
     $187 = ($186|0)==(8192);
     if (!($187)) {
      break;
     }
     $188 = $5;
     $189 = $6;
     $190 = $7;
     $191 = HEAP32[$11>>2]|0;
     $192 = $9;
     $193 = (__ZL18InterpretConditionP10TranslatoriP12PHONEME_LISTPtP12WORD_PH_DATA($188,$189,$190,$191,$192)|0);
     $194 = $193&1;
     $16 = $194;
     $195 = HEAP32[$11>>2]|0;
     $196 = (__Z13NumInstnWordsPt($195)|0);
     $197 = HEAP32[$11>>2]|0;
     $198 = (($197) + ($196<<1)|0);
     HEAP32[$11>>2] = $198;
     $199 = HEAP32[$11>>2]|0;
     $200 = HEAP16[$199>>1]|0;
     $201 = $200&65535;
     $202 = ($201|0)==(3);
     if ($202) {
      $203 = $16;
      $204 = $203&1;
      $205 = $204&1;
      $206 = $205 ^ 1;
      $207 = ($206|0)!=(0);
      $208 = $207&1;
      $16 = $208;
      $209 = HEAP32[$11>>2]|0;
      $210 = ((($209)) + 2|0);
      HEAP32[$11>>2] = $210;
     }
     $211 = $14;
     $212 = ($211|0)!=(0);
     $213 = $15;
     $214 = $213&1;
     $215 = $16;
     $216 = $215&1;
     if ($212) {
      $217 = $214 ? 1 : $216;
      $218 = $217&1;
      $15 = $218;
     } else {
      $219 = $214 ? $216 : 0;
      $220 = $219&1;
      $15 = $220;
     }
     $221 = $12;
     $222 = $221&65535;
     $223 = $222 & 4096;
     $14 = $223;
     $224 = HEAP32[$11>>2]|0;
     $225 = HEAP16[$224>>1]|0;
     $12 = $225;
    }
    $226 = $15;
    $227 = $226&1;
    $228 = $227&1;
    $229 = ($228|0)==(0);
    do {
     if ($229) {
      $230 = $12;
      $231 = $230&65535;
      $232 = $231 & 63488;
      $233 = ($232|0)==(26624);
      if ($233) {
       $234 = $12;
       $235 = $234&65535;
       $236 = $235 & 255;
       $237 = HEAP32[$11>>2]|0;
       $238 = (($237) + ($236<<1)|0);
       HEAP32[$11>>2] = $238;
       break;
      }
      $239 = HEAP32[$11>>2]|0;
      $240 = (__Z13NumInstnWordsPt($239)|0);
      $241 = HEAP32[$11>>2]|0;
      $242 = (($241) + ($240<<1)|0);
      HEAP32[$11>>2] = $242;
      $243 = HEAP32[$11>>2]|0;
      $244 = HEAP16[$243>>1]|0;
      $245 = $244&65535;
      $246 = $245 & 65024;
      $247 = ($246|0)==(24576);
      if ($247) {
       $248 = HEAP32[$11>>2]|0;
       $249 = ((($248)) + 2|0);
       HEAP32[$11>>2] = $249;
      }
     }
    } while(0);
    $250 = HEAP32[$11>>2]|0;
    $251 = ((($250)) + -2|0);
    HEAP32[$11>>2] = $251;
    break;
   }
   case 6:  {
    $252 = $13;
    $253 = $252 >> 1;
    switch ($253|0) {
    case 0:  {
     $254 = $12;
     $255 = $254&65535;
     $256 = $255 & 255;
     $257 = (($256) - 1)|0;
     $258 = HEAP32[$11>>2]|0;
     $259 = (($258) + ($257<<1)|0);
     HEAP32[$11>>2] = $259;
     break L11;
     break;
    }
    case 6:  {
     $262 = $7;
     $263 = $8;
     __ZL17SwitchOnVowelTypeP12PHONEME_LISTP12PHONEME_DATAPPti($262,$263,$11,3);
     break L11;
     break;
    }
    case 5:  {
     $260 = $7;
     $261 = $8;
     __ZL17SwitchOnVowelTypeP12PHONEME_LISTP12PHONEME_DATAPPti($260,$261,$11,2);
     break L11;
     break;
    }
    default: {
     break L11;
    }
    }
    break;
   }
   case 9:  {
    $264 = $12;
    $265 = $264&65535;
    $266 = $265 & 15;
    $267 = $266 << 16;
    $268 = HEAP32[$11>>2]|0;
    $269 = ((($268)) + 2|0);
    $270 = HEAP16[$269>>1]|0;
    $271 = $270&65535;
    $272 = (($267) + ($271))|0;
    $17 = $272;
    $273 = HEAP32[$11>>2]|0;
    $274 = ((($273)) + 2|0);
    HEAP32[$11>>2] = $274;
    $275 = $13;
    switch ($275|0) {
    case 1:  {
     $276 = $21;
     $277 = ($276|0)<(10);
     if (!($277)) {
      break L11;
     }
     $278 = HEAP32[$11>>2]|0;
     $279 = $21;
     $280 = (($279) + 1)|0;
     $21 = $280;
     $281 = (($22) + ($279<<2)|0);
     HEAP32[$281>>2] = $278;
     $282 = $17;
     $283 = HEAP32[11508]|0;
     $284 = (($283) + ($282<<1)|0);
     $285 = ((($284)) + -2|0);
     HEAP32[$11>>2] = $285;
     break L11;
     break;
    }
    case 2:  {
     $286 = $17;
     $287 = $8;
     $288 = ((($287)) + 124|0);
     HEAP32[$288>>2] = $286;
     break L11;
     break;
    }
    case 3:  {
     $289 = $17;
     $290 = $8;
     $291 = ((($290)) + 128|0);
     HEAP32[$291>>2] = $289;
     break L11;
     break;
    }
    default: {
     break L11;
    }
    }
    break;
   }
   case 10:  {
    $292 = $13;
    $293 = ($292|0)==(1);
    if ($293) {
     $19 = 0;
    } else {
     $19 = 2;
    }
    $294 = HEAP32[$11>>2]|0;
    $295 = HEAP16[$294>>1]|0;
    $296 = $295&65535;
    $297 = $296 & 255;
    $298 = $297 << 16;
    $299 = HEAP32[$11>>2]|0;
    $300 = ((($299)) + 2|0);
    $301 = HEAP16[$300>>1]|0;
    $302 = $301&65535;
    $303 = (($298) + ($302))|0;
    $304 = $19;
    $305 = $8;
    $306 = ((($305)) + 108|0);
    $307 = (($306) + ($304<<2)|0);
    HEAP32[$307>>2] = $303;
    $308 = HEAP32[$11>>2]|0;
    $309 = ((($308)) + 4|0);
    $310 = HEAP16[$309>>1]|0;
    $311 = $310&65535;
    $312 = $311 << 16;
    $313 = HEAP32[$11>>2]|0;
    $314 = ((($313)) + 6|0);
    $315 = HEAP16[$314>>1]|0;
    $316 = $315&65535;
    $317 = (($312) + ($316))|0;
    $318 = $19;
    $319 = (($318) + 1)|0;
    $320 = $8;
    $321 = ((($320)) + 108|0);
    $322 = (($321) + ($319<<2)|0);
    HEAP32[$322>>2] = $317;
    $323 = HEAP32[$11>>2]|0;
    $324 = ((($323)) + 6|0);
    HEAP32[$11>>2] = $324;
    break;
   }
   case 15: case 14: case 13: case 12: case 11:  {
    $325 = $12;
    $326 = $325&65535;
    $327 = $326 >> 12;
    $328 = (($327) - 11)|0;
    $13 = $328;
    $329 = $12;
    $330 = $329&65535;
    $331 = $330 & 15;
    $332 = $331 << 18;
    $333 = HEAP32[$11>>2]|0;
    $334 = ((($333)) + 2|0);
    $335 = HEAP16[$334>>1]|0;
    $336 = $335&65535;
    $337 = $336 << 2;
    $338 = (($332) + ($337))|0;
    $339 = $13;
    $340 = $8;
    $341 = ((($340)) + 68|0);
    $342 = (($341) + ($339<<2)|0);
    HEAP32[$342>>2] = $338;
    $343 = $12;
    $344 = $343&65535;
    $345 = $344 >> 4;
    $346 = $345 & 255;
    $347 = $13;
    $348 = $8;
    $349 = ((($348)) + 88|0);
    $350 = (($349) + ($347<<2)|0);
    HEAP32[$350>>2] = $346;
    $351 = $346&255;
    $20 = $351;
    $352 = HEAP32[$11>>2]|0;
    $353 = ((($352)) + 2|0);
    HEAP32[$11>>2] = $353;
    $354 = HEAP32[$11>>2]|0;
    $355 = ((($354)) + 2|0);
    $356 = HEAP16[$355>>1]|0;
    $357 = $356&65535;
    $358 = ($357|0)!=(2);
    if ($358) {
     $359 = $13;
     $360 = ($359|0)<(2);
     if ($360) {
      $18 = 1;
      $361 = HEAP32[$11>>2]|0;
      $362 = ((($361)) + 2|0);
      $363 = HEAP16[$362>>1]|0;
      $364 = $363&65535;
      $365 = $364 >> 12;
      $366 = ($365|0)==(15);
      $$ = $366 ? 2 : 1;
      $18 = $$;
     } else {
      $367 = $13;
      $368 = ($367|0)==(4);
      if ($368) {
       $369 = $18;
       $370 = (($369) + -1)|0;
       $18 = $370;
      }
     }
     $371 = $13;
     $372 = ($371|0)==(2);
     $373 = $13;
     $374 = ($373|0)==(3);
     $or$cond = $372 | $374;
     if ($or$cond) {
      $375 = $20;
      $376 = $375 << 24 >> 24;
      $377 = $13;
      $378 = $8;
      $379 = ((($378)) + 88|0);
      $380 = (($379) + ($377<<2)|0);
      HEAP32[$380>>2] = $376;
     }
    }
    break;
   }
   default: {
    $381 = $10;
    $382 = $12;
    $383 = $382&65535;
    __ZL12InvalidInstnP11PHONEME_TABi($381,$383);
   }
   }
  } while(0);
  $384 = $10;
  $385 = ((($384)) + 4|0);
  $386 = HEAP32[$385>>2]|0;
  $387 = $386 & 4096;
  $388 = ($387|0)!=(0);
  if ($388) {
   $18 = 1;
  }
  $389 = $18;
  $390 = ($389|0)==(1);
  $391 = $21;
  $392 = ($391|0)>(0);
  $or$cond3 = $390 & $392;
  if ($or$cond3) {
   $18 = 0;
   $393 = $21;
   $394 = (($393) + -1)|0;
   $21 = $394;
   $395 = (($22) + ($394<<2)|0);
   $396 = HEAP32[$395>>2]|0;
   HEAP32[$11>>2] = $396;
  }
  $397 = HEAP32[$11>>2]|0;
  $398 = ((($397)) + 2|0);
  HEAP32[$11>>2] = $398;
 }
 $399 = $9;
 $400 = ($399|0)!=(0|0);
 if (!($400)) {
  STACKTOP = sp;return;
 }
 $401 = $7;
 $402 = ((($401)) + 17|0);
 $403 = HEAP8[$402>>0]|0;
 $404 = $403&255;
 $405 = ($404|0)==(2);
 if (!($405)) {
  STACKTOP = sp;return;
 }
 $406 = $9;
 $407 = $7;
 ;HEAP32[$406>>2]=HEAP32[$407>>2]|0;HEAP32[$406+4>>2]=HEAP32[$407+4>>2]|0;HEAP32[$406+8>>2]=HEAP32[$407+8>>2]|0;HEAP32[$406+12>>2]=HEAP32[$407+12>>2]|0;HEAP32[$406+16>>2]=HEAP32[$407+16>>2]|0;HEAP32[$406+20>>2]=HEAP32[$407+20>>2]|0;
 STACKTOP = sp;return;
}
function __ZL12InvalidInstnP11PHONEME_TABi($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 $2 = $0;
 $3 = $1;
 $4 = HEAP32[1451]|0;
 $5 = $3;
 $6 = $2;
 $7 = HEAP32[$6>>2]|0;
 $8 = (__Z12WordToStringj($7)|0);
 HEAP32[$vararg_buffer>>2] = $5;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $8;
 (_fprintf($4,22960,$vararg_buffer)|0);
 STACKTOP = sp;return;
}
function __ZL15StressConditionP10TranslatorP12PHONEME_LISTii($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$expand_i1_val = 0, $$expand_i1_val10 = 0, $$expand_i1_val2 = 0, $$expand_i1_val4 = 0, $$expand_i1_val6 = 0, $$expand_i1_val8 = 0, $$pre_trunc = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $4 = sp + 24|0;
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $11 = $6;
 $12 = ((($11)) + 2|0);
 $13 = HEAP8[$12>>0]|0;
 $14 = $13&255;
 $15 = (45008 + ($14<<2)|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = ((($16)) + 11|0);
 $18 = HEAP8[$17>>0]|0;
 $19 = $18&255;
 $20 = ($19|0)==(2);
 $21 = $6;
 do {
  if ($20) {
   $10 = $21;
   label = 6;
  } else {
   $22 = ((($21)) + 24|0);
   $23 = ((($22)) + 2|0);
   $24 = HEAP8[$23>>0]|0;
   $25 = $24&255;
   $26 = (45008 + ($25<<2)|0);
   $27 = HEAP32[$26>>2]|0;
   $28 = ((($27)) + 11|0);
   $29 = HEAP8[$28>>0]|0;
   $30 = $29&255;
   $31 = ($30|0)==(2);
   if ($31) {
    $32 = $6;
    $33 = ((($32)) + 24|0);
    $10 = $33;
    label = 6;
    break;
   } else {
    $$expand_i1_val = 0;
    HEAP8[$4>>0] = $$expand_i1_val;
    break;
   }
  }
 } while(0);
 do {
  if ((label|0) == 6) {
   $34 = $10;
   $35 = ((($34)) + 3|0);
   $36 = HEAP8[$35>>0]|0;
   $37 = $36&255;
   $38 = $37 & 15;
   $9 = $38;
   $39 = $5;
   $40 = ($39|0)!=(0|0);
   if ($40) {
    $41 = $8;
    $42 = $41 & 1;
    $43 = ($42|0)!=(0);
    if ($43) {
     $44 = $6;
     $45 = HEAP16[$44>>1]|0;
     $46 = $45&65535;
     $47 = $46 & 16;
     $48 = ($47|0)!=(0);
     if ($48) {
      $49 = $5;
      $50 = ((($49)) + 24|0);
      $51 = ((($50)) + 40|0);
      $52 = HEAP32[$51>>2]|0;
      $53 = $52 & 1;
      $54 = ($53|0)==(0);
      if ($54) {
       $$expand_i1_val2 = 0;
       HEAP8[$4>>0] = $$expand_i1_val2;
       break;
      }
     }
    }
    $55 = $5;
    $56 = ((($55)) + 24|0);
    $57 = ((($56)) + 40|0);
    $58 = HEAP32[$57>>2]|0;
    $59 = $58 & 2;
    $60 = ($59|0)!=(0);
    if ($60) {
     $61 = $9;
     $62 = $10;
     $63 = ((($62)) + 6|0);
     $64 = HEAP8[$63>>0]|0;
     $65 = $64&255;
     $66 = ($61|0)>=($65|0);
     if ($66) {
      $9 = 4;
     }
    }
   }
   $67 = $7;
   $68 = ($67|0)==(4);
   if ($68) {
    $69 = $9;
    $70 = $10;
    $71 = ((($70)) + 6|0);
    $72 = HEAP8[$71>>0]|0;
    $73 = $72&255;
    $74 = ($69|0)>=($73|0);
    $$expand_i1_val4 = $74&1;
    HEAP8[$4>>0] = $$expand_i1_val4;
    break;
   }
   $75 = $7;
   $76 = ($75|0)==(3);
   $77 = $9;
   if ($76) {
    $78 = ($77|0)>(3);
    if ($78) {
     $$expand_i1_val6 = 1;
     HEAP8[$4>>0] = $$expand_i1_val6;
     break;
    }
   } else {
    $79 = $7;
    $80 = (2920 + ($79<<2)|0);
    $81 = HEAP32[$80>>2]|0;
    $82 = ($77|0)<($81|0);
    if ($82) {
     $$expand_i1_val8 = 1;
     HEAP8[$4>>0] = $$expand_i1_val8;
     break;
    }
   }
   $$expand_i1_val10 = 0;
   HEAP8[$4>>0] = $$expand_i1_val10;
  }
 } while(0);
 $$pre_trunc = HEAP8[$4>>0]|0;
 $83 = $$pre_trunc&1;
 STACKTOP = sp;return ($83|0);
}
function __ZL18InterpretConditionP10TranslatoriP12PHONEME_LISTPtP12WORD_PH_DATA($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$expand_i1_val = 0, $$expand_i1_val11 = 0, $$expand_i1_val13 = 0, $$expand_i1_val15 = 0, $$expand_i1_val17 = 0, $$expand_i1_val19 = 0, $$expand_i1_val21 = 0, $$expand_i1_val23 = 0, $$expand_i1_val25 = 0, $$expand_i1_val27 = 0, $$expand_i1_val29 = 0, $$expand_i1_val3 = 0, $$expand_i1_val31 = 0, $$expand_i1_val33 = 0, $$expand_i1_val35 = 0, $$expand_i1_val37 = 0, $$expand_i1_val39 = 0, $$expand_i1_val41 = 0, $$expand_i1_val43 = 0, $$expand_i1_val45 = 0;
 var $$expand_i1_val47 = 0, $$expand_i1_val49 = 0, $$expand_i1_val5 = 0, $$expand_i1_val51 = 0, $$expand_i1_val53 = 0, $$expand_i1_val55 = 0, $$expand_i1_val57 = 0, $$expand_i1_val59 = 0, $$expand_i1_val61 = 0, $$expand_i1_val63 = 0, $$expand_i1_val65 = 0, $$expand_i1_val67 = 0, $$expand_i1_val7 = 0, $$expand_i1_val9 = 0, $$pre_trunc = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0;
 var $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0;
 var $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0;
 var $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0;
 var $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0;
 var $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0;
 var $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0;
 var $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0;
 var $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0;
 var $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0;
 var $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0;
 var $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0;
 var $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0;
 var $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0;
 var $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0;
 var $99 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $5 = sp + 56|0;
 $6 = $0;
 $7 = $1;
 $8 = $2;
 $9 = $3;
 $10 = $4;
 $17 = 0;
 $20 = $9;
 $21 = HEAP16[$20>>1]|0;
 $22 = $21&65535;
 $23 = $22 & 4095;
 $14 = $23;
 $24 = $14;
 $25 = $24 & 255;
 $13 = $25;
 $26 = $14;
 $27 = $26 >> 8;
 $15 = $27;
 $28 = $15;
 $29 = ($28|0)<(14);
 L1: do {
  if ($29) {
   $30 = $8;
   $19 = $30;
   $31 = $15;
   $32 = (($31|0) % 7)&-1;
   $11 = $32;
   $33 = $11;
   $34 = ($33|0)==(6);
   if ($34) {
    $35 = $9;
    $36 = ((($35)) + 2|0);
    $9 = $36;
    $37 = $9;
    $38 = HEAP16[$37>>1]|0;
    $39 = $38&65535;
    $11 = $39;
   }
   $40 = $11;
   $41 = ($40|0)==(4);
   if ($41) {
    $42 = $8;
    $43 = ((($42)) + 24|0);
    $44 = ((($43)) + 4|0);
    $45 = HEAP16[$44>>1]|0;
    $46 = ($45<<16>>16)!=(0);
    if ($46) {
     $$expand_i1_val = 0;
     HEAP8[$5>>0] = $$expand_i1_val;
     break;
    }
   }
   $47 = $11;
   $48 = ($47|0)==(5);
   if ($48) {
    $49 = $8;
    $50 = ((($49)) + 4|0);
    $51 = HEAP16[$50>>1]|0;
    $52 = ($51<<16>>16)!=(0);
    if ($52) {
     $$expand_i1_val3 = 0;
     HEAP8[$5>>0] = $$expand_i1_val3;
     break;
    }
   }
   $53 = $11;
   $54 = ($53|0)==(6);
   do {
    if ($54) {
     $55 = $8;
     $56 = ((($55)) + 24|0);
     $57 = ((($56)) + 4|0);
     $58 = HEAP16[$57>>1]|0;
     $59 = ($58<<16>>16)!=(0);
     if (!($59)) {
      $60 = $8;
      $61 = ((($60)) + 48|0);
      $62 = ((($61)) + 4|0);
      $63 = HEAP16[$62>>1]|0;
      $64 = ($63<<16>>16)!=(0);
      if (!($64)) {
       break;
      }
     }
     $$expand_i1_val5 = 0;
     HEAP8[$5>>0] = $$expand_i1_val5;
     break L1;
    }
   } while(0);
   $65 = $11;
   L20: do {
    switch ($65|0) {
    case 5: case 0:  {
     $66 = $8;
     $67 = ((($66)) + -24|0);
     $8 = $67;
     $17 = 1;
     break;
    }
    case 10:  {
     $113 = $8;
     $114 = ((($113)) + 4|0);
     $115 = HEAP16[$114>>1]|0;
     $116 = ($115<<16>>16)!=(0);
     if (!($116)) {
      $117 = $8;
      $118 = ((($117)) + -24|0);
      $119 = ((($118)) + 4|0);
      $120 = HEAP16[$119>>1]|0;
      $121 = ($120<<16>>16)!=(0);
      if (!($121)) {
       $122 = $8;
       $123 = ((($122)) + -48|0);
       $8 = $123;
       $17 = 1;
       break L20;
      }
     }
     $$expand_i1_val13 = 0;
     HEAP8[$5>>0] = $$expand_i1_val13;
     break L1;
     break;
    }
    case 4: case 2:  {
     $68 = $8;
     $69 = ((($68)) + 24|0);
     $8 = $69;
     break;
    }
    case 6: case 3:  {
     $70 = $8;
     $71 = ((($70)) + 48|0);
     $8 = $71;
     break;
    }
    case 7:  {
     $11 = 1;
     while(1) {
      $72 = $11;
      $73 = $8;
      $74 = (($73) + (($72*24)|0)|0);
      $75 = ((($74)) + 4|0);
      $76 = HEAP16[$75>>1]|0;
      $77 = ($76<<16>>16)!=(0);
      if ($77) {
       label = 20;
       break;
      }
      $78 = $11;
      $79 = $8;
      $80 = (($79) + (($78*24)|0)|0);
      $81 = ((($80)) + 2|0);
      $82 = HEAP8[$81>>0]|0;
      $83 = $82&255;
      $84 = (45008 + ($83<<2)|0);
      $85 = HEAP32[$84>>2]|0;
      $86 = ((($85)) + 11|0);
      $87 = HEAP8[$86>>0]|0;
      $88 = $87&255;
      $89 = ($88|0)==(2);
      $90 = $11;
      if ($89) {
       label = 22;
       break;
      }
      $93 = (($90) + 1)|0;
      $11 = $93;
     }
     if ((label|0) == 20) {
      $$expand_i1_val7 = 0;
      HEAP8[$5>>0] = $$expand_i1_val7;
      break L1;
     }
     else if ((label|0) == 22) {
      $91 = $8;
      $92 = (($91) + (($90*24)|0)|0);
      $8 = $92;
      break L20;
     }
     break;
    }
    case 8:  {
     $94 = $10;
     $95 = ($94|0)==(0|0);
     if (!($95)) {
      $96 = $10;
      $97 = ((($96)) + 8|0);
      $98 = HEAP32[$97>>2]|0;
      $99 = ($98|0)==(0|0);
      if (!($99)) {
       $100 = $10;
       $8 = $100;
       $17 = 1;
       break L20;
      }
     }
     $$expand_i1_val9 = 0;
     HEAP8[$5>>0] = $$expand_i1_val9;
     break L1;
     break;
    }
    case 9:  {
     $12 = 1;
     while(1) {
      $101 = $12;
      $102 = ($101|0)<=(3);
      if (!($102)) {
       label = 33;
       break;
      }
      $103 = $12;
      $104 = $8;
      $105 = (($104) + (($103*24)|0)|0);
      $106 = ((($105)) + 4|0);
      $107 = HEAP16[$106>>1]|0;
      $108 = ($107<<16>>16)!=(0);
      if ($108) {
       label = 31;
       break;
      }
      $109 = $12;
      $110 = (($109) + 1)|0;
      $12 = $110;
     }
     if ((label|0) == 31) {
      $$expand_i1_val11 = 0;
      HEAP8[$5>>0] = $$expand_i1_val11;
      break L1;
     }
     else if ((label|0) == 33) {
      $111 = $8;
      $112 = ((($111)) + 72|0);
      $8 = $112;
      break L20;
     }
     break;
    }
    default: {
    }
    }
   } while(0);
   $124 = $11;
   $125 = ($124|0)==(0);
   $126 = $11;
   $127 = ($126|0)==(5);
   $or$cond = $125 | $127;
   if ($or$cond) {
    $128 = $8;
    $129 = ((($128)) + 2|0);
    $130 = HEAP8[$129>>0]|0;
    $131 = $130&255;
    $132 = ($131|0)==(1);
    if ($132) {
     $133 = $8;
     $134 = ((($133)) + -24|0);
     $8 = $134;
    }
   }
   $135 = $7;
   $136 = $135 & 256;
   $137 = ($136|0)!=(0);
   if ($137) {
    $138 = $8;
    $139 = ((($138)) + 2|0);
    $140 = HEAP8[$139>>0]|0;
    $141 = $140&255;
    $142 = (45008 + ($141<<2)|0);
    $143 = HEAP32[$142>>2]|0;
    $144 = $8;
    $145 = ((($144)) + 8|0);
    HEAP32[$145>>2] = $143;
   }
   $146 = $8;
   $147 = ((($146)) + 8|0);
   $148 = HEAP32[$147>>2]|0;
   $18 = $148;
   $149 = $15;
   $150 = ($149|0)<(7);
   if ($150) {
    $151 = $13;
    $152 = (45008 + ($151<<2)|0);
    $153 = HEAP32[$152>>2]|0;
    $154 = HEAP32[$153>>2]|0;
    $155 = $18;
    $156 = HEAP32[$155>>2]|0;
    $157 = ($154|0)==($156|0);
    $158 = $157&1;
    $159 = ($158|0)==(1);
    if ($159) {
     $$expand_i1_val15 = 1;
     HEAP8[$5>>0] = $$expand_i1_val15;
     break;
    }
    $160 = $17;
    $161 = ($160|0)!=(0);
    if ($161) {
     $162 = $18;
     $163 = ((($162)) + 11|0);
     $164 = HEAP8[$163>>0]|0;
     $165 = $164&255;
     $166 = ($165|0)==(2);
     if ($166) {
      $167 = $13;
      $168 = $18;
      $169 = ((($168)) + 13|0);
      $170 = HEAP8[$169>>0]|0;
      $171 = $170&255;
      $172 = ($167|0)==($171|0);
      $$expand_i1_val17 = $172&1;
      HEAP8[$5>>0] = $$expand_i1_val17;
      break;
     }
    }
    $173 = $13;
    $174 = $18;
    $175 = ((($174)) + 12|0);
    $176 = HEAP8[$175>>0]|0;
    $177 = $176&255;
    $178 = ($173|0)==($177|0);
    $$expand_i1_val19 = $178&1;
    HEAP8[$5>>0] = $$expand_i1_val19;
    break;
   }
   $179 = $14;
   $180 = $179 & 31;
   $13 = $180;
   $181 = $14;
   $182 = $181 & 224;
   L68: do {
    switch ($182|0) {
    case 0:  {
     $183 = $18;
     $184 = ((($183)) + 11|0);
     $185 = HEAP8[$184>>0]|0;
     $186 = $185&255;
     $187 = $13;
     $188 = ($186|0)==($187|0);
     $$expand_i1_val21 = $188&1;
     HEAP8[$5>>0] = $$expand_i1_val21;
     break L1;
     break;
    }
    case 32:  {
     $189 = $18;
     $190 = ((($189)) + 4|0);
     $191 = HEAP32[$190>>2]|0;
     $192 = $191 >>> 16;
     $193 = $192 & 15;
     $194 = $13;
     $195 = ($193|0)==($194|0);
     $$expand_i1_val23 = $195&1;
     HEAP8[$5>>0] = $$expand_i1_val23;
     break L1;
     break;
    }
    case 64:  {
     $196 = $18;
     $197 = ((($196)) + 4|0);
     $198 = HEAP32[$197>>2]|0;
     $199 = $13;
     $200 = 1 << $199;
     $201 = $198 & $200;
     $202 = ($201|0)!=(0);
     $$expand_i1_val25 = $202&1;
     HEAP8[$5>>0] = $$expand_i1_val25;
     break L1;
     break;
    }
    case 128:  {
     $203 = $13;
     do {
      switch ($203|0) {
      case 4: case 3: case 2: case 1: case 0:  {
       $204 = $6;
       $205 = $8;
       $206 = $13;
       $207 = (__ZL15StressConditionP10TranslatorP12PHONEME_LISTii($204,$205,$206,0)|0);
       $$expand_i1_val27 = $207&1;
       HEAP8[$5>>0] = $$expand_i1_val27;
       break L1;
       break;
      }
      case 5:  {
       $208 = $18;
       $209 = ((($208)) + 11|0);
       $210 = HEAP8[$209>>0]|0;
       $211 = $210&255;
       $212 = ($211|0)==(0);
       if ($212) {
        $218 = 1;
       } else {
        $213 = $19;
        $214 = HEAP16[$213>>1]|0;
        $215 = $214&65535;
        $216 = $215 & 8192;
        $217 = ($216|0)!=(0);
        $218 = $217;
       }
       $$expand_i1_val29 = $218&1;
       HEAP8[$5>>0] = $$expand_i1_val29;
       break L1;
       break;
      }
      case 6:  {
       $219 = $8;
       $220 = ((($219)) + 4|0);
       $221 = HEAP16[$220>>1]|0;
       $222 = $221&65535;
       $223 = ($222|0)!=(0);
       $$expand_i1_val31 = $223&1;
       HEAP8[$5>>0] = $$expand_i1_val31;
       break L1;
       break;
      }
      case 7:  {
       $224 = $8;
       $225 = ((($224)) + 4|0);
       $226 = HEAP16[$225>>1]|0;
       $227 = $226&65535;
       $228 = ($227|0)==(0);
       $$expand_i1_val33 = $228&1;
       HEAP8[$5>>0] = $$expand_i1_val33;
       break L1;
       break;
      }
      case 8:  {
       $229 = $8;
       $230 = ((($229)) + 24|0);
       $231 = ((($230)) + 4|0);
       $232 = HEAP16[$231>>1]|0;
       $233 = ($232<<16>>16)!=(0);
       if ($233) {
        $242 = 1;
       } else {
        $234 = $8;
        $235 = ((($234)) + 24|0);
        $236 = ((($235)) + 8|0);
        $237 = HEAP32[$236>>2]|0;
        $238 = ((($237)) + 11|0);
        $239 = HEAP8[$238>>0]|0;
        $240 = $239&255;
        $241 = ($240|0)==(0);
        $242 = $241;
       }
       $$expand_i1_val35 = $242&1;
       HEAP8[$5>>0] = $$expand_i1_val35;
       break L1;
       break;
      }
      case 9:  {
       $243 = $8;
       $244 = ((($243)) + 4|0);
       $245 = HEAP16[$244>>1]|0;
       $246 = $245&65535;
       $247 = ($246|0)!=(0);
       if ($247) {
        $$expand_i1_val37 = 0;
        HEAP8[$5>>0] = $$expand_i1_val37;
        break L1;
       }
       while(1) {
        $248 = $8;
        $249 = ((($248)) + -24|0);
        $8 = $249;
        $250 = $8;
        $251 = ((($250)) + 3|0);
        $252 = HEAP8[$251>>0]|0;
        $253 = $252&255;
        $254 = $253 & 15;
        $255 = ($254|0)>=(4);
        if ($255) {
         break;
        }
        $256 = $8;
        $257 = ((($256)) + 4|0);
        $258 = HEAP16[$257>>1]|0;
        $259 = $258&65535;
        $260 = ($259|0)==(0);
        if (!($260)) {
         break L68;
        }
       }
       $$expand_i1_val39 = 1;
       HEAP8[$5>>0] = $$expand_i1_val39;
       break L1;
       break;
      }
      case 10:  {
       $261 = $18;
       $262 = ((($261)) + 11|0);
       $263 = HEAP8[$262>>0]|0;
       $264 = $263&255;
       $265 = ($264|0)!=(2);
       $$expand_i1_val41 = $265&1;
       HEAP8[$5>>0] = $$expand_i1_val41;
       break L1;
       break;
      }
      case 11:  {
       while(1) {
        $266 = $8;
        $267 = ((($266)) + 24|0);
        $8 = $267;
        $268 = $8;
        $269 = ((($268)) + 4|0);
        $270 = HEAP16[$269>>1]|0;
        $271 = $270&65535;
        $272 = ($271|0)!=(0);
        if ($272) {
         label = 71;
         break;
        }
        $273 = $8;
        $274 = ((($273)) + 8|0);
        $275 = HEAP32[$274>>2]|0;
        $276 = ((($275)) + 11|0);
        $277 = HEAP8[$276>>0]|0;
        $278 = $277&255;
        $279 = ($278|0)==(2);
        if ($279) {
         label = 73;
         break;
        }
       }
       if ((label|0) == 71) {
        $$expand_i1_val43 = 1;
        HEAP8[$5>>0] = $$expand_i1_val43;
        break L1;
       }
       else if ((label|0) == 73) {
        $$expand_i1_val45 = 0;
        HEAP8[$5>>0] = $$expand_i1_val45;
        break L1;
       }
       break;
      }
      case 12:  {
       $280 = $18;
       $281 = ((($280)) + 11|0);
       $282 = HEAP8[$281>>0]|0;
       $283 = $282&255;
       $284 = ($283|0)==(2);
       if ($284) {
        $295 = 1;
       } else {
        $285 = $18;
        $286 = ((($285)) + 11|0);
        $287 = HEAP8[$286>>0]|0;
        $288 = $287&255;
        $289 = ($288|0)==(3);
        if ($289) {
         $295 = 1;
        } else {
         $290 = $18;
         $291 = ((($290)) + 4|0);
         $292 = HEAP32[$291>>2]|0;
         $293 = $292 & 16;
         $294 = ($293|0)!=(0);
         $295 = $294;
        }
       }
       $$expand_i1_val47 = $295&1;
       HEAP8[$5>>0] = $$expand_i1_val47;
       break L1;
       break;
      }
      case 13:  {
       $296 = $8;
       $297 = (__ZL18CountVowelPositionP12PHONEME_LIST($296)|0);
       $298 = ($297|0)==(1);
       $$expand_i1_val49 = $298&1;
       HEAP8[$5>>0] = $$expand_i1_val49;
       break L1;
       break;
      }
      case 14:  {
       $299 = $8;
       $300 = (__ZL18CountVowelPositionP12PHONEME_LIST($299)|0);
       $301 = ($300|0)==(2);
       $$expand_i1_val51 = $301&1;
       HEAP8[$5>>0] = $$expand_i1_val51;
       break L1;
       break;
      }
      case 15:  {
       $302 = $8;
       $303 = ((($302)) + 4|0);
       $304 = HEAP16[$303>>1]|0;
       $305 = $304&65535;
       $306 = ($305|0)!=(0);
       if ($306) {
        $$expand_i1_val53 = 0;
        HEAP8[$5>>0] = $$expand_i1_val53;
        break L1;
       }
       $16 = 0;
       while(1) {
        $307 = $8;
        $308 = ((($307)) + -24|0);
        $8 = $308;
        $309 = $8;
        $310 = ((($309)) + 8|0);
        $311 = HEAP32[$310>>2]|0;
        $312 = ((($311)) + 11|0);
        $313 = HEAP8[$312>>0]|0;
        $314 = $313&255;
        $315 = ($314|0)==(2);
        if ($315) {
         $316 = $8;
         $317 = ((($316)) + 8|0);
         $318 = HEAP32[$317>>2]|0;
         $319 = ((($318)) + 4|0);
         $320 = HEAP32[$319>>2]|0;
         $321 = $320 & 268435456;
         $322 = ($321|0)!=(0);
         if (!($322)) {
          break;
         }
         $323 = $16;
         $324 = (($323) + 1)|0;
         $16 = $324;
        }
        $325 = $8;
        $326 = ((($325)) + 4|0);
        $327 = HEAP16[$326>>1]|0;
        $328 = $327&65535;
        $329 = ($328|0)!=(0);
        if ($329) {
         break;
        }
       }
       $330 = $16;
       $331 = ($330|0)>(0);
       $$expand_i1_val55 = $331&1;
       HEAP8[$5>>0] = $$expand_i1_val55;
       break L1;
       break;
      }
      case 16:  {
       $332 = $8;
       $333 = HEAP16[$332>>1]|0;
       $334 = $333&65535;
       $335 = $334 & 16;
       $336 = ($335|0)!=(0);
       $$expand_i1_val57 = $336&1;
       HEAP8[$5>>0] = $$expand_i1_val57;
       break L1;
       break;
      }
      default: {
       break L68;
      }
      }
     } while(0);
     break;
    }
    default: {
    }
    }
   } while(0);
   $$expand_i1_val59 = 0;
   HEAP8[$5>>0] = $$expand_i1_val59;
  } else {
   $337 = $15;
   $338 = ($337|0)==(15);
   L120: do {
    if ($338) {
     $339 = $13;
     switch ($339|0) {
     case 1:  {
      $340 = $7;
      $341 = $340 & 1;
      $342 = ($341|0)!=(0);
      $$expand_i1_val61 = $342&1;
      HEAP8[$5>>0] = $$expand_i1_val61;
      break L1;
      break;
     }
     case 2:  {
      $343 = HEAP32[1124]|0;
      $344 = ((($343)) + 132|0);
      $345 = HEAP32[$344>>2]|0;
      $346 = ($345|0)!=(0);
      $$expand_i1_val63 = $346&1;
      HEAP8[$5>>0] = $$expand_i1_val63;
      break L1;
      break;
     }
     case 3:  {
      $347 = HEAP8[120473]|0;
      $348 = $347 << 24 >> 24;
      $349 = ($348|0)!=(0);
      $$expand_i1_val65 = $349&1;
      HEAP8[$5>>0] = $$expand_i1_val65;
      break L1;
      break;
     }
     default: {
      break L120;
     }
     }
    }
   } while(0);
   $$expand_i1_val67 = 0;
   HEAP8[$5>>0] = $$expand_i1_val67;
  }
 } while(0);
 $$pre_trunc = HEAP8[$5>>0]|0;
 $350 = $$pre_trunc&1;
 STACKTOP = sp;return ($350|0);
}
function __ZL17SwitchOnVowelTypeP12PHONEME_LISTP12PHONEME_DATAPPti($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $3;
 $11 = $7;
 $12 = ($11|0)==(2);
 if ($12) {
  $13 = $5;
  $14 = HEAP32[$13>>2]|0;
  $15 = $14 | 2;
  HEAP32[$13>>2] = $15;
  $16 = $4;
  $17 = ((($16)) + 24|0);
  $18 = ((($17)) + 8|0);
  $19 = HEAP32[$18>>2]|0;
  $20 = ((($19)) + 12|0);
  $21 = HEAP8[$20>>0]|0;
  $22 = $21&255;
  $9 = $22;
 } else {
  $23 = $4;
  $24 = ((($23)) + -24|0);
  $25 = ((($24)) + 8|0);
  $26 = HEAP32[$25>>2]|0;
  $27 = ((($26)) + 13|0);
  $28 = HEAP8[$27>>0]|0;
  $29 = $28&255;
  $9 = $29;
 }
 $30 = $9;
 $31 = (($30) - 28)|0;
 $9 = $31;
 $32 = $9;
 $33 = ($32|0)>=(0);
 $34 = $9;
 $35 = ($34|0)<(6);
 $or$cond = $33 & $35;
 if (!($or$cond)) {
  $70 = $6;
  $71 = HEAP32[$70>>2]|0;
  $72 = ((($71)) + 24|0);
  HEAP32[$70>>2] = $72;
  STACKTOP = sp;return;
 }
 $36 = $6;
 $37 = HEAP32[$36>>2]|0;
 $38 = $9;
 $39 = $38<<1;
 $40 = (($37) + ($39<<1)|0);
 $8 = $40;
 $41 = $8;
 $42 = ((($41)) + 2|0);
 $43 = HEAP16[$42>>1]|0;
 $44 = $43&65535;
 $45 = $44 & 15;
 $46 = $45 << 16;
 $47 = $8;
 $48 = ((($47)) + 4|0);
 $49 = HEAP16[$48>>1]|0;
 $50 = $49&65535;
 $51 = (($46) + ($50))|0;
 $52 = $51<<2;
 $53 = $7;
 $54 = $5;
 $55 = ((($54)) + 68|0);
 $56 = (($55) + ($53<<2)|0);
 HEAP32[$56>>2] = $52;
 $57 = $8;
 $58 = ((($57)) + 2|0);
 $59 = HEAP16[$58>>1]|0;
 $60 = $59&65535;
 $61 = $60 >> 4;
 $62 = $61 & 255;
 $63 = $62&255;
 $10 = $63;
 $64 = $10;
 $65 = $64 << 24 >> 24;
 $66 = $7;
 $67 = $5;
 $68 = ((($67)) + 88|0);
 $69 = (($68) + ($66<<2)|0);
 HEAP32[$69>>2] = $65;
 $70 = $6;
 $71 = HEAP32[$70>>2]|0;
 $72 = ((($71)) + 24|0);
 HEAP32[$70>>2] = $72;
 STACKTOP = sp;return;
}
function __ZL18CountVowelPositionP12PHONEME_LIST($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = 0;
 while(1) {
  $3 = $1;
  $4 = ((($3)) + 8|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = ((($5)) + 11|0);
  $7 = HEAP8[$6>>0]|0;
  $8 = $7&255;
  $9 = ($8|0)==(2);
  if ($9) {
   $10 = $2;
   $11 = (($10) + 1)|0;
   $2 = $11;
  }
  $12 = $1;
  $13 = ((($12)) + 4|0);
  $14 = HEAP16[$13>>1]|0;
  $15 = $14&65535;
  $16 = ($15|0)!=(0);
  if ($16) {
   break;
  }
  $17 = $1;
  $18 = ((($17)) + -24|0);
  $1 = $18;
 }
 $19 = $2;
 STACKTOP = sp;return ($19|0);
}
function __Z17InterpretPhoneme2iP12PHONEME_DATA($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(112|0);
 $5 = sp;
 $2 = $0;
 $3 = $1;
 dest=$5; stop=dest+96|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 $4 = 0;
 while(1) {
  $6 = $4;
  $7 = ($6|0)<(4);
  if (!($7)) {
   break;
  }
  $8 = $4;
  $9 = (($5) + (($8*24)|0)|0);
  $10 = ((($9)) + 2|0);
  HEAP8[$10>>0] = 9;
  $11 = HEAP32[(45044)>>2]|0;
  $12 = $4;
  $13 = (($5) + (($12*24)|0)|0);
  $14 = ((($13)) + 8|0);
  HEAP32[$14>>2] = $11;
  $15 = $4;
  $16 = (($15) + 1)|0;
  $4 = $16;
 }
 $17 = $2;
 $18 = $17&255;
 $19 = ((($5)) + 24|0);
 $20 = ((($19)) + 2|0);
 HEAP8[$20>>0] = $18;
 $21 = $2;
 $22 = (45008 + ($21<<2)|0);
 $23 = HEAP32[$22>>2]|0;
 $24 = ((($5)) + 24|0);
 $25 = ((($24)) + 8|0);
 HEAP32[$25>>2] = $23;
 $26 = ((($5)) + 48|0);
 $27 = ((($26)) + 4|0);
 HEAP16[$27>>1] = 1;
 $28 = ((($5)) + 24|0);
 $29 = $3;
 __Z16InterpretPhonemeP10TranslatoriP12PHONEME_LISTP12PHONEME_DATAP12WORD_PH_DATA(0,0,$28,$29,0);
 STACKTOP = sp;return;
}
function __Z12WordToStringj($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = 0;
 while(1) {
  $3 = $2;
  $4 = ($3|0)<(4);
  if (!($4)) {
   break;
  }
  $5 = $1;
  $6 = $2;
  $7 = $6<<3;
  $8 = $5 >>> $7;
  $9 = $8&255;
  $10 = $2;
  $11 = (120493 + ($10)|0);
  HEAP8[$11>>0] = $9;
  $12 = $2;
  $13 = (($12) + 1)|0;
  $2 = $13;
 }
 HEAP8[(120497)>>0] = 0;
 STACKTOP = sp;return (120493|0);
}
function __Z14SynthesizeInitv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[19115] = 0;
 HEAP32[19116] = 0;
 HEAP32[19117] = 0;
 HEAP32[19118] = -1;
 HEAP8[(76493)>>0] = 0;
 HEAP8[(76497)>>0] = 0;
 return;
}
function __Z11PauseLengthii($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $5 = $3;
 $6 = ($5|0)==(0);
 $7 = $2;
 do {
  if ($6) {
   $8 = ($7|0)>=(200);
   $9 = $2;
   if ($8) {
    $10 = HEAP32[(75120)>>2]|0;
    $11 = Math_imul($9, $10)|0;
    $12 = (($11|0) / 256)&-1;
    $4 = $12;
    break;
   } else {
    $13 = HEAP32[18779]|0;
    $14 = Math_imul($9, $13)|0;
    $15 = (($14|0) / 256)&-1;
    $4 = $15;
    break;
   }
  } else {
   $16 = HEAP32[(75128)>>2]|0;
   $17 = Math_imul($7, $16)|0;
   $18 = (($17|0) / 256)&-1;
   $4 = $18;
  }
 } while(0);
 $19 = $4;
 $20 = HEAP32[(75124)>>2]|0;
 $21 = ($19>>>0)<($20>>>0);
 if (!($21)) {
  $23 = $4;
  STACKTOP = sp;return ($23|0);
 }
 $22 = HEAP32[(75124)>>2]|0;
 $4 = $22;
 $23 = $4;
 STACKTOP = sp;return ($23|0);
}
function __Z9DoSample3P12PHONEME_DATAii($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$ = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 __ZL8EndPitchi(1);
 $8 = $5;
 $9 = ($8|0)==(-1);
 if ($9) {
  $10 = $5;
  $6 = $10;
 } else {
  $11 = $3;
  $12 = ((($11)) + 88|0);
  $13 = ((($12)) + 4|0);
  $14 = HEAP32[$13>>2]|0;
  $6 = $14;
  $15 = $6;
  $16 = ($15|0)==(0);
  $$ = $16 ? 100 : $14;
  $6 = $$;
  $17 = $6;
  $18 = $17<<5;
  $19 = (($18|0) / 100)&-1;
  $6 = $19;
 }
 HEAP32[12715] = 0;
 $20 = $3;
 $21 = ((($20)) + 68|0);
 $22 = ((($21)) + 4|0);
 $23 = HEAP32[$22>>2]|0;
 $24 = ($23|0)==(0);
 if ($24) {
  $7 = 0;
  HEAP32[19117] = 0;
  $39 = $7;
  STACKTOP = sp;return ($39|0);
 } else {
  $25 = $3;
  $26 = ((($25)) + 68|0);
  $27 = ((($26)) + 4|0);
  $28 = HEAP32[$27>>2]|0;
  $29 = $3;
  $30 = ((($29)) + 4|0);
  $31 = ((($30)) + 40|0);
  $32 = HEAP32[$31>>2]|0;
  $33 = $32<<1;
  $34 = $3;
  $35 = HEAP32[$34>>2]|0;
  $36 = $4;
  $37 = $6;
  $38 = (__ZL9DoSample2iiiiii($28,2,$33,$35,$36,$37)|0);
  $7 = $38;
  HEAP32[19117] = 0;
  $39 = $7;
  STACKTOP = sp;return ($39|0);
 }
 return (0)|0;
}
function __ZL8EndPitchi($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = HEAP32[19126]|0;
 $3 = ($2|0)>(0);
 $4 = HEAP32[19115]|0;
 $5 = ($4|0)>=(0);
 $or$cond = $3 & $5;
 if ($or$cond) {
  $6 = HEAP32[19115]|0;
  $7 = (80944 + ($6<<4)|0);
  $8 = ((($7)) + 4|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = ($9|0)==(0);
  if ($10) {
   $11 = HEAP32[19126]|0;
   $12 = HEAP32[19115]|0;
   $13 = (80944 + ($12<<4)|0);
   $14 = ((($13)) + 4|0);
   HEAP32[$14>>2] = $11;
  }
  HEAP32[19126] = 0;
 }
 $15 = $1;
 $16 = ($15|0)!=(0);
 if (!($16)) {
  STACKTOP = sp;return;
 }
 HEAP32[19125] = -1;
 HEAP32[19117] = 0;
 $17 = HEAP32[20917]|0;
 HEAP32[19127] = $17;
 __ZL11SmoothSpectv();
 HEAP32[19118] = -1;
 ;HEAP32[50864>>2]=0|0;HEAP32[50864+4>>2]=0|0;HEAP32[50864+8>>2]=0|0;HEAP32[50864+12>>2]=0|0;
 STACKTOP = sp;return;
}
function __ZL9DoSample2iiiiii($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0;
 var $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0;
 var $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0;
 var $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $7 = $0;
 $8 = $1;
 $9 = $2;
 $10 = $3;
 $11 = $4;
 $12 = $5;
 $21 = $7;
 $22 = $21 & 8388607;
 $7 = $22;
 $23 = $7;
 $24 = HEAP32[11510]|0;
 $25 = (($24) + ($23)|0);
 $20 = $25;
 $26 = $20;
 $27 = ((($26)) + 2|0);
 $28 = HEAP8[$27>>0]|0;
 $29 = $28&255;
 $15 = $29;
 $30 = $20;
 $31 = ((($30)) + 1|0);
 $32 = HEAP8[$31>>0]|0;
 $33 = $32&255;
 $34 = $33<<8;
 $14 = $34;
 $35 = $20;
 $36 = HEAP8[$35>>0]|0;
 $37 = $36&255;
 $38 = $14;
 $39 = (($38) + ($37))|0;
 $14 = $39;
 $40 = $14;
 $41 = ($40|0)==(0);
 if ($41) {
  $6 = 0;
  $221 = $6;
  STACKTOP = sp;return ($221|0);
 }
 $42 = HEAP32[(75140)>>2]|0;
 $16 = $42;
 $43 = $15;
 $44 = ($43|0)==(0);
 if ($44) {
  $45 = $16;
  $46 = $45<<1;
  $16 = $46;
 }
 $47 = $9;
 $48 = ($47|0)>(0);
 if ($48) {
  $49 = $9;
  $50 = HEAP32[20211]|0;
  $51 = Math_imul($49, $50)|0;
  $52 = (($51|0) / 1000)&-1;
  $9 = $52;
  $53 = $15;
  $54 = ($53|0)==(0);
  if ($54) {
   $55 = $9;
   $56 = $55<<1;
   $9 = $56;
  }
  $57 = $16;
  $58 = $9;
  $59 = Math_imul($57, $58)|0;
  $60 = $14;
  $61 = (($59|0) / ($60|0))&-1;
  $17 = $61;
  $62 = $17;
  $63 = $16;
  $64 = ($62|0)>($63|0);
  if ($64) {
   $65 = $17;
   $16 = $65;
  }
 } else {
  $66 = $14;
  $9 = $66;
 }
 $67 = $11;
 $68 = ($67|0)>(0);
 if ($68) {
  $69 = $9;
  $70 = $11;
  $71 = Math_imul($69, $70)|0;
  $72 = (($71|0) / 256)&-1;
  $9 = $72;
 }
 $73 = $9;
 $74 = HEAP32[(75128)>>2]|0;
 $75 = Math_imul($73, $74)|0;
 $76 = (($75|0) / 256)&-1;
 $13 = $76;
 $77 = $10;
 $78 = $77 & 4;
 $79 = ($78|0)!=(0);
 if ($79) {
  $80 = $13;
  $81 = $9;
  $82 = ($80|0)>($81|0);
  if ($82) {
   $83 = $9;
   $13 = $83;
  }
 }
 $84 = $13;
 $85 = $16;
 $86 = ($84|0)<($85|0);
 if ($86) {
  $87 = $16;
  $13 = $87;
 }
 $88 = $15;
 $89 = ($88|0)==(0);
 if ($89) {
  $90 = $13;
  $91 = (($90|0) / 2)&-1;
  $13 = $91;
  $92 = $14;
  $93 = (($92|0) / 2)&-1;
  $14 = $93;
 }
 $94 = $12;
 $95 = ($94|0)<(0);
 if ($95) {
  $96 = $13;
  $6 = $96;
  $221 = $6;
  STACKTOP = sp;return ($221|0);
 }
 $97 = $14;
 $98 = (($97|0) / 4)&-1;
 $18 = $98;
 $99 = $7;
 $100 = (($99) + 4)|0;
 $7 = $100;
 $101 = $8;
 $102 = $101 & 256;
 $103 = ($102|0)!=(0);
 if ($103) {
  $104 = HEAP32[20917]|0;
  HEAP32[19125] = $104;
  $105 = HEAP32[20917]|0;
  $106 = (80944 + ($105<<4)|0);
  $19 = $106;
  $107 = $19;
  HEAP32[$107>>2] = 7;
  $108 = $13;
  $109 = $14;
  $110 = $109 << 16;
  $111 = $108 | $110;
  $112 = $19;
  $113 = ((($112)) + 4|0);
  HEAP32[$113>>2] = $111;
  $114 = $7;
  $115 = HEAP32[11510]|0;
  $116 = (($115) + ($114)|0);
  $117 = $116;
  $118 = $19;
  $119 = ((($118)) + 8|0);
  HEAP32[$119>>2] = $117;
  $120 = $15;
  $121 = $12;
  $122 = $121 << 8;
  $123 = (($120) + ($122))|0;
  $124 = $19;
  $125 = ((($124)) + 12|0);
  HEAP32[$125>>2] = $123;
  __Z8WcmdqIncv();
  $126 = $13;
  $6 = $126;
  $221 = $6;
  STACKTOP = sp;return ($221|0);
 }
 $127 = $13;
 $128 = $14;
 $129 = ($127|0)>($128|0);
 if ($129) {
  $130 = $18;
  $131 = ($130*3)|0;
  $17 = $131;
  $132 = $17;
  $133 = $13;
  $134 = (($133) - ($132))|0;
  $13 = $134;
 } else {
  $135 = $13;
  $17 = $135;
  $13 = 0;
 }
 $136 = HEAP32[20917]|0;
 HEAP32[19125] = $136;
 $137 = HEAP32[20917]|0;
 $138 = (80944 + ($137<<4)|0);
 $19 = $138;
 $139 = $19;
 HEAP32[$139>>2] = 6;
 $140 = $17;
 $141 = $19;
 $142 = ((($141)) + 4|0);
 HEAP32[$142>>2] = $140;
 $143 = $7;
 $144 = HEAP32[11510]|0;
 $145 = (($144) + ($143)|0);
 $146 = $145;
 $147 = $19;
 $148 = ((($147)) + 8|0);
 HEAP32[$148>>2] = $146;
 $149 = $15;
 $150 = $12;
 $151 = $150 << 8;
 $152 = (($149) + ($151))|0;
 $153 = $19;
 $154 = ((($153)) + 12|0);
 HEAP32[$154>>2] = $152;
 __Z8WcmdqIncv();
 while(1) {
  $155 = $13;
  $156 = $18;
  $157 = ($156*3)|0;
  $158 = ($155|0)>($157|0);
  if (!($158)) {
   break;
  }
  $159 = $18;
  $17 = $159;
  $160 = $15;
  $161 = ($160|0)==(0);
  if ($161) {
   $162 = $17;
   $163 = $162<<1;
   $17 = $163;
  }
  $164 = HEAP32[20917]|0;
  HEAP32[19125] = $164;
  $165 = HEAP32[20917]|0;
  $166 = (80944 + ($165<<4)|0);
  $19 = $166;
  $167 = $19;
  HEAP32[$167>>2] = 6;
  $168 = $18;
  $169 = $168<<1;
  $170 = $19;
  $171 = ((($170)) + 4|0);
  HEAP32[$171>>2] = $169;
  $172 = $7;
  $173 = $17;
  $174 = (($172) + ($173))|0;
  $175 = HEAP32[11510]|0;
  $176 = (($175) + ($174)|0);
  $177 = $176;
  $178 = $19;
  $179 = ((($178)) + 8|0);
  HEAP32[$179>>2] = $177;
  $180 = $15;
  $181 = $12;
  $182 = $181 << 8;
  $183 = (($180) + ($182))|0;
  $184 = $19;
  $185 = ((($184)) + 12|0);
  HEAP32[$185>>2] = $183;
  __Z8WcmdqIncv();
  $186 = $18;
  $187 = $186<<1;
  $188 = $13;
  $189 = (($188) - ($187))|0;
  $13 = $189;
 }
 $190 = $13;
 $191 = ($190|0)>(0);
 if ($191) {
  $192 = $14;
  $193 = $13;
  $194 = (($192) - ($193))|0;
  $17 = $194;
  $195 = $15;
  $196 = ($195|0)==(0);
  if ($196) {
   $197 = $17;
   $198 = $197<<1;
   $17 = $198;
  }
  $199 = HEAP32[20917]|0;
  HEAP32[19125] = $199;
  $200 = HEAP32[20917]|0;
  $201 = (80944 + ($200<<4)|0);
  $19 = $201;
  $202 = $19;
  HEAP32[$202>>2] = 6;
  $203 = $13;
  $204 = $19;
  $205 = ((($204)) + 4|0);
  HEAP32[$205>>2] = $203;
  $206 = $7;
  $207 = $17;
  $208 = (($206) + ($207))|0;
  $209 = HEAP32[11510]|0;
  $210 = (($209) + ($208)|0);
  $211 = $210;
  $212 = $19;
  $213 = ((($212)) + 8|0);
  HEAP32[$213>>2] = $211;
  $214 = $15;
  $215 = $12;
  $216 = $215 << 8;
  $217 = (($214) + ($216))|0;
  $218 = $19;
  $219 = ((($218)) + 12|0);
  HEAP32[$219>>2] = $217;
  __Z8WcmdqIncv();
 }
 $220 = $13;
 $6 = $220;
 $221 = $6;
 STACKTOP = sp;return ($221|0);
}
function __ZL11SmoothSpectv() {
 var $$ = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0;
 var $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0;
 var $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0;
 var $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0;
 var $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0;
 var $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0;
 var $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0;
 var $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0;
 var $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0;
 var $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0;
 var $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0;
 var $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0;
 var $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0;
 var $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $15 = HEAP32[19128]|0;
 $16 = HEAP32[19127]|0;
 $17 = ($15|0)==($16|0);
 if ($17) {
  STACKTOP = sp;return;
 }
 $18 = HEAP32[19118]|0;
 $19 = ($18|0)<(0);
 if (!($19)) {
  $20 = HEAP32[19118]|0;
  $21 = HEAP32[19128]|0;
  $22 = ($20|0)==($21|0);
  if (!($22)) {
   $24 = HEAP32[19118]|0;
   $25 = (80944 + ($24<<4)|0);
   $0 = $25;
   $26 = $0;
   $27 = ((($26)) + 8|0);
   $28 = HEAP32[$27>>2]|0;
   $29 = $28;
   $4 = $29;
   $30 = HEAP32[19118]|0;
   $31 = (($30) - 1)|0;
   $5 = $31;
   $32 = $4;
   $2 = $32;
   $1 = $32;
   L7: while(1) {
    $33 = $5;
    $34 = ($33|0)<(0);
    if ($34) {
     $5 = 169;
    }
    $35 = $5;
    $36 = (80944 + ($35<<4)|0);
    $0 = $36;
    $37 = $0;
    $38 = HEAP32[$37>>2]|0;
    $39 = ($38|0)==(5);
    if ($39) {
     break;
    }
    $40 = $0;
    $41 = HEAP32[$40>>2]|0;
    $42 = ($41|0)==(6);
    if ($42) {
     break;
    }
    $43 = $0;
    $44 = HEAP32[$43>>2]|0;
    $45 = ($44>>>0)<=(4);
    L14: do {
     if ($45) {
      $46 = $0;
      $47 = ((($46)) + 4|0);
      $48 = HEAP32[$47>>2]|0;
      $49 = $48 & 65535;
      $6 = $49;
      $50 = $0;
      $51 = ((($50)) + 12|0);
      $52 = HEAP32[$51>>2]|0;
      $53 = $52;
      $3 = $53;
      $54 = $3;
      $55 = $1;
      $56 = ($54|0)==($55|0);
      if (!($56)) {
       break L7;
      }
      $57 = $2;
      $58 = $57;
      $59 = $0;
      $60 = ((($59)) + 12|0);
      HEAP32[$60>>2] = $58;
      $61 = $2;
      $3 = $61;
      $62 = $0;
      $63 = ((($62)) + 8|0);
      $64 = HEAP32[$63>>2]|0;
      $65 = $64;
      $2 = $65;
      $1 = $65;
      $8 = 0;
      $66 = $1;
      $67 = HEAP16[$66>>1]|0;
      $68 = $67 << 16 >> 16;
      $69 = $68 & 16;
      $70 = ($69|0)!=(0);
      if ($70) {
       break L7;
      }
      $71 = $1;
      $72 = HEAP16[$71>>1]|0;
      $73 = $72 << 16 >> 16;
      $74 = $73 & 32;
      $75 = ($74|0)!=(0);
      if ($75) {
       $76 = $6;
       $77 = ($76*12)|0;
       $78 = (($77|0) / 10)&-1;
       $6 = $78;
      }
      $7 = 0;
      while(1) {
       $79 = $7;
       $80 = ($79|0)<(6);
       if (!($80)) {
        break L14;
       }
       $81 = $1;
       $82 = HEAP16[$81>>1]|0;
       $83 = $82 << 16 >> 16;
       $84 = $83 & 8;
       $85 = ($84|0)!=(0);
       $86 = $7;
       $87 = ($86|0)<(3);
       $or$cond = $85 & $87;
       do {
        if (!($or$cond)) {
         $88 = $7;
         $89 = $3;
         $90 = ((($89)) + 2|0);
         $91 = (($90) + ($88<<1)|0);
         $92 = HEAP16[$91>>1]|0;
         $93 = $92 << 16 >> 16;
         $11 = $93;
         $94 = $7;
         $95 = $1;
         $96 = ((($95)) + 2|0);
         $97 = (($96) + ($94<<1)|0);
         $98 = HEAP16[$97>>1]|0;
         $99 = $98 << 16 >> 16;
         $12 = $99;
         $100 = $12;
         $101 = $11;
         $102 = (($100) - ($101))|0;
         $10 = $102;
         $103 = ($102|0)>(0);
         $104 = $11;
         if ($103) {
          $105 = $104<<1;
          $106 = $12;
          $107 = (($105) + ($106))|0;
          $9 = $107;
         } else {
          $108 = $12;
          $109 = $108<<1;
          $110 = (($104) + ($109))|0;
          $9 = $110;
         }
         $111 = $9;
         $112 = $7;
         $113 = (78052 + ($112<<2)|0);
         $114 = HEAP32[$113>>2]|0;
         $115 = Math_imul($111, $114)|0;
         $116 = (($115|0) / 3000)&-1;
         $9 = $116;
         $117 = $9;
         $118 = $6;
         $119 = Math_imul($117, $118)|0;
         $120 = (($119|0) / 256)&-1;
         $9 = $120;
         $121 = $10;
         $122 = $9;
         $123 = ($121|0)>($122|0);
         if ($123) {
          $124 = $8;
          $125 = ($124|0)==(0);
          if ($125) {
           $126 = $1;
           $127 = (__ZL9CopyFrameP7frame_ti($126,0)|0);
           $2 = $127;
           $8 = 1;
          }
          $128 = $7;
          $129 = $3;
          $130 = ((($129)) + 2|0);
          $131 = (($130) + ($128<<1)|0);
          $132 = HEAP16[$131>>1]|0;
          $133 = $132 << 16 >> 16;
          $134 = $9;
          $135 = (($133) + ($134))|0;
          $136 = $135&65535;
          $137 = $7;
          $138 = $2;
          $139 = ((($138)) + 2|0);
          $140 = (($139) + ($137<<1)|0);
          HEAP16[$140>>1] = $136;
          $141 = $2;
          $142 = $141;
          $143 = $0;
          $144 = ((($143)) + 8|0);
          HEAP32[$144>>2] = $142;
          break;
         }
         $145 = $10;
         $146 = $9;
         $147 = (0 - ($146))|0;
         $148 = ($145|0)<($147|0);
         if ($148) {
          $149 = $8;
          $150 = ($149|0)==(0);
          if ($150) {
           $151 = $1;
           $152 = (__ZL9CopyFrameP7frame_ti($151,0)|0);
           $2 = $152;
           $8 = 1;
          }
          $153 = $7;
          $154 = $3;
          $155 = ((($154)) + 2|0);
          $156 = (($155) + ($153<<1)|0);
          $157 = HEAP16[$156>>1]|0;
          $158 = $157 << 16 >> 16;
          $159 = $9;
          $160 = (($158) - ($159))|0;
          $161 = $160&65535;
          $162 = $7;
          $163 = $2;
          $164 = ((($163)) + 2|0);
          $165 = (($164) + ($162<<1)|0);
          HEAP16[$165>>1] = $161;
          $166 = $2;
          $167 = $166;
          $168 = $0;
          $169 = ((($168)) + 8|0);
          HEAP32[$169>>2] = $167;
         }
        }
       } while(0);
       $170 = $7;
       $171 = (($170) + 1)|0;
       $7 = $171;
      }
     }
    } while(0);
    $172 = $5;
    $173 = HEAP32[19128]|0;
    $174 = ($172|0)==($173|0);
    if ($174) {
     break;
    }
    $175 = $5;
    $176 = (($175) + -1)|0;
    $5 = $176;
   }
   $177 = HEAP32[19118]|0;
   $5 = $177;
   $1 = 0;
   L44: while(1) {
    $178 = $5;
    $179 = (80944 + ($178<<4)|0);
    $0 = $179;
    $180 = $0;
    $181 = HEAP32[$180>>2]|0;
    $182 = ($181|0)==(5);
    if ($182) {
     break;
    }
    $183 = $0;
    $184 = HEAP32[$183>>2]|0;
    $185 = ($184|0)==(6);
    if ($185) {
     break;
    }
    $186 = $0;
    $187 = HEAP32[$186>>2]|0;
    $188 = ($187>>>0)<=(4);
    L48: do {
     if ($188) {
      $189 = $0;
      $190 = ((($189)) + 4|0);
      $191 = HEAP32[$190>>2]|0;
      $192 = $191 & 65535;
      $6 = $192;
      $193 = $0;
      $194 = ((($193)) + 8|0);
      $195 = HEAP32[$194>>2]|0;
      $196 = $195;
      $3 = $196;
      $197 = $1;
      $198 = ($197|0)!=(0|0);
      if ($198) {
       $199 = $3;
       $200 = $1;
       $201 = ($199|0)==($200|0);
       if (!($201)) {
        break L44;
       }
       $202 = $2;
       $203 = $202;
       $204 = $0;
       $205 = ((($204)) + 8|0);
       HEAP32[$205>>2] = $203;
       $206 = $2;
       $3 = $206;
      }
      $207 = $0;
      $208 = ((($207)) + 12|0);
      $209 = HEAP32[$208>>2]|0;
      $210 = $209;
      $2 = $210;
      $1 = $210;
      $8 = 0;
      $211 = $3;
      $212 = HEAP16[$211>>1]|0;
      $213 = $212 << 16 >> 16;
      $214 = $213 & 16;
      $215 = ($214|0)!=(0);
      if ($215) {
       break L44;
      }
      $216 = $3;
      $217 = HEAP16[$216>>1]|0;
      $218 = $217 << 16 >> 16;
      $219 = $218 & 32;
      $220 = ($219|0)!=(0);
      if ($220) {
       $221 = $6;
       $222 = ($221*6)|0;
       $223 = (($222|0) / 5)&-1;
       $6 = $223;
      }
      $7 = 0;
      while(1) {
       $224 = $7;
       $225 = ($224|0)<(6);
       if (!($225)) {
        break L48;
       }
       $226 = $7;
       $227 = $3;
       $228 = ((($227)) + 2|0);
       $229 = (($228) + ($226<<1)|0);
       $230 = HEAP16[$229>>1]|0;
       $231 = $230 << 16 >> 16;
       $13 = $231;
       $232 = $7;
       $233 = $1;
       $234 = ((($233)) + 2|0);
       $235 = (($234) + ($232<<1)|0);
       $236 = HEAP16[$235>>1]|0;
       $237 = $236 << 16 >> 16;
       $14 = $237;
       $238 = $14;
       $239 = $13;
       $240 = (($238) - ($239))|0;
       $10 = $240;
       $241 = ($240|0)>(0);
       $242 = $13;
       if ($241) {
        $243 = $242<<1;
        $244 = $14;
        $245 = (($243) + ($244))|0;
        $9 = $245;
       } else {
        $246 = $14;
        $247 = $246<<1;
        $248 = (($242) + ($247))|0;
        $9 = $248;
       }
       $249 = $9;
       $250 = $7;
       $251 = (78052 + ($250<<2)|0);
       $252 = HEAP32[$251>>2]|0;
       $253 = Math_imul($249, $252)|0;
       $254 = (($253|0) / 3000)&-1;
       $9 = $254;
       $255 = $9;
       $256 = $6;
       $257 = Math_imul($255, $256)|0;
       $258 = (($257|0) / 256)&-1;
       $9 = $258;
       $259 = $10;
       $260 = $9;
       $261 = ($259|0)>($260|0);
       if ($261) {
        $262 = $8;
        $263 = ($262|0)==(0);
        if ($263) {
         $264 = $1;
         $265 = (__ZL9CopyFrameP7frame_ti($264,0)|0);
         $2 = $265;
         $8 = 1;
        }
        $266 = $7;
        $267 = $3;
        $268 = ((($267)) + 2|0);
        $269 = (($268) + ($266<<1)|0);
        $270 = HEAP16[$269>>1]|0;
        $271 = $270 << 16 >> 16;
        $272 = $9;
        $273 = (($271) + ($272))|0;
        $274 = $273&65535;
        $275 = $7;
        $276 = $2;
        $277 = ((($276)) + 2|0);
        $278 = (($277) + ($275<<1)|0);
        HEAP16[$278>>1] = $274;
        $279 = $2;
        $280 = $279;
        $281 = $0;
        $282 = ((($281)) + 12|0);
        HEAP32[$282>>2] = $280;
       } else {
        $283 = $10;
        $284 = $9;
        $285 = (0 - ($284))|0;
        $286 = ($283|0)<($285|0);
        if ($286) {
         $287 = $8;
         $288 = ($287|0)==(0);
         if ($288) {
          $289 = $1;
          $290 = (__ZL9CopyFrameP7frame_ti($289,0)|0);
          $2 = $290;
          $8 = 1;
         }
         $291 = $7;
         $292 = $3;
         $293 = ((($292)) + 2|0);
         $294 = (($293) + ($291<<1)|0);
         $295 = HEAP16[$294>>1]|0;
         $296 = $295 << 16 >> 16;
         $297 = $9;
         $298 = (($296) - ($297))|0;
         $299 = $298&65535;
         $300 = $7;
         $301 = $2;
         $302 = ((($301)) + 2|0);
         $303 = (($302) + ($300<<1)|0);
         HEAP16[$303>>1] = $299;
         $304 = $2;
         $305 = $304;
         $306 = $0;
         $307 = ((($306)) + 12|0);
         HEAP32[$307>>2] = $305;
        }
       }
       $308 = $7;
       $309 = (($308) + 1)|0;
       $7 = $309;
      }
     }
    } while(0);
    $310 = $5;
    $311 = (($310) + 1)|0;
    $5 = $311;
    $312 = $5;
    $313 = ($312|0)>=(170);
    $$ = $313 ? 0 : $311;
    $5 = $$;
    $314 = $5;
    $315 = HEAP32[19127]|0;
    $316 = ($314|0)==($315|0);
    if ($316) {
     break;
    }
   }
   $317 = HEAP32[19127]|0;
   HEAP32[19128] = $317;
   STACKTOP = sp;return;
  }
 }
 $23 = HEAP32[19127]|0;
 HEAP32[19128] = $23;
 STACKTOP = sp;return;
}
function __ZL9CopyFrameP7frame_ti($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $6 = $4;
 $7 = ($6|0)==(0);
 if ($7) {
  $8 = $3;
  $9 = HEAP16[$8>>1]|0;
  $10 = $9 << 16 >> 16;
  $11 = $10 & 32768;
  $12 = ($11|0)!=(0);
  if ($12) {
   $13 = $3;
   $2 = $13;
   $27 = $2;
   STACKTOP = sp;return ($27|0);
  }
 }
 $14 = (__ZL10AllocFramev()|0);
 $5 = $14;
 $15 = $5;
 $16 = ($15|0)!=(0|0);
 if ($16) {
  $17 = $5;
  $18 = $3;
  dest=$17; src=$18; stop=dest+64|0; do { HEAP16[dest>>1]=HEAP16[src>>1]|0; dest=dest+2|0; src=src+2|0; } while ((dest|0) < (stop|0));
  $19 = $5;
  $20 = ((($19)) + 16|0);
  HEAP8[$20>>0] = 0;
  $21 = $5;
  $22 = HEAP16[$21>>1]|0;
  $23 = $22 << 16 >> 16;
  $24 = $23 | 32768;
  $25 = $24&65535;
  HEAP16[$21>>1] = $25;
 }
 $26 = $5;
 $2 = $26;
 $27 = $2;
 STACKTOP = sp;return ($27|0);
}
function __ZL10AllocFramev() {
 var $$ = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[19129]|0;
 $1 = (($0) + 1)|0;
 HEAP32[19129] = $1;
 $2 = HEAP32[19129]|0;
 $3 = ($2|0)>=(170);
 $$ = $3 ? 0 : $1;
 HEAP32[19129] = $$;
 $4 = HEAP32[19129]|0;
 $5 = (89540 + ($4<<6)|0);
 return ($5|0);
}
function __Z18FormantTransition2P10frameref_tPijjP11PHONEME_TABi($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0;
 var $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0;
 var $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0;
 var $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0;
 var $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0;
 var $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0;
 var $281 = 0, $282 = 0, $283 = 0, $284 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0;
 var $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond = 0;
 var $or$cond3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(96|0);
 $7 = $0;
 $8 = $1;
 $9 = $2;
 $10 = $3;
 $11 = $4;
 $12 = $5;
 $26 = 0;
 $28 = $8;
 $29 = HEAP32[$28>>2]|0;
 $30 = ($29|0)<(2);
 if ($30) {
  $6 = 0;
  $284 = $6;
  STACKTOP = sp;return ($284|0);
 }
 $31 = $9;
 $32 = $31 & 63;
 $33 = $32<<1;
 $16 = $33;
 $34 = $9;
 $35 = $34 >>> 6;
 $36 = $35 & 63;
 $17 = $36;
 $37 = $9;
 $38 = $37 >>> 12;
 $24 = $38;
 $39 = $10;
 $40 = $39 & 63;
 $41 = ($40*50)|0;
 $19 = $41;
 $42 = $10;
 $43 = $42 >>> 6;
 $44 = $43 & 31;
 $45 = (($44) - 15)|0;
 $46 = ($45*50)|0;
 $20 = $46;
 $47 = $10;
 $48 = $47 >>> 11;
 $49 = $48 & 31;
 $50 = (($49) - 15)|0;
 $51 = ($50*50)|0;
 $21 = $51;
 $52 = $10;
 $53 = $52 >>> 16;
 $54 = $53 & 31;
 $55 = (($54) - 15)|0;
 $56 = ($55*50)|0;
 $22 = $56;
 $57 = $10;
 $58 = $57 >>> 21;
 $59 = $58 & 31;
 $60 = $59<<3;
 $23 = $60;
 $61 = $10;
 $62 = $61 >>> 26;
 $63 = $62 & 7;
 $18 = $63;
 $64 = $10;
 $65 = $64 >>> 29;
 $25 = $65;
 $66 = $11;
 $67 = ($66|0)!=(0|0);
 if ($67) {
  $68 = $11;
  $69 = HEAP32[$68>>2]|0;
  $70 = ($69|0)==(63);
  if ($70) {
   $71 = $24;
   $72 = $71 | 8;
   $24 = $72;
  }
 }
 $73 = $12;
 $74 = ($73|0)==(1);
 L9: do {
  if ($74) {
   $75 = $7;
   $76 = ((($75)) + 4|0);
   $77 = HEAP32[$76>>2]|0;
   $78 = (__ZL9CopyFrameP7frame_ti($77,0)|0);
   $26 = $78;
   $79 = $26;
   $80 = $7;
   $81 = ((($80)) + 4|0);
   HEAP32[$81>>2] = $79;
   $82 = $7;
   HEAP16[$82>>1] = 50;
   $83 = $16;
   $84 = ($83|0)>(0);
   if ($84) {
    $85 = $16;
    $86 = $85&65535;
    $87 = $7;
    HEAP16[$87>>1] = $86;
   }
   $88 = $7;
   $89 = ((($88)) + 2|0);
   $90 = HEAP16[$89>>1]|0;
   $91 = $90 << 16 >> 16;
   $92 = $91 | 16384;
   $93 = $92&65535;
   HEAP16[$89>>1] = $93;
   $94 = $26;
   $95 = HEAP16[$94>>1]|0;
   $96 = $95 << 16 >> 16;
   $97 = $96 | 16384;
   $98 = $97&65535;
   HEAP16[$94>>1] = $98;
   $99 = $7;
   $100 = ((($99)) + 8|0);
   $101 = ((($100)) + 4|0);
   $102 = HEAP32[$101>>2]|0;
   $103 = ((($102)) + 17|0);
   $104 = HEAP8[$103>>0]|0;
   $105 = $104&255;
   $15 = $105;
   $106 = HEAP32[1124]|0;
   $107 = ((($106)) + 132|0);
   $108 = HEAP32[$107>>2]|0;
   $109 = ($108|0)!=(0);
   if ($109) {
    $110 = $7;
    $111 = ((($110)) + 8|0);
    $112 = ((($111)) + 4|0);
    $113 = HEAP32[$112>>2]|0;
    $114 = ((($113)) + 39|0);
    $115 = HEAP8[$114>>0]|0;
    $116 = $115&255;
    $117 = (($116) - 4)|0;
    $118 = $117&255;
    $119 = $26;
    $120 = ((($119)) + 39|0);
    HEAP8[$120>>0] = $118;
   }
   $121 = $19;
   $122 = ($121|0)!=(0);
   do {
    if ($122) {
     $123 = $17;
     $124 = $123 & 32;
     $125 = ($124|0)!=(0);
     if ($125) {
      $126 = $26;
      $127 = $15;
      $128 = $17;
      $129 = $128 & 31;
      $130 = Math_imul($127, $129)|0;
      $131 = (($130|0) / 30)&-1;
      __ZL13set_frame_rmsP7frame_ti($126,$131);
     }
     $132 = $26;
     $133 = $19;
     $134 = $20;
     $135 = $21;
     $136 = $18;
     $137 = $22;
     $138 = $23;
     $139 = $24;
     __ZL14AdjustFormantsP7frame_tiiiiiii($132,$133,$134,$135,$136,$137,$138,$139);
     $140 = $17;
     $141 = $140 & 32;
     $142 = ($141|0)==(0);
     if ($142) {
      $143 = $26;
      $144 = $17;
      $145 = $144<<1;
      __ZL13set_frame_rmsP7frame_ti($143,$145);
     }
    } else {
     $146 = $24;
     $147 = $146 & 8;
     $148 = ($147|0)!=(0);
     $149 = $26;
     if ($148) {
      $150 = $15;
      $151 = ($150*24)|0;
      $152 = (($151|0) / 32)&-1;
      __ZL13set_frame_rmsP7frame_ti($149,$152);
      break;
     } else {
      __ZL13set_frame_rmsP7frame_ti($149,28);
      break;
     }
    }
   } while(0);
   $153 = $24;
   $154 = $153 & 8;
   $155 = ($154|0)!=(0);
   if ($155) {
    $156 = $26;
    $157 = (__ZL14VowelClosenessP7frame_t($156)|0);
    $158 = $157 << 8;
    $159 = (2048 + ($158))|0;
    HEAP32[19130] = $159;
   }
  } else {
   $160 = $17;
   $161 = $160<<1;
   $17 = $161;
   $162 = $19;
   $163 = ($162|0)!=(0);
   $164 = $24;
   $165 = ($164|0)!=(0);
   $or$cond = $163 | $165;
   if ($or$cond) {
    $166 = $24;
    $167 = $166 & 8;
    $168 = ($167|0)!=(0);
    if ($168) {
     $169 = $8;
     $170 = HEAP32[$169>>2]|0;
     $171 = (($170) - 1)|0;
     $172 = $7;
     $173 = (($172) + ($171<<3)|0);
     $174 = ((($173)) + 4|0);
     $175 = HEAP32[$174>>2]|0;
     $176 = (__ZL9CopyFrameP7frame_ti($175,0)|0);
     $26 = $176;
     $177 = $26;
     $178 = $8;
     $179 = HEAP32[$178>>2]|0;
     $180 = (($179) - 1)|0;
     $181 = $7;
     $182 = (($181) + ($180<<3)|0);
     $183 = ((($182)) + 4|0);
     HEAP32[$183>>2] = $177;
     $17 = 35;
     $184 = $26;
     $185 = (__ZL14VowelClosenessP7frame_t($184)|0);
     $186 = $185 << 8;
     $187 = (1024 + ($186))|0;
     HEAP32[19130] = $187;
    } else {
     $188 = $7;
     $189 = $8;
     $190 = HEAP32[$189>>2]|0;
     $191 = (($190) + 1)|0;
     HEAP32[$189>>2] = $191;
     $192 = $16;
     $193 = (__ZL18DuplicateLastFrameP10frameref_tii($188,$190,$192)|0);
     $26 = $193;
     $194 = $16;
     $195 = ($194|0)>(36);
     if ($195) {
      $196 = $16;
      $197 = (($196) - 36)|0;
      $198 = HEAP32[12715]|0;
      $199 = (($198) + ($197))|0;
      HEAP32[12715] = $199;
     }
     $200 = $19;
     $201 = ($200|0)!=(0);
     if ($201) {
      $202 = $26;
      $203 = $19;
      $204 = $20;
      $205 = $21;
      $206 = $18;
      $207 = $22;
      $208 = $23;
      $209 = $24;
      __ZL14AdjustFormantsP7frame_tiiiiiii($202,$203,$204,$205,$206,$207,$208,$209);
     }
    }
    $210 = $26;
    $211 = $17;
    __ZL13set_frame_rmsP7frame_ti($210,$211);
    $212 = $25;
    $213 = ($212|0)>(0);
    $214 = $25;
    $215 = ($214|0)<=(2);
    $or$cond3 = $213 & $215;
    if ($or$cond3) {
     $13 = 0;
     while(1) {
      $216 = $13;
      $217 = $8;
      $218 = HEAP32[$217>>2]|0;
      $219 = ($216|0)<($218|0);
      if (!($219)) {
       break L9;
      }
      $220 = $13;
      $221 = $7;
      $222 = (($221) + ($220<<3)|0);
      $223 = ((($222)) + 4|0);
      $224 = HEAP32[$223>>2]|0;
      $225 = (__ZL9CopyFrameP7frame_ti($224,0)|0);
      $26 = $225;
      $226 = $26;
      $227 = $13;
      $228 = $7;
      $229 = (($228) + ($227<<3)|0);
      $230 = ((($229)) + 4|0);
      HEAP32[$230>>2] = $226;
      $14 = 1;
      while(1) {
       $231 = $14;
       $232 = ($231|0)<=(5);
       if (!($232)) {
        break;
       }
       $233 = $14;
       $234 = $26;
       $235 = ((($234)) + 2|0);
       $236 = (($235) + ($233<<1)|0);
       $237 = HEAP16[$236>>1]|0;
       $238 = $237 << 16 >> 16;
       $239 = $14;
       $240 = (($239) - 1)|0;
       $241 = $25;
       $242 = (($241) - 1)|0;
       $243 = (7468 + (($242*10)|0)|0);
       $244 = (($243) + ($240<<1)|0);
       $245 = HEAP16[$244>>1]|0;
       $246 = $245 << 16 >> 16;
       $247 = Math_imul($238, $246)|0;
       $27 = $247;
       $248 = $27;
       $249 = (($248|0) / 256)&-1;
       $250 = $249&65535;
       $251 = $14;
       $252 = $26;
       $253 = ((($252)) + 2|0);
       $254 = (($253) + ($251<<1)|0);
       HEAP16[$254>>1] = $250;
       $255 = $14;
       $256 = (($255) + 1)|0;
       $14 = $256;
      }
      $257 = $13;
      $258 = (($257) + 1)|0;
      $13 = $258;
     }
    }
   }
  }
 } while(0);
 $259 = $26;
 $260 = ($259|0)!=(0|0);
 if ($260) {
  $261 = $24;
  $262 = $261 & 4;
  $263 = ($262|0)!=(0);
  if ($263) {
   $264 = $26;
   $265 = HEAP16[$264>>1]|0;
   $266 = $265 << 16 >> 16;
   $267 = $266 | 32;
   $268 = $267&65535;
   HEAP16[$264>>1] = $268;
  }
  $269 = $24;
  $270 = $269 & 2;
  $271 = ($270|0)!=(0);
  if ($271) {
   $272 = $26;
   $273 = HEAP16[$272>>1]|0;
   $274 = $273 << 16 >> 16;
   $275 = $274 | 16;
   $276 = $275&65535;
   HEAP16[$272>>1] = $276;
  }
 }
 $277 = $24;
 $278 = $277 & 64;
 $279 = ($278|0)!=(0);
 if ($279) {
  __ZL7DoPauseii(20,0);
 }
 $280 = $24;
 $281 = $280 & 16;
 $282 = ($281|0)!=(0);
 if ($282) {
  $283 = $16;
  $6 = $283;
  $284 = $6;
  STACKTOP = sp;return ($284|0);
 } else {
  $6 = 0;
  $284 = $6;
  STACKTOP = sp;return ($284|0);
 }
 return (0)|0;
}
function __ZL13set_frame_rmsP7frame_ti($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$ = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $2 = $0;
 $3 = $1;
 $7 = HEAP32[1124]|0;
 $8 = ((($7)) + 132|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ($9|0)!=(0);
 if ($10) {
  $11 = $3;
  $12 = ($11|0)==(-1);
  if (!($12)) {
   STACKTOP = sp;return;
  }
  $13 = $2;
  $14 = ((($13)) + 39|0);
  HEAP8[$14>>0] = 50;
  STACKTOP = sp;return;
 }
 $15 = $2;
 $16 = ((($15)) + 17|0);
 $17 = HEAP8[$16>>0]|0;
 $18 = $17&255;
 $19 = ($18|0)==(0);
 if ($19) {
  STACKTOP = sp;return;
 }
 $20 = $3;
 $21 = $20<<6;
 $22 = $2;
 $23 = ((($22)) + 17|0);
 $24 = HEAP8[$23>>0]|0;
 $25 = $24&255;
 $26 = (($21|0) / ($25|0))&-1;
 $4 = $26;
 $27 = $4;
 $28 = ($27|0)>=(200);
 $$ = $28 ? 199 : $26;
 $4 = $$;
 $29 = $4;
 $30 = (7488 + ($29<<1)|0);
 $31 = HEAP16[$30>>1]|0;
 $32 = $31 << 16 >> 16;
 $4 = $32;
 $6 = 0;
 while(1) {
  $33 = $6;
  $34 = ($33|0)<(8);
  if (!($34)) {
   break;
  }
  $35 = $6;
  $36 = $2;
  $37 = ((($36)) + 18|0);
  $38 = (($37) + ($35)|0);
  $39 = HEAP8[$38>>0]|0;
  $40 = $39&255;
  $41 = $4;
  $42 = Math_imul($40, $41)|0;
  $5 = $42;
  $43 = $5;
  $44 = (($43|0) / 512)&-1;
  $45 = $44&255;
  $46 = $6;
  $47 = $2;
  $48 = ((($47)) + 18|0);
  $49 = (($48) + ($46)|0);
  HEAP8[$49>>0] = $45;
  $50 = $6;
  $51 = (($50) + 1)|0;
  $6 = $51;
 }
 STACKTOP = sp;return;
}
function __ZL14AdjustFormantsP7frame_tiiiiiii($0,$1,$2,$3,$4,$5,$6,$7) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 var $$ = 0, $$$ = 0, $$$1 = 0, $$$2 = 0, $$1 = 0, $$2 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0;
 var $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0;
 var $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0;
 var $149 = 0, $15 = 0, $150 = 0, $151 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0;
 var $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0;
 var $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $70 = 0, $71 = 0;
 var $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0;
 var $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $8 = $0;
 $9 = $1;
 $10 = $2;
 $11 = $3;
 $12 = $4;
 $13 = $5;
 $14 = $6;
 $15 = $7;
 $17 = $9;
 $18 = HEAP32[1124]|0;
 $19 = ((($18)) + 116|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = Math_imul($17, $20)|0;
 $22 = (($21|0) / 256)&-1;
 $9 = $22;
 $23 = $9;
 $24 = $8;
 $25 = ((($24)) + 2|0);
 $26 = ((($25)) + 4|0);
 $27 = HEAP16[$26>>1]|0;
 $28 = $27 << 16 >> 16;
 $29 = (($23) - ($28))|0;
 $30 = (($29|0) / 2)&-1;
 $16 = $30;
 $31 = $16;
 $32 = $11;
 $33 = ($31|0)>($32|0);
 if ($33) {
  $34 = $11;
  $16 = $34;
 }
 $35 = $16;
 $36 = $10;
 $37 = ($35|0)<($36|0);
 if ($37) {
  $38 = $10;
  $16 = $38;
 }
 $39 = $16;
 $40 = $8;
 $41 = ((($40)) + 2|0);
 $42 = ((($41)) + 4|0);
 $43 = HEAP16[$42>>1]|0;
 $44 = $43 << 16 >> 16;
 $45 = (($44) + ($39))|0;
 $46 = $45&65535;
 HEAP16[$42>>1] = $46;
 $47 = $13;
 $48 = $8;
 $49 = ((($48)) + 2|0);
 $50 = ((($49)) + 6|0);
 $51 = HEAP16[$50>>1]|0;
 $52 = $51 << 16 >> 16;
 $53 = (($52) + ($47))|0;
 $54 = $53&65535;
 HEAP16[$50>>1] = $54;
 $55 = $15;
 $56 = $55 & 32;
 $57 = ($56|0)!=(0);
 if ($57) {
  $58 = $13;
  $59 = (0 - ($58))|0;
  $13 = $59;
 }
 $60 = $13;
 $61 = $8;
 $62 = ((($61)) + 2|0);
 $63 = ((($62)) + 8|0);
 $64 = HEAP16[$63>>1]|0;
 $65 = $64 << 16 >> 16;
 $66 = (($65) + ($60))|0;
 $67 = $66&65535;
 HEAP16[$63>>1] = $67;
 $68 = $13;
 $69 = $8;
 $70 = ((($69)) + 2|0);
 $71 = ((($70)) + 10|0);
 $72 = HEAP16[$71>>1]|0;
 $73 = $72 << 16 >> 16;
 $74 = (($73) + ($68))|0;
 $75 = $74&65535;
 HEAP16[$71>>1] = $75;
 $76 = $12;
 $77 = ($76|0)==(1);
 if ($77) {
  $78 = $8;
  $79 = ((($78)) + 2|0);
  $80 = ((($79)) + 2|0);
  $81 = HEAP16[$80>>1]|0;
  $82 = $81 << 16 >> 16;
  $83 = (235 - ($82))|0;
  $16 = $83;
  $84 = $16;
  $85 = ($84|0)<(-100);
  $$ = $85 ? -100 : $83;
  $16 = $$;
  $86 = $16;
  $87 = ($86|0)>(-60);
  $$$ = $87 ? -60 : $$;
  $16 = $$$;
  $88 = $16;
  $89 = $8;
  $90 = ((($89)) + 2|0);
  $91 = ((($90)) + 2|0);
  $92 = HEAP16[$91>>1]|0;
  $93 = $92 << 16 >> 16;
  $94 = (($93) + ($88))|0;
  $95 = $94&65535;
  HEAP16[$91>>1] = $95;
 }
 $96 = $12;
 $97 = ($96|0)==(2);
 if ($97) {
  $98 = $8;
  $99 = ((($98)) + 2|0);
  $100 = ((($99)) + 2|0);
  $101 = HEAP16[$100>>1]|0;
  $102 = $101 << 16 >> 16;
  $103 = (235 - ($102))|0;
  $16 = $103;
  $104 = $16;
  $105 = ($104|0)<(-300);
  $$1 = $105 ? -300 : $103;
  $16 = $$1;
  $106 = $16;
  $107 = ($106|0)>(-150);
  $$$1 = $107 ? -150 : $$1;
  $16 = $$$1;
  $108 = $16;
  $109 = $8;
  $110 = ((($109)) + 2|0);
  $111 = ((($110)) + 2|0);
  $112 = HEAP16[$111>>1]|0;
  $113 = $112 << 16 >> 16;
  $114 = (($113) + ($108))|0;
  $115 = $114&65535;
  HEAP16[$111>>1] = $115;
  $116 = $16;
  $117 = $8;
  $118 = ((($117)) + 2|0);
  $119 = HEAP16[$118>>1]|0;
  $120 = $119 << 16 >> 16;
  $121 = (($120) + ($116))|0;
  $122 = $121&65535;
  HEAP16[$118>>1] = $122;
 }
 $123 = $12;
 $124 = ($123|0)==(3);
 if (!($124)) {
  $150 = $8;
  $151 = $14;
  __ZL18formants_reduce_hfP7frame_ti($150,$151);
  STACKTOP = sp;return;
 }
 $125 = $8;
 $126 = ((($125)) + 2|0);
 $127 = ((($126)) + 2|0);
 $128 = HEAP16[$127>>1]|0;
 $129 = $128 << 16 >> 16;
 $130 = (100 - ($129))|0;
 $16 = $130;
 $131 = $16;
 $132 = ($131|0)<(-400);
 $$2 = $132 ? -400 : $130;
 $16 = $$2;
 $133 = $16;
 $134 = ($133|0)>(-300);
 $$$2 = $134 ? -400 : $$2;
 $16 = $$$2;
 $135 = $16;
 $136 = $8;
 $137 = ((($136)) + 2|0);
 $138 = ((($137)) + 2|0);
 $139 = HEAP16[$138>>1]|0;
 $140 = $139 << 16 >> 16;
 $141 = (($140) + ($135))|0;
 $142 = $141&65535;
 HEAP16[$138>>1] = $142;
 $143 = $16;
 $144 = $8;
 $145 = ((($144)) + 2|0);
 $146 = HEAP16[$145>>1]|0;
 $147 = $146 << 16 >> 16;
 $148 = (($147) + ($143))|0;
 $149 = $148&65535;
 HEAP16[$145>>1] = $149;
 $150 = $8;
 $151 = $14;
 __ZL18formants_reduce_hfP7frame_ti($150,$151);
 STACKTOP = sp;return;
}
function __ZL14VowelClosenessP7frame_t($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $4 = $2;
 $5 = ((($4)) + 2|0);
 $6 = ((($5)) + 2|0);
 $7 = HEAP16[$6>>1]|0;
 $8 = $7 << 16 >> 16;
 $3 = $8;
 $9 = ($8|0)<(300);
 do {
  if ($9) {
   $1 = 3;
  } else {
   $10 = $3;
   $11 = ($10|0)<(400);
   if ($11) {
    $1 = 2;
    break;
   }
   $12 = $3;
   $13 = ($12|0)<(500);
   if ($13) {
    $1 = 1;
    break;
   } else {
    $1 = 0;
    break;
   }
  }
 } while(0);
 $14 = $1;
 STACKTOP = sp;return ($14|0);
}
function __ZL18DuplicateLastFrameP10frameref_tii($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $7 = $5;
 $8 = $7&65535;
 $9 = $4;
 $10 = (($9) - 1)|0;
 $11 = $3;
 $12 = (($11) + ($10<<3)|0);
 HEAP16[$12>>1] = $8;
 $13 = $4;
 $14 = (($13) - 1)|0;
 $15 = $3;
 $16 = (($15) + ($14<<3)|0);
 $17 = ((($16)) + 4|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = (__ZL9CopyFrameP7frame_ti($18,1)|0);
 $6 = $19;
 $20 = $6;
 $21 = $4;
 $22 = $3;
 $23 = (($22) + ($21<<3)|0);
 $24 = ((($23)) + 4|0);
 HEAP32[$24>>2] = $20;
 $25 = $4;
 $26 = $3;
 $27 = (($26) + ($25<<3)|0);
 HEAP16[$27>>1] = 0;
 $28 = $6;
 STACKTOP = sp;return ($28|0);
}
function __ZL7DoPauseii($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $6 = $2;
 $7 = ($6|0)==(0);
 do {
  if ($7) {
   $4 = 0;
  } else {
   $8 = $2;
   $9 = $3;
   $10 = (__Z11PauseLengthii($8,$9)|0);
   $4 = $10;
   $11 = $4;
   $12 = ($11>>>0)<(90000);
   if ($12) {
    $13 = $4;
    $14 = HEAP32[20211]|0;
    $15 = Math_imul($13, $14)|0;
    $16 = (($15>>>0) / 1000)&-1;
    $4 = $16;
    break;
   } else {
    $17 = HEAP32[20211]|0;
    $18 = (($17|0) / 25)&-1;
    $5 = $18;
    $19 = $4;
    $20 = $5;
    $21 = Math_imul($19, $20)|0;
    $22 = (($21>>>0) / 40)&-1;
    $4 = $22;
    break;
   }
  }
 } while(0);
 __ZL8EndPitchi(1);
 $23 = HEAP32[20917]|0;
 $24 = (80944 + ($23<<4)|0);
 HEAP32[$24>>2] = 5;
 $25 = $4;
 $26 = HEAP32[20917]|0;
 $27 = (80944 + ($26<<4)|0);
 $28 = ((($27)) + 4|0);
 HEAP32[$28>>2] = $25;
 __Z8WcmdqIncv();
 HEAP32[19117] = 0;
 $29 = HEAP32[19131]|0;
 $30 = ($29|0)!=(0);
 if (!($30)) {
  STACKTOP = sp;return;
 }
 $31 = HEAP32[20917]|0;
 $32 = (80944 + ($31<<4)|0);
 HEAP32[$32>>2] = 14;
 HEAP32[19131] = 0;
 $33 = HEAP32[20917]|0;
 $34 = (80944 + ($33<<4)|0);
 $35 = ((($34)) + 4|0);
 HEAP32[$35>>2] = 0;
 __Z8WcmdqIncv();
 STACKTOP = sp;return;
}
function __ZL18formants_reduce_hfP7frame_ti($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $6 = HEAP32[1124]|0;
 $7 = ((($6)) + 132|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ($8|0)!=(0);
 if ($9) {
  STACKTOP = sp;return;
 }
 $4 = 2;
 while(1) {
  $10 = $4;
  $11 = ($10|0)<(8);
  if (!($11)) {
   break;
  }
  $12 = $4;
  $13 = $2;
  $14 = ((($13)) + 18|0);
  $15 = (($14) + ($12)|0);
  $16 = HEAP8[$15>>0]|0;
  $17 = $16&255;
  $18 = $3;
  $19 = Math_imul($17, $18)|0;
  $5 = $19;
  $20 = $5;
  $21 = (($20|0) / 100)&-1;
  $22 = $21&255;
  $23 = $4;
  $24 = $2;
  $25 = ((($24)) + 18|0);
  $26 = (($25) + ($23)|0);
  HEAP8[$26>>0] = $22;
  $27 = $4;
  $28 = (($27) + 1)|0;
  $4 = $28;
 }
 STACKTOP = sp;return;
}
function __Z8DoSpect2P11PHONEME_TABiP10FMT_PARAMSP12PHONEME_LISTi($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$ = 0, $$1 = 0, $$2 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0;
 var $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0;
 var $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0;
 var $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0;
 var $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0;
 var $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0;
 var $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0;
 var $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0;
 var $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0;
 var $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0;
 var $99 = 0, $or$cond = 0, $or$cond5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 192|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(192|0);
 $11 = sp + 160|0;
 $27 = sp;
 $6 = $0;
 $7 = $1;
 $8 = $2;
 $9 = $3;
 $10 = $4;
 $25 = 0;
 $26 = 3;
 $28 = $8;
 $29 = ((($28)) + 8|0);
 $30 = HEAP32[$29>>2]|0;
 $31 = ($30|0)==(0);
 if ($31) {
  $5 = 0;
  $382 = $5;
  STACKTOP = sp;return ($382|0);
 }
 $32 = $9;
 $33 = ((($32)) + 12|0);
 $34 = HEAP32[$33>>2]|0;
 $22 = $34;
 $35 = $22;
 $36 = ($35|0)==(0);
 $$ = $36 ? 256 : $34;
 $22 = $$;
 $37 = HEAP32[20211]|0;
 $38 = (($37|0) / 70)&-1;
 $24 = $38;
 $39 = $7;
 $40 = ($39|0)==(2);
 do {
  if ($40) {
   $41 = HEAP32[19149]|0;
   $42 = ((($41)) + 24|0);
   $43 = ((($42)) + 72|0);
   $44 = HEAP32[$43>>2]|0;
   $45 = ($44|0)>(0);
   if ($45) {
    $46 = $6;
    $47 = ((($46)) + 14|0);
    $48 = HEAP8[$47>>0]|0;
    $49 = $48&255;
    $50 = HEAP32[19149]|0;
    $51 = ((($50)) + 24|0);
    $52 = ((($51)) + 72|0);
    $53 = HEAP32[$52>>2]|0;
    $54 = ($49|0)>=($53|0);
    if (!($54)) {
     $55 = $9;
     $56 = HEAP16[$55>>1]|0;
     $57 = $56&65535;
     $58 = $57 & 8;
     $59 = ($58|0)!=(0);
     if (!($59)) {
      $60 = $6;
      $61 = ((($60)) + 4|0);
      $62 = HEAP32[$61>>2]|0;
      $63 = $62 & 2097152;
      $64 = ($63|0)!=(0);
      if (!($64)) {
       break;
      }
     }
    }
    $65 = $24;
    $66 = $65<<1;
    $24 = $66;
   }
  }
 } while(0);
 $67 = $7;
 $68 = ($67|0)==(1);
 do {
  if ($68) {
   $69 = $6;
   $70 = ((($69)) + 11|0);
   $71 = HEAP8[$70>>0]|0;
   $72 = $71&255;
   $73 = ($72|0)==(3);
   if (!($73)) {
    $74 = $9;
    $75 = ((($74)) + -24|0);
    $76 = ((($75)) + 17|0);
    $77 = HEAP8[$76>>0]|0;
    $78 = $77&255;
    $79 = ($78|0)==(3);
    if (!($79)) {
     $80 = $9;
     $81 = ((($80)) + -24|0);
     $82 = ((($81)) + 17|0);
     $83 = HEAP8[$82>>0]|0;
     $84 = $83&255;
     $85 = ($84|0)==(8);
     if (!($85)) {
      break;
     }
    }
   }
   $86 = $22;
   $87 = HEAP32[19149]|0;
   $88 = ((($87)) + 24|0);
   $89 = ((($88)) + 28|0);
   $90 = HEAP32[$89>>2]|0;
   $19 = $90;
   $91 = ($86|0)<($90|0);
   if ($91) {
    $92 = $19;
    $22 = $92;
   }
  }
 } while(0);
 HEAP32[19130] = 0;
 $93 = $6;
 $94 = $7;
 $95 = $8;
 $96 = $9;
 $97 = (__Z11LookupSpectP11PHONEME_TABiP10FMT_PARAMSPiP12PHONEME_LIST($93,$94,$95,$11,$96)|0);
 $12 = $97;
 $98 = $12;
 $99 = ($98|0)==(0|0);
 if ($99) {
  $5 = 0;
  $382 = $5;
  STACKTOP = sp;return ($382|0);
 }
 $100 = $8;
 $101 = ((($100)) + 16|0);
 $102 = HEAP32[$101>>2]|0;
 $103 = HEAP32[19131]|0;
 $104 = ($102|0)!=($103|0);
 if ($104) {
  $105 = HEAP32[20917]|0;
  $106 = (80944 + ($105<<4)|0);
  $18 = $106;
  $107 = $18;
  HEAP32[$107>>2] = 14;
  $108 = $8;
  $109 = ((($108)) + 16|0);
  $110 = HEAP32[$109>>2]|0;
  HEAP32[19131] = $110;
  $111 = $18;
  $112 = ((($111)) + 4|0);
  HEAP32[$112>>2] = $110;
  __Z8WcmdqIncv();
 }
 $113 = $12;
 $114 = ((($113)) + 4|0);
 $115 = HEAP32[$114>>2]|0;
 $14 = $115;
 $116 = HEAP32[1124]|0;
 $117 = ((($116)) + 132|0);
 $118 = HEAP32[$117>>2]|0;
 $119 = ($118|0)!=(0);
 if ($119) {
  $26 = 1;
 }
 $120 = $8;
 $121 = ((($120)) + 28|0);
 $122 = HEAP32[$121>>2]|0;
 HEAP32[12713] = $122;
 $123 = $8;
 $124 = ((($123)) + 32|0);
 $125 = HEAP32[$124>>2]|0;
 $126 = ($125|0)==(0);
 if ($126) {
  HEAP32[12714] = 32;
 } else {
  $127 = $8;
  $128 = ((($127)) + 32|0);
  $129 = HEAP32[$128>>2]|0;
  $130 = $129<<5;
  $131 = (($130|0) / 100)&-1;
  HEAP32[12714] = $131;
 }
 $132 = HEAP32[12713]|0;
 $133 = ($132|0)==(0);
 do {
  if ($133) {
   $134 = HEAP32[19132]|0;
   $135 = ($134|0)!=(0);
   if ($135) {
    $26 = 4;
    $136 = HEAP32[1124]|0;
    $137 = ((($136)) + 132|0);
    $138 = HEAP32[$137>>2]|0;
    $139 = ($138|0)!=(0);
    $$1 = $139 ? 2 : 4;
    $26 = $$1;
    HEAP32[19132] = 0;
    break;
   } else {
    $26 = 3;
    $140 = HEAP32[1124]|0;
    $141 = ((($140)) + 132|0);
    $142 = HEAP32[$141>>2]|0;
    $143 = ($142|0)!=(0);
    $$2 = $143 ? 1 : 3;
    $26 = $$2;
    break;
   }
  }
 } while(0);
 $144 = HEAP32[19117]|0;
 $145 = ($144|0)!=(0|0);
 do {
  if ($145) {
   $146 = HEAP32[19117]|0;
   $147 = ((($146)) + 16|0);
   $148 = HEAP8[$147>>0]|0;
   $149 = $148&255;
   $150 = ($149|0)<(2);
   if (!($150)) {
    $151 = HEAP32[19117]|0;
    $152 = HEAP16[$151>>1]|0;
    $153 = $152 << 16 >> 16;
    $154 = $153 & 2;
    $155 = ($154|0)!=(0);
    if (!($155)) {
     break;
    }
   }
   $156 = HEAP32[19117]|0;
   $157 = HEAP16[$156>>1]|0;
   $158 = $157 << 16 >> 16;
   $159 = $158 & 16;
   $160 = ($159|0)!=(0);
   if (!($160)) {
    $161 = $14;
    $162 = $161;
    $163 = HEAP32[19125]|0;
    $164 = (80944 + ($163<<4)|0);
    $165 = ((($164)) + 12|0);
    HEAP32[$165>>2] = $162;
    $166 = HEAP32[19117]|0;
    $167 = HEAP16[$166>>1]|0;
    $168 = $167 << 16 >> 16;
    $169 = $168 & 8;
    $170 = ($169|0)!=(0);
    if ($170) {
     $171 = $14;
     $172 = (__ZL9CopyFrameP7frame_ti($171,1)|0);
     $16 = $172;
     $17 = 3;
     while(1) {
      $173 = $17;
      $174 = ($173|0)<(8);
      if (!($174)) {
       break;
      }
      $175 = $17;
      $176 = ($175|0)<(7);
      if ($176) {
       $177 = $17;
       $178 = HEAP32[19117]|0;
       $179 = ((($178)) + 2|0);
       $180 = (($179) + ($177<<1)|0);
       $181 = HEAP16[$180>>1]|0;
       $182 = $17;
       $183 = $16;
       $184 = ((($183)) + 2|0);
       $185 = (($184) + ($182<<1)|0);
       HEAP16[$185>>1] = $181;
      }
      $186 = $17;
      $187 = HEAP32[19117]|0;
      $188 = ((($187)) + 18|0);
      $189 = (($188) + ($186)|0);
      $190 = HEAP8[$189>>0]|0;
      $191 = $17;
      $192 = $16;
      $193 = ((($192)) + 18|0);
      $194 = (($193) + ($191)|0);
      HEAP8[$194>>0] = $190;
      $195 = $17;
      $196 = (($195) + 1)|0;
      $17 = $196;
     }
     $197 = $16;
     $198 = $197;
     $199 = HEAP32[19125]|0;
     $200 = (80944 + ($199<<4)|0);
     $201 = ((($200)) + 12|0);
     HEAP32[$201>>2] = $198;
    }
   }
  }
 } while(0);
 $202 = $6;
 $203 = ((($202)) + 11|0);
 $204 = HEAP8[$203>>0]|0;
 $205 = $204&255;
 $206 = ($205|0)==(2);
 $207 = $7;
 $208 = ($207|0)==(2);
 $or$cond = $206 & $208;
 if ($or$cond) {
  __ZL11SmoothSpectv();
  $209 = HEAP32[20917]|0;
  HEAP32[19118] = $209;
 }
 $23 = 0;
 $13 = 1;
 while(1) {
  $210 = $13;
  $211 = HEAP32[$11>>2]|0;
  $212 = ($210|0)<($211|0);
  if (!($212)) {
   break;
  }
  $213 = $22;
  $21 = $213;
  $214 = $13;
  $215 = (($214) - 1)|0;
  $216 = $12;
  $217 = (($216) + ($215<<3)|0);
  $218 = ((($217)) + 2|0);
  $219 = HEAP16[$218>>1]|0;
  $220 = $219 << 16 >> 16;
  $221 = $220 & 4;
  $222 = ($221|0)!=(0);
  if ($222) {
   $223 = $22;
   $224 = HEAP32[(75132)>>2]|0;
   $225 = (256 - ($224))|0;
   $226 = Math_imul($223, $225)|0;
   $227 = HEAP32[(75132)>>2]|0;
   $228 = $227<<8;
   $229 = (($226) + ($228))|0;
   $230 = (($229|0) / 256)&-1;
   $21 = $230;
  } else {
   $231 = $13;
   $232 = (($231) - 1)|0;
   $233 = $12;
   $234 = (($233) + ($232<<3)|0);
   $235 = ((($234)) + 2|0);
   $236 = HEAP16[$235>>1]|0;
   $237 = $236 << 16 >> 16;
   $238 = $237 & 16384;
   $239 = ($238|0)!=(0);
   if ($239) {
    $240 = $22;
    $241 = HEAP32[(75136)>>2]|0;
    $242 = (256 - ($241))|0;
    $243 = Math_imul($240, $242)|0;
    $244 = HEAP32[(75136)>>2]|0;
    $245 = $244<<8;
    $246 = (($243) + ($245))|0;
    $247 = (($246|0) / 256)&-1;
    $21 = $247;
   }
  }
  $248 = $13;
  $249 = (($248) - 1)|0;
  $250 = $12;
  $251 = (($250) + ($249<<3)|0);
  $252 = HEAP16[$251>>1]|0;
  $253 = $252 << 16 >> 16;
  $20 = $253;
  $254 = $20;
  $255 = HEAP32[20211]|0;
  $256 = Math_imul($254, $255)|0;
  $257 = (($256|0) / 1000)&-1;
  $19 = $257;
  $258 = $19;
  $259 = $21;
  $260 = Math_imul($258, $259)|0;
  $261 = (($260|0) / 256)&-1;
  $19 = $261;
  $262 = $19;
  $263 = $23;
  $264 = (($263) + ($262))|0;
  $23 = $264;
  $265 = $19;
  $266 = $13;
  $267 = (($27) + ($266<<2)|0);
  HEAP32[$267>>2] = $265;
  $268 = $13;
  $269 = (($268) + 1)|0;
  $13 = $269;
 }
 $270 = $23;
 $271 = ($270|0)>(0);
 L68: do {
  if ($271) {
   $272 = $23;
   $273 = $24;
   $274 = ($272|0)<($273|0);
   if ($274) {
    $13 = 1;
    while(1) {
     $275 = $13;
     $276 = HEAP32[$11>>2]|0;
     $277 = ($275|0)<($276|0);
     if (!($277)) {
      break L68;
     }
     $278 = $13;
     $279 = (($27) + ($278<<2)|0);
     $280 = HEAP32[$279>>2]|0;
     $281 = $24;
     $282 = Math_imul($280, $281)|0;
     $283 = $23;
     $284 = (($282|0) / ($283|0))&-1;
     $285 = $13;
     $286 = (($27) + ($285<<2)|0);
     HEAP32[$286>>2] = $284;
     $287 = $13;
     $288 = (($287) + 1)|0;
     $13 = $288;
    }
   }
  }
 } while(0);
 $13 = 1;
 while(1) {
  $289 = $13;
  $290 = HEAP32[$11>>2]|0;
  $291 = ($289|0)<($290|0);
  if (!($291)) {
   break;
  }
  $292 = $13;
  $293 = $12;
  $294 = (($293) + ($292<<3)|0);
  $295 = ((($294)) + 4|0);
  $296 = HEAP32[$295>>2]|0;
  $15 = $296;
  $297 = $8;
  $298 = ((($297)) + 28|0);
  $299 = HEAP32[$298>>2]|0;
  $300 = ($299|0)!=(0);
  if ($300) {
   $301 = $14;
   $302 = HEAP16[$301>>1]|0;
   $303 = $302 << 16 >> 16;
   $304 = $303 & 128;
   $305 = ($304|0)==(0);
   if ($305) {
    HEAP32[12715] = 0;
    $306 = $8;
    $307 = ((($306)) + 28|0);
    $308 = HEAP32[$307>>2]|0;
    $309 = $7;
    $310 = (($309) + 256)|0;
    $311 = $8;
    $312 = HEAP32[$311>>2]|0;
    $313 = HEAP32[12714]|0;
    (__ZL9DoSample2iiiiii($308,$310,0,$312,0,$313)|0);
    HEAP32[19132] = 1;
    HEAP32[12713] = 0;
    $314 = $8;
    $315 = ((($314)) + 28|0);
    HEAP32[$315>>2] = 0;
   }
  }
  $316 = $10;
  $317 = ($316|0)>=(0);
  if ($317) {
   $318 = $14;
   $319 = HEAP16[$318>>1]|0;
   $320 = $319 << 16 >> 16;
   $321 = $320 & 64;
   $322 = ($321|0)!=(0);
   if ($322) {
    $10 = 6;
   }
   $323 = $13;
   $324 = HEAP32[$11>>2]|0;
   $325 = (($324) - 1)|0;
   $326 = ($323|0)==($325|0);
   if ($326) {
    $327 = HEAP32[19130]|0;
    $328 = $327 & 3840;
    $329 = ($328|0)!=(0);
    if ($329) {
     $330 = HEAP32[19130]|0;
     $331 = $10;
     $332 = $331 | $330;
     $10 = $332;
    }
   }
  }
  $333 = $13;
  $334 = (($27) + ($333<<2)|0);
  $335 = HEAP32[$334>>2]|0;
  $19 = $335;
  $336 = $19;
  $337 = HEAP32[19126]|0;
  $338 = (($337) + ($336))|0;
  HEAP32[19126] = $338;
  $339 = $19;
  $340 = HEAP32[19133]|0;
  $341 = (($340) + ($339))|0;
  HEAP32[19133] = $341;
  $342 = $19;
  $343 = ($342|0)==(0);
  if ($343) {
   HEAP32[19117] = 0;
   $344 = $15;
   $14 = $344;
  } else {
   $345 = HEAP32[20917]|0;
   HEAP32[19125] = $345;
   $346 = $10;
   $347 = ($346|0)>=(0);
   if ($347) {
    $348 = HEAP32[20917]|0;
    $349 = (80944 + ($348<<4)|0);
    $18 = $349;
    $350 = $26;
    $351 = $18;
    HEAP32[$351>>2] = $350;
    $352 = $19;
    $353 = $10;
    $354 = $353 << 16;
    $355 = (($352) + ($354))|0;
    $356 = $18;
    $357 = ((($356)) + 4|0);
    HEAP32[$357>>2] = $355;
    $358 = $14;
    $359 = $358;
    $360 = $18;
    $361 = ((($360)) + 8|0);
    HEAP32[$361>>2] = $359;
    $362 = $15;
    $363 = $362;
    $364 = $18;
    $365 = ((($364)) + 12|0);
    HEAP32[$365>>2] = $363;
    __Z8WcmdqIncv();
   }
   $366 = $15;
   $14 = $366;
   HEAP32[19117] = $366;
   $367 = $19;
   $368 = $25;
   $369 = (($368) + ($367))|0;
   $25 = $369;
  }
  $370 = $13;
  $371 = (($370) + 1)|0;
  $13 = $371;
 }
 $372 = $7;
 $373 = ($372|0)!=(1);
 $374 = HEAP32[19131]|0;
 $375 = ($374|0)!=(0);
 $or$cond5 = $373 & $375;
 if ($or$cond5) {
  $376 = HEAP32[20917]|0;
  $377 = (80944 + ($376<<4)|0);
  $18 = $377;
  $378 = $18;
  HEAP32[$378>>2] = 14;
  HEAP32[19131] = 0;
  $379 = $18;
  $380 = ((($379)) + 4|0);
  HEAP32[$380>>2] = 0;
  __Z8WcmdqIncv();
 }
 $381 = $25;
 $5 = $381;
 $382 = $5;
 STACKTOP = sp;return ($382|0);
}
function __Z8DoMarkeriiii($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $3;
 $8 = (__Z9WcmdqFreev()|0);
 $9 = ($8|0)>(5);
 if (!($9)) {
  STACKTOP = sp;return;
 }
 $10 = $4;
 $11 = $10 << 8;
 $12 = (10 + ($11))|0;
 $13 = HEAP32[20917]|0;
 $14 = (80944 + ($13<<4)|0);
 HEAP32[$14>>2] = $12;
 $15 = $5;
 $16 = $15 & 16777215;
 $17 = $6;
 $18 = $17 << 24;
 $19 = $16 | $18;
 $20 = HEAP32[20917]|0;
 $21 = (80944 + ($20<<4)|0);
 $22 = ((($21)) + 4|0);
 HEAP32[$22>>2] = $19;
 $23 = $7;
 $24 = HEAP32[20917]|0;
 $25 = (80944 + ($24<<4)|0);
 $26 = ((($25)) + 8|0);
 HEAP32[$26>>2] = $23;
 __Z8WcmdqIncv();
 STACKTOP = sp;return;
}
function __Z15DoPhonemeMarkeriiiPc($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $3;
 $9 = (__Z9WcmdqFreev()|0);
 $10 = ($9|0)>(5);
 if (!($10)) {
  STACKTOP = sp;return;
 }
 $11 = $4;
 $12 = $11 << 8;
 $13 = (10 + ($12))|0;
 $14 = HEAP32[20917]|0;
 $15 = (80944 + ($14<<4)|0);
 HEAP32[$15>>2] = $13;
 $16 = $5;
 $17 = $16 & 16777215;
 $18 = $6;
 $19 = $18 << 24;
 $20 = $17 | $19;
 $21 = HEAP32[20917]|0;
 $22 = (80944 + ($21<<4)|0);
 $23 = ((($22)) + 4|0);
 HEAP32[$23>>2] = $20;
 $24 = $7;
 $8 = $24;
 $25 = $8;
 $26 = HEAP32[$25>>2]|0;
 $27 = HEAP32[20917]|0;
 $28 = (80944 + ($27<<4)|0);
 $29 = ((($28)) + 8|0);
 HEAP32[$29>>2] = $26;
 $30 = $8;
 $31 = ((($30)) + 4|0);
 $32 = HEAP32[$31>>2]|0;
 $33 = HEAP32[20917]|0;
 $34 = (80944 + ($33<<4)|0);
 $35 = ((($34)) + 12|0);
 HEAP32[$35>>2] = $32;
 __Z8WcmdqIncv();
 STACKTOP = sp;return;
}
function __Z12DoSonicSpeedi($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = HEAP32[20917]|0;
 $3 = (80944 + ($2<<4)|0);
 HEAP32[$3>>2] = 15;
 $4 = $1;
 $5 = HEAP32[20917]|0;
 $6 = (80944 + ($5<<4)|0);
 $7 = ((($6)) + 4|0);
 HEAP32[$7>>2] = $4;
 __Z8WcmdqIncv();
 STACKTOP = sp;return;
}
function __Z13DoVoiceChangeP7voice_t($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $3 = (_malloc(1364)|0);
 $2 = $3;
 $4 = $2;
 $5 = $1;
 _memcpy(($4|0),($5|0),1364)|0;
 $6 = HEAP32[20917]|0;
 $7 = (80944 + ($6<<4)|0);
 HEAP32[$7>>2] = 11;
 $8 = $2;
 $9 = $8;
 $10 = HEAP32[20917]|0;
 $11 = (80944 + ($10<<4)|0);
 $12 = ((($11)) + 8|0);
 HEAP32[$12>>2] = $9;
 __Z8WcmdqIncv();
 STACKTOP = sp;return;
}
function __Z10DoEmbeddedPii($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $2 = $0;
 $3 = $1;
 while(1) {
  $7 = $2;
  $8 = HEAP32[$7>>2]|0;
  $9 = (76960 + ($8<<2)|0);
  $10 = HEAP32[$9>>2]|0;
  $4 = $10;
  $11 = $4;
  $12 = $11 >>> 8;
  $5 = $12;
  $13 = $4;
  $14 = $13 & 127;
  $6 = $14;
  $15 = $6;
  $16 = ($15|0)==(0);
  if ($16) {
   label = 12;
   break;
  }
  $17 = $2;
  $18 = HEAP32[$17>>2]|0;
  $19 = (($18) + 1)|0;
  HEAP32[$17>>2] = $19;
  $20 = $6;
  $21 = $20 & 31;
  switch ($21|0) {
  case 2:  {
   $22 = $6;
   $23 = $22 & 96;
   $24 = (($23) + 8)|0;
   $25 = $5;
   __Z11SetEmbeddedii($24,$25);
   __Z8SetSpeedi(2);
   break;
  }
  case 7:  {
   $26 = $5;
   $27 = HEAP32[734]|0;
   $28 = ($26|0)<($27|0);
   if ($28) {
    $29 = $5;
    $30 = (75180 + ($29<<4)|0);
    $31 = ((($30)) + 4|0);
    $32 = HEAP32[$31>>2]|0;
    $33 = ($32|0)!=(0);
    if ($33) {
     __ZL7DoPauseii(10,0);
     $34 = HEAP32[20917]|0;
     $35 = (80944 + ($34<<4)|0);
     HEAP32[$35>>2] = 6;
     $36 = $5;
     $37 = (75180 + ($36<<4)|0);
     $38 = ((($37)) + 4|0);
     $39 = HEAP32[$38>>2]|0;
     $40 = HEAP32[20917]|0;
     $41 = (80944 + ($40<<4)|0);
     $42 = ((($41)) + 4|0);
     HEAP32[$42>>2] = $39;
     $43 = $5;
     $44 = (75180 + ($43<<4)|0);
     $45 = ((($44)) + 8|0);
     $46 = HEAP32[$45>>2]|0;
     $47 = $46;
     $48 = (($47) + 44)|0;
     $49 = HEAP32[20917]|0;
     $50 = (80944 + ($49<<4)|0);
     $51 = ((($50)) + 8|0);
     HEAP32[$51>>2] = $48;
     $52 = HEAP32[20917]|0;
     $53 = (80944 + ($52<<4)|0);
     $54 = ((($53)) + 12|0);
     HEAP32[$54>>2] = 5376;
     __Z8WcmdqIncv();
    }
   }
   break;
  }
  case 10:  {
   $55 = $3;
   $56 = $55 & 2047;
   $57 = HEAP32[19172]|0;
   $58 = (($56) + ($57))|0;
   $59 = $5;
   __Z8DoMarkeriiii(3,$58,0,$59);
   break;
  }
  case 11:  {
   $60 = HEAP32[10481]|0;
   $61 = (($60) + 1)|0;
   $62 = $5;
   __Z8DoMarkeriiii(4,$61,0,$62);
   break;
  }
  default: {
   __ZL7DoPauseii(10,0);
   $63 = HEAP32[20917]|0;
   $64 = (80944 + ($63<<4)|0);
   HEAP32[$64>>2] = 12;
   $65 = $6;
   $66 = HEAP32[20917]|0;
   $67 = (80944 + ($66<<4)|0);
   $68 = ((($67)) + 4|0);
   HEAP32[$68>>2] = $65;
   $69 = $5;
   $70 = HEAP32[20917]|0;
   $71 = (80944 + ($70<<4)|0);
   $72 = ((($71)) + 8|0);
   HEAP32[$72>>2] = $69;
   __Z8WcmdqIncv();
  }
  }
  $73 = $4;
  $74 = $73 & 128;
  $75 = ($74|0)==(0);
  if (!($75)) {
   label = 12;
   break;
  }
 }
 if ((label|0) == 12) {
  STACKTOP = sp;return;
 }
}
function __Z8GenerateP12PHONEME_LISTPii($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$ = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0;
 var $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0;
 var $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0;
 var $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0;
 var $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0;
 var $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0;
 var $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0;
 var $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0;
 var $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0;
 var $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0;
 var $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0;
 var $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0;
 var $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0;
 var $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0;
 var $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0;
 var $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0;
 var $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0;
 var $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0;
 var $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0;
 var $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0;
 var $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0;
 var $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0;
 var $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0;
 var $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0;
 var $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0;
 var $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0;
 var $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0;
 var $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0;
 var $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0;
 var $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0;
 var $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0;
 var $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0;
 var $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0;
 var $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0;
 var $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0;
 var $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0;
 var $749 = 0, $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0, $765 = 0, $766 = 0;
 var $767 = 0, $768 = 0, $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0, $783 = 0, $784 = 0;
 var $785 = 0, $786 = 0, $787 = 0, $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0, $799 = 0, $8 = 0, $80 = 0, $800 = 0, $801 = 0;
 var $802 = 0, $803 = 0, $804 = 0, $805 = 0, $806 = 0, $807 = 0, $808 = 0, $809 = 0, $81 = 0, $810 = 0, $811 = 0, $812 = 0, $813 = 0, $814 = 0, $815 = 0, $816 = 0, $817 = 0, $818 = 0, $819 = 0, $82 = 0;
 var $820 = 0, $821 = 0, $822 = 0, $823 = 0, $824 = 0, $825 = 0, $826 = 0, $827 = 0, $828 = 0, $829 = 0, $83 = 0, $830 = 0, $831 = 0, $832 = 0, $833 = 0, $834 = 0, $835 = 0, $836 = 0, $837 = 0, $838 = 0;
 var $839 = 0, $84 = 0, $840 = 0, $841 = 0, $842 = 0, $843 = 0, $844 = 0, $845 = 0, $846 = 0, $847 = 0, $848 = 0, $849 = 0, $85 = 0, $850 = 0, $851 = 0, $852 = 0, $853 = 0, $854 = 0, $855 = 0, $856 = 0;
 var $857 = 0, $858 = 0, $859 = 0, $86 = 0, $860 = 0, $861 = 0, $862 = 0, $863 = 0, $864 = 0, $865 = 0, $866 = 0, $867 = 0, $868 = 0, $869 = 0, $87 = 0, $870 = 0, $871 = 0, $872 = 0, $873 = 0, $874 = 0;
 var $875 = 0, $876 = 0, $877 = 0, $878 = 0, $879 = 0, $88 = 0, $880 = 0, $881 = 0, $882 = 0, $883 = 0, $884 = 0, $885 = 0, $886 = 0, $887 = 0, $888 = 0, $889 = 0, $89 = 0, $890 = 0, $891 = 0, $892 = 0;
 var $893 = 0, $894 = 0, $895 = 0, $896 = 0, $897 = 0, $898 = 0, $899 = 0, $9 = 0, $90 = 0, $900 = 0, $901 = 0, $902 = 0, $903 = 0, $904 = 0, $905 = 0, $906 = 0, $907 = 0, $908 = 0, $909 = 0, $91 = 0;
 var $910 = 0, $911 = 0, $912 = 0, $913 = 0, $914 = 0, $915 = 0, $916 = 0, $917 = 0, $918 = 0, $919 = 0, $92 = 0, $920 = 0, $921 = 0, $922 = 0, $923 = 0, $924 = 0, $925 = 0, $926 = 0, $927 = 0, $928 = 0;
 var $929 = 0, $93 = 0, $930 = 0, $931 = 0, $932 = 0, $933 = 0, $934 = 0, $935 = 0, $936 = 0, $937 = 0, $938 = 0, $939 = 0, $94 = 0, $940 = 0, $941 = 0, $942 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0;
 var $99 = 0, $or$cond = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 752|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(752|0);
 $23 = sp + 736|0;
 $24 = sp + 504|0;
 $25 = sp + 352|0;
 $26 = sp + 200|0;
 $27 = sp + 48|0;
 $28 = sp;
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $17 = 0;
 $20 = 0;
 $29 = HEAP32[19156]|0;
 $30 = ($29|0)!=(0);
 if ($30) {
  $3 = 0;
  $942 = $3;
  STACKTOP = sp;return ($942|0);
 }
 $31 = HEAP32[19155]|0;
 $32 = $31 & 2;
 $33 = ($32|0)!=(0);
 if ($33) {
  $20 = 1;
 }
 $34 = HEAP8[120473]|0;
 $35 = $34 << 24 >> 24;
 $36 = ($35|0)!=(0);
 if ($36) {
  $37 = $4;
  $38 = $5;
  $39 = $6;
  $40 = (__Z14MbrolaGenerateP12PHONEME_LISTPii($37,$38,$39)|0);
  $3 = $40;
  $942 = $3;
  STACKTOP = sp;return ($942|0);
 }
 $41 = $6;
 $42 = ($41|0)==(0);
 if ($42) {
  HEAP32[19134] = 1;
  HEAP32[19135] = 0;
  HEAP32[19136] = 0;
  HEAP32[19126] = 0;
  HEAP32[19133] = 0;
  HEAP32[19117] = 0;
  HEAP32[19125] = -1;
  $43 = HEAP32[20917]|0;
  HEAP32[19128] = $43;
  $44 = HEAP32[20917]|0;
  HEAP32[19127] = $44;
  HEAP32[19118] = -1;
  HEAP32[19115] = -1;
  ;HEAP32[50864>>2]=0|0;HEAP32[50864+4>>2]=0|0;HEAP32[50864+8>>2]=0|0;HEAP32[50864+12>>2]=0|0;
  ;HEAP32[76548>>2]=0|0;HEAP32[76548+4>>2]=0|0;HEAP32[76548+8>>2]=0|0;HEAP32[76548+12>>2]=0|0;HEAP32[76548+16>>2]=0|0;HEAP32[76548+20>>2]=0|0;
  __ZL7DoPauseii(0,0);
 }
 while(1) {
  $45 = HEAP32[19134]|0;
  $46 = $5;
  $47 = HEAP32[$46>>2]|0;
  $48 = ($45|0)<($47|0);
  $49 = HEAP32[19134]|0;
  $50 = ($49|0)<(998);
  $51 = $48 ? $50 : 0;
  if (!($51)) {
   break;
  }
  $52 = HEAP32[19134]|0;
  $53 = $4;
  $54 = (($53) + (($52*24)|0)|0);
  $10 = $54;
  $55 = $10;
  $56 = ((($55)) + 17|0);
  $57 = HEAP8[$56>>0]|0;
  $58 = $57&255;
  $59 = ($58|0)==(0);
  do {
   if ($59) {
    $15 = 10;
   } else {
    $60 = $10;
    $61 = ((($60)) + 17|0);
    $62 = HEAP8[$61>>0]|0;
    $63 = $62&255;
    $64 = ($63|0)!=(2);
    if ($64) {
     $15 = 15;
     break;
    } else {
     $15 = 25;
     break;
    }
   }
  } while(0);
  $65 = (__Z9WcmdqFreev()|0);
  $66 = $15;
  $67 = ($65|0)<=($66|0);
  if ($67) {
   label = 16;
   break;
  }
  $68 = HEAP32[19134]|0;
  $69 = (($68) - 1)|0;
  $70 = $4;
  $71 = (($70) + (($69*24)|0)|0);
  $7 = $71;
  $72 = HEAP32[19134]|0;
  $73 = (($72) + 1)|0;
  $74 = $4;
  $75 = (($74) + (($73*24)|0)|0);
  $8 = $75;
  $76 = HEAP32[19134]|0;
  $77 = (($76) + 2)|0;
  $78 = $4;
  $79 = (($78) + (($77*24)|0)|0);
  $9 = $79;
  $80 = $10;
  $81 = HEAP16[$80>>1]|0;
  $82 = $81&65535;
  $83 = $82 & 2;
  $84 = ($83|0)!=(0);
  if ($84) {
   $85 = $10;
   $86 = ((($85)) + 4|0);
   $87 = HEAP16[$86>>1]|0;
   $88 = $87&65535;
   __Z10DoEmbeddedPii(76540,$88);
  }
  $89 = $10;
  $90 = ((($89)) + 21|0);
  $91 = HEAP8[$90>>0]|0;
  $92 = ($91<<24>>24)!=(0);
  if ($92) {
   $93 = $10;
   $94 = ((($93)) + 17|0);
   $95 = HEAP8[$94>>0]|0;
   $96 = $95&255;
   $97 = ($96|0)==(2);
   if ($97) {
    $98 = HEAP32[19149]|0;
    $99 = ((($98)) + 24|0);
    $100 = ((($99)) + 32|0);
    $101 = HEAP32[$100>>2]|0;
    $102 = $101 & 1;
    $103 = ($102|0)!=(0);
    if (!($103)) {
     label = 22;
    }
   } else {
    label = 22;
   }
   if ((label|0) == 22) {
    label = 0;
    $104 = $10;
    $105 = ((($104)) + 8|0);
    $106 = HEAP32[$105>>2]|0;
    $107 = ((($106)) + 4|0);
    $108 = HEAP32[$107>>2]|0;
    $109 = $108 & 16777216;
    $110 = ($109|0)!=(0);
    if (!($110)) {
     HEAP32[19117] = 0;
    }
   }
   $111 = $10;
   $112 = ((($111)) + 4|0);
   $113 = HEAP16[$112>>1]|0;
   $114 = $113&65535;
   $115 = $114 & 2047;
   $116 = HEAP32[19172]|0;
   $117 = (($115) + ($116))|0;
   HEAP32[19143] = $117;
   $118 = $10;
   $119 = ((($118)) + 21|0);
   $120 = HEAP8[$119>>0]|0;
   $121 = $120&255;
   $122 = $121 & 4;
   $123 = ($122|0)!=(0);
   if ($123) {
    $124 = HEAP32[19143]|0;
    $125 = HEAP32[19170]|0;
    __Z8DoMarkeriiii(2,$124,0,$125);
   }
   $126 = $10;
   $127 = ((($126)) + 21|0);
   $128 = HEAP8[$127>>0]|0;
   $129 = $128&255;
   $130 = $129 & 1;
   $131 = ($130|0)!=(0);
   if ($131) {
    $132 = HEAP32[19143]|0;
    $133 = $10;
    $134 = ((($133)) + 4|0);
    $135 = HEAP16[$134>>1]|0;
    $136 = $135&65535;
    $137 = $136 >> 11;
    $138 = HEAP32[19173]|0;
    $139 = HEAP32[19136]|0;
    $140 = (($139) + 1)|0;
    HEAP32[19136] = $140;
    $141 = (($138) + ($139))|0;
    __Z8DoMarkeriiii(1,$132,$137,$141);
   }
  }
  __ZL12EndAmplitudev();
  $142 = $10;
  $143 = ((($142)) + 18|0);
  $144 = HEAP8[$143>>0]|0;
  $145 = $144&255;
  $146 = ($145|0)>(0);
  if ($146) {
   $147 = $10;
   $148 = ((($147)) + 8|0);
   $149 = HEAP32[$148>>2]|0;
   $150 = ((($149)) + 4|0);
   $151 = HEAP32[$150>>2]|0;
   $152 = $151 & 33554432;
   $153 = ($152|0)!=(0);
   if (!($153)) {
    $154 = $10;
    $155 = ((($154)) + 18|0);
    $156 = HEAP8[$155>>0]|0;
    $157 = $156&255;
    __ZL7DoPauseii($157,1);
   }
  }
  $21 = 0;
  $158 = HEAP32[19155]|0;
  $159 = ($158|0)!=(0);
  do {
   if ($159) {
    $160 = $10;
    $161 = ((($160)) + 8|0);
    $162 = HEAP32[$161>>2]|0;
    $163 = ((($162)) + 10|0);
    $164 = HEAP8[$163>>0]|0;
    $165 = $164&255;
    $166 = ($165|0)!=(15);
    if ($166) {
     $167 = $10;
     $168 = ((($167)) + 17|0);
     $169 = HEAP8[$168>>0]|0;
     $170 = $169&255;
     $171 = ($170|0)==(2);
     if ($171) {
      $172 = $7;
      $173 = ((($172)) + 17|0);
      $174 = HEAP8[$173>>0]|0;
      $175 = $174&255;
      $176 = ($175|0)==(3);
      if ($176) {
       break;
      }
      $177 = $7;
      $178 = ((($177)) + 17|0);
      $179 = HEAP8[$178>>0]|0;
      $180 = $179&255;
      $181 = ($180|0)==(8);
      if ($181) {
       break;
      }
     }
     $182 = $10;
     $183 = ((($182)) + 8|0);
     $184 = HEAP32[$183>>2]|0;
     $185 = $10;
     $186 = $20;
     (__Z15WritePhMnemonicPcP11PHONEME_TABP12PHONEME_LISTiPi($23,$184,$185,$186,0)|0);
     $187 = HEAP32[19143]|0;
     __Z15DoPhonemeMarkeriiiPc(7,$187,0,$23);
     $21 = 1;
    }
   }
  } while(0);
  $188 = $10;
  $189 = ((($188)) + 17|0);
  $190 = HEAP8[$189>>0]|0;
  $191 = $190&255;
  L53: do {
   switch ($191|0) {
   case 0:  {
    $192 = $10;
    $193 = ((($192)) + 12|0);
    $194 = HEAP32[$193>>2]|0;
    __ZL7DoPauseii($194,0);
    break;
   }
   case 4:  {
    $11 = 0;
    $195 = $10;
    $196 = ((($195)) + 8|0);
    $197 = HEAP32[$196>>2]|0;
    $19 = $197;
    $198 = $8;
    $199 = ((($198)) + 17|0);
    $200 = HEAP8[$199>>0]|0;
    $201 = $200&255;
    $202 = ($201|0)==(2);
    if ($202) {
     $11 = 1;
    } else {
     $203 = $8;
     $204 = ((($203)) + 21|0);
     $205 = HEAP8[$204>>0]|0;
     $206 = ($205<<24>>24)!=(0);
     if (!($206)) {
      $207 = $8;
      $208 = ((($207)) + 17|0);
      $209 = HEAP8[$208>>0]|0;
      $210 = $209&255;
      $211 = ($210|0)==(3);
      if ($211) {
       $11 = 1;
      }
     }
    }
    $212 = $11;
    $213 = ($212|0)==(0);
    if ($213) {
     $214 = $10;
     $215 = HEAP16[$214>>1]|0;
     $216 = $215&65535;
     $217 = $216 | 8192;
     $218 = $217&65535;
     HEAP16[$214>>1] = $218;
    }
    $219 = $19;
    $220 = ((($219)) + 4|0);
    $221 = HEAP32[$220>>2]|0;
    $222 = $221 & 33554432;
    $223 = ($222|0)!=(0);
    if ($223) {
     dest=$28; stop=dest+48|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
     $224 = $10;
     __Z16InterpretPhonemeP10TranslatoriP12PHONEME_LISTP12PHONEME_DATAP12WORD_PH_DATA(0,1,$224,$24,76548);
     $225 = ((($24)) + 68|0);
     $226 = HEAP32[$225>>2]|0;
     $227 = ((($28)) + 8|0);
     HEAP32[$227>>2] = $226;
     $228 = ((($24)) + 88|0);
     $229 = HEAP32[$228>>2]|0;
     $230 = ((($28)) + 16|0);
     HEAP32[$230>>2] = $229;
     $231 = HEAP32[19115]|0;
     $232 = ($231|0)<(0);
     if ($232) {
      $233 = $8;
      $234 = ((($233)) + 20|0);
      $235 = HEAP8[$234>>0]|0;
      $236 = $235&255;
      __ZL11DoAmplitudeiPh($236,0);
      $237 = $10;
      $238 = ((($237)) + 16|0);
      $239 = HEAP8[$238>>0]|0;
      $240 = $239&255;
      $241 = (844 + ($240<<2)|0);
      $242 = HEAP32[$241>>2]|0;
      $243 = $8;
      $244 = ((($243)) + 22|0);
      $245 = HEAP8[$244>>0]|0;
      $246 = $245&255;
      $247 = $8;
      $248 = ((($247)) + 23|0);
      $249 = HEAP8[$248>>0]|0;
      $250 = $249&255;
      __ZL7DoPitchPhii($242,$246,$250);
     }
     $251 = $19;
     $252 = $10;
     (__Z8DoSpect2P11PHONEME_TABiP10FMT_PARAMSP12PHONEME_LISTi($251,0,$28,$252,0)|0);
    }
    $253 = $10;
    __Z16InterpretPhonemeP10TranslatoriP12PHONEME_LISTP12PHONEME_DATAP12WORD_PH_DATA(0,0,$253,$24,76548);
    $254 = HEAP32[$24>>2]|0;
    $255 = $254 | 4;
    HEAP32[$24>>2] = $255;
    (__Z9DoSample3P12PHONEME_DATAii($24,0,0)|0);
    break;
   }
   case 6:  {
    $256 = $10;
    __Z16InterpretPhonemeP10TranslatoriP12PHONEME_LISTP12PHONEME_DATAP12WORD_PH_DATA(0,0,$256,$24,76548);
    $257 = $10;
    $258 = HEAP16[$257>>1]|0;
    $259 = $258&65535;
    $260 = $259 & 8;
    $261 = ($260|0)!=(0);
    if ($261) {
     $262 = $10;
     $263 = ((($262)) + 12|0);
     $264 = HEAP32[$263>>2]|0;
     (__Z9DoSample3P12PHONEME_DATAii($24,$264,0)|0);
    }
    $265 = $10;
    $266 = ((($265)) + 12|0);
    $267 = HEAP32[$266>>2]|0;
    (__Z9DoSample3P12PHONEME_DATAii($24,$267,0)|0);
    break;
   }
   case 5:  {
    $268 = $10;
    $269 = ((($268)) + 8|0);
    $270 = HEAP32[$269>>2]|0;
    $19 = $270;
    dest=$28; stop=dest+48|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
    HEAP32[$28>>2] = 4;
    $14 = 0;
    $271 = $8;
    $272 = ((($271)) + 17|0);
    $273 = HEAP8[$272>>0]|0;
    $274 = $273&255;
    $275 = ($274|0)==(2);
    do {
     if ($275) {
      $276 = $10;
      $277 = ((($276)) + 20|0);
      $278 = HEAP8[$277>>0]|0;
      $279 = $278&255;
      __ZL11DoAmplitudeiPh($279,0);
      $280 = $10;
      $281 = ((($280)) + 16|0);
      $282 = HEAP8[$281>>0]|0;
      $283 = $282&255;
      $284 = (844 + ($283<<2)|0);
      $285 = HEAP32[$284>>2]|0;
      $286 = $10;
      $287 = ((($286)) + 22|0);
      $288 = HEAP8[$287>>0]|0;
      $289 = $288&255;
      $290 = $10;
      $291 = ((($290)) + 23|0);
      $292 = HEAP8[$291>>0]|0;
      $293 = $292&255;
      __ZL7DoPitchPhii($285,$289,$293);
      $14 = 1;
     } else {
      $294 = $8;
      $295 = ((($294)) + 17|0);
      $296 = HEAP8[$295>>0]|0;
      $297 = $296&255;
      $298 = ($297|0)==(3);
      if ($298) {
       $299 = $8;
       $300 = ((($299)) + 21|0);
       $301 = HEAP8[$300>>0]|0;
       $302 = ($301<<24>>24)!=(0);
       if (!($302)) {
        $303 = $8;
        $304 = ((($303)) + 20|0);
        $305 = HEAP8[$304>>0]|0;
        $306 = $305&255;
        __ZL11DoAmplitudeiPh($306,0);
        $307 = $8;
        $308 = ((($307)) + 16|0);
        $309 = HEAP8[$308>>0]|0;
        $310 = $309&255;
        $311 = (844 + ($310<<2)|0);
        $312 = HEAP32[$311>>2]|0;
        $313 = $8;
        $314 = ((($313)) + 22|0);
        $315 = HEAP8[$314>>0]|0;
        $316 = $315&255;
        $317 = $8;
        $318 = ((($317)) + 23|0);
        $319 = HEAP8[$318>>0]|0;
        $320 = $319&255;
        __ZL7DoPitchPhii($312,$316,$320);
        $14 = 1;
        break;
       }
      }
      $321 = HEAP32[19115]|0;
      $322 = ($321|0)<(0);
      if ($322) {
       $323 = $8;
       $324 = ((($323)) + 20|0);
       $325 = HEAP8[$324>>0]|0;
       $326 = $325&255;
       __ZL11DoAmplitudeiPh($326,0);
       $327 = $10;
       $328 = ((($327)) + 16|0);
       $329 = HEAP8[$328>>0]|0;
       $330 = $329&255;
       $331 = (844 + ($330<<2)|0);
       $332 = HEAP32[$331>>2]|0;
       $333 = $10;
       $334 = ((($333)) + 22|0);
       $335 = HEAP8[$334>>0]|0;
       $336 = $335&255;
       $337 = $10;
       $338 = ((($337)) + 23|0);
       $339 = HEAP8[$338>>0]|0;
       $340 = $339&255;
       __ZL7DoPitchPhii($332,$336,$340);
      }
     }
    } while(0);
    $341 = $7;
    $342 = ((($341)) + 17|0);
    $343 = HEAP8[$342>>0]|0;
    $344 = $343&255;
    $345 = ($344|0)==(2);
    if ($345) {
     label = 64;
    } else {
     $346 = $7;
     $347 = ((($346)) + 8|0);
     $348 = HEAP32[$347>>2]|0;
     $349 = ((($348)) + 4|0);
     $350 = HEAP32[$349>>2]|0;
     $351 = $350 & 256;
     $352 = ($351|0)!=(0);
     if ($352) {
      label = 64;
     } else {
      $353 = $19;
      $354 = ((($353)) + 4|0);
      $355 = HEAP32[$354>>2]|0;
      $356 = $355 & 33554432;
      $357 = ($356|0)!=(0);
      if ($357) {
       label = 64;
      } else {
       $374 = $10;
       $375 = HEAP16[$374>>1]|0;
       $376 = $375&65535;
       $377 = $376 & 8;
       $378 = ($377|0)!=(0);
       if ($378) {
        __ZL7DoPauseii(50,0);
       }
      }
     }
    }
    if ((label|0) == 64) {
     label = 0;
     $358 = $10;
     __Z16InterpretPhonemeP10TranslatoriP12PHONEME_LISTP12PHONEME_DATAP12WORD_PH_DATA(0,1,$358,$24,76548);
     $359 = ((($24)) + 68|0);
     $360 = HEAP32[$359>>2]|0;
     $361 = ((($28)) + 8|0);
     HEAP32[$361>>2] = $360;
     $362 = ((($24)) + 88|0);
     $363 = HEAP32[$362>>2]|0;
     $364 = ((($28)) + 16|0);
     HEAP32[$364>>2] = $363;
     $365 = $19;
     $366 = $10;
     (__Z8DoSpect2P11PHONEME_TABiP10FMT_PARAMSP12PHONEME_LISTi($365,0,$28,$366,0)|0);
     $367 = $10;
     $368 = HEAP16[$367>>1]|0;
     $369 = $368&65535;
     $370 = $369 & 8;
     $371 = ($370|0)!=(0);
     if ($371) {
      __ZL7DoPauseii(25,1);
      $372 = $19;
      $373 = $10;
      (__Z8DoSpect2P11PHONEME_TABiP10FMT_PARAMSP12PHONEME_LISTi($372,0,$28,$373,0)|0);
     }
    }
    $379 = $14;
    $380 = ($379|0)!=(0);
    if ($380) {
     __ZL13StartSyllablev();
    } else {
     $381 = $10;
     $382 = HEAP16[$381>>1]|0;
     $383 = $382&65535;
     $384 = $383 | 8192;
     $385 = $384&65535;
     HEAP16[$381>>1] = $385;
    }
    $386 = $10;
    __Z16InterpretPhonemeP10TranslatoriP12PHONEME_LISTP12PHONEME_DATAP12WORD_PH_DATA(0,0,$386,$24,76548);
    $387 = ((($24)) + 68|0);
    $388 = HEAP32[$387>>2]|0;
    $389 = ((($28)) + 8|0);
    HEAP32[$389>>2] = $388;
    $390 = ((($24)) + 88|0);
    $391 = HEAP32[$390>>2]|0;
    $392 = ((($28)) + 16|0);
    HEAP32[$392>>2] = $391;
    $393 = ((($24)) + 68|0);
    $394 = ((($393)) + 16|0);
    $395 = HEAP32[$394>>2]|0;
    $396 = ((($28)) + 28|0);
    HEAP32[$396>>2] = $395;
    $397 = ((($24)) + 88|0);
    $398 = ((($397)) + 16|0);
    $399 = HEAP32[$398>>2]|0;
    $400 = ((($28)) + 32|0);
    HEAP32[$400>>2] = $399;
    $401 = $19;
    $402 = $10;
    (__Z8DoSpect2P11PHONEME_TABiP10FMT_PARAMSP12PHONEME_LISTi($401,0,$28,$402,0)|0);
    $403 = $10;
    $404 = ((($403)) + 21|0);
    $405 = HEAP8[$404>>0]|0;
    $406 = $405&255;
    $407 = ($406|0)==(0);
    if ($407) {
     $408 = $9;
     $409 = ((($408)) + 21|0);
     $410 = HEAP8[$409>>0]|0;
     $411 = $410&255;
     $412 = ($411|0)==(0);
     if ($412) {
      $413 = $8;
      $414 = ((($413)) + 17|0);
      $415 = HEAP8[$414>>0]|0;
      $416 = $415&255;
      $417 = ($416|0)==(7);
      if ($417) {
       __ZL7DoPauseii(20,0);
      }
      $418 = $8;
      $419 = ((($418)) + 17|0);
      $420 = HEAP8[$419>>0]|0;
      $421 = $420&255;
      $422 = ($421|0)==(6);
      if ($422) {
       __ZL7DoPauseii(12,0);
      }
     }
    }
    break;
   }
   case 7:  {
    $423 = $8;
    $424 = ((($423)) + 17|0);
    $425 = HEAP8[$424>>0]|0;
    $426 = $425&255;
    $427 = ($426|0)==(2);
    do {
     if ($427) {
      $428 = $10;
      $429 = ((($428)) + 20|0);
      $430 = HEAP8[$429>>0]|0;
      $431 = $430&255;
      __ZL11DoAmplitudeiPh($431,0);
      $432 = $10;
      $433 = ((($432)) + 16|0);
      $434 = HEAP8[$433>>0]|0;
      $435 = $434&255;
      $436 = (844 + ($435<<2)|0);
      $437 = HEAP32[$436>>2]|0;
      $438 = $10;
      $439 = ((($438)) + 22|0);
      $440 = HEAP8[$439>>0]|0;
      $441 = $440&255;
      $442 = $10;
      $443 = ((($442)) + 23|0);
      $444 = HEAP8[$443>>0]|0;
      $445 = $444&255;
      __ZL7DoPitchPhii($437,$441,$445);
     } else {
      $446 = $8;
      $447 = ((($446)) + 17|0);
      $448 = HEAP8[$447>>0]|0;
      $449 = $448&255;
      $450 = ($449|0)==(3);
      if ($450) {
       $451 = $8;
       $452 = ((($451)) + 20|0);
       $453 = HEAP8[$452>>0]|0;
       $454 = $453&255;
       __ZL11DoAmplitudeiPh($454,0);
       $455 = $8;
       $456 = ((($455)) + 16|0);
       $457 = HEAP8[$456>>0]|0;
       $458 = $457&255;
       $459 = (844 + ($458<<2)|0);
       $460 = HEAP32[$459>>2]|0;
       $461 = $8;
       $462 = ((($461)) + 22|0);
       $463 = HEAP8[$462>>0]|0;
       $464 = $463&255;
       $465 = $8;
       $466 = ((($465)) + 23|0);
       $467 = HEAP8[$466>>0]|0;
       $468 = $467&255;
       __ZL7DoPitchPhii($460,$464,$468);
       break;
      }
      $469 = HEAP32[19115]|0;
      $470 = ($469|0)<(0);
      if ($470) {
       $471 = $10;
       $472 = ((($471)) + 20|0);
       $473 = HEAP8[$472>>0]|0;
       $474 = $473&255;
       __ZL11DoAmplitudeiPh($474,0);
       $475 = $10;
       $476 = ((($475)) + 16|0);
       $477 = HEAP8[$476>>0]|0;
       $478 = $477&255;
       $479 = (844 + ($478<<2)|0);
       $480 = HEAP32[$479>>2]|0;
       $481 = $10;
       $482 = ((($481)) + 22|0);
       $483 = HEAP8[$482>>0]|0;
       $484 = $483&255;
       $485 = $10;
       $486 = ((($485)) + 23|0);
       $487 = HEAP8[$486>>0]|0;
       $488 = $487&255;
       __ZL7DoPitchPhii($480,$484,$488);
      }
     }
    } while(0);
    $489 = $8;
    $490 = ((($489)) + 17|0);
    $491 = HEAP8[$490>>0]|0;
    $492 = $491&255;
    $493 = ($492|0)==(2);
    do {
     if ($493) {
      label = 86;
     } else {
      $494 = $8;
      $495 = ((($494)) + 17|0);
      $496 = HEAP8[$495>>0]|0;
      $497 = $496&255;
      $498 = ($497|0)==(3);
      if ($498) {
       $499 = $8;
       $500 = ((($499)) + 21|0);
       $501 = HEAP8[$500>>0]|0;
       $502 = $501&255;
       $503 = ($502|0)==(0);
       if ($503) {
        label = 86;
        break;
       }
      }
      $504 = $10;
      $505 = HEAP16[$504>>1]|0;
      $506 = $505&65535;
      $507 = $506 | 8192;
      $508 = $507&65535;
      HEAP16[$504>>1] = $508;
     }
    } while(0);
    if ((label|0) == 86) {
     label = 0;
     __ZL13StartSyllablev();
    }
    $509 = $10;
    __Z16InterpretPhonemeP10TranslatoriP12PHONEME_LISTP12PHONEME_DATAP12WORD_PH_DATA(0,0,$509,$24,76548);
    dest=$28; stop=dest+48|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
    $510 = ((($24)) + 4|0);
    $511 = ((($510)) + 40|0);
    $512 = HEAP32[$511>>2]|0;
    $513 = $512<<1;
    $514 = ((($28)) + 44|0);
    HEAP32[$514>>2] = $513;
    $515 = ((($24)) + 68|0);
    $516 = HEAP32[$515>>2]|0;
    $517 = ((($28)) + 8|0);
    HEAP32[$517>>2] = $516;
    $518 = ((($24)) + 88|0);
    $519 = HEAP32[$518>>2]|0;
    $520 = ((($28)) + 16|0);
    HEAP32[$520>>2] = $519;
    $521 = ((($24)) + 68|0);
    $522 = ((($521)) + 16|0);
    $523 = HEAP32[$522>>2]|0;
    $524 = ((($28)) + 28|0);
    HEAP32[$524>>2] = $523;
    $525 = ((($24)) + 88|0);
    $526 = ((($525)) + 16|0);
    $527 = HEAP32[$526>>2]|0;
    $528 = ((($28)) + 32|0);
    HEAP32[$528>>2] = $527;
    $529 = $10;
    $530 = HEAP16[$529>>1]|0;
    $531 = $530&65535;
    $532 = $531 & 8;
    $533 = ($532|0)!=(0);
    if ($533) {
     $534 = $10;
     $535 = ((($534)) + 8|0);
     $536 = HEAP32[$535>>2]|0;
     $537 = $10;
     (__Z8DoSpect2P11PHONEME_TABiP10FMT_PARAMSP12PHONEME_LISTi($536,0,$28,$537,0)|0);
    }
    $538 = $10;
    $539 = ((($538)) + 8|0);
    $540 = HEAP32[$539>>2]|0;
    $541 = $10;
    (__Z8DoSpect2P11PHONEME_TABiP10FMT_PARAMSP12PHONEME_LISTi($540,0,$28,$541,0)|0);
    break;
   }
   case 8:  {
    dest=$28; stop=dest+48|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
    $542 = $10;
    $543 = HEAP16[$542>>1]|0;
    $544 = $543&65535;
    $545 = $544 & 1;
    $546 = ($545|0)!=(0);
    if (!($546)) {
     $547 = $10;
     $548 = ((($547)) + 20|0);
     $549 = HEAP8[$548>>0]|0;
     $550 = $549&255;
     __ZL11DoAmplitudeiPh($550,0);
     $551 = $10;
     $552 = ((($551)) + 16|0);
     $553 = HEAP8[$552>>0]|0;
     $554 = $553&255;
     $555 = (844 + ($554<<2)|0);
     $556 = HEAP32[$555>>2]|0;
     $557 = $10;
     $558 = ((($557)) + 22|0);
     $559 = HEAP8[$558>>0]|0;
     $560 = $559&255;
     $561 = $10;
     $562 = ((($561)) + 23|0);
     $563 = HEAP8[$562>>0]|0;
     $564 = $563&255;
     __ZL7DoPitchPhii($556,$560,$564);
    }
    $565 = $7;
    $566 = ((($565)) + 17|0);
    $567 = HEAP8[$566>>0]|0;
    $568 = $567&255;
    $569 = ($568|0)==(8);
    if ($569) {
     HEAP32[19117] = 0;
    }
    $570 = $10;
    __Z16InterpretPhonemeP10TranslatoriP12PHONEME_LISTP12PHONEME_DATAP12WORD_PH_DATA(0,0,$570,$24,76548);
    $571 = ((($24)) + 4|0);
    $572 = ((($571)) + 40|0);
    $573 = HEAP32[$572>>2]|0;
    $574 = $573<<1;
    $575 = ((($28)) + 44|0);
    HEAP32[$575>>2] = $574;
    $576 = ((($24)) + 68|0);
    $577 = HEAP32[$576>>2]|0;
    $578 = ((($28)) + 8|0);
    HEAP32[$578>>2] = $577;
    $579 = ((($24)) + 88|0);
    $580 = HEAP32[$579>>2]|0;
    $581 = ((($28)) + 16|0);
    HEAP32[$581>>2] = $580;
    $582 = $8;
    $583 = ((($582)) + 17|0);
    $584 = HEAP8[$583>>0]|0;
    $585 = $584&255;
    $586 = ($585|0)==(2);
    if ($586) {
     __ZL13StartSyllablev();
     $587 = $10;
     $588 = ((($587)) + 8|0);
     $589 = HEAP32[$588>>2]|0;
     $590 = $10;
     (__Z8DoSpect2P11PHONEME_TABiP10FMT_PARAMSP12PHONEME_LISTi($589,0,$28,$590,0)|0);
     break L53;
    }
    $591 = $7;
    $592 = ((($591)) + 17|0);
    $593 = HEAP8[$592>>0]|0;
    $594 = $593&255;
    $595 = ($594|0)==(2);
    if ($595) {
     $596 = $10;
     $597 = HEAP16[$596>>1]|0;
     $598 = $597&65535;
     $599 = $598 & 1;
     $600 = ($599|0)!=(0);
     if ($600) {
      $601 = $10;
      $602 = ((($601)) + 8|0);
      $603 = HEAP32[$602>>2]|0;
      $604 = $10;
      (__Z8DoSpect2P11PHONEME_TABiP10FMT_PARAMSP12PHONEME_LISTi($603,0,$28,$604,0)|0);
      break L53;
     }
    }
    HEAP32[19117] = 0;
    $605 = $10;
    $606 = ((($605)) + 8|0);
    $607 = HEAP32[$606>>2]|0;
    $608 = $10;
    (__Z8DoSpect2P11PHONEME_TABiP10FMT_PARAMSP12PHONEME_LISTi($607,0,$28,$608,0)|0);
    HEAP32[19117] = 0;
    break;
   }
   case 3:  {
    dest=$28; stop=dest+48|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
    $13 = 0;
    $609 = $10;
    $610 = ((($609)) + 8|0);
    $611 = HEAP32[$610>>2]|0;
    $612 = ((($611)) + 4|0);
    $613 = HEAP32[$612>>2]|0;
    $614 = $613 & 128;
    $615 = ($614|0)!=(0);
    $$ = $615 ? 5 : 0;
    $13 = $$;
    $616 = $10;
    $617 = HEAP16[$616>>1]|0;
    $618 = $617&65535;
    $619 = $618 & 1;
    $620 = ($619|0)!=(0);
    if (!($620)) {
     $621 = $10;
     $622 = ((($621)) + 20|0);
     $623 = HEAP8[$622>>0]|0;
     $624 = $623&255;
     __ZL11DoAmplitudeiPh($624,0);
     $625 = $10;
     $626 = ((($625)) + 16|0);
     $627 = HEAP8[$626>>0]|0;
     $628 = $627&255;
     $629 = (844 + ($628<<2)|0);
     $630 = HEAP32[$629>>2]|0;
     $631 = $10;
     $632 = ((($631)) + 22|0);
     $633 = HEAP8[$632>>0]|0;
     $634 = $633&255;
     $635 = $10;
     $636 = ((($635)) + 23|0);
     $637 = HEAP8[$636>>0]|0;
     $638 = $637&255;
     __ZL7DoPitchPhii($630,$634,$638);
    }
    $639 = $7;
    $640 = ((($639)) + 17|0);
    $641 = HEAP8[$640>>0]|0;
    $642 = $641&255;
    $643 = ($642|0)==(8);
    if ($643) {
     HEAP32[19117] = 0;
    }
    $644 = $8;
    $645 = ((($644)) + 17|0);
    $646 = HEAP8[$645>>0]|0;
    $647 = $646&255;
    $648 = ($647|0)==(2);
    if ($648) {
     __ZL13StartSyllablev();
    }
    $649 = $10;
    __Z16InterpretPhonemeP10TranslatoriP12PHONEME_LISTP12PHONEME_DATAP12WORD_PH_DATA(0,0,$649,$24,76548);
    $650 = ((($24)) + 4|0);
    $651 = ((($650)) + 28|0);
    $652 = HEAP32[$651>>2]|0;
    $653 = $10;
    $654 = ((($653)) + 18|0);
    $655 = HEAP8[$654>>0]|0;
    $656 = $655&255;
    $657 = (($652) - ($656))|0;
    $16 = $657;
    $658 = ($657|0)>(0);
    if ($658) {
     $659 = $16;
     __ZL7DoPauseii($659,1);
    }
    $660 = ((($24)) + 4|0);
    $661 = ((($660)) + 40|0);
    $662 = HEAP32[$661>>2]|0;
    $663 = $662<<1;
    $664 = ((($28)) + 44|0);
    HEAP32[$664>>2] = $663;
    $665 = ((($24)) + 68|0);
    $666 = HEAP32[$665>>2]|0;
    $667 = ((($28)) + 8|0);
    HEAP32[$667>>2] = $666;
    $668 = ((($24)) + 88|0);
    $669 = HEAP32[$668>>2]|0;
    $670 = ((($28)) + 16|0);
    HEAP32[$670>>2] = $669;
    $671 = ((($24)) + 68|0);
    $672 = ((($671)) + 16|0);
    $673 = HEAP32[$672>>2]|0;
    $674 = ((($28)) + 28|0);
    HEAP32[$674>>2] = $673;
    $675 = ((($24)) + 88|0);
    $676 = ((($675)) + 16|0);
    $677 = HEAP32[$676>>2]|0;
    $678 = ((($28)) + 32|0);
    HEAP32[$678>>2] = $677;
    $679 = $10;
    $680 = ((($679)) + 8|0);
    $681 = HEAP32[$680>>2]|0;
    $682 = $10;
    $683 = $13;
    (__Z8DoSpect2P11PHONEME_TABiP10FMT_PARAMSP12PHONEME_LISTi($681,0,$28,$682,$683)|0);
    break;
   }
   case 2:  {
    $684 = $10;
    $685 = ((($684)) + 8|0);
    $686 = HEAP32[$685>>2]|0;
    $19 = $686;
    $687 = $10;
    $688 = ((($687)) + 3|0);
    $689 = HEAP8[$688>>0]|0;
    $690 = $689&255;
    $691 = $690 & 15;
    $12 = $691;
    dest=$28; stop=dest+48|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
    $692 = $10;
    __Z16InterpretPhonemeP10TranslatoriP12PHONEME_LISTP12PHONEME_DATAP12WORD_PH_DATA(0,0,$692,$24,76548);
    $693 = ((($24)) + 4|0);
    $694 = ((($693)) + 40|0);
    $695 = HEAP32[$694>>2]|0;
    $696 = $695<<1;
    $697 = ((($28)) + 44|0);
    HEAP32[$697>>2] = $696;
    $22 = 0;
    $698 = ((($24)) + 68|0);
    $699 = ((($698)) + 8|0);
    $700 = HEAP32[$699>>2]|0;
    $701 = ((($28)) + 8|0);
    HEAP32[$701>>2] = $700;
    $702 = ($700|0)!=(0);
    if ($702) {
     $703 = HEAP32[$24>>2]|0;
     $704 = $703 & 2;
     $705 = ($704|0)==(0);
     if ($705) {
      $706 = ((($24)) + 88|0);
      $707 = ((($706)) + 8|0);
      $708 = HEAP32[$707>>2]|0;
      $709 = ((($28)) + 12|0);
      HEAP32[$709>>2] = $708;
     } else {
      label = 113;
     }
    } else {
     label = 113;
    }
    if ((label|0) == 113) {
     label = 0;
     $710 = $7;
     $711 = ((($710)) + 17|0);
     $712 = HEAP8[$711>>0]|0;
     $713 = $712&255;
     $714 = ($713|0)!=(0);
     if ($714) {
      $715 = $7;
      __Z16InterpretPhonemeP10TranslatoriP12PHONEME_LISTP12PHONEME_DATAP12WORD_PH_DATA(0,0,$715,$25,0);
      $716 = ((($25)) + 68|0);
      $717 = ((($716)) + 8|0);
      $718 = HEAP32[$717>>2]|0;
      $719 = ((($28)) + 8|0);
      HEAP32[$719>>2] = $718;
      $720 = ($718|0)!=(0);
      if ($720) {
       $721 = HEAP32[$25>>2]|0;
       $722 = $721 & 2;
       $723 = ($722|0)!=(0);
       if ($723) {
        $22 = 1;
        $724 = ((($25)) + 88|0);
        $725 = ((($724)) + 8|0);
        $726 = HEAP32[$725>>2]|0;
        $727 = ((($28)) + 24|0);
        HEAP32[$727>>2] = $726;
       }
      }
      $728 = ((($25)) + 108|0);
      $729 = HEAP32[$728>>2]|0;
      $730 = ((($28)) + 36|0);
      HEAP32[$730>>2] = $729;
      $731 = ((($25)) + 108|0);
      $732 = ((($731)) + 4|0);
      $733 = HEAP32[$732>>2]|0;
      $734 = ((($28)) + 40|0);
      HEAP32[$734>>2] = $733;
     }
    }
    $735 = ((($28)) + 8|0);
    $736 = HEAP32[$735>>2]|0;
    $737 = ($736|0)==(0);
    if ($737) {
     $738 = ((($28)) + 4|0);
     HEAP32[$738>>2] = 1;
     HEAP32[$28>>2] = 1;
     $739 = ((($24)) + 68|0);
     $740 = HEAP32[$739>>2]|0;
     $741 = ((($28)) + 8|0);
     HEAP32[$741>>2] = $740;
    }
    $742 = ((($24)) + 88|0);
    $743 = HEAP32[$742>>2]|0;
    $744 = ((($28)) + 16|0);
    HEAP32[$744>>2] = $743;
    $745 = $10;
    $746 = ((($745)) + 16|0);
    $747 = HEAP8[$746>>0]|0;
    $748 = $747&255;
    $749 = (844 + ($748<<2)|0);
    $750 = HEAP32[$749>>2]|0;
    $17 = $750;
    $18 = 0;
    $751 = $10;
    $752 = ((($751)) + 7|0);
    $753 = HEAP8[$752>>0]|0;
    $754 = $753&255;
    $755 = ($754|0)!=(0);
    if ($755) {
     $756 = $10;
     $757 = ((($756)) + 7|0);
     $758 = HEAP8[$757>>0]|0;
     $759 = $758&255;
     __Z17InterpretPhoneme2iP12PHONEME_DATA($759,$27);
     $760 = ((($27)) + 124|0);
     $761 = HEAP32[$760>>2]|0;
     $762 = (__Z11GetEnvelopei($761)|0);
     $17 = $762;
     $763 = ((($27)) + 128|0);
     $764 = HEAP32[$763>>2]|0;
     $765 = ($764|0)>(0);
     if ($765) {
      $766 = ((($27)) + 128|0);
      $767 = HEAP32[$766>>2]|0;
      $768 = (__Z11GetEnvelopei($767)|0);
      $18 = $768;
     }
    }
    __ZL13StartSyllablev();
    $13 = 2;
    $769 = $12;
    $770 = ($769|0)<=(1);
    if ($770) {
     $13 = 1;
    } else {
     $771 = $12;
     $772 = ($771|0)>=(7);
     if ($772) {
      $13 = 3;
     }
    }
    $773 = $7;
    $774 = ((($773)) + 17|0);
    $775 = HEAP8[$774>>0]|0;
    $776 = $775&255;
    $777 = ($776|0)==(5);
    L175: do {
     if ($777) {
      label = 129;
     } else {
      $778 = $7;
      $779 = ((($778)) + 17|0);
      $780 = HEAP8[$779>>0]|0;
      $781 = $780&255;
      $782 = ($781|0)==(7);
      if ($782) {
       label = 129;
      } else {
       $800 = $7;
       $801 = ((($800)) + 17|0);
       $802 = HEAP8[$801>>0]|0;
       $803 = $802&255;
       $804 = ($803|0)==(3);
       do {
        if (!($804)) {
         $805 = $7;
         $806 = ((($805)) + 17|0);
         $807 = HEAP8[$806>>0]|0;
         $808 = $807&255;
         $809 = ($808|0)==(8);
         if ($809) {
          break;
         }
         $827 = $22;
         $828 = ($827|0)!=(0);
         if ($828) {
          $829 = HEAP32[(852)>>2]|0;
          $830 = $10;
          $831 = ((($830)) + 23|0);
          $832 = HEAP8[$831>>0]|0;
          $833 = $832&255;
          $834 = (($833) - 15)|0;
          $835 = $10;
          $836 = ((($835)) + 23|0);
          $837 = HEAP8[$836>>0]|0;
          $838 = $837&255;
          __ZL7DoPitchPhii($829,$834,$838);
          $839 = $10;
          $840 = ((($839)) + 20|0);
          $841 = HEAP8[$840>>0]|0;
          $842 = $841&255;
          $843 = (($842) - 1)|0;
          $844 = $18;
          __ZL11DoAmplitudeiPh($843,$844);
          $845 = $19;
          $846 = $10;
          $847 = $13;
          (__Z8DoSpect2P11PHONEME_TABiP10FMT_PARAMSP12PHONEME_LISTi($845,1,$28,$846,$847)|0);
          $848 = $17;
          $849 = $10;
          $850 = ((($849)) + 22|0);
          $851 = HEAP8[$850>>0]|0;
          $852 = $851&255;
          $853 = $10;
          $854 = ((($853)) + 23|0);
          $855 = HEAP8[$854>>0]|0;
          $856 = $855&255;
          __ZL7DoPitchPhii($848,$852,$856);
          break L175;
         }
         $857 = $10;
         $858 = HEAP16[$857>>1]|0;
         $859 = $858&65535;
         $860 = $859 & 1;
         $861 = ($860|0)!=(0);
         if (!($861)) {
          $862 = $10;
          $863 = ((($862)) + 20|0);
          $864 = HEAP8[$863>>0]|0;
          $865 = $864&255;
          $866 = $18;
          __ZL11DoAmplitudeiPh($865,$866);
          $867 = $17;
          $868 = $10;
          $869 = ((($868)) + 22|0);
          $870 = HEAP8[$869>>0]|0;
          $871 = $870&255;
          $872 = $10;
          $873 = ((($872)) + 23|0);
          $874 = HEAP8[$873>>0]|0;
          $875 = $874&255;
          __ZL7DoPitchPhii($867,$871,$875);
         }
         $876 = $19;
         $877 = $10;
         $878 = $13;
         (__Z8DoSpect2P11PHONEME_TABiP10FMT_PARAMSP12PHONEME_LISTi($876,1,$28,$877,$878)|0);
         break L175;
        }
       } while(0);
       $810 = $10;
       $811 = ((($810)) + 20|0);
       $812 = HEAP8[$811>>0]|0;
       $813 = $812&255;
       $814 = $18;
       __ZL11DoAmplitudeiPh($813,$814);
       $815 = $19;
       $816 = $10;
       $817 = $13;
       (__Z8DoSpect2P11PHONEME_TABiP10FMT_PARAMSP12PHONEME_LISTi($815,1,$28,$816,$817)|0);
       $818 = $17;
       $819 = $10;
       $820 = ((($819)) + 22|0);
       $821 = HEAP8[$820>>0]|0;
       $822 = $821&255;
       $823 = $10;
       $824 = ((($823)) + 23|0);
       $825 = HEAP8[$824>>0]|0;
       $826 = $825&255;
       __ZL7DoPitchPhii($818,$822,$826);
      }
     }
    } while(0);
    if ((label|0) == 129) {
     label = 0;
     $783 = $10;
     $784 = ((($783)) + 20|0);
     $785 = HEAP8[$784>>0]|0;
     $786 = $785&255;
     $787 = $18;
     __ZL11DoAmplitudeiPh($786,$787);
     $788 = $17;
     $789 = $10;
     $790 = ((($789)) + 22|0);
     $791 = HEAP8[$790>>0]|0;
     $792 = $791&255;
     $793 = $10;
     $794 = ((($793)) + 23|0);
     $795 = HEAP8[$794>>0]|0;
     $796 = $795&255;
     __ZL7DoPitchPhii($788,$792,$796);
     $797 = $19;
     $798 = $10;
     $799 = $13;
     (__Z8DoSpect2P11PHONEME_TABiP10FMT_PARAMSP12PHONEME_LISTi($797,1,$28,$798,$799)|0);
    }
    $879 = HEAP32[19155]|0;
    $880 = ($879|0)!=(0);
    $881 = $21;
    $882 = ($881|0)==(0);
    $or$cond = $880 & $882;
    if ($or$cond) {
     $883 = $10;
     $884 = ((($883)) + 8|0);
     $885 = HEAP32[$884>>2]|0;
     $886 = $10;
     $887 = $20;
     (__Z15WritePhMnemonicPcP11PHONEME_TABP12PHONEME_LISTiPi($23,$885,$886,$887,0)|0);
     $888 = HEAP32[19143]|0;
     __Z15DoPhonemeMarkeriiiPc(7,$888,0,$23);
    }
    $889 = ((($24)) + 68|0);
    $890 = HEAP32[$889>>2]|0;
    $891 = ((($28)) + 8|0);
    HEAP32[$891>>2] = $890;
    $892 = ((($24)) + 88|0);
    $893 = HEAP32[$892>>2]|0;
    $894 = ((($28)) + 16|0);
    HEAP32[$894>>2] = $893;
    $895 = ((($28)) + 36|0);
    HEAP32[$895>>2] = 0;
    $896 = ((($28)) + 40|0);
    HEAP32[$896>>2] = 0;
    $897 = ((($24)) + 68|0);
    $898 = ((($897)) + 12|0);
    $899 = HEAP32[$898>>2]|0;
    $900 = ((($28)) + 20|0);
    HEAP32[$900>>2] = $899;
    $901 = ($899|0)!=(0);
    do {
     if ($901) {
      $902 = ((($24)) + 88|0);
      $903 = ((($902)) + 12|0);
      $904 = HEAP32[$903>>2]|0;
      $905 = ((($28)) + 24|0);
      HEAP32[$905>>2] = $904;
     } else {
      $906 = $8;
      $907 = ((($906)) + 17|0);
      $908 = HEAP8[$907>>0]|0;
      $909 = $908&255;
      $910 = ($909|0)!=(0);
      if (!($910)) {
       break;
      }
      $911 = ((($28)) + 24|0);
      HEAP32[$911>>2] = 0;
      $912 = $8;
      __Z16InterpretPhonemeP10TranslatoriP12PHONEME_LISTP12PHONEME_DATAP12WORD_PH_DATA(0,0,$912,$26,0);
      $913 = ((($28)) + 4|0);
      HEAP32[$913>>2] = 1;
      $914 = ((($26)) + 108|0);
      $915 = ((($914)) + 8|0);
      $916 = HEAP32[$915>>2]|0;
      $917 = ((($28)) + 36|0);
      HEAP32[$917>>2] = $916;
      $918 = ((($26)) + 108|0);
      $919 = ((($918)) + 12|0);
      $920 = HEAP32[$919>>2]|0;
      $921 = ((($28)) + 40|0);
      HEAP32[$921>>2] = $920;
      $922 = ((($26)) + 68|0);
      $923 = ((($922)) + 12|0);
      $924 = HEAP32[$923>>2]|0;
      $925 = ((($28)) + 20|0);
      HEAP32[$925>>2] = $924;
      $926 = ($924|0)!=(0);
      if (!($926)) {
       break;
      }
      $927 = ((($26)) + 88|0);
      $928 = ((($927)) + 12|0);
      $929 = HEAP32[$928>>2]|0;
      $930 = ((($28)) + 24|0);
      HEAP32[$930>>2] = $929;
     }
    } while(0);
    $931 = $19;
    $932 = $10;
    $933 = $13;
    (__Z8DoSpect2P11PHONEME_TABiP10FMT_PARAMSP12PHONEME_LISTi($931,2,$28,$932,$933)|0);
    break;
   }
   default: {
   }
   }
  } while(0);
  $934 = HEAP32[19134]|0;
  $935 = (($934) + 1)|0;
  HEAP32[19134] = $935;
 }
 if ((label|0) == 16) {
  $3 = 1;
  $942 = $3;
  STACKTOP = sp;return ($942|0);
 }
 __ZL8EndPitchi(1);
 $936 = $5;
 $937 = HEAP32[$936>>2]|0;
 $938 = ($937|0)>(0);
 if ($938) {
  $939 = HEAP32[10481]|0;
  $940 = HEAP32[19170]|0;
  __Z8DoMarkeriiii(5,$939,0,$940);
  $941 = $5;
  HEAP32[$941>>2] = 0;
 }
 $3 = 0;
 $942 = $3;
 STACKTOP = sp;return ($942|0);
}
function __ZL12EndAmplitudev() {
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[19133]|0;
 $1 = ($0|0)>(0);
 if (!($1)) {
  return;
 }
 $2 = HEAP32[19116]|0;
 $3 = (80944 + ($2<<4)|0);
 $4 = ((($3)) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)==(0);
 if ($6) {
  $7 = HEAP32[19133]|0;
  $8 = HEAP32[19116]|0;
  $9 = (80944 + ($8<<4)|0);
  $10 = ((($9)) + 4|0);
  HEAP32[$10>>2] = $7;
 }
 HEAP32[19133] = 0;
 return;
}
function __ZL11DoAmplitudeiPh($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $5 = HEAP32[20917]|0;
 HEAP32[19116] = $5;
 HEAP32[19133] = 0;
 $6 = HEAP32[20917]|0;
 $7 = (80944 + ($6<<4)|0);
 $4 = $7;
 $8 = $4;
 HEAP32[$8>>2] = 8;
 $9 = $4;
 $10 = ((($9)) + 4|0);
 HEAP32[$10>>2] = 0;
 $11 = $3;
 $12 = $11;
 $13 = $4;
 $14 = ((($13)) + 8|0);
 HEAP32[$14>>2] = $12;
 $15 = $2;
 $16 = $4;
 $17 = ((($16)) + 12|0);
 HEAP32[$17>>2] = $15;
 __Z8WcmdqIncv();
 STACKTOP = sp;return;
}
function __ZL7DoPitchPhii($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 __ZL8EndPitchi(0);
 $7 = $4;
 $8 = ($7|0)==(255);
 if ($8) {
  $4 = 55;
  $5 = 76;
  $9 = HEAP32[211]|0;
  $3 = $9;
 }
 $10 = HEAP32[20917]|0;
 HEAP32[19115] = $10;
 HEAP32[19126] = 0;
 $11 = $5;
 $12 = ($11|0)<(0);
 if ($12) {
  $5 = 0;
 }
 $13 = HEAP32[20917]|0;
 $14 = (80944 + ($13<<4)|0);
 $6 = $14;
 $15 = $6;
 HEAP32[$15>>2] = 9;
 $16 = $6;
 $17 = ((($16)) + 4|0);
 HEAP32[$17>>2] = 0;
 $18 = $3;
 $19 = $18;
 $20 = $6;
 $21 = ((($20)) + 8|0);
 HEAP32[$21>>2] = $19;
 $22 = $4;
 $23 = $22 << 16;
 $24 = $5;
 $25 = (($23) + ($24))|0;
 $26 = $6;
 $27 = ((($26)) + 12|0);
 HEAP32[$27>>2] = $25;
 __Z8WcmdqIncv();
 STACKTOP = sp;return;
}
function __ZL13StartSyllablev() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[19127]|0;
 $1 = HEAP32[19128]|0;
 $2 = ($0|0)==($1|0);
 if (!($2)) {
  return;
 }
 $3 = HEAP32[20917]|0;
 HEAP32[19127] = $3;
 return;
}
function __Z12SynthOnTimerv() {
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = HEAP32[19144]|0;
 $2 = ($1|0)!=(0);
 if (!($2)) {
  $3 = (__Z17WavegenCloseSoundv()|0);
  $0 = $3;
  $10 = $0;
  STACKTOP = sp;return ($10|0);
 }
 while(1) {
  $4 = (__Z9WcmdqUsedv()|0);
  $5 = ($4|0)>(0);
  if ($5) {
   (__Z16WavegenOpenSoundv()|0);
  }
  $6 = (__Z8GenerateP12PHONEME_LISTPii(51088,51084,1)|0);
  $7 = ($6|0)==(0);
  if ($7) {
   (__Z15SpeakNextClauseP8_IO_FILEPKvi(0,0,1)|0);
  }
  $8 = HEAP32[19168]|0;
  $9 = ($8|0)!=(0);
  if (!($9)) {
   break;
  }
 }
 $0 = 0;
 $10 = $0;
 STACKTOP = sp;return ($10|0);
}
function __Z15SpeakNextClauseP8_IO_FILEPKvi($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0;
 var $9 = 0, $or$cond = 0, $or$cond3 = 0, $or$cond5 = 0, $or$cond7 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $vararg_buffer = sp;
 $7 = sp + 12|0;
 $8 = sp + 8|0;
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $10 = $6;
 $11 = ($10|0)==(4);
 if ($11) {
  $12 = HEAP32[19145]|0;
  $13 = ($12|0)==(0|0);
  $14 = HEAP32[19146]|0;
  $15 = ($14|0)==(0|0);
  $or$cond = $13 & $15;
  if ($or$cond) {
   $3 = 0;
   $83 = $3;
   STACKTOP = sp;return ($83|0);
  } else {
   $3 = 1;
   $83 = $3;
   STACKTOP = sp;return ($83|0);
  }
 }
 $16 = $6;
 $17 = ($16|0)==(2);
 if ($17) {
  HEAP32[19144] = 0;
  HEAP32[19146] = 0;
  $18 = HEAP32[19145]|0;
  $19 = ($18|0)!=(0|0);
  if ($19) {
   $20 = HEAP32[19145]|0;
   (_fclose($20)|0);
   HEAP32[19145] = 0;
  }
  HEAP32[12771] = 0;
  __Z9WcmdqStopv();
  $3 = 0;
  $83 = $3;
  STACKTOP = sp;return ($83|0);
 }
 $21 = $6;
 $22 = ($21|0)==(3);
 if ($22) {
  $23 = HEAP32[19147]|0;
  $24 = ($23|0)==(0);
  if ($24) {
   HEAP32[19144] = 0;
   HEAP32[19147] = 2;
  } else {
   (__Z16WavegenOpenSoundv()|0);
   HEAP32[19144] = 1;
   HEAP32[19147] = 0;
   (__Z8GenerateP12PHONEME_LISTPii(51088,51084,0)|0);
  }
  $3 = 0;
  $83 = $3;
  STACKTOP = sp;return ($83|0);
 }
 $25 = $6;
 $26 = ($25|0)==(5);
 if ($26) {
  HEAP32[12771] = 0;
  __Z9WcmdqStopv();
  $3 = 0;
  $83 = $3;
  STACKTOP = sp;return ($83|0);
 }
 $27 = $4;
 $28 = ($27|0)!=(0|0);
 $29 = $5;
 $30 = ($29|0)!=(0|0);
 $or$cond3 = $28 | $30;
 if ($or$cond3) {
  $31 = $4;
  HEAP32[19145] = $31;
  $32 = $5;
  HEAP32[19146] = $32;
  HEAP32[19144] = 1;
  HEAP32[19147] = 0;
 }
 $33 = HEAP32[19145]|0;
 $34 = ($33|0)==(0|0);
 $35 = HEAP32[19146]|0;
 $36 = ($35|0)==(0|0);
 $or$cond5 = $34 & $36;
 if ($or$cond5) {
  HEAP32[19168] = 0;
  HEAP32[19144] = 0;
  $3 = 0;
  $83 = $3;
  STACKTOP = sp;return ($83|0);
 }
 $37 = HEAP32[19145]|0;
 $38 = ($37|0)!=(0|0);
 if ($38) {
  $39 = HEAP32[19145]|0;
  $40 = (_feof($39)|0);
  $41 = ($40|0)!=(0);
  if ($41) {
   HEAP32[19144] = 0;
   $42 = HEAP32[19145]|0;
   (_fclose($42)|0);
   HEAP32[19145] = 0;
   $3 = 0;
   $83 = $3;
   STACKTOP = sp;return ($83|0);
  }
 }
 $43 = HEAP32[11251]|0;
 $44 = HEAP32[1124]|0;
 $45 = ((($44)) + 60|0);
 $46 = HEAP32[$45>>2]|0;
 $47 = ($43|0)!=($46|0);
 if ($47) {
  $48 = HEAP32[1124]|0;
  $49 = ((($48)) + 60|0);
  $50 = HEAP32[$49>>2]|0;
  __Z18SelectPhonemeTablei($50);
 }
 $51 = HEAP32[19149]|0;
 $52 = HEAP32[19145]|0;
 $53 = HEAP32[19146]|0;
 $54 = (__Z15TranslateClauseP10TranslatorP8_IO_FILEPKvPiPPc($51,$52,$53,$7,$8)|0);
 HEAP32[19146] = $54;
 $55 = HEAP32[19149]|0;
 $56 = HEAP32[$7>>2]|0;
 __Z11CalcPitchesP10Translatori($55,$56);
 $57 = HEAP32[19149]|0;
 __Z11CalcLengthsP10Translator($57);
 $58 = HEAP32[19154]|0;
 $59 = $58 & 15;
 $60 = ($59|0)!=(0);
 $61 = HEAP32[10452]|0;
 $62 = ($61|0)!=(0|0);
 $or$cond7 = $60 | $62;
 if ($or$cond7) {
  $63 = HEAP32[19154]|0;
  $64 = (__Z26GetTranslatedPhonemeStringi($63)|0);
  $9 = $64;
  $65 = HEAP32[19154]|0;
  $66 = $65 & 15;
  $67 = ($66|0)!=(0);
  if ($67) {
   $68 = HEAP32[19151]|0;
   $69 = $9;
   HEAP32[$vararg_buffer>>2] = $69;
   (_fprintf($68,23003,$vararg_buffer)|0);
  }
  $70 = HEAP32[10452]|0;
  $71 = ($70|0)!=(0|0);
  if ($71) {
   $72 = HEAP32[10452]|0;
   $73 = $9;
   (FUNCTION_TABLE_ii[$72 & 31]($73)|0);
  }
 }
 $74 = HEAP32[19168]|0;
 $75 = ($74|0)!=(0);
 if ($75) {
  HEAP32[12771] = 0;
  $3 = 1;
  $83 = $3;
  STACKTOP = sp;return ($83|0);
 }
 (__Z8GenerateP12PHONEME_LISTPii(51088,51084,0)|0);
 (__Z16WavegenOpenSoundv()|0);
 $76 = HEAP32[$8>>2]|0;
 $77 = ($76|0)!=(0|0);
 if ($77) {
  $78 = HEAP32[$8>>2]|0;
  $79 = (__Z16LoadVoiceVariantPKci($78,0)|0);
  HEAP32[19148] = $79;
 }
 $80 = HEAP32[19148]|0;
 $81 = ($80|0)!=(0|0);
 if ($81) {
  $82 = HEAP32[1124]|0;
  __Z13DoVoiceChangeP7voice_t($82);
  HEAP32[19148] = 0;
 }
 $3 = 1;
 $83 = $3;
 STACKTOP = sp;return ($83|0);
}
function __Z13SetLengthModsP10Translatori($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $5 = $3;
 $6 = (($5|0) % 100)&-1;
 $7 = (3020 + ($6<<2)|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = $2;
 $10 = ((($9)) + 192|0);
 HEAP32[$10>>2] = $8;
 $11 = $2;
 $12 = ((($11)) + 196|0);
 HEAP32[$12>>2] = $8;
 $13 = $3;
 $14 = (($13|0) / 100)&-1;
 $4 = $14;
 $15 = ($14|0)!=(0);
 if (!($15)) {
  STACKTOP = sp;return;
 }
 $16 = $4;
 $17 = (3020 + ($16<<2)|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = $2;
 $20 = ((($19)) + 196|0);
 HEAP32[$20>>2] = $18;
 STACKTOP = sp;return;
}
function __Z7IsAlphaj($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond11 = 0, $or$cond13 = 0;
 var $or$cond15 = 0, $or$cond17 = 0, $or$cond19 = 0, $or$cond3 = 0, $or$cond5 = 0, $or$cond7 = 0, $or$cond9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $2;
 $4 = (__Z9iswalpha2i($3)|0);
 $5 = ($4|0)!=(0);
 do {
  if ($5) {
   $1 = 1;
  } else {
   $6 = $2;
   $7 = ($6>>>0)<(768);
   if ($7) {
    $1 = 0;
    break;
   }
   $8 = $2;
   $9 = ($8>>>0)>=(2305);
   $10 = $2;
   $11 = ($10>>>0)<=(3575);
   $or$cond = $9 & $11;
   $12 = $2;
   if ($or$cond) {
    $13 = $12 & 127;
    $14 = ($13>>>0)<(100);
    if ($14) {
     $1 = 1;
     break;
    }
    $15 = $2;
    $16 = (__Z11lookupwcharPKti(9808,$15)|0);
    $17 = ($16|0)!=(0);
    if ($17) {
     $1 = 1;
     break;
    }
    $18 = $2;
    $19 = ($18>>>0)>=(3450);
    $20 = $2;
    $21 = ($20>>>0)<=(3455);
    $or$cond3 = $19 & $21;
    if ($or$cond3) {
     $1 = 1;
     break;
    } else {
     $1 = 0;
     break;
    }
   }
   $22 = ($12>>>0)>=(1456);
   $23 = $2;
   $24 = ($23>>>0)<=(1474);
   $or$cond5 = $22 & $24;
   if ($or$cond5) {
    $1 = 1;
    break;
   }
   $25 = $2;
   $26 = ($25|0)==(1541);
   if ($26) {
    $1 = 1;
    break;
   }
   $27 = $2;
   $28 = ($27|0)==(1648);
   if (!($28)) {
    $29 = $2;
    $30 = ($29>>>0)>=(1611);
    $31 = $2;
    $32 = ($31>>>0)<=(1630);
    $or$cond7 = $30 & $32;
    if (!($or$cond7)) {
     $33 = $2;
     $34 = ($33>>>0)>=(768);
     $35 = $2;
     $36 = ($35>>>0)<=(879);
     $or$cond9 = $34 & $36;
     if ($or$cond9) {
      $1 = 1;
      break;
     }
     $37 = $2;
     $38 = ($37>>>0)>=(1920);
     $39 = $2;
     $40 = ($39>>>0)<=(1969);
     $or$cond11 = $38 & $40;
     if ($or$cond11) {
      $1 = 1;
      break;
     }
     $41 = $2;
     $42 = ($41>>>0)>=(3904);
     $43 = $2;
     $44 = ($43>>>0)<=(4028);
     $or$cond13 = $42 & $44;
     if ($or$cond13) {
      $1 = 1;
      break;
     }
     $45 = $2;
     $46 = ($45>>>0)>=(4352);
     $47 = $2;
     $48 = ($47>>>0)<=(4607);
     $or$cond15 = $46 & $48;
     if ($or$cond15) {
      $1 = 1;
      break;
     }
     $49 = $2;
     $50 = ($49>>>0)>=(10240);
     $51 = $2;
     $52 = ($51>>>0)<=(10495);
     $or$cond17 = $50 & $52;
     if ($or$cond17) {
      $1 = 1;
      break;
     }
     $53 = $2;
     $54 = ($53>>>0)>(12352);
     $55 = $2;
     $56 = ($55>>>0)<=(42752);
     $or$cond19 = $54 & $56;
     if ($or$cond19) {
      $1 = 1;
      break;
     } else {
      $1 = 0;
      break;
     }
    }
   }
   $1 = 1;
  }
 } while(0);
 $57 = $1;
 STACKTOP = sp;return ($57|0);
}
function __Z11lookupwcharPKti($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $5 = 0;
 while(1) {
  $6 = $5;
  $7 = $3;
  $8 = (($7) + ($6<<1)|0);
  $9 = HEAP16[$8>>1]|0;
  $10 = $9&65535;
  $11 = ($10|0)!=(0);
  if (!($11)) {
   label = 6;
   break;
  }
  $12 = $5;
  $13 = $3;
  $14 = (($13) + ($12<<1)|0);
  $15 = HEAP16[$14>>1]|0;
  $16 = $15&65535;
  $17 = $4;
  $18 = ($16|0)==($17|0);
  $19 = $5;
  $20 = (($19) + 1)|0;
  if ($18) {
   label = 4;
   break;
  }
  $5 = $20;
 }
 if ((label|0) == 4) {
  $2 = $20;
  $21 = $2;
  STACKTOP = sp;return ($21|0);
 }
 else if ((label|0) == 6) {
  $2 = 0;
  $21 = $2;
  STACKTOP = sp;return ($21|0);
 }
 return (0)|0;
}
function __Z9IsDigit09j($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $2;
 $4 = ($3>>>0)>=(48);
 $5 = $2;
 $6 = ($5>>>0)<=(57);
 $or$cond = $4 & $6;
 if ($or$cond) {
  $1 = 1;
 } else {
  $1 = 0;
 }
 $7 = $1;
 STACKTOP = sp;return ($7|0);
}
function __Z7IsDigitj($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $2;
 $4 = (_iswdigit($3)|0);
 $5 = ($4|0)!=(0);
 do {
  if ($5) {
   $1 = 1;
  } else {
   $6 = $2;
   $7 = ($6>>>0)>=(2406);
   $8 = $2;
   $9 = ($8>>>0)<=(2415);
   $or$cond = $7 & $9;
   if ($or$cond) {
    $1 = 1;
    break;
   } else {
    $1 = 0;
    break;
   }
  }
 } while(0);
 $10 = $1;
 STACKTOP = sp;return ($10|0);
}
function __Z7IsSpacej($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $2;
 $4 = ($3|0)==(0);
 do {
  if ($4) {
   $1 = 0;
  } else {
   $5 = $2;
   $6 = ($5>>>0)>=(9472);
   $7 = $2;
   $8 = ($7>>>0)<(9632);
   $or$cond = $6 & $8;
   if ($or$cond) {
    $1 = 1;
    break;
   }
   $9 = $2;
   $10 = ($9>>>0)>=(65529);
   $11 = $2;
   $12 = ($11>>>0)<=(65535);
   $or$cond3 = $10 & $12;
   if ($or$cond3) {
    $1 = 1;
    break;
   } else {
    $13 = $2;
    $14 = (_iswspace($13)|0);
    $1 = $14;
    break;
   }
  }
 } while(0);
 $15 = $1;
 STACKTOP = sp;return ($15|0);
}
function __Z16DeleteTranslatorP10Translator($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = ((($2)) + 808|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)!=(0|0);
 if ($5) {
  $6 = $1;
  $7 = ((($6)) + 808|0);
  $8 = HEAP32[$7>>2]|0;
  __Z4FreePv($8);
 }
 $9 = $1;
 __Z4FreePv($9);
 STACKTOP = sp;return;
}
function __Z12lookupwchar2PKti($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $5 = 0;
 while(1) {
  $6 = $5;
  $7 = $3;
  $8 = (($7) + ($6<<1)|0);
  $9 = HEAP16[$8>>1]|0;
  $10 = $9&65535;
  $11 = ($10|0)!=(0);
  if (!($11)) {
   label = 6;
   break;
  }
  $12 = $5;
  $13 = $3;
  $14 = (($13) + ($12<<1)|0);
  $15 = HEAP16[$14>>1]|0;
  $16 = $15&65535;
  $17 = $4;
  $18 = ($16|0)==($17|0);
  $19 = $5;
  if ($18) {
   label = 4;
   break;
  }
  $25 = (($19) + 2)|0;
  $5 = $25;
 }
 if ((label|0) == 4) {
  $20 = (($19) + 1)|0;
  $21 = $3;
  $22 = (($21) + ($20<<1)|0);
  $23 = HEAP16[$22>>1]|0;
  $24 = $23&65535;
  $2 = $24;
  $26 = $2;
  STACKTOP = sp;return ($26|0);
 }
 else if ((label|0) == 6) {
  $2 = 0;
  $26 = $2;
  STACKTOP = sp;return ($26|0);
 }
 return (0)|0;
}
function __Z9IsBracketi($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $2;
 $4 = ($3|0)>=(8212);
 $5 = $2;
 $6 = ($5|0)<=(8223);
 $or$cond = $4 & $6;
 if ($or$cond) {
  $1 = 1;
  $9 = $1;
  STACKTOP = sp;return ($9|0);
 } else {
  $7 = $2;
  $8 = (__Z11lookupwcharPKti(9814,$7)|0);
  $1 = $8;
  $9 = $1;
  STACKTOP = sp;return ($9|0);
 }
 return (0)|0;
}
function __Z8utf8_outjPc($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $3 = $0;
 $4 = $1;
 $8 = $3;
 $9 = ($8>>>0)<(128);
 $10 = $3;
 if ($9) {
  $11 = $10&255;
  $12 = $4;
  HEAP8[$12>>0] = $11;
  $2 = 1;
  $50 = $2;
  STACKTOP = sp;return ($50|0);
 }
 $13 = ($10>>>0)>=(1114112);
 if ($13) {
  $14 = $4;
  HEAP8[$14>>0] = 32;
  $2 = 1;
  $50 = $2;
  STACKTOP = sp;return ($50|0);
 }
 $15 = $3;
 $16 = ($15>>>0)<(2048);
 do {
  if ($16) {
   $5 = 1;
  } else {
   $17 = $3;
   $18 = ($17>>>0)<(65536);
   if ($18) {
    $5 = 2;
    break;
   } else {
    $5 = 3;
    break;
   }
  }
 } while(0);
 $19 = $5;
 $20 = ($19*6)|0;
 $7 = $20;
 $21 = $5;
 $22 = (23308 + ($21)|0);
 $23 = HEAP8[$22>>0]|0;
 $24 = $23&255;
 $25 = $3;
 $26 = $7;
 $27 = $25 >>> $26;
 $28 = $24 | $27;
 $29 = $28&255;
 $30 = $4;
 HEAP8[$30>>0] = $29;
 $6 = 0;
 while(1) {
  $31 = $6;
  $32 = $5;
  $33 = ($31|0)<($32|0);
  if (!($33)) {
   break;
  }
  $34 = $7;
  $35 = (($34) - 6)|0;
  $7 = $35;
  $36 = $3;
  $37 = $7;
  $38 = $36 >>> $37;
  $39 = $38 & 63;
  $40 = (128 + ($39))|0;
  $41 = $40&255;
  $42 = $6;
  $43 = (($42) + 1)|0;
  $44 = $4;
  $45 = (($44) + ($43)|0);
  HEAP8[$45>>0] = $41;
  $46 = $6;
  $47 = (($46) + 1)|0;
  $6 = $47;
 }
 $48 = $5;
 $49 = (($48) + 1)|0;
 $2 = $49;
 $50 = $2;
 STACKTOP = sp;return ($50|0);
}
function __Z11utf8_nbytesPKc($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $4 = $2;
 $5 = HEAP8[$4>>0]|0;
 $3 = $5;
 $6 = $3;
 $7 = $6&255;
 $8 = ($7|0)<(128);
 do {
  if ($8) {
   $1 = 1;
  } else {
   $9 = $3;
   $10 = $9&255;
   $11 = ($10|0)<(224);
   if ($11) {
    $1 = 2;
    break;
   }
   $12 = $3;
   $13 = $12&255;
   $14 = ($13|0)<(240);
   if ($14) {
    $1 = 3;
    break;
   } else {
    $1 = 4;
    break;
   }
  }
 } while(0);
 $15 = $1;
 STACKTOP = sp;return ($15|0);
}
function __Z8utf8_in2PiPKci($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 while(1) {
  $9 = $4;
  $10 = HEAP8[$9>>0]|0;
  $11 = $10 << 24 >> 24;
  $12 = $11 & 192;
  $13 = ($12|0)==(128);
  if (!($13)) {
   break;
  }
  $14 = $5;
  $15 = ($14|0)!=(0);
  $16 = $4;
  if ($15) {
   $17 = ((($16)) + -1|0);
   $4 = $17;
   continue;
  } else {
   $18 = ((($16)) + 1|0);
   $4 = $18;
   continue;
  }
 }
 $7 = 0;
 $19 = $4;
 $20 = ((($19)) + 1|0);
 $4 = $20;
 $21 = HEAP8[$19>>0]|0;
 $22 = $21 << 24 >> 24;
 $6 = $22;
 $23 = $22 & 128;
 $24 = ($23|0)!=(0);
 if (!($24)) {
  $53 = $6;
  $54 = $3;
  HEAP32[$54>>2] = $53;
  $55 = $7;
  $56 = (($55) + 1)|0;
  STACKTOP = sp;return ($56|0);
 }
 $25 = $6;
 $26 = $25 & 224;
 $27 = ($26|0)==(192);
 do {
  if ($27) {
   $7 = 1;
  } else {
   $28 = $6;
   $29 = $28 & 240;
   $30 = ($29|0)==(224);
   if ($30) {
    $7 = 2;
    break;
   }
   $31 = $6;
   $32 = $31 & 248;
   $33 = ($32|0)==(240);
   if ($33) {
    $7 = 3;
   }
  }
 } while(0);
 $34 = $7;
 $35 = (23312 + ($34)|0);
 $36 = HEAP8[$35>>0]|0;
 $37 = $36&255;
 $38 = $6;
 $39 = $38 & $37;
 $6 = $39;
 $8 = 0;
 while(1) {
  $40 = $8;
  $41 = $7;
  $42 = ($40|0)<($41|0);
  if (!($42)) {
   break;
  }
  $43 = $6;
  $44 = $43 << 6;
  $45 = $4;
  $46 = ((($45)) + 1|0);
  $4 = $46;
  $47 = HEAP8[$45>>0]|0;
  $48 = $47 << 24 >> 24;
  $49 = $48 & 63;
  $50 = (($44) + ($49))|0;
  $6 = $50;
  $51 = $8;
  $52 = (($51) + 1)|0;
  $8 = $52;
 }
 $53 = $6;
 $54 = $3;
 HEAP32[$54>>2] = $53;
 $55 = $7;
 $56 = (($55) + 1)|0;
 STACKTOP = sp;return ($56|0);
}
function __Z7utf8_inPiPKc($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $4 = $2;
 $5 = $3;
 $6 = (__Z8utf8_in2PiPKci($4,$5,0)|0);
 STACKTOP = sp;return ($6|0);
}
function __Z8strchr_wPKci($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $7 = $0;
 $8 = $1;
 $9 = $8;
 $10 = ($9|0)>=(128);
 if ($10) {
  $6 = 0;
  $18 = $6;
  STACKTOP = sp;return ($18|0);
 } else {
  $11 = $7;
  $12 = $8;
  $4 = $11;
  $5 = $12;
  $13 = $4;
  $14 = $5;
  $2 = $13;
  $3 = $14;
  $15 = $2;
  $16 = $3;
  $17 = (_strchr($15,$16)|0);
  $6 = $17;
  $18 = $6;
  STACKTOP = sp;return ($18|0);
 }
 return (0)|0;
}
function __Z24ChangeEquivalentPhonemesP10TranslatoriPc($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0;
 var $vararg_buffer = 0, $vararg_buffer3 = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 288|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(288|0);
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer = sp;
 $16 = sp + 72|0;
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $15 = 0;
 $17 = $4;
 $18 = ((($17)) + 404|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = (46048 + (($19*48)|0)|0);
 $21 = ((($20)) + 44|0);
 $22 = HEAP32[$21>>2]|0;
 $7 = $22;
 $23 = ($22|0)==(0);
 if ($23) {
  $3 = 0;
  $122 = $3;
  STACKTOP = sp;return ($122|0);
 }
 $24 = $7;
 $25 = HEAP32[11509]|0;
 $26 = (($25) + ($24)|0);
 $11 = $26;
 while(1) {
  $27 = $11;
  $28 = HEAP8[$27>>0]|0;
  $29 = $28&255;
  $30 = ($29|0)==(0);
  if ($30) {
   label = 5;
   break;
  }
  $31 = $11;
  $32 = HEAP8[$31>>0]|0;
  $33 = $32&255;
  $34 = $5;
  $35 = ($33|0)==($34|0);
  $36 = $11;
  if ($35) {
   break;
  }
  $37 = ((($36)) + 2|0);
  $38 = HEAP8[$37>>0]|0;
  $39 = $38&255;
  $40 = $39 << 8;
  $41 = $11;
  $42 = ((($41)) + 3|0);
  $43 = HEAP8[$42>>0]|0;
  $44 = $43&255;
  $45 = (($40) + ($44))|0;
  $8 = $45;
  $46 = $8;
  $47 = $46<<2;
  $48 = $11;
  $49 = (($48) + ($47)|0);
  $11 = $49;
 }
 if ((label|0) == 5) {
  $3 = 0;
  $122 = $3;
  STACKTOP = sp;return ($122|0);
 }
 $50 = ((($36)) + 1|0);
 $51 = HEAP8[$50>>0]|0;
 $52 = $51&255;
 $15 = $52;
 $53 = HEAP32[19154]|0;
 $54 = $53 & 8;
 $55 = ($54|0)!=(0);
 if ($55) {
  $56 = $6;
  __Z14DecodePhonemesPKcPc($56,$16);
  $57 = HEAP32[19151]|0;
  $58 = $5;
  $59 = (46048 + (($58*48)|0)|0);
  $60 = $4;
  $61 = ((($60)) + 404|0);
  $62 = HEAP32[$61>>2]|0;
  $63 = (46048 + (($62*48)|0)|0);
  HEAP32[$vararg_buffer>>2] = $59;
  $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr1>>2] = $16;
  $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
  HEAP32[$vararg_ptr2>>2] = $63;
  (_fprintf($57,23316,$vararg_buffer)|0);
 }
 $64 = $6;
 $14 = $64;
 $65 = $11;
 $66 = ((($65)) + 8|0);
 $12 = $66;
 $13 = $16;
 while(1) {
  $67 = $14;
  $68 = ((($67)) + 1|0);
  $14 = $68;
  $69 = HEAP8[$67>>0]|0;
  $9 = $69;
  $70 = $69 << 24 >> 24;
  $71 = ($70|0)!=(0);
  if (!($71)) {
   break;
  }
  $72 = $15;
  $73 = ($72|0)!=(0);
  if ($73) {
   $74 = $9;
   $75 = $74 << 24 >> 24;
   $76 = $75 & 255;
   $77 = ($76|0)<(8);
   if ($77) {
    continue;
   }
  }
  $78 = $12;
  $10 = $78;
  while(1) {
   $79 = $10;
   $80 = HEAP8[$79>>0]|0;
   $81 = $80 << 24 >> 24;
   $82 = ($81|0)!=(0);
   if (!($82)) {
    break;
   }
   $83 = $10;
   $84 = ((($83)) + 1|0);
   $85 = (_strlen($84)|0);
   $8 = $85;
   $86 = $10;
   $87 = HEAP8[$86>>0]|0;
   $88 = $87 << 24 >> 24;
   $89 = $9;
   $90 = $89 << 24 >> 24;
   $91 = ($88|0)==($90|0);
   if ($91) {
    label = 17;
    break;
   }
   $98 = $8;
   $99 = (($98) + 2)|0;
   $100 = $10;
   $101 = (($100) + ($99)|0);
   $10 = $101;
  }
  if ((label|0) == 17) {
   label = 0;
   $92 = $13;
   $93 = $10;
   $94 = ((($93)) + 1|0);
   (_strcpy($92,$94)|0);
   $95 = $8;
   $96 = $13;
   $97 = (($96) + ($95)|0);
   $13 = $97;
  }
  $102 = $10;
  $103 = HEAP8[$102>>0]|0;
  $104 = $103 << 24 >> 24;
  $105 = ($104|0)==(0);
  if (!($105)) {
   continue;
  }
  $106 = $9;
  $107 = $13;
  $108 = ((($107)) + 1|0);
  $13 = $108;
  HEAP8[$107>>0] = $106;
 }
 $109 = $13;
 HEAP8[$109>>0] = 0;
 $110 = $15;
 $111 = ($110|0)!=(0);
 if ($111) {
  $112 = $4;
  __Z13SetWordStressP10TranslatorPcPjii($112,$16,0,-1,0);
 }
 $113 = $6;
 (_strcpy($113,$16)|0);
 $114 = HEAP32[19154]|0;
 $115 = $114 & 8;
 $116 = ($115|0)!=(0);
 if ($116) {
  $117 = $4;
  $118 = ((($117)) + 404|0);
  $119 = HEAP32[$118>>2]|0;
  __Z18SelectPhonemeTablei($119);
  $120 = $6;
  __Z14DecodePhonemesPKcPc($120,$16);
  $121 = HEAP32[19151]|0;
  HEAP32[$vararg_buffer3>>2] = $16;
  (_fprintf($121,23334,$vararg_buffer3)|0);
 }
 $3 = 1;
 $122 = $3;
 STACKTOP = sp;return ($122|0);
}
function __Z13TranslateWordP10TranslatorPciP8WORD_TABS1_($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$ = 0, $$12 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0;
 var $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0;
 var $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0;
 var $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0;
 var $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0;
 var $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0;
 var $298 = 0, $299 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0;
 var $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0;
 var $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0;
 var $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0;
 var $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0;
 var $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0;
 var $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0;
 var $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0;
 var $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0;
 var $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0;
 var $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0;
 var $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0;
 var $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0;
 var $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0;
 var $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0;
 var $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0;
 var $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0;
 var $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0;
 var $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0;
 var $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0;
 var $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0;
 var $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0;
 var $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0;
 var $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0;
 var $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0;
 var $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0;
 var $768 = 0, $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0, $783 = 0, $784 = 0, $785 = 0;
 var $786 = 0, $787 = 0, $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0, $799 = 0, $8 = 0, $80 = 0, $800 = 0, $801 = 0, $802 = 0;
 var $803 = 0, $804 = 0, $805 = 0, $806 = 0, $807 = 0, $808 = 0, $809 = 0, $81 = 0, $810 = 0, $811 = 0, $812 = 0, $813 = 0, $814 = 0, $815 = 0, $816 = 0, $817 = 0, $818 = 0, $819 = 0, $82 = 0, $820 = 0;
 var $821 = 0, $822 = 0, $823 = 0, $824 = 0, $825 = 0, $826 = 0, $827 = 0, $828 = 0, $829 = 0, $83 = 0, $830 = 0, $831 = 0, $832 = 0, $833 = 0, $834 = 0, $835 = 0, $836 = 0, $837 = 0, $838 = 0, $839 = 0;
 var $84 = 0, $840 = 0, $841 = 0, $842 = 0, $843 = 0, $844 = 0, $845 = 0, $846 = 0, $847 = 0, $848 = 0, $849 = 0, $85 = 0, $850 = 0, $851 = 0, $852 = 0, $853 = 0, $854 = 0, $855 = 0, $856 = 0, $857 = 0;
 var $858 = 0, $859 = 0, $86 = 0, $860 = 0, $861 = 0, $862 = 0, $863 = 0, $864 = 0, $865 = 0, $866 = 0, $867 = 0, $868 = 0, $869 = 0, $87 = 0, $870 = 0, $871 = 0, $872 = 0, $873 = 0, $874 = 0, $875 = 0;
 var $876 = 0, $877 = 0, $878 = 0, $879 = 0, $88 = 0, $880 = 0, $881 = 0, $882 = 0, $883 = 0, $884 = 0, $885 = 0, $886 = 0, $887 = 0, $888 = 0, $889 = 0, $89 = 0, $890 = 0, $891 = 0, $892 = 0, $893 = 0;
 var $894 = 0, $895 = 0, $896 = 0, $897 = 0, $898 = 0, $899 = 0, $9 = 0, $90 = 0, $900 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond = 0, $or$cond14 = 0;
 var $or$cond16 = 0, $or$cond18 = 0, $or$cond3 = 0, $or$cond5 = 0, $or$cond7 = 0, $or$cond9 = 0, $vararg_buffer = 0, $vararg_buffer19 = 0, $vararg_buffer22 = 0, $vararg_buffer27 = 0, $vararg_buffer32 = 0, $vararg_ptr25 = 0, $vararg_ptr26 = 0, $vararg_ptr30 = 0, $vararg_ptr31 = 0, $vararg_ptr35 = 0, $vararg_ptr36 = 0, dest = 0, label = 0, sp = 0;
 var stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 2160|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(2160|0);
 $vararg_buffer32 = sp + 48|0;
 $vararg_buffer27 = sp + 32|0;
 $vararg_buffer22 = sp + 16|0;
 $vararg_buffer19 = sp + 8|0;
 $vararg_buffer = sp;
 $11 = sp + 316|0;
 $17 = sp + 288|0;
 $18 = sp + 280|0;
 $23 = sp + 256|0;
 $24 = sp + 1952|0;
 $25 = sp + 1752|0;
 $26 = sp + 1552|0;
 $27 = sp + 1352|0;
 $28 = sp + 1152|0;
 $29 = sp + 952|0;
 $30 = sp + 792|0;
 $31 = sp + 632|0;
 $33 = sp + 560|0;
 $36 = sp + 240|0;
 $37 = sp + 236|0;
 $38 = sp + 232|0;
 $51 = sp + 88|0;
 $55 = sp + 72|0;
 $57 = sp + 360|0;
 $58 = sp + 64|0;
 $59 = sp + 344|0;
 $6 = $0;
 $7 = $1;
 $8 = $2;
 $9 = $3;
 $10 = $4;
 $19 = 0;
 $20 = 0;
 $21 = 0;
 $34 = 0;
 HEAP32[$38>>2] = 0;
 $39 = 0;
 $40 = 0;
 $45 = 0;
 $48 = 0;
 $50 = 0;
 $61 = $9;
 $62 = ($61|0)==(0|0);
 if ($62) {
  dest=$51; stop=dest+96|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
  $9 = $51;
 }
 $63 = $9;
 $64 = HEAP32[$63>>2]|0;
 $46 = $64;
 $65 = $9;
 $66 = ((($65)) + 7|0);
 $67 = HEAP8[$66>>0]|0;
 $68 = $67&255;
 $47 = $68;
 HEAP32[$17>>2] = 0;
 $69 = ((($17)) + 4|0);
 HEAP32[$69>>2] = 0;
 HEAP32[$18>>2] = 0;
 $70 = ((($18)) + 4|0);
 HEAP32[$70>>2] = 0;
 HEAP32[10458] = 0;
 HEAP8[$24>>0] = 0;
 HEAP8[$27>>0] = 0;
 HEAP8[$26>>0] = 0;
 HEAP8[$28>>0] = 0;
 $71 = $6;
 $72 = ((($71)) + 808|0);
 $73 = HEAP32[$72>>2]|0;
 $74 = ($73|0)==(0|0);
 if ($74) {
  HEAP8[120548] = 0;
  $5 = 0;
  $899 = $5;
  STACKTOP = sp;return ($899|0);
 }
 $75 = $7;
 HEAP32[$11>>2] = $75;
 $76 = HEAP32[$11>>2]|0;
 $77 = HEAP8[$76>>0]|0;
 $78 = $77 << 24 >> 24;
 $79 = ($78|0)==(32);
 if ($79) {
  $80 = HEAP32[$11>>2]|0;
  $81 = ((($80)) + 1|0);
  HEAP32[$11>>2] = $81;
 }
 $82 = HEAP32[$11>>2]|0;
 HEAP32[$23>>2] = $82;
 $83 = HEAP32[$23>>2]|0;
 (__Z7utf8_inPiPKc($37,$83)|0);
 $12 = 0;
 while(1) {
  $84 = HEAP32[$23>>2]|0;
  $85 = HEAP8[$84>>0]|0;
  $86 = $85 << 24 >> 24;
  $87 = ($86|0)!=(0);
  if ($87) {
   $88 = HEAP32[$23>>2]|0;
   $89 = HEAP8[$88>>0]|0;
   $90 = $89 << 24 >> 24;
   $91 = ($90|0)!=(32);
   $900 = $91;
  } else {
   $900 = 0;
  }
  $92 = HEAP32[$23>>2]|0;
  if (!($900)) {
   break;
  }
  $93 = (__Z7utf8_inPiPKc($38,$92)|0);
  $94 = HEAP32[$23>>2]|0;
  $95 = (($94) + ($93)|0);
  HEAP32[$23>>2] = $95;
  $96 = $12;
  $97 = (($96) + 1)|0;
  $12 = $97;
 }
 $98 = $7;
 $99 = $92;
 $100 = $98;
 $101 = (($99) - ($100))|0;
 $32 = $101;
 $102 = $32;
 $103 = ($102|0)>=(160);
 $$ = $103 ? 159 : $101;
 $32 = $$;
 $104 = $7;
 $105 = $32;
 _memcpy(($31|0),($104|0),($105|0))|0;
 $43 = 0;
 $106 = $12;
 $107 = ($106|0)==(1);
 do {
  if ($107) {
   $108 = $46;
   $109 = $108 & 4194304;
   $110 = ($109|0)!=(0);
   if ($110) {
    $111 = HEAP32[$23>>2]|0;
    $112 = ((($111)) + 1|0);
    (__Z7utf8_inPiPKc($36,$112)|0);
    $113 = HEAP32[$36>>2]|0;
    $114 = (__Z7IsAlphaj($113)|0);
    $115 = ($114|0)!=(0);
    if ($115) {
     $116 = HEAP32[$38>>2]|0;
     $117 = (__Z16AlphabetFromChari($116)|0);
     $118 = HEAP32[$36>>2]|0;
     $119 = (__Z16AlphabetFromChari($118)|0);
     $120 = ($117|0)!=($119|0);
     if (!($120)) {
      break;
     }
    }
    $43 = 1;
   }
  }
 } while(0);
 $121 = HEAP32[19160]|0;
 $122 = ($121|0)==(36);
 do {
  if ($122) {
   $123 = $12;
   $124 = ($123|0)==(1);
   if ($124) {
    $43 = 4;
    break;
   } else {
    $125 = HEAP32[$11>>2]|0;
    $126 = ((($125)) + -1|0);
    HEAP32[$11>>2] = $126;
    $127 = HEAP32[$11>>2]|0;
    HEAP8[$127>>0] = 95;
    $128 = $6;
    $129 = $9;
    $130 = (__Z14LookupDictListP10TranslatorPPcS1_PjiP8WORD_TAB($128,$11,$24,$17,0,$129)|0);
    $34 = $130;
    break;
   }
  }
 } while(0);
 $131 = HEAP32[19160]|0;
 $132 = $131 & 16;
 $133 = ($132|0)!=(0);
 L31: do {
  if ($133) {
   $134 = HEAP32[19160]|0;
   $135 = $134 & 15;
   $43 = $135;
  } else {
   $136 = $34;
   $137 = ($136|0)!=(0);
   if (!($137)) {
    $138 = $6;
    $139 = $9;
    $140 = (__Z14LookupDictListP10TranslatorPPcS1_PjiP8WORD_TAB($138,$11,$24,$17,2,$139)|0);
    $34 = $140;
   }
   $141 = HEAP32[$17>>2]|0;
   $142 = $141 & 50331648;
   $143 = ($142|0)!=(0);
   if ($143) {
    $144 = HEAP32[$23>>2]|0;
    $145 = ((($144)) + 1|0);
    $146 = HEAP8[$145>>0]|0;
    $147 = $146 << 24 >> 24;
    $148 = ($147|0)==(46);
    if ($148) {
     $149 = HEAP32[$23>>2]|0;
     $150 = ((($149)) + 1|0);
     HEAP8[$150>>0] = 32;
    }
   }
   $151 = HEAP32[$17>>2]|0;
   $152 = $151 & 536870912;
   $153 = ($152|0)!=(0);
   L41: do {
    if ($153) {
     $154 = $10;
     $155 = ($154|0)!=(0|0);
     if ($155) {
      $156 = $10;
      $157 = HEAP32[$11>>2]|0;
      (_strcpy($156,$157)|0);
     }
     $158 = HEAP32[$11>>2]|0;
     $159 = HEAP8[$158>>0]|0;
     $160 = $159 << 24 >> 24;
     HEAP32[$37>>2] = $160;
     $161 = HEAP32[$17>>2]|0;
     $162 = $161 & 127;
     $44 = $162;
     $163 = $6;
     $164 = $9;
     $165 = (__Z14LookupDictListP10TranslatorPPcS1_PjiP8WORD_TAB($163,$11,$24,$18,0,$164)|0);
     $34 = $165;
     $166 = HEAP32[$18>>2]|0;
     $167 = ($166|0)!=(0);
     if ($167) {
      $168 = HEAP32[$18>>2]|0;
      HEAP32[$17>>2] = $168;
      $169 = ((($18)) + 4|0);
      $170 = HEAP32[$169>>2]|0;
      $171 = ((($17)) + 4|0);
      HEAP32[$171>>2] = $170;
      $172 = $44;
      $173 = ($172|0)!=(0);
      if ($173) {
       $174 = HEAP32[$17>>2]|0;
       $175 = $174 & -128;
       $176 = $44;
       $177 = $175 | $176;
       HEAP32[$17>>2] = $177;
      }
     }
    } else {
     $178 = $34;
     $179 = ($178|0)==(0);
     if ($179) {
      $180 = HEAP32[$17>>2]|0;
      $181 = $180 & 128;
      $182 = ($181|0)!=(0);
      if ($182) {
       $183 = HEAP32[$17>>2]|0;
       $184 = $183 & 8192;
       $185 = ($184|0)!=(0);
       if (!($185)) {
        $186 = HEAP32[$11>>2]|0;
        HEAP32[$23>>2] = $186;
        $13 = 0;
        while(1) {
         $187 = $13;
         $188 = HEAP32[10458]|0;
         $189 = ($187|0)<($188|0);
         if (!($189)) {
          break L41;
         }
         $190 = HEAP32[$23>>2]|0;
         $191 = HEAP8[$190>>0]|0;
         $192 = $191 << 24 >> 24;
         $193 = ($192|0)==(32);
         if ($193) {
          $194 = HEAP32[$23>>2]|0;
          HEAP8[$194>>0] = 45;
          $195 = $13;
          $196 = (($195) + 1)|0;
          $13 = $196;
         }
         $197 = HEAP32[$23>>2]|0;
         $198 = ((($197)) + 1|0);
         HEAP32[$23>>2] = $198;
        }
       }
      }
     }
    }
   } while(0);
   $199 = $12;
   $200 = ($199|0)==(1);
   $201 = HEAP32[10458]|0;
   $202 = ($201|0)==(0);
   $or$cond = $200 & $202;
   if ($or$cond) {
    $203 = HEAP32[$11>>2]|0;
    $204 = $9;
    $205 = (__ZL17CheckDottedAbbrevPcP8WORD_TAB($203,$204)|0);
    $206 = ($205|0)!=(0);
    if ($206) {
     HEAP32[$17>>2] = 0;
     $207 = ((($17)) + 4|0);
     HEAP32[$207>>2] = 0;
     $43 = 1;
     $208 = HEAP32[10458]|0;
     $209 = ($208|0)!=(0);
     if ($209) {
      HEAP32[$17>>2] = 128;
     }
    }
   }
   $210 = HEAP8[$24>>0]|0;
   $211 = $210 << 24 >> 24;
   $212 = ($211|0)==(21);
   if ($212) {
    (_strcpy(120548,$24)|0);
    $5 = 0;
    $899 = $5;
    STACKTOP = sp;return ($899|0);
   }
   $213 = $47;
   $214 = ($213|0)>(0);
   $215 = $47;
   $216 = ($215|0)<(8);
   $or$cond3 = $214 & $216;
   if ($or$cond3) {
    $217 = HEAP32[$17>>2]|0;
    $218 = $217 & -16;
    $219 = $47;
    $220 = $218 | $219;
    HEAP32[$17>>2] = $220;
   }
   $221 = $34;
   $222 = ($221|0)!=(0);
   if (!($222)) {
    $223 = HEAP32[$17>>2]|0;
    $224 = $223 & 8192;
    $225 = ($224|0)!=(0);
    if ($225) {
     $43 = 1;
    }
   }
   $226 = $34;
   $227 = ($226|0)!=(0);
   if (!($227)) {
    $228 = HEAP32[$37>>2]|0;
    $229 = (_iswdigit($228)|0);
    $230 = ($229|0)!=(0);
    if ($230) {
     $231 = $6;
     (__Z6LookupP10TranslatorPKcPc($231,23339,120548)|0);
     $232 = HEAP8[120548]|0;
     $233 = $232 << 24 >> 24;
     $234 = ($233|0)==(21);
     if ($234) {
      $5 = 0;
      $899 = $5;
      STACKTOP = sp;return ($899|0);
     }
     $235 = $6;
     $236 = ((($235)) + 204|0);
     $237 = HEAP32[$236>>2]|0;
     $238 = $237 & 32768;
     $239 = ($238|0)!=(0);
     do {
      if ($239) {
       $240 = $9;
       $241 = HEAP32[$240>>2]|0;
       $242 = $241 & 2097152;
       $243 = ($242|0)!=(0);
       if ($243) {
        break;
       }
       HEAP32[$vararg_buffer>>2] = 21;
       (_sprintf(120548,23346,$vararg_buffer)|0);
       $5 = 0;
       $899 = $5;
       STACKTOP = sp;return ($899|0);
      }
     } while(0);
     $244 = $6;
     $245 = HEAP32[$11>>2]|0;
     $246 = $9;
     $247 = (__Z15TranslateNumberP10TranslatorPcS1_PjP8WORD_TABi($244,$245,$24,$17,$246,0)|0);
     $34 = $247;
    }
   }
   $248 = $34;
   $249 = ($248|0)!=(0);
   do {
    if (!($249)) {
     $250 = $46;
     $251 = $250 & 3;
     $252 = ($251|0)!=(2);
     if ($252) {
      $253 = $6;
      $254 = ((($253)) + 200|0);
      $255 = HEAP32[$254>>2]|0;
      $256 = $255 & 16777216;
      $257 = ($256|0)!=(0);
      if (!($257)) {
       $258 = $6;
       $259 = ((($258)) + 200|0);
       $260 = HEAP32[$259>>2]|0;
       $261 = $260 & 33554432;
       $262 = ($261|0)!=(0);
       if (!($262)) {
        break;
       }
       $263 = $46;
       $264 = $263 & 1;
       $265 = ($264|0)!=(0);
       if (!($265)) {
        break;
       }
      }
      $266 = $46;
      $267 = $266 & 16;
      $268 = ($267|0)!=(0);
      if (!($268)) {
       $269 = $9;
       $270 = ((($269)) + 12|0);
       $271 = HEAP32[$270>>2]|0;
       $272 = $271 & 256;
       $273 = ($272|0)!=(0);
       if ($273) {
        break;
       }
      }
      $274 = $6;
      $275 = HEAP32[$11>>2]|0;
      $276 = $9;
      $277 = (__Z14TranslateRomanP10TranslatorPcS1_P8WORD_TAB($274,$275,$24,$276)|0);
      $34 = $277;
      $278 = ($277|0)!=(0);
      if (!($278)) {
       break;
      }
      $279 = HEAP32[$17>>2]|0;
      $280 = $279 | 8192;
      HEAP32[$17>>2] = $280;
     }
    }
   } while(0);
   $281 = $46;
   $282 = $281 & 1;
   $283 = ($282|0)!=(0);
   $284 = $12;
   $285 = ($284|0)>(1);
   $or$cond5 = $283 & $285;
   if ($or$cond5) {
    $286 = HEAP32[$37>>2]|0;
    $287 = (__Z9iswalpha2i($286)|0);
    $288 = ($287|0)!=(0);
    if ($288) {
     $289 = HEAP32[19153]|0;
     $290 = $289 & 256;
     $291 = ($290|0)!=(0);
     do {
      if ($291) {
       $292 = HEAP32[$17>>2]|0;
       $293 = $292 & 8192;
       $294 = ($293|0)!=(0);
       if ($294) {
        break;
       }
       $45 = 2048;
       break L31;
      }
     } while(0);
     $295 = $34;
     $296 = ($295|0)!=(0);
     if (!($296)) {
      $297 = HEAP32[$17>>2]|0;
      $298 = $297 & 128;
      $299 = ($298|0)==(0);
      $300 = $12;
      $301 = ($300|0)<(4);
      $or$cond7 = $299 & $301;
      if (!($or$cond7)) {
       break;
      }
      $302 = $6;
      $303 = ((($302)) + 8340|0);
      $304 = HEAP32[$303>>2]|0;
      $305 = ($304|0)>(3);
      if (!($305)) {
       break;
      }
      $306 = $6;
      $307 = ((($306)) + 8336|0);
      $308 = HEAP32[$307>>2]|0;
      $309 = $6;
      $310 = ((($309)) + 8340|0);
      $311 = HEAP32[$310>>2]|0;
      $312 = ($308|0)<=($311|0);
      if (!($312)) {
       break;
      }
      $43 = 1;
     }
    }
   }
  }
 } while(0);
 $313 = $43;
 $314 = ($313|0)>(0);
 if ($314) {
  HEAP8[$24>>0] = 0;
  $19 = 0;
  $315 = $6;
  $316 = HEAP32[$11>>2]|0;
  $317 = $43;
  $318 = (__ZL22SpeakIndividualLettersP10TranslatorPcS1_i($315,$316,$24,$317)|0);
  $319 = ($318|0)==(0|0);
  if ($319) {
   $320 = $12;
   $321 = ($320|0)>(1);
   if ($321) {
    $5 = 4096;
    $899 = $5;
    STACKTOP = sp;return ($899|0);
   } else {
    $5 = 0;
    $899 = $5;
    STACKTOP = sp;return ($899|0);
   }
  } else {
   (_strcpy(120548,$24)|0);
   $322 = $46;
   $323 = $322 & 4194304;
   $324 = ($323|0)!=(0);
   if ($324) {
    $5 = 0;
    $899 = $5;
    STACKTOP = sp;return ($899|0);
   } else {
    $325 = HEAP32[$17>>2]|0;
    $326 = $325 & 128;
    $5 = $326;
    $899 = $5;
    STACKTOP = sp;return ($899|0);
   }
  }
 }
 $327 = $34;
 $328 = ($327|0)==(0);
 if ($328) {
  $52 = 0;
  $53 = 0;
  $54 = 999;
  $329 = HEAP32[$11>>2]|0;
  HEAP32[$23>>2] = $329;
  L129: while(1) {
   $330 = $54;
   $331 = ($330|0)<(3);
   $332 = $54;
   $333 = ($332|0)>(0);
   $or$cond9 = $331 & $333;
   if (!($or$cond9)) {
    $334 = $12;
    $335 = ($334|0)>(1);
    if (!($335)) {
     break;
    }
    $336 = $6;
    $337 = HEAP32[$23>>2]|0;
    $338 = $52;
    $339 = (__Z14UnpronouncableP10TranslatorPci($336,$337,$338)|0);
    $340 = ($339|0)!=(0);
    if (!($340)) {
     break;
    }
   }
   $48 = 67108864;
   $45 = 0;
   $341 = HEAP32[$23>>2]|0;
   $342 = HEAP8[$341>>0]|0;
   $343 = $342 << 24 >> 24;
   $344 = ($343|0)==(39);
   if ($344) {
    break;
   }
   $345 = $52;
   $346 = ($345|0)>(0);
   if ($346) {
    $53 = 1;
   }
   $347 = $6;
   $348 = HEAP32[$23>>2]|0;
   $349 = $53;
   $350 = (__Z15TranslateLetterP10TranslatorPcS1_i($347,$348,$27,$349)|0);
   $351 = HEAP32[$23>>2]|0;
   $352 = (($351) + ($350)|0);
   HEAP32[$23>>2] = $352;
   $353 = $52;
   $354 = (($353) + 1)|0;
   $52 = $354;
   $355 = HEAP8[$27>>0]|0;
   $356 = $355 << 24 >> 24;
   $357 = ($356|0)==(21);
   if ($357) {
    label = 97;
    break;
   }
   $54 = 0;
   while(1) {
    $361 = $54;
    $362 = HEAP32[$23>>2]|0;
    $363 = (($362) + ($361)|0);
    $364 = HEAP8[$363>>0]|0;
    $365 = $364 << 24 >> 24;
    $366 = ($365|0)!=(32);
    if (!($366)) {
     continue L129;
    }
    $367 = $54;
    $368 = (($367) + 1)|0;
    $54 = $368;
   }
  }
  if ((label|0) == 97) {
   (_strcpy(120548,$27)|0);
   $358 = ((($27)) + 1|0);
   $359 = (_strcmp($358,25529)|0);
   $360 = ($359|0)==(0);
   if ($360) {
    $5 = 4096;
    $899 = $5;
    STACKTOP = sp;return ($899|0);
   } else {
    $5 = 0;
    $899 = $5;
    STACKTOP = sp;return ($899|0);
   }
  }
  $369 = $6;
  $370 = $52;
  __Z17SetSpellingStressP10TranslatorPcii($369,$27,0,$370);
  $371 = HEAP32[$23>>2]|0;
  $372 = HEAP8[$371>>0]|0;
  $373 = $372 << 24 >> 24;
  $374 = ($373|0)!=(32);
  if ($374) {
   $375 = HEAP8[$27>>0]|0;
   $376 = $375 << 24 >> 24;
   $377 = ($376|0)!=(0);
   if ($377) {
    $378 = HEAP32[$23>>2]|0;
    $379 = HEAP8[$378>>0]|0;
    $380 = $379 << 24 >> 24;
    $381 = ($380|0)!=(39);
    if ($381) {
     $382 = HEAP32[$23>>2]|0;
     $383 = ((($382)) + -1|0);
     HEAP8[$383>>0] = 32;
    }
   }
   $384 = $6;
   $385 = HEAP32[$23>>2]|0;
   $386 = $46;
   $387 = (__Z14TranslateRulesP10TranslatorPcS1_iS1_iPj($384,$385,$24,200,$28,$386,$17)|0);
   $19 = $387;
   $388 = HEAP8[$24>>0]|0;
   $389 = $388 << 24 >> 24;
   $390 = ($389|0)==(21);
   if ($390) {
    (_strcpy(120548,$24)|0);
    $5 = 0;
    $899 = $5;
    STACKTOP = sp;return ($899|0);
   }
   $391 = HEAP8[$24>>0]|0;
   $392 = $391 << 24 >> 24;
   $393 = ($392|0)==(0);
   do {
    if ($393) {
     $394 = HEAP8[$28>>0]|0;
     $395 = $394 << 24 >> 24;
     $396 = ($395|0)==(0);
     if ($396) {
      $397 = HEAP32[$23>>2]|0;
      (__Z7utf8_inPiPKc($55,$397)|0);
      $398 = $12;
      $399 = ($398|0)==(1);
      if ($399) {
       $400 = HEAP32[$55>>2]|0;
       $401 = (__Z7IsAlphaj($400)|0);
       $402 = ($401|0)!=(0);
       if (!($402)) {
        $403 = HEAP32[$55>>2]|0;
        $404 = (__Z13IsSuperscripti($403)|0);
        $405 = ($404|0)!=(0);
        if (!($405)) {
         break;
        }
       }
       $406 = $6;
       $407 = HEAP32[$23>>2]|0;
       $408 = $43;
       $409 = (__ZL22SpeakIndividualLettersP10TranslatorPcS1_i($406,$407,$24,$408)|0);
       HEAP32[$23>>2] = $409;
       $410 = ($409|0)==(0|0);
       if ($410) {
        $5 = 0;
        $899 = $5;
        STACKTOP = sp;return ($899|0);
       } else {
        (_strcpy(120548,$24)|0);
        $5 = 0;
        $899 = $5;
        STACKTOP = sp;return ($899|0);
       }
      }
     }
    }
   } while(0);
   $411 = HEAP32[$23>>2]|0;
   $412 = ((($411)) + -1|0);
   $413 = HEAP8[$412>>0]|0;
   $414 = $413 << 24 >> 24;
   HEAP32[$36>>2] = $414;
   $34 = 0;
   $42 = 1;
   $49 = 0;
   L173: while(1) {
    $415 = $49;
    $416 = ($415|0)<(50);
    if (!($416)) {
     break;
    }
    $417 = $19;
    $418 = $417 & 1024;
    $419 = ($418|0)!=(0);
    if (!($419)) {
     break;
    }
    $420 = $42;
    $421 = ($420|0)!=(0);
    if ($421) {
     $422 = $19;
     $423 = $422 & 131072;
     $424 = ($423|0)!=(0);
     if ($424) {
      label = 127;
     } else {
      HEAP8[$25>>0] = 0;
      $425 = $6;
      $426 = HEAP32[$23>>2]|0;
      $427 = $46;
      $428 = $427 | 536870912;
      $429 = $428 | 268435456;
      $430 = (__Z14TranslateRulesP10TranslatorPcS1_iS1_iPj($425,$426,$25,200,$57,$429,$17)|0);
      $56 = $430;
      $431 = $56;
      $432 = ($431|0)!=(0);
      if ($432) {
       $433 = $6;
       $434 = HEAP32[$23>>2]|0;
       $435 = $56;
       (__Z12RemoveEndingP10TranslatorPciS1_($433,$434,$435,$30)|0);
       $436 = $6;
       $437 = HEAP32[$23>>2]|0;
       $438 = $46;
       $439 = $438 | 268435456;
       $440 = (__Z14TranslateRulesP10TranslatorPcS1_iS1_iPj($436,$437,$24,200,$28,$439,$17)|0);
       $19 = $440;
       $441 = HEAP32[$23>>2]|0;
       $442 = (_strlen($30)|0);
       _memcpy(($441|0),($30|0),($442|0))|0;
       $443 = $19;
       $444 = $443 & 1024;
       $445 = ($444|0)==(0);
       do {
        if ($445) {
         $446 = $56;
         $19 = $446;
         (_strcpy($24,$25)|0);
         (_strcpy($28,$57)|0);
         $447 = HEAP32[19154]|0;
         $448 = $447 & 8;
         $449 = ($448|0)!=(0);
         if (!($449)) {
          break;
         }
         __Z14DecodePhonemesPKcPc($28,$57);
         $450 = HEAP32[19151]|0;
         HEAP32[$vararg_buffer19>>2] = $57;
         (_fprintf($450,23349,$vararg_buffer19)|0);
        }
       } while(0);
       $42 = 0;
      } else {
       label = 127;
      }
     }
    } else {
     label = 127;
    }
    do {
     if ((label|0) == 127) {
      label = 0;
      $451 = $19;
      $21 = $451;
      $452 = $21;
      $453 = $452 & 2048;
      $454 = ($453|0)!=(0);
      if ($454) {
       $455 = $6;
       $456 = ((($455)) + 8304|0);
       HEAP32[$456>>2] = 1;
      }
      $457 = HEAP32[$36>>2]|0;
      $458 = $457&255;
      $459 = HEAP32[$23>>2]|0;
      $460 = ((($459)) + -1|0);
      HEAP8[$460>>0] = $458;
      $461 = $21;
      $462 = $461 & 131072;
      $463 = ($462|0)==(0);
      L190: do {
       if ($463) {
        $464 = $21;
        $465 = $464 & 15;
        $13 = $465;
        while(1) {
         $466 = $13;
         $467 = ($466|0)>(0);
         if (!($467)) {
          break L190;
         }
         $468 = HEAP32[$23>>2]|0;
         $469 = ((($468)) + 1|0);
         HEAP32[$23>>2] = $469;
         while(1) {
          $470 = HEAP32[$23>>2]|0;
          $471 = HEAP8[$470>>0]|0;
          $472 = $471 << 24 >> 24;
          $473 = $472 & 192;
          $474 = ($473|0)==(128);
          if (!($474)) {
           break;
          }
          $475 = HEAP32[$23>>2]|0;
          $476 = ((($475)) + 1|0);
          HEAP32[$23>>2] = $476;
         }
         $477 = $13;
         $478 = (($477) + -1)|0;
         $13 = $478;
        }
       } else {
        $15 = 1;
        HEAP8[$33>>0] = 0;
        $479 = $21;
        $480 = $479 & 63;
        $16 = $480;
        $13 = 0;
        while(1) {
         $481 = $13;
         $482 = $16;
         $483 = ($481|0)<($482|0);
         if (!($483)) {
          break;
         }
         $484 = HEAP32[$23>>2]|0;
         $485 = ((($484)) + 1|0);
         HEAP32[$23>>2] = $485;
         $486 = HEAP8[$484>>0]|0;
         $487 = $15;
         $488 = (($487) + 1)|0;
         $15 = $488;
         $489 = (($33) + ($487)|0);
         HEAP8[$489>>0] = $486;
         $490 = $21;
         $491 = $490 & 131072;
         $492 = ($491|0)!=(0);
         do {
          if ($492) {
           $493 = $13;
           $494 = $16;
           $495 = (($494) - 1)|0;
           $496 = ($493|0)==($495|0);
           if (!($496)) {
            break;
           }
           $497 = $15;
           $498 = (($497) - 1)|0;
           $499 = (($33) + ($498)|0);
           HEAP8[$499>>0] = 0;
          }
         } while(0);
         $500 = $13;
         $501 = (($500) + 1)|0;
         $13 = $501;
        }
        $502 = $15;
        $503 = (($33) + ($502)|0);
        HEAP8[$503>>0] = 0;
       }
      } while(0);
      $504 = HEAP32[$23>>2]|0;
      $505 = ((($504)) + -1|0);
      $506 = HEAP8[$505>>0]|0;
      $507 = $506 << 24 >> 24;
      HEAP32[$36>>2] = $507;
      $508 = HEAP32[$23>>2]|0;
      $509 = ((($508)) + -1|0);
      HEAP8[$509>>0] = 32;
      $42 = 1;
      $510 = $46;
      $511 = $510 | 8388608;
      $46 = $511;
      $512 = $21;
      $513 = $512 & 131072;
      $514 = ($513|0)!=(0);
      do {
       if ($514) {
        __Z8strncpy0PcPKci($59,$28,12);
        $515 = ((($33)) + 1|0);
        HEAP32[$58>>2] = $515;
        (_strcpy($26,$24)|0);
        $516 = $6;
        $517 = $9;
        $518 = (__Z14LookupDictListP10TranslatorPPcS1_PjiP8WORD_TAB($516,$58,$24,$17,0,$517)|0);
        $34 = $518;
        $519 = $34;
        $520 = ($519|0)!=(0);
        if ($520) {
         (_strcpy($26,$24)|0);
        }
        $521 = HEAP32[$17>>2]|0;
        $522 = $521 & 8192;
        $523 = ($522|0)!=(0);
        if (!($523)) {
         break;
        }
        HEAP8[$26>>0] = 0;
        $524 = $6;
        $525 = HEAP32[$58>>2]|0;
        (__ZL22SpeakIndividualLettersP10TranslatorPcS1_i($524,$525,$26,1)|0);
       } else {
        (_strcat($26,$28)|0);
       }
      } while(0);
      HEAP8[$28>>0] = 0;
      $19 = 0;
      $526 = $6;
      $527 = $9;
      $528 = (__Z14LookupDictListP10TranslatorPPcS1_PjiP8WORD_TAB($526,$23,$24,$18,1024,$527)|0);
      $34 = $528;
      $529 = HEAP32[$17>>2]|0;
      $530 = ($529|0)==(0);
      if ($530) {
       $531 = HEAP32[$18>>2]|0;
       HEAP32[$17>>2] = $531;
       $532 = ((($18)) + 4|0);
       $533 = HEAP32[$532>>2]|0;
       $534 = ((($17)) + 4|0);
       HEAP32[$534>>2] = $533;
      } else {
       $40 = 1;
      }
      $535 = $34;
      $536 = ($535|0)==(0);
      if (!($536)) {
       break;
      }
      $537 = $6;
      $538 = HEAP32[$23>>2]|0;
      $539 = $46;
      $540 = $539 & 8404992;
      $541 = (__Z14TranslateRulesP10TranslatorPcS1_iS1_iPj($537,$538,$24,200,$28,$540,$17)|0);
      $19 = $541;
      $542 = HEAP8[$24>>0]|0;
      $543 = $542 << 24 >> 24;
      $544 = ($543|0)==(21);
      if ($544) {
       label = 154;
       break L173;
      }
     }
    } while(0);
    $549 = $49;
    $550 = (($549) + 1)|0;
    $49 = $550;
   }
   if ((label|0) == 154) {
    $545 = HEAP32[$36>>2]|0;
    $546 = $545&255;
    $547 = HEAP32[$23>>2]|0;
    $548 = ((($547)) + -1|0);
    HEAP8[$548>>0] = $546;
    (_strcpy(120548,$24)|0);
    $5 = 0;
    $899 = $5;
    STACKTOP = sp;return ($899|0);
   }
   $551 = $19;
   $552 = ($551|0)!=(0);
   do {
    if ($552) {
     $553 = $19;
     $554 = $553 & 1024;
     $555 = ($554|0)!=(0);
     if (!($555)) {
      $556 = $19;
      $20 = $556;
      (_strcpy($25,$24)|0);
      $557 = $6;
      $558 = HEAP32[$23>>2]|0;
      $559 = $19;
      $560 = (__Z12RemoveEndingP10TranslatorPciS1_($557,$558,$559,$30)|0);
      $35 = $560;
      $41 = 1;
      L230: while(1) {
       $561 = $41;
       $562 = ($561|0)!=(0);
       if (!($562)) {
        label = 189;
        break;
       }
       $41 = 0;
       HEAP8[$24>>0] = 0;
       $563 = HEAP8[$26>>0]|0;
       $564 = $563 << 24 >> 24;
       $565 = ($564|0)!=(0);
       do {
        if ($565) {
         $566 = HEAP32[$36>>2]|0;
         $567 = $566&255;
         $568 = HEAP32[$23>>2]|0;
         $569 = ((($568)) + -1|0);
         HEAP8[$569>>0] = $567;
         $570 = $6;
         $571 = $35;
         $572 = $9;
         $573 = (__Z14LookupDictListP10TranslatorPPcS1_PjiP8WORD_TAB($570,$11,$24,$18,$571,$572)|0);
         $34 = $573;
         $574 = HEAP32[$23>>2]|0;
         $575 = ((($574)) + -1|0);
         HEAP8[$575>>0] = 32;
         $576 = HEAP8[$24>>0]|0;
         $577 = $576 << 24 >> 24;
         $578 = ($577|0)==(21);
         if ($578) {
          label = 162;
          break L230;
         }
         $581 = HEAP32[$17>>2]|0;
         $582 = ($581|0)==(0);
         if ($582) {
          $583 = HEAP32[$18>>2]|0;
          HEAP32[$17>>2] = $583;
          $584 = ((($18)) + 4|0);
          $585 = HEAP32[$584>>2]|0;
          $586 = ((($17)) + 4|0);
          HEAP32[$586>>2] = $585;
         }
         $587 = $34;
         $588 = ($587|0)!=(0);
         if ($588) {
          HEAP8[$26>>0] = 0;
         }
         $589 = $34;
         $590 = ($589|0)==(0);
         if (!($590)) {
          break;
         }
         $591 = HEAP32[$18>>2]|0;
         $592 = ($591|0)!=(0);
         if (!($592)) {
          break;
         }
         $40 = 1;
        }
       } while(0);
       $593 = $34;
       $594 = ($593|0)==(0);
       do {
        if ($594) {
         $595 = $6;
         $596 = $35;
         $597 = $9;
         $598 = (__Z14LookupDictListP10TranslatorPPcS1_PjiP8WORD_TAB($595,$23,$24,$18,$596,$597)|0);
         $34 = $598;
         $599 = HEAP8[$24>>0]|0;
         $600 = $599 << 24 >> 24;
         $601 = ($600|0)==(21);
         if ($601) {
          label = 172;
          break L230;
         }
         $604 = HEAP32[$17>>2]|0;
         $605 = ($604|0)==(0);
         if (!($605)) {
          break;
         }
         $606 = HEAP32[$18>>2]|0;
         HEAP32[$17>>2] = $606;
         $607 = ((($18)) + 4|0);
         $608 = HEAP32[$607>>2]|0;
         $609 = ((($17)) + 4|0);
         HEAP32[$609>>2] = $608;
        }
       } while(0);
       $610 = $34;
       $611 = ($610|0)==(0);
       if (!($611)) {
        continue;
       }
       $612 = $19;
       $613 = $612 & 16384;
       $614 = ($613|0)!=(0);
       if ($614) {
        (_strcpy($24,$25)|0);
        continue;
       }
       $615 = $35;
       $616 = $615 & 4;
       $617 = ($616|0)!=(0);
       if ($617) {
        $618 = $46;
        $619 = $618 | 8192;
        $46 = $619;
       }
       $620 = $19;
       $621 = $620 & 262144;
       $622 = ($621|0)!=(0);
       if ($622) {
        $623 = $46;
        $624 = $623 | 134217728;
        $46 = $624;
       }
       $625 = $19;
       $626 = $625 & 524288;
       $627 = ($626|0)!=(0);
       do {
        if ($627) {
         (_strcpy($29,$28)|0);
         $628 = $6;
         $629 = HEAP32[$23>>2]|0;
         $630 = $46;
         $631 = (__Z14TranslateRulesP10TranslatorPcS1_iS1_iPj($628,$629,$24,200,$28,$630,$17)|0);
         $19 = $631;
         (_strcat($28,$29)|0);
         $632 = $19;
         $633 = ($632|0)!=(0);
         if (!($633)) {
          break;
         }
         $634 = $19;
         $635 = $634 & 1024;
         $636 = ($635|0)!=(0);
         if ($636) {
          break;
         }
         $637 = $6;
         $638 = HEAP32[$23>>2]|0;
         $639 = $19;
         $640 = (__Z12RemoveEndingP10TranslatorPciS1_($637,$638,$639,0)|0);
         $35 = $640;
         $41 = 1;
        } else {
         $641 = $6;
         $642 = HEAP32[$23>>2]|0;
         $643 = $46;
         (__Z14TranslateRulesP10TranslatorPcS1_iS1_iPj($641,$642,$24,200,0,$643,$17)|0);
         $19 = 0;
        }
       } while(0);
       $644 = HEAP8[$24>>0]|0;
       $645 = $644 << 24 >> 24;
       $646 = ($645|0)==(21);
       if ($646) {
        label = 188;
        break;
       }
      }
      if ((label|0) == 162) {
       $579 = HEAP32[$23>>2]|0;
       $580 = (_strlen($30)|0);
       _memcpy(($579|0),($30|0),($580|0))|0;
       (_strcpy(120548,$24)|0);
       $5 = 0;
       $899 = $5;
       STACKTOP = sp;return ($899|0);
      }
      else if ((label|0) == 172) {
       $602 = HEAP32[$23>>2]|0;
       $603 = (_strlen($30)|0);
       _memcpy(($602|0),($30|0),($603|0))|0;
       (_strcpy(120548,$24)|0);
       $5 = 0;
       $899 = $5;
       STACKTOP = sp;return ($899|0);
      }
      else if ((label|0) == 188) {
       (_strcpy(120548,$24)|0);
       $647 = HEAP32[$23>>2]|0;
       $648 = (_strlen($30)|0);
       _memcpy(($647|0),($30|0),($648|0))|0;
       $649 = HEAP32[$36>>2]|0;
       $650 = $649&255;
       $651 = HEAP32[$23>>2]|0;
       $652 = ((($651)) + -1|0);
       HEAP8[$652>>0] = $650;
       $5 = 0;
       $899 = $5;
       STACKTOP = sp;return ($899|0);
      }
      else if ((label|0) == 189) {
       $653 = $20;
       $654 = $653 & 65536;
       $655 = ($654|0)==(0);
       if ($655) {
        $656 = $6;
        __Z14AppendPhonemesP10TranslatorPciPKc($656,$24,200,$28);
        HEAP8[$28>>0] = 0;
       }
       $657 = HEAP32[$23>>2]|0;
       $658 = (_strlen($30)|0);
       _memcpy(($657|0),($30|0),($658|0))|0;
       break;
      }
     }
    }
   } while(0);
   $659 = HEAP32[$36>>2]|0;
   $660 = $659&255;
   $661 = HEAP32[$23>>2]|0;
   $662 = ((($661)) + -1|0);
   HEAP8[$662>>0] = $660;
  }
 }
 $663 = $39;
 $664 = ($663|0)!=(0);
 if ($664) {
  label = 195;
 } else {
  $665 = $46;
  $666 = $665 & 4;
  $667 = ($666|0)!=(0);
  if ($667) {
   label = 195;
  }
 }
 do {
  if ((label|0) == 195) {
   $668 = HEAP32[$38>>2]|0;
   $669 = ($668|0)==(102);
   if ($669) {
    $670 = $6;
    (__Z14TranslateRulesP10TranslatorPcS1_iS1_iPj($670,(23366),$24,200,0,0,0)|0);
    break;
   }
   $671 = HEAP32[$38>>2]|0;
   $672 = ($671|0)==(0);
   if (!($672)) {
    $673 = HEAP32[$38>>2]|0;
    $674 = (__Z8strchr_wPKci(23369,$673)|0);
    $675 = ($674|0)==(0|0);
    if (!($675)) {
     $677 = $6;
     (__Z14TranslateRulesP10TranslatorPcS1_iS1_iPj($677,(23378),$24,200,0,0,0)|0);
     break;
    }
   }
   $676 = $6;
   (__Z14TranslateRulesP10TranslatorPcS1_iS1_iPj($676,(23374),$24,200,0,0,0)|0);
  }
 } while(0);
 $678 = $45;
 $679 = $46;
 $680 = $679 | $678;
 $46 = $680;
 $50 = 0;
 $681 = HEAP8[$28>>0]|0;
 $682 = $681 << 24 >> 24;
 $683 = ($682|0)!=(0);
 $$12 = $683 ? 2 : 0;
 $50 = $$12;
 $22 = 0;
 $14 = $26;
 while(1) {
  $684 = $14;
  $685 = HEAP8[$684>>0]|0;
  $686 = $685 << 24 >> 24;
  $687 = ($686|0)!=(0);
  if (!($687)) {
   break;
  }
  $688 = $14;
  $689 = HEAP8[$688>>0]|0;
  $690 = $689 << 24 >> 24;
  $691 = ($690|0)==(6);
  if ($691) {
   label = 205;
  } else {
   $692 = $14;
   $693 = HEAP8[$692>>0]|0;
   $694 = $693 << 24 >> 24;
   $695 = ($694|0)==(7);
   if ($695) {
    label = 205;
   }
  }
  if ((label|0) == 205) {
   label = 0;
   $696 = $14;
   $697 = HEAP8[$696>>0]|0;
   $698 = $697 << 24 >> 24;
   $22 = $698;
  }
  $699 = $14;
  $700 = ((($699)) + 1|0);
  $14 = $700;
 }
 $701 = $40;
 $702 = ($701|0)!=(0);
 $703 = $22;
 $704 = ($703|0)!=(0);
 $or$cond14 = $702 | $704;
 $705 = $6;
 do {
  if ($or$cond14) {
   $706 = ((($705)) + 24|0);
   $707 = ((($706)) + 12|0);
   $708 = HEAP32[$707>>2]|0;
   $709 = ($708|0)!=(0);
   if (!($709)) {
    $710 = $21;
    $711 = $710 & 65536;
    $712 = ($711|0)!=(0);
    if (!($712)) {
     HEAP32[$vararg_buffer27>>2] = $27;
     $vararg_ptr30 = ((($vararg_buffer27)) + 4|0);
     HEAP32[$vararg_ptr30>>2] = $26;
     $vararg_ptr31 = ((($vararg_buffer27)) + 8|0);
     HEAP32[$vararg_ptr31>>2] = $24;
     (_snprintf(120548,200,23381,$vararg_buffer27)|0);
     HEAP8[(120747)>>0] = 0;
     $728 = $6;
     __Z13SetWordStressP10TranslatorPcPjii($728,120548,$17,-1,0);
     break;
    }
   }
   $713 = $6;
   __Z13SetWordStressP10TranslatorPcPjii($713,$24,$17,3,0);
   $13 = 0;
   $60 = $26;
   while(1) {
    $714 = $60;
    $715 = HEAP8[$714>>0]|0;
    $716 = $715 << 24 >> 24;
    $717 = ($716|0)!=(0);
    if (!($717)) {
     break;
    }
    $718 = $60;
    $719 = HEAP8[$718>>0]|0;
    $720 = $719 << 24 >> 24;
    $721 = ($720|0)==(6);
    do {
     if ($721) {
      $722 = $13;
      $723 = ($722|0)==(0);
      if ($723) {
       $13 = 1;
       break;
      } else {
       $724 = $60;
       HEAP8[$724>>0] = 5;
       break;
      }
     }
    } while(0);
    $725 = $60;
    $726 = ((($725)) + 1|0);
    $60 = $726;
   }
   HEAP32[$vararg_buffer22>>2] = $27;
   $vararg_ptr25 = ((($vararg_buffer22)) + 4|0);
   HEAP32[$vararg_ptr25>>2] = $26;
   $vararg_ptr26 = ((($vararg_buffer22)) + 8|0);
   HEAP32[$vararg_ptr26>>2] = $24;
   (_snprintf(120548,200,23381,$vararg_buffer22)|0);
   HEAP8[(120747)>>0] = 0;
   $727 = $6;
   __Z13SetWordStressP10TranslatorPcPjii($727,120548,$17,-1,0);
  } else {
   $729 = $50;
   __Z13SetWordStressP10TranslatorPcPjii($705,$24,$17,-1,$729);
   HEAP32[$vararg_buffer32>>2] = $27;
   $vararg_ptr35 = ((($vararg_buffer32)) + 4|0);
   HEAP32[$vararg_ptr35>>2] = $26;
   $vararg_ptr36 = ((($vararg_buffer32)) + 8|0);
   HEAP32[$vararg_ptr36>>2] = $24;
   (_snprintf(120548,200,23381,$vararg_buffer32)|0);
   HEAP8[(120747)>>0] = 0;
  }
 } while(0);
 $730 = HEAP8[$28>>0]|0;
 $731 = $730 << 24 >> 24;
 $732 = ($731|0)!=(0);
 if ($732) {
  $733 = (_strlen(120548)|0);
  $13 = $733;
  $734 = $13;
  $735 = (199 - ($734))|0;
  $736 = (($28) + ($735)|0);
  HEAP8[$736>>0] = 0;
  $737 = $13;
  $738 = (120548 + ($737)|0);
  (_strcpy($738,$28)|0);
 }
 $739 = $46;
 $740 = $739 & 16;
 $741 = ($740|0)!=(0);
 if ($741) {
  $742 = HEAP32[$17>>2]|0;
  $743 = $742 & -268435457;
  HEAP32[$17>>2] = $743;
 }
 $744 = $46;
 $745 = $744 & 128;
 $746 = ($745|0)!=(0);
 if ($746) {
  $747 = $6;
  $748 = ((($747)) + 12|0);
  $749 = HEAP32[$748>>2]|0;
  $750 = $749 & 1048576;
  $751 = ($750|0)!=(0);
  if ($751) {
   $752 = $6;
   __Z16ChangeWordStressP10TranslatorPci($752,120548,3);
  } else {
   label = 227;
  }
 } else {
  label = 227;
 }
 do {
  if ((label|0) == 227) {
   $753 = $46;
   $754 = $753 & 3072;
   $755 = ($754|0)!=(0);
   if ($755) {
    $756 = $6;
    __Z16ChangeWordStressP10TranslatorPci($756,120548,6);
    $757 = $46;
    $758 = $757 & 2048;
    $759 = ($758|0)!=(0);
    if (!($759)) {
     break;
    }
    $760 = HEAP32[$17>>2]|0;
    $761 = $760 | 268435456;
    HEAP32[$17>>2] = $761;
    break;
   }
   $762 = HEAP32[10458]|0;
   $763 = $9;
   $764 = (($763) + (($762*12)|0)|0);
   $765 = HEAP32[$764>>2]|0;
   $766 = $765 & 16;
   $767 = ($766|0)!=(0);
   if ($767) {
    $768 = HEAP32[$17>>2]|0;
    $769 = $768 & 1536;
    $770 = ($769|0)!=(0);
    if ($770) {
     $771 = $6;
     __Z16ChangeWordStressP10TranslatorPci($771,120548,4);
     break;
    }
    $772 = HEAP32[$17>>2]|0;
    $773 = $772 & 2048;
    $774 = ($773|0)!=(0);
    $775 = HEAP32[19491]|0;
    $776 = ($775|0)!=(0);
    $or$cond16 = $774 & $776;
    if ($or$cond16) {
     $777 = $6;
     __Z16ChangeWordStressP10TranslatorPci($777,120548,3);
    }
   }
  }
 } while(0);
 $778 = $20;
 $779 = $778 & 8192;
 $780 = ($779|0)!=(0);
 if ($780) {
  $781 = $6;
  $782 = ((($781)) + 8304|0);
  HEAP32[$782>>2] = 2;
  $783 = $6;
  $784 = ((($783)) + 8312|0);
  HEAP32[$784>>2] = 2;
 }
 $785 = ((($17)) + 4|0);
 $786 = HEAP32[$785>>2]|0;
 $787 = $786 & 8;
 $788 = ($787|0)!=(0);
 do {
  if ($788) {
   $789 = $6;
   $790 = ((($789)) + 8308|0);
   HEAP32[$790>>2] = 3;
   $791 = $6;
   $792 = ((($791)) + 8304|0);
   HEAP32[$792>>2] = 0;
   $793 = $6;
   $794 = ((($793)) + 8316|0);
   HEAP32[$794>>2] = 0;
  } else {
   $795 = ((($17)) + 4|0);
   $796 = HEAP32[$795>>2]|0;
   $797 = $796 & 1;
   $798 = ($797|0)!=(0);
   if ($798) {
    $799 = $6;
    $800 = ((($799)) + 8304|0);
    HEAP32[$800>>2] = 2;
    $801 = $6;
    $802 = ((($801)) + 8312|0);
    HEAP32[$802>>2] = 0;
    $803 = $6;
    $804 = ((($803)) + 8316|0);
    HEAP32[$804>>2] = 0;
    break;
   }
   $805 = ((($17)) + 4|0);
   $806 = HEAP32[$805>>2]|0;
   $807 = $806 & 2;
   $808 = ($807|0)!=(0);
   if ($808) {
    $809 = $6;
    $810 = ((($809)) + 8304|0);
    HEAP32[$810>>2] = 0;
    $811 = $6;
    $812 = ((($811)) + 8312|0);
    HEAP32[$812>>2] = 2;
    $813 = $6;
    $814 = ((($813)) + 8308|0);
    HEAP32[$814>>2] = 0;
    $815 = $6;
    $816 = ((($815)) + 8316|0);
    HEAP32[$816>>2] = 0;
    break;
   }
   $817 = ((($17)) + 4|0);
   $818 = HEAP32[$817>>2]|0;
   $819 = $818 & 4;
   $820 = ($819|0)!=(0);
   if ($820) {
    $821 = $6;
    $822 = ((($821)) + 8316|0);
    HEAP32[$822>>2] = 2;
    $823 = $6;
    $824 = ((($823)) + 8304|0);
    HEAP32[$824>>2] = 0;
    $825 = $6;
    $826 = ((($825)) + 8312|0);
    HEAP32[$826>>2] = 0;
    $827 = $6;
    $828 = ((($827)) + 8308|0);
    HEAP32[$828>>2] = 0;
   }
  }
 } while(0);
 $829 = HEAP32[$23>>2]|0;
 $830 = HEAP8[$829>>0]|0;
 $831 = $830 << 24 >> 24;
 $832 = ($831|0)!=(0);
 do {
  if ($832) {
   $833 = ((($17)) + 4|0);
   $834 = HEAP32[$833>>2]|0;
   $835 = $834 & 256;
   $836 = ($835|0)!=(0);
   if (!($836)) {
    $837 = $6;
    $838 = ((($837)) + 8304|0);
    $839 = HEAP32[$838>>2]|0;
    $840 = ($839|0)>(0);
    if ($840) {
     $841 = $6;
     $842 = ((($841)) + 8304|0);
     $843 = HEAP32[$842>>2]|0;
     $844 = (($843) + -1)|0;
     HEAP32[$842>>2] = $844;
    }
    $845 = $6;
    $846 = ((($845)) + 8312|0);
    $847 = HEAP32[$846>>2]|0;
    $848 = ($847|0)>(0);
    if ($848) {
     $849 = $6;
     $850 = ((($849)) + 8312|0);
     $851 = HEAP32[$850>>2]|0;
     $852 = (($851) + -1)|0;
     HEAP32[$850>>2] = $852;
    }
    $853 = $6;
    $854 = ((($853)) + 8316|0);
    $855 = HEAP32[$854>>2]|0;
    $856 = ($855|0)>(0);
    if ($856) {
     $857 = $6;
     $858 = ((($857)) + 8316|0);
     $859 = HEAP32[$858>>2]|0;
     $860 = (($859) + -1)|0;
     HEAP32[$858>>2] = $860;
    }
    $861 = $6;
    $862 = ((($861)) + 8308|0);
    $863 = HEAP32[$862>>2]|0;
    $864 = ($863|0)>(0);
    if (!($864)) {
     break;
    }
    $865 = $6;
    $866 = ((($865)) + 8308|0);
    $867 = HEAP32[$866>>2]|0;
    $868 = (($867) + -1)|0;
    HEAP32[$866>>2] = $868;
   }
  }
 } while(0);
 $869 = $12;
 $870 = ($869|0)==(1);
 if ($870) {
  $871 = $6;
  $872 = ((($871)) + 324|0);
  $873 = HEAP32[$872>>2]|0;
  $874 = ($873|0)==(25966);
  if ($874) {
   $875 = HEAP32[$37>>2]|0;
   $876 = (__Z9iswalpha2i($875)|0);
   $877 = ($876|0)!=(0);
   $878 = HEAP32[$37>>2]|0;
   $879 = ($878|0)!=(105);
   $or$cond18 = $877 & $879;
   if ($or$cond18) {
    $880 = HEAP32[$17>>2]|0;
    $881 = $880 | 16777216;
    HEAP32[$17>>2] = $881;
   }
  }
 }
 $882 = $6;
 $883 = ((($882)) + 24|0);
 $884 = ((($883)) + 60|0);
 $885 = HEAP32[$884>>2]|0;
 $886 = $885 & 2;
 $887 = ($886|0)!=(0);
 if ($887) {
  $888 = HEAP32[$17>>2]|0;
  $889 = $888 & 98304;
  $890 = ($889|0)!=(0);
  if ($890) {
   $891 = $6;
   $892 = HEAP32[$17>>2]|0;
   __Z22ApplySpecialAttribute2P10TranslatorPci($891,120548,$892);
  }
 }
 $893 = $48;
 $894 = HEAP32[$17>>2]|0;
 $895 = $894 | $893;
 HEAP32[$17>>2] = $895;
 $896 = $7;
 $897 = $32;
 _memcpy(($896|0),($31|0),($897|0))|0;
 $898 = HEAP32[$17>>2]|0;
 $5 = $898;
 $899 = $5;
 STACKTOP = sp;return ($899|0);
}
function __ZL17CheckDottedAbbrevPcP8WORD_TAB($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0;
 var $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(128|0);
 $4 = sp + 24|0;
 $11 = sp + 40|0;
 $2 = $0;
 $3 = $1;
 $5 = 0;
 $12 = $2;
 $9 = $12;
 $10 = $11;
 $8 = 0;
 while(1) {
  $7 = 0;
  $13 = $9;
  $14 = (__Z7utf8_inPiPKc($4,$13)|0);
  $6 = $14;
  $15 = $6;
  $16 = $9;
  $17 = (($16) + ($15)|0);
  $18 = HEAP8[$17>>0]|0;
  $19 = $18 << 24 >> 24;
  $20 = ($19|0)==(32);
  do {
   if ($20) {
    $21 = HEAP32[$4>>2]|0;
    $22 = (__Z7IsAlphaj($21)|0);
    $23 = ($22|0)!=(0);
    if ($23) {
     $24 = $6;
     $25 = (($24) + 1)|0;
     $26 = $9;
     $27 = (($26) + ($25)|0);
     $28 = HEAP8[$27>>0]|0;
     $29 = $28 << 24 >> 24;
     $30 = ($29|0)==(46);
     if (!($30)) {
      $47 = $5;
      $48 = ($47|0)>(0);
      if (!($48)) {
       break;
      }
      $49 = $6;
      $50 = $9;
      $51 = (($50) + ($49)|0);
      $52 = HEAP8[$51>>0]|0;
      $53 = $52 << 24 >> 24;
      $54 = ($53|0)==(32);
      if (!($54)) {
       break;
      }
      $7 = 2;
      break;
     }
     $31 = $6;
     $32 = (($31) + 2)|0;
     $33 = $9;
     $34 = (($33) + ($32)|0);
     $35 = HEAP8[$34>>0]|0;
     $36 = $35 << 24 >> 24;
     $37 = ($36|0)==(32);
     if ($37) {
      $7 = 1;
      break;
     }
     $38 = $6;
     $39 = (($38) + 2)|0;
     $40 = $9;
     $41 = (($40) + ($39)|0);
     $42 = HEAP8[$41>>0]|0;
     $43 = $42 << 24 >> 24;
     $44 = ($43|0)==(39);
     if ($44) {
      $45 = $6;
      $46 = (($45) + 2)|0;
      $6 = $46;
      $7 = 2;
     }
    }
   }
  } while(0);
  $55 = $7;
  $56 = ($55|0)==(0);
  if ($56) {
   break;
  }
  $8 = 0;
  while(1) {
   $57 = $8;
   $58 = $6;
   $59 = ($57|0)<($58|0);
   if (!($59)) {
    break;
   }
   $60 = $8;
   $61 = $9;
   $62 = (($61) + ($60)|0);
   $63 = HEAP8[$62>>0]|0;
   $64 = $10;
   $65 = ((($64)) + 1|0);
   $10 = $65;
   HEAP8[$64>>0] = $63;
   $66 = $8;
   $67 = (($66) + 1)|0;
   $8 = $67;
  }
  $68 = $5;
  $69 = (($68) + 1)|0;
  $5 = $69;
  $70 = $7;
  $71 = ($70|0)==(2);
  $72 = $6;
  if ($71) {
   label = 17;
   break;
  }
  $75 = (($72) + 3)|0;
  $76 = $9;
  $77 = (($76) + ($75)|0);
  $9 = $77;
 }
 if ((label|0) == 17) {
  $73 = $9;
  $74 = (($73) + ($72)|0);
  $9 = $74;
 }
 $78 = $5;
 $79 = ($78|0)>(1);
 if (!($79)) {
  $98 = $5;
  STACKTOP = sp;return ($98|0);
 }
 $80 = $10;
 $81 = $80;
 $82 = $11;
 $83 = (($81) - ($82))|0;
 $8 = $83;
 $84 = $2;
 $85 = $8;
 _memcpy(($84|0),($11|0),($85|0))|0;
 while(1) {
  $86 = $8;
  $87 = $2;
  $88 = (($87) + ($86)|0);
  $89 = $9;
  $90 = ($88>>>0)<($89>>>0);
  if (!($90)) {
   break;
  }
  $91 = $8;
  $92 = (($91) + 1)|0;
  $8 = $92;
  $93 = $2;
  $94 = (($93) + ($91)|0);
  HEAP8[$94>>0] = 32;
 }
 $95 = $5;
 $96 = (($95) - 1)|0;
 $97 = $96<<1;
 HEAP32[10458] = $97;
 $98 = $5;
 STACKTOP = sp;return ($98|0);
}
function __ZL22SpeakIndividualLettersP10TranslatorPcS1_i($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $9 = 0;
 $10 = 0;
 $11 = 0;
 $12 = $8;
 $13 = ($12|0)>(2);
 if ($13) {
  $10 = 2;
 }
 $14 = $8;
 $15 = ($14|0)>(1);
 if ($15) {
  $16 = $10;
  $17 = $16 | 4;
  $10 = $17;
 }
 while(1) {
  $18 = $6;
  $19 = HEAP8[$18>>0]|0;
  $20 = $19 << 24 >> 24;
  $21 = ($20|0)!=(32);
  if ($21) {
   $22 = $6;
   $23 = HEAP8[$22>>0]|0;
   $24 = $23 << 24 >> 24;
   $25 = ($24|0)!=(0);
   $47 = $25;
  } else {
   $47 = 0;
  }
  $26 = $5;
  if (!($47)) {
   label = 10;
   break;
  }
  $27 = $6;
  $28 = $7;
  $29 = $10;
  $30 = $11;
  $31 = $29 | $30;
  $32 = (__Z15TranslateLetterP10TranslatorPcS1_i($26,$27,$28,$31)|0);
  $33 = $6;
  $34 = (($33) + ($32)|0);
  $6 = $34;
  $35 = $9;
  $36 = (($35) + 1)|0;
  $9 = $36;
  $11 = 1;
  $37 = $7;
  $38 = HEAP8[$37>>0]|0;
  $39 = $38 << 24 >> 24;
  $40 = ($39|0)==(21);
  if ($40) {
   label = 9;
   break;
  }
 }
 if ((label|0) == 9) {
  $41 = $7;
  (_strcpy(120548,$41)|0);
  $4 = 0;
  $46 = $4;
  STACKTOP = sp;return ($46|0);
 }
 else if ((label|0) == 10) {
  $42 = $7;
  $43 = $8;
  $44 = $9;
  __Z17SetSpellingStressP10TranslatorPcii($26,$42,$43,$44);
  $45 = $6;
  $4 = $45;
  $46 = $4;
  STACKTOP = sp;return ($46|0);
 }
 return (0)|0;
}
function __Z16Word_EmbeddedCmdv() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 while(1) {
  $2 = HEAP32[19492]|0;
  $3 = (($2) + 1)|0;
  HEAP32[19492] = $3;
  $4 = (76960 + ($2<<2)|0);
  $5 = HEAP32[$4>>2]|0;
  $0 = $5;
  $6 = $0;
  $7 = $6 >> 8;
  $1 = $7;
  $8 = $0;
  $9 = $8 & 31;
  L3: do {
   switch ($9|0) {
   case 9:  {
    $10 = $1;
    HEAP32[19160] = $10;
    break;
   }
   case 13:  {
    $11 = $1;
    HEAP32[19493] = $11;
    break;
   }
   case 12:  {
    $12 = $1;
    $13 = ($12|0)==(0);
    if ($13) {
     HEAP32[19175] = 0;
     break L3;
    } else {
     $14 = $1;
     $15 = HEAP32[19175]|0;
     $16 = (($15) + ($14))|0;
     HEAP32[19175] = $16;
     break L3;
    }
    break;
   }
   default: {
   }
   }
  } while(0);
  $17 = $0;
  $18 = $17 & 128;
  $19 = ($18|0)==(0);
  if (!($19)) {
   label = 10;
   break;
  }
  $20 = HEAP32[19492]|0;
  $21 = HEAP32[19494]|0;
  $22 = ($20|0)<($21|0);
  if (!($22)) {
   label = 10;
   break;
  }
 }
 if ((label|0) == 10) {
  STACKTOP = sp;return;
 }
}
function __Z14SetTranslator2PKc($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $1 = $0;
 $5 = 0;
 $6 = $1;
 $3 = $6;
 $7 = HEAP32[19149]|0;
 $8 = ((($7)) + 320|0);
 $9 = HEAP32[$8>>2]|0;
 $4 = $9;
 $10 = ($9|0)!=(0);
 if ($10) {
  $11 = $4;
  $12 = $11 & 2;
  $13 = ($12|0)!=(0);
  if ($13) {
   $14 = $1;
   $15 = (_strcmp($14,25529)|0);
   $16 = ($15|0)==(0);
   if ($16) {
    $3 = 25850;
    $5 = 1;
   }
  }
  $17 = $4;
  $18 = $17 & 4;
  $19 = ($18|0)!=(0);
  if ($19) {
   $20 = $1;
   $21 = (_strcmp($20,23388)|0);
   $22 = ($21|0)==(0);
   if ($22) {
    $3 = 25856;
    $5 = 2;
   }
  }
 }
 $23 = $3;
 $24 = (__Z22SelectPhonemeTableNamePKc($23)|0);
 $2 = $24;
 $25 = ($24|0)>=(0);
 if ($25) {
  $26 = HEAP32[19150]|0;
  $27 = ($26|0)!=(0|0);
  if ($27) {
   $28 = $1;
   $29 = (_strcmp($28,120928)|0);
   $30 = ($29|0)!=(0);
   if ($30) {
    $31 = HEAP32[19150]|0;
    __Z16DeleteTranslatorP10Translator($31);
    HEAP32[19150] = 0;
   }
  }
  $32 = HEAP32[19150]|0;
  $33 = ($32|0)==(0|0);
  if ($33) {
   $34 = $1;
   $35 = (__Z16SelectTranslatorPKc($34)|0);
   HEAP32[19150] = $35;
   $36 = $1;
   (_strcpy(120928,$36)|0);
   $37 = HEAP32[19150]|0;
   $38 = HEAP32[19150]|0;
   $39 = ((($38)) + 340|0);
   $40 = (__Z14LoadDictionaryP10TranslatorPKci($37,$39,0)|0);
   $41 = ($40|0)!=(0);
   if ($41) {
    $42 = HEAP32[1124]|0;
    $43 = ((($42)) + 60|0);
    $44 = HEAP32[$43>>2]|0;
    __Z18SelectPhonemeTablei($44);
    $2 = -1;
    HEAP8[120928] = 0;
   } else {
    $45 = $5;
    $46 = ($45|0)==(1);
    if ($46) {
     $47 = HEAP32[19150]|0;
     $48 = ((($47)) + 440|0);
     HEAP32[$48>>2] = 72;
     $49 = HEAP32[19150]|0;
     $50 = ((($49)) + 24|0);
     $51 = ((($50)) + 48|0);
     HEAP32[$51>>2] = 1;
    }
    $52 = $5;
    $53 = ($52|0)==(2);
    if ($53) {
     $54 = HEAP32[19150]|0;
     $55 = ((($54)) + 440|0);
     HEAP32[$55>>2] = 4;
    }
   }
   $56 = $2;
   $57 = HEAP32[19150]|0;
   $58 = ((($57)) + 404|0);
   HEAP32[$58>>2] = $56;
  }
 }
 $59 = HEAP32[19150]|0;
 $60 = ($59|0)!=(0|0);
 if (!($60)) {
  $63 = $2;
  STACKTOP = sp;return ($63|0);
 }
 $61 = HEAP32[19150]|0;
 $62 = ((($61)) + 380|0);
 HEAP8[$62>>0] = 0;
 $63 = $2;
 STACKTOP = sp;return ($63|0);
}
function __Z15UpperCaseInWordP10TranslatorPci($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $10 = $4;
 $11 = ((($10)) + 324|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = ($12|0)==(26465);
 L1: do {
  if ($13) {
   $7 = 0;
   while(1) {
    $14 = $7;
    $15 = (3044 + ($14<<2)|0);
    $16 = HEAP32[$15>>2]|0;
    $9 = $16;
    $17 = ($16|0)==(0|0);
    if ($17) {
     break L1;
    }
    $18 = $9;
    $19 = (_strlen($18)|0);
    $8 = $19;
    $20 = $8;
    $21 = (0 - ($20))|0;
    $22 = $5;
    $23 = (($22) + ($21)|0);
    $24 = HEAP8[$23>>0]|0;
    $25 = $24 << 24 >> 24;
    $26 = ($25|0)==(32);
    if ($26) {
     $27 = $8;
     $28 = (0 - ($27))|0;
     $29 = (($28) + 1)|0;
     $30 = $5;
     $31 = (($30) + ($29)|0);
     $32 = $9;
     $33 = $8;
     $34 = (($33) - 1)|0;
     $35 = (_memcmp($31,$32,$34)|0);
     $36 = ($35|0)==(0);
     if ($36) {
      $37 = $6;
      $38 = $8;
      $39 = (($38) - 1)|0;
      $40 = $9;
      $41 = (($40) + ($39)|0);
      $42 = HEAP8[$41>>0]|0;
      $43 = $42 << 24 >> 24;
      $44 = ($37|0)==($43|0);
      if ($44) {
       break;
      }
      $45 = $8;
      $46 = (($45) - 1)|0;
      $47 = $9;
      $48 = (($47) + ($46)|0);
      $49 = HEAP8[$48>>0]|0;
      $50 = $49 << 24 >> 24;
      $51 = ($50|0)==(65);
      if ($51) {
       $52 = $4;
       $53 = $6;
       $54 = (__Z7IsVowelP10Translatori($52,$53)|0);
       $55 = ($54|0)!=(0);
       if ($55) {
        break;
       }
      }
     }
    }
    $56 = $7;
    $57 = (($56) + 1)|0;
    $7 = $57;
   }
   $3 = 1;
   $58 = $3;
   STACKTOP = sp;return ($58|0);
  }
 } while(0);
 $3 = 0;
 $58 = $3;
 STACKTOP = sp;return ($58|0);
}
function __Z15TranslateClauseP10TranslatorP8_IO_FILEPKvPiPPc($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$ = 0, $$1 = 0, $$58 = 0, $$old = 0, $$old63 = 0, $10 = 0, $100 = 0, $1000 = 0, $1001 = 0, $1002 = 0, $1003 = 0, $1004 = 0, $1005 = 0, $1006 = 0, $1007 = 0, $1008 = 0, $1009 = 0, $101 = 0, $1010 = 0, $1011 = 0;
 var $1012 = 0, $1013 = 0, $1014 = 0, $1015 = 0, $1016 = 0, $1017 = 0, $1018 = 0, $1019 = 0, $102 = 0, $1020 = 0, $1021 = 0, $1022 = 0, $1023 = 0, $1024 = 0, $1025 = 0, $1026 = 0, $1027 = 0, $1028 = 0, $1029 = 0, $103 = 0;
 var $1030 = 0, $1031 = 0, $1032 = 0, $1033 = 0, $1034 = 0, $1035 = 0, $1036 = 0, $1037 = 0, $1038 = 0, $1039 = 0, $104 = 0, $1040 = 0, $1041 = 0, $1042 = 0, $1043 = 0, $1044 = 0, $1045 = 0, $1046 = 0, $1047 = 0, $1048 = 0;
 var $1049 = 0, $105 = 0, $1050 = 0, $1051 = 0, $1052 = 0, $1053 = 0, $1054 = 0, $1055 = 0, $1056 = 0, $1057 = 0, $1058 = 0, $1059 = 0, $106 = 0, $1060 = 0, $1061 = 0, $1062 = 0, $1063 = 0, $1064 = 0, $1065 = 0, $1066 = 0;
 var $1067 = 0, $1068 = 0, $1069 = 0, $107 = 0, $1070 = 0, $1071 = 0, $1072 = 0, $1073 = 0, $1074 = 0, $1075 = 0, $1076 = 0, $1077 = 0, $1078 = 0, $1079 = 0, $108 = 0, $1080 = 0, $1081 = 0, $1082 = 0, $1083 = 0, $1084 = 0;
 var $1085 = 0, $1086 = 0, $1087 = 0, $1088 = 0, $1089 = 0, $109 = 0, $1090 = 0, $1091 = 0, $1092 = 0, $1093 = 0, $1094 = 0, $1095 = 0, $1096 = 0, $1097 = 0, $1098 = 0, $1099 = 0, $11 = 0, $110 = 0, $1100 = 0, $1101 = 0;
 var $1102 = 0, $1103 = 0, $1104 = 0, $1105 = 0, $1106 = 0, $1107 = 0, $1108 = 0, $1109 = 0, $111 = 0, $1110 = 0, $1111 = 0, $1112 = 0, $1113 = 0, $1114 = 0, $1115 = 0, $1116 = 0, $1117 = 0, $1118 = 0, $1119 = 0, $112 = 0;
 var $1120 = 0, $1121 = 0, $1122 = 0, $1123 = 0, $1124 = 0, $1125 = 0, $1126 = 0, $1127 = 0, $1128 = 0, $1129 = 0, $113 = 0, $1130 = 0, $1131 = 0, $1132 = 0, $1133 = 0, $1134 = 0, $1135 = 0, $1136 = 0, $1137 = 0, $1138 = 0;
 var $1139 = 0, $114 = 0, $1140 = 0, $1141 = 0, $1142 = 0, $1143 = 0, $1144 = 0, $1145 = 0, $1146 = 0, $1147 = 0, $1148 = 0, $1149 = 0, $115 = 0, $1150 = 0, $1151 = 0, $1152 = 0, $1153 = 0, $1154 = 0, $1155 = 0, $1156 = 0;
 var $1157 = 0, $1158 = 0, $1159 = 0, $116 = 0, $1160 = 0, $1161 = 0, $1162 = 0, $1163 = 0, $1164 = 0, $1165 = 0, $1166 = 0, $1167 = 0, $1168 = 0, $1169 = 0, $117 = 0, $1170 = 0, $1171 = 0, $1172 = 0, $1173 = 0, $1174 = 0;
 var $1175 = 0, $1176 = 0, $1177 = 0, $1178 = 0, $1179 = 0, $118 = 0, $1180 = 0, $1181 = 0, $1182 = 0, $1183 = 0, $1184 = 0, $1185 = 0, $1186 = 0, $1187 = 0, $1188 = 0, $1189 = 0, $119 = 0, $1190 = 0, $1191 = 0, $1192 = 0;
 var $1193 = 0, $1194 = 0, $1195 = 0, $1196 = 0, $1197 = 0, $1198 = 0, $1199 = 0, $12 = 0, $120 = 0, $1200 = 0, $1201 = 0, $1202 = 0, $1203 = 0, $1204 = 0, $1205 = 0, $1206 = 0, $1207 = 0, $1208 = 0, $1209 = 0, $121 = 0;
 var $1210 = 0, $1211 = 0, $1212 = 0, $1213 = 0, $1214 = 0, $1215 = 0, $1216 = 0, $1217 = 0, $1218 = 0, $1219 = 0, $122 = 0, $1220 = 0, $1221 = 0, $1222 = 0, $1223 = 0, $1224 = 0, $1225 = 0, $1226 = 0, $1227 = 0, $1228 = 0;
 var $1229 = 0, $123 = 0, $1230 = 0, $1231 = 0, $1232 = 0, $1233 = 0, $1234 = 0, $1235 = 0, $1236 = 0, $1237 = 0, $1238 = 0, $1239 = 0, $124 = 0, $1240 = 0, $1241 = 0, $1242 = 0, $1243 = 0, $1244 = 0, $1245 = 0, $1246 = 0;
 var $1247 = 0, $1248 = 0, $1249 = 0, $125 = 0, $1250 = 0, $1251 = 0, $1252 = 0, $1253 = 0, $1254 = 0, $1255 = 0, $1256 = 0, $1257 = 0, $1258 = 0, $1259 = 0, $126 = 0, $1260 = 0, $1261 = 0, $1262 = 0, $1263 = 0, $1264 = 0;
 var $1265 = 0, $1266 = 0, $1267 = 0, $1268 = 0, $1269 = 0, $127 = 0, $1270 = 0, $1271 = 0, $1272 = 0, $1273 = 0, $1274 = 0, $1275 = 0, $1276 = 0, $1277 = 0, $1278 = 0, $1279 = 0, $128 = 0, $1280 = 0, $1281 = 0, $1282 = 0;
 var $1283 = 0, $1284 = 0, $1285 = 0, $1286 = 0, $1287 = 0, $1288 = 0, $1289 = 0, $129 = 0, $1290 = 0, $1291 = 0, $1292 = 0, $1293 = 0, $1294 = 0, $1295 = 0, $1296 = 0, $1297 = 0, $1298 = 0, $1299 = 0, $13 = 0, $130 = 0;
 var $1300 = 0, $1301 = 0, $1302 = 0, $1303 = 0, $1304 = 0, $1305 = 0, $1306 = 0, $1307 = 0, $1308 = 0, $1309 = 0, $131 = 0, $1310 = 0, $1311 = 0, $1312 = 0, $1313 = 0, $1314 = 0, $1315 = 0, $1316 = 0, $1317 = 0, $1318 = 0;
 var $1319 = 0, $132 = 0, $1320 = 0, $1321 = 0, $1322 = 0, $1323 = 0, $1324 = 0, $1325 = 0, $1326 = 0, $1327 = 0, $1328 = 0, $1329 = 0, $133 = 0, $1330 = 0, $1331 = 0, $1332 = 0, $1333 = 0, $1334 = 0, $1335 = 0, $1336 = 0;
 var $1337 = 0, $1338 = 0, $1339 = 0, $134 = 0, $1340 = 0, $1341 = 0, $1342 = 0, $1343 = 0, $1344 = 0, $1345 = 0, $1346 = 0, $1347 = 0, $1348 = 0, $1349 = 0, $135 = 0, $1350 = 0, $1351 = 0, $1352 = 0, $1353 = 0, $1354 = 0;
 var $1355 = 0, $1356 = 0, $1357 = 0, $1358 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0;
 var $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0;
 var $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0;
 var $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0;
 var $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0;
 var $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0;
 var $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0;
 var $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0;
 var $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0;
 var $296 = 0, $297 = 0, $298 = 0, $299 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0;
 var $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0;
 var $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0;
 var $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0;
 var $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0;
 var $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0;
 var $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0;
 var $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0;
 var $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0;
 var $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0;
 var $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0;
 var $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0;
 var $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0;
 var $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0;
 var $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0;
 var $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0;
 var $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0;
 var $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0;
 var $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0;
 var $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0;
 var $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0;
 var $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0;
 var $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0, $747 = 0;
 var $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0, $765 = 0;
 var $766 = 0, $767 = 0, $768 = 0, $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0, $783 = 0;
 var $784 = 0, $785 = 0, $786 = 0, $787 = 0, $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0, $799 = 0, $8 = 0, $80 = 0, $800 = 0;
 var $801 = 0, $802 = 0, $803 = 0, $804 = 0, $805 = 0, $806 = 0, $807 = 0, $808 = 0, $809 = 0, $81 = 0, $810 = 0, $811 = 0, $812 = 0, $813 = 0, $814 = 0, $815 = 0, $816 = 0, $817 = 0, $818 = 0, $819 = 0;
 var $82 = 0, $820 = 0, $821 = 0, $822 = 0, $823 = 0, $824 = 0, $825 = 0, $826 = 0, $827 = 0, $828 = 0, $829 = 0, $83 = 0, $830 = 0, $831 = 0, $832 = 0, $833 = 0, $834 = 0, $835 = 0, $836 = 0, $837 = 0;
 var $838 = 0, $839 = 0, $84 = 0, $840 = 0, $841 = 0, $842 = 0, $843 = 0, $844 = 0, $845 = 0, $846 = 0, $847 = 0, $848 = 0, $849 = 0, $85 = 0, $850 = 0, $851 = 0, $852 = 0, $853 = 0, $854 = 0, $855 = 0;
 var $856 = 0, $857 = 0, $858 = 0, $859 = 0, $86 = 0, $860 = 0, $861 = 0, $862 = 0, $863 = 0, $864 = 0, $865 = 0, $866 = 0, $867 = 0, $868 = 0, $869 = 0, $87 = 0, $870 = 0, $871 = 0, $872 = 0, $873 = 0;
 var $874 = 0, $875 = 0, $876 = 0, $877 = 0, $878 = 0, $879 = 0, $88 = 0, $880 = 0, $881 = 0, $882 = 0, $883 = 0, $884 = 0, $885 = 0, $886 = 0, $887 = 0, $888 = 0, $889 = 0, $89 = 0, $890 = 0, $891 = 0;
 var $892 = 0, $893 = 0, $894 = 0, $895 = 0, $896 = 0, $897 = 0, $898 = 0, $899 = 0, $9 = 0, $90 = 0, $900 = 0, $901 = 0, $902 = 0, $903 = 0, $904 = 0, $905 = 0, $906 = 0, $907 = 0, $908 = 0, $909 = 0;
 var $91 = 0, $910 = 0, $911 = 0, $912 = 0, $913 = 0, $914 = 0, $915 = 0, $916 = 0, $917 = 0, $918 = 0, $919 = 0, $92 = 0, $920 = 0, $921 = 0, $922 = 0, $923 = 0, $924 = 0, $925 = 0, $926 = 0, $927 = 0;
 var $928 = 0, $929 = 0, $93 = 0, $930 = 0, $931 = 0, $932 = 0, $933 = 0, $934 = 0, $935 = 0, $936 = 0, $937 = 0, $938 = 0, $939 = 0, $94 = 0, $940 = 0, $941 = 0, $942 = 0, $943 = 0, $944 = 0, $945 = 0;
 var $946 = 0, $947 = 0, $948 = 0, $949 = 0, $95 = 0, $950 = 0, $951 = 0, $952 = 0, $953 = 0, $954 = 0, $955 = 0, $956 = 0, $957 = 0, $958 = 0, $959 = 0, $96 = 0, $960 = 0, $961 = 0, $962 = 0, $963 = 0;
 var $964 = 0, $965 = 0, $966 = 0, $967 = 0, $968 = 0, $969 = 0, $97 = 0, $970 = 0, $971 = 0, $972 = 0, $973 = 0, $974 = 0, $975 = 0, $976 = 0, $977 = 0, $978 = 0, $979 = 0, $98 = 0, $980 = 0, $981 = 0;
 var $982 = 0, $983 = 0, $984 = 0, $985 = 0, $986 = 0, $987 = 0, $988 = 0, $989 = 0, $99 = 0, $990 = 0, $991 = 0, $992 = 0, $993 = 0, $994 = 0, $995 = 0, $996 = 0, $997 = 0, $998 = 0, $999 = 0, $or$cond = 0;
 var $or$cond10 = 0, $or$cond12 = 0, $or$cond14 = 0, $or$cond16 = 0, $or$cond18 = 0, $or$cond20 = 0, $or$cond22 = 0, $or$cond24 = 0, $or$cond26 = 0, $or$cond28 = 0, $or$cond30 = 0, $or$cond32 = 0, $or$cond34 = 0, $or$cond36 = 0, $or$cond38 = 0, $or$cond4 = 0, $or$cond40 = 0, $or$cond42 = 0, $or$cond44 = 0, $or$cond46 = 0;
 var $or$cond48 = 0, $or$cond50 = 0, $or$cond52 = 0, $or$cond55 = 0, $or$cond57 = 0, $or$cond6 = 0, $or$cond60 = 0, $or$cond62 = 0, $or$cond64 = 0, $or$cond8 = 0, $vararg_buffer = 0, $vararg_buffer65 = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 7056|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(7056|0);
 $vararg_buffer65 = sp + 8|0;
 $vararg_buffer = sp;
 $29 = sp + 4392|0;
 $30 = sp + 4388|0;
 $33 = sp + 4376|0;
 $34 = sp + 4372|0;
 $37 = sp + 4360|0;
 $39 = sp + 4352|0;
 $48 = sp + 4316|0;
 $61 = sp + 4264|0;
 $62 = sp + 4496|0;
 $63 = sp + 664|0;
 $65 = sp + 6256|0;
 $68 = sp + 644|0;
 $70 = sp + 636|0;
 $72 = sp + 628|0;
 $76 = sp + 6104|0;
 $77 = sp + 16|0;
 $22 = $0;
 $23 = $1;
 $24 = $2;
 $25 = $3;
 $26 = $4;
 HEAP32[$30>>2] = 0;
 $31 = 0;
 $32 = 0;
 HEAP32[$34>>2] = 32;
 $36 = 0;
 HEAP32[$39>>2] = 0;
 $41 = 0;
 $42 = 0;
 $43 = 1;
 $46 = 0;
 $47 = 0;
 $51 = 0;
 $52 = 0;
 $53 = 0;
 $54 = 0;
 $55 = 0;
 HEAP32[$61>>2] = 0;
 $64 = 0;
 $79 = $22;
 $80 = ($79|0)==(0|0);
 if ($80) {
  $21 = 0;
  $1357 = $21;
  STACKTOP = sp;return ($1357|0);
 }
 $81 = $24;
 HEAP32[10479] = $81;
 $82 = $24;
 HEAP32[10480] = $82;
 HEAP32[19494] = 0;
 HEAP32[19492] = 0;
 HEAP32[19175] = 0;
 HEAP32[19491] = 0;
 $83 = HEAP32[10481]|0;
 HEAP32[19172] = $83;
 $84 = ($83|0)<(0);
 $$ = $84 ? 0 : $83;
 HEAP32[19172] = $$;
 $85 = HEAP32[19171]|0;
 $86 = (($85) + 1)|0;
 HEAP32[19173] = $86;
 $27 = 0;
 while(1) {
  $87 = $27;
  $88 = ($87|0)<(800);
  if (!($88)) {
   break;
  }
  $89 = $27;
  $90 = (($62) + ($89<<1)|0);
  HEAP16[$90>>1] = 0;
  $91 = $27;
  $92 = (($91) + 1)|0;
  $27 = $92;
 }
 $93 = $22;
 $94 = $23;
 $95 = (__Z10ReadClauseP10TranslatorP8_IO_FILEPcPsPiiS5_S3_($93,$94,120948,$62,$61,800,$68,121788)|0);
 $66 = $95;
 $96 = HEAP32[11248]|0;
 $97 = ($96|0)!=(0|0);
 if ($97) {
  $98 = HEAP32[11249]|0;
  $99 = $98 & 4;
  $100 = ($99|0)!=(0);
  if ($100) {
   $101 = HEAP32[11248]|0;
   $102 = $66;
   HEAP32[$vararg_buffer>>2] = $102;
   (_fprintf($101,23422,$vararg_buffer)|0);
   $57 = 120948;
   while(1) {
    $103 = $57;
    $104 = HEAP8[$103>>0]|0;
    $105 = $104 << 24 >> 24;
    $106 = ($105|0)!=(0);
    if (!($106)) {
     break;
    }
    $107 = $57;
    $108 = HEAP8[$107>>0]|0;
    $109 = $108 << 24 >> 24;
    $110 = HEAP32[11248]|0;
    (_fputc($109,$110)|0);
    $111 = $57;
    $112 = ((($111)) + 1|0);
    $57 = $112;
   }
   $113 = HEAP32[11248]|0;
   (_fprintf($113,23434,$vararg_buffer65)|0);
   $114 = HEAP32[11248]|0;
   (_fflush($114)|0);
  }
 }
 $57 = 120948;
 $115 = HEAP32[$61>>2]|0;
 $116 = (($115) + 1)|0;
 $117 = (($62) + ($116<<1)|0);
 HEAP16[$117>>1] = 0;
 $118 = HEAP32[$61>>2]|0;
 $119 = (($118) + 2)|0;
 $120 = (($62) + ($119<<1)|0);
 HEAP16[$120>>1] = 32767;
 $121 = HEAP32[$61>>2]|0;
 $122 = (($121) + 3)|0;
 $123 = (($62) + ($122<<1)|0);
 HEAP16[$123>>1] = 0;
 $124 = $66;
 $125 = $124 & 4095;
 $126 = ($125*10)|0;
 $40 = $126;
 $127 = $66;
 $128 = $127 & 8388608;
 $129 = ($128|0)!=(0);
 if ($129) {
  $130 = $40;
  $131 = $130<<5;
  $40 = $131;
 }
 $132 = $66;
 $133 = $132 >> 12;
 $134 = $133 & 7;
 $67 = $134;
 $135 = HEAP32[$68>>2]|0;
 $136 = ($135|0)!=(0);
 if ($136) {
  $137 = HEAP32[$68>>2]|0;
  $67 = $137;
 }
 $57 = 120948;
 while(1) {
  $138 = $57;
  $139 = HEAP8[$138>>0]|0;
  $140 = $139 << 24 >> 24;
  $141 = ($140|0)!=(0);
  if (!($141)) {
   break;
  }
  $142 = $57;
  $143 = HEAP8[$142>>0]|0;
  $144 = $143 << 24 >> 24;
  $145 = (__Z8isspace2j($144)|0);
  $146 = ($145|0)!=(0);
  if (!($146)) {
   break;
  }
  $147 = $57;
  $148 = ((($147)) + 1|0);
  $57 = $148;
 }
 $149 = $57;
 $150 = HEAP8[$149>>0]|0;
 $151 = $150 << 24 >> 24;
 $152 = ($151|0)==(0);
 if ($152) {
  $153 = HEAP32[19495]|0;
  $154 = $40;
  $155 = (($154) - ($153))|0;
  $40 = $155;
  $156 = $40;
  $157 = ($156|0)<(0);
  $$1 = $157 ? 0 : $155;
  $40 = $$1;
  $158 = HEAP32[19174]|0;
  $159 = ($158|0)!=(0);
  if ($159) {
   $160 = $66;
   $161 = $160 | 524288;
   $66 = $161;
  }
  $162 = $40;
  $163 = HEAP32[19495]|0;
  $164 = (($163) + ($162))|0;
  HEAP32[19495] = $164;
  $50 = 0;
 } else {
  $165 = $40;
  HEAP32[19495] = $165;
  $166 = HEAP32[19174]|0;
  $50 = $166;
 }
 $167 = $66;
 $168 = $22;
 $169 = ((($168)) + 8360|0);
 HEAP32[$169>>2] = $167;
 $170 = $50;
 $171 = ($170|0)!=(0);
 if ($171) {
  $172 = HEAP32[19170]|0;
  $173 = (($172) + 1)|0;
  HEAP32[19170] = $173;
  $174 = HEAP32[19165]|0;
  $175 = ($174|0)>(0);
  if ($175) {
   $176 = HEAP32[19165]|0;
   $177 = (($176) + -1)|0;
   HEAP32[19165] = $177;
   $178 = HEAP32[19165]|0;
   $179 = ($178|0)==(0);
   if ($179) {
    HEAP32[19168] = 0;
   }
  }
 }
 ;HEAP16[100420>>1]=0|0;HEAP16[100420+2>>1]=0|0;HEAP16[100420+4>>1]=0|0;HEAP16[100420+6>>1]=0|0;
 HEAP8[(100422)>>0] = 10;
 HEAP32[19177] = 1;
 $180 = $22;
 $181 = ((($180)) + 8320|0);
 HEAP32[$181>>2] = 0;
 $182 = $22;
 $183 = ((($182)) + 8344|0);
 HEAP32[$183>>2] = 0;
 $184 = $22;
 $185 = ((($184)) + 8304|0);
 HEAP32[$185>>2] = 0;
 $186 = $22;
 $187 = ((($186)) + 8316|0);
 HEAP32[$187>>2] = 0;
 $188 = $22;
 $189 = ((($188)) + 8308|0);
 HEAP32[$189>>2] = 0;
 $190 = $22;
 $191 = ((($190)) + 8312|0);
 HEAP32[$191>>2] = 0;
 $192 = $22;
 $193 = ((($192)) + 400|0);
 HEAP32[$193>>2] = 0;
 $194 = $22;
 $195 = ((($194)) + 8348|0);
 HEAP32[$195>>2] = 0;
 $196 = $22;
 $197 = ((($196)) + 8352|0);
 HEAP32[$197>>2] = 0;
 $198 = $22;
 $199 = ((($198)) + 8352|0);
 $200 = ((($199)) + 4|0);
 HEAP32[$200>>2] = 0;
 $64 = 0;
 $45 = 0;
 HEAP32[$48>>2] = 0;
 $49 = 0;
 HEAP8[$65>>0] = 0;
 $201 = ((($65)) + 1|0);
 HEAP8[$201>>0] = 32;
 $202 = ((($65)) + 2|0);
 HEAP8[$202>>0] = 32;
 $27 = 3;
 HEAP32[$33>>2] = 32;
 $203 = $27;
 $204 = $203&65535;
 $205 = ((($63)) + 4|0);
 HEAP16[$205>>1] = $204;
 HEAP32[$63>>2] = 0;
 $44 = 0;
 $58 = 0;
 while(1) {
  $206 = $58;
  $207 = (($62) + ($206<<1)|0);
  $208 = HEAP16[$207>>1]|0;
  $209 = $208 << 16 >> 16;
  $210 = ($209|0)<=(0);
  $211 = $58;
  if (!($210)) {
   break;
  }
  $212 = (($211) + 1)|0;
  $58 = $212;
 }
 $213 = (($62) + ($211<<1)|0);
 $214 = HEAP16[$213>>1]|0;
 $215 = ((($63)) + 8|0);
 HEAP16[$215>>1] = $214;
 $59 = 0;
 while(1) {
  $216 = $58;
  $217 = (($62) + ($216<<1)|0);
  $218 = HEAP16[$217>>1]|0;
  $219 = $218 << 16 >> 16;
  $220 = ($219|0)!=(0);
  if (!($220)) {
   break;
  }
  $221 = $58;
  $222 = (($221) + 1)|0;
  $58 = $222;
  $223 = (($62) + ($221<<1)|0);
  $224 = HEAP16[$223>>1]|0;
  $225 = $224 << 16 >> 16;
  $226 = ($225|0)!=(-1);
  if (!($226)) {
   continue;
  }
  $227 = $59;
  $228 = (($227) + 1)|0;
  $59 = $228;
 }
 $229 = $59;
 $230 = $229&255;
 $231 = ((($63)) + 10|0);
 HEAP8[$231>>0] = $230;
 L49: while(1) {
  $232 = $44;
  $233 = ($232|0)==(0);
  $234 = $27;
  $235 = ($234|0)<(800);
  $or$cond = $233 & $235;
  $236 = HEAP32[19177]|0;
  $237 = ($236|0)<(996);
  $or$cond62 = $or$cond & $237;
  if (!($or$cond62)) {
   break;
  }
  $238 = HEAP32[$34>>2]|0;
  $35 = $238;
  $239 = $27;
  $240 = (($239) - 1)|0;
  $241 = (($65) + ($240)|0);
  (__Z8utf8_in2PiPKci($34,$241,1)|0);
  $242 = $22;
  $243 = ((($242)) + 270|0);
  $244 = HEAP8[$243>>0]|0;
  $245 = ($244<<24>>24)!=(0);
  if ($245) {
   $246 = HEAP32[$34>>2]|0;
   $247 = (__Z9IsDigit09j($246)|0);
   $248 = ($247|0)!=(0);
   if ($248) {
    $249 = $35;
    $250 = (__Z7IsAlphaj($249)|0);
    $251 = ($250|0)!=(0);
    if ($251) {
     HEAP32[$34>>2] = 97;
    }
   }
  }
  $252 = $36;
  $253 = ($252|0)!=(0);
  if ($253) {
   $254 = $36;
   HEAP32[$33>>2] = $254;
   $36 = 0;
  } else {
   $255 = HEAP32[$30>>2]|0;
   $256 = ($255>>>0)>(0);
   if ($256) {
    $257 = HEAP32[$30>>2]|0;
    $258 = (($257) - 1)|0;
    $259 = (120948 + ($258)|0);
    (__Z8utf8_in2PiPKci($33,$259,1)|0);
   }
  }
  $260 = HEAP32[$30>>2]|0;
  $31 = $260;
  $261 = HEAP32[$39>>2]|0;
  $262 = ($261|0)!=(0);
  if ($262) {
   $263 = HEAP32[$39>>2]|0;
   $28 = $263;
   HEAP32[$39>>2] = 0;
  } else {
   $264 = HEAP32[$30>>2]|0;
   $265 = (120948 + ($264)|0);
   $266 = (__Z7utf8_inPiPKc($29,$265)|0);
   $267 = HEAP32[$30>>2]|0;
   $268 = (($267) + ($266))|0;
   HEAP32[$30>>2] = $268;
   $269 = HEAP32[$29>>2]|0;
   $28 = $269;
  }
  $270 = HEAP32[$30>>2]|0;
  $271 = (120948 + ($270)|0);
  $272 = (__Z7utf8_inPiPKc($37,$271)|0);
  $38 = $272;
  $273 = $28;
  $274 = ($273|0)==(0);
  if ($274) {
   $44 = 1;
   $28 = 32;
  }
  $275 = $28;
  $276 = ($275|0)==(1);
  if ($276) {
   label = 53;
  } else {
   $277 = $28;
   $278 = HEAP8[23007]|0;
   $279 = $278 << 24 >> 24;
   $280 = ($277|0)==($279|0);
   if ($280) {
    label = 53;
   }
  }
  do {
   if ((label|0) == 53) {
    label = 0;
    $281 = HEAP32[$30>>2]|0;
    $282 = (($281) - 1)|0;
    $69 = $282;
    $283 = HEAP32[$33>>2]|0;
    $284 = ($283|0)!=(32);
    if ($284) {
     $28 = 32;
     $285 = $28;
     $36 = $285;
     $286 = HEAP32[$30>>2]|0;
     $287 = (($286) + -1)|0;
     HEAP32[$30>>2] = $287;
     break;
    } else {
     $288 = (__ZL15EmbeddedCommandPj($30)|0);
     $289 = $51;
     $290 = (($289) + ($288))|0;
     $51 = $290;
     $291 = HEAP32[$33>>2]|0;
     $36 = $291;
     $292 = $69;
     $293 = (120948 + ($292)|0);
     $294 = HEAP32[$30>>2]|0;
     $295 = $69;
     $296 = (($294) - ($295))|0;
     _memset(($293|0),32,($296|0))|0;
     $297 = $69;
     HEAP32[$30>>2] = $297;
     continue L49;
    }
   }
  } while(0);
  $298 = HEAP32[19496]|0;
  $299 = ($298|0)==(36);
  $300 = $28;
  $301 = ($300|0)!=(32);
  $or$cond4 = $299 & $301;
  if ($or$cond4) {
   $302 = HEAP32[$33>>2]|0;
   $303 = ($302|0)==(32);
   $304 = HEAP32[$37>>2]|0;
   $305 = ($304|0)==(32);
   $or$cond6 = $303 & $305;
   if ($or$cond6) {
    HEAP32[19496] = 20;
   }
   $306 = $28;
   $307 = (__Z9towlower2j($306)|0);
   $28 = $307;
  }
  $308 = $46;
  $309 = ($308|0)!=(0);
  L83: do {
   if ($309) {
    $43 = 8;
    $310 = $28;
    $311 = ($310|0)==(93);
    $312 = HEAP32[$37>>2]|0;
    $313 = ($312|0)==(93);
    $or$cond8 = $311 & $313;
    if ($or$cond8) {
     $46 = 0;
     $314 = HEAP32[$30>>2]|0;
     $315 = (($314) + 1)|0;
     HEAP32[$30>>2] = $315;
     $28 = 32;
    }
   } else {
    $316 = HEAP32[19496]|0;
    $317 = $316 & 240;
    $318 = ($317|0)==(64);
    if ($318) {
     $319 = $28;
     $320 = (_iswdigit($319)|0);
     $321 = ($320|0)!=(0);
     if ($321) {
      $322 = HEAP32[19497]|0;
      $323 = (($322) + 1)|0;
      HEAP32[19497] = $323;
      $324 = HEAP32[19497]|0;
      $325 = HEAP32[19496]|0;
      $326 = $325 & 15;
      $327 = ($324|0)>($326|0);
      if (!($327)) {
       break;
      }
      $28 = 32;
      $53 = 1;
      HEAP32[19497] = 0;
      break;
     } else {
      HEAP32[19497] = 0;
      $328 = HEAP32[$34>>2]|0;
      $329 = (_iswdigit($328)|0);
      $330 = ($329|0)!=(0);
      if (!($330)) {
       break;
      }
      $28 = 32;
      $53 = 1;
      break;
     }
    }
    $331 = HEAP32[19496]|0;
    $332 = $331 & 16;
    $333 = ($332|0)==(0);
    if ($333) {
     $334 = $28;
     $335 = ($334|0)==(146);
     $336 = $28;
     $337 = ($336|0)==(180);
     $or$cond10 = $335 | $337;
     $338 = $28;
     $339 = ($338|0)==(8217);
     $or$cond12 = $or$cond10 | $339;
     $340 = $28;
     $341 = ($340|0)==(8242);
     $or$cond14 = $or$cond12 | $341;
     if ($or$cond14) {
      $28 = 39;
     }
     $342 = $28;
     $343 = ($342|0)==(8216);
     $344 = $28;
     $345 = ($344|0)==(63);
     $or$cond16 = $343 | $345;
     do {
      if ($or$cond16) {
       $346 = HEAP32[$34>>2]|0;
       $347 = (__Z7IsAlphaj($346)|0);
       $348 = ($347|0)!=(0);
       if (!($348)) {
        break;
       }
       $349 = HEAP32[$37>>2]|0;
       $350 = (__Z7IsAlphaj($349)|0);
       $351 = ($350|0)!=(0);
       if (!($351)) {
        break;
       }
       $28 = 39;
      }
     } while(0);
     $352 = $28;
     $353 = ($352|0)==(1328);
     if ($353) {
      $28 = 32;
      $354 = HEAP32[$48>>2]|0;
      $355 = $354 | 1024;
      HEAP32[$48>>2] = $355;
     }
     $356 = $28;
     $357 = ($356|0)==(1367);
     if ($357) {
      $28 = 32;
      $358 = HEAP32[$48>>2]|0;
      $359 = $358 | 131072;
      HEAP32[$48>>2] = $359;
     }
     $360 = $22;
     $361 = HEAP32[$30>>2]|0;
     $362 = (120948 + ($361)|0);
     $363 = HEAP32[$33>>2]|0;
     $364 = $28;
     $365 = HEAP32[$37>>2]|0;
     $366 = (__ZL13TranslateCharP10TranslatorPcijjPiS2_($360,$362,$363,$364,$365,$39,$48)|0);
     $28 = $366;
     $367 = $28;
     $368 = ($367|0)==(8);
     if ($368) {
      continue L49;
     }
     $369 = HEAP32[$39>>2]|0;
     $370 = ($369|0)!=(0);
     if ($370) {
      $371 = HEAP32[$39>>2]|0;
      HEAP32[$37>>2] = $371;
     }
     $372 = $28;
     $373 = (__Z7IsAlphaj($372)|0);
     $374 = ($373|0)!=(0);
     L114: do {
      if (!($374)) {
       $375 = $28;
       $376 = (__Z7IsSpacej($375)|0);
       $377 = ($376|0)!=(0);
       if ($377) {
        break;
       }
       $378 = $22;
       $379 = ((($378)) + 456|0);
       $380 = HEAP32[$379>>2]|0;
       $381 = $28;
       $19 = $380;
       $20 = $381;
       $382 = $19;
       $383 = $20;
       $17 = $382;
       $18 = $383;
       $384 = $17;
       $385 = $18;
       $386 = (_wcschr($384,$385)|0);
       $387 = ($386|0)==(0|0);
       if (!($387)) {
        break;
       }
       $388 = HEAP32[$34>>2]|0;
       $389 = (__Z7IsAlphaj($388)|0);
       $390 = ($389|0)!=(0);
       if (!($390)) {
        break;
       }
       $391 = $22;
       $392 = ((($391)) + 270|0);
       $393 = HEAP8[$392>>0]|0;
       $394 = ($393<<24>>24)!=(0);
       do {
        if ($394) {
         $395 = $28;
         $396 = (__Z9IsDigit09j($395)|0);
         $397 = ($396|0)!=(0);
         if (!($397)) {
          break;
         }
         $398 = HEAP32[$37>>2]|0;
         $399 = (__Z9IsDigit09j($398)|0);
         $400 = ($399|0)!=(0);
         if (!($400)) {
          break L114;
         }
        }
       } while(0);
       $28 = 32;
       $53 = 1;
      }
     } while(0);
     $401 = HEAP32[$34>>2]|0;
     $402 = (_iswdigit($401)|0);
     $403 = ($402|0)!=(0);
     do {
      if ($403) {
       $404 = $28;
       $405 = (_iswdigit($404)|0);
       $406 = ($405|0)==(0);
       $407 = $28;
       $408 = ($407|0)!=(46);
       $or$cond18 = $406 & $408;
       $409 = $28;
       $410 = ($409|0)!=(44);
       $or$cond20 = $or$cond18 & $410;
       $411 = $28;
       $412 = ($411|0)!=(32);
       $or$cond22 = $or$cond20 & $412;
       if (!($or$cond22)) {
        break;
       }
       $28 = 32;
       $53 = 1;
      } else {
       $413 = HEAP32[$33>>2]|0;
       $414 = ($413|0)!=(44);
       if (!($414)) {
        break;
       }
       $55 = 0;
      }
     } while(0);
     $415 = $28;
     $416 = ($415|0)==(91);
     do {
      if ($416) {
       $417 = HEAP32[$37>>2]|0;
       $418 = ($417|0)==(2);
       if (!($418)) {
        $419 = HEAP32[$37>>2]|0;
        $420 = ($419|0)==(91);
        $421 = HEAP32[19162]|0;
        $422 = ($421|0)!=(0);
        $or$cond24 = $420 & $422;
        if (!($or$cond24)) {
         break;
        }
       }
       $46 = 8;
       $423 = HEAP32[$30>>2]|0;
       $424 = (($423) + 1)|0;
       HEAP32[$30>>2] = $424;
       continue L49;
      }
     } while(0);
     $425 = $28;
     $426 = (__Z7IsAlphaj($425)|0);
     $427 = ($426|0)!=(0);
     if ($427) {
      $428 = HEAP32[$34>>2]|0;
      $429 = (__Z7IsAlphaj($428)|0);
      $430 = ($429|0)!=(0);
      do {
       if ($430) {
        $431 = $22;
        $432 = ((($431)) + 271|0);
        $433 = HEAP8[$432>>0]|0;
        $434 = ($433<<24>>24)!=(0);
        if (!($434)) {
         break;
        }
        $435 = $28;
        $436 = ($435|0)>(12352);
        $437 = HEAP32[$34>>2]|0;
        $438 = ($437|0)>(12352);
        $or$cond26 = $436 | $438;
        if ($or$cond26) {
         label = 104;
        }
       } else {
        label = 104;
       }
      } while(0);
      L141: do {
       if ((label|0) == 104) {
        label = 0;
        $439 = $22;
        $440 = ((($439)) + 456|0);
        $441 = HEAP32[$440>>2]|0;
        $442 = HEAP32[$34>>2]|0;
        $15 = $441;
        $16 = $442;
        $443 = $15;
        $444 = $16;
        $13 = $443;
        $14 = $444;
        $445 = $13;
        $446 = $14;
        $447 = (_wcschr($445,$446)|0);
        $448 = ($447|0)==(0|0);
        if ($448) {
         $52 = 0;
        }
        $449 = HEAP32[$34>>2]|0;
        $450 = ($449|0)!=(32);
        do {
         if ($450) {
          $451 = $22;
          $452 = ((($451)) + 456|0);
          $453 = HEAP32[$452>>2]|0;
          $454 = HEAP32[$34>>2]|0;
          $11 = $453;
          $12 = $454;
          $455 = $11;
          $456 = $12;
          $9 = $455;
          $10 = $456;
          $457 = $9;
          $458 = $10;
          $459 = (_wcschr($457,$458)|0);
          $460 = ($459|0)==(0|0);
          if (!($460)) {
           break;
          }
          $28 = 32;
          $53 = 1;
          $461 = HEAP32[$34>>2]|0;
          $462 = (__Z9IsBracketi($461)|0);
          $463 = ($462|0)!=(0);
          if ($463) {
           break L141;
          }
          $464 = $49;
          $465 = $464 | 256;
          $49 = $465;
          break L141;
         }
        } while(0);
        $466 = $28;
        $467 = (__Z9iswupper2i($466)|0);
        $468 = ($467|0)!=(0);
        if ($468) {
         $469 = HEAP32[$48>>2]|0;
         $470 = $469 | 2;
         HEAP32[$48>>2] = $470;
        }
        $471 = HEAP32[$34>>2]|0;
        $472 = ($471|0)==(32);
        if (!($472)) {
         break;
        }
        $473 = $27;
        $474 = (($473) - 2)|0;
        $475 = (($65) + ($474)|0);
        $476 = HEAP8[$475>>0]|0;
        $477 = $476 << 24 >> 24;
        $478 = (_iswdigit($477)|0);
        $479 = ($478|0)!=(0);
        if (!($479)) {
         break;
        }
        $480 = HEAP32[$33>>2]|0;
        $481 = (_iswdigit($480)|0);
        $482 = ($481|0)!=(0);
        if ($482) {
         break;
        }
        $483 = $27;
        $484 = (($483) + 1)|0;
        $27 = $484;
        $485 = (($65) + ($483)|0);
        HEAP8[$485>>0] = 32;
        $486 = $64;
        $487 = (($63) + (($486*12)|0)|0);
        $488 = ((($487)) + 4|0);
        $489 = HEAP16[$488>>1]|0;
        $490 = (($489) + 1)<<16>>16;
        HEAP16[$488>>1] = $490;
       }
      } while(0);
      $491 = $28;
      $492 = ($491|0)!=(32);
      do {
       if ($492) {
        $493 = $52;
        $494 = (($493) + 1)|0;
        $52 = $494;
        $495 = $22;
        $496 = ((($495)) + 720|0);
        $497 = HEAP32[$496>>2]|0;
        $498 = ($497|0)>(0);
        if (!($498)) {
         break;
        }
        $499 = $28;
        $500 = ($499|0)<(592);
        if ($500) {
         $501 = HEAP32[$34>>2]|0;
         $502 = $22;
         $503 = ((($502)) + 720|0);
         $504 = HEAP32[$503>>2]|0;
         $505 = ($501|0)>=($504|0);
         if (!($505)) {
          label = 120;
         }
        } else {
         label = 120;
        }
        if ((label|0) == 120) {
         label = 0;
         $506 = $28;
         $507 = $22;
         $508 = ((($507)) + 720|0);
         $509 = HEAP32[$508>>2]|0;
         $510 = ($506|0)>=($509|0);
         $511 = $52;
         $512 = ($511|0)>(1);
         $or$cond28 = $510 & $512;
         $513 = HEAP32[$34>>2]|0;
         $514 = ($513|0)<(592);
         $or$cond30 = $or$cond28 & $514;
         if (!($or$cond30)) {
          break;
         }
        }
        $515 = HEAP32[$34>>2]|0;
        $516 = (__Z7IsAlphaj($515)|0);
        $517 = ($516|0)!=(0);
        if (!($517)) {
         break;
        }
        $28 = 32;
        $53 = 1;
        $518 = HEAP32[$48>>2]|0;
        $519 = $518 | 16384;
        HEAP32[$48>>2] = $519;
        $520 = $49;
        $521 = $520 | 128;
        $49 = $521;
       }
      } while(0);
      $522 = $28;
      $523 = (__Z9iswupper2i($522)|0);
      $524 = ($523|0)!=(0);
      if (!($524)) {
       $577 = $43;
       $578 = ($577|0)!=(0);
       $579 = $52;
       $580 = ($579|0)>(2);
       $or$cond40 = $578 & $580;
       if (!($or$cond40)) {
        $43 = 0;
        break;
       }
       $581 = $28;
       $582 = ($581|0)==(115);
       $583 = HEAP32[$37>>2]|0;
       $584 = ($583|0)==(32);
       $or$cond42 = $582 & $584;
       if (!($or$cond42)) {
        $43 = 0;
        break;
       }
       $28 = 32;
       $585 = $43;
       $586 = $585 | 4;
       $43 = $586;
       $587 = $27;
       $588 = (($587) - 1)|0;
       $589 = (($65) + ($588)|0);
       $590 = HEAP8[$589>>0]|0;
       $591 = $590 << 24 >> 24;
       $592 = ($591|0)==(39);
       if (!($592)) {
        break;
       }
       $593 = $27;
       $594 = (($593) - 1)|0;
       $595 = (($65) + ($594)|0);
       HEAP8[$595>>0] = 32;
       break;
      }
      $525 = $28;
      $526 = (__Z9towlower2j($525)|0);
      $28 = $526;
      $527 = $22;
      $528 = ((($527)) + 24|0);
      $529 = ((($528)) + 52|0);
      $530 = HEAP32[$529>>2]|0;
      $58 = $530;
      $531 = ($530|0)>(0);
      if ($531) {
       $532 = $58;
       $533 = ($532|0)==(2);
       $534 = $54;
       $535 = ($534|0)==(0);
       $or$cond32 = $533 & $535;
       if (!($or$cond32)) {
        break;
       }
       $536 = $28;
       HEAP32[$39>>2] = $536;
       $28 = 712;
       $54 = 1;
       break;
      }
      $537 = HEAP32[$33>>2]|0;
      $538 = (__Z9iswlower2i($537)|0);
      $539 = ($538|0)!=(0);
      if ($539) {
       $540 = $22;
       $541 = $27;
       $542 = (($65) + ($541)|0);
       $543 = $28;
       $544 = (__Z15UpperCaseInWordP10TranslatorPci($540,$542,$543)|0);
       $545 = ($544|0)==(1);
       if ($545) {
        $546 = $28;
        $547 = (__Z9towlower2j($546)|0);
        $28 = $547;
        break;
       } else {
        $28 = 32;
        $53 = 1;
        $548 = $28;
        $36 = $548;
        break;
       }
      }
      $549 = $28;
      $550 = ($549|0)!=(32);
      if (!($550)) {
       break;
      }
      $551 = HEAP32[$33>>2]|0;
      $552 = (__Z9iswupper2i($551)|0);
      $553 = ($552|0)!=(0);
      if (!($553)) {
       break;
      }
      $554 = HEAP32[$37>>2]|0;
      $555 = (__Z9iswlower2i($554)|0);
      $556 = ($555|0)!=(0);
      if (!($556)) {
       break;
      }
      $557 = HEAP32[$30>>2]|0;
      $558 = $38;
      $559 = (($557) + ($558))|0;
      $560 = (120948 + ($559)|0);
      (__Z7utf8_inPiPKc($70,$560)|0);
      $561 = $22;
      $562 = ((($561)) + 324|0);
      $563 = HEAP32[$562>>2]|0;
      $564 = ($563|0)==(28268);
      $565 = $52;
      $566 = ($565|0)==(2);
      $or$cond34 = $564 & $566;
      $567 = $28;
      $568 = ($567|0)==(106);
      $or$cond36 = $or$cond34 & $568;
      $569 = HEAP32[$33>>2]|0;
      $570 = ($569|0)==(73);
      $or$cond38 = $or$cond36 & $570;
      if ($or$cond38) {
       break;
      }
      $571 = HEAP32[$70>>2]|0;
      $572 = (__Z7IsAlphaj($571)|0);
      $573 = ($572|0)!=(0);
      if (!($573)) {
       break;
      }
      $28 = 32;
      $53 = 1;
      $574 = $28;
      $36 = $574;
      $575 = $49;
      $576 = $575 | 256;
      $49 = $576;
      break;
     }
     $596 = $28;
     $597 = ($596|0)==(45);
     if ($597) {
      $598 = HEAP32[$33>>2]|0;
      $599 = (__Z7IsSpacej($598)|0);
      $600 = ($599|0)!=(0);
      do {
       if (!($600)) {
        $601 = HEAP32[$37>>2]|0;
        $602 = (__Z7IsAlphaj($601)|0);
        $603 = ($602|0)!=(0);
        if (!($603)) {
         break;
        }
        $604 = HEAP32[$34>>2]|0;
        $605 = ($604|0)!=(32);
        if ($605) {
         $28 = 32;
         $53 = 1;
         break L83;
        }
        $606 = HEAP32[$48>>2]|0;
        $607 = $606 | 128;
        HEAP32[$48>>2] = $607;
        $608 = $64;
        $609 = ($608|0)>(0);
        if ($609) {
         $610 = $64;
         $611 = (($610) - 1)|0;
         $612 = (($63) + (($611*12)|0)|0);
         $613 = HEAP32[$612>>2]|0;
         $614 = $613 | 16384;
         HEAP32[$612>>2] = $614;
        }
        $28 = 32;
        break L83;
       }
      } while(0);
      $615 = HEAP32[$33>>2]|0;
      $616 = ($615|0)==(32);
      $617 = HEAP32[$37>>2]|0;
      $618 = ($617|0)==(32);
      $or$cond44 = $616 & $618;
      if ($or$cond44) {
       $28 = 32;
       $41 = 4;
       break;
      }
      $619 = HEAP32[$37>>2]|0;
      $620 = ($619|0)==(45);
      if ($620) {
       $621 = HEAP32[$30>>2]|0;
       $622 = (($621) + 1)|0;
       HEAP32[$30>>2] = $622;
       $28 = 32;
       $41 = 4;
       break;
      }
      $623 = HEAP32[$34>>2]|0;
      $624 = ($623|0)==(32);
      if (!($624)) {
       break;
      }
      $625 = $35;
      $626 = (__Z7IsAlphaj($625)|0);
      $627 = ($626|0)!=(0);
      if (!($627)) {
       break;
      }
      $628 = HEAP32[$33>>2]|0;
      $629 = (__Z7IsAlphaj($628)|0);
      $630 = ($629|0)!=(0);
      if ($630) {
       break;
      }
      $631 = $27;
      $632 = (($631) + 1)|0;
      $27 = $632;
      $633 = (($65) + ($631)|0);
      HEAP8[$633>>0] = 32;
      $634 = $64;
      $635 = (($63) + (($634*12)|0)|0);
      $636 = ((($635)) + 4|0);
      $637 = HEAP16[$636>>1]|0;
      $638 = (($637) + 1)<<16>>16;
      HEAP16[$636>>1] = $638;
      break;
     }
     $639 = $28;
     $640 = ($639|0)==(46);
     if ($640) {
      $641 = HEAP32[$34>>2]|0;
      $642 = ($641|0)==(46);
      if ($642) {
       $28 = 32;
       $53 = 1;
       break;
      }
      $643 = $64;
      $644 = ($643|0)>(0);
      if (!($644)) {
       break;
      }
      $645 = $64;
      $646 = (($645) - 1)|0;
      $647 = (($63) + (($646*12)|0)|0);
      $648 = HEAP32[$647>>2]|0;
      $649 = $648 & 256;
      $650 = ($649|0)!=(0);
      if ($650) {
       break;
      }
      $651 = HEAP32[$33>>2]|0;
      $652 = (__Z7IsAlphaj($651)|0);
      $653 = ($652|0)!=(0);
      if (!($653)) {
       break;
      }
      $654 = $64;
      $655 = (($654) - 1)|0;
      $656 = (($63) + (($655*12)|0)|0);
      $657 = HEAP32[$656>>2]|0;
      $658 = $657 | 65536;
      HEAP32[$656>>2] = $658;
      $659 = HEAP32[$37>>2]|0;
      $660 = (__Z7IsSpacej($659)|0);
      $661 = ($660|0)!=(0);
      $662 = HEAP32[$37>>2]|0;
      $663 = ($662|0)==(45);
      $or$cond46 = $661 | $663;
      if (!($or$cond46)) {
       break;
      }
      $28 = 32;
      break;
     }
     $664 = $28;
     $665 = ($664|0)==(39);
     if (!($665)) {
      $715 = $28;
      $716 = (__Z11lookupwcharPKti(9848,$715)|0);
      $717 = ($716|0)!=(0);
      if ($717) {
       $28 = 32;
       break;
      }
      $718 = $28;
      $719 = (_iswdigit($718)|0);
      $720 = ($719|0)!=(0);
      if (!($720)) {
       break;
      }
      $721 = $22;
      $722 = ((($721)) + 270|0);
      $723 = HEAP8[$722>>0]|0;
      $724 = ($723<<24>>24)!=(0);
      do {
       if ($724) {
        $725 = HEAP32[$34>>2]|0;
        $726 = (__Z7IsAlphaj($725)|0);
        $727 = ($726|0)!=(0);
        if (!($727)) {
         break;
        }
        $728 = HEAP32[$37>>2]|0;
        $729 = (__Z7IsDigitj($728)|0);
        $730 = ($729|0)!=(0);
        if (!($730)) {
         break L83;
        }
       }
      } while(0);
      $731 = HEAP32[$34>>2]|0;
      $732 = ($731|0)!=(32);
      do {
       if ($732) {
        $733 = HEAP32[$34>>2]|0;
        $734 = (_iswdigit($733)|0);
        $735 = ($734|0)!=(0);
        if ($735) {
         break;
        }
        $736 = HEAP32[$34>>2]|0;
        $737 = $22;
        $738 = ((($737)) + 224|0);
        $739 = HEAP32[$738>>2]|0;
        $740 = ($736|0)!=($739|0);
        do {
         if (!($740)) {
          $741 = $55;
          $742 = ($741|0)>(0);
          if ($742) {
           $743 = $22;
           $744 = ((($743)) + 224|0);
           $745 = HEAP32[$744>>2]|0;
           $746 = ($745|0)==(44);
           if ($746) {
            break;
           }
          }
          $55 = 1;
          break L83;
         }
        } while(0);
        $28 = 32;
        $53 = 1;
        break L83;
       }
      } while(0);
      $747 = HEAP32[$34>>2]|0;
      $748 = ($747|0)==(32);
      if (!($748)) {
       break;
      }
      $749 = $35;
      $750 = (__Z7IsAlphaj($749)|0);
      $751 = ($750|0)!=(0);
      if (!($751)) {
       break;
      }
      $752 = HEAP32[$33>>2]|0;
      $753 = (__Z7IsAlphaj($752)|0);
      $754 = ($753|0)!=(0);
      if ($754) {
       break;
      }
      $755 = $27;
      $756 = (($755) + 1)|0;
      $27 = $756;
      $757 = (($65) + ($755)|0);
      HEAP8[$757>>0] = 32;
      $758 = $64;
      $759 = (($63) + (($758*12)|0)|0);
      $760 = ((($759)) + 4|0);
      $761 = HEAP16[$760>>1]|0;
      $762 = (($761) + 1)<<16>>16;
      HEAP16[$760>>1] = $762;
      break;
     }
     $666 = HEAP32[$33>>2]|0;
     $667 = ($666|0)==(46);
     if ($667) {
      label = 170;
     } else {
      $668 = HEAP32[$33>>2]|0;
      $669 = (_iswalnum($668)|0);
      $670 = ($669|0)!=(0);
      if ($670) {
       label = 170;
      }
     }
     do {
      if ((label|0) == 170) {
       label = 0;
       $671 = HEAP32[$37>>2]|0;
       $672 = (__Z7IsAlphaj($671)|0);
       $673 = ($672|0)!=(0);
       if (!($673)) {
        break;
       }
       $45 = 0;
       break L83;
      }
     } while(0);
     $674 = $22;
     $675 = ((($674)) + 24|0);
     $676 = ((($675)) + 80|0);
     $677 = HEAP32[$676>>2]|0;
     $678 = $677 & 1;
     $679 = ($678|0)!=(0);
     do {
      if ($679) {
       $680 = HEAP32[$37>>2]|0;
       $681 = (__Z7IsAlphaj($680)|0);
       $682 = ($681|0)!=(0);
       if (!($682)) {
        break;
       }
       $45 = 0;
       break L83;
      }
     } while(0);
     $683 = $22;
     $684 = ((($683)) + 24|0);
     $685 = ((($684)) + 80|0);
     $686 = HEAP32[$685>>2]|0;
     $687 = $686 & 2;
     $688 = ($687|0)!=(0);
     do {
      if ($688) {
       $689 = HEAP32[$33>>2]|0;
       $690 = (__Z7IsAlphaj($689)|0);
       $691 = ($690|0)!=(0);
       if (!($691)) {
        break;
       }
       $45 = 0;
       break L83;
      }
     } while(0);
     $692 = $22;
     $693 = ((($692)) + 452|0);
     $694 = HEAP32[$693>>2]|0;
     $695 = HEAP32[$33>>2]|0;
     $7 = $694;
     $8 = $695;
     $696 = $7;
     $697 = $8;
     $5 = $696;
     $6 = $697;
     $698 = $5;
     $699 = $6;
     $700 = (_wcschr($698,$699)|0);
     $701 = ($700|0)!=(0|0);
     $702 = $35;
     $703 = ($702|0)==(32);
     $or$cond48 = $701 & $703;
     if ($or$cond48) {
      $45 = 0;
      $704 = HEAP32[$37>>2]|0;
      $705 = ($704|0)==(32);
      if (!($705)) {
       break;
      }
      $706 = HEAP32[$30>>2]|0;
      $707 = (($706) + 1)|0;
      HEAP32[$30>>2] = $707;
      break;
     }
     $708 = HEAP32[$34>>2]|0;
     $709 = ($708|0)==(115);
     $710 = $45;
     $711 = ($710|0)==(0);
     $or$cond50 = $709 & $711;
     if ($or$cond50) {
      $28 = 32;
      break;
     }
     $712 = HEAP32[$34>>2]|0;
     $713 = (__Z7IsSpacej($712)|0);
     $714 = ($713|0)!=(0);
     if ($714) {
      $45 = 1;
     } else {
      $45 = 0;
     }
     $41 = 4;
     $28 = 32;
    }
   }
  } while(0);
  $763 = $28;
  $764 = (__Z7IsSpacej($763)|0);
  $765 = ($764|0)!=(0);
  do {
   if ($765) {
    $766 = HEAP32[$34>>2]|0;
    $767 = ($766|0)==(32);
    if ($767) {
     $768 = HEAP32[$48>>2]|0;
     $769 = $768 | 262144;
     HEAP32[$48>>2] = $769;
     continue L49;
    }
    $770 = HEAP32[$29>>2]|0;
    $771 = ($770|0)==(9);
    $772 = HEAP32[$29>>2]|0;
    $773 = ($772|0)==(10);
    $or$cond52 = $771 | $773;
    if ($or$cond52) {
     $774 = $49;
     $775 = $774 | 262144;
     $49 = $775;
    }
    $776 = $53;
    $777 = ($776|0)!=(0);
    if ($777) {
     $58 = 0;
     $778 = HEAP32[$30>>2]|0;
     $779 = (($778) - 1)|0;
     $59 = $779;
     while(1) {
      $780 = $59;
      $781 = $32;
      $782 = ($780|0)>=($781|0);
      if (!($782)) {
       break;
      }
      $783 = $59;
      $784 = (($62) + ($783<<1)|0);
      $785 = HEAP16[$784>>1]|0;
      $786 = $785 << 16 >> 16;
      $787 = ($786|0)!=(0);
      if (!($787)) {
       break;
      }
      $788 = $59;
      $789 = (($62) + ($788<<1)|0);
      $790 = HEAP16[$789>>1]|0;
      $791 = $790 << 16 >> 16;
      $792 = ($791|0)>(0);
      if ($792) {
       $793 = $58;
       $794 = (($793) + 1)|0;
       $58 = $794;
      }
      $795 = $59;
      $796 = (($795) + -1)|0;
      $59 = $796;
     }
     $797 = $58;
     $798 = $797&255;
     $799 = $64;
     $800 = (($63) + (($799*12)|0)|0);
     $801 = ((($800)) + 10|0);
     HEAP8[$801>>0] = $798;
    }
    $802 = HEAP32[$30>>2]|0;
    $32 = $802;
    $803 = $27;
    $804 = (($803) + 1)|0;
    $27 = $804;
    $805 = (($65) + ($803)|0);
    HEAP8[$805>>0] = 32;
    $806 = $64;
    $807 = ($806|0)<(299);
    do {
     if ($807) {
      $808 = $27;
      $809 = $64;
      $810 = (($63) + (($809*12)|0)|0);
      $811 = ((($810)) + 4|0);
      $812 = HEAP16[$811>>1]|0;
      $813 = $812&65535;
      $814 = ($808|0)>($813|0);
      if (!($814)) {
       break;
      }
      $815 = $51;
      $816 = ($815|0)>(0);
      if ($816) {
       $817 = HEAP32[19494]|0;
       $818 = (($817) - 1)|0;
       $819 = (76960 + ($818<<2)|0);
       $820 = HEAP32[$819>>2]|0;
       $821 = $820 | 128;
       HEAP32[$819>>2] = $821;
       $822 = $64;
       $823 = (($63) + (($822*12)|0)|0);
       $824 = HEAP32[$823>>2]|0;
       $825 = $824 | 64;
       HEAP32[$823>>2] = $825;
       $51 = 0;
      }
      $826 = HEAP32[19175]|0;
      $827 = $826&255;
      $828 = $64;
      $829 = (($63) + (($828*12)|0)|0);
      $830 = ((($829)) + 6|0);
      HEAP8[$830>>0] = $827;
      $831 = $43;
      $832 = HEAP32[$48>>2]|0;
      $833 = $831 | $832;
      $834 = HEAP32[19498]|0;
      $835 = $833 | $834;
      $836 = $64;
      $837 = (($63) + (($836*12)|0)|0);
      $838 = HEAP32[$837>>2]|0;
      $839 = $838 | $835;
      HEAP32[$837>>2] = $839;
      $840 = $42;
      $841 = $840&255;
      $842 = $64;
      $843 = (($63) + (($842*12)|0)|0);
      $844 = ((($843)) + 7|0);
      HEAP8[$844>>0] = $841;
      $845 = HEAP32[19175]|0;
      $846 = ($845|0)>(0);
      if ($846) {
       $847 = $27;
       $58 = $847;
       while(1) {
        $848 = $58;
        $849 = $64;
        $850 = (($63) + (($849*12)|0)|0);
        $851 = ((($850)) + 4|0);
        $852 = HEAP16[$851>>1]|0;
        $853 = $852&65535;
        $854 = ($848|0)>($853|0);
        $855 = $58;
        if (!($854)) {
         break;
        }
        $856 = (($855) - 1)|0;
        $857 = (($65) + ($856)|0);
        $858 = HEAP8[$857>>0]|0;
        $859 = $58;
        $860 = (($65) + ($859)|0);
        HEAP8[$860>>0] = $858;
        $861 = $58;
        $862 = (($861) + -1)|0;
        $58 = $862;
       }
       $863 = (($65) + ($855)|0);
       HEAP8[$863>>0] = 32;
       $864 = $64;
       $865 = (($63) + (($864*12)|0)|0);
       $866 = ((($865)) + 4|0);
       $867 = HEAP16[$866>>1]|0;
       $868 = (($867) + 1)<<16>>16;
       HEAP16[$866>>1] = $868;
       $869 = $27;
       $870 = (($869) + 1)|0;
       $27 = $870;
      }
      $871 = $64;
      $872 = (($871) + 1)|0;
      $64 = $872;
      $873 = $27;
      $874 = $873&65535;
      $875 = $64;
      $876 = (($63) + (($875*12)|0)|0);
      $877 = ((($876)) + 4|0);
      HEAP16[$877>>1] = $874;
      $878 = $64;
      $879 = (($63) + (($878*12)|0)|0);
      HEAP32[$879>>2] = 0;
      $880 = HEAP32[$30>>2]|0;
      $58 = $880;
      while(1) {
       $881 = $58;
       $882 = (($62) + ($881<<1)|0);
       $883 = HEAP16[$882>>1]|0;
       $884 = $883 << 16 >> 16;
       $885 = ($884|0)<=(0);
       $886 = $58;
       if (!($885)) {
        break;
       }
       $887 = (($886) + 1)|0;
       $58 = $887;
      }
      $888 = (($62) + ($886<<1)|0);
      $889 = HEAP16[$888>>1]|0;
      $890 = $64;
      $891 = (($63) + (($890*12)|0)|0);
      $892 = ((($891)) + 8|0);
      HEAP16[$892>>1] = $889;
      $59 = 0;
      while(1) {
       $893 = $58;
       $894 = (($62) + ($893<<1)|0);
       $895 = HEAP16[$894>>1]|0;
       $896 = $895 << 16 >> 16;
       $897 = ($896|0)!=(0);
       if (!($897)) {
        break;
       }
       $898 = $58;
       $899 = (($898) + 1)|0;
       $58 = $899;
       $900 = (($62) + ($898<<1)|0);
       $901 = HEAP16[$900>>1]|0;
       $902 = $901 << 16 >> 16;
       $903 = ($902|0)!=(-1);
       if (!($903)) {
        continue;
       }
       $904 = $59;
       $905 = (($904) + 1)|0;
       $59 = $905;
      }
      $906 = $59;
      $907 = $906&255;
      $908 = $64;
      $909 = (($63) + (($908*12)|0)|0);
      $910 = ((($909)) + 10|0);
      HEAP8[$910>>0] = $907;
      $911 = $49;
      HEAP32[$48>>2] = $911;
      $49 = 0;
      HEAP32[19175] = 0;
      $42 = 0;
      $43 = 1;
      $54 = 0;
     }
    } while(0);
    $912 = $53;
    $913 = ($912|0)!=(0);
    if (!($913)) {
     break;
    }
    $914 = $31;
    HEAP32[$30>>2] = $914;
    HEAP32[$39>>2] = 0;
    $53 = 0;
   } else {
    $915 = $27;
    $916 = ($915|0)<(796);
    if ($916) {
     $917 = $28;
     $918 = $27;
     $919 = (($65) + ($918)|0);
     $920 = (__Z8utf8_outjPc($917,$919)|0);
     $921 = $27;
     $922 = (($921) + ($920))|0;
     $27 = $922;
    }
   }
  } while(0);
  $923 = $41;
  $924 = HEAP32[19175]|0;
  $925 = ($923|0)>($924|0);
  if ($925) {
   $926 = $41;
   HEAP32[19175] = $926;
  }
  $41 = 0;
 }
 $927 = $64;
 $928 = ($927|0)==(0);
 $929 = $51;
 $930 = ($929|0)>(0);
 $or$cond55 = $928 & $930;
 if ($or$cond55) {
  $931 = HEAP32[19494]|0;
  $932 = (($931) - 1)|0;
  $933 = (76960 + ($932<<2)|0);
  $934 = HEAP32[$933>>2]|0;
  $935 = $934 | 128;
  HEAP32[$933>>2] = $935;
  $936 = $64;
  $937 = (($63) + (($936*12)|0)|0);
  $938 = HEAP32[$937>>2]|0;
  $939 = $938 | 64;
  HEAP32[$937>>2] = $939;
  $64 = 1;
 }
 $940 = $27;
 $941 = (($940) - 1)|0;
 $942 = (($65) + ($941)|0);
 $943 = $22;
 $944 = ((($943)) + 8324|0);
 HEAP32[$944>>2] = $942;
 $945 = $27;
 $946 = (($65) + ($945)|0);
 HEAP8[$946>>0] = 0;
 $947 = ((($63)) + 6|0);
 HEAP8[$947>>0] = 0;
 $948 = $64;
 $949 = (($63) + (($948*12)|0)|0);
 $950 = ((($949)) + 6|0);
 HEAP8[$950>>0] = 8;
 $951 = $64;
 $952 = ($951|0)>(0);
 if ($952) {
  $953 = $64;
  $954 = (($953) - 1)|0;
  $27 = $954;
  while(1) {
   $955 = $27;
   $956 = ($955|0)>(0);
   if ($956) {
    $957 = $27;
    $958 = (($63) + (($957*12)|0)|0);
    $959 = ((($958)) + 4|0);
    $960 = HEAP16[$959>>1]|0;
    $961 = $960&65535;
    $962 = (($65) + ($961)|0);
    $963 = HEAP8[$962>>0]|0;
    $964 = $963 << 24 >> 24;
    $965 = (__Z9IsBracketi($964)|0);
    $966 = ($965|0)!=(0);
    $1358 = $966;
   } else {
    $1358 = 0;
   }
   $967 = $27;
   if (!($1358)) {
    break;
   }
   $968 = (($967) + -1)|0;
   $27 = $968;
  }
  $969 = (($63) + (($967*12)|0)|0);
  $970 = HEAP32[$969>>2]|0;
  $971 = $970 | 16;
  HEAP32[$969>>2] = $971;
  $972 = $66;
  $973 = $972 & 4194304;
  $974 = ($973|0)!=(0);
  if ($974) {
   $975 = $64;
   $976 = (($975) - 1)|0;
   $977 = (($63) + (($976*12)|0)|0);
   $978 = HEAP32[$977>>2]|0;
   $979 = $978 & 256;
   $980 = ($979|0)!=(0);
   if (!($980)) {
    $981 = $64;
    $982 = (($981) - 1)|0;
    $983 = (($63) + (($982*12)|0)|0);
    $984 = HEAP32[$983>>2]|0;
    $985 = $984 | 65536;
    HEAP32[$983>>2] = $985;
   }
  }
 }
 $986 = HEAP32[$63>>2]|0;
 $987 = $986 | 512;
 HEAP32[$63>>2] = $987;
 $27 = 0;
 while(1) {
  $988 = $27;
  $989 = $64;
  $990 = ($988|0)<($989|0);
  if (!($990)) {
   break;
  }
  $991 = HEAP32[19171]|0;
  $992 = (($991) + 1)|0;
  HEAP32[19171] = $992;
  $993 = HEAP32[19166]|0;
  $994 = ($993|0)>(0);
  if ($994) {
   $995 = HEAP32[19166]|0;
   $996 = (($995) + -1)|0;
   HEAP32[19166] = $996;
   $997 = HEAP32[19166]|0;
   $998 = ($997|0)==(0);
   if ($998) {
    HEAP32[19168] = 0;
   }
  }
  $999 = HEAP32[19168]|0;
  $1000 = ($999|0)!=(0);
  if (!($1000)) {
   HEAP32[19176] = 0;
   $1001 = $27;
   $1002 = (($63) + (($1001*12)|0)|0);
   $1003 = ((($1002)) + 4|0);
   $1004 = HEAP16[$1003>>1]|0;
   $1005 = $1004&65535;
   $1006 = (($65) + ($1005)|0);
   $74 = $1006;
   $56 = $1006;
   $1007 = $56;
   $1008 = HEAP8[$1007>>0]|0;
   $1009 = $1008 << 24 >> 24;
   $1010 = (_iswdigit($1009)|0);
   $1011 = ($1010|0)!=(0);
   if ($1011) {
    $1012 = $22;
    $1013 = ((($1012)) + 208|0);
    $1014 = HEAP32[$1013>>2]|0;
    $1015 = ($1014|0)!=(1227133512);
    if ($1015) {
     $73 = $76;
     while(1) {
      $1016 = $73;
      $1017 = ((($76)) + 130|0);
      $1018 = ($1016>>>0)<($1017>>>0);
      if (!($1018)) {
       break;
      }
      $1019 = $74;
      $1020 = HEAP8[$1019>>0]|0;
      $1021 = $1020 << 24 >> 24;
      $1022 = (_iswdigit($1021)|0);
      $1023 = ($1022|0)!=(0);
      $1024 = $74;
      if ($1023) {
       $1025 = ((($1024)) + 1|0);
       $74 = $1025;
       $1026 = HEAP8[$1024>>0]|0;
       $1027 = $73;
       $1028 = ((($1027)) + 1|0);
       $73 = $1028;
       HEAP8[$1027>>0] = $1026;
       continue;
      }
      $1029 = HEAP8[$1024>>0]|0;
      $1030 = $1029 << 24 >> 24;
      $1031 = $22;
      $1032 = ((($1031)) + 220|0);
      $1033 = HEAP32[$1032>>2]|0;
      $1034 = ($1030|0)==($1033|0);
      if (!($1034)) {
       label = 270;
       break;
      }
      $1035 = $74;
      $1036 = ((($1035)) + 1|0);
      $1037 = HEAP8[$1036>>0]|0;
      $1038 = $1037 << 24 >> 24;
      $1039 = ($1038|0)==(32);
      if (!($1039)) {
       label = 270;
       break;
      }
      $1040 = $74;
      $1041 = ((($1040)) + 2|0);
      $1042 = HEAP8[$1041>>0]|0;
      $1043 = $1042 << 24 >> 24;
      $1044 = (_iswdigit($1043)|0);
      $1045 = ($1044|0)!=(0);
      if (!($1045)) {
       label = 270;
       break;
      }
      $1046 = $74;
      $1047 = ((($1046)) + 3|0);
      $1048 = HEAP8[$1047>>0]|0;
      $1049 = $1048 << 24 >> 24;
      $1050 = ($1049|0)!=(32);
      if (!($1050)) {
       label = 270;
       break;
      }
      $1051 = $74;
      $1052 = ((($1051)) + 4|0);
      $1053 = HEAP8[$1052>>0]|0;
      $1054 = $1053 << 24 >> 24;
      $1055 = ($1054|0)!=(32);
      if (!($1055)) {
       label = 270;
       break;
      }
      $1056 = $74;
      $1057 = ((($1056)) + 2|0);
      $74 = $1057;
      $1058 = $27;
      $1059 = (($1058) + 1)|0;
      $27 = $1059;
     }
     if ((label|0) == 270) {
      label = 0;
      $1060 = $74;
      $1061 = $56;
      $1062 = $1060;
      $1063 = $1061;
      $1064 = (($1062) - ($1063))|0;
      $71 = $1064;
      $1065 = $56;
      $1066 = $71;
      _memset(($1065|0),32,($1066|0))|0;
      $1067 = $73;
      $1068 = $1067;
      $1069 = $76;
      $1070 = (($1068) - ($1069))|0;
      $71 = $1070;
      $1071 = $56;
      $1072 = $71;
      _memcpy(($1071|0),($76|0),($1072|0))|0;
     }
     $1073 = $56;
     $74 = $1073;
    }
   }
   $60 = 0;
   while(1) {
    $1074 = $60;
    $1075 = $56;
    $1076 = (($1075) + ($1074)|0);
    $1077 = HEAP8[$1076>>0]|0;
    $1078 = $1077 << 24 >> 24;
    $1079 = (_iswdigit($1078)|0);
    $1080 = ($1079|0)!=(0);
    $1081 = $60;
    if (!($1080)) {
     break;
    }
    $1082 = (($1081) + 1)|0;
    $60 = $1082;
   }
   $1083 = ($1081|0)>(4);
   L372: do {
    if ($1083) {
     HEAP8[$76>>0] = 32;
     $1084 = ((($76)) + 1|0);
     $73 = $1084;
     $1085 = $60;
     $71 = $1085;
     $75 = 0;
     $1086 = $60;
     $1087 = $22;
     $1088 = ((($1087)) + 228|0);
     $1089 = HEAP32[$1088>>2]|0;
     $1090 = ($1086|0)>($1089|0);
     if ($1090) {
      label = 278;
     } else {
      $1091 = $56;
      $1092 = HEAP8[$1091>>0]|0;
      $1093 = $1092 << 24 >> 24;
      $1094 = ($1093|0)==(48);
      if ($1094) {
       label = 278;
      }
     }
     if ((label|0) == 278) {
      label = 0;
      $1095 = $27;
      $1096 = (($63) + (($1095*12)|0)|0);
      $1097 = HEAP32[$1096>>2]|0;
      $1098 = $1097 | 524288;
      HEAP32[$1096>>2] = $1098;
     }
     while(1) {
      $1099 = $73;
      $1100 = ((($76)) + 130|0);
      $1101 = ($1099>>>0)<($1100>>>0);
      if (!($1101)) {
       break;
      }
      $1102 = $74;
      $1103 = ((($1102)) + 1|0);
      $74 = $1103;
      $1104 = HEAP8[$1102>>0]|0;
      $1105 = $1104 << 24 >> 24;
      $28 = $1105;
      $1106 = (__Z9IsDigit09j($1105)|0);
      $1107 = ($1106|0)!=(0);
      if (!($1107)) {
       $1108 = $28;
       $1109 = $22;
       $1110 = ((($1109)) + 224|0);
       $1111 = HEAP32[$1110>>2]|0;
       $1112 = ($1108|0)!=($1111|0);
       if ($1112) {
        break;
       }
      }
      $1113 = $28;
      $1114 = $1113&255;
      $1115 = $73;
      $1116 = ((($1115)) + 1|0);
      $73 = $1116;
      HEAP8[$1115>>0] = $1114;
      $1117 = $71;
      $1118 = (($1117) + -1)|0;
      $71 = $1118;
      $1119 = $71;
      $1120 = ($1119|0)>(0);
      if (!($1120)) {
       continue;
      }
      $1121 = $22;
      $1122 = ((($1121)) + 208|0);
      $1123 = HEAP32[$1122>>2]|0;
      $1124 = $71;
      $1125 = 1 << $1124;
      $1126 = $1123 & $1125;
      $1127 = ($1126|0)!=(0);
      if (!($1127)) {
       continue;
      }
      $1128 = $75;
      $1129 = (($1128) + 1)|0;
      $75 = $1129;
      $1130 = (($77) + (($1128*12)|0)|0);
      $1131 = $27;
      $1132 = (($63) + (($1131*12)|0)|0);
      ;HEAP32[$1130>>2]=HEAP32[$1132>>2]|0;HEAP32[$1130+4>>2]=HEAP32[$1132+4>>2]|0;HEAP32[$1130+8>>2]=HEAP32[$1132+8>>2]|0;
      $1133 = $22;
      $1134 = ((($1133)) + 220|0);
      $1135 = HEAP32[$1134>>2]|0;
      $1136 = ($1135|0)!=(32);
      if ($1136) {
       $1137 = $22;
       $1138 = ((($1137)) + 220|0);
       $1139 = HEAP32[$1138>>2]|0;
       $1140 = $1139&255;
       $1141 = $73;
       $1142 = ((($1141)) + 1|0);
       $73 = $1142;
       HEAP8[$1141>>0] = $1140;
      }
      $1143 = $73;
      $1144 = ((($1143)) + 1|0);
      $73 = $1144;
      HEAP8[$1143>>0] = 32;
      $1145 = $27;
      $1146 = (($63) + (($1145*12)|0)|0);
      $1147 = HEAP32[$1146>>2]|0;
      $1148 = $1147 & 524288;
      $1149 = ($1148|0)==(0);
      if (!($1149)) {
       continue;
      }
      $1150 = $22;
      $1151 = ((($1150)) + 208|0);
      $1152 = HEAP32[$1151>>2]|0;
      $1153 = $71;
      $1154 = (($1153) - 1)|0;
      $1155 = 1 << $1154;
      $1156 = $1152 & $1155;
      $1157 = ($1156|0)!=(0);
      if ($1157) {
       $1158 = $73;
       $1159 = ((($1158)) + 1|0);
       $73 = $1159;
       HEAP8[$1158>>0] = 48;
       $1160 = $73;
       $1161 = ((($1160)) + 1|0);
       $73 = $1161;
       HEAP8[$1160>>0] = 48;
      }
      $1162 = $22;
      $1163 = ((($1162)) + 208|0);
      $1164 = HEAP32[$1163>>2]|0;
      $1165 = $71;
      $1166 = (($1165) - 2)|0;
      $1167 = 1 << $1166;
      $1168 = $1164 & $1167;
      $1169 = ($1168|0)!=(0);
      if (!($1169)) {
       continue;
      }
      $1170 = $73;
      $1171 = ((($1170)) + 1|0);
      $73 = $1171;
      HEAP8[$1170>>0] = 48;
     }
     $1172 = $74;
     $1173 = ((($1172)) + -1|0);
     $74 = $1173;
     $1174 = $75;
     $1175 = (($77) + (($1174*12)|0)|0);
     $1176 = $27;
     $1177 = (($63) + (($1176*12)|0)|0);
     ;HEAP32[$1175>>2]=HEAP32[$1177>>2]|0;HEAP32[$1175+4>>2]=HEAP32[$1177+4>>2]|0;HEAP32[$1175+8>>2]=HEAP32[$1177+8>>2]|0;HEAP32[$1175+12>>2]=HEAP32[$1177+12>>2]|0;HEAP32[$1175+16>>2]=HEAP32[$1177+16>>2]|0;HEAP32[$1175+20>>2]=HEAP32[$1177+20>>2]|0;
     $58 = 1;
     while(1) {
      $1178 = $58;
      $1179 = $75;
      $1180 = ($1178|0)<=($1179|0);
      if (!($1180)) {
       break;
      }
      $1181 = $58;
      $1182 = (($77) + (($1181*12)|0)|0);
      $1183 = HEAP32[$1182>>2]|0;
      $1184 = $1183 & -262209;
      HEAP32[$1182>>2] = $1184;
      $1185 = $58;
      $1186 = (($1185) + 1)|0;
      $58 = $1186;
     }
     $1187 = $73;
     $1188 = $74;
     dest=$1187; src=$1188; stop=dest+16|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
     $1189 = $73;
     $1190 = ((($1189)) + 16|0);
     HEAP8[$1190>>0] = 0;
     $75 = 0;
     $1191 = ((($76)) + 1|0);
     $74 = $1191;
     while(1) {
      $1192 = $74;
      $1193 = $73;
      $1194 = ($1192>>>0)<($1193>>>0);
      if (!($1194)) {
       break L372;
      }
      $1195 = $22;
      $1196 = $74;
      $1197 = $75;
      $1198 = (($1197) + 1)|0;
      $75 = $1198;
      $1199 = (($77) + (($1197*12)|0)|0);
      $1200 = $27;
      $1201 = (($63) + (($1200*12)|0)|0);
      $1202 = ((($1201)) + 6|0);
      $1203 = HEAP8[$1202>>0]|0;
      $1204 = $1203&255;
      $1205 = (__ZL14TranslateWord2P10TranslatorPcP8WORD_TABii($1195,$1196,$1199,$1204,0)|0);
      $47 = $1205;
      while(1) {
       $1206 = $74;
       $1207 = ((($1206)) + 1|0);
       $74 = $1207;
       $1208 = HEAP8[$1206>>0]|0;
       $1209 = $1208 << 24 >> 24;
       $1210 = ($1209|0)!=(32);
       if (!($1210)) {
        break;
       }
      }
      $1211 = $27;
      $1212 = (($63) + (($1211*12)|0)|0);
      $1213 = ((($1212)) + 6|0);
      HEAP8[$1213>>0] = 0;
     }
    } else {
     HEAP32[19175] = 0;
     $1214 = $22;
     $1215 = $56;
     $1216 = $27;
     $1217 = (($63) + (($1216*12)|0)|0);
     $1218 = $27;
     $1219 = (($63) + (($1218*12)|0)|0);
     $1220 = ((($1219)) + 6|0);
     $1221 = HEAP8[$1220>>0]|0;
     $1222 = $1221&255;
     $1223 = $27;
     $1224 = (($1223) + 1)|0;
     $1225 = (($63) + (($1224*12)|0)|0);
     $1226 = ((($1225)) + 6|0);
     $1227 = HEAP8[$1226>>0]|0;
     $1228 = $1227&255;
     $1229 = (__ZL14TranslateWord2P10TranslatorPcP8WORD_TABii($1214,$1215,$1217,$1222,$1228)|0);
     $47 = $1229;
     $1230 = HEAP32[19175]|0;
     $1231 = $27;
     $1232 = (($1231) + 1)|0;
     $1233 = (($63) + (($1232*12)|0)|0);
     $1234 = ((($1233)) + 6|0);
     $1235 = HEAP8[$1234>>0]|0;
     $1236 = $1235&255;
     $1237 = ($1230|0)>($1236|0);
     if ($1237) {
      $1238 = HEAP32[19175]|0;
      $1239 = $1238&255;
      $1240 = $27;
      $1241 = (($1240) + 1)|0;
      $1242 = (($63) + (($1241*12)|0)|0);
      $1243 = ((($1242)) + 6|0);
      HEAP8[$1243>>0] = $1239;
      HEAP32[19175] = 0;
     }
     $1244 = $47;
     $1245 = $1244 & 4096;
     $1246 = ($1245|0)!=(0);
     L409: do {
      if ($1246) {
       $1247 = $56;
       $74 = $1247;
       while(1) {
        $1248 = $74;
        $1249 = HEAP8[$1248>>0]|0;
        $1250 = $1249 << 24 >> 24;
        $1251 = ($1250|0)!=(32);
        if (!($1251)) {
         break L409;
        }
        dest=$76; stop=dest+9|0; do { HEAP8[dest>>0]=32|0; dest=dest+1|0; } while ((dest|0) < (stop|0));
        $1252 = $74;
        $1253 = (__Z7utf8_inPiPKc($72,$1252)|0);
        $71 = $1253;
        $1254 = ((($76)) + 2|0);
        $1255 = $74;
        $1256 = $71;
        _memcpy(($1254|0),($1255|0),($1256|0))|0;
        $1257 = $22;
        $1258 = ((($76)) + 2|0);
        $1259 = $27;
        $1260 = (($63) + (($1259*12)|0)|0);
        (__ZL14TranslateWord2P10TranslatorPcP8WORD_TABii($1257,$1258,$1260,0,0)|0);
        $1261 = $71;
        $1262 = $74;
        $1263 = (($1262) + ($1261)|0);
        $74 = $1263;
       }
      }
     } while(0);
     $1264 = $47;
     $1265 = $1264 & 50331648;
     $1266 = ($1265|0)!=(0);
     if ($1266) {
      $1267 = $27;
      $1268 = $64;
      $1269 = (($1268) - 1)|0;
      $1270 = HEAP32[10458]|0;
      $1271 = (($1269) - ($1270))|0;
      $1272 = ($1267|0)==($1271|0);
      if ($1272) {
       $1273 = $66;
       $1274 = $1273 & 4194304;
       $1275 = ($1274|0)!=(0);
       if (!($1275)) {
        break;
       }
       $40 = 10;
       $67 = 4;
      }
     }
    }
   } while(0);
   $1276 = $47;
   $1277 = $1276 & 128;
   $1278 = ($1277|0)!=(0);
   $1279 = HEAP32[10458]|0;
   $1280 = ($1279|0)>(0);
   $or$cond64 = $1278 & $1280;
   if ($or$cond64) {
    while(1) {
     $1281 = $27;
     $1282 = HEAP32[10458]|0;
     $1283 = (($1281) + ($1282))|0;
     $1284 = (($63) + (($1283*12)|0)|0);
     $1285 = HEAP32[$1284>>2]|0;
     $1286 = $1285 | 1048576;
     HEAP32[$1284>>2] = $1286;
     $1287 = HEAP32[10458]|0;
     $1288 = (($1287) + -1)|0;
     HEAP32[10458] = $1288;
     $$old = HEAP32[10458]|0;
     $$old63 = ($$old|0)>(0);
     if (!($$old63)) {
      break;
     }
    }
   }
  }
  $1289 = $27;
  $1290 = (($1289) + 1)|0;
  $27 = $1290;
 }
 $1291 = HEAP32[19492]|0;
 $1292 = HEAP32[19494]|0;
 $1293 = ($1291|0)<($1292|0);
 if ($1293) {
  __Z16Word_EmbeddedCmdv();
 }
 $27 = 0;
 while(1) {
  $1294 = $27;
  $1295 = ($1294|0)<(2);
  $1296 = HEAP32[19177]|0;
  if (!($1295)) {
   break;
  }
  $1297 = $27;
  $1298 = (($1296) + ($1297))|0;
  $1299 = (100420 + ($1298<<3)|0);
  $78 = $1299;
  $1300 = $78;
  $1301 = ((($1300)) + 2|0);
  HEAP8[$1301>>0] = 9;
  $1302 = $78;
  $1303 = ((($1302)) + 3|0);
  HEAP8[$1303>>0] = 0;
  $1304 = HEAP32[$30>>2]|0;
  $1305 = $1304&65535;
  $1306 = $78;
  $1307 = ((($1306)) + 4|0);
  HEAP16[$1307>>1] = $1305;
  $1308 = $78;
  HEAP16[$1308>>1] = 0;
  $1309 = $27;
  $1310 = (($1309) + 1)|0;
  $27 = $1310;
 }
 $1311 = (($1296) + 2)|0;
 HEAP32[19177] = $1311;
 $1312 = HEAP32[19171]|0;
 $1313 = ($1312|0)==(0);
 if ($1313) {
  $40 = 0;
 }
 $1314 = (__Z3Eofv()|0);
 $1315 = ($1314|0)!=(0);
 if ($1315) {
  $1316 = $64;
  $1317 = ($1316|0)==(0);
  $1318 = HEAP32[19157]|0;
  $1319 = ($1318|0)==(0);
  $or$cond57 = $1317 | $1319;
  if ($or$cond57) {
   $40 = 10;
  }
 }
 $1320 = $22;
 $1321 = $40;
 $1322 = $50;
 __Z15MakePhonemeListP10Translatorii($1320,$1321,$1322);
 HEAP32[(75096)>>2] = 0;
 HEAP16[(75092)>>1] = 1;
 $1323 = $51;
 $1324 = ($1323|0)!=(0);
 if ($1324) {
  $1325 = HEAP32[12771]|0;
  $1326 = (($1325) - 2)|0;
  $1327 = (51088 + (($1326*24)|0)|0);
  HEAP16[$1327>>1] = 2;
  $1328 = HEAP32[19494]|0;
  $1329 = (($1328) - 1)|0;
  $1330 = (76960 + ($1329<<2)|0);
  $1331 = HEAP32[$1330>>2]|0;
  $1332 = $1331 | 128;
  HEAP32[$1330>>2] = $1332;
  $1333 = HEAP32[19494]|0;
  $1334 = (76960 + ($1333<<2)|0);
  HEAP32[$1334>>2] = 128;
 }
 $1335 = $40;
 HEAP32[19499] = $1335;
 $1336 = $25;
 $1337 = ($1336|0)!=(0|0);
 if ($1337) {
  $1338 = $67;
  $1339 = $25;
  HEAP32[$1339>>2] = $1338;
 }
 HEAP32[19174] = 0;
 $1340 = $66;
 $1341 = $1340 & 524288;
 $1342 = ($1341|0)!=(0);
 $$58 = $1342 ? 1 : 0;
 HEAP32[19174] = $$58;
 $1343 = $26;
 $1344 = ($1343|0)!=(0|0);
 do {
  if ($1344) {
   $1345 = $66;
   $1346 = $1345 & 131072;
   $1347 = ($1346|0)!=(0);
   $1348 = $26;
   if ($1347) {
    HEAP32[$1348>>2] = 121788;
    break;
   } else {
    HEAP32[$1348>>2] = 0;
    break;
   }
  }
 } while(0);
 $1349 = (__Z3Eofv()|0);
 $1350 = ($1349|0)!=(0);
 $1351 = $24;
 $1352 = ($1351|0)==(0|0);
 $or$cond60 = $1350 | $1352;
 if ($or$cond60) {
  $21 = 0;
  $1357 = $21;
  STACKTOP = sp;return ($1357|0);
 }
 $1353 = HEAP32[19238]|0;
 $1354 = ($1353|0)==(3);
 if ($1354) {
  $1355 = HEAP32[10480]|0;
  $21 = $1355;
  $1357 = $21;
  STACKTOP = sp;return ($1357|0);
 } else {
  $1356 = HEAP32[10479]|0;
  $21 = $1356;
  $1357 = $21;
  STACKTOP = sp;return ($1357|0);
 }
 return (0)|0;
}
function __ZL15EmbeddedCommandPj($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0;
 var $82 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $2 = $0;
 $3 = 23529;
 $4 = -1;
 $5 = 0;
 $10 = $2;
 $11 = HEAP32[$10>>2]|0;
 $9 = $11;
 $12 = $9;
 $13 = (120948 + ($12)|0);
 $14 = HEAP8[$13>>0]|0;
 $6 = $14;
 $15 = $6;
 $16 = $15&255;
 $17 = ($16|0)==(43);
 if ($17) {
  $5 = 64;
  $18 = $9;
  $19 = (($18) + 1)|0;
  $9 = $19;
 } else {
  $20 = $6;
  $21 = $20&255;
  $22 = ($21|0)==(45);
  if ($22) {
   $5 = 96;
   $23 = $9;
   $24 = (($23) + 1)|0;
   $9 = $24;
  }
 }
 $25 = $9;
 $26 = (120948 + ($25)|0);
 $27 = HEAP8[$26>>0]|0;
 $28 = $27 << 24 >> 24;
 $29 = (__Z9IsDigit09j($28)|0);
 $30 = ($29|0)!=(0);
 L6: do {
  if ($30) {
   $31 = $9;
   $32 = (120948 + ($31)|0);
   $33 = (_atoi($32)|0);
   $4 = $33;
   while(1) {
    $34 = $9;
    $35 = (120948 + ($34)|0);
    $36 = HEAP8[$35>>0]|0;
    $37 = $36 << 24 >> 24;
    $38 = (__Z9IsDigit09j($37)|0);
    $39 = ($38|0)!=(0);
    if (!($39)) {
     break L6;
    }
    $40 = $9;
    $41 = (($40) + 1)|0;
    $9 = $41;
   }
  }
 } while(0);
 $42 = $9;
 $43 = (($42) + 1)|0;
 $9 = $43;
 $44 = (120948 + ($42)|0);
 $45 = HEAP8[$44>>0]|0;
 $6 = $45;
 $46 = HEAP32[19494]|0;
 $47 = ($46|0)>=(248);
 if ($47) {
  $1 = 0;
  $82 = $1;
  STACKTOP = sp;return ($82|0);
 }
 $48 = $3;
 $49 = $6;
 $50 = $49&255;
 $51 = (__Z8strchr_wPKci($48,$50)|0);
 $7 = $51;
 $52 = ($51|0)==(0|0);
 if ($52) {
  $1 = 0;
  $82 = $1;
  STACKTOP = sp;return ($82|0);
 }
 $53 = $7;
 $54 = $3;
 $55 = $53;
 $56 = $54;
 $57 = (($55) - ($56))|0;
 $58 = (($57) + 1)|0;
 $8 = $58;
 $59 = $4;
 $60 = ($59|0)==(-1);
 if ($60) {
  $61 = $8;
  $62 = (4988 + ($61<<2)|0);
  $63 = HEAP32[$62>>2]|0;
  $4 = $63;
  $5 = 0;
 }
 $64 = $8;
 $65 = ($64|0)==(9);
 if ($65) {
  $66 = $4;
  HEAP32[19496] = $66;
  HEAP32[19497] = 0;
 }
 $67 = $8;
 $68 = ($67|0)==(13);
 do {
  if ($68) {
   $69 = $4;
   $70 = ($69|0)>=(3);
   if ($70) {
    HEAP32[19498] = 2048;
    break;
   } else {
    HEAP32[19498] = 0;
    break;
   }
  }
 } while(0);
 $71 = $8;
 $72 = $5;
 $73 = (($71) + ($72))|0;
 $74 = $4;
 $75 = $74 << 8;
 $76 = (($73) + ($75))|0;
 $77 = HEAP32[19494]|0;
 $78 = (($77) + 1)|0;
 HEAP32[19494] = $78;
 $79 = (76960 + ($77<<2)|0);
 HEAP32[$79>>2] = $76;
 $80 = $9;
 $81 = $2;
 HEAP32[$81>>2] = $80;
 $1 = 1;
 $82 = $1;
 STACKTOP = sp;return ($82|0);
}
function __ZL13TranslateCharP10TranslatorPcijjPiS2_($0,$1,$2,$3,$4,$5,$6) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0;
 var $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0;
 var $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $or$cond = 0, $or$cond3 = 0, $or$cond5 = 0, $switch$split2D = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $19 = sp;
 $8 = $0;
 $9 = $1;
 $10 = $2;
 $11 = $3;
 $12 = $4;
 $13 = $5;
 $14 = $6;
 $20 = $11;
 $21 = (($20) - 44032)|0;
 $15 = $21;
 $22 = ($21|0)>=(0);
 $23 = $11;
 $24 = ($23>>>0)<=(55215);
 $or$cond = $22 & $24;
 if ($or$cond) {
  $25 = $15;
  $26 = (($25|0) / 28)&-1;
  $27 = (($26|0) / 21)&-1;
  $16 = $27;
  $28 = $15;
  $29 = (($28|0) / 28)&-1;
  $30 = (($29|0) % 21)&-1;
  $17 = $30;
  $31 = $15;
  $32 = (($31|0) % 28)&-1;
  $18 = $32;
  $33 = $16;
  $34 = ($33|0)==(11);
  if ($34) {
   $35 = $17;
   $36 = (($35) + 4449)|0;
   $11 = $36;
   $37 = $18;
   $38 = ($37|0)>(0);
   if ($38) {
    $39 = $18;
    $40 = (($39) + 4519)|0;
    $41 = $13;
    HEAP32[$41>>2] = $40;
   }
  } else {
   $42 = $16;
   $43 = (($42) + 4352)|0;
   $11 = $43;
   $44 = $17;
   $45 = ($44*28)|0;
   $46 = (6468 + ($45))|0;
   $47 = $18;
   $48 = (($46) + ($47))|0;
   $49 = (($48) + 44032)|0;
   $50 = $13;
   HEAP32[$50>>2] = $49;
  }
  $51 = $11;
  $7 = $51;
  $92 = $7;
  STACKTOP = sp;return ($92|0);
 }
 $52 = $11;
 $53 = (($52) - 12592)|0;
 $15 = $53;
 $54 = ($53|0)>=(0);
 $55 = $15;
 $56 = ($55|0)<(52);
 $or$cond3 = $54 & $56;
 if ($or$cond3) {
  $57 = $15;
  $58 = (23477 + ($57)|0);
  $59 = HEAP8[$58>>0]|0;
  $60 = $59&255;
  $61 = (($60) + 4352)|0;
  $7 = $61;
  $92 = $7;
  STACKTOP = sp;return ($92|0);
 }
 $62 = $8;
 $63 = ((($62)) + 324|0);
 $64 = HEAP32[$63>>2]|0;
 $switch$split2D = ($64|0)<(28268);
 if ($switch$split2D) {
  switch ($64|0) {
  case 24934:  {
   label = 10;
   break;
  }
  default: {
  }
  }
 } else {
  switch ($64|0) {
  case 28268:  {
   label = 10;
   break;
  }
  default: {
  }
  }
 }
 if ((label|0) == 10) {
  $65 = $10;
  $66 = (__Z9iswalpha2i($65)|0);
  $67 = ($66|0)!=(0);
  if (!($67)) {
   $68 = $9;
   $69 = ((($68)) + 1|0);
   (__Z7utf8_inPiPKc($19,$69)|0);
   $70 = $11;
   $71 = ($70|0)==(39);
   if ($71) {
    $72 = HEAP32[$19>>2]|0;
    $73 = (__Z7IsSpacej($72)|0);
    $74 = ($73|0)!=(0);
    if ($74) {
     $75 = $12;
     $76 = ($75|0)==(110);
     if ($76) {
      $77 = $8;
      $78 = ((($77)) + 324|0);
      $79 = HEAP32[$78>>2]|0;
      $80 = ($79|0)==(24934);
      if ($80) {
       $81 = $9;
       HEAP8[$81>>0] = 32;
       $7 = 601;
       $92 = $7;
       STACKTOP = sp;return ($92|0);
      }
     }
     $82 = $12;
     $83 = ($82|0)==(110);
     $84 = $12;
     $85 = ($84|0)==(116);
     $or$cond5 = $83 | $85;
     if ($or$cond5) {
      $7 = 601;
      $92 = $7;
      STACKTOP = sp;return ($92|0);
     }
    }
   }
  }
 }
 $86 = $8;
 $87 = $11;
 $88 = $12;
 $89 = $13;
 $90 = $14;
 $91 = (__ZL14SubstituteCharP10TranslatorjjPiS1_($86,$87,$88,$89,$90)|0);
 $7 = $91;
 $92 = $7;
 STACKTOP = sp;return ($92|0);
}
function __ZL14TranslateWord2P10TranslatorPcP8WORD_TABii($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$ = 0, $$2 = 0, $$7 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0;
 var $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0;
 var $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0;
 var $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0;
 var $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0;
 var $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0;
 var $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0;
 var $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0;
 var $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0;
 var $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0;
 var $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0;
 var $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0;
 var $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0;
 var $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0;
 var $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0;
 var $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0;
 var $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0;
 var $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0;
 var $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0;
 var $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0;
 var $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0;
 var $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0;
 var $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0;
 var $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0;
 var $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0;
 var $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0;
 var $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0;
 var $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0;
 var $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0;
 var $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0;
 var $749 = 0, $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0, $765 = 0, $766 = 0;
 var $767 = 0, $768 = 0, $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0, $783 = 0, $784 = 0;
 var $785 = 0, $786 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0;
 var $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond = 0, $or$cond11 = 0, $or$cond13 = 0, $or$cond4 = 0, $or$cond6 = 0, $or$cond9 = 0, $vararg_buffer = 0, $vararg_buffer15 = 0, $vararg_ptr14 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 752|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(752|0);
 $vararg_buffer15 = sp + 8|0;
 $vararg_buffer = sp;
 $32 = sp + 56|0;
 $35 = sp + 585|0;
 $36 = sp + 424|0;
 $37 = sp + 384|0;
 $39 = sp + 368|0;
 $43 = sp + 24|0;
 $44 = sp + 16|0;
 $45 = sp + 168|0;
 $6 = $0;
 $7 = $1;
 $8 = $2;
 $9 = $3;
 $10 = $4;
 $11 = 0;
 $14 = 0;
 $22 = 0;
 $23 = -1;
 $24 = 0;
 $25 = -1;
 $26 = 1;
 $47 = HEAP32[11248]|0;
 $48 = ($47|0)!=(0|0);
 if ($48) {
  $49 = HEAP32[11249]|0;
  $50 = $49 & 8;
  $51 = ($50|0)!=(0);
  if ($51) {
   $52 = HEAP32[11248]|0;
   $53 = $8;
   $54 = HEAP32[$53>>2]|0;
   $55 = $8;
   $56 = ((($55)) + 10|0);
   $57 = HEAP8[$56>>0]|0;
   $58 = $57&255;
   HEAP32[$vararg_buffer>>2] = $54;
   $vararg_ptr14 = ((($vararg_buffer)) + 4|0);
   HEAP32[$vararg_ptr14>>2] = $58;
   (_fprintf($52,23445,$vararg_buffer)|0);
   $29 = 0;
   while(1) {
    $59 = $29;
    $60 = ($59|0)<(40);
    if (!($60)) {
     break;
    }
    $61 = $29;
    $62 = $7;
    $63 = (($62) + ($61)|0);
    $64 = HEAP8[$63>>0]|0;
    $65 = $64 << 24 >> 24;
    $66 = ($65|0)==(0);
    if ($66) {
     break;
    }
    $67 = $29;
    $68 = $7;
    $69 = (($68) + ($67)|0);
    $70 = HEAP8[$69>>0]|0;
    $71 = $70 << 24 >> 24;
    $72 = HEAP32[11248]|0;
    (_fputc($71,$72)|0);
    $73 = $29;
    $74 = (($73) + 1)|0;
    $29 = $74;
   }
   $75 = HEAP32[11248]|0;
   (_fprintf($75,23470,$vararg_buffer15)|0);
  }
 }
 $76 = $8;
 $77 = ((($76)) + 10|0);
 $78 = HEAP8[$77>>0]|0;
 $79 = $78&255;
 $28 = $79;
 $80 = $28;
 $81 = ($80|0)>(31);
 $$ = $81 ? 31 : $79;
 $28 = $$;
 $82 = $8;
 $83 = ((($82)) + 8|0);
 $84 = HEAP16[$83>>1]|0;
 $85 = $84&65535;
 $86 = $85 & 2047;
 $87 = $28;
 $88 = $87 << 11;
 $89 = $86 | $88;
 $27 = $89;
 $90 = $8;
 $91 = HEAP32[$90>>2]|0;
 $33 = $91;
 $92 = $33;
 $93 = $92 & 64;
 $94 = ($93|0)!=(0);
 if ($94) {
  $95 = $8;
  $96 = HEAP32[$95>>2]|0;
  $97 = $96 & -65;
  HEAP32[$95>>2] = $97;
  HEAP32[19500] = 2;
  __Z16Word_EmbeddedCmdv();
 }
 $98 = $7;
 $99 = HEAP8[$98>>0]|0;
 $100 = $99 << 24 >> 24;
 $101 = ($100|0)==(0);
 if (!($101)) {
  $102 = $33;
  $103 = $102 & 1048576;
  $104 = ($103|0)!=(0);
  if (!($104)) {
   $128 = $6;
   $129 = ((($128)) + 8344|0);
   $130 = HEAP32[$129>>2]|0;
   $131 = ($130|0)>(0);
   if ($131) {
    $132 = $6;
    $133 = ((($132)) + 8344|0);
    $134 = HEAP32[$133>>2]|0;
    $135 = (($134) + -1)|0;
    HEAP32[$133>>2] = $135;
   }
   $136 = HEAP32[19160]|0;
   $137 = $136 & 240;
   $138 = ($137|0)==(16);
   if ($138) {
    $139 = $33;
    $140 = $139 & 512;
    $141 = ($140|0)!=(0);
    if (!($141)) {
     $142 = $9;
     $143 = (($142) + 4)|0;
     $9 = $143;
    }
   }
   $144 = $33;
   $145 = $144 & 2;
   $146 = ($145|0)!=(0);
   if ($146) {
    $147 = HEAP32[19158]|0;
    $148 = ($147|0)>(2);
    $149 = HEAP32[19494]|0;
    $150 = ($149|0)<(244);
    $or$cond = $148 & $150;
    if ($or$cond) {
     $151 = HEAP32[19500]|0;
     $152 = ($151|0)!=(0);
     if ($152) {
      $153 = HEAP32[19494]|0;
      $154 = (($153) - 1)|0;
      $155 = (76960 + ($154<<2)|0);
      $156 = HEAP32[$155>>2]|0;
      $157 = $156 & -129;
      HEAP32[$155>>2] = $157;
     }
     $158 = HEAP32[19158]|0;
     $24 = $158;
     $159 = ($158|0)==(3);
     $$2 = $159 ? 20 : $158;
     $24 = $$2;
     $160 = $24;
     $161 = $160 << 8;
     $162 = (193 + ($161))|0;
     $163 = HEAP32[19494]|0;
     $164 = (($163) + 1)|0;
     HEAP32[19494] = $164;
     $165 = (76960 + ($163<<2)|0);
     HEAP32[$165>>2] = $162;
     HEAP32[19500] = 2;
    }
   }
   $15 = 120548;
   $166 = $33;
   $167 = $166 & 8;
   $168 = ($167|0)!=(0);
   if ($168) {
    $169 = $7;
    $170 = (_memcmp($169,23473,3)|0);
    $171 = ($170|0)==(0);
    $172 = $7;
    if ($171) {
     $173 = ((($172)) + 3|0);
     $7 = $173;
     $29 = 0;
     while(1) {
      $174 = $7;
      $175 = ((($174)) + 1|0);
      $7 = $175;
      $176 = HEAP8[$174>>0]|0;
      $177 = $176 << 24 >> 24;
      $38 = $177;
      $178 = $38;
      $179 = ($178|0)==(32);
      $180 = $38;
      $181 = ($180|0)==(0);
      $or$cond4 = $179 | $181;
      if ($or$cond4) {
       break;
      }
      $182 = $38;
      $183 = (_tolower($182)|0);
      $184 = $183&255;
      $185 = $29;
      $186 = (($185) + 1)|0;
      $29 = $186;
      $187 = (($39) + ($185)|0);
      HEAP8[$187>>0] = $184;
     }
     $188 = $29;
     $189 = (($39) + ($188)|0);
     HEAP8[$189>>0] = 0;
     $190 = (__Z18LookupPhonemeTablePKc($39)|0);
     $29 = $190;
     $191 = ($190|0)>(0);
     if ($191) {
      $192 = $29;
      __Z18SelectPhonemeTablei($192);
      HEAP8[120548] = 21;
      $193 = $29;
      $194 = $193&255;
      HEAP8[(120549)>>0] = $194;
      HEAP8[(120550)>>0] = 0;
     }
    } else {
     (__Z14EncodePhonemesPKcPcPi($172,120548,$32)|0);
    }
    $11 = -2147483648;
   } else {
    $29 = 0;
    while(1) {
     $195 = $29;
     $196 = $7;
     $197 = (($196) + ($195)|0);
     $198 = HEAP8[$197>>0]|0;
     $199 = $29;
     $200 = (($35) + ($199)|0);
     HEAP8[$200>>0] = $198;
     $201 = $198 << 24 >> 24;
     $40 = $201;
     $202 = ($201|0)!=(32);
     $203 = $40;
     $204 = ($203|0)!=(0);
     $or$cond6 = $202 & $204;
     if ($or$cond6) {
      $205 = $29;
      $206 = ($205|0)<(160);
      $786 = $206;
     } else {
      $786 = 0;
     }
     $207 = $29;
     if (!($786)) {
      break;
     }
     $208 = (($207) + 1)|0;
     $29 = $208;
    }
    $34 = $207;
    $209 = ((($36)) + 2|0);
    HEAP8[$209>>0] = 0;
    $210 = HEAP32[19149]|0;
    $211 = $7;
    $212 = $10;
    $213 = $8;
    $214 = ((($36)) + 2|0);
    $215 = (__Z13TranslateWordP10TranslatorPciP8WORD_TABS1_($210,$211,$212,$213,$214)|0);
    $11 = $215;
    $216 = $11;
    $217 = $216 & 4096;
    $218 = ($217|0)!=(0);
    if ($218) {
     $219 = $7;
     $220 = $34;
     _memcpy(($219|0),($35|0),($220|0))|0;
     $221 = $11;
     $5 = $221;
     $785 = $5;
     STACKTOP = sp;return ($785|0);
    }
    $222 = $11;
    $223 = $222 & 8388608;
    $224 = ($223|0)!=(0);
    do {
     if ($224) {
      $225 = $8;
      $226 = ((($225)) + 12|0);
      $227 = HEAP32[$226>>2]|0;
      $228 = $227 & 8;
      $229 = ($228|0)!=(0);
      if (!($229)) {
       $42 = 1;
       HEAP32[$43>>2] = 0;
       $230 = $6;
       $231 = ((($230)) + 24|0);
       $232 = ((($231)) + 44|0);
       $233 = HEAP32[$232>>2]|0;
       $30 = $233;
       $234 = $7;
       $41 = $234;
       while(1) {
        $235 = $41;
        $236 = HEAP8[$235>>0]|0;
        $237 = $236 << 24 >> 24;
        $238 = ($237|0)!=(32);
        $239 = $41;
        $240 = ((($239)) + 1|0);
        if (!($238)) {
         break;
        }
        $41 = $240;
       }
       (__Z7utf8_inPiPKc($44,$240)|0);
       $241 = HEAP32[$44>>2]|0;
       $242 = (__Z9iswalpha2i($241)|0);
       $243 = ($242|0)!=(0);
       if (!($243)) {
        $42 = 0;
       }
       $244 = $42;
       $245 = ($244|0)!=(0);
       do {
        if ($245) {
         (_strcpy($45,120548)|0);
         $246 = HEAP32[19149]|0;
         $247 = $41;
         $248 = ((($247)) + 1|0);
         $249 = $8;
         $250 = ((($249)) + 12|0);
         $251 = (__Z13TranslateWordP10TranslatorPciP8WORD_TABS1_($246,$248,0,$250,0)|0);
         HEAP32[$43>>2] = $251;
         $252 = HEAP32[$43>>2]|0;
         $253 = $252 & 67108864;
         $254 = ($253|0)!=(0);
         if ($254) {
          label = 51;
         } else {
          $255 = HEAP8[120548]|0;
          $256 = $255 << 24 >> 24;
          $257 = ($256|0)==(21);
          if ($257) {
           label = 51;
          }
         }
         if ((label|0) == 51) {
          $42 = 0;
         }
         $258 = $30;
         $259 = $258 & 256;
         $260 = ($259|0)!=(0);
         do {
          if ($260) {
           $261 = HEAP32[$43>>2]|0;
           $262 = $261 & 32768;
           $263 = ($262|0)==(0);
           if (!($263)) {
            break;
           }
           $42 = 0;
          }
         } while(0);
         $264 = $30;
         $265 = $264 & 512;
         $266 = ($265|0)!=(0);
         do {
          if ($266) {
           $267 = $8;
           $268 = ((($267)) + 12|0);
           $269 = HEAP32[$268>>2]|0;
           $270 = $269 & 16;
           $271 = ($270|0)!=(0);
           if (!($271)) {
            break;
           }
           $42 = 0;
          }
         } while(0);
         $272 = $42;
         $273 = ($272|0)==(0);
         if (!($273)) {
          break;
         }
         (_strcpy(120548,$45)|0);
        }
       } while(0);
       $274 = $42;
       $275 = ($274|0)!=(0);
       if ($275) {
        $276 = $41;
        HEAP8[$276>>0] = 45;
        $277 = $8;
        $278 = HEAP32[$277>>2]|0;
        $279 = $278 & -2;
        HEAP32[$277>>2] = $279;
        $280 = HEAP32[19149]|0;
        $281 = $7;
        $282 = $10;
        $283 = $8;
        $284 = (__Z13TranslateWordP10TranslatorPciP8WORD_TABS1_($280,$281,$282,$283,0)|0);
        $11 = $284;
        $285 = $30;
        $286 = ($285|0)>(0);
        if ($286) {
         $287 = $15;
         $288 = (__ZL14CountSyllablesPh($287)|0);
         $289 = $30;
         $290 = $289 & 31;
         $291 = ($288|0)>($290|0);
         if ($291) {
          $292 = $41;
          HEAP8[$292>>0] = 32;
          $293 = HEAP32[19149]|0;
          $294 = $7;
          $295 = $10;
          $296 = $8;
          $297 = (__Z13TranslateWordP10TranslatorPciP8WORD_TABS1_($293,$294,$295,$296,0)|0);
          $11 = $297;
          break;
         }
        }
        $298 = $11;
        $299 = ($298|0)==(0);
        if ($299) {
         $300 = HEAP32[$43>>2]|0;
         $11 = $300;
        }
        $301 = $11;
        $302 = $301 | 128;
        $11 = $302;
        HEAP32[10458] = 1;
       }
      }
     }
    } while(0);
    $303 = $15;
    $304 = HEAP8[$303>>0]|0;
    $305 = $304&255;
    $306 = ($305|0)==(21);
    if ($306) {
     (_strcpy($37,119724)|0);
     $46 = 0;
     while(1) {
      $307 = $46;
      $308 = ($307|0)<(2);
      if (!($308)) {
       break;
      }
      $309 = $7;
      $310 = $34;
      _memcpy(($309|0),($35|0),($310|0))|0;
      $311 = $15;
      $312 = ((($311)) + 1|0);
      $31 = $312;
      $313 = $31;
      $314 = HEAP8[$313>>0]|0;
      $315 = $314 << 24 >> 24;
      $316 = ($315|0)==(0);
      $$7 = $316 ? 25529 : $312;
      $31 = $$7;
      $317 = $31;
      $318 = (__Z14SetTranslator2PKc($317)|0);
      $25 = $318;
      $319 = $25;
      $320 = ($319|0)>=(0);
      do {
       if ($320) {
        $321 = $8;
        $322 = HEAP32[$321>>2]|0;
        $323 = $322 | 4194304;
        HEAP32[$321>>2] = $323;
        $324 = ((($36)) + 2|0);
        $325 = HEAP8[$324>>0]|0;
        $326 = $325 << 24 >> 24;
        $327 = ($326|0)!=(0);
        if ($327) {
         HEAP8[$36>>0] = 0;
         $328 = ((($36)) + 1|0);
         HEAP8[$328>>0] = 32;
         $329 = HEAP32[19150]|0;
         $330 = ((($36)) + 1|0);
         $331 = $10;
         $332 = $8;
         $333 = (__Z13TranslateWordP10TranslatorPciP8WORD_TABS1_($329,$330,$331,$332,0)|0);
         $11 = $333;
         break;
        } else {
         $334 = HEAP32[19150]|0;
         $335 = $7;
         $336 = $10;
         $337 = $8;
         $338 = ((($36)) + 2|0);
         $339 = (__Z13TranslateWordP10TranslatorPciP8WORD_TABS1_($334,$335,$336,$337,$338)|0);
         $11 = $339;
         break;
        }
       }
      } while(0);
      $340 = $15;
      $341 = HEAP8[$340>>0]|0;
      $342 = $341&255;
      $343 = ($342|0)!=(21);
      if ($343) {
       break;
      }
      $344 = $46;
      $345 = (($344) + 1)|0;
      $46 = $345;
     }
     $346 = $15;
     $347 = HEAP8[$346>>0]|0;
     $348 = $347&255;
     $349 = ($348|0)==(21);
     if ($349) {
      $5 = 4096;
      $785 = $5;
      STACKTOP = sp;return ($785|0);
     }
     $350 = $25;
     $351 = ($350|0)<(0);
     if ($351) {
      $352 = $15;
      HEAP8[$352>>0] = 13;
      $353 = $15;
      $354 = ((($353)) + 1|0);
      HEAP8[$354>>0] = 13;
      $355 = $15;
      $356 = ((($355)) + 2|0);
      HEAP8[$356>>0] = 0;
     }
     $357 = $6;
     $358 = $25;
     $359 = $15;
     $360 = (__Z24ChangeEquivalentPhonemesP10TranslatoriPc($357,$358,$359)|0);
     $361 = ($360|0)!=(0);
     if ($361) {
      $25 = -1;
     }
     $362 = $25;
     $363 = ($362|0)==(-1);
     if ($363) {
      (_strcpy(119724,$37)|0);
      $364 = HEAP32[1124]|0;
      $365 = ((($364)) + 60|0);
      $366 = HEAP32[$365>>2]|0;
      __Z18SelectPhonemeTablei($366);
      $367 = HEAP32[1124]|0;
      $368 = ((($367)) + 60|0);
      $369 = HEAP32[$368>>2]|0;
      $25 = $369;
     }
    }
    $370 = $33;
    $371 = $370 & 128;
    $372 = ($371|0)!=(0);
    if (!($372)) {
     $373 = $11;
     $374 = $373 & 268435456;
     $375 = ($374|0)!=(0);
     $376 = $9;
     $377 = ($376|0)<(1);
     $or$cond13 = $375 & $377;
     if ($or$cond13) {
      $9 = 1;
     }
     $378 = $11;
     $379 = $378 & 256;
     $380 = ($379|0)!=(0);
     if ($380) {
      $381 = $33;
      $382 = $381 & 528;
      $383 = ($382|0)!=(0);
      if (!($383)) {
       $384 = $8;
       $385 = ((($384)) + -12|0);
       $386 = HEAP32[$385>>2]|0;
       $387 = $386 & 512;
       $388 = ($387|0)!=(0);
       if (!($388)) {
        $389 = $6;
        $390 = ((($389)) + 8344|0);
        $391 = HEAP32[$390>>2]|0;
        $392 = ($391|0)==(0);
        if ($392) {
         $393 = $9;
         $394 = ($393|0)<(4);
         if ($394) {
          $9 = 4;
         }
         $395 = $6;
         $396 = ((($395)) + 8344|0);
         HEAP32[$396>>2] = 3;
        }
       }
      }
     }
    }
    $397 = HEAP32[19493]|0;
    $398 = ($397|0)>=(3);
    $399 = $9;
    $400 = ($399|0)<(1);
    $or$cond9 = $398 & $400;
    if ($or$cond9) {
     $9 = 1;
    }
   }
   $12 = 0;
   $13 = 1;
   $16 = 0;
   $21 = -1;
   $17 = 0;
   $401 = $11;
   $402 = $401 & -2147483648;
   $403 = ($402|0)!=(0);
   if ($403) {
    $404 = $11;
    $405 = $404 & 536870912;
    $406 = ($405|0)!=(0);
    if (!($406)) {
     $17 = 16;
    }
   }
   while(1) {
    $407 = $9;
    $408 = ($407|0)>(0);
    $409 = HEAP32[19177]|0;
    $410 = ($409|0)<(996);
    $411 = $408 ? $410 : 0;
    if (!($411)) {
     break;
    }
    $412 = $9;
    $413 = ($412|0)>(1);
    $414 = HEAP32[19177]|0;
    $415 = (($414) + 1)|0;
    HEAP32[19177] = $415;
    $416 = (100420 + ($414<<3)|0);
    if ($413) {
     __ZL9SetPlist2P13PHONEME_LIST2h($416,9);
     $417 = $9;
     $418 = (($417) - 2)|0;
     $9 = $418;
    } else {
     __ZL9SetPlist2P13PHONEME_LIST2h($416,11);
     $419 = $9;
     $420 = (($419) + -1)|0;
     $9 = $420;
    }
    $421 = $6;
    $422 = ((($421)) + 8348|0);
    HEAP32[$422>>2] = 0;
    $423 = $6;
    $424 = ((($423)) + 8352|0);
    HEAP32[$424>>2] = 0;
    $425 = $6;
    $426 = ((($425)) + 8352|0);
    $427 = ((($426)) + 4|0);
    HEAP32[$427>>2] = 0;
   }
   $428 = HEAP32[19177]|0;
   $429 = (100420 + ($428<<3)|0);
   $19 = $429;
   $430 = HEAP32[19158]|0;
   $431 = ($430|0)==(1);
   if ($431) {
    $432 = $33;
    $433 = $432 & 2;
    $434 = ($433|0)!=(0);
    if ($434) {
     $435 = HEAP32[19177]|0;
     $436 = (($435) + 1)|0;
     HEAP32[19177] = $436;
     $437 = (100420 + ($435<<3)|0);
     __ZL9SetPlist2P13PHONEME_LIST2h($437,10);
     $438 = HEAP32[19177]|0;
     $439 = (($438) + 1)|0;
     HEAP32[19177] = $439;
     $440 = (100420 + ($438<<3)|0);
     __ZL9SetPlist2P13PHONEME_LIST2h($440,18);
     $441 = $33;
     $442 = $441 & 1;
     $443 = ($442|0)!=(0);
     if ($443) {
      $444 = $7;
      $445 = ((($444)) + 1|0);
      $446 = HEAP8[$445>>0]|0;
      $447 = $446 << 24 >> 24;
      $448 = (__Z7IsAlphaj($447)|0);
      $449 = ($448|0)!=(0);
      if ($449) {
       $450 = HEAP32[19177]|0;
       $451 = (($450) + 1)|0;
       HEAP32[19177] = $451;
       $452 = (100420 + ($450<<3)|0);
       __ZL9SetPlist2P13PHONEME_LIST2h($452,10);
       $453 = HEAP32[19177]|0;
       $454 = (($453) + 1)|0;
       HEAP32[19177] = $454;
       $455 = (100420 + ($453<<3)|0);
       __ZL9SetPlist2P13PHONEME_LIST2h($455,18);
      }
     }
    }
   }
   $456 = $25;
   $457 = ($456|0)>=(0);
   do {
    if ($457) {
     $458 = $15;
     $459 = HEAP8[$458>>0]|0;
     $460 = $459&255;
     $461 = ($460|0)==(9);
     if ($461) {
      $462 = $15;
      $463 = ((($462)) + 1|0);
      $464 = HEAP8[$463>>0]|0;
      $465 = $464&255;
      $466 = ($465|0)==(21);
      if ($466) {
       $467 = HEAP32[19177]|0;
       $468 = (($467) - 1)|0;
       $469 = (100420 + ($468<<3)|0);
       $470 = ((($469)) + 2|0);
       $471 = HEAP8[$470>>0]|0;
       $472 = $471&255;
       $473 = ($472|0)==(21);
       if (!($473)) {
        break;
       }
       $474 = HEAP32[19177]|0;
       $475 = (($474) + -1)|0;
       HEAP32[19177] = $475;
       break;
      }
     }
     $476 = HEAP32[19177]|0;
     $477 = (($476) - 1)|0;
     $478 = (100420 + ($477<<3)|0);
     $479 = ((($478)) + 2|0);
     $480 = HEAP8[$479>>0]|0;
     $481 = $480&255;
     $482 = ($481|0)==(21);
     $483 = HEAP32[19177]|0;
     if ($482) {
      $484 = (($483) + -1)|0;
      HEAP32[19177] = $484;
     } else {
      $485 = (100420 + ($483<<3)|0);
      __ZL9SetPlist2P13PHONEME_LIST2h($485,21);
     }
     $486 = $25;
     $487 = $486&255;
     $488 = HEAP32[19177]|0;
     $489 = (($488) + 1)|0;
     HEAP32[19177] = $489;
     $490 = (100420 + ($488<<3)|0);
     $491 = ((($490)) + 7|0);
     HEAP8[$491>>0] = $487;
    }
   } while(0);
   $492 = $33;
   $493 = $492 & 128;
   $494 = ($493|0)!=(0);
   if ($494) {
    $495 = $15;
    $496 = HEAP8[$495>>0]|0;
    $497 = $496&255;
    $498 = (45008 + ($497<<2)|0);
    $499 = HEAP32[$498>>2]|0;
    $500 = ((($499)) + 11|0);
    $501 = HEAP8[$500>>0]|0;
    $502 = $501&255;
    $503 = ($502|0)==(0);
    if ($503) {
     $504 = $15;
     $505 = ((($504)) + 1|0);
     $15 = $505;
    }
   }
   $506 = $15;
   $507 = HEAP8[$506>>0]|0;
   $508 = $507&255;
   $509 = ($508|0)==(0);
   $510 = HEAP32[19500]|0;
   $511 = ($510|0)!=(0);
   $or$cond11 = $509 & $511;
   if ($or$cond11) {
    $512 = $15;
    HEAP8[$512>>0] = 23;
    $513 = $15;
    $514 = ((($513)) + 1|0);
    HEAP8[$514>>0] = 0;
   }
   while(1) {
    $515 = $15;
    $516 = ((($515)) + 1|0);
    $15 = $516;
    $517 = HEAP8[$515>>0]|0;
    $18 = $517;
    $518 = $517&255;
    $519 = ($518|0)!=(0);
    $520 = HEAP32[19177]|0;
    $521 = ($520|0)<(996);
    $522 = $519 ? $521 : 0;
    if (!($522)) {
     break;
    }
    $523 = $18;
    $524 = $523&255;
    $525 = ($524|0)==(255);
    if ($525) {
     continue;
    }
    $526 = $18;
    $527 = $526&255;
    $528 = (45008 + ($527<<2)|0);
    $529 = HEAP32[$528>>2]|0;
    $20 = $529;
    $530 = $18;
    $531 = $530&255;
    $532 = ($531|0)==(21);
    if ($532) {
     $533 = $18;
     $534 = HEAP32[19177]|0;
     $535 = (100420 + ($534<<3)|0);
     $536 = ((($535)) + 2|0);
     HEAP8[$536>>0] = $533;
     $537 = HEAP32[19177]|0;
     $538 = (100420 + ($537<<3)|0);
     $539 = ((($538)) + 4|0);
     HEAP16[$539>>1] = 0;
     $540 = HEAP32[19177]|0;
     $541 = (100420 + ($540<<3)|0);
     HEAP16[$541>>1] = 0;
     $542 = $15;
     $543 = HEAP8[$542>>0]|0;
     $544 = HEAP32[19177]|0;
     $545 = (($544) + 1)|0;
     HEAP32[19177] = $545;
     $546 = (100420 + ($544<<3)|0);
     $547 = ((($546)) + 7|0);
     HEAP8[$547>>0] = $543;
     $548 = $15;
     $549 = HEAP8[$548>>0]|0;
     $550 = $549&255;
     __Z18SelectPhonemeTablei($550);
     $551 = $15;
     $552 = ((($551)) + 1|0);
     $15 = $552;
     continue;
    }
    $553 = $20;
    $554 = ((($553)) + 11|0);
    $555 = HEAP8[$554>>0]|0;
    $556 = $555&255;
    $557 = ($556|0)==(1);
    if ($557) {
     $558 = $20;
     $559 = ((($558)) + 8|0);
     $560 = HEAP16[$559>>1]|0;
     $561 = $560&65535;
     $562 = ($561|0)==(0);
     if ($562) {
      $563 = $20;
      $564 = ((($563)) + 14|0);
      $565 = HEAP8[$564>>0]|0;
      $566 = $565&255;
      $13 = $566;
      continue;
     }
     $567 = $23;
     $568 = ($567|0)>=(0);
     $569 = $18;
     if ($568) {
      $570 = $23;
      $571 = (100420 + ($570<<3)|0);
      $572 = ((($571)) + 7|0);
      HEAP8[$572>>0] = $569;
      continue;
     } else {
      $573 = $569&255;
      $14 = $573;
      continue;
     }
    }
    $574 = $18;
    $575 = $574&255;
    $576 = ($575|0)==(20);
    if ($576) {
     $577 = HEAP32[19177]|0;
     $578 = (($577) - 1)|0;
     $23 = $578;
     $579 = $23;
     $580 = (100420 + ($579<<3)|0);
     $581 = HEAP16[$580>>1]|0;
     $582 = $581&65535;
     $583 = $582 | 4;
     $584 = $583&65535;
     HEAP16[$580>>1] = $584;
     $585 = $13;
     $586 = $585&255;
     $587 = $23;
     $588 = (100420 + ($587<<3)|0);
     $589 = ((($588)) + 3|0);
     HEAP8[$589>>0] = $586;
     continue;
    }
    $590 = $18;
    $591 = $590&255;
    $592 = ($591|0)==(12);
    if ($592) {
     $593 = HEAP32[19177]|0;
     $594 = (($593) - 1)|0;
     $595 = (100420 + ($594<<3)|0);
     $596 = HEAP16[$595>>1]|0;
     $597 = $596&65535;
     $598 = $597 | 8;
     $599 = $598&65535;
     HEAP16[$595>>1] = $599;
     continue;
    }
    $600 = $18;
    $601 = $600&255;
    $602 = ($601|0)==(15);
    if ($602) {
     $603 = $27;
     $604 = (($603) + 1)|0;
     $16 = $604;
     continue;
    }
    $605 = $18;
    $606 = $605&255;
    $607 = ($606|0)==(22);
    if ($607) {
     $608 = $6;
     $609 = ((($608)) + 24|0);
     $610 = ((($609)) + 56|0);
     $611 = HEAP32[$610>>2]|0;
     $612 = ($611|0)!=(0);
     if (!($612)) {
      continue;
     }
     $613 = $11;
     $614 = $613 | 16384;
     $11 = $614;
     continue;
    }
    $615 = $18;
    $616 = HEAP32[19177]|0;
    $617 = (100420 + ($616<<3)|0);
    $618 = ((($617)) + 2|0);
    HEAP8[$618>>0] = $615;
    $619 = HEAP32[19177]|0;
    $620 = (100420 + ($619<<3)|0);
    $621 = ((($620)) + 7|0);
    HEAP8[$621>>0] = 0;
    $622 = HEAP32[19500]|0;
    $623 = $17;
    $624 = $622 | $623;
    $625 = $624&65535;
    $626 = HEAP32[19177]|0;
    $627 = (100420 + ($626<<3)|0);
    HEAP16[$627>>1] = $625;
    HEAP32[19500] = 0;
    $628 = $16;
    $629 = $628&65535;
    $630 = HEAP32[19177]|0;
    $631 = (100420 + ($630<<3)|0);
    $632 = ((($631)) + 4|0);
    HEAP16[$632>>1] = $629;
    $16 = 0;
    $633 = $20;
    $634 = ((($633)) + 11|0);
    $635 = HEAP8[$634>>0]|0;
    $636 = $635&255;
    $637 = ($636|0)==(2);
    do {
     if ($637) {
      $638 = $13;
      $12 = $638;
      $13 = 1;
      $639 = $12;
      $640 = ($639|0)>=(4);
      if ($640) {
       HEAP32[19491] = 1;
      }
      $641 = $23;
      $642 = ($641|0)>=(0);
      do {
       if ($642) {
        $643 = HEAP32[19177]|0;
        $644 = (($643) - 1)|0;
        $645 = $23;
        $646 = ($644|0)!=($645|0);
        if (!($646)) {
         break;
        }
        $647 = $12;
        $648 = $647&255;
        $649 = HEAP32[19177]|0;
        $650 = (($649) - 1)|0;
        $651 = (100420 + ($650<<3)|0);
        $652 = ((($651)) + 3|0);
        HEAP8[$652>>0] = $648;
       }
      } while(0);
      $653 = HEAP32[19177]|0;
      $654 = (100420 + ($653<<3)|0);
      $655 = HEAP16[$654>>1]|0;
      $656 = $655&65535;
      $657 = $656 | 4;
      $658 = $657&65535;
      HEAP16[$654>>1] = $658;
      $659 = HEAP32[19177]|0;
      $23 = $659;
      $660 = $12;
      $661 = $21;
      $662 = ($660|0)>($661|0);
      if ($662) {
       $663 = $12;
       $21 = $663;
       $664 = HEAP32[19177]|0;
       $22 = $664;
      }
      $665 = $14;
      $666 = ($665|0)!=(0);
      if (!($666)) {
       break;
      }
      $667 = $14;
      $668 = $667&255;
      $669 = HEAP32[19177]|0;
      $670 = (100420 + ($669<<3)|0);
      $671 = ((($670)) + 7|0);
      HEAP8[$671>>0] = $668;
      $14 = 0;
     } else {
      $672 = $26;
      $673 = ($672|0)!=(0);
      if (!($673)) {
       break;
      }
      $674 = $6;
      $675 = ((($674)) + 24|0);
      $676 = ((($675)) + 56|0);
      $677 = HEAP32[$676>>2]|0;
      $678 = ($677|0)!=(0);
      if (!($678)) {
       break;
      }
      $679 = $6;
      $680 = ((($679)) + 8352|0);
      $681 = HEAP32[$680>>2]|0;
      $682 = $681 & 16384;
      $683 = ($682|0)!=(0);
      if ($683) {
       $684 = $6;
       $685 = ((($684)) + 24|0);
       $686 = ((($685)) + 56|0);
       $687 = HEAP32[$686>>2]|0;
       $688 = $687 & 1;
       $689 = ($688|0)!=(0);
       if (!($689)) {
        label = 156;
       }
      } else {
       label = 156;
      }
      if ((label|0) == 156) {
       label = 0;
       $690 = $6;
       $691 = ((($690)) + 8348|0);
       $692 = HEAP32[$691>>2]|0;
       $693 = ($692|0)!=(0);
       if (!($693)) {
        break;
       }
       $694 = $6;
       $695 = ((($694)) + 24|0);
       $696 = ((($695)) + 56|0);
       $697 = HEAP32[$696>>2]|0;
       $698 = $697 & 2;
       $699 = ($698|0)!=(0);
       if (!($699)) {
        break;
       }
      }
      $700 = HEAP32[19177]|0;
      $701 = (100420 + ($700<<3)|0);
      $702 = HEAP16[$701>>1]|0;
      $703 = $702&65535;
      $704 = $703 | 8;
      $705 = $704&65535;
      HEAP16[$701>>1] = $705;
     }
    } while(0);
    $706 = $12;
    $707 = $706&255;
    $708 = HEAP32[19177]|0;
    $709 = (100420 + ($708<<3)|0);
    $710 = ((($709)) + 3|0);
    HEAP8[$710>>0] = $707;
    $711 = HEAP32[19177]|0;
    $712 = (($711) + 1)|0;
    HEAP32[19177] = $712;
    $26 = 0;
   }
   $713 = $33;
   $714 = $713 & 131072;
   $715 = ($714|0)!=(0);
   if ($715) {
    $716 = HEAP32[19177]|0;
    $717 = (($716) + 1)|0;
    HEAP32[19177] = $717;
    $718 = (100420 + ($716<<3)|0);
    __ZL9SetPlist2P13PHONEME_LIST2h($718,27);
   }
   $719 = $33;
   $720 = $719 & 128;
   $721 = ($720|0)==(0);
   if ($721) {
    $722 = $27;
    $723 = $722&65535;
    $724 = $19;
    $725 = ((($724)) + 4|0);
    HEAP16[$725>>1] = $723;
   }
   $726 = $6;
   $727 = ((($726)) + 8348|0);
   HEAP32[$727>>2] = 0;
   $728 = $12;
   $729 = ($728|0)>=(4);
   if ($729) {
    $730 = HEAP32[19177]|0;
    $731 = (($730) - 1)|0;
    $732 = (100420 + ($731<<3)|0);
    $733 = ((($732)) + 2|0);
    $734 = HEAP8[$733>>0]|0;
    $735 = $734&255;
    $736 = (45008 + ($735<<2)|0);
    $737 = HEAP32[$736>>2]|0;
    $738 = ((($737)) + 11|0);
    $739 = HEAP8[$738>>0]|0;
    $740 = $739&255;
    $741 = ($740|0)==(2);
    if ($741) {
     $742 = $6;
     $743 = ((($742)) + 8348|0);
     HEAP32[$743>>2] = 1;
    }
   }
   $744 = $25;
   $745 = ($744|0)>=(0);
   if ($745) {
    (_strcpy(119724,$37)|0);
    $746 = HEAP32[1124]|0;
    $747 = ((($746)) + 60|0);
    $748 = HEAP32[$747>>2]|0;
    __Z18SelectPhonemeTablei($748);
    $749 = HEAP32[19177]|0;
    $750 = (100420 + ($749<<3)|0);
    __ZL9SetPlist2P13PHONEME_LIST2h($750,21);
    $751 = HEAP32[1124]|0;
    $752 = ((($751)) + 60|0);
    $753 = HEAP32[$752>>2]|0;
    $754 = $753&255;
    $755 = HEAP32[19177]|0;
    $756 = (($755) + 1)|0;
    HEAP32[19177] = $756;
    $757 = (100420 + ($755<<3)|0);
    $758 = ((($757)) + 7|0);
    HEAP8[$758>>0] = $754;
   }
   $759 = $24;
   $760 = ($759|0)>(0);
   if ($760) {
    $761 = $24;
    $762 = $761 << 8;
    $763 = (225 + ($762))|0;
    $764 = HEAP32[19494]|0;
    $765 = (($764) + 1)|0;
    HEAP32[19494] = $765;
    $766 = (76960 + ($764<<2)|0);
    HEAP32[$766>>2] = $763;
    $767 = HEAP32[19177]|0;
    $768 = (100420 + ($767<<3)|0);
    __ZL9SetPlist2P13PHONEME_LIST2h($768,10);
    $769 = HEAP32[19177]|0;
    $770 = (($769) + 1)|0;
    HEAP32[19177] = $770;
    $771 = (100420 + ($769<<3)|0);
    HEAP16[$771>>1] = 2;
   }
   $772 = $11;
   $773 = $772 & 1024;
   $774 = ($773|0)!=(0);
   if ($774) {
    $775 = $22;
    $776 = (100420 + ($775<<3)|0);
    $777 = HEAP16[$776>>1]|0;
    $778 = $777&65535;
    $779 = $778 | 64;
    $780 = $779&65535;
    HEAP16[$776>>1] = $780;
   }
   $781 = $11;
   $782 = $6;
   $783 = ((($782)) + 8352|0);
   HEAP32[$783>>2] = $781;
   $784 = $11;
   $5 = $784;
   $785 = $5;
   STACKTOP = sp;return ($785|0);
  }
 }
 $105 = HEAP32[19500]|0;
 $106 = ($105|0)!=(0);
 if ($106) {
  $107 = HEAP32[19177]|0;
  $108 = (100420 + ($107<<3)|0);
  $109 = ((($108)) + 2|0);
  HEAP8[$109>>0] = 15;
  $110 = HEAP32[19177]|0;
  $111 = (100420 + ($110<<3)|0);
  $112 = ((($111)) + 3|0);
  HEAP8[$112>>0] = 0;
  $113 = HEAP32[19177]|0;
  $114 = (100420 + ($113<<3)|0);
  $115 = ((($114)) + 6|0);
  HEAP8[$115>>0] = 0;
  $116 = HEAP32[19177]|0;
  $117 = (100420 + ($116<<3)|0);
  $118 = ((($117)) + 7|0);
  HEAP8[$118>>0] = 0;
  $119 = HEAP32[19500]|0;
  $120 = $119&65535;
  $121 = HEAP32[19177]|0;
  $122 = (100420 + ($121<<3)|0);
  HEAP16[$122>>1] = $120;
  $123 = HEAP32[19177]|0;
  $124 = (100420 + ($123<<3)|0);
  $125 = ((($124)) + 4|0);
  HEAP16[$125>>1] = 0;
  $126 = HEAP32[19177]|0;
  $127 = (($126) + 1)|0;
  HEAP32[19177] = $127;
  HEAP32[19500] = 0;
 }
 HEAP8[120548] = 0;
 $5 = 0;
 $785 = $5;
 STACKTOP = sp;return ($785|0);
}
function __ZL14CountSyllablesPh($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = 0;
 while(1) {
  $4 = $1;
  $5 = ((($4)) + 1|0);
  $1 = $5;
  $6 = HEAP8[$4>>0]|0;
  $7 = $6&255;
  $3 = $7;
  $8 = ($7|0)!=(0);
  if (!($8)) {
   break;
  }
  $9 = $3;
  $10 = (45008 + ($9<<2)|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = ((($11)) + 11|0);
  $13 = HEAP8[$12>>0]|0;
  $14 = $13&255;
  $15 = ($14|0)==(2);
  if (!($15)) {
   continue;
  }
  $16 = $2;
  $17 = (($16) + 1)|0;
  $2 = $17;
 }
 $18 = $2;
 STACKTOP = sp;return ($18|0);
}
function __ZL9SetPlist2P13PHONEME_LIST2h($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $4 = $3;
 $5 = $2;
 $6 = ((($5)) + 2|0);
 HEAP8[$6>>0] = $4;
 $7 = $2;
 $8 = ((($7)) + 3|0);
 HEAP8[$8>>0] = 0;
 $9 = $2;
 $10 = ((($9)) + 7|0);
 HEAP8[$10>>0] = 0;
 $11 = HEAP32[19500]|0;
 $12 = $11&65535;
 $13 = $2;
 HEAP16[$13>>1] = $12;
 $14 = $2;
 $15 = ((($14)) + 4|0);
 HEAP16[$15>>1] = 0;
 HEAP32[19500] = 0;
 STACKTOP = sp;return;
}
function __ZL14SubstituteCharP10TranslatorjjPiS1_($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0;
 var $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0;
 var $86 = 0, $87 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $6 = $0;
 $7 = $1;
 $8 = $2;
 $9 = $3;
 $10 = $4;
 $16 = 0;
 $18 = HEAP32[19501]|0;
 $19 = ($18|0)!=(0);
 if ($19) {
  HEAP32[19501] = 0;
  $5 = 8;
  $87 = $5;
  STACKTOP = sp;return ($87|0);
 }
 $20 = $7;
 $21 = ($20|0)==(0);
 if ($21) {
  $5 = 0;
  $87 = $5;
  STACKTOP = sp;return ($87|0);
 }
 $22 = $6;
 $23 = ((($22)) + 284|0);
 $24 = HEAP32[$23>>2]|0;
 $17 = $24;
 $25 = ($24|0)==(0|0);
 $26 = $7;
 if ($25) {
  $5 = $26;
  $87 = $5;
  STACKTOP = sp;return ($87|0);
 }
 $15 = $26;
 $27 = (__Z9iswupper2i($26)|0);
 $28 = ($27|0)!=(0);
 if ($28) {
  $29 = $7;
  $30 = (__Z9towlower2j($29)|0);
  $15 = $30;
  $16 = 1;
 }
 $13 = 0;
 $11 = 0;
 while(1) {
  $31 = $11;
  $32 = $17;
  $33 = (($32) + ($31<<2)|0);
  $34 = HEAP32[$33>>2]|0;
  $12 = $34;
  $35 = ($34|0)!=(0);
  if (!($35)) {
   break;
  }
  $36 = $15;
  $37 = $12;
  $38 = $37 & 65535;
  $39 = ($36|0)==($38|0);
  if ($39) {
   $40 = $12;
   $41 = $40 >>> 16;
   $42 = ($41|0)==(0);
   if ($42) {
    label = 13;
    break;
   }
   $48 = $12;
   $49 = $48 >>> 16;
   $50 = $8;
   $51 = (__Z9towlower2j($50)|0);
   $52 = ($49|0)==($51|0);
   if ($52) {
    label = 15;
    break;
   }
  }
  $58 = $11;
  $59 = (($58) + 2)|0;
  $11 = $59;
 }
 if ((label|0) == 13) {
  $43 = $11;
  $44 = (($43) + 1)|0;
  $45 = $17;
  $46 = (($45) + ($44<<2)|0);
  $47 = HEAP32[$46>>2]|0;
  $13 = $47;
 }
 else if ((label|0) == 15) {
  $53 = $11;
  $54 = (($53) + 1)|0;
  $55 = $17;
  $56 = (($55) + ($54<<2)|0);
  $57 = HEAP32[$56>>2]|0;
  $13 = $57;
  HEAP32[19501] = 1;
 }
 $60 = $13;
 $61 = ($60|0)==(0);
 if ($61) {
  $62 = $7;
  $5 = $62;
  $87 = $5;
  STACKTOP = sp;return ($87|0);
 }
 $63 = $13;
 $64 = $63 & -2097152;
 $65 = ($64|0)!=(0);
 if ($65) {
  $66 = $13;
  $67 = $66 >>> 16;
  $14 = $67;
  $68 = $16;
  $69 = ($68|0)!=(0);
  if ($69) {
   $70 = $8;
   $71 = (__Z9iswupper2i($70)|0);
   $72 = ($71|0)!=(0);
   if ($72) {
    $73 = $14;
    $74 = (__Z9towupper2j($73)|0);
    $14 = $74;
   }
  }
  $75 = $14;
  $76 = $9;
  HEAP32[$76>>2] = $75;
  $77 = $13;
  $78 = $77 & 65535;
  $13 = $78;
 }
 $79 = $16;
 $80 = ($79|0)!=(0);
 if ($80) {
  $81 = $13;
  $82 = (__Z9towupper2j($81)|0);
  $13 = $82;
 }
 $83 = $10;
 $84 = HEAP32[$83>>2]|0;
 $85 = $84 | 2097152;
 HEAP32[$83>>2] = $85;
 $86 = $13;
 $5 = $86;
 $87 = $5;
 STACKTOP = sp;return ($87|0);
}
function __Z8InitTexti($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 HEAP32[19170] = 0;
 HEAP32[19171] = 0;
 HEAP32[19169] = 0;
 HEAP32[19165] = 0;
 HEAP8[120498] = 0;
 HEAP32[19166] = 0;
 HEAP32[19167] = 0;
 HEAP32[19168] = 0;
 HEAP32[19174] = 1;
 HEAP32[19499] = 0;
 HEAP32[19160] = 0;
 HEAP32[19496] = 0;
 HEAP32[19493] = 0;
 HEAP32[19498] = 0;
 HEAP32[19500] = 0;
 __Z9InitText2v();
 $2 = $1;
 $3 = $2 & 8192;
 $4 = ($3|0)==(0);
 if (!($4)) {
  STACKTOP = sp;return;
 }
 __Z12InitNamedatav();
 STACKTOP = sp;return;
}
function _init_MBR($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(80|0);
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $5 = sp + 28|0;
 $2 = $0;
 $6 = $2;
 $7 = (__ZL12start_mbrolaPKc($6)|0);
 $3 = $7;
 $8 = $3;
 $9 = ($8|0)!=(0);
 if ($9) {
  $1 = -1;
  $47 = $1;
  STACKTOP = sp;return ($47|0);
 }
 $10 = (__ZL14send_to_mbrolaPKc(23543)|0);
 $4 = $10;
 $11 = $4;
 $12 = ($11|0)!=(2);
 if ($12) {
  __ZL11stop_mbrolav();
  $1 = -1;
  $47 = $1;
  STACKTOP = sp;return ($47|0);
 }
 $13 = (__ZL19receive_from_mbrolaPvj($5,45)|0);
 $4 = $13;
 $14 = $4;
 $15 = ($14|0)!=(44);
 if ($15) {
  $16 = $4;
  $17 = ($16|0)>=(0);
  if ($17) {
   __ZL3errPKcz(23546,$vararg_buffer);
  }
  __ZL11stop_mbrolav();
  $1 = -1;
  $47 = $1;
  STACKTOP = sp;return ($47|0);
 }
 $18 = (_memcmp($5,23584,4)|0);
 $19 = ($18|0)!=(0);
 if (!($19)) {
  $20 = ((($5)) + 8|0);
  $21 = (_memcmp($20,23589,8)|0);
  $22 = ($21|0)!=(0);
  if (!($22)) {
   $23 = ((($5)) + 24|0);
   $24 = HEAP8[$23>>0]|0;
   $25 = $24&255;
   $26 = ((($5)) + 25|0);
   $27 = HEAP8[$26>>0]|0;
   $28 = $27&255;
   $29 = $28 << 8;
   $30 = (($25) + ($29))|0;
   $31 = ((($5)) + 26|0);
   $32 = HEAP8[$31>>0]|0;
   $33 = $32&255;
   $34 = $33 << 16;
   $35 = (($30) + ($34))|0;
   $36 = ((($5)) + 27|0);
   $37 = HEAP8[$36>>0]|0;
   $38 = $37&255;
   $39 = $38 << 24;
   $40 = (($35) + ($39))|0;
   HEAP32[19502] = $40;
   $41 = HEAP32[19503]|0;
   $42 = $2;
   $43 = ($41|0)!=($42|0);
   if ($43) {
    $44 = HEAP32[19503]|0;
    _free($44);
    $45 = $2;
    $46 = (___strdup($45)|0);
    HEAP32[19503] = $46;
   }
   $1 = 0;
   $47 = $1;
   STACKTOP = sp;return ($47|0);
  }
 }
 __ZL3errPKcz(23598,$vararg_buffer1);
 __ZL11stop_mbrolav();
 $1 = -1;
 $47 = $1;
 STACKTOP = sp;return ($47|0);
}
function __ZL12start_mbrolaPKc($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0.0, $5 = 0, $50 = 0.0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0;
 var $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer18 = 0, $vararg_buffer21 = 0, $vararg_buffer24 = 0, $vararg_buffer26 = 0, $vararg_buffer29 = 0, $vararg_buffer3 = 0, $vararg_buffer32 = 0, $vararg_buffer35 = 0;
 var $vararg_buffer38 = 0, $vararg_buffer6 = 0, $vararg_buffer9 = 0, $vararg_ptr12 = 0, $vararg_ptr13 = 0, $vararg_ptr14 = 0, $vararg_ptr15 = 0, $vararg_ptr16 = 0, $vararg_ptr17 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 192|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(192|0);
 $vararg_buffer38 = sp + 120|0;
 $vararg_buffer35 = sp + 112|0;
 $vararg_buffer32 = sp + 104|0;
 $vararg_buffer29 = sp + 96|0;
 $vararg_buffer26 = sp + 88|0;
 $vararg_buffer24 = sp + 80|0;
 $vararg_buffer21 = sp + 72|0;
 $vararg_buffer18 = sp + 64|0;
 $vararg_buffer9 = sp + 32|0;
 $vararg_buffer6 = sp + 24|0;
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $4 = sp + 152|0;
 $5 = sp + 144|0;
 $6 = sp + 136|0;
 $8 = sp + 172|0;
 $2 = $0;
 $10 = HEAP32[19509]|0;
 $11 = ($10|0)!=(0);
 if ($11) {
  __ZL3errPKcz(23936,$vararg_buffer);
  $1 = -1;
  $90 = $1;
  STACKTOP = sp;return ($90|0);
 }
 $12 = (__ZL12create_pipesPiS_S_($4,$5,$6)|0);
 $3 = $12;
 $13 = $3;
 $14 = ($13|0)!=(0);
 if ($14) {
  $1 = -1;
  $90 = $1;
  STACKTOP = sp;return ($90|0);
 }
 $15 = (_fork()|0);
 HEAP32[19504] = $15;
 $16 = HEAP32[19504]|0;
 $17 = ($16|0)==(-1);
 if ($17) {
  $18 = (___errno_location()|0);
  $19 = HEAP32[$18>>2]|0;
  $3 = $19;
  __ZL11close_pipesPiS_S_($4,$5,$6);
  $20 = $3;
  $21 = (_strerror($20)|0);
  HEAP32[$vararg_buffer1>>2] = $21;
  __ZL3errPKcz(23981,$vararg_buffer1);
  $1 = -1;
  $90 = $1;
  STACKTOP = sp;return ($90|0);
 }
 $22 = HEAP32[19504]|0;
 $23 = ($22|0)==(0);
 if ($23) {
  $24 = HEAP32[$4>>2]|0;
  $25 = (_dup2($24,0)|0);
  $26 = ($25|0)==(-1);
  if ($26) {
   $35 = (___errno_location()|0);
   $36 = HEAP32[$35>>2]|0;
   $37 = (_strerror($36)|0);
   HEAP32[$vararg_buffer3>>2] = $37;
   (_snprintf(121828,160,23992,$vararg_buffer3)|0);
   $38 = ((($6)) + 4|0);
   $39 = HEAP32[$38>>2]|0;
   $40 = (_strlen(121828)|0);
   $41 = (_write($39,121828,$40)|0);
   $7 = $41;
   __exit(1);
   // unreachable;
  }
  $27 = ((($5)) + 4|0);
  $28 = HEAP32[$27>>2]|0;
  $29 = (_dup2($28,1)|0);
  $30 = ($29|0)==(-1);
  if ($30) {
   $35 = (___errno_location()|0);
   $36 = HEAP32[$35>>2]|0;
   $37 = (_strerror($36)|0);
   HEAP32[$vararg_buffer3>>2] = $37;
   (_snprintf(121828,160,23992,$vararg_buffer3)|0);
   $38 = ((($6)) + 4|0);
   $39 = HEAP32[$38>>2]|0;
   $40 = (_strlen(121828)|0);
   $41 = (_write($39,121828,$40)|0);
   $7 = $41;
   __exit(1);
   // unreachable;
  }
  $31 = ((($6)) + 4|0);
  $32 = HEAP32[$31>>2]|0;
  $33 = (_dup2($32,2)|0);
  $34 = ($33|0)==(-1);
  if ($34) {
   $35 = (___errno_location()|0);
   $36 = HEAP32[$35>>2]|0;
   $37 = (_strerror($36)|0);
   HEAP32[$vararg_buffer3>>2] = $37;
   (_snprintf(121828,160,23992,$vararg_buffer3)|0);
   $38 = ((($6)) + 4|0);
   $39 = HEAP32[$38>>2]|0;
   $40 = (_strlen(121828)|0);
   $41 = (_write($39,121828,$40)|0);
   $7 = $41;
   __exit(1);
   // unreachable;
  }
  $42 = ((($6)) + 4|0);
  $43 = HEAP32[$42>>2]|0;
  $9 = $43;
  while(1) {
   $44 = $9;
   $45 = ($44|0)>(2);
   if (!($45)) {
    break;
   }
   $46 = $9;
   (_close($46)|0);
   $47 = $9;
   $48 = (($47) + -1)|0;
   $9 = $48;
  }
  (_signal(1,((1)|0))|0);
  (_signal(2,((1)|0))|0);
  (_signal(3,((1)|0))|0);
  (_signal(15,((1)|0))|0);
  $49 = +HEAPF32[773];
  $50 = $49;
  HEAPF64[$vararg_buffer6>>3] = $50;
  (_snprintf($8,20,24004,$vararg_buffer6)|0);
  $51 = $2;
  HEAP32[$vararg_buffer9>>2] = 24007;
  $vararg_ptr12 = ((($vararg_buffer9)) + 4|0);
  HEAP32[$vararg_ptr12>>2] = 24010;
  $vararg_ptr13 = ((($vararg_buffer9)) + 8|0);
  HEAP32[$vararg_ptr13>>2] = $8;
  $vararg_ptr14 = ((($vararg_buffer9)) + 12|0);
  HEAP32[$vararg_ptr14>>2] = $51;
  $vararg_ptr15 = ((($vararg_buffer9)) + 16|0);
  HEAP32[$vararg_ptr15>>2] = 25550;
  $vararg_ptr16 = ((($vararg_buffer9)) + 20|0);
  HEAP32[$vararg_ptr16>>2] = 24013;
  $vararg_ptr17 = ((($vararg_buffer9)) + 24|0);
  HEAP32[$vararg_ptr17>>2] = 0;
  (_execlp((26170|0),(26170|0),($vararg_buffer9|0))|0);
  $52 = (___errno_location()|0);
  $53 = HEAP32[$52>>2]|0;
  $54 = (_strerror($53)|0);
  HEAP32[$vararg_buffer18>>2] = $54;
  (_snprintf(121828,160,24019,$vararg_buffer18)|0);
  $55 = (_strlen(121828)|0);
  $56 = (_write(2,121828,$55)|0);
  $7 = $56;
  __exit(1);
  // unreachable;
 } else {
  $57 = HEAP32[19504]|0;
  HEAP32[$vararg_buffer21>>2] = $57;
  (_snprintf($8,20,24031,$vararg_buffer21)|0);
  $58 = (_open($8,0,$vararg_buffer24)|0);
  HEAP32[19511] = $58;
  $59 = HEAP32[19511]|0;
  $60 = ($59|0)==(-1);
  if ($60) {
   $61 = (___errno_location()|0);
   $62 = HEAP32[$61>>2]|0;
   $3 = $62;
   __ZL11close_pipesPiS_S_($4,$5,$6);
   $63 = HEAP32[19504]|0;
   (_waitpid(($63|0),(0|0),0)|0);
   HEAP32[19504] = 0;
   $64 = $3;
   $65 = (_strerror($64)|0);
   HEAP32[$vararg_buffer26>>2] = $65;
   __ZL3errPKcz(24045,$vararg_buffer26);
   $1 = -1;
   $90 = $1;
   STACKTOP = sp;return ($90|0);
  }
  (_signal(13,((1)|0))|0);
  $66 = ((($4)) + 4|0);
  $67 = HEAP32[$66>>2]|0;
  HEAP32[$vararg_buffer29>>2] = 2048;
  $68 = (_fcntl($67,4,$vararg_buffer29)|0);
  $69 = ($68|0)==(-1);
  if (!($69)) {
   $70 = HEAP32[$5>>2]|0;
   HEAP32[$vararg_buffer32>>2] = 2048;
   $71 = (_fcntl($70,4,$vararg_buffer32)|0);
   $72 = ($71|0)==(-1);
   if (!($72)) {
    $73 = HEAP32[$6>>2]|0;
    HEAP32[$vararg_buffer35>>2] = 2048;
    $74 = (_fcntl($73,4,$vararg_buffer35)|0);
    $75 = ($74|0)==(-1);
    if (!($75)) {
     $81 = ((($4)) + 4|0);
     $82 = HEAP32[$81>>2]|0;
     HEAP32[19508] = $82;
     $83 = HEAP32[$5>>2]|0;
     HEAP32[19505] = $83;
     $84 = HEAP32[$6>>2]|0;
     HEAP32[19506] = $84;
     $85 = HEAP32[$4>>2]|0;
     (_close($85)|0);
     $86 = ((($5)) + 4|0);
     $87 = HEAP32[$86>>2]|0;
     (_close($87)|0);
     $88 = ((($6)) + 4|0);
     $89 = HEAP32[$88>>2]|0;
     (_close($89)|0);
     HEAP32[19509] = 1;
     $1 = 0;
     $90 = $1;
     STACKTOP = sp;return ($90|0);
    }
   }
  }
  $76 = (___errno_location()|0);
  $77 = HEAP32[$76>>2]|0;
  $3 = $77;
  __ZL11close_pipesPiS_S_($4,$5,$6);
  $78 = HEAP32[19504]|0;
  (_waitpid(($78|0),(0|0),0)|0);
  HEAP32[19504] = 0;
  $79 = $3;
  $80 = (_strerror($79)|0);
  HEAP32[$vararg_buffer38>>2] = $80;
  __ZL3errPKcz(24071,$vararg_buffer38);
  $1 = -1;
  $90 = $1;
  STACKTOP = sp;return ($90|0);
 }
 return (0)|0;
}
function __ZL14send_to_mbrolaPKc($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $vararg_buffer = sp;
 $2 = $0;
 $7 = HEAP32[19504]|0;
 $8 = ($7|0)!=(0);
 if (!($8)) {
  $1 = -1;
  $60 = $1;
  STACKTOP = sp;return ($60|0);
 }
 $9 = $2;
 $10 = (_strlen($9)|0);
 $4 = $10;
 $11 = HEAP32[19508]|0;
 $12 = $2;
 $13 = $4;
 $14 = (_write($11,$12,$13)|0);
 $3 = $14;
 $15 = $3;
 $16 = ($15|0)==(-1);
 do {
  if ($16) {
   $17 = (___errno_location()|0);
   $18 = HEAP32[$17>>2]|0;
   $5 = $18;
   $19 = $5;
   $20 = ($19|0)==(32);
   if ($20) {
    $21 = (__ZL17mbrola_has_errorsv()|0);
    $22 = ($21|0)!=(0);
    if ($22) {
     $1 = -1;
     $60 = $1;
     STACKTOP = sp;return ($60|0);
    }
   }
   $23 = $5;
   $24 = ($23|0)==(11);
   if ($24) {
    $3 = 0;
    break;
   }
   $25 = $5;
   $26 = (_strerror($25)|0);
   HEAP32[$vararg_buffer>>2] = $26;
   __ZL3errPKcz(23690,$vararg_buffer);
   $1 = -1;
   $60 = $1;
   STACKTOP = sp;return ($60|0);
  }
 } while(0);
 $27 = $3;
 $28 = $4;
 $29 = ($27|0)!=($28|0);
 if ($29) {
  $30 = $4;
  $31 = (16 + ($30))|0;
  $32 = $3;
  $33 = (($31) - ($32))|0;
  $34 = (_malloc($33)|0);
  $6 = $34;
  $35 = $6;
  $36 = ($35|0)!=(0|0);
  if ($36) {
   $37 = $6;
   HEAP32[$37>>2] = 0;
   $38 = $6;
   $39 = ((($38)) + 4|0);
   HEAP32[$39>>2] = 0;
   $40 = $4;
   $41 = $3;
   $42 = (($40) - ($41))|0;
   $43 = $6;
   $44 = ((($43)) + 8|0);
   HEAP32[$44>>2] = $42;
   $45 = $6;
   $46 = ((($45)) + 12|0);
   $47 = $2;
   $48 = $3;
   $49 = (($47) + ($48)|0);
   $50 = $4;
   $51 = $3;
   $52 = (($50) - ($51))|0;
   _memcpy(($46|0),($49|0),($52|0))|0;
   $53 = $4;
   $3 = $53;
   $54 = HEAP32[19507]|0;
   $55 = ($54|0)!=(0|0);
   $56 = $6;
   if ($55) {
    $57 = HEAP32[19510]|0;
    HEAP32[$57>>2] = $56;
   } else {
    HEAP32[19507] = $56;
   }
   $58 = $6;
   HEAP32[19510] = $58;
  }
 }
 $59 = $3;
 $1 = $59;
 $60 = $1;
 STACKTOP = sp;return ($60|0);
}
function __ZL11stop_mbrolav() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[19509]|0;
 $1 = ($0|0)==(0);
 if ($1) {
  return;
 }
 $2 = HEAP32[19511]|0;
 (_close($2)|0);
 $3 = HEAP32[19508]|0;
 (_close($3)|0);
 $4 = HEAP32[19505]|0;
 (_close($4)|0);
 $5 = HEAP32[19506]|0;
 (_close($5)|0);
 $6 = HEAP32[19504]|0;
 $7 = ($6|0)!=(0);
 if ($7) {
  $8 = HEAP32[19504]|0;
  (_kill(($8|0),15)|0);
  $9 = HEAP32[19504]|0;
  (_waitpid(($9|0),(0|0),0)|0);
  HEAP32[19504] = 0;
 }
 HEAP32[19509] = 0;
 return;
}
function __ZL19receive_from_mbrolaPvj($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0;
 var $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0;
 var $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0;
 var $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer3 = 0, $vararg_buffer6 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(112|0);
 $vararg_buffer6 = sp + 24|0;
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $8 = sp + 64|0;
 $3 = $0;
 $4 = $1;
 $6 = 1;
 $7 = 0;
 $18 = HEAP32[19504]|0;
 $19 = ($18|0)!=(0);
 if (!($19)) {
  $2 = -1;
  $136 = $2;
  STACKTOP = sp;return ($136|0);
 }
 L4: while(1) {
  $9 = 0;
  $20 = HEAP32[19505]|0;
  HEAP32[$8>>2] = $20;
  $21 = ((($8)) + 4|0);
  HEAP16[$21>>1] = 1;
  $22 = $9;
  $23 = (($22) + 1)|0;
  $9 = $23;
  $24 = HEAP32[19506]|0;
  $25 = ((($8)) + 8|0);
  HEAP32[$25>>2] = $24;
  $26 = ((($8)) + 8|0);
  $27 = ((($26)) + 4|0);
  HEAP16[$27>>1] = 1;
  $28 = $9;
  $29 = (($28) + 1)|0;
  $9 = $29;
  $30 = HEAP32[19507]|0;
  $31 = ($30|0)!=(0|0);
  if ($31) {
   $32 = HEAP32[19508]|0;
   $33 = ((($8)) + 16|0);
   HEAP32[$33>>2] = $32;
   $34 = ((($8)) + 16|0);
   $35 = ((($34)) + 4|0);
   HEAP16[$35>>1] = 4;
   $36 = $9;
   $37 = (($36) + 1)|0;
   $9 = $37;
  }
  $38 = (__ZL14mbrola_is_idlev()|0);
  $10 = $38;
  $39 = $9;
  $40 = $10;
  $41 = ($40|0)!=(0);
  $42 = $6;
  $43 = $41 ? 0 : $42;
  $44 = (_poll($8,$39,$43)|0);
  $5 = $44;
  $45 = $5;
  $46 = ($45|0)==(-1);
  if ($46) {
   label = 6;
   break;
  }
  $50 = $5;
  $51 = ($50|0)==(0);
  L10: do {
   if ($51) {
    $52 = $10;
    $53 = ($52|0)!=(0);
    if ($53) {
     label = 9;
     break L4;
    }
    $54 = $6;
    $55 = ($54|0)>=(3750);
    if ($55) {
     label = 11;
     break L4;
    }
    $56 = $6;
    $57 = $56<<2;
    $6 = $57;
   } else {
    $6 = 1;
    $58 = ((($8)) + 8|0);
    $59 = ((($58)) + 6|0);
    $60 = HEAP16[$59>>1]|0;
    $61 = ($60<<16>>16)!=(0);
    if ($61) {
     $62 = (__ZL17mbrola_has_errorsv()|0);
     $63 = ($62|0)!=(0);
     if ($63) {
      label = 15;
      break L4;
     }
    }
    $64 = HEAP32[19507]|0;
    $65 = ($64|0)!=(0|0);
    do {
     if ($65) {
      $66 = ((($8)) + 16|0);
      $67 = ((($66)) + 6|0);
      $68 = HEAP16[$67>>1]|0;
      $69 = ($68<<16>>16)!=(0);
      if ($69) {
       $70 = HEAP32[19507]|0;
       $11 = $70;
       $71 = $11;
       $72 = ((($71)) + 12|0);
       $73 = $11;
       $74 = ((($73)) + 4|0);
       $75 = HEAP32[$74>>2]|0;
       $76 = (($72) + ($75)|0);
       $12 = $76;
       $77 = $11;
       $78 = ((($77)) + 8|0);
       $79 = HEAP32[$78>>2]|0;
       $80 = $11;
       $81 = ((($80)) + 4|0);
       $82 = HEAP32[$81>>2]|0;
       $83 = (($79) - ($82))|0;
       $13 = $83;
       $84 = HEAP32[19508]|0;
       $85 = $12;
       $86 = $13;
       $87 = (_write($84,$85,$86)|0);
       $5 = $87;
       $88 = $5;
       $89 = ($88|0)==(-1);
       if ($89) {
        label = 19;
        break L4;
       }
       $98 = $5;
       $99 = $13;
       $100 = ($98|0)!=($99|0);
       if ($100) {
        $101 = $5;
        $102 = $11;
        $103 = ((($102)) + 4|0);
        $104 = HEAP32[$103>>2]|0;
        $105 = (($104) + ($101))|0;
        HEAP32[$103>>2] = $105;
        break;
       }
       $106 = $11;
       $107 = HEAP32[$106>>2]|0;
       HEAP32[19507] = $107;
       $108 = $11;
       _free($108);
       $109 = HEAP32[19507]|0;
       $110 = ($109|0)!=(0|0);
       if ($110) {
        break L10;
       }
       HEAP32[19510] = 0;
      }
     }
    } while(0);
    $111 = ((($8)) + 6|0);
    $112 = HEAP16[$111>>1]|0;
    $113 = ($112<<16>>16)!=(0);
    if ($113) {
     $114 = $3;
     $115 = $7;
     $116 = (($114) + ($115)|0);
     $15 = $116;
     $117 = $4;
     $118 = $7;
     $119 = (($117) - ($118))|0;
     $16 = $119;
     $120 = HEAP32[19505]|0;
     $121 = $15;
     $122 = $16;
     $123 = (_read($120,$121,$122)|0);
     $17 = $123;
     $124 = $17;
     $125 = ($124|0)==(-1);
     if ($125) {
      label = 29;
      break L4;
     }
     $129 = $17;
     $130 = $7;
     $131 = (($130) + ($129))|0;
     $7 = $131;
     HEAP32[19509] = 3;
    }
   }
  } while(0);
  $132 = $7;
  $133 = $4;
  $134 = ($132>>>0)<($133>>>0);
  if (!($134)) {
   break;
  }
 }
 if ((label|0) == 6) {
  $47 = (___errno_location()|0);
  $48 = HEAP32[$47>>2]|0;
  $49 = (_strerror($48)|0);
  HEAP32[$vararg_buffer>>2] = $49;
  __ZL3errPKcz(23653,$vararg_buffer);
  $2 = -1;
  $136 = $2;
  STACKTOP = sp;return ($136|0);
 }
 else if ((label|0) == 9) {
  HEAP32[19509] = 1;
 }
 else if ((label|0) == 11) {
  HEAP32[19509] = 4;
  __ZL3errPKcz(23664,$vararg_buffer1);
 }
 else if ((label|0) == 15) {
  $2 = -1;
  $136 = $2;
  STACKTOP = sp;return ($136|0);
 }
 else if ((label|0) == 19) {
  $90 = (___errno_location()|0);
  $91 = HEAP32[$90>>2]|0;
  $14 = $91;
  $92 = $14;
  $93 = ($92|0)==(32);
  if ($93) {
   $94 = (__ZL17mbrola_has_errorsv()|0);
   $95 = ($94|0)!=(0);
   if ($95) {
    $2 = -1;
    $136 = $2;
    STACKTOP = sp;return ($136|0);
   }
  }
  $96 = $14;
  $97 = (_strerror($96)|0);
  HEAP32[$vararg_buffer3>>2] = $97;
  __ZL3errPKcz(23690,$vararg_buffer3);
  $2 = -1;
  $136 = $2;
  STACKTOP = sp;return ($136|0);
 }
 else if ((label|0) == 29) {
  $126 = (___errno_location()|0);
  $127 = HEAP32[$126>>2]|0;
  $128 = (_strerror($127)|0);
  HEAP32[$vararg_buffer6>>2] = $128;
  __ZL3errPKcz(23702,$vararg_buffer6);
  $2 = -1;
  $136 = $2;
  STACKTOP = sp;return ($136|0);
 }
 $135 = $7;
 $2 = $135;
 $136 = $2;
 STACKTOP = sp;return ($136|0);
}
function __ZL3errPKcz($0,$varargs) {
 $0 = $0|0;
 $varargs = $varargs|0;
 var $1 = 0, $2 = 0, $3 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $vararg_buffer = sp;
 $2 = sp + 8|0;
 $1 = $0;
 HEAP32[$2>>2] = $varargs;
 $3 = $1;
 (_vsnprintf(121828,160,$3,$2)|0);
 HEAP32[$vararg_buffer>>2] = 121828;
 __ZL3logPKcz(23634,$vararg_buffer);
 STACKTOP = sp;return;
}
function __ZL3logPKcz($0,$varargs) {
 $0 = $0|0;
 $varargs = $varargs|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $2 = sp;
 $1 = $0;
 HEAP32[$2>>2] = $varargs;
 $3 = HEAP32[1451]|0;
 $4 = $1;
 (_vfprintf($3,$4,$2)|0);
 $5 = HEAP32[1451]|0;
 (_fputc(10,$5)|0);
 STACKTOP = sp;return;
}
function __ZL14mbrola_is_idlev() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $8 = sp + 32|0;
 $9 = HEAP32[19511]|0;
 $10 = (_lseek($9,0,0)|0);
 $11 = ($10|0)!=(0);
 if ($11) {
  $6 = 0;
  $41 = $6;
  STACKTOP = sp;return ($41|0);
 }
 $12 = HEAP32[19511]|0;
 $13 = (_read($12,$8,20)|0);
 $14 = ($13|0)!=(20);
 if ($14) {
  $6 = 0;
  $41 = $6;
  STACKTOP = sp;return ($41|0);
 }
 $3 = $8;
 $4 = 41;
 $5 = 20;
 $15 = $3;
 $16 = $4;
 $17 = $5;
 $0 = $15;
 $1 = $16;
 $2 = $17;
 $18 = $0;
 $19 = $1;
 $20 = $2;
 $21 = (_memchr($18,$19,$20)|0);
 $7 = $21;
 $22 = $7;
 $23 = ($22|0)!=(0|0);
 if ($23) {
  $24 = $7;
  $25 = $24;
  $26 = $8;
  $27 = (($25) - ($26))|0;
  $28 = ($27>>>0)>=(18);
  if (!($28)) {
   $29 = $7;
   $30 = ((($29)) + 1|0);
   $31 = HEAP8[$30>>0]|0;
   $32 = $31 << 24 >> 24;
   $33 = ($32|0)==(32);
   if ($33) {
    $34 = $7;
    $35 = ((($34)) + 2|0);
    $36 = HEAP8[$35>>0]|0;
    $37 = $36 << 24 >> 24;
    $38 = ($37|0)==(83);
    $40 = $38;
   } else {
    $40 = 0;
   }
   $39 = $40&1;
   $6 = $39;
   $41 = $6;
   STACKTOP = sp;return ($41|0);
  }
 }
 $6 = 0;
 $41 = $6;
 STACKTOP = sp;return ($41|0);
}
function __ZL17mbrola_has_errorsv() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 320|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(320|0);
 $vararg_buffer4 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $6 = sp + 56|0;
 $7 = $6;
 L1: while(1) {
  $9 = HEAP32[19506]|0;
  $10 = $7;
  $11 = $7;
  $12 = $11;
  $13 = $6;
  $14 = (($12) - ($13))|0;
  $15 = (256 - ($14))|0;
  $16 = (($15) - 1)|0;
  $17 = (_read($9,$10,$16)|0);
  $5 = $17;
  $18 = $5;
  $19 = ($18|0)==(-1);
  if ($19) {
   label = 3;
   break;
  }
  $26 = $5;
  $27 = ($26|0)==(0);
  if ($27) {
   label = 7;
   break;
  }
  $29 = $5;
  $30 = $7;
  $31 = (($30) + ($29)|0);
  HEAP8[$31>>0] = 0;
  while(1) {
   $32 = $7;
   $2 = $32;
   $3 = 10;
   $33 = $2;
   $34 = $3;
   $0 = $33;
   $1 = $34;
   $35 = $0;
   $36 = $1;
   $37 = (_strchr($35,$36)|0);
   $8 = $37;
   $38 = ($37|0)!=(0|0);
   if (!($38)) {
    break;
   }
   $39 = $7;
   $40 = (_strncmp($39,23729,18)|0);
   $41 = ($40|0)==(0);
   if (!($41)) {
    $42 = $7;
    $43 = (_strncmp($42,23748,18)|0);
    $44 = ($43|0)==(0);
    if (!($44)) {
     $45 = $8;
     HEAP8[$45>>0] = 0;
     $46 = $7;
     HEAP32[$vararg_buffer1>>2] = $46;
     __ZL3logPKcz(23767,$vararg_buffer1);
     $47 = $8;
     $48 = $5;
     $49 = (($48) - 1)|0;
     $50 = $7;
     $51 = (($50) + ($49)|0);
     $52 = ($47|0)==($51|0);
     if ($52) {
      label = 13;
      break L1;
     }
    }
   }
   $54 = $8;
   $55 = ((($54)) + 1|0);
   $7 = $55;
  }
  $56 = $7;
  $57 = $5;
  _memmove(($6|0),($56|0),($57|0))|0;
  $58 = $5;
  $59 = (($6) + ($58)|0);
  $7 = $59;
 }
 if ((label|0) == 3) {
  $20 = (___errno_location()|0);
  $21 = HEAP32[$20>>2]|0;
  $22 = ($21|0)==(11);
  if ($22) {
   $4 = 0;
   $60 = $4;
   STACKTOP = sp;return ($60|0);
  } else {
   $23 = (___errno_location()|0);
   $24 = HEAP32[$23>>2]|0;
   $25 = (_strerror($24)|0);
   HEAP32[$vararg_buffer>>2] = $25;
   __ZL3errPKcz(23713,$vararg_buffer);
   $4 = -1;
   $60 = $4;
   STACKTOP = sp;return ($60|0);
  }
 }
 else if ((label|0) == 7) {
  $28 = (__ZL11mbrola_diedv()|0);
  $4 = $28;
  $60 = $4;
  STACKTOP = sp;return ($60|0);
 }
 else if ((label|0) == 13) {
  $53 = $7;
  HEAP32[$vararg_buffer4>>2] = $53;
  (_snprintf(121828,160,25552,$vararg_buffer4)|0);
  $4 = 0;
  $60 = $4;
  STACKTOP = sp;return ($60|0);
 }
 return (0)|0;
}
function __ZL11mbrola_diedv() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer10 = 0, $vararg_buffer4 = 0;
 var $vararg_buffer7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(144|0);
 $vararg_buffer10 = sp + 32|0;
 $vararg_buffer7 = sp + 24|0;
 $vararg_buffer4 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $1 = sp + 52|0;
 $4 = sp + 64|0;
 $7 = HEAP32[19504]|0;
 $8 = (_waitpid(($7|0),($1|0),1)|0);
 $0 = $8;
 $9 = $0;
 $10 = ($9|0)!=(0);
 do {
  if ($10) {
   $11 = $0;
   $12 = HEAP32[19504]|0;
   $13 = ($11|0)!=($12|0);
   if ($13) {
    $3 = 23816;
    break;
   }
   HEAP32[19504] = 0;
   $14 = HEAP32[$1>>2]|0;
   $15 = $14 & 65535;
   $16 = (($15) - 1)|0;
   $17 = ($16>>>0)<(255);
   $18 = HEAP32[$1>>2]|0;
   $19 = $18 & 127;
   if ($17) {
    $5 = $19;
    $20 = $5;
    HEAP32[$vararg_buffer>>2] = $20;
    (_snprintf($4,80,23838,$vararg_buffer)|0);
    $3 = $4;
    break;
   }
   $21 = ($19|0)!=(0);
   if ($21) {
    $3 = 23892;
    break;
   } else {
    $22 = HEAP32[$1>>2]|0;
    $23 = $22 & 65280;
    $24 = $23 >> 8;
    $6 = $24;
    $25 = $6;
    HEAP32[$vararg_buffer1>>2] = $25;
    (_snprintf($4,80,23863,$vararg_buffer1)|0);
    $3 = $4;
    break;
   }
  } else {
   $3 = 23778;
  }
 } while(0);
 $26 = $3;
 HEAP32[$vararg_buffer4>>2] = $26;
 __ZL3logPKcz(23634,$vararg_buffer4);
 $27 = (_strlen(121828)|0);
 $2 = $27;
 $28 = $2;
 $29 = ($28|0)!=(0);
 if ($29) {
  $31 = $2;
  $32 = (121828 + ($31)|0);
  $33 = $2;
  $34 = (160 - ($33))|0;
  $35 = $3;
  HEAP32[$vararg_buffer10>>2] = $35;
  (_snprintf($32,$34,23929,$vararg_buffer10)|0);
  STACKTOP = sp;return -1;
 } else {
  $30 = $3;
  HEAP32[$vararg_buffer7>>2] = $30;
  (_snprintf(121828,160,25552,$vararg_buffer7)|0);
  STACKTOP = sp;return -1;
 }
 return (0)|0;
}
function __ZL12create_pipesPiS_S_($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $vararg_buffer = sp;
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $8 = $4;
 $9 = (_pipe($8)|0);
 $10 = ($9|0)!=(-1);
 if ($10) {
  $11 = $5;
  $12 = (_pipe($11)|0);
  $13 = ($12|0)!=(-1);
  do {
   if ($13) {
    $14 = $6;
    $15 = (_pipe($14)|0);
    $16 = ($15|0)!=(-1);
    if (!($16)) {
     $17 = (___errno_location()|0);
     $18 = HEAP32[$17>>2]|0;
     $7 = $18;
     $19 = $5;
     $20 = HEAP32[$19>>2]|0;
     (_close($20)|0);
     $21 = $5;
     $22 = ((($21)) + 4|0);
     $23 = HEAP32[$22>>2]|0;
     (_close($23)|0);
     break;
    }
    $3 = 0;
    $35 = $3;
    STACKTOP = sp;return ($35|0);
   } else {
    $24 = (___errno_location()|0);
    $25 = HEAP32[$24>>2]|0;
    $7 = $25;
   }
  } while(0);
  $26 = $4;
  $27 = HEAP32[$26>>2]|0;
  (_close($27)|0);
  $28 = $4;
  $29 = ((($28)) + 4|0);
  $30 = HEAP32[$29>>2]|0;
  (_close($30)|0);
 } else {
  $31 = (___errno_location()|0);
  $32 = HEAP32[$31>>2]|0;
  $7 = $32;
 }
 $33 = $7;
 $34 = (_strerror($33)|0);
 HEAP32[$vararg_buffer>>2] = $34;
 __ZL3errPKcz(24083,$vararg_buffer);
 $3 = -1;
 $35 = $3;
 STACKTOP = sp;return ($35|0);
}
function __ZL11close_pipesPiS_S_($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $6 = $3;
 $7 = HEAP32[$6>>2]|0;
 (_close($7)|0);
 $8 = $3;
 $9 = ((($8)) + 4|0);
 $10 = HEAP32[$9>>2]|0;
 (_close($10)|0);
 $11 = $4;
 $12 = HEAP32[$11>>2]|0;
 (_close($12)|0);
 $13 = $4;
 $14 = ((($13)) + 4|0);
 $15 = HEAP32[$14>>2]|0;
 (_close($15)|0);
 $16 = $5;
 $17 = HEAP32[$16>>2]|0;
 (_close($17)|0);
 $18 = $5;
 $19 = ((($18)) + 4|0);
 $20 = HEAP32[$19>>2]|0;
 (_close($20)|0);
 STACKTOP = sp;return;
}
function _close_MBR() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZL11stop_mbrolav();
 __ZL17free_pending_datav();
 $0 = HEAP32[19503]|0;
 _free($0);
 HEAP32[19503] = 0;
 HEAPF32[773] = 1.0;
 return;
}
function __ZL17free_pending_datav() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = HEAP32[19507]|0;
 $1 = $2;
 while(1) {
  $3 = $1;
  $4 = ($3|0)!=(0|0);
  if (!($4)) {
   break;
  }
  $5 = $1;
  $0 = $5;
  $6 = $1;
  $7 = HEAP32[$6>>2]|0;
  $1 = $7;
  $8 = $0;
  _free($8);
 }
 HEAP32[19507] = 0;
 HEAP32[19510] = 0;
 STACKTOP = sp;return;
}
function _reset_MBR() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 4112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(4112|0);
 $3 = sp + 16|0;
 $2 = 1;
 $4 = HEAP32[19509]|0;
 $5 = ($4|0)==(1);
 if ($5) {
  $0 = 1;
  $29 = $0;
  STACKTOP = sp;return ($29|0);
 }
 $6 = HEAP32[19504]|0;
 $7 = ($6|0)!=(0);
 if (!($7)) {
  $0 = 0;
  $29 = $0;
  STACKTOP = sp;return ($29|0);
 }
 $8 = HEAP32[19504]|0;
 $9 = (_kill(($8|0),10)|0);
 $10 = ($9|0)==(-1);
 if ($10) {
  $2 = 0;
 }
 __ZL17free_pending_datav();
 $11 = HEAP32[19508]|0;
 $12 = (_write($11,24094,3)|0);
 $1 = $12;
 $13 = $1;
 $14 = ($13|0)!=(3);
 if ($14) {
  $2 = 0;
 }
 while(1) {
  $15 = HEAP32[19505]|0;
  $16 = (_read($15,$3,4096)|0);
  $1 = $16;
  $17 = $1;
  $18 = ($17|0)>(0);
  if (!($18)) {
   break;
  }
 }
 $19 = $1;
 $20 = ($19|0)!=(-1);
 if ($20) {
  label = 12;
 } else {
  $21 = (___errno_location()|0);
  $22 = HEAP32[$21>>2]|0;
  $23 = ($22|0)!=(11);
  if ($23) {
   label = 12;
  }
 }
 if ((label|0) == 12) {
  $2 = 0;
 }
 $24 = (__ZL17mbrola_has_errorsv()|0);
 $25 = ($24|0)==(0);
 $26 = $2;
 $27 = ($26|0)!=(0);
 $or$cond = $25 & $27;
 if ($or$cond) {
  HEAP32[19509] = 1;
 }
 $28 = $2;
 $0 = $28;
 $29 = $0;
 STACKTOP = sp;return ($29|0);
}
function _read_MBR($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $5 = $2;
 $6 = $3;
 $7 = $6<<1;
 $8 = (__ZL19receive_from_mbrolaPvj($5,$7)|0);
 $4 = $8;
 $9 = $4;
 $10 = ($9|0)>(0);
 if (!($10)) {
  $13 = $4;
  STACKTOP = sp;return ($13|0);
 }
 $11 = $4;
 $12 = (($11|0) / 2)&-1;
 $4 = $12;
 $13 = $4;
 STACKTOP = sp;return ($13|0);
}
function _write_MBR($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 HEAP32[19509] = 2;
 $2 = $1;
 $3 = (__ZL14send_to_mbrolaPKc($2)|0);
 STACKTOP = sp;return ($3|0);
}
function _flush_MBR() {
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZL14send_to_mbrolaPKc(24094)|0);
 $1 = ($0|0)==(3);
 $2 = $1&1;
 return ($2|0);
}
function _setVolumeRatio_MBR($0) {
 $0 = +$0;
 var $1 = 0.0, $2 = 0.0, $3 = 0.0, $4 = 0, $5 = 0.0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = +HEAPF32[773];
 $4 = $2 == $3;
 if (!($4)) {
  $5 = $1;
  HEAPF32[773] = $5;
  $6 = HEAP32[19509]|0;
  $7 = ($6|0)!=(1);
  if (!($7)) {
   __ZL11stop_mbrolav();
   $8 = HEAP32[19503]|0;
   (_init_MBR($8)|0);
  }
 }
 STACKTOP = sp;return;
}
function __Z16AlphabetFromNamePKc($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = 3096;
 while(1) {
  $4 = $3;
  $5 = HEAP32[$4>>2]|0;
  $6 = ($5|0)!=(0|0);
  if (!($6)) {
   label = 6;
   break;
  }
  $7 = $2;
  $8 = $3;
  $9 = HEAP32[$8>>2]|0;
  $10 = ((($9)) + 1|0);
  $11 = (_strcmp($7,$10)|0);
  $12 = ($11|0)==(0);
  $13 = $3;
  if ($12) {
   label = 4;
   break;
  }
  $14 = ((($13)) + 20|0);
  $3 = $14;
 }
 if ((label|0) == 4) {
  $1 = $13;
  $15 = $1;
  STACKTOP = sp;return ($15|0);
 }
 else if ((label|0) == 6) {
  $1 = 0;
  $15 = $1;
  STACKTOP = sp;return ($15|0);
 }
 return (0)|0;
}
function __Z16AlphabetFromChari($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = 3096;
 while(1) {
  $4 = $3;
  $5 = HEAP32[$4>>2]|0;
  $6 = ($5|0)!=(0|0);
  if (!($6)) {
   break;
  }
  $7 = $2;
  $8 = $3;
  $9 = ((($8)) + 10|0);
  $10 = HEAP16[$9>>1]|0;
  $11 = $10&65535;
  $12 = ($7|0)<=($11|0);
  if ($12) {
   label = 4;
   break;
  }
  $20 = $3;
  $21 = ((($20)) + 20|0);
  $3 = $21;
 }
 if ((label|0) == 4) {
  $13 = $2;
  $14 = $3;
  $15 = ((($14)) + 8|0);
  $16 = HEAP16[$15>>1]|0;
  $17 = $16&65535;
  $18 = ($13|0)>=($17|0);
  if ($18) {
   $19 = $3;
   $1 = $19;
   $22 = $1;
   STACKTOP = sp;return ($22|0);
  }
 }
 $1 = 0;
 $22 = $1;
 STACKTOP = sp;return ($22|0);
}
function __Z15SetIndicLettersP10Translator($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = ((($2)) + 464|0);
 _memset(($3|0),0,256)|0;
 $4 = $1;
 __ZL18SetLetterBitsRangeP10Translatoriii($4,0,4,20);
 $5 = $1;
 __ZL18SetLetterBitsRangeP10Translatoriii($5,0,62,77);
 $6 = $1;
 __ZL13SetLetterBitsP10TranslatoriPKc($6,0,24215);
 $7 = $1;
 __ZL18SetLetterBitsRangeP10Translatoriii($7,1,62,77);
 $8 = $1;
 __ZL13SetLetterBitsP10TranslatoriPKc($8,1,24215);
 $9 = $1;
 __ZL18SetLetterBitsRangeP10Translatoriii($9,2,21,57);
 $10 = $1;
 __ZL13SetLetterBitsP10TranslatoriPKc($10,2,24223);
 $11 = $1;
 __ZL18SetLetterBitsRangeP10Translatoriii($11,6,4,20);
 $12 = $1;
 __ZL18SetLetterBitsRangeP10Translatoriii($12,6,62,76);
 $13 = $1;
 __ZL13SetLetterBitsP10TranslatoriPKc($13,6,24215);
 $14 = $1;
 $15 = ((($14)) + 24|0);
 $16 = ((($15)) + 20|0);
 HEAP32[$16>>2] = 1;
 $17 = $1;
 $18 = ((($17)) + 720|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = (($19) + 77)|0;
 $21 = $1;
 $22 = ((($21)) + 316|0);
 HEAP32[$22>>2] = $20;
 STACKTOP = sp;return;
}
function __ZL18SetLetterBitsRangeP10Translatoriii($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $3;
 $10 = $5;
 $11 = 1 << $10;
 $8 = $11;
 $12 = $6;
 $9 = $12;
 while(1) {
  $13 = $9;
  $14 = $7;
  $15 = ($13|0)<=($14|0);
  if (!($15)) {
   break;
  }
  $16 = $8;
  $17 = $9;
  $18 = $4;
  $19 = ((($18)) + 464|0);
  $20 = (($19) + ($17)|0);
  $21 = HEAP8[$20>>0]|0;
  $22 = $21&255;
  $23 = $22 | $16;
  $24 = $23&255;
  HEAP8[$20>>0] = $24;
  $25 = $9;
  $26 = (($25) + 1)|0;
  $9 = $26;
 }
 STACKTOP = sp;return;
}
function __ZL13SetLetterBitsP10TranslatoriPKc($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $8 = $4;
 $9 = 1 << $8;
 $6 = $9;
 while(1) {
  $10 = $5;
  $11 = ((($10)) + 1|0);
  $5 = $11;
  $12 = HEAP8[$10>>0]|0;
  $7 = $12;
  $13 = $12&255;
  $14 = ($13|0)!=(0);
  if (!($14)) {
   break;
  }
  $15 = $6;
  $16 = $7;
  $17 = $16&255;
  $18 = $3;
  $19 = ((($18)) + 464|0);
  $20 = (($19) + ($17)|0);
  $21 = HEAP8[$20>>0]|0;
  $22 = $21&255;
  $23 = $22 | $15;
  $24 = $23&255;
  HEAP8[$20>>0] = $24;
 }
 STACKTOP = sp;return;
}
function __Z15SetupTranslatorP10TranslatorPKsPKh($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $6 = $4;
 $7 = ($6|0)!=(0|0);
 if ($7) {
  $8 = $3;
  $9 = ((($8)) + 424|0);
  $10 = $4;
  ;HEAP16[$9>>1]=HEAP16[$10>>1]|0;HEAP16[$9+2>>1]=HEAP16[$10+2>>1]|0;HEAP16[$9+4>>1]=HEAP16[$10+4>>1]|0;HEAP16[$9+6>>1]=HEAP16[$10+6>>1]|0;HEAP16[$9+8>>1]=HEAP16[$10+8>>1]|0;HEAP16[$9+10>>1]=HEAP16[$10+10>>1]|0;HEAP16[$9+12>>1]=HEAP16[$10+12>>1]|0;HEAP16[$9+14>>1]=HEAP16[$10+14>>1]|0;
 }
 $11 = $5;
 $12 = ($11|0)!=(0|0);
 if (!($12)) {
  STACKTOP = sp;return;
 }
 $13 = $3;
 $14 = ((($13)) + 408|0);
 $15 = $5;
 ;HEAP8[$14>>0]=HEAP8[$15>>0]|0;HEAP8[$14+1>>0]=HEAP8[$15+1>>0]|0;HEAP8[$14+2>>0]=HEAP8[$15+2>>0]|0;HEAP8[$14+3>>0]=HEAP8[$15+3>>0]|0;HEAP8[$14+4>>0]=HEAP8[$15+4>>0]|0;HEAP8[$14+5>>0]=HEAP8[$15+5>>0]|0;HEAP8[$14+6>>0]=HEAP8[$15+6>>0]|0;HEAP8[$14+7>>0]=HEAP8[$15+7>>0]|0;
 STACKTOP = sp;return;
}
function __Z16SelectTranslatorPKc($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $100 = 0, $1000 = 0, $1001 = 0, $1002 = 0, $1003 = 0, $1004 = 0, $1005 = 0, $1006 = 0, $1007 = 0, $1008 = 0, $1009 = 0, $101 = 0, $1010 = 0, $1011 = 0, $1012 = 0, $1013 = 0, $1014 = 0, $1015 = 0;
 var $1016 = 0, $1017 = 0, $1018 = 0, $1019 = 0, $102 = 0, $1020 = 0, $1021 = 0, $1022 = 0, $1023 = 0, $1024 = 0, $1025 = 0, $1026 = 0, $1027 = 0, $1028 = 0, $1029 = 0, $103 = 0, $1030 = 0, $1031 = 0, $1032 = 0, $1033 = 0;
 var $1034 = 0, $1035 = 0, $1036 = 0, $1037 = 0, $1038 = 0, $1039 = 0, $104 = 0, $1040 = 0, $1041 = 0, $1042 = 0, $1043 = 0, $1044 = 0, $1045 = 0, $1046 = 0, $1047 = 0, $1048 = 0, $1049 = 0, $105 = 0, $1050 = 0, $1051 = 0;
 var $1052 = 0, $1053 = 0, $1054 = 0, $1055 = 0, $1056 = 0, $1057 = 0, $1058 = 0, $1059 = 0, $106 = 0, $1060 = 0, $1061 = 0, $1062 = 0, $1063 = 0, $1064 = 0, $1065 = 0, $1066 = 0, $1067 = 0, $1068 = 0, $1069 = 0, $107 = 0;
 var $1070 = 0, $1071 = 0, $1072 = 0, $1073 = 0, $1074 = 0, $1075 = 0, $1076 = 0, $1077 = 0, $1078 = 0, $1079 = 0, $108 = 0, $1080 = 0, $1081 = 0, $1082 = 0, $1083 = 0, $1084 = 0, $1085 = 0, $1086 = 0, $1087 = 0, $1088 = 0;
 var $1089 = 0, $109 = 0, $1090 = 0, $1091 = 0, $1092 = 0, $1093 = 0, $1094 = 0, $1095 = 0, $1096 = 0, $1097 = 0, $1098 = 0, $1099 = 0, $11 = 0, $110 = 0, $1100 = 0, $1101 = 0, $1102 = 0, $1103 = 0, $1104 = 0, $1105 = 0;
 var $1106 = 0, $1107 = 0, $1108 = 0, $1109 = 0, $111 = 0, $1110 = 0, $1111 = 0, $1112 = 0, $1113 = 0, $1114 = 0, $1115 = 0, $1116 = 0, $1117 = 0, $1118 = 0, $1119 = 0, $112 = 0, $1120 = 0, $1121 = 0, $1122 = 0, $1123 = 0;
 var $1124 = 0, $1125 = 0, $1126 = 0, $1127 = 0, $1128 = 0, $1129 = 0, $113 = 0, $1130 = 0, $1131 = 0, $1132 = 0, $1133 = 0, $1134 = 0, $1135 = 0, $1136 = 0, $1137 = 0, $1138 = 0, $1139 = 0, $114 = 0, $1140 = 0, $1141 = 0;
 var $1142 = 0, $1143 = 0, $1144 = 0, $1145 = 0, $1146 = 0, $1147 = 0, $1148 = 0, $1149 = 0, $115 = 0, $1150 = 0, $1151 = 0, $1152 = 0, $1153 = 0, $1154 = 0, $1155 = 0, $1156 = 0, $1157 = 0, $1158 = 0, $1159 = 0, $116 = 0;
 var $1160 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0;
 var $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0;
 var $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0;
 var $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0;
 var $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0;
 var $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0;
 var $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0;
 var $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0;
 var $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0;
 var $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0;
 var $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0;
 var $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0;
 var $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0;
 var $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0;
 var $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0;
 var $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0;
 var $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0;
 var $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0;
 var $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0;
 var $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0;
 var $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0;
 var $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0;
 var $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0;
 var $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0;
 var $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0;
 var $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0, $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0, $799 = 0, $8 = 0, $80 = 0;
 var $800 = 0, $801 = 0, $802 = 0, $803 = 0, $804 = 0, $805 = 0, $806 = 0, $807 = 0, $808 = 0, $809 = 0, $81 = 0, $810 = 0, $811 = 0, $812 = 0, $813 = 0, $814 = 0, $815 = 0, $816 = 0, $817 = 0, $818 = 0;
 var $819 = 0, $82 = 0, $820 = 0, $821 = 0, $822 = 0, $823 = 0, $824 = 0, $825 = 0, $826 = 0, $827 = 0, $828 = 0, $829 = 0, $83 = 0, $830 = 0, $831 = 0, $832 = 0, $833 = 0, $834 = 0, $835 = 0, $836 = 0;
 var $837 = 0, $838 = 0, $839 = 0, $84 = 0, $840 = 0, $841 = 0, $842 = 0, $843 = 0, $844 = 0, $845 = 0, $846 = 0, $847 = 0, $848 = 0, $849 = 0, $85 = 0, $850 = 0, $851 = 0, $852 = 0, $853 = 0, $854 = 0;
 var $855 = 0, $856 = 0, $857 = 0, $858 = 0, $859 = 0, $86 = 0, $860 = 0, $861 = 0, $862 = 0, $863 = 0, $864 = 0, $865 = 0, $866 = 0, $867 = 0, $868 = 0, $869 = 0, $87 = 0, $870 = 0, $871 = 0, $872 = 0;
 var $873 = 0, $874 = 0, $875 = 0, $876 = 0, $877 = 0, $878 = 0, $879 = 0, $88 = 0, $880 = 0, $881 = 0, $882 = 0, $883 = 0, $884 = 0, $885 = 0, $886 = 0, $887 = 0, $888 = 0, $889 = 0, $89 = 0, $890 = 0;
 var $891 = 0, $892 = 0, $893 = 0, $894 = 0, $895 = 0, $896 = 0, $897 = 0, $898 = 0, $899 = 0, $9 = 0, $90 = 0, $900 = 0, $901 = 0, $902 = 0, $903 = 0, $904 = 0, $905 = 0, $906 = 0, $907 = 0, $908 = 0;
 var $909 = 0, $91 = 0, $910 = 0, $911 = 0, $912 = 0, $913 = 0, $914 = 0, $915 = 0, $916 = 0, $917 = 0, $918 = 0, $919 = 0, $92 = 0, $920 = 0, $921 = 0, $922 = 0, $923 = 0, $924 = 0, $925 = 0, $926 = 0;
 var $927 = 0, $928 = 0, $929 = 0, $93 = 0, $930 = 0, $931 = 0, $932 = 0, $933 = 0, $934 = 0, $935 = 0, $936 = 0, $937 = 0, $938 = 0, $939 = 0, $94 = 0, $940 = 0, $941 = 0, $942 = 0, $943 = 0, $944 = 0;
 var $945 = 0, $946 = 0, $947 = 0, $948 = 0, $949 = 0, $95 = 0, $950 = 0, $951 = 0, $952 = 0, $953 = 0, $954 = 0, $955 = 0, $956 = 0, $957 = 0, $958 = 0, $959 = 0, $96 = 0, $960 = 0, $961 = 0, $962 = 0;
 var $963 = 0, $964 = 0, $965 = 0, $966 = 0, $967 = 0, $968 = 0, $969 = 0, $97 = 0, $970 = 0, $971 = 0, $972 = 0, $973 = 0, $974 = 0, $975 = 0, $976 = 0, $977 = 0, $978 = 0, $979 = 0, $98 = 0, $980 = 0;
 var $981 = 0, $982 = 0, $983 = 0, $984 = 0, $985 = 0, $986 = 0, $987 = 0, $988 = 0, $989 = 0, $99 = 0, $990 = 0, $991 = 0, $992 = 0, $993 = 0, $994 = 0, $995 = 0, $996 = 0, $997 = 0, $998 = 0, $999 = 0;
 var $switch$split122D = 0, $switch$split152D = 0, $switch$split182D = 0, $switch$split212D = 0, $switch$split242D = 0, $switch$split2D = 0, $switch$split32D = 0, $switch$split62D = 0, $switch$split92D = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = 0;
 $4 = (__ZL13NewTranslatorv()|0);
 $3 = $4;
 $5 = $3;
 $6 = ((($5)) + 340|0);
 $7 = $1;
 (_strcpy($6,$7)|0);
 while(1) {
  $8 = $1;
  $9 = HEAP8[$8>>0]|0;
  $10 = $9 << 24 >> 24;
  $11 = ($10|0)!=(0);
  $12 = $2;
  if (!($11)) {
   break;
  }
  $13 = $12 << 8;
  $14 = $1;
  $15 = ((($14)) + 1|0);
  $1 = $15;
  $16 = HEAP8[$14>>0]|0;
  $17 = $16 << 24 >> 24;
  $18 = (($13) + ($17))|0;
  $2 = $18;
 }
 $switch$split2D = ($12|0)<(27509);
 L5: do {
  if ($switch$split2D) {
   do {
    switch ($12|0) {
    case 24947: case 25198:  {
     label = 9;
     break L5;
     break;
    }
    case 25964:  {
     label = 16;
     break L5;
     break;
    }
    case 26977: case 25441: case 24942: case 25971:  {
     label = 19;
     break L5;
     break;
    }
    case 26485: case 26729:  {
     label = 34;
     break L5;
     break;
    }
    case 25203: case 26738:  {
     label = 43;
     break L5;
     break;
    }
    case 26980:  {
     label = 50;
     break L5;
     break;
    }
    case 25459:  {
     label = 72;
     break L5;
     break;
    }
    case 27502:  {
     label = 80;
     break L5;
     break;
    }
    case 24954:  {
     label = 91;
     break L5;
     break;
    }
    case 24934:  {
     $19 = $3;
     __Z15SetupTranslatorP10TranslatorPKsPKh($19,9852,0);
     $20 = $3;
     $21 = ((($20)) + 8|0);
     HEAP32[$21>>2] = 0;
     $22 = $3;
     $23 = ((($22)) + 4|0);
     HEAP32[$23>>2] = 48;
     $24 = $3;
     $25 = ((($24)) + 24|0);
     $26 = ((($25)) + 4|0);
     HEAP32[$26>>2] = 1;
     $27 = $3;
     $28 = ((($27)) + 24|0);
     $29 = ((($28)) + 12|0);
     HEAP32[$29>>2] = 1;
     $30 = $3;
     __ZL14SetLetterVowelP10Translatori($30,121);
     $31 = $3;
     $32 = ((($31)) + 200|0);
     HEAP32[$32>>2] = 16779472;
     $33 = $3;
     $34 = ((($33)) + 240|0);
     HEAP32[$34>>2] = 1;
     break L5;
     break;
    }
    case 24941:  {
     $35 = $3;
     __Z15SetupTranslatorP10TranslatorPKsPKh($35,9868,24238);
     $36 = $3;
     $37 = ((($36)) + 720|0);
     HEAP32[$37>>2] = 4608;
     $38 = $3;
     $39 = ((($38)) + 8|0);
     HEAP32[$39>>2] = 0;
     $40 = $3;
     $41 = ((($40)) + 12|0);
     HEAP32[$41>>2] = 36;
     $42 = $3;
     $43 = ((($42)) + 192|0);
     $44 = HEAP32[$43>>2]|0;
     $45 = $3;
     $46 = ((($45)) + 196|0);
     HEAP32[$46>>2] = $44;
     $47 = $3;
     $48 = ((($47)) + 24|0);
     $49 = ((($48)) + 20|0);
     HEAP32[$49>>2] = 1;
     $50 = $3;
     $51 = ((($50)) + 200|0);
     HEAP32[$51>>2] = 1024;
     break L5;
     break;
    }
    case 24946:  {
     $52 = $3;
     $53 = ((($52)) + 332|0);
     HEAP32[$53>>2] = 1568;
     $54 = $3;
     $55 = ((($54)) + 328|0);
     HEAP32[$55>>2] = 1631;
     $56 = $3;
     $57 = ((($56)) + 336|0);
     HEAP32[$57>>2] = 0;
     $58 = $3;
     $59 = ((($58)) + 720|0);
     HEAP32[$59>>2] = 1536;
     $60 = $3;
     $61 = ((($60)) + 200|0);
     HEAP32[$61>>2] = 2884720;
     $62 = $3;
     $63 = ((($62)) + 24|0);
     $64 = ((($63)) + 20|0);
     HEAP32[$64>>2] = 1;
     break L5;
     break;
    }
    case 25191:  {
     $65 = $3;
     __ZL18SetCyrillicLettersP10Translator($65);
     $66 = $3;
     __ZL14SetLetterVowelP10Translatori($66,42);
     $67 = HEAP32[(2960)>>2]|0;
     $68 = $3;
     $69 = ((($68)) + 448|0);
     HEAP32[$69>>2] = $67;
     $70 = $3;
     $71 = ((($70)) + 24|0);
     $72 = ((($71)) + 20|0);
     HEAP32[$72>>2] = 1074;
     $73 = $3;
     $74 = ((($73)) + 24|0);
     $75 = ((($74)) + 16|0);
     HEAP32[$75>>2] = 263;
     $76 = $3;
     $77 = ((($76)) + 24|0);
     $78 = ((($77)) + 40|0);
     HEAP32[$78>>2] = 2;
     $79 = $3;
     $80 = ((($79)) + 8|0);
     HEAP32[$80>>2] = 2;
     $81 = $3;
     $82 = ((($81)) + 200|0);
     HEAP32[$82>>2] = 184554728;
     $83 = $3;
     $84 = ((($83)) + 220|0);
     HEAP32[$84>>2] = 32;
     break L5;
     break;
    }
    case 25199:  {
     $105 = $3;
     $106 = ((($105)) + 8|0);
     HEAP32[$106>>2] = 0;
     $107 = $3;
     $108 = ((($107)) + 720|0);
     HEAP32[$108>>2] = 3840;
     $109 = $3;
     __ZL18SetLetterBitsRangeP10Translatoriii($109,0,113,125);
     $110 = $3;
     __ZL18SetLetterBitsRangeP10Translatoriii($110,1,113,129);
     $111 = $3;
     __ZL18SetLetterBitsRangeP10Translatoriii($111,1,144,188);
     $112 = $3;
     __ZL18SetLetterBitsRangeP10Translatoriii($112,2,64,108);
     $113 = $3;
     $114 = ((($113)) + 24|0);
     $115 = ((($114)) + 20|0);
     HEAP32[$115>>2] = 1;
     $116 = $3;
     $117 = ((($116)) + 200|0);
     HEAP32[$117>>2] = 1;
     break L5;
     break;
    }
    case 25465:  {
     $118 = $3;
     __Z15SetupTranslatorP10TranslatorPKsPKh($118,9900,24257);
     $119 = HEAP32[(2996)>>2]|0;
     $120 = $3;
     $121 = ((($120)) + 448|0);
     HEAP32[$121>>2] = $119;
     $122 = $3;
     $123 = ((($122)) + 8|0);
     HEAP32[$123>>2] = 2;
     $124 = $3;
     $125 = ((($124)) + 12|0);
     HEAP32[$125>>2] = 22;
     $126 = $3;
     $127 = ((($126)) + 16|0);
     HEAP32[$127>>2] = 0;
     $128 = $3;
     $129 = ((($128)) + 20|0);
     HEAP32[$129>>2] = 2;
     $130 = $3;
     $131 = ((($130)) + 24|0);
     $132 = ((($131)) + 28|0);
     HEAP32[$132>>2] = 120;
     $133 = $3;
     $134 = ((($133)) + 200|0);
     HEAP32[$134>>2] = 1024;
     $135 = $3;
     __ZL14SetLetterVowelP10Translatori($135,119);
     $136 = $3;
     __ZL14SetLetterVowelP10Translatori($136,121);
     break L5;
     break;
    }
    case 25697:  {
     $137 = $3;
     __Z15SetupTranslatorP10TranslatorPKsPKh($137,9916,0);
     $138 = $3;
     $139 = ((($138)) + 8|0);
     HEAP32[$139>>2] = 0;
     $140 = $3;
     $141 = ((($140)) + 24|0);
     $142 = ((($141)) + 12|0);
     HEAP32[$142>>2] = 1;
     $143 = $3;
     __ZL14SetLetterVowelP10Translatori($143,121);
     $144 = $3;
     $145 = ((($144)) + 200|0);
     HEAP32[$145>>2] = 184618072;
     break L5;
     break;
    }
    case 25701:  {
     $146 = $3;
     __Z15SetupTranslatorP10TranslatorPKsPKh($146,9932,24265);
     $147 = $3;
     $148 = ((($147)) + 8|0);
     HEAP32[$148>>2] = 0;
     $149 = $3;
     HEAP32[$149>>2] = 8;
     $150 = $3;
     $151 = ((($150)) + 4|0);
     HEAP32[$151>>2] = 48;
     $152 = $3;
     $153 = ((($152)) + 24|0);
     $154 = ((($153)) + 12|0);
     HEAP32[$154>>2] = 1;
     $155 = $3;
     $156 = ((($155)) + 24|0);
     $157 = ((($156)) + 16|0);
     HEAP32[$157>>2] = 256;
     $158 = $3;
     $159 = ((($158)) + 24|0);
     $160 = ((($159)) + 72|0);
     HEAP32[$160>>2] = 87;
     $161 = $3;
     $162 = ((($161)) + 200|0);
     HEAP32[$162>>2] = 16846872;
     $163 = $3;
     __ZL14SetLetterVowelP10Translatori($163,121);
     $164 = $3;
     $165 = ((($164)) + 24|0);
     $166 = ((($165)) + 20|0);
     HEAP32[$166>>2] = 2;
     break L5;
     break;
    }
    case 25718:  {
     $167 = $3;
     __Z15SetupTranslatorP10TranslatorPKsPKh($167,9948,24273);
     $168 = $3;
     $169 = ((($168)) + 24|0);
     $170 = ((($169)) + 20|0);
     HEAP32[$170>>2] = 1;
     $171 = $3;
     $172 = ((($171)) + 192|0);
     $173 = HEAP32[$172>>2]|0;
     $174 = $3;
     $175 = ((($174)) + 196|0);
     HEAP32[$175>>2] = $173;
     $176 = $3;
     $177 = ((($176)) + 720|0);
     HEAP32[$177>>2] = 1920;
     $178 = $3;
     $179 = ((($178)) + 8|0);
     HEAP32[$179>>2] = 0;
     $180 = $3;
     $181 = ((($180)) + 12|0);
     HEAP32[$181>>2] = 65540;
     $182 = $3;
     __ZL18SetLetterBitsRangeP10Translatoriii($182,1,38,48);
     $183 = $3;
     $184 = ((($183)) + 208|0);
     HEAP32[$184>>2] = 5288;
     $185 = $3;
     $186 = ((($185)) + 200|0);
     HEAP32[$186>>2] = 1;
     break L5;
     break;
    }
    case 25966:  {
     $187 = $3;
     __Z15SetupTranslatorP10TranslatorPKsPKh($187,9964,0);
     $188 = $3;
     $189 = ((($188)) + 8|0);
     HEAP32[$189>>2] = 0;
     $190 = $3;
     $191 = ((($190)) + 12|0);
     HEAP32[$191>>2] = 8;
     $192 = $3;
     $193 = ((($192)) + 200|0);
     HEAP32[$193>>2] = 16779328;
     $194 = $3;
     $195 = ((($194)) + 24|0);
     $196 = ((($195)) + 44|0);
     HEAP32[$196>>2] = 2;
     $197 = $3;
     $198 = ((($197)) + 316|0);
     HEAP32[$198>>2] = 101;
     $199 = $3;
     $200 = ((($199)) + 24|0);
     $201 = ((($200)) + 20|0);
     HEAP32[$201>>2] = 2;
     $202 = $3;
     __ZL13SetLetterBitsP10TranslatoriPKc($202,6,24281);
     break L5;
     break;
    }
    case 25967:  {
     $243 = $3;
     __Z15SetupTranslatorP10TranslatorPKsPKh($243,9996,24354);
     $244 = HEAP32[(2952)>>2]|0;
     $245 = $3;
     $246 = ((($245)) + 448|0);
     HEAP32[$246>>2] = $244;
     $247 = $3;
     $248 = ((($247)) + 452|0);
     HEAP32[$248>>2] = 3684;
     $249 = $3;
     $250 = ((($249)) + 4|0);
     HEAP32[$250>>2] = 2;
     $251 = $3;
     $252 = ((($251)) + 8|0);
     HEAP32[$252>>2] = 2;
     $253 = $3;
     $254 = ((($253)) + 12|0);
     HEAP32[$254>>2] = 22;
     $255 = $3;
     $256 = ((($255)) + 20|0);
     HEAP32[$256>>2] = 2;
     $257 = $3;
     $258 = ((($257)) + 200|0);
     HEAP32[$258>>2] = 16782344;
     break L5;
     break;
    }
    case 25973:  {
     $310 = $3;
     __Z15SetupTranslatorP10TranslatorPKsPKh($310,10028,24373);
     $311 = $3;
     $312 = ((($311)) + 8|0);
     HEAP32[$312>>2] = 1;
     $313 = $3;
     $314 = ((($313)) + 12|0);
     HEAP32[$314>>2] = 256;
     $315 = $3;
     $316 = ((($315)) + 24|0);
     $317 = ((($316)) + 76|0);
     HEAP32[$317>>2] = 1;
     $318 = $3;
     $319 = ((($318)) + 200|0);
     HEAP32[$319>>2] = 3147080;
     break L5;
     break;
    }
    case 26209:  {
     $320 = $3;
     $321 = ((($320)) + 332|0);
     HEAP32[$321>>2] = 1568;
     $322 = $3;
     $323 = ((($322)) + 328|0);
     HEAP32[$323>>2] = 1740;
     $324 = $3;
     $325 = ((($324)) + 336|0);
     HEAP32[$325>>2] = 24381;
     $326 = $3;
     $327 = ((($326)) + 720|0);
     HEAP32[$327>>2] = 1536;
     $328 = $3;
     $329 = ((($328)) + 200|0);
     HEAP32[$329>>2] = 96;
     $330 = $3;
     $331 = ((($330)) + 24|0);
     $332 = ((($331)) + 20|0);
     HEAP32[$332>>2] = 1;
     $333 = $3;
     $334 = ((($333)) + 460|0);
     HEAP32[$334>>2] = 10044;
     break L5;
     break;
    }
    case 25972:  {
     $335 = HEAP32[(2956)>>2]|0;
     $336 = $3;
     $337 = ((($336)) + 448|0);
     HEAP32[$337>>2] = $335;
     break;
    }
    case 26217:  {
     break;
    }
    case 26226:  {
     $355 = $3;
     __Z15SetupTranslatorP10TranslatorPKsPKh($355,9868,24238);
     $356 = $3;
     $357 = ((($356)) + 8|0);
     HEAP32[$357>>2] = 3;
     $358 = $3;
     $359 = ((($358)) + 12|0);
     HEAP32[$359>>2] = 36;
     $360 = $3;
     $361 = ((($360)) + 24|0);
     $362 = ((($361)) + 8|0);
     HEAP32[$362>>2] = 1;
     $363 = $3;
     $364 = ((($363)) + 192|0);
     $365 = HEAP32[$364>>2]|0;
     $366 = $3;
     $367 = ((($366)) + 196|0);
     HEAP32[$367>>2] = $365;
     $368 = $3;
     $369 = ((($368)) + 240|0);
     HEAP32[$369>>2] = 2;
     $370 = $3;
     $371 = ((($370)) + 200|0);
     HEAP32[$371>>2] = 118658312;
     $372 = $3;
     __ZL14SetLetterVowelP10Translatori($372,121);
     break L5;
     break;
    }
    case 26468: case 26465:  {
     $373 = $3;
     $374 = ((($373)) + 8|0);
     HEAP32[$374>>2] = 0;
     $375 = $3;
     $376 = ((($375)) + 12|0);
     HEAP32[$376>>2] = 32;
     $377 = $3;
     $378 = ((($377)) + 200|0);
     HEAP32[$378>>2] = 2098176;
     $379 = $3;
     $380 = ((($379)) + 240|0);
     HEAP32[$380>>2] = 2;
     $381 = $3;
     $382 = ((($381)) + 24|0);
     $383 = ((($382)) + 20|0);
     HEAP32[$383>>2] = 3;
     $384 = $3;
     $385 = ((($384)) + 24|0);
     $386 = ((($385)) + 8|0);
     HEAP32[$386>>2] = 1;
     break L5;
     break;
    }
    case 26740:  {
     $464 = $3;
     $465 = ((($464)) + 8|0);
     HEAP32[$465>>2] = 3;
     $466 = $3;
     $467 = ((($466)) + 12|0);
     HEAP32[$467>>2] = 36;
     $468 = $3;
     $469 = ((($468)) + 200|0);
     HEAP32[$469>>2] = 17990912;
     break L5;
     break;
    }
    case 26741:  {
     $470 = $3;
     __Z15SetupTranslatorP10TranslatorPKsPKh($470,10144,24590);
     $471 = HEAP32[(2948)>>2]|0;
     $472 = $3;
     $473 = ((($472)) + 448|0);
     HEAP32[$473>>2] = $471;
     $474 = $3;
     $475 = ((($474)) + 4|0);
     HEAP32[$475>>2] = 32;
     $476 = $3;
     $477 = ((($476)) + 8|0);
     HEAP32[$477>>2] = 0;
     $478 = $3;
     $479 = ((($478)) + 12|0);
     HEAP32[$479>>2] = 1081398;
     $480 = $3;
     $481 = ((($480)) + 16|0);
     HEAP32[$481>>2] = 2;
     $482 = $3;
     $483 = ((($482)) + 24|0);
     $484 = ((($483)) + 56|0);
     HEAP32[$484>>2] = 1;
     $485 = $3;
     $486 = ((($485)) + 24|0);
     $487 = ((($486)) + 68|0);
     HEAP32[$487>>2] = 2;
     $488 = $3;
     $489 = ((($488)) + 200|0);
     HEAP32[$489>>2] = 186758144;
     $490 = $3;
     $491 = ((($490)) + 220|0);
     HEAP32[$491>>2] = 32;
     $492 = $3;
     $493 = ((($492)) + 224|0);
     HEAP32[$493>>2] = 44;
     $494 = $3;
     $495 = ((($494)) + 212|0);
     HEAP32[$495>>2] = 899;
     $496 = $3;
     $497 = ((($496)) + 216|0);
     HEAP32[$497>>2] = 1;
     $498 = $3;
     __ZL14SetLetterVowelP10Translatori($498,121);
     $499 = $3;
     $500 = ((($499)) + 269|0);
     HEAP8[$500>>0] = 1;
     $501 = $3;
     __Z13SetLengthModsP10Translatori($501,3);
     break L5;
     break;
    }
    case 26745:  {
     $502 = $3;
     __Z15SetupTranslatorP10TranslatorPKsPKh($502,10160,0);
     $503 = $3;
     $504 = ((($503)) + 8|0);
     HEAP32[$504>>2] = 3;
     $505 = $3;
     $506 = ((($505)) + 720|0);
     HEAP32[$506>>2] = 1328;
     $507 = $3;
     $508 = ((($507)) + 464|0);
     _memset(($508|0),0,256)|0;
     $509 = $3;
     __ZL13SetLetterBitsP10TranslatoriPKc($509,0,24598);
     $510 = $3;
     __ZL13SetLetterBitsP10TranslatoriPKc($510,7,24598);
     $511 = $3;
     __ZL13SetLetterBitsP10TranslatoriPKc($511,1,24606);
     $512 = $3;
     __ZL13SetLetterBitsP10TranslatoriPKc($512,2,24606);
     $513 = $3;
     __ZL13SetLetterBitsP10TranslatoriPKc($513,2,24637);
     $514 = $3;
     $515 = ((($514)) + 268|0);
     HEAP8[$515>>0] = 6;
     $516 = $3;
     $517 = ((($516)) + 200|0);
     HEAP32[$517>>2] = 5128;
     break L5;
     break;
    }
    case 26995:  {
     $527 = $3;
     __Z15SetupTranslatorP10TranslatorPKsPKh($527,10192,0);
     $528 = $3;
     $529 = ((($528)) + 8|0);
     HEAP32[$529>>2] = 0;
     $530 = $3;
     $531 = ((($530)) + 12|0);
     HEAP32[$531>>2] = 16;
     $532 = $3;
     $533 = ((($532)) + 24|0);
     $534 = ((($533)) + 8|0);
     HEAP32[$534>>2] = 17;
     $535 = $3;
     $536 = ((($535)) + 24|0);
     $537 = ((($536)) + 40|0);
     HEAP32[$537>>2] = 2;
     $538 = $3;
     __ZL15ResetLetterBitsP10Translatori($538,24);
     $539 = $3;
     __ZL13SetLetterBitsP10TranslatoriPKc($539,4,24647);
     $540 = $3;
     __ZL13SetLetterBitsP10TranslatoriPKc($540,3,24652);
     $541 = $3;
     $542 = ((($541)) + 724|0);
     $543 = ((($542)) + 4|0);
     HEAP32[$543>>2] = 3972;
     $544 = $3;
     __ZL14SetLetterVowelP10Translatori($544,121);
     $545 = $3;
     $546 = ((($545)) + 200|0);
     HEAP32[$546>>2] = 2280;
     $547 = $3;
     $548 = ((($547)) + 204|0);
     HEAP32[$548>>2] = 2;
     break L5;
     break;
    }
    case 26996:  {
     $549 = $3;
     __Z15SetupTranslatorP10TranslatorPKsPKh($549,10208,24656);
     $550 = $3;
     $551 = ((($550)) + 192|0);
     $552 = HEAP32[$551>>2]|0;
     $553 = $3;
     $554 = ((($553)) + 196|0);
     HEAP32[$554>>2] = $552;
     $555 = $3;
     $556 = ((($555)) + 8|0);
     HEAP32[$556>>2] = 2;
     $557 = $3;
     $558 = ((($557)) + 12|0);
     HEAP32[$558>>2] = 131088;
     $559 = $3;
     $560 = ((($559)) + 4|0);
     HEAP32[$560>>2] = 1;
     $561 = $3;
     $562 = ((($561)) + 16|0);
     HEAP32[$562>>2] = 2;
     $563 = $3;
     $564 = ((($563)) + 20|0);
     HEAP32[$564>>2] = 2;
     $565 = $3;
     $566 = ((($565)) + 24|0);
     $567 = ((($566)) + 8|0);
     HEAP32[$567>>2] = 2;
     $568 = $3;
     $569 = ((($568)) + 24|0);
     $570 = ((($569)) + 56|0);
     HEAP32[$570>>2] = 1;
     $571 = $3;
     $572 = ((($571)) + 24|0);
     $573 = ((($572)) + 28|0);
     HEAP32[$573>>2] = 130;
     $574 = $3;
     $575 = ((($574)) + 24|0);
     $576 = ((($575)) + 40|0);
     HEAP32[$576>>2] = 1;
     $577 = $3;
     $578 = ((($577)) + 24|0);
     $579 = ((($578)) + 60|0);
     HEAP32[$579>>2] = 2;
     $580 = $3;
     $581 = ((($580)) + 200|0);
     HEAP32[$581>>2] = 117450248;
     $582 = $3;
     $583 = ((($582)) + 204|0);
     HEAP32[$583>>2] = 8192;
     $584 = $3;
     $585 = ((($584)) + 240|0);
     HEAP32[$585>>2] = 2;
     $586 = $3;
     __ZL14SetLetterVowelP10Translatori($586,121);
     break L5;
     break;
    }
    case 27489:  {
     $600 = $3;
     __Z15SetupTranslatorP10TranslatorPKsPKh($600,9948,24273);
     $601 = $3;
     $602 = ((($601)) + 464|0);
     _memset(($602|0),0,256)|0;
     $603 = $3;
     __ZL13SetLetterBitsP10TranslatoriPKc($603,0,24664);
     $604 = $3;
     __ZL13SetLetterBitsP10TranslatoriPKc($604,2,24672);
     $605 = $3;
     __ZL13SetLetterBitsP10TranslatoriPKc($605,7,24664);
     $606 = $3;
     $607 = ((($606)) + 8|0);
     HEAP32[$607>>2] = 0;
     $608 = $3;
     $609 = ((($608)) + 12|0);
     HEAP32[$609>>2] = 16;
     $610 = $3;
     $611 = ((($610)) + 720|0);
     HEAP32[$611>>2] = 4256;
     $612 = $3;
     $613 = ((($612)) + 268|0);
     HEAP8[$613>>0] = 7;
     $614 = $3;
     $615 = ((($614)) + 200|0);
     HEAP32[$615>>2] = 19964960;
     $616 = $3;
     $617 = ((($616)) + 300|0);
     HEAP32[$617>>2] = 1056;
     $618 = $3;
     $619 = ((($618)) + 304|0);
     HEAP32[$619>>2] = 29301;
     break L5;
     break;
    }
    case 27499:  {
     $620 = $3;
     $621 = ((($620)) + 720|0);
     HEAP32[$621>>2] = 1056;
     $622 = $3;
     $623 = ((($622)) + 464|0);
     _memset(($623|0),0,256)|0;
     $624 = $3;
     __ZL13SetLetterBitsP10TranslatoriPKc($624,0,24706);
     $625 = $3;
     __ZL13SetLetterBitsP10TranslatoriPKc($625,2,24722);
     $626 = $3;
     __ZL13SetLetterBitsP10TranslatoriPKc($626,7,24706);
     $627 = $3;
     __Z15SetupTranslatorP10TranslatorPKsPKh($627,10240,24750);
     $628 = $3;
     $629 = ((($628)) + 8|0);
     HEAP32[$629>>2] = 7;
     $630 = $3;
     $631 = ((($630)) + 12|0);
     HEAP32[$631>>2] = 2097184;
     $632 = $3;
     $633 = ((($632)) + 312|0);
     HEAP32[$633>>2] = 0;
     $634 = $3;
     $635 = ((($634)) + 24|0);
     $636 = ((($635)) + 76|0);
     HEAP32[$636>>2] = 1;
     $637 = $3;
     $638 = ((($637)) + 200|0);
     HEAP32[$638>>2] = 50176;
     $639 = $3;
     $640 = ((($639)) + 268|0);
     HEAP8[$640>>0] = 2;
     $641 = $3;
     __Z13SetLengthModsP10Translatori($641,3);
     break L5;
     break;
    }
    case 27500:  {
     $642 = $3;
     __Z15SetupTranslatorP10TranslatorPKsPKh($642,10096,24570);
     $643 = $3;
     $644 = ((($643)) + 8|0);
     HEAP32[$644>>2] = 12;
     $645 = $3;
     $646 = ((($645)) + 12|0);
     HEAP32[$646>>2] = 32;
     $647 = $3;
     $648 = ((($647)) + 200|0);
     HEAP32[$648>>2] = 184618072;
     break L5;
     break;
    }
    case 27503:  {
     $649 = $3;
     $650 = ((($649)) + 720|0);
     HEAP32[$650>>2] = 4352;
     $651 = $3;
     $652 = ((($651)) + 296|0);
     HEAP32[$652>>2] = 42752;
     $653 = $3;
     $654 = ((($653)) + 464|0);
     _memset(($654|0),0,256)|0;
     $655 = $3;
     __ZL18SetLetterBitsRangeP10Translatoriii($655,0,97,117);
     $656 = $3;
     __ZL13SetLetterBitsP10TranslatoriPKc($656,6,24758);
     $657 = $3;
     __ZL13SetLetterBitsP10TranslatoriPKc($657,5,24767);
     $658 = $3;
     $659 = ((($658)) + 8|0);
     HEAP32[$659>>2] = 8;
     $660 = $3;
     $661 = ((($660)) + 24|0);
     $662 = ((($661)) + 20|0);
     HEAP32[$662>>2] = 1;
     $663 = $3;
     $664 = ((($663)) + 200|0);
     HEAP32[$664>>2] = 1024;
     $665 = $3;
     $666 = ((($665)) + 204|0);
     HEAP32[$666>>2] = 16384;
     $667 = $3;
     $668 = ((($667)) + 208|0);
     HEAP32[$668>>2] = 17895696;
     $669 = $3;
     $670 = ((($669)) + 228|0);
     HEAP32[$670>>2] = 20;
     break L5;
     break;
    }
    default: {
     label = 102;
     break L5;
    }
    }
   } while(0);
   $338 = $3;
   __Z15SetupTranslatorP10TranslatorPKsPKh($338,10064,24554);
   $339 = $3;
   $340 = ((($339)) + 8|0);
   HEAP32[$340>>2] = 0;
   $341 = $3;
   $342 = ((($341)) + 12|0);
   HEAP32[$342>>2] = 86;
   $343 = $3;
   $344 = ((($343)) + 24|0);
   $345 = ((($344)) + 56|0);
   HEAP32[$345>>2] = 1;
   $346 = $3;
   $347 = ((($346)) + 260|0);
   HEAP32[$347>>2] = 130;
   $348 = $3;
   $349 = ((($348)) + 200|0);
   HEAP32[$349>>2] = 4104;
   $350 = $3;
   __ZL14SetLetterVowelP10Translatori($350,121);
   $351 = $3;
   $352 = ((($351)) + 269|0);
   HEAP8[$352>>0] = 1;
   $353 = $3;
   $354 = ((($353)) + 248|0);
   HEAP32[$354>>2] = 3;
  } else {
   $switch$split32D = ($12|0)<(29545);
   L35: do {
    if ($switch$split32D) {
     do {
      switch ($12|0) {
      case 28769: case 28530: case 28261:  {
       label = 34;
       break L5;
       break;
      }
      case 28019:  {
       label = 50;
       break L5;
       break;
      }
      case 28018: case 28012:  {
       label = 80;
       break L5;
       break;
      }
      case 29540:  {
       break L35;
       break;
      }
      case 27509:  {
       $671 = $3;
       __Z15SetupTranslatorP10TranslatorPKsPKh($671,10256,24775);
       $672 = HEAP32[(2976)>>2]|0;
       $673 = $3;
       $674 = ((($673)) + 448|0);
       HEAP32[$674>>2] = $672;
       $675 = $3;
       $676 = ((($675)) + 8|0);
       HEAP32[$676>>2] = 7;
       $677 = $3;
       $678 = ((($677)) + 200|0);
       HEAP32[$678>>2] = 263264;
       $679 = $3;
       $680 = ((($679)) + 268|0);
       HEAP8[$680>>0] = 2;
       break L5;
       break;
      }
      case 27745:  {
       $681 = HEAP32[(2956)>>2]|0;
       $682 = $3;
       $683 = ((($682)) + 448|0);
       HEAP32[$683>>2] = $681;
       $684 = $3;
       $685 = ((($684)) + 8|0);
       HEAP32[$685>>2] = 2;
       $686 = $3;
       $687 = ((($686)) + 12|0);
       HEAP32[$687>>2] = 32;
       $688 = $3;
       $689 = ((($688)) + 16|0);
       HEAP32[$689>>2] = 0;
       $690 = $3;
       $691 = ((($690)) + 20|0);
       HEAP32[$691>>2] = 2;
       $692 = $3;
       $693 = ((($692)) + 24|0);
       $694 = ((($693)) + 4|0);
       HEAP32[$694>>2] = 1;
       $695 = $3;
       $696 = ((($695)) + 200|0);
       HEAP32[$696>>2] = 16777216;
       $697 = $3;
       $698 = ((($697)) + 212|0);
       HEAP32[$698>>2] = 5000;
       break L5;
       break;
      }
      case 27764:  {
       $699 = HEAP32[(2956)>>2]|0;
       $700 = $3;
       $701 = ((($700)) + 448|0);
       HEAP32[$701>>2] = $699;
       $702 = $3;
       $703 = ((($702)) + 8|0);
       HEAP32[$703>>2] = 2;
       $704 = $3;
       $705 = ((($704)) + 12|0);
       HEAP32[$705>>2] = 32;
       $706 = $3;
       $707 = ((($706)) + 16|0);
       HEAP32[$707>>2] = 0;
       $708 = $3;
       $709 = ((($708)) + 20|0);
       HEAP32[$709>>2] = 2;
       $710 = $3;
       $711 = ((($710)) + 24|0);
       $712 = ((($711)) + 4|0);
       HEAP32[$712>>2] = 1;
       $713 = $3;
       $714 = ((($713)) + 200|0);
       HEAP32[$714>>2] = 99336;
       $715 = $3;
       $716 = ((($715)) + 204|0);
       HEAP32[$716>>2] = 256;
       $717 = $3;
       $718 = ((($717)) + 212|0);
       HEAP32[$718>>2] = 5000;
       break L5;
       break;
      }
      case 27766:  {
       $719 = $3;
       __Z15SetupTranslatorP10TranslatorPKsPKh($719,10272,24783);
       $720 = $3;
       $721 = ((($720)) + 8|0);
       HEAP32[$721>>2] = 0;
       $722 = $3;
       $723 = ((($722)) + 269|0);
       HEAP8[$723>>0] = 1;
       $724 = HEAP32[(2956)>>2]|0;
       $725 = $3;
       $726 = ((($725)) + 448|0);
       HEAP32[$726>>2] = $724;
       $727 = $3;
       $728 = ((($727)) + 200|0);
       HEAP32[$728>>2] = 99336;
       $729 = $3;
       $730 = ((($729)) + 12|0);
       HEAP32[$730>>2] = 262166;
       break L5;
       break;
      }
      case 28011:  {
       $731 = $3;
       __Z15SetupTranslatorP10TranslatorPKsPKh($731,10288,24791);
       $732 = HEAP32[(2960)>>2]|0;
       $733 = $3;
       $734 = ((($733)) + 448|0);
       HEAP32[$734>>2] = $732;
       $735 = $3;
       $736 = ((($735)) + 724|0);
       $737 = ((($736)) + 28|0);
       HEAP32[$737>>2] = 4028;
       $738 = $3;
       $739 = ((($738)) + 724|0);
       HEAP32[$739>>2] = 4028;
       $740 = $3;
       $741 = ((($740)) + 720|0);
       HEAP32[$741>>2] = 1056;
       $742 = $3;
       $743 = ((($742)) + 8|0);
       HEAP32[$743>>2] = 4;
       $744 = $3;
       $745 = ((($744)) + 200|0);
       HEAP32[$745>>2] = 2114600;
       $746 = $3;
       $747 = ((($746)) + 204|0);
       HEAP32[$747>>2] = 138;
       break L5;
       break;
      }
      case 28020:  {
       $748 = HEAP32[(2952)>>2]|0;
       $749 = $3;
       $750 = ((($749)) + 448|0);
       HEAP32[$750>>2] = $748;
       $751 = $3;
       $752 = ((($751)) + 24|0);
       $753 = ((($752)) + 16|0);
       HEAP32[$753>>2] = 256;
       $754 = $3;
       $755 = ((($754)) + 8|0);
       HEAP32[$755>>2] = 2;
       $756 = $3;
       $757 = ((($756)) + 200|0);
       HEAP32[$757>>2] = 1;
       break L5;
       break;
      }
      case 28268:  {
       $758 = $3;
       $759 = ((($758)) + 8|0);
       HEAP32[$759>>2] = 0;
       $760 = $3;
       $761 = ((($760)) + 4|0);
       HEAP32[$761>>2] = 48;
       $762 = $3;
       $763 = ((($762)) + 24|0);
       $764 = ((($763)) + 4|0);
       HEAP32[$764>>2] = 1;
       $765 = $3;
       $766 = ((($765)) + 24|0);
       $767 = ((($766)) + 12|0);
       HEAP32[$767>>2] = 1;
       $768 = $3;
       $769 = ((($768)) + 24|0);
       $770 = ((($769)) + 16|0);
       HEAP32[$770>>2] = 256;
       $771 = $3;
       __ZL14SetLetterVowelP10Translatori($771,121);
       $772 = $3;
       $773 = ((($772)) + 200|0);
       HEAP32[$773>>2] = 2169880;
       $774 = $3;
       $775 = ((($774)) + 232|0);
       HEAP32[$775>>2] = 24799;
       $776 = $3;
       $777 = ((($776)) + 12|0);
       HEAP32[$777>>2] = 128;
       $778 = $3;
       $779 = ((($778)) + 424|0);
       ;HEAP16[$779>>1]=HEAP16[10304>>1]|0;HEAP16[$779+2>>1]=HEAP16[10304+2>>1]|0;HEAP16[$779+4>>1]=HEAP16[10304+4>>1]|0;HEAP16[$779+6>>1]=HEAP16[10304+6>>1]|0;HEAP16[$779+8>>1]=HEAP16[10304+8>>1]|0;HEAP16[$779+10>>1]=HEAP16[10304+10>>1]|0;HEAP16[$779+12>>1]=HEAP16[10304+12>>1]|0;HEAP16[$779+14>>1]=HEAP16[10304+14>>1]|0;
       break L5;
       break;
      }
      case 28271:  {
       $780 = $3;
       __Z15SetupTranslatorP10TranslatorPKsPKh($780,10320,0);
       $781 = $3;
       $782 = ((($781)) + 8|0);
       HEAP32[$782>>2] = 0;
       $783 = $3;
       __ZL14SetLetterVowelP10Translatori($783,121);
       $784 = $3;
       $785 = ((($784)) + 200|0);
       HEAP32[$785>>2] = 71752;
       break L5;
       break;
      }
      case 28525:  {
       $786 = $3;
       __Z15SetupTranslatorP10TranslatorPKsPKh($786,10336,24801);
       $787 = $3;
       $788 = ((($787)) + 8|0);
       HEAP32[$788>>2] = 2;
       $789 = $3;
       $790 = ((($789)) + 12|0);
       HEAP32[$790>>2] = 524310;
       break L5;
       break;
      }
      case 28780:  {
       $791 = $3;
       __Z15SetupTranslatorP10TranslatorPKsPKh($791,10352,24809);
       $792 = HEAP32[(2948)>>2]|0;
       $793 = $3;
       $794 = ((($793)) + 448|0);
       HEAP32[$794>>2] = $792;
       $795 = $3;
       $796 = ((($795)) + 8|0);
       HEAP32[$796>>2] = 2;
       $797 = $3;
       $798 = ((($797)) + 12|0);
       HEAP32[$798>>2] = 6;
       $799 = $3;
       $800 = ((($799)) + 24|0);
       $801 = ((($800)) + 16|0);
       HEAP32[$801>>2] = 9;
       $802 = $3;
       $803 = ((($802)) + 268|0);
       HEAP8[$803>>0] = 7;
       $804 = $3;
       $805 = ((($804)) + 200|0);
       HEAP32[$805>>2] = 20488;
       $806 = $3;
       $807 = ((($806)) + 204|0);
       HEAP32[$807>>2] = 192;
       $808 = $3;
       $809 = ((($808)) + 24|0);
       $810 = ((($809)) + 44|0);
       HEAP32[$810>>2] = 260;
       $811 = $3;
       __ZL14SetLetterVowelP10Translatori($811,121);
       break L5;
       break;
      }
      case 28788:  {
       $812 = $3;
       __Z15SetupTranslatorP10TranslatorPKsPKh($812,10368,24817);
       $813 = $3;
       $814 = ((($813)) + 192|0);
       $815 = HEAP32[$814>>2]|0;
       $816 = $3;
       $817 = ((($816)) + 196|0);
       HEAP32[$817>>2] = $815;
       $818 = $3;
       $819 = ((($818)) + 8|0);
       HEAP32[$819>>2] = 3;
       $820 = $3;
       $821 = ((($820)) + 12|0);
       HEAP32[$821>>2] = 139286;
       $822 = $3;
       $823 = ((($822)) + 200|0);
       HEAP32[$823>>2] = 33570920;
       $824 = $3;
       $825 = ((($824)) + 204|0);
       HEAP32[$825>>2] = 14336;
       $826 = $3;
       $827 = ((($826)) + 212|0);
       HEAP32[$827>>2] = 5000;
       $828 = $3;
       __ZL14SetLetterVowelP10Translatori($828,121);
       $829 = $3;
       __ZL15ResetLetterBitsP10Translatori($829,2);
       $830 = $3;
       __ZL13SetLetterBitsP10TranslatoriPKc($830,1,24825);
       $831 = $3;
       $832 = ((($831)) + 24|0);
       $833 = ((($832)) + 60|0);
       HEAP32[$833>>2] = 2;
       $834 = $3;
       $835 = ((($834)) + 240|0);
       HEAP32[$835>>2] = 2;
       break L5;
       break;
      }
      case 29295:  {
       $836 = $3;
       __Z15SetupTranslatorP10TranslatorPKsPKh($836,10384,24842);
       $837 = $3;
       $838 = ((($837)) + 8|0);
       HEAP32[$838>>2] = 3;
       $839 = $3;
       $840 = ((($839)) + 12|0);
       HEAP32[$840>>2] = 262;
       $841 = HEAP32[(2948)>>2]|0;
       $842 = $3;
       $843 = ((($842)) + 448|0);
       HEAP32[$843>>2] = $841;
       $844 = $3;
       $845 = ((($844)) + 200|0);
       HEAP32[$845>>2] = 16805928;
       $846 = $3;
       $847 = ((($846)) + 204|0);
       HEAP32[$847>>2] = 30;
       break L5;
       break;
      }
      case 29301:  {
       $848 = $3;
       __ZL18Translator_RussianP10Translator($848);
       break L5;
       break;
      }
      case 29303:  {
       $849 = $3;
       $850 = ((($849)) + 8|0);
       HEAP32[$850>>2] = 2;
       $851 = $3;
       $852 = ((($851)) + 12|0);
       HEAP32[$852>>2] = 22;
       $853 = $3;
       $854 = ((($853)) + 192|0);
       $855 = HEAP32[$854>>2]|0;
       $856 = $3;
       $857 = ((($856)) + 196|0);
       HEAP32[$857>>2] = $855;
       $858 = $3;
       $859 = ((($858)) + 24|0);
       $860 = ((($859)) + 20|0);
       HEAP32[$860>>2] = 1;
       $861 = $3;
       $862 = ((($861)) + 200|0);
       HEAP32[$862>>2] = 278624;
       $863 = $3;
       $864 = ((($863)) + 204|0);
       HEAP32[$864>>2] = 512;
       break L5;
       break;
      }
      default: {
       label = 102;
       break L5;
      }
      }
     } while(0);
    } else {
     $switch$split62D = ($12|0)<(29812);
     if ($switch$split62D) {
      switch ($12|0) {
      case 29797: case 29793:  {
       label = 80;
       break L5;
       break;
      }
      case 29554:  {
       label = 43;
       break L5;
       break;
      }
      case 29547:  {
       label = 72;
       break L5;
       break;
      }
      case 29810:  {
       label = 91;
       break L5;
       break;
      }
      case 29545:  {
       $900 = $3;
       __Z15SetupTranslatorP10TranslatorPKsPKh($900,9948,24273);
       $901 = $3;
       $902 = ((($901)) + 192|0);
       $903 = HEAP32[$902>>2]|0;
       $904 = $3;
       $905 = ((($904)) + 196|0);
       HEAP32[$905>>2] = $903;
       $906 = $3;
       $907 = ((($906)) + 8|0);
       HEAP32[$907>>2] = 0;
       $908 = $3;
       $909 = ((($908)) + 12|0);
       HEAP32[$909>>2] = 22;
       $910 = $3;
       $911 = ((($910)) + 269|0);
       HEAP8[$911>>0] = 1;
       $912 = $3;
       $913 = ((($912)) + 720|0);
       HEAP32[$913>>2] = 3456;
       $914 = $3;
       $915 = ((($914)) + 464|0);
       _memset(($915|0),0,256)|0;
       $916 = $3;
       __ZL18SetLetterBitsRangeP10Translatoriii($916,0,5,22);
       $917 = $3;
       __ZL18SetLetterBitsRangeP10Translatoriii($917,0,74,115);
       $918 = $3;
       __ZL18SetLetterBitsRangeP10Translatoriii($918,1,74,115);
       $919 = $3;
       __ZL18SetLetterBitsRangeP10Translatoriii($919,2,26,70);
       $920 = $3;
       $921 = ((($920)) + 24|0);
       $922 = ((($921)) + 20|0);
       HEAP32[$922>>2] = 1;
       $923 = $3;
       $924 = ((($923)) + 720|0);
       $925 = HEAP32[$924>>2]|0;
       $926 = (($925) + 74)|0;
       $927 = $3;
       $928 = ((($927)) + 316|0);
       HEAP32[$928>>2] = $926;
       $929 = $3;
       $930 = ((($929)) + 200|0);
       HEAP32[$930>>2] = 270589952;
       $931 = $3;
       $932 = ((($931)) + 204|0);
       HEAP32[$932>>2] = 65536;
       $933 = $3;
       $934 = ((($933)) + 208|0);
       HEAP32[$934>>2] = 84648;
       break L5;
       break;
      }
      case 29548:  {
       $935 = HEAP32[(2948)>>2]|0;
       $936 = $3;
       $937 = ((($936)) + 448|0);
       HEAP32[$937>>2] = $935;
       $938 = $3;
       $939 = ((($938)) + 8|0);
       HEAP32[$939>>2] = 2;
       $940 = $3;
       $941 = ((($940)) + 12|0);
       HEAP32[$941>>2] = 32;
       $942 = $3;
       $943 = ((($942)) + 24|0);
       $944 = ((($943)) + 16|0);
       HEAP32[$944>>2] = 259;
       $945 = $3;
       $946 = ((($945)) + 24|0);
       $947 = ((($946)) + 20|0);
       HEAP32[$947>>2] = 118;
       $948 = $3;
       $949 = ((($948)) + 24|0);
       $950 = ((($949)) + 60|0);
       HEAP32[$950>>2] = 2;
       $951 = $3;
       $952 = ((($951)) + 24|0);
       $953 = ((($952)) + 8|0);
       HEAP32[$953>>2] = 1;
       $954 = $3;
       $955 = ((($954)) + 464|0);
       $956 = ((($955)) + 114|0);
       $957 = HEAP8[$956>>0]|0;
       $958 = $957&255;
       $959 = $958 | 128;
       $960 = $959&255;
       HEAP8[$956>>0] = $960;
       $961 = $3;
       $962 = ((($961)) + 200|0);
       HEAP32[$962>>2] = 16864280;
       $963 = $3;
       $964 = ((($963)) + 204|0);
       HEAP32[$964>>2] = 256;
       $965 = $3;
       $966 = ((($965)) + 220|0);
       HEAP32[$966>>2] = 32;
       $967 = $3;
       $968 = ((($967)) + 284|0);
       HEAP32[$968>>2] = 3704;
       break L5;
       break;
      }
      case 29553:  {
       $969 = $3;
       __Z15SetupTranslatorP10TranslatorPKsPKh($969,10416,24858);
       $970 = $3;
       $971 = ((($970)) + 8|0);
       HEAP32[$971>>2] = 3;
       $972 = $3;
       $973 = ((($972)) + 12|0);
       HEAP32[$973>>2] = 278;
       $974 = $3;
       __ZL14SetLetterVowelP10Translatori($974,121);
       $975 = $3;
       $976 = ((($975)) + 200|0);
       HEAP32[$976>>2] = 32872;
       $977 = $3;
       $978 = ((($977)) + 240|0);
       HEAP32[$978>>2] = 2;
       break L5;
       break;
      }
      case 29558:  {
       $979 = $3;
       __Z15SetupTranslatorP10TranslatorPKsPKh($979,10432,24866);
       $980 = $3;
       $981 = ((($980)) + 8|0);
       HEAP32[$981>>2] = 0;
       $982 = $3;
       __ZL14SetLetterVowelP10Translatori($982,121);
       $983 = $3;
       $984 = ((($983)) + 200|0);
       HEAP32[$984>>2] = 6408;
       $985 = $3;
       $986 = ((($985)) + 240|0);
       HEAP32[$986>>2] = 1;
       break L5;
       break;
      }
      case 29806: case 29559:  {
       $987 = $3;
       __Z15SetupTranslatorP10TranslatorPKsPKh($987,10448,24874);
       $988 = $3;
       $989 = ((($988)) + 192|0);
       $990 = HEAP32[$989>>2]|0;
       $991 = $3;
       $992 = ((($991)) + 196|0);
       HEAP32[$992>>2] = $990;
       $993 = $3;
       $994 = ((($993)) + 4|0);
       HEAP32[$994>>2] = 1;
       $995 = $3;
       $996 = ((($995)) + 8|0);
       HEAP32[$996>>2] = 2;
       $997 = $3;
       $998 = ((($997)) + 12|0);
       HEAP32[$998>>2] = 22;
       $999 = $3;
       $1000 = ((($999)) + 268|0);
       HEAP8[$1000>>0] = 4;
       $1001 = $3;
       $1002 = ((($1001)) + 200|0);
       HEAP32[$1002>>2] = 1248;
       $1003 = $3;
       $1004 = ((($1003)) + 208|0);
       HEAP32[$1004>>2] = 1227133544;
       break L5;
       break;
      }
      default: {
       label = 102;
       break L5;
      }
      }
     }
     $switch$split92D = ($12|0)<(31336);
     if ($switch$split92D) {
      switch ($12|0) {
      case 30066:  {
       break L35;
       break;
      }
      case 29812:  {
       $1081 = $3;
       __ZL18SetCyrillicLettersP10Translator($1081);
       $1082 = $3;
       __Z15SetupTranslatorP10TranslatorPKsPKh($1082,9868,24238);
       $1083 = $3;
       $1084 = ((($1083)) + 8|0);
       HEAP32[$1084>>2] = 3;
       $1085 = $3;
       $1086 = ((($1085)) + 12|0);
       HEAP32[$1086>>2] = 32;
       $1087 = $3;
       $1088 = ((($1087)) + 200|0);
       HEAP32[$1088>>2] = 2131208;
       break L5;
       break;
      }
      case 30059:  {
       $1089 = $3;
       __ZL18SetCyrillicLettersP10Translator($1089);
       $1090 = $3;
       $1091 = ((($1090)) + 24|0);
       $1092 = ((($1091)) + 20|0);
       HEAP32[$1092>>2] = 1074;
       break L5;
       break;
      }
      case 30313:  {
       $1102 = $3;
       __Z15SetupTranslatorP10TranslatorPKsPKh($1102,10512,24890);
       $1103 = $3;
       $1104 = ((($1103)) + 192|0);
       $1105 = HEAP32[$1104>>2]|0;
       $1106 = $3;
       $1107 = ((($1106)) + 196|0);
       HEAP32[$1107>>2] = $1105;
       $1108 = $3;
       $1109 = ((($1108)) + 8|0);
       HEAP32[$1109>>2] = 0;
       $1110 = $3;
       HEAP32[$1110>>2] = 33;
       $1111 = $3;
       $1112 = ((($1111)) + 724|0);
       $1113 = ((($1112)) + 28|0);
       HEAP32[$1113>>2] = 4104;
       $1114 = $3;
       $1115 = ((($1114)) + 724|0);
       HEAP32[$1115>>2] = 4104;
       $1116 = $3;
       $1117 = ((($1116)) + 244|0);
       HEAP32[$1117>>2] = 1;
       $1118 = $3;
       $1119 = ((($1118)) + 16|0);
       HEAP32[$1119>>2] = 2;
       $1120 = $3;
       $1121 = ((($1120)) + 200|0);
       HEAP32[$1121>>2] = 12615688;
       break L5;
       break;
      }
      case 30575:  {
       $1122 = $3;
       $1123 = ((($1122)) + 8|0);
       HEAP32[$1123>>2] = 0;
       $1124 = $3;
       $1125 = ((($1124)) + 200|0);
       HEAP32[$1125>>2] = 2098528;
       break L5;
       break;
      }
      default: {
       label = 102;
       break L5;
      }
      }
     }
     $switch$split122D = ($12|0)<(7171689);
     L70: do {
      if ($switch$split122D) {
       $switch$split152D = ($12|0)<(6779491);
       if ($switch$split152D) {
        switch ($12|0) {
        case 31336:  {
         break L70;
         break;
        }
        default: {
         label = 102;
         break L5;
        }
        }
       }
       $switch$split212D = ($12|0)<(6972015);
       if ($switch$split212D) {
        switch ($12|0) {
        case 6779491:  {
         label = 16;
         break L5;
         break;
        }
        default: {
         label = 102;
         break L5;
        }
        }
       }
       switch ($12|0) {
       case 6972015:  {
        break;
       }
       default: {
        label = 102;
        break L5;
       }
       }
       $587 = $3;
       __Z15SetupTranslatorP10TranslatorPKsPKh($587,10224,0);
       $588 = $3;
       $589 = ((($588)) + 8|0);
       HEAP32[$589>>2] = 2;
       $590 = $3;
       $591 = ((($590)) + 4|0);
       HEAP32[$591>>2] = 524;
       $592 = $3;
       $593 = ((($592)) + 456|0);
       HEAP32[$593>>2] = 4008;
       $594 = $3;
       $595 = ((($594)) + 24|0);
       $596 = ((($595)) + 52|0);
       HEAP32[$596>>2] = 2;
       $597 = $3;
       __ZL14SetLetterVowelP10Translatori($597,121);
       $598 = $3;
       $599 = ((($598)) + 308|0);
       HEAP32[$599>>2] = 368;
       break L5;
      } else {
       $switch$split182D = ($12|0)<(7364976);
       if ($switch$split182D) {
        switch ($12|0) {
        case 7171689:  {
         label = 9;
         break L5;
         break;
        }
        default: {
         label = 102;
         break L5;
        }
        }
       }
       $switch$split242D = ($12|0)<(8022137);
       if ($switch$split242D) {
        switch ($12|0) {
        case 7364976:  {
         label = 19;
         break L5;
         break;
        }
        default: {
         label = 102;
         break L5;
        }
        }
       } else {
        switch ($12|0) {
        case 8022137:  {
         break L70;
         break;
        }
        default: {
         label = 102;
         break L5;
        }
        }
       }
      }
     } while(0);
     $1126 = $3;
     __Z15SetupTranslatorP10TranslatorPKsPKh($1126,10528,24898);
     $1127 = $3;
     $1128 = ((($1127)) + 8|0);
     HEAP32[$1128>>2] = 3;
     $1129 = $3;
     $1130 = ((($1129)) + 12|0);
     HEAP32[$1130>>2] = 2;
     $1131 = $3;
     $1132 = ((($1131)) + 4|0);
     HEAP32[$1132>>2] = 0;
     $1133 = $3;
     $1134 = ((($1133)) + 244|0);
     HEAP32[$1134>>2] = 1;
     $1135 = $3;
     $1136 = ((($1135)) + 192|0);
     $1137 = HEAP32[$1136>>2]|0;
     $1138 = $3;
     $1139 = ((($1138)) + 196|0);
     HEAP32[$1139>>2] = $1137;
     $1140 = $3;
     $1141 = ((($1140)) + 270|0);
     HEAP8[$1141>>0] = 1;
     $1142 = $3;
     $1143 = ((($1142)) + 271|0);
     HEAP8[$1143>>0] = 1;
     $1144 = $3;
     $1145 = ((($1144)) + 296|0);
     HEAP32[$1145>>2] = 12544;
     $1146 = $3;
     HEAP32[$1146>>2] = 33;
     $1147 = $2;
     $1148 = ($1147|0)==(31336);
     if (!($1148)) {
      break L5;
     }
     $1149 = $3;
     $1150 = ((($1149)) + 272|0);
     HEAP8[$1150>>0] = 1;
     $1151 = $3;
     $1152 = ((($1151)) + 280|0);
     HEAP32[$1152>>2] = 1;
     break L5;
    }
   } while(0);
   $1093 = $3;
   $1094 = ((($1093)) + 720|0);
   HEAP32[$1094>>2] = 1536;
   $1095 = $3;
   $1096 = ((($1095)) + 24|0);
   $1097 = ((($1096)) + 20|0);
   HEAP32[$1097>>2] = 1;
   $1098 = $3;
   $1099 = ((($1098)) + 200|0);
   HEAP32[$1099>>2] = 16;
   $1100 = $3;
   $1101 = ((($1100)) + 208|0);
   HEAP32[$1101>>2] = 21160;
  }
 } while(0);
 switch (label|0) {
  case 9: {
   $85 = $3;
   __Z15SetupTranslatorP10TranslatorPKsPKh($85,9884,24246);
   $86 = $3;
   $87 = ((($86)) + 192|0);
   $88 = HEAP32[$87>>2]|0;
   $89 = $3;
   $90 = ((($89)) + 196|0);
   HEAP32[$90>>2] = $88;
   $91 = $3;
   $92 = ((($91)) + 8|0);
   HEAP32[$92>>2] = 0;
   $93 = $3;
   $94 = ((($93)) + 12|0);
   HEAP32[$94>>2] = 65540;
   $95 = $3;
   $96 = ((($95)) + 720|0);
   HEAP32[$96>>2] = 2432;
   $97 = $3;
   __Z15SetIndicLettersP10Translator($97);
   $98 = $3;
   __ZL18SetLetterBitsRangeP10Translatoriii($98,1,1,1);
   $99 = $3;
   __ZL18SetLetterBitsRangeP10Translatoriii($99,4,62,76);
   $100 = $3;
   __ZL13SetLetterBitsP10TranslatoriPKc($100,2,24254);
   $101 = $3;
   $102 = ((($101)) + 200|0);
   HEAP32[$102>>2] = 16;
   $103 = $3;
   $104 = ((($103)) + 208|0);
   HEAP32[$104>>2] = 613567144;
   break;
  }
  case 16: {
   $203 = $3;
   __Z15SetupTranslatorP10TranslatorPKsPKh($203,9980,24288);
   $204 = HEAP32[(2968)>>2]|0;
   $205 = $3;
   $206 = ((($205)) + 448|0);
   HEAP32[$206>>2] = $204;
   $207 = $3;
   $208 = ((($207)) + 452|0);
   HEAP32[$208>>2] = 3676;
   $209 = $3;
   $210 = ((($209)) + 720|0);
   HEAP32[$210>>2] = 896;
   $211 = $3;
   $212 = ((($211)) + 464|0);
   _memset(($212|0),0,256)|0;
   $213 = $3;
   __ZL13SetLetterBitsP10TranslatoriPKc($213,0,24296);
   $214 = $3;
   __ZL13SetLetterBitsP10TranslatoriPKc($214,7,24296);
   $215 = $3;
   __ZL13SetLetterBitsP10TranslatoriPKc($215,1,24316);
   $216 = $3;
   __ZL13SetLetterBitsP10TranslatoriPKc($216,2,24326);
   $217 = $3;
   __ZL13SetLetterBitsP10TranslatoriPKc($217,6,24345);
   $218 = $3;
   $219 = ((($218)) + 192|0);
   $220 = HEAP32[$219>>2]|0;
   $221 = $3;
   $222 = ((($221)) + 196|0);
   HEAP32[$222>>2] = $220;
   $223 = $3;
   $224 = ((($223)) + 8|0);
   HEAP32[$224>>2] = 2;
   $225 = $3;
   $226 = ((($225)) + 12|0);
   HEAP32[$226>>2] = 6;
   $227 = $3;
   $228 = ((($227)) + 16|0);
   HEAP32[$228>>2] = 0;
   $229 = $3;
   $230 = ((($229)) + 20|0);
   HEAP32[$230>>2] = 2;
   $231 = $3;
   $232 = ((($231)) + 24|0);
   $233 = ((($232)) + 28|0);
   HEAP32[$233>>2] = 130;
   $234 = $3;
   $235 = ((($234)) + 200|0);
   HEAP32[$235>>2] = 264;
   $236 = $3;
   $237 = ((($236)) + 204|0);
   HEAP32[$237>>2] = 6146;
   $238 = $2;
   $239 = ($238|0)==(6779491);
   if ($239) {
    $240 = $3;
    $241 = ((($240)) + 24|0);
    $242 = ((($241)) + 20|0);
    HEAP32[$242>>2] = 1;
   }
   break;
  }
  case 19: {
   $259 = $3;
   __Z15SetupTranslatorP10TranslatorPKsPKh($259,10012,24362);
   $260 = $3;
   $261 = ((($260)) + 192|0);
   $262 = HEAP32[$261>>2]|0;
   $263 = $3;
   $264 = ((($263)) + 196|0);
   HEAP32[$264>>2] = $262;
   $265 = $3;
   $266 = ((($265)) + 8|0);
   HEAP32[$266>>2] = 2;
   $267 = $3;
   $268 = ((($267)) + 12|0);
   HEAP32[$268>>2] = 534;
   $269 = $3;
   $270 = ((($269)) + 16|0);
   HEAP32[$270>>2] = 0;
   $271 = $3;
   $272 = ((($271)) + 20|0);
   HEAP32[$272>>2] = 2;
   $273 = $3;
   $274 = ((($273)) + 24|0);
   $275 = ((($274)) + 28|0);
   HEAP32[$275>>2] = 120;
   $276 = $3;
   $277 = ((($276)) + 200|0);
   HEAP32[$277>>2] = 85984552;
   $278 = $3;
   $279 = ((($278)) + 204|0);
   HEAP32[$279>>2] = 6144;
   $280 = $2;
   $281 = ($280|0)==(25441);
   if ($281) {
    $282 = $3;
    $283 = ((($282)) + 456|0);
    HEAP32[$283>>2] = 3692;
    $284 = $3;
    $285 = ((($284)) + 12|0);
    HEAP32[$285>>2] = 566;
    break;
   }
   $286 = $2;
   $287 = ($286|0)==(26977);
   if ($287) {
    $288 = $3;
    $289 = ((($288)) + 12|0);
    HEAP32[$289>>2] = 534;
    $290 = $3;
    $291 = ((($290)) + 200|0);
    HEAP32[$291>>2] = 85984264;
    break;
   }
   $292 = $2;
   $293 = ($292|0)==(24942);
   if ($293) {
    $294 = $3;
    $295 = ((($294)) + 12|0);
    HEAP32[$295>>2] = 534;
    $296 = $3;
    $297 = ((($296)) + 200|0);
    HEAP32[$297>>2] = 153093416;
    $298 = $3;
    $299 = ((($298)) + 204|0);
    HEAP32[$299>>2] = 2048;
    $300 = $3;
    $301 = ((($300)) + 236|0);
    HEAP32[$301>>2] = 24370;
    break;
   }
   $302 = $2;
   $303 = ($302|0)==(7364976);
   $304 = $3;
   if ($303) {
    $305 = ((($304)) + 8|0);
    HEAP32[$305>>2] = 3;
    $306 = $3;
    $307 = ((($306)) + 12|0);
    HEAP32[$307>>2] = 310;
    break;
   } else {
    $308 = ((($304)) + 24|0);
    $309 = ((($308)) + 20|0);
    HEAP32[$309>>2] = 2;
    break;
   }
   break;
  }
  case 34: {
   $387 = $3;
   __Z15SetupTranslatorP10TranslatorPKsPKh($387,10080,24562);
   $388 = HEAP32[(3016)>>2]|0;
   $389 = $3;
   $390 = ((($389)) + 448|0);
   HEAP32[$390>>2] = $388;
   $391 = $3;
   $392 = ((($391)) + 192|0);
   $393 = HEAP32[$392>>2]|0;
   $394 = $3;
   $395 = ((($394)) + 196|0);
   HEAP32[$395>>2] = $393;
   $396 = $3;
   $397 = ((($396)) + 8|0);
   HEAP32[$397>>2] = 6;
   $398 = $3;
   $399 = ((($398)) + 12|0);
   HEAP32[$399>>2] = 65540;
   $400 = $3;
   $401 = ((($400)) + 200|0);
   HEAP32[$401>>2] = 16;
   $402 = $3;
   $403 = ((($402)) + 208|0);
   HEAP32[$403>>2] = 84648;
   $404 = $3;
   $405 = ((($404)) + 720|0);
   HEAP32[$405>>2] = 2304;
   $406 = $2;
   $407 = ($406|0)==(28769);
   do {
    if ($407) {
     $408 = $3;
     $409 = ((($408)) + 720|0);
     HEAP32[$409>>2] = 2560;
    } else {
     $410 = $2;
     $411 = ($410|0)==(26485);
     if ($411) {
      $412 = $3;
      __Z15SetupTranslatorP10TranslatorPKsPKh($412,10096,24570);
      $413 = $3;
      $414 = ((($413)) + 720|0);
      HEAP32[$414>>2] = 2688;
      $415 = $3;
      $416 = ((($415)) + 8|0);
      HEAP32[$416>>2] = 2;
      break;
     }
     $417 = $2;
     $418 = ($417|0)==(28261);
     if ($418) {
      $419 = $3;
      __Z15SetupTranslatorP10TranslatorPKsPKh($419,10096,24570);
      $420 = $3;
      $421 = ((($420)) + 208|0);
      HEAP32[$421>>2] = 2796200;
      $422 = $3;
      $423 = ((($422)) + 228|0);
      HEAP32[$423>>2] = 22;
      $424 = $3;
      $425 = ((($424)) + 204|0);
      $426 = HEAP32[$425>>2]|0;
      $427 = $426 | 32768;
      HEAP32[$425>>2] = $427;
      break;
     }
     $428 = $2;
     $429 = ($428|0)==(28530);
     if ($429) {
      $430 = $3;
      $431 = ((($430)) + 720|0);
      HEAP32[$431>>2] = 2816;
     }
    }
   } while(0);
   $432 = $3;
   __Z15SetIndicLettersP10Translator($432);
   break;
  }
  case 43: {
   $433 = $3;
   $434 = ((($433)) + 340|0);
   (_strcpy($434,24578)|0);
   $435 = $2;
   $436 = ($435|0)==(29554);
   $437 = $3;
   if ($436) {
    __Z15SetupTranslatorP10TranslatorPKsPKh($437,10112,24582);
   } else {
    __Z15SetupTranslatorP10TranslatorPKsPKh($437,10128,24582);
   }
   $438 = HEAP32[(2948)>>2]|0;
   $439 = $3;
   $440 = ((($439)) + 448|0);
   HEAP32[$440>>2] = $438;
   $441 = $3;
   $442 = ((($441)) + 8|0);
   HEAP32[$442>>2] = 0;
   $443 = $3;
   $444 = ((($443)) + 12|0);
   HEAP32[$444>>2] = 16;
   $445 = $3;
   $446 = ((($445)) + 24|0);
   $447 = ((($446)) + 16|0);
   HEAP32[$447>>2] = 3;
   $448 = $3;
   $449 = ((($448)) + 268|0);
   HEAP8[$449>>0] = 5;
   $450 = $3;
   $451 = ((($450)) + 269|0);
   HEAP8[$451>>0] = 1;
   $452 = $3;
   $453 = ((($452)) + 240|0);
   HEAP32[$453>>2] = 1;
   $454 = $3;
   $455 = ((($454)) + 200|0);
   HEAP32[$455>>2] = 33572172;
   $456 = $3;
   $457 = ((($456)) + 204|0);
   HEAP32[$457>>2] = 330;
   $458 = $3;
   $459 = ((($458)) + 284|0);
   HEAP32[$459>>2] = 3704;
   $460 = $3;
   $461 = ((($460)) + 296|0);
   HEAP32[$461>>2] = 1056;
   $462 = $3;
   __ZL14SetLetterVowelP10Translatori($462,121);
   $463 = $3;
   __ZL14SetLetterVowelP10Translatori($463,114);
   break;
  }
  case 50: {
   $518 = $3;
   __Z15SetupTranslatorP10TranslatorPKsPKh($518,10176,24639);
   $519 = $3;
   $520 = ((($519)) + 8|0);
   HEAP32[$520>>2] = 2;
   $521 = $3;
   $522 = ((($521)) + 200|0);
   HEAP32[$522>>2] = 16781320;
   $523 = $3;
   $524 = ((($523)) + 12|0);
   HEAP32[$524>>2] = 22;
   $525 = $3;
   $526 = ((($525)) + 240|0);
   HEAP32[$526>>2] = 2;
   break;
  }
  case 72: {
   $865 = $3;
   __Z15SetupTranslatorP10TranslatorPKsPKh($865,10400,24850);
   $866 = HEAP32[(2948)>>2]|0;
   $867 = $3;
   $868 = ((($867)) + 448|0);
   HEAP32[$868>>2] = $866;
   $869 = $3;
   $870 = ((($869)) + 8|0);
   HEAP32[$870>>2] = 0;
   $871 = $3;
   $872 = ((($871)) + 12|0);
   HEAP32[$872>>2] = 22;
   $873 = $3;
   $874 = ((($873)) + 24|0);
   $875 = ((($874)) + 16|0);
   HEAP32[$875>>2] = 3;
   $876 = $3;
   $877 = ((($876)) + 268|0);
   HEAP8[$877>>0] = 5;
   $878 = $3;
   $879 = ((($878)) + 269|0);
   HEAP8[$879>>0] = 1;
   $880 = $3;
   $881 = ((($880)) + 24|0);
   $882 = ((($881)) + 44|0);
   HEAP32[$882>>2] = 4;
   $883 = $3;
   $884 = ((($883)) + 200|0);
   HEAP32[$884>>2] = 16794624;
   $885 = $3;
   $886 = ((($885)) + 204|0);
   HEAP32[$886>>2] = 128;
   $887 = $3;
   $888 = ((($887)) + 220|0);
   HEAP32[$888>>2] = 0;
   $889 = $3;
   $890 = ((($889)) + 224|0);
   HEAP32[$890>>2] = 44;
   $891 = $2;
   $892 = ($891|0)==(25459);
   if ($892) {
    $893 = $3;
    $894 = ((($893)) + 204|0);
    HEAP32[$894>>2] = 264;
   }
   $895 = $3;
   __ZL14SetLetterVowelP10Translatori($895,121);
   $896 = $3;
   __ZL14SetLetterVowelP10Translatori($896,114);
   $897 = $3;
   __ZL15ResetLetterBitsP10Translatori($897,32);
   $898 = $3;
   $899 = HEAP32[1025]|0;
   __ZL13SetLetterBitsP10TranslatoriPKc($898,5,$899);
   break;
  }
  case 80: {
   $1005 = $3;
   __Z15SetupTranslatorP10TranslatorPKsPKh($1005,10464,24273);
   $1006 = $3;
   $1007 = ((($1006)) + 192|0);
   $1008 = HEAP32[$1007>>2]|0;
   $1009 = $3;
   $1010 = ((($1009)) + 196|0);
   HEAP32[$1010>>2] = $1008;
   $1011 = $3;
   $1012 = ((($1011)) + 8|0);
   HEAP32[$1012>>2] = 0;
   $1013 = $3;
   $1014 = ((($1013)) + 12|0);
   HEAP32[$1014>>2] = 22;
   $1015 = $3;
   $1016 = ((($1015)) + 269|0);
   HEAP8[$1016>>0] = 1;
   $1017 = $3;
   $1018 = ((($1017)) + 208|0);
   HEAP32[$1018>>2] = 5288;
   $1019 = $2;
   $1020 = ($1019|0)==(29793);
   do {
    if ($1020) {
     $1021 = $3;
     __Z15SetupTranslatorP10TranslatorPKsPKh($1021,9948,0);
     $1022 = $3;
     $1023 = ((($1022)) + 720|0);
     HEAP32[$1023>>2] = 2944;
     $1024 = $3;
     $1025 = ((($1024)) + 200|0);
     HEAP32[$1025>>2] = 2097152;
     $1026 = $3;
     $1027 = ((($1026)) + 204|0);
     HEAP32[$1027>>2] = 262144;
     $1028 = $3;
     $1029 = ((($1028)) + 24|0);
     $1030 = ((($1029)) + 32|0);
     HEAP32[$1030>>2] = 1;
    } else {
     $1031 = $2;
     $1032 = ($1031|0)==(28018);
     if ($1032) {
      $1033 = $3;
      $1034 = ((($1033)) + 720|0);
      HEAP32[$1034>>2] = 2304;
      break;
     }
     $1035 = $2;
     $1036 = ($1035|0)==(28012);
     if ($1036) {
      $1037 = $3;
      __Z15SetupTranslatorP10TranslatorPKsPKh($1037,10480,24570);
      $1038 = $3;
      $1039 = ((($1038)) + 720|0);
      HEAP32[$1039>>2] = 3328;
      $1040 = $3;
      $1041 = ((($1040)) + 200|0);
      HEAP32[$1041>>2] = 2098176;
      $1042 = $3;
      $1043 = ((($1042)) + 204|0);
      HEAP32[$1043>>2] = 131072;
      $1044 = $3;
      $1045 = ((($1044)) + 8|0);
      HEAP32[$1045>>2] = 13;
      break;
     }
     $1046 = $2;
     $1047 = ($1046|0)==(27502);
     if ($1047) {
      $1048 = $3;
      $1049 = ((($1048)) + 720|0);
      HEAP32[$1049>>2] = 3200;
      $1050 = $3;
      $1051 = ((($1050)) + 200|0);
      HEAP32[$1051>>2] = 1;
      break;
     }
     $1052 = $2;
     $1053 = ($1052|0)==(29797);
     if ($1053) {
      $1054 = $3;
      $1055 = ((($1054)) + 720|0);
      HEAP32[$1055>>2] = 3072;
      $1056 = $3;
      $1057 = ((($1056)) + 200|0);
      HEAP32[$1057>>2] = 1;
      $1058 = $3;
      $1059 = ((($1058)) + 204|0);
      HEAP32[$1059>>2] = 524288;
     }
    }
   } while(0);
   $1060 = $3;
   __Z15SetIndicLettersP10Translator($1060);
   $1061 = $3;
   __ZL18SetLetterBitsRangeP10Translatoriii($1061,1,78,78);
   break;
  }
  case 91: {
   $1062 = $3;
   __Z15SetupTranslatorP10TranslatorPKsPKh($1062,10496,24882);
   $1063 = HEAP32[(2976)>>2]|0;
   $1064 = $3;
   $1065 = ((($1064)) + 448|0);
   HEAP32[$1065>>2] = $1063;
   $1066 = $3;
   $1067 = ((($1066)) + 8|0);
   HEAP32[$1067>>2] = 7;
   $1068 = $3;
   $1069 = ((($1068)) + 12|0);
   HEAP32[$1069>>2] = 32;
   $1070 = $3;
   $1071 = ((($1070)) + 273|0);
   HEAP8[$1071>>0] = 1;
   $1072 = $3;
   $1073 = ((($1072)) + 24|0);
   $1074 = ((($1073)) + 76|0);
   HEAP32[$1074>>2] = 1;
   $1075 = $2;
   $1076 = ($1075|0)==(24954);
   $1077 = $3;
   $1078 = ((($1077)) + 200|0);
   if ($1076) {
    HEAP32[$1078>>2] = 2118920;
   } else {
    HEAP32[$1078>>2] = 2114824;
   }
   $1079 = $3;
   $1080 = ((($1079)) + 268|0);
   HEAP8[$1080>>0] = 2;
   break;
  }
  case 102: {
   $1153 = $3;
   $1154 = ((($1153)) + 24|0);
   $1155 = ((($1154)) + 20|0);
   HEAP32[$1155>>2] = 1;
   break;
  }
 }
 $1156 = $2;
 $1157 = $3;
 $1158 = ((($1157)) + 324|0);
 HEAP32[$1158>>2] = $1156;
 $1159 = $3;
 __Z22ProcessLanguageOptionsP16LANGUAGE_OPTIONS($1159);
 $1160 = $3;
 STACKTOP = sp;return ($1160|0);
}
function __ZL13NewTranslatorv() {
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0;
 var $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0;
 var $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0;
 var $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = (__Z5Alloci(8364)|0);
 $1 = $3;
 $4 = $1;
 $5 = ($4|0)==(0|0);
 if ($5) {
  $0 = 0;
  $134 = $0;
  STACKTOP = sp;return ($134|0);
 }
 $6 = HEAP32[(2944)>>2]|0;
 $7 = $1;
 $8 = ((($7)) + 448|0);
 HEAP32[$8>>2] = $6;
 HEAP8[119724] = 0;
 $9 = $1;
 $10 = ((($9)) + 340|0);
 HEAP8[$10>>0] = 0;
 $11 = $1;
 $12 = ((($11)) + 440|0);
 HEAP32[$12>>2] = 0;
 $13 = $1;
 $14 = ((($13)) + 444|0);
 HEAP32[$14>>2] = 0;
 $15 = $1;
 $16 = ((($15)) + 804|0);
 HEAP32[$16>>2] = 0;
 $17 = $1;
 $18 = ((($17)) + 808|0);
 HEAP32[$18>>2] = 0;
 $19 = $1;
 $20 = ((($19)) + 332|0);
 HEAP32[$20>>2] = 96;
 $21 = $1;
 $22 = ((($21)) + 328|0);
 HEAP32[$22>>2] = 383;
 $23 = $1;
 $24 = ((($23)) + 336|0);
 HEAP32[$24>>2] = 24980;
 $25 = $1;
 $26 = ((($25)) + 8300|0);
 HEAP32[$26>>2] = 0;
 $27 = $1;
 $28 = ((($27)) + 720|0);
 HEAP32[$28>>2] = 0;
 $29 = $1;
 $30 = ((($29)) + 464|0);
 _memset(($30|0),0,256)|0;
 $31 = $1;
 $32 = ((($31)) + 724|0);
 ;HEAP32[$32>>2]=0|0;HEAP32[$32+4>>2]=0|0;HEAP32[$32+8>>2]=0|0;HEAP32[$32+12>>2]=0|0;HEAP32[$32+16>>2]=0|0;HEAP32[$32+20>>2]=0|0;HEAP32[$32+24>>2]=0|0;HEAP32[$32+28>>2]=0|0;
 $33 = $1;
 __ZL13SetLetterBitsP10TranslatoriPKc($33,0,25268);
 $34 = $1;
 __ZL13SetLetterBitsP10TranslatoriPKc($34,1,25274);
 $35 = $1;
 __ZL13SetLetterBitsP10TranslatoriPKc($35,2,25292);
 $36 = $1;
 __ZL13SetLetterBitsP10TranslatoriPKc($36,3,25313);
 $37 = $1;
 __ZL13SetLetterBitsP10TranslatoriPKc($37,4,25319);
 $38 = $1;
 __ZL13SetLetterBitsP10TranslatoriPKc($38,5,25329);
 $39 = $1;
 __ZL13SetLetterBitsP10TranslatoriPKc($39,6,25342);
 $40 = $1;
 __ZL13SetLetterBitsP10TranslatoriPKc($40,7,24281);
 $41 = $1;
 $42 = ((($41)) + 452|0);
 HEAP32[$42>>2] = 78048;
 $43 = $1;
 $44 = ((($43)) + 456|0);
 HEAP32[$44>>2] = 4396;
 $45 = $1;
 $46 = ((($45)) + 460|0);
 HEAP32[$46>>2] = 10620;
 $2 = 0;
 while(1) {
  $47 = $2;
  $48 = ($47|0)<(8);
  if (!($48)) {
   break;
  }
  $49 = $2;
  $50 = (25346 + ($49)|0);
  $51 = HEAP8[$50>>0]|0;
  $52 = $2;
  $53 = $1;
  $54 = ((($53)) + 408|0);
  $55 = (($54) + ($52)|0);
  HEAP8[$55>>0] = $51;
  $56 = $2;
  $57 = (25346 + ($56)|0);
  $58 = HEAP8[$57>>0]|0;
  $59 = $58&255;
  $60 = (($59) - 1)|0;
  $61 = $60&255;
  $62 = $2;
  $63 = $1;
  $64 = ((($63)) + 416|0);
  $65 = (($64) + ($62)|0);
  HEAP8[$65>>0] = $61;
  $66 = $2;
  $67 = (10636 + ($66<<1)|0);
  $68 = HEAP16[$67>>1]|0;
  $69 = $2;
  $70 = $1;
  $71 = ((($70)) + 424|0);
  $72 = (($71) + ($69<<1)|0);
  HEAP16[$72>>1] = $68;
  $73 = $2;
  $74 = (($73) + 1)|0;
  $2 = $74;
 }
 $75 = $1;
 _memset(($75|0),0,324)|0;
 $76 = $1;
 $77 = ((($76)) + 308|0);
 HEAP32[$77>>2] = 500;
 $78 = $1;
 $79 = ((($78)) + 312|0);
 HEAP32[$79>>2] = 20;
 $80 = $1;
 $81 = ((($80)) + 8|0);
 HEAP32[$81>>2] = 2;
 $82 = $1;
 $83 = ((($82)) + 16|0);
 HEAP32[$83>>2] = 1;
 $84 = $1;
 $85 = ((($84)) + 20|0);
 HEAP32[$85>>2] = 3;
 $86 = $1;
 $87 = ((($86)) + 24|0);
 $88 = ((($87)) + 28|0);
 HEAP32[$88>>2] = 95;
 $89 = $1;
 $90 = ((($89)) + 24|0);
 $91 = ((($90)) + 72|0);
 HEAP32[$91>>2] = 95;
 $92 = $1;
 $93 = ((($92)) + 24|0);
 $94 = ((($93)) + 36|0);
 HEAP32[$94>>2] = 19;
 $95 = $1;
 $96 = ((($95)) + 24|0);
 $97 = ((($96)) + 20|0);
 HEAP32[$97>>2] = 115;
 $98 = $1;
 $99 = ((($98)) + 24|0);
 $100 = ((($99)) + 64|0);
 HEAP32[$100>>2] = 4;
 $101 = $1;
 $102 = ((($101)) + 108|0);
 $103 = ((($102)) + 64|0);
 HEAP32[$103>>2] = 2;
 $104 = $1;
 $105 = ((($104)) + 268|0);
 HEAP8[$105>>0] = 3;
 $106 = $1;
 $107 = ((($106)) + 284|0);
 HEAP32[$107>>2] = 0;
 $108 = $1;
 $109 = ((($108)) + 288|0);
 HEAP8[$109>>0] = 0;
 $110 = $1;
 $111 = ((($110)) + 304|0);
 HEAP32[$111>>2] = 25966;
 $112 = $1;
 $113 = ((($112)) + 236|0);
 HEAP32[$113>>2] = 122378;
 $114 = $1;
 __Z13SetLengthModsP10Translatori($114,201);
 $115 = $1;
 $116 = ((($115)) + 260|0);
 HEAP32[$116>>2] = 100;
 $117 = $1;
 $118 = ((($117)) + 212|0);
 HEAP32[$118>>2] = 49;
 $119 = $1;
 $120 = ((($119)) + 216|0);
 HEAP32[$120>>2] = 2;
 $121 = $1;
 $122 = ((($121)) + 220|0);
 HEAP32[$122>>2] = 44;
 $123 = $1;
 $124 = ((($123)) + 224|0);
 HEAP32[$124>>2] = 46;
 $125 = $1;
 $126 = ((($125)) + 208|0);
 HEAP32[$126>>2] = 1227133512;
 $127 = $1;
 $128 = ((($127)) + 228|0);
 HEAP32[$128>>2] = 14;
 $129 = $1;
 $130 = ((($129)) + 756|0);
 dest=$130; src=20288; stop=dest+48|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
 $131 = $1;
 $132 = ((($131)) + 252|0);
 ;HEAP8[$132>>0]=HEAP8[25354>>0]|0;HEAP8[$132+1>>0]=HEAP8[25354+1>>0]|0;HEAP8[$132+2>>0]=HEAP8[25354+2>>0]|0;HEAP8[$132+3>>0]=HEAP8[25354+3>>0]|0;HEAP8[$132+4>>0]=HEAP8[25354+4>>0]|0;HEAP8[$132+5>>0]=HEAP8[25354+5>>0]|0;
 $133 = $1;
 $0 = $133;
 $134 = $0;
 STACKTOP = sp;return ($134|0);
}
function __ZL14SetLetterVowelP10Translatori($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $4 = $3;
 $5 = $2;
 $6 = ((($5)) + 464|0);
 $7 = (($6) + ($4)|0);
 $8 = HEAP8[$7>>0]|0;
 $9 = $8&255;
 $10 = $9 & 64;
 $11 = $10 | 129;
 $12 = $11&255;
 $13 = $3;
 $14 = $2;
 $15 = ((($14)) + 464|0);
 $16 = (($15) + ($13)|0);
 HEAP8[$16>>0] = $12;
 STACKTOP = sp;return;
}
function __ZL18SetCyrillicLettersP10Translator($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = HEAP32[(3012)>>2]|0;
 $3 = $1;
 $4 = ((($3)) + 448|0);
 HEAP32[$4>>2] = $2;
 $5 = $1;
 $6 = ((($5)) + 332|0);
 HEAP32[$6>>2] = 1072;
 $7 = $1;
 $8 = ((($7)) + 328|0);
 HEAP32[$8>>2] = 1105;
 $9 = $1;
 $10 = ((($9)) + 336|0);
 HEAP32[$10>>2] = 0;
 $11 = $1;
 $12 = ((($11)) + 8300|0);
 HEAP32[$12>>2] = 10560;
 $13 = $1;
 $14 = ((($13)) + 720|0);
 HEAP32[$14>>2] = 1056;
 $15 = $1;
 $16 = ((($15)) + 464|0);
 _memset(($16|0),0,256)|0;
 $17 = $1;
 __ZL13SetLetterBitsP10TranslatoriPKc($17,0,24706);
 $18 = $1;
 __ZL13SetLetterBitsP10TranslatoriPKc($18,1,24938);
 $19 = $1;
 __ZL13SetLetterBitsP10TranslatoriPKc($19,2,24722);
 $20 = $1;
 __ZL13SetLetterBitsP10TranslatoriPKc($20,3,24943);
 $21 = $1;
 __ZL13SetLetterBitsP10TranslatoriPKc($21,4,24948);
 $22 = $1;
 __ZL13SetLetterBitsP10TranslatoriPKc($22,5,24968);
 $23 = $1;
 __ZL13SetLetterBitsP10TranslatoriPKc($23,6,24975);
 $24 = $1;
 __ZL13SetLetterBitsP10TranslatoriPKc($24,7,24706);
 STACKTOP = sp;return;
}
function __ZL15ResetLetterBitsP10Translatori($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $6 = $3;
 $7 = $6 ^ -1;
 $5 = $7;
 $4 = 0;
 while(1) {
  $8 = $4;
  $9 = ($8>>>0)<(256);
  if (!($9)) {
   break;
  }
  $10 = $5;
  $11 = $4;
  $12 = $2;
  $13 = ((($12)) + 464|0);
  $14 = (($13) + ($11)|0);
  $15 = HEAP8[$14>>0]|0;
  $16 = $15&255;
  $17 = $16 & $10;
  $18 = $17&255;
  HEAP8[$14>>0] = $18;
  $19 = $4;
  $20 = (($19) + 1)|0;
  $4 = $20;
 }
 STACKTOP = sp;return;
}
function __ZL18Translator_RussianP10Translator($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 __Z15SetupTranslatorP10TranslatorPKsPKh($2,10544,24924);
 $3 = $1;
 __ZL18SetCyrillicLettersP10Translator($3);
 $4 = $1;
 __ZL13SetLetterBitsP10TranslatoriPKc($4,6,24932);
 $5 = $1;
 $6 = ((($5)) + 24|0);
 $7 = ((($6)) + 20|0);
 HEAP32[$7>>2] = 1074;
 $8 = $1;
 $9 = ((($8)) + 24|0);
 $10 = ((($9)) + 16|0);
 HEAP32[$10>>2] = 1;
 $11 = $1;
 $12 = ((($11)) + 24|0);
 $13 = ((($12)) + 40|0);
 HEAP32[$13>>2] = 2;
 $14 = $1;
 $15 = ((($14)) + 8|0);
 HEAP32[$15>>2] = 5;
 $16 = $1;
 $17 = ((($16)) + 12|0);
 HEAP32[$17>>2] = 32;
 $18 = $1;
 $19 = ((($18)) + 200|0);
 HEAP32[$19>>2] = 1032;
 $20 = $1;
 $21 = ((($20)) + 204|0);
 HEAP32[$21>>2] = 66;
 $22 = $1;
 $23 = ((($22)) + 264|0);
 HEAP32[$23>>2] = 1;
 $24 = $1;
 $25 = ((($24)) + 276|0);
 HEAP32[$25>>2] = 2;
 STACKTOP = sp;return;
}
function __Z22ProcessLanguageOptionsP16LANGUAGE_OPTIONS($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = ((($2)) + 200|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = $4 & 8;
 $6 = ($5|0)!=(0);
 if ($6) {
  $7 = $1;
  $8 = ((($7)) + 220|0);
  HEAP32[$8>>2] = 46;
  $9 = $1;
  $10 = ((($9)) + 224|0);
  HEAP32[$10>>2] = 44;
 }
 $11 = $1;
 $12 = ((($11)) + 200|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = $13 & 4;
 $15 = ($14|0)!=(0);
 if (!($15)) {
  STACKTOP = sp;return;
 }
 $16 = $1;
 $17 = ((($16)) + 220|0);
 HEAP32[$17>>2] = 0;
 STACKTOP = sp;return;
}
function __Z14ReadTonePointsPcPi($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr3 = 0, $vararg_ptr4 = 0, $vararg_ptr5 = 0, $vararg_ptr6 = 0, $vararg_ptr7 = 0, $vararg_ptr8 = 0, $vararg_ptr9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $vararg_buffer = sp;
 $2 = $0;
 $3 = $1;
 $4 = 0;
 while(1) {
  $5 = $4;
  $6 = ($5|0)<(12);
  if (!($6)) {
   break;
  }
  $7 = $4;
  $8 = $3;
  $9 = (($8) + ($7<<2)|0);
  HEAP32[$9>>2] = -1;
  $10 = $4;
  $11 = (($10) + 1)|0;
  $4 = $11;
 }
 $12 = $2;
 $13 = $3;
 $14 = $3;
 $15 = ((($14)) + 4|0);
 $16 = $3;
 $17 = ((($16)) + 8|0);
 $18 = $3;
 $19 = ((($18)) + 12|0);
 $20 = $3;
 $21 = ((($20)) + 16|0);
 $22 = $3;
 $23 = ((($22)) + 20|0);
 $24 = $3;
 $25 = ((($24)) + 24|0);
 $26 = $3;
 $27 = ((($26)) + 28|0);
 $28 = $3;
 $29 = ((($28)) + 32|0);
 $30 = $3;
 $31 = ((($30)) + 36|0);
 HEAP32[$vararg_buffer>>2] = $13;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $15;
 $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
 HEAP32[$vararg_ptr2>>2] = $17;
 $vararg_ptr3 = ((($vararg_buffer)) + 12|0);
 HEAP32[$vararg_ptr3>>2] = $19;
 $vararg_ptr4 = ((($vararg_buffer)) + 16|0);
 HEAP32[$vararg_ptr4>>2] = $21;
 $vararg_ptr5 = ((($vararg_buffer)) + 20|0);
 HEAP32[$vararg_ptr5>>2] = $23;
 $vararg_ptr6 = ((($vararg_buffer)) + 24|0);
 HEAP32[$vararg_ptr6>>2] = $25;
 $vararg_ptr7 = ((($vararg_buffer)) + 28|0);
 HEAP32[$vararg_ptr7>>2] = $27;
 $vararg_ptr8 = ((($vararg_buffer)) + 32|0);
 HEAP32[$vararg_ptr8>>2] = $29;
 $vararg_ptr9 = ((($vararg_buffer)) + 36|0);
 HEAP32[$vararg_ptr9>>2] = $31;
 (_sscanf($12,25416,$vararg_buffer)|0);
 STACKTOP = sp;return;
}
function __Z10VoiceReseti($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0;
 var $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $3 = HEAP32[1124]|0;
 $4 = ((($3)) + 64|0);
 HEAP32[$4>>2] = 290816;
 $5 = HEAP32[1124]|0;
 $6 = ((($5)) + 68|0);
 HEAP32[$6>>2] = 4104;
 $7 = HEAP32[1124]|0;
 $8 = ((($7)) + 116|0);
 HEAP32[$8>>2] = 256;
 $9 = HEAP32[1124]|0;
 $10 = ((($9)) + 84|0);
 HEAP32[$10>>2] = 100;
 $11 = HEAP32[1124]|0;
 $12 = ((($11)) + 96|0);
 HEAP32[$12>>2] = 0;
 $13 = HEAP32[1124]|0;
 $14 = ((($13)) + 100|0);
 HEAP32[$14>>2] = 0;
 $15 = HEAP32[1124]|0;
 $16 = ((($15)) + 88|0);
 HEAP32[$16>>2] = 64;
 $17 = HEAP32[1124]|0;
 $18 = ((($17)) + 104|0);
 HEAP32[$18>>2] = 5;
 $19 = HEAP32[1124]|0;
 $20 = ((($19)) + 108|0);
 HEAP32[$20>>2] = 0;
 $21 = HEAP32[1124]|0;
 $22 = ((($21)) + 112|0);
 HEAP32[$22>>2] = 64;
 $23 = HEAP32[1124]|0;
 $24 = ((($23)) + 120|0);
 HEAP32[$24>>2] = 90;
 $25 = HEAP32[1124]|0;
 $26 = ((($25)) + 124|0);
 HEAP32[$26>>2] = 100;
 $27 = HEAP32[20212]|0;
 $28 = HEAP32[1124]|0;
 $29 = ((($28)) + 128|0);
 HEAP32[$29>>2] = $27;
 $30 = HEAP32[1124]|0;
 $31 = ((($30)) + 132|0);
 ;HEAP32[$31>>2]=0|0;HEAP32[$31+4>>2]=0|0;HEAP32[$31+8>>2]=0|0;HEAP32[$31+12>>2]=0|0;HEAP32[$31+16>>2]=0|0;HEAP32[$31+20>>2]=0|0;HEAP32[$31+24>>2]=0|0;HEAP32[$31+28>>2]=0|0;
 HEAP32[(75148)>>2] = 450;
 HEAP32[(75152)>>2] = 800;
 HEAP32[(75156)>>2] = 175;
 $32 = HEAP32[1124]|0;
 $33 = ((($32)) + 92|0);
 HEAP32[$33>>2] = 2;
 __Z10InitBreathv();
 $2 = 0;
 while(1) {
  $34 = $2;
  $35 = ($34|0)<(9);
  if (!($35)) {
   break;
  }
  $36 = $2;
  $37 = HEAP32[1124]|0;
  $38 = ((($37)) + 164|0);
  $39 = (($38) + ($36<<1)|0);
  HEAP16[$39>>1] = 256;
  $40 = $2;
  $41 = (25446 + ($40)|0);
  $42 = HEAP8[$41>>0]|0;
  $43 = $42&255;
  $44 = $43<<1;
  $45 = $44&65535;
  $46 = $2;
  $47 = HEAP32[1124]|0;
  $48 = ((($47)) + 182|0);
  $49 = (($48) + ($46<<1)|0);
  HEAP16[$49>>1] = $45;
  $50 = $2;
  $51 = (25455 + ($50)|0);
  $52 = HEAP8[$51>>0]|0;
  $53 = $52&255;
  $54 = $53<<1;
  $55 = $54&65535;
  $56 = $2;
  $57 = HEAP32[1124]|0;
  $58 = ((($57)) + 200|0);
  $59 = (($58) + ($56<<1)|0);
  HEAP16[$59>>1] = $55;
  $60 = $2;
  $61 = HEAP32[1124]|0;
  $62 = ((($61)) + 292|0);
  $63 = (($62) + ($60<<2)|0);
  HEAP32[$63>>2] = 0;
  $64 = $2;
  $65 = (4500 + ($64<<2)|0);
  $66 = HEAP32[$65>>2]|0;
  $67 = $2;
  $68 = HEAP32[1124]|0;
  $69 = ((($68)) + 328|0);
  $70 = (($69) + ($67<<2)|0);
  HEAP32[$70>>2] = $66;
  $71 = $2;
  $72 = HEAP32[1124]|0;
  $73 = ((($72)) + 218|0);
  $74 = (($73) + ($71<<1)|0);
  HEAP16[$74>>1] = 0;
  $75 = $2;
  $76 = (4536 + ($75<<2)|0);
  $77 = HEAP32[$76>>2]|0;
  $78 = ($77*22050)|0;
  $79 = HEAP32[20211]|0;
  $80 = (($78|0) / ($79|0))&-1;
  $81 = $2;
  $82 = (78052 + ($81<<2)|0);
  HEAP32[$82>>2] = $80;
  $83 = $2;
  $84 = (($83) + 1)|0;
  $2 = $84;
 }
 $85 = HEAP32[1124]|0;
 __ZL13SetToneAdjustP7voice_tPi($85,4436);
 $86 = HEAP32[1124]|0;
 $87 = ((($86)) + 72|0);
 HEAP32[$87>>2] = 256;
 $88 = HEAP32[1124]|0;
 $89 = ((($88)) + 76|0);
 HEAP32[$89>>2] = 238;
 $90 = HEAP32[1124]|0;
 $91 = ((($90)) + 80|0);
 HEAP32[$91>>2] = 232;
 $92 = $1;
 $93 = ($92|0)==(0);
 if (!($93)) {
  STACKTOP = sp;return;
 }
 HEAP32[19490] = 0;
 HEAP32[19156] = 0;
 (__Z15LoadMbrolaTablePKcS0_i(0,0,0)|0);
 STACKTOP = sp;return;
}
function __ZL13SetToneAdjustP7voice_tPi($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$ = 0, $10 = 0, $11 = 0.0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0.0, $54 = 0, $55 = 0, $56 = 0, $57 = 0.0, $58 = 0.0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0.0, $65 = 0, $66 = 0, $67 = 0, $68 = 0.0, $69 = 0.0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0;
 var $82 = 0, $83 = 0, $84 = 0, $85 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $2 = $0;
 $3 = $1;
 $7 = 0;
 $12 = $3;
 $13 = ((($12)) + 4|0);
 $14 = HEAP32[$13>>2]|0;
 $9 = $14;
 $5 = 0;
 while(1) {
  $15 = $5;
  $16 = ($15|0)<(12);
  if (!($16)) {
   break;
  }
  $17 = $5;
  $18 = $3;
  $19 = (($18) + ($17<<2)|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = ($20|0)==(-1);
  if ($21) {
   $22 = $5;
   $23 = $3;
   $24 = (($23) + ($22<<2)|0);
   HEAP32[$24>>2] = 8000;
   $25 = $5;
   $26 = ($25|0)>(0);
   if ($26) {
    $27 = $5;
    $28 = (($27) - 1)|0;
    $29 = $3;
    $30 = (($29) + ($28<<2)|0);
    $31 = HEAP32[$30>>2]|0;
    $32 = $5;
    $33 = (($32) + 1)|0;
    $34 = $3;
    $35 = (($34) + ($33<<2)|0);
    HEAP32[$35>>2] = $31;
   }
  }
  $36 = $5;
  $37 = $3;
  $38 = (($37) + ($36<<2)|0);
  $39 = HEAP32[$38>>2]|0;
  $40 = (($39|0) / 8)&-1;
  $8 = $40;
  $41 = $5;
  $42 = (($41) + 1)|0;
  $43 = $3;
  $44 = (($43) + ($42<<2)|0);
  $45 = HEAP32[$44>>2]|0;
  $10 = $45;
  $46 = $8;
  $47 = $7;
  $48 = (($46) - ($47))|0;
  $49 = ($48|0)>(0);
  L8: do {
   if ($49) {
    $50 = $10;
    $51 = $9;
    $52 = (($50) - ($51))|0;
    $53 = (+($52|0));
    $54 = $8;
    $55 = $7;
    $56 = (($54) - ($55))|0;
    $57 = (+($56|0));
    $58 = $53 / $57;
    $11 = $58;
    $59 = $7;
    $4 = $59;
    while(1) {
     $60 = $4;
     $61 = $8;
     $62 = ($60|0)<($61|0);
     if (!($62)) {
      break L8;
     }
     $63 = $9;
     $64 = $11;
     $65 = $4;
     $66 = $7;
     $67 = (($65) - ($66))|0;
     $68 = (+($67|0));
     $69 = $64 * $68;
     $70 = (~~(($69)));
     $71 = (($63) + ($70))|0;
     $6 = $71;
     $72 = $6;
     $73 = ($72|0)>(255);
     $$ = $73 ? 255 : $71;
     $6 = $$;
     $74 = $6;
     $75 = $74&255;
     $76 = $4;
     $77 = $2;
     $78 = ((($77)) + 364|0);
     $79 = (($78) + ($76)|0);
     HEAP8[$79>>0] = $75;
     $80 = $4;
     $81 = (($80) + 1)|0;
     $4 = $81;
    }
   }
  } while(0);
  $82 = $8;
  $7 = $82;
  $83 = $10;
  $9 = $83;
  $84 = $5;
  $85 = (($84) + 2)|0;
  $5 = $85;
 }
 STACKTOP = sp;return;
}
function __Z9LoadVoicePKci($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0;
 var $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0;
 var $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0;
 var $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0.0, $231 = 0.0, $232 = 0.0, $233 = 0.0, $234 = 0.0, $235 = 0.0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0;
 var $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0;
 var $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0;
 var $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0;
 var $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0;
 var $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0;
 var $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0;
 var $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0;
 var $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0;
 var $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0;
 var $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0;
 var $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0;
 var $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0;
 var $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0;
 var $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0;
 var $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0;
 var $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0;
 var $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0;
 var $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0;
 var $569 = 0, $57 = 0.0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0;
 var $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0;
 var $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0;
 var $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0;
 var $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0;
 var $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0;
 var $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0;
 var $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond = 0, $or$cond10 = 0, $or$cond4 = 0, $or$cond6 = 0, $or$cond8 = 0, $vararg_buffer = 0, $vararg_buffer100 = 0, $vararg_buffer104 = 0, $vararg_buffer107 = 0, $vararg_buffer110 = 0, $vararg_buffer113 = 0, $vararg_buffer116 = 0;
 var $vararg_buffer120 = 0, $vararg_buffer123 = 0, $vararg_buffer128 = 0, $vararg_buffer13 = 0, $vararg_buffer130 = 0, $vararg_buffer133 = 0, $vararg_buffer137 = 0, $vararg_buffer140 = 0, $vararg_buffer143 = 0, $vararg_buffer146 = 0, $vararg_buffer149 = 0, $vararg_buffer152 = 0, $vararg_buffer17 = 0, $vararg_buffer20 = 0, $vararg_buffer26 = 0, $vararg_buffer31 = 0, $vararg_buffer34 = 0, $vararg_buffer38 = 0, $vararg_buffer42 = 0, $vararg_buffer45 = 0;
 var $vararg_buffer48 = 0, $vararg_buffer51 = 0, $vararg_buffer55 = 0, $vararg_buffer59 = 0, $vararg_buffer67 = 0, $vararg_buffer70 = 0, $vararg_buffer73 = 0, $vararg_buffer77 = 0, $vararg_buffer83 = 0, $vararg_buffer86 = 0, $vararg_buffer91 = 0, $vararg_buffer96 = 0, $vararg_ptr103 = 0, $vararg_ptr11 = 0, $vararg_ptr119 = 0, $vararg_ptr12 = 0, $vararg_ptr126 = 0, $vararg_ptr127 = 0, $vararg_ptr136 = 0, $vararg_ptr16 = 0;
 var $vararg_ptr23 = 0, $vararg_ptr24 = 0, $vararg_ptr25 = 0, $vararg_ptr29 = 0, $vararg_ptr30 = 0, $vararg_ptr37 = 0, $vararg_ptr41 = 0, $vararg_ptr54 = 0, $vararg_ptr58 = 0, $vararg_ptr62 = 0, $vararg_ptr63 = 0, $vararg_ptr64 = 0, $vararg_ptr65 = 0, $vararg_ptr66 = 0, $vararg_ptr76 = 0, $vararg_ptr80 = 0, $vararg_ptr81 = 0, $vararg_ptr82 = 0, $vararg_ptr89 = 0, $vararg_ptr90 = 0;
 var $vararg_ptr94 = 0, $vararg_ptr95 = 0, $vararg_ptr99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1840|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(1840|0);
 $vararg_buffer152 = sp + 384|0;
 $vararg_buffer149 = sp + 376|0;
 $vararg_buffer146 = sp + 368|0;
 $vararg_buffer143 = sp + 360|0;
 $vararg_buffer140 = sp + 352|0;
 $vararg_buffer137 = sp + 344|0;
 $vararg_buffer133 = sp + 336|0;
 $vararg_buffer130 = sp + 328|0;
 $vararg_buffer128 = sp + 320|0;
 $vararg_buffer123 = sp + 304|0;
 $vararg_buffer120 = sp + 296|0;
 $vararg_buffer116 = sp + 288|0;
 $vararg_buffer113 = sp + 280|0;
 $vararg_buffer110 = sp + 272|0;
 $vararg_buffer107 = sp + 264|0;
 $vararg_buffer104 = sp + 256|0;
 $vararg_buffer100 = sp + 248|0;
 $vararg_buffer96 = sp + 240|0;
 $vararg_buffer91 = sp + 224|0;
 $vararg_buffer86 = sp + 208|0;
 $vararg_buffer83 = sp + 200|0;
 $vararg_buffer77 = sp + 184|0;
 $vararg_buffer73 = sp + 176|0;
 $vararg_buffer70 = sp + 168|0;
 $vararg_buffer67 = sp + 160|0;
 $vararg_buffer59 = sp + 136|0;
 $vararg_buffer55 = sp + 128|0;
 $vararg_buffer51 = sp + 120|0;
 $vararg_buffer48 = sp + 112|0;
 $vararg_buffer45 = sp + 104|0;
 $vararg_buffer42 = sp + 96|0;
 $vararg_buffer38 = sp + 88|0;
 $vararg_buffer34 = sp + 80|0;
 $vararg_buffer31 = sp + 72|0;
 $vararg_buffer26 = sp + 56|0;
 $vararg_buffer20 = sp + 40|0;
 $vararg_buffer17 = sp + 32|0;
 $vararg_buffer13 = sp + 24|0;
 $vararg_buffer = sp + 8|0;
 $20 = sp + 628|0;
 $22 = sp + 620|0;
 $23 = sp + 616|0;
 $34 = sp + 1792|0;
 $35 = sp + 1752|0;
 $36 = sp + 1712|0;
 $37 = sp + 1672|0;
 $38 = sp + 1632|0;
 $39 = sp + 1592|0;
 $41 = sp + 1396|0;
 $42 = sp + 1224|0;
 $43 = sp + 568|0;
 $44 = sp + 536|0;
 $45 = sp + 504|0;
 $46 = sp + 472|0;
 $47 = sp + 904|0;
 $48 = sp + 864|0;
 $49 = sp + 784|0;
 $51 = sp + 464|0;
 $52 = sp + 460|0;
 $54 = sp + 452|0;
 $55 = sp + 448|0;
 $56 = sp + 704|0;
 $58 = sp + 400|0;
 $59 = sp + 392|0;
 $15 = $0;
 $16 = $1;
 $17 = 0;
 $24 = 0;
 $61 = $16;
 $62 = $61 & 2;
 $25 = $62;
 $26 = 0;
 $27 = 0;
 $28 = 0;
 $29 = 0;
 $30 = 0;
 $31 = 0;
 $32 = 0;
 $33 = 0;
 HEAP32[$43>>2] = 0;
 $63 = $15;
 __Z8strncpy0PcPKci($34,$63,40);
 $64 = $16;
 $65 = $64 & 16;
 $66 = ($65|0)!=(0);
 do {
  if ($66) {
   $67 = $15;
   (_strcpy($41,$67)|0);
   $68 = (__Z13GetFileLengthPKc($41)|0);
   $69 = ($68|0)<=(0);
   if ($69) {
    $14 = 0;
    $669 = $14;
    STACKTOP = sp;return ($669|0);
   }
  } else {
   $70 = HEAP8[$34>>0]|0;
   $71 = $70 << 24 >> 24;
   $72 = ($71|0)==(0);
   if ($72) {
    (_strcpy($34,27818)|0);
   }
   HEAP32[$vararg_buffer>>2] = 119484;
   $vararg_ptr11 = ((($vararg_buffer)) + 4|0);
   HEAP32[$vararg_ptr11>>2] = 47;
   $vararg_ptr12 = ((($vararg_buffer)) + 8|0);
   HEAP32[$vararg_ptr12>>2] = 47;
   (_sprintf($42,25464,$vararg_buffer)|0);
   HEAP32[$vararg_buffer13>>2] = $42;
   $vararg_ptr16 = ((($vararg_buffer13)) + 4|0);
   HEAP32[$vararg_ptr16>>2] = $34;
   (_sprintf($41,25477,$vararg_buffer13)|0);
   $73 = (__Z13GetFileLengthPKc($41)|0);
   $74 = ($73|0)<=(0);
   if ($74) {
    $75 = HEAP8[$34>>0]|0;
    $76 = $75 << 24 >> 24;
    $77 = ($76|0)==(109);
    if ($77) {
     $78 = ((($34)) + 1|0);
     $79 = HEAP8[$78>>0]|0;
     $80 = $79 << 24 >> 24;
     $81 = ($80|0)==(98);
     if ($81) {
      $50 = 25482;
      break;
     }
    }
    HEAP32[$vararg_buffer17>>2] = $34;
    (_sprintf($49,25485,$vararg_buffer17)|0);
    $82 = HEAP32[1143]|0;
    $12 = $82;
    $13 = $34;
    $83 = $12;
    $84 = $13;
    $10 = $83;
    $11 = $84;
    $85 = $10;
    $86 = $11;
    $87 = (_strstr($85,$86)|0);
    $88 = ($87|0)!=(0|0);
    do {
     if ($88) {
      $50 = 25489;
     } else {
      $89 = HEAP32[1144]|0;
      $8 = $89;
      $9 = $34;
      $90 = $8;
      $91 = $9;
      $6 = $90;
      $7 = $91;
      $92 = $6;
      $93 = $7;
      $94 = (_strstr($92,$93)|0);
      $95 = ($94|0)!=(0|0);
      if ($95) {
       $50 = 25496;
       break;
      } else {
       $50 = 25501;
       break;
      }
     }
    } while(0);
    $96 = $50;
    HEAP32[$vararg_buffer20>>2] = $42;
    $vararg_ptr23 = ((($vararg_buffer20)) + 4|0);
    HEAP32[$vararg_ptr23>>2] = $96;
    $vararg_ptr24 = ((($vararg_buffer20)) + 8|0);
    HEAP32[$vararg_ptr24>>2] = 47;
    $vararg_ptr25 = ((($vararg_buffer20)) + 12|0);
    HEAP32[$vararg_ptr25>>2] = $34;
    (_sprintf($41,25507,$vararg_buffer20)|0);
    $97 = (__Z13GetFileLengthPKc($41)|0);
    $98 = ($97|0)<=(0);
    if ($98) {
     HEAP32[$vararg_buffer26>>2] = $42;
     $vararg_ptr29 = ((($vararg_buffer26)) + 4|0);
     HEAP32[$vararg_ptr29>>2] = 47;
     $vararg_ptr30 = ((($vararg_buffer26)) + 8|0);
     HEAP32[$vararg_ptr30>>2] = $34;
     (_sprintf($41,25516,$vararg_buffer26)|0);
    }
   }
  }
 } while(0);
 $99 = (_fopen($41,25527)|0);
 $17 = $99;
 $40 = 25529;
 $100 = $17;
 $101 = ($100|0)==(0|0);
 do {
  if ($101) {
   $102 = $16;
   $103 = $102 & 3;
   $104 = ($103|0)!=(0);
   if ($104) {
    $14 = 0;
    $669 = $14;
    STACKTOP = sp;return ($669|0);
   } else {
    $105 = (__Z22SelectPhonemeTableNamePKc($34)|0);
    $106 = ($105|0)>=(0);
    if (!($106)) {
     break;
    }
    $40 = $34;
    break;
   }
  }
 } while(0);
 $107 = $25;
 $108 = ($107|0)==(0);
 $109 = HEAP32[19149]|0;
 $110 = ($109|0)!=(0|0);
 $or$cond = $108 & $110;
 if ($or$cond) {
  $111 = HEAP32[19149]|0;
  __Z16DeleteTranslatorP10Translator($111);
  HEAP32[19149] = 0;
 }
 $112 = $40;
 (_strcpy($36,$112)|0);
 $113 = $40;
 (_strcpy($37,$113)|0);
 $114 = $40;
 (_strcpy($38,$114)|0);
 $115 = $25;
 $116 = ($115|0)!=(0);
 if ($116) {
  $4 = 121988;
  $5 = 43;
  $118 = $4;
  $119 = $5;
  $2 = $118;
  $3 = $119;
  $120 = $2;
  $121 = $3;
  $122 = (_strchr($120,$121)|0);
  $18 = $122;
  $123 = ($122|0)!=(0|0);
  if ($123) {
   $124 = $18;
   HEAP8[$124>>0] = 0;
  }
  $125 = $15;
  $126 = ((($125)) + 3|0);
  HEAP32[$vararg_buffer31>>2] = $126;
  (_sprintf($41,25532,$vararg_buffer31)|0);
  (_strcat(121988,$41)|0);
  $127 = HEAP32[19149]|0;
  $32 = $127;
 } else {
  HEAP32[1124] = 78112;
  $117 = $15;
  __Z8strncpy0PcPKci(121988,$117,40);
  HEAP8[122028] = 0;
  HEAP8[122068] = 0;
  HEAP32[(78096)>>2] = 121988;
  HEAP32[19522] = 122028;
  HEAP32[(78092)>>2] = 122068;
 }
 $128 = $25;
 __Z10VoiceReseti($128);
 $129 = $25;
 $130 = ($129|0)!=(0);
 if (!($130)) {
  (__Z22SelectPhonemeTableNamePKc($38)|0);
 }
 L43: while(1) {
  $131 = $17;
  $132 = ($131|0)!=(0|0);
  if (!($132)) {
   break;
  }
  $133 = $17;
  $134 = (__ZL11fgets_stripPciP8_IO_FILE($41,190,$133)|0);
  $135 = ($134|0)!=(0|0);
  if (!($135)) {
   break;
  }
  $18 = $41;
  while(1) {
   $136 = $18;
   $137 = HEAP8[$136>>0]|0;
   $138 = $137 << 24 >> 24;
   $139 = ($138|0)!=(0);
   if (!($139)) {
    break;
   }
   $140 = $18;
   $141 = HEAP8[$140>>0]|0;
   $142 = $141 << 24 >> 24;
   $143 = (_isspace($142)|0);
   $144 = ($143|0)!=(0);
   $145 = $144 ^ 1;
   if (!($145)) {
    break;
   }
   $146 = $18;
   $147 = ((($146)) + 1|0);
   $18 = $147;
  }
  $148 = $18;
  $149 = ((($148)) + 1|0);
  $18 = $149;
  HEAP8[$148>>0] = 0;
  $150 = HEAP8[$41>>0]|0;
  $151 = $150 << 24 >> 24;
  $152 = ($151|0)==(0);
  if ($152) {
   continue;
  }
  $153 = (__Z10LookupMnemP8MNEM_TABPKc(4580,$41)|0);
  $19 = $153;
  $154 = $19;
  do {
   switch ($154|0) {
   case 2:  {
    $155 = $25;
    $156 = ($155|0)!=(0);
    if ($156) {
     continue L43;
    }
    HEAP32[$54>>2] = 5;
    HEAP8[$35>>0] = 0;
    $157 = $18;
    HEAP32[$vararg_buffer34>>2] = $35;
    $vararg_ptr37 = ((($vararg_buffer34)) + 4|0);
    HEAP32[$vararg_ptr37>>2] = $54;
    (_sscanf($157,25536,$vararg_buffer34)|0);
    $158 = (_strcmp($35,25542)|0);
    $159 = ($158|0)==(0);
    if ($159) {
     continue L43;
    }
    $160 = (_strlen($35)|0);
    $161 = (($160) + 2)|0;
    $53 = $161;
    $162 = $53;
    $163 = $24;
    $164 = (100 - ($163))|0;
    $165 = (($164) - 1)|0;
    $166 = ($162>>>0)<($165>>>0);
    if ($166) {
     $167 = HEAP32[$54>>2]|0;
     $168 = $167&255;
     $169 = $24;
     $170 = (122068 + ($169)|0);
     HEAP8[$170>>0] = $168;
     $171 = $24;
     $172 = (($171) + 1)|0;
     $173 = (122068 + ($172)|0);
     (_strcpy($173,$35)|0);
     $174 = $53;
     $175 = $24;
     $176 = (($175) + ($174))|0;
     $24 = $176;
    }
    $177 = $26;
    $178 = ($177|0)==(0);
    if (!($178)) {
     continue L43;
    }
    $179 = (_strtok($35,25550)|0);
    $40 = $179;
    $26 = 1;
    $180 = $40;
    (_strcpy($36,$180)|0);
    $181 = $40;
    (_strcpy($37,$181)|0);
    $182 = $40;
    (_strcpy($38,$182)|0);
    (__Z22SelectPhonemeTableNamePKc($38)|0);
    $183 = $33;
    $184 = ($183|0)!=(0|0);
    if ($184) {
     $185 = $33;
     __Z16DeleteTranslatorP10Translator($185);
    }
    $186 = (__Z16SelectTranslatorPKc($36)|0);
    $33 = $186;
    $187 = $33;
    $32 = $187;
    $188 = HEAP32[1124]|0;
    $189 = ((($188)) + 40|0);
    __Z8strncpy0PcPKci($189,$35,20);
    continue L43;
    break;
   }
   case 1:  {
    $190 = $25;
    $191 = ($190|0)==(0);
    if (!($191)) {
     continue L43;
    }
    while(1) {
     $192 = $18;
     $193 = HEAP8[$192>>0]|0;
     $194 = $193 << 24 >> 24;
     $195 = (_isspace($194)|0);
     $196 = ($195|0)!=(0);
     $197 = $18;
     if (!($196)) {
      break;
     }
     $198 = ((($197)) + 1|0);
     $18 = $198;
    }
    __Z8strncpy0PcPKci(122028,$197,40);
    continue L43;
    break;
   }
   case 3:  {
    HEAP32[$55>>2] = 0;
    $199 = $18;
    HEAP32[$vararg_buffer38>>2] = $56;
    $vararg_ptr41 = ((($vararg_buffer38)) + 4|0);
    HEAP32[$vararg_ptr41>>2] = $55;
    (_sscanf($199,25536,$vararg_buffer38)|0);
    $200 = (__Z10LookupMnemP8MNEM_TABPKc(4404,$56)|0);
    $201 = $200&255;
    HEAP8[(78100)>>0] = $201;
    $202 = HEAP32[$55>>2]|0;
    $203 = $202&255;
    HEAP8[(78101)>>0] = $203;
    continue L43;
    break;
   }
   case 4:  {
    $204 = $25;
    $205 = ($204|0)!=(0);
    if ($205) {
     continue L43;
    }
    $206 = $18;
    HEAP32[$vararg_buffer42>>2] = $36;
    (_sscanf($206,25552,$vararg_buffer42)|0);
    $207 = $33;
    $208 = ($207|0)!=(0|0);
    if ($208) {
     $209 = $33;
     __Z16DeleteTranslatorP10Translator($209);
    }
    $210 = (__Z16SelectTranslatorPKc($36)|0);
    $33 = $210;
    $211 = $33;
    $32 = $211;
    continue L43;
    break;
   }
   case 6:  {
    $212 = $18;
    HEAP32[$vararg_buffer45>>2] = $37;
    (_sscanf($212,25552,$vararg_buffer45)|0);
    continue L43;
    break;
   }
   case 5:  {
    $213 = $18;
    HEAP32[$vararg_buffer48>>2] = $38;
    (_sscanf($213,25552,$vararg_buffer48)|0);
    continue L43;
    break;
   }
   case 7:  {
    $214 = $18;
    __ZL12VoiceFormantPc($214);
    continue L43;
    break;
   }
   case 8:  {
    $215 = $18;
    HEAP32[$vararg_buffer51>>2] = $51;
    $vararg_ptr54 = ((($vararg_buffer51)) + 4|0);
    HEAP32[$vararg_ptr54>>2] = $52;
    $216 = (_sscanf($215,25555,$vararg_buffer51)|0);
    $21 = $216;
    $217 = HEAP32[$51>>2]|0;
    $218 = (($217) - 9)|0;
    $219 = $218 << 12;
    $220 = HEAP32[1124]|0;
    $221 = ((($220)) + 64|0);
    HEAP32[$221>>2] = $219;
    $222 = HEAP32[$52>>2]|0;
    $223 = HEAP32[$51>>2]|0;
    $224 = (($222) - ($223))|0;
    $225 = ($224*108)|0;
    $226 = HEAP32[1124]|0;
    $227 = ((($226)) + 68|0);
    HEAP32[$227>>2] = $225;
    $228 = HEAP32[$51>>2]|0;
    $229 = (($228) - 82)|0;
    $230 = (+($229|0));
    $231 = $230 / 82.0;
    $57 = $231;
    $232 = $57;
    $233 = $232 / 4.0;
    $234 = 1.0 + $233;
    $235 = $234 * 256.0;
    $236 = (~~(($235)));
    $237 = HEAP32[1124]|0;
    $238 = ((($237)) + 116|0);
    HEAP32[$238>>2] = $236;
    continue L43;
    break;
   }
   case 20:  {
    $239 = $18;
    $240 = (__ZL12Read8NumbersPcPi($239,$45)|0);
    $29 = $240;
    continue L43;
    break;
   }
   case 21:  {
    $241 = $18;
    $242 = (__ZL12Read8NumbersPcPi($241,$44)|0);
    $28 = $242;
    continue L43;
    break;
   }
   case 22:  {
    $243 = $18;
    $244 = (__ZL12Read8NumbersPcPi($243,$46)|0);
    $30 = $244;
    continue L43;
    break;
   }
   case 18:  {
    $245 = $18;
    HEAP32[$vararg_buffer55>>2] = 76612;
    $vararg_ptr58 = ((($vararg_buffer55)) + 4|0);
    HEAP32[$vararg_ptr58>>2] = 76608;
    (_sscanf($245,25555,$vararg_buffer55)|0);
    $246 = HEAP32[19153]|0;
    $247 = $246 & 255;
    $248 = ($247|0)!=(0);
    if (!($248)) {
     continue L43;
    }
    $249 = HEAP32[19153]|0;
    $250 = $249 & 255;
    $251 = $32;
    $252 = ((($251)) + 248|0);
    HEAP32[$252>>2] = $250;
    continue L43;
    break;
   }
   case 19:  {
    $253 = $18;
    $254 = ((($47)) + 40|0);
    $255 = ((($47)) + 80|0);
    $256 = ((($47)) + 120|0);
    $257 = ((($47)) + 160|0);
    $258 = ((($47)) + 200|0);
    HEAP32[$vararg_buffer59>>2] = $47;
    $vararg_ptr62 = ((($vararg_buffer59)) + 4|0);
    HEAP32[$vararg_ptr62>>2] = $254;
    $vararg_ptr63 = ((($vararg_buffer59)) + 8|0);
    HEAP32[$vararg_ptr63>>2] = $255;
    $vararg_ptr64 = ((($vararg_buffer59)) + 12|0);
    HEAP32[$vararg_ptr64>>2] = $256;
    $vararg_ptr65 = ((($vararg_buffer59)) + 16|0);
    HEAP32[$vararg_ptr65>>2] = $257;
    $vararg_ptr66 = ((($vararg_buffer59)) + 20|0);
    HEAP32[$vararg_ptr66>>2] = $258;
    $259 = (_sscanf($253,25561,$vararg_buffer59)|0);
    $21 = $259;
    $260 = $32;
    $261 = ((($260)) + 248|0);
    HEAP32[$261>>2] = 0;
    HEAP32[$20>>2] = 0;
    while(1) {
     $262 = HEAP32[$20>>2]|0;
     $263 = $21;
     $264 = ($262|0)<($263|0);
     if (!($264)) {
      continue L43;
     }
     $265 = HEAP32[$20>>2]|0;
     $266 = (($47) + (($265*40)|0)|0);
     $267 = (_strcmp($266,25579)|0);
     $268 = ($267|0)==(0);
     do {
      if (!($268)) {
       $269 = HEAP32[$20>>2]|0;
       $270 = (($47) + (($269*40)|0)|0);
       $271 = (__ZL10LookupTunePKc($270)|0);
       HEAP32[$22>>2] = $271;
       $272 = ($271|0)<(0);
       if ($272) {
        $273 = HEAP32[1451]|0;
        $274 = HEAP32[$20>>2]|0;
        $275 = (($47) + (($274*40)|0)|0);
        HEAP32[$vararg_buffer67>>2] = $275;
        (_fprintf($273,25584,$vararg_buffer67)|0);
        break;
       } else {
        $276 = HEAP32[$22>>2]|0;
        $277 = $276&255;
        $278 = HEAP32[$20>>2]|0;
        $279 = $32;
        $280 = ((($279)) + 252|0);
        $281 = (($280) + ($278)|0);
        HEAP8[$281>>0] = $277;
        break;
       }
      }
     } while(0);
     $282 = HEAP32[$20>>2]|0;
     $283 = (($282) + 1)|0;
     HEAP32[$20>>2] = $283;
    }
    break;
   }
   case 25: case 27: case 23:  {
    L98: while(1) {
     $284 = $18;
     $285 = HEAP8[$284>>0]|0;
     $286 = $285 << 24 >> 24;
     $287 = ($286|0)!=(0);
     if (!($287)) {
      break;
     }
     while(1) {
      $288 = $18;
      $289 = HEAP8[$288>>0]|0;
      $290 = $289 << 24 >> 24;
      $291 = (_isspace($290)|0);
      $292 = ($291|0)!=(0);
      if (!($292)) {
       break;
      }
      $293 = $18;
      $294 = ((($293)) + 1|0);
      $18 = $294;
     }
     $21 = -1;
     $295 = $18;
     $296 = (_atoi($295)|0);
     $21 = $296;
     $297 = ($296|0)>(0);
     do {
      if ($297) {
       $298 = $18;
       $299 = ((($298)) + 1|0);
       $18 = $299;
       $300 = $21;
       $301 = ($300|0)<(32);
       $302 = $19;
       if (!($301)) {
        $324 = ($302|0)==(27);
        $325 = $21;
        $326 = ($325|0)<(64);
        $or$cond4 = $324 & $326;
        if ($or$cond4) {
         $327 = $21;
         $328 = (($327) - 32)|0;
         $329 = 1 << $328;
         $330 = $32;
         $331 = ((($330)) + 200|0);
         $332 = HEAP32[$331>>2]|0;
         $333 = $332 | $329;
         HEAP32[$331>>2] = $333;
         break;
        } else {
         $334 = HEAP32[1451]|0;
         $335 = $21;
         HEAP32[$vararg_buffer70>>2] = $335;
         (_fprintf($334,25603,$vararg_buffer70)|0);
         break;
        }
       }
       $303 = ($302|0)==(23);
       if ($303) {
        $304 = $21;
        $305 = 1 << $304;
        $306 = $31;
        $307 = $306 | $305;
        $31 = $307;
        break;
       }
       $308 = $19;
       $309 = ($308|0)==(27);
       if ($309) {
        $310 = $21;
        $311 = 1 << $310;
        $312 = $32;
        $313 = ((($312)) + 200|0);
        $314 = HEAP32[$313>>2]|0;
        $315 = $314 | $311;
        HEAP32[$313>>2] = $315;
        break;
       }
       $316 = $19;
       $317 = ($316|0)==(25);
       if ($317) {
        $318 = $21;
        $319 = 1 << $318;
        $320 = $32;
        $321 = ((($320)) + 12|0);
        $322 = HEAP32[$321>>2]|0;
        $323 = $322 | $319;
        HEAP32[$321>>2] = $323;
       }
      }
     } while(0);
     while(1) {
      $336 = $18;
      $337 = HEAP8[$336>>0]|0;
      $338 = $337 << 24 >> 24;
      $339 = (_isalnum($338)|0);
      $340 = ($339|0)!=(0);
      if (!($340)) {
       continue L98;
      }
      $341 = $18;
      $342 = ((($341)) + 1|0);
      $18 = $342;
     }
    }
    $343 = $32;
    __Z22ProcessLanguageOptionsP16LANGUAGE_OPTIONS($343);
    continue L43;
    break;
   }
   case 36:  {
    $344 = $27;
    $345 = ($344|0)==(0);
    if ($345) {
     (__Z22SelectPhonemeTableNamePKc($38)|0);
     $27 = 1;
    }
    $346 = $19;
    $347 = $18;
    __ZL18PhonemeReplacementiPc($346,$347);
    continue L43;
    break;
   }
   case 17:  {
    $348 = $18;
    $349 = $32;
    $350 = $32;
    $351 = ((($350)) + 4|0);
    HEAP32[$vararg_buffer73>>2] = $349;
    $vararg_ptr76 = ((($vararg_buffer73)) + 4|0);
    HEAP32[$vararg_ptr76>>2] = $351;
    (_sscanf($348,25555,$vararg_buffer73)|0);
    continue L43;
    break;
   }
   case 24:  {
    $352 = $18;
    $353 = $32;
    $354 = ((($353)) + 8|0);
    $355 = $32;
    $356 = ((($355)) + 12|0);
    $357 = $32;
    $358 = ((($357)) + 16|0);
    $359 = $32;
    $360 = ((($359)) + 20|0);
    HEAP32[$vararg_buffer77>>2] = $354;
    $vararg_ptr80 = ((($vararg_buffer77)) + 4|0);
    HEAP32[$vararg_ptr80>>2] = $356;
    $vararg_ptr81 = ((($vararg_buffer77)) + 8|0);
    HEAP32[$vararg_ptr81>>2] = $358;
    $vararg_ptr82 = ((($vararg_buffer77)) + 12|0);
    HEAP32[$vararg_ptr82>>2] = $360;
    (_sscanf($352,25625,$vararg_buffer77)|0);
    continue L43;
    break;
   }
   case 26:  {
    $361 = $18;
    HEAP32[$vararg_buffer83>>2] = $22;
    $362 = (_sscanf($361,25637,$vararg_buffer83)|0);
    $363 = ($362|0)==(1);
    $364 = HEAP32[$22>>2]|0;
    $365 = ($364|0)<(20);
    $or$cond6 = $363 & $365;
    if (!($or$cond6)) {
     continue L43;
    }
    $366 = HEAP32[$22>>2]|0;
    $367 = (2940 + ($366<<2)|0);
    $368 = HEAP32[$367>>2]|0;
    $369 = $33;
    $370 = ((($369)) + 448|0);
    HEAP32[$370>>2] = $368;
    continue L43;
    break;
   }
   case 28:  {
    HEAP32[$23>>2] = 0;
    $371 = $18;
    HEAP32[$vararg_buffer86>>2] = $39;
    $vararg_ptr89 = ((($vararg_buffer86)) + 4|0);
    HEAP32[$vararg_ptr89>>2] = $22;
    $vararg_ptr90 = ((($vararg_buffer86)) + 8|0);
    HEAP32[$vararg_ptr90>>2] = $23;
    $372 = (_sscanf($371,25640,$vararg_buffer86)|0);
    $373 = ($372|0)>=(2);
    if ($373) {
     $374 = (__Z10LookupMnemP8MNEM_TABPKc(4940,$39)|0);
     HEAP32[$20>>2] = $374;
     $375 = ($374|0)>=(0);
     if (!($375)) {
      label = 98;
     }
    } else {
     label = 98;
    }
    if ((label|0) == 98) {
     label = 0;
     $376 = $18;
     HEAP32[$vararg_buffer91>>2] = $20;
     $vararg_ptr94 = ((($vararg_buffer91)) + 4|0);
     HEAP32[$vararg_ptr94>>2] = $22;
     $vararg_ptr95 = ((($vararg_buffer91)) + 8|0);
     HEAP32[$vararg_ptr95>>2] = $23;
     $377 = (_sscanf($376,25649,$vararg_buffer91)|0);
     $378 = ($377|0)>=(2);
     $379 = HEAP32[$20>>2]|0;
     $380 = ($379|0)<(21);
     $or$cond8 = $378 & $380;
     if (!($or$cond8)) {
      $391 = HEAP32[1451]|0;
      $392 = $18;
      HEAP32[$vararg_buffer96>>2] = $41;
      $vararg_ptr99 = ((($vararg_buffer96)) + 4|0);
      HEAP32[$vararg_ptr99>>2] = $392;
      (_fprintf($391,25658,$vararg_buffer96)|0);
      continue L43;
     }
    }
    $381 = HEAP32[$22>>2]|0;
    $382 = HEAP32[$20>>2]|0;
    $383 = $32;
    $384 = ((($383)) + 24|0);
    $385 = (($384) + ($382<<2)|0);
    HEAP32[$385>>2] = $381;
    $386 = HEAP32[$23>>2]|0;
    $387 = HEAP32[$20>>2]|0;
    $388 = $32;
    $389 = ((($388)) + 108|0);
    $390 = (($389) + ($387<<2)|0);
    HEAP32[$390>>2] = $386;
    continue L43;
    break;
   }
   case 9:  {
    HEAP32[$22>>2] = 0;
    $393 = HEAP32[1124]|0;
    $394 = ((($393)) + 100|0);
    HEAP32[$394>>2] = 0;
    $395 = $18;
    $396 = HEAP32[1124]|0;
    $397 = ((($396)) + 96|0);
    $398 = HEAP32[1124]|0;
    $399 = ((($398)) + 100|0);
    HEAP32[$vararg_buffer100>>2] = $397;
    $vararg_ptr103 = ((($vararg_buffer100)) + 4|0);
    HEAP32[$vararg_ptr103>>2] = $399;
    (_sscanf($395,25555,$vararg_buffer100)|0);
    continue L43;
    break;
   }
   case 10:  {
    $400 = $18;
    HEAP32[$vararg_buffer104>>2] = $22;
    $401 = (_sscanf($400,25637,$vararg_buffer104)|0);
    $402 = ($401|0)==(1);
    if (!($402)) {
     continue L43;
    }
    $403 = HEAP32[$22>>2]|0;
    $404 = $403<<5;
    $405 = HEAP32[1124]|0;
    $406 = ((($405)) + 88|0);
    HEAP32[$406>>2] = $404;
    continue L43;
    break;
   }
   case 11:  {
    $407 = $18;
    HEAP32[$vararg_buffer107>>2] = $22;
    $408 = (_sscanf($407,25637,$vararg_buffer107)|0);
    $409 = ($408|0)==(1);
    if (!($409)) {
     continue L43;
    }
    $410 = HEAP32[$22>>2]|0;
    $411 = HEAP32[1124]|0;
    $412 = ((($411)) + 92|0);
    HEAP32[$412>>2] = $410;
    continue L43;
    break;
   }
   case 12:  {
    $413 = $18;
    HEAP32[$vararg_buffer110>>2] = $22;
    $414 = (_sscanf($413,25637,$vararg_buffer110)|0);
    $415 = ($414|0)==(1);
    if (!($415)) {
     continue L43;
    }
    $416 = HEAP32[$22>>2]|0;
    $417 = ($416|0)>(4);
    if ($417) {
     $418 = HEAP32[1124]|0;
     $419 = ((($418)) + 108|0);
     HEAP32[$419>>2] = 1;
     HEAP32[$22>>2] = 4;
    }
    $420 = HEAP32[$22>>2]|0;
    $421 = (1 + ($420))|0;
    $422 = HEAP32[1124]|0;
    $423 = ((($422)) + 104|0);
    HEAP32[$423>>2] = $421;
    continue L43;
    break;
   }
   case 13:  {
    $424 = $18;
    __Z14ReadTonePointsPcPi($424,$58);
    $425 = HEAP32[1124]|0;
    __ZL13SetToneAdjustP7voice_tPi($425,$58);
    continue L43;
    break;
   }
   case 14:  {
    $426 = $18;
    HEAP32[$vararg_buffer113>>2] = $22;
    $427 = (_sscanf($426,25637,$vararg_buffer113)|0);
    $428 = ($427|0)==(1);
    if (!($428)) {
     continue L43;
    }
    $429 = HEAP32[$22>>2]|0;
    $430 = $429<<6;
    $431 = (($430|0) / 100)&-1;
    $432 = HEAP32[1124]|0;
    $433 = ((($432)) + 112|0);
    HEAP32[$433>>2] = $431;
    continue L43;
    break;
   }
   case 15:  {
    $434 = $18;
    $435 = HEAP32[1124]|0;
    $436 = ((($435)) + 292|0);
    $437 = ((($436)) + 4|0);
    $438 = (__ZL12Read8NumbersPcPi($434,$437)|0);
    $439 = HEAP32[1124]|0;
    $440 = ((($439)) + 292|0);
    HEAP32[$440>>2] = $438;
    HEAP32[$20>>2] = 1;
    while(1) {
     $441 = HEAP32[$20>>2]|0;
     $442 = ($441|0)<(8);
     if (!($442)) {
      continue L43;
     }
     $443 = HEAP32[$20>>2]|0;
     $444 = (($443|0) % 2)&-1;
     $445 = ($444|0)!=(0);
     if ($445) {
      $446 = HEAP32[$20>>2]|0;
      $447 = HEAP32[1124]|0;
      $448 = ((($447)) + 292|0);
      $449 = (($448) + ($446<<2)|0);
      $450 = HEAP32[$449>>2]|0;
      $451 = (0 - ($450))|0;
      $452 = HEAP32[$20>>2]|0;
      $453 = HEAP32[1124]|0;
      $454 = ((($453)) + 292|0);
      $455 = (($454) + ($452<<2)|0);
      HEAP32[$455>>2] = $451;
     }
     $456 = HEAP32[$20>>2]|0;
     $457 = (($456) + 1)|0;
     HEAP32[$20>>2] = $457;
    }
    break;
   }
   case 16:  {
    $458 = $18;
    $459 = HEAP32[1124]|0;
    $460 = ((($459)) + 328|0);
    $461 = ((($460)) + 4|0);
    $462 = (__ZL12Read8NumbersPcPi($458,$461)|0);
    $463 = HEAP32[1124]|0;
    $464 = ((($463)) + 328|0);
    HEAP32[$464>>2] = $462;
    continue L43;
    break;
   }
   case 37:  {
    $465 = $18;
    $466 = HEAP32[1124]|0;
    $467 = ((($466)) + 120|0);
    $468 = HEAP32[1124]|0;
    $469 = ((($468)) + 124|0);
    HEAP32[$vararg_buffer116>>2] = $467;
    $vararg_ptr119 = ((($vararg_buffer116)) + 4|0);
    HEAP32[$vararg_ptr119>>2] = $469;
    $470 = (_sscanf($465,25555,$vararg_buffer116)|0);
    HEAP32[$22>>2] = $470;
    continue L43;
    break;
   }
   case 32:  {
    $471 = $18;
    $472 = HEAP32[1124]|0;
    $473 = ((($472)) + 84|0);
    HEAP32[$vararg_buffer120>>2] = $473;
    (_sscanf($471,25637,$vararg_buffer120)|0);
    continue L43;
    break;
   }
   case 29:  {
    HEAP32[$59>>2] = 16000;
    HEAP8[$49>>0] = 0;
    $474 = $18;
    HEAP32[$vararg_buffer123>>2] = $48;
    $vararg_ptr126 = ((($vararg_buffer123)) + 4|0);
    HEAP32[$vararg_ptr126>>2] = $49;
    $vararg_ptr127 = ((($vararg_buffer123)) + 8|0);
    HEAP32[$vararg_ptr127>>2] = $59;
    (_sscanf($474,25683,$vararg_buffer123)|0);
    $475 = HEAP32[$59>>2]|0;
    $476 = (__Z15LoadMbrolaTablePKcS0_i($48,$49,$475)|0);
    $477 = ($476|0)!=(0);
    if ($477) {
     $478 = HEAP32[1451]|0;
     (_fprintf($478,25692,$vararg_buffer128)|0);
    }
    $479 = HEAP32[$59>>2]|0;
    $480 = HEAP32[1124]|0;
    $481 = ((($480)) + 128|0);
    HEAP32[$481>>2] = $479;
    continue L43;
    break;
   }
   case 30:  {
    $482 = HEAP32[1124]|0;
    $483 = ((($482)) + 132|0);
    HEAP32[$483>>2] = 1;
    $484 = $18;
    $485 = HEAP32[1124]|0;
    $486 = ((($485)) + 132|0);
    (__ZL12Read8NumbersPcPi($484,$486)|0);
    $487 = HEAP32[1124]|0;
    $488 = ((($487)) + 132|0);
    $489 = ((($488)) + 20|0);
    $490 = HEAP32[$489>>2]|0;
    $491 = (($490) - 40)|0;
    HEAP32[$489>>2] = $491;
    continue L43;
    break;
   }
   case 31:  {
    $492 = $18;
    (__ZL12Read8NumbersPcPi($492,(75148))|0);
    __Z8SetSpeedi(3);
    continue L43;
    break;
   }
   case 33:  {
    $493 = $18;
    HEAP32[$vararg_buffer130>>2] = $43;
    (_sscanf($493,25637,$vararg_buffer130)|0);
    continue L43;
    break;
   }
   case 34:  {
    HEAP8[$49>>0] = 0;
    HEAP8[$48>>0] = 0;
    $494 = $18;
    HEAP32[$vararg_buffer133>>2] = $48;
    $vararg_ptr136 = ((($vararg_buffer133)) + 4|0);
    HEAP32[$vararg_ptr136>>2] = $49;
    (_sscanf($494,25716,$vararg_buffer133)|0);
    $495 = (_strcmp($48,25722)|0);
    $496 = ($495|0)==(0);
    if ($496) {
     $497 = $32;
     $498 = ((($497)) + 288|0);
     __Z8strncpy0PcPKci($498,$49,8);
     continue L43;
    }
    $499 = (__Z16AlphabetFromNamePKc($48)|0);
    $60 = $499;
    $500 = ($499|0)!=(0|0);
    if ($500) {
     $501 = $60;
     $502 = ((($501)) + 4|0);
     $503 = HEAP32[$502>>2]|0;
     $504 = $32;
     $505 = ((($504)) + 300|0);
     HEAP32[$505>>2] = $503;
     $506 = (__ZL13StringToWord2PKc($49)|0);
     $507 = $32;
     $508 = ((($507)) + 304|0);
     HEAP32[$508>>2] = $506;
     continue L43;
    } else {
     $509 = HEAP32[1451]|0;
     HEAP32[$vararg_buffer137>>2] = $48;
     (_fprintf($509,25728,$vararg_buffer137)|0);
     continue L43;
    }
    break;
   }
   case 35:  {
    $510 = $18;
    HEAP32[$vararg_buffer140>>2] = $48;
    $511 = (_sscanf($510,25552,$vararg_buffer140)|0);
    $512 = ($511|0)==(1);
    if (!($512)) {
     continue L43;
    }
    $513 = (__Z10LookupMnemP8MNEM_TABPKc(4964,$48)|0);
    HEAP32[$20>>2] = $513;
    $514 = ($513|0)>(0);
    if ($514) {
     $515 = HEAP32[$20>>2]|0;
     $516 = 1 << $515;
     $517 = $32;
     $518 = ((($517)) + 320|0);
     $519 = HEAP32[$518>>2]|0;
     $520 = $519 | $516;
     HEAP32[$518>>2] = $520;
     continue L43;
    } else {
     $521 = HEAP32[1451]|0;
     HEAP32[$vararg_buffer143>>2] = $48;
     (_fprintf($521,25758,$vararg_buffer143)|0);
     continue L43;
    }
    break;
   }
   default: {
    $522 = $19;
    $523 = $522 & 65280;
    $524 = ($523|0)==(256);
    if ($524) {
     $525 = $18;
     $526 = $19;
     $527 = $526 & 255;
     $528 = $32;
     $529 = ((($528)) + 24|0);
     $530 = (($529) + ($527<<2)|0);
     HEAP32[$vararg_buffer146>>2] = $530;
     (_sscanf($525,25637,$vararg_buffer146)|0);
     continue L43;
    } else {
     $531 = HEAP32[1451]|0;
     HEAP32[$vararg_buffer149>>2] = $41;
     (_fprintf($531,25796,$vararg_buffer149)|0);
     continue L43;
    }
   }
   }
  } while(0);
 }
 $532 = $17;
 $533 = ($532|0)!=(0|0);
 if ($533) {
  $534 = $17;
  (_fclose($534)|0);
 }
 $535 = $33;
 $536 = ($535|0)!=(0|0);
 $537 = $25;
 $538 = ($537|0)!=(0);
 $or$cond10 = $536 | $538;
 if (!($or$cond10)) {
  $539 = (__Z16SelectTranslatorPKc($36)|0);
  $33 = $539;
 }
 __Z8SetSpeedi(3);
 HEAP32[$20>>2] = 0;
 while(1) {
  $540 = HEAP32[$20>>2]|0;
  $541 = ($540|0)<(9);
  if (!($541)) {
   break;
  }
  $542 = HEAP32[$20>>2]|0;
  $543 = HEAP32[1124]|0;
  $544 = ((($543)) + 164|0);
  $545 = (($544) + ($542<<1)|0);
  $546 = HEAP16[$545>>1]|0;
  $547 = HEAP32[$20>>2]|0;
  $548 = HEAP32[1124]|0;
  $549 = ((($548)) + 236|0);
  $550 = (($549) + ($547<<1)|0);
  HEAP16[$550>>1] = $546;
  $551 = HEAP32[$20>>2]|0;
  $552 = HEAP32[1124]|0;
  $553 = ((($552)) + 182|0);
  $554 = (($553) + ($551<<1)|0);
  $555 = HEAP16[$554>>1]|0;
  $556 = HEAP32[$20>>2]|0;
  $557 = HEAP32[1124]|0;
  $558 = ((($557)) + 254|0);
  $559 = (($558) + ($556<<1)|0);
  HEAP16[$559>>1] = $555;
  $560 = HEAP32[$20>>2]|0;
  $561 = HEAP32[1124]|0;
  $562 = ((($561)) + 200|0);
  $563 = (($562) + ($560<<1)|0);
  $564 = HEAP16[$563>>1]|0;
  $565 = HEAP32[$20>>2]|0;
  $566 = HEAP32[1124]|0;
  $567 = ((($566)) + 272|0);
  $568 = (($567) + ($565<<1)|0);
  HEAP16[$568>>1] = $564;
  $569 = HEAP32[$20>>2]|0;
  $570 = (($569) + 1)|0;
  HEAP32[$20>>2] = $570;
 }
 $571 = $25;
 $572 = ($571|0)!=(0);
 do {
  if ($572) {
   $573 = HEAP32[19149]|0;
   $33 = $573;
  } else {
   $574 = (__Z22SelectPhonemeTableNamePKc($38)|0);
   HEAP32[$20>>2] = $574;
   $575 = ($574|0)<(0);
   if ($575) {
    $576 = HEAP32[1451]|0;
    HEAP32[$vararg_buffer152>>2] = $38;
    (_fprintf($576,25821,$vararg_buffer152)|0);
    HEAP32[$20>>2] = 0;
   }
   $577 = HEAP32[$20>>2]|0;
   $578 = HEAP32[1124]|0;
   $579 = ((($578)) + 60|0);
   HEAP32[$579>>2] = $577;
   $580 = HEAP32[$20>>2]|0;
   $581 = $33;
   $582 = ((($581)) + 404|0);
   HEAP32[$582>>2] = $580;
   $583 = HEAP32[$43>>2]|0;
   $584 = $33;
   $585 = ((($584)) + 444|0);
   HEAP32[$585>>2] = $583;
   $586 = $33;
   $587 = $16;
   $588 = $587 & 4;
   (__Z14LoadDictionaryP10TranslatorPKci($586,$37,$588)|0);
   $589 = HEAP8[119724]|0;
   $590 = $589 << 24 >> 24;
   $591 = ($590|0)==(0);
   if (!($591)) {
    $592 = $31;
    $593 = $33;
    $594 = ((($593)) + 440|0);
    HEAP32[$594>>2] = $592;
    $595 = $24;
    $596 = (122068 + ($595)|0);
    HEAP8[$596>>0] = 0;
    break;
   }
   $14 = 0;
   $669 = $14;
   STACKTOP = sp;return ($669|0);
  }
 } while(0);
 $597 = $33;
 $32 = $597;
 $598 = $32;
 $599 = ((($598)) + 24|0);
 $600 = ((($599)) + 24|0);
 $601 = HEAP32[$600>>2]|0;
 HEAP32[$22>>2] = $601;
 $602 = ($601|0)!=(0);
 if ($602) {
  $603 = $33;
  $604 = HEAP32[$22>>2]|0;
  __Z13SetLengthModsP10Translatori($603,$604);
 }
 $605 = HEAP32[1124]|0;
 $606 = ((($605)) + 200|0);
 $607 = HEAP16[$606>>1]|0;
 $608 = $607 << 16 >> 16;
 $609 = ($608*105)|0;
 $610 = (($609|0) / 100)&-1;
 $611 = $610&65535;
 $612 = HEAP32[1124]|0;
 $613 = ((($612)) + 200|0);
 HEAP16[$613>>1] = $611;
 $614 = $25;
 $615 = ($614|0)!=(0);
 if (!($615)) {
  $616 = $33;
  HEAP32[19149] = $616;
 }
 HEAP32[$20>>2] = 0;
 while(1) {
  $617 = HEAP32[$20>>2]|0;
  $618 = $29;
  $619 = ($617|0)<($618|0);
  if (!($619)) {
   break;
  }
  $620 = HEAP32[$20>>2]|0;
  $621 = (($45) + ($620<<2)|0);
  $622 = HEAP32[$621>>2]|0;
  $623 = $622&65535;
  $624 = HEAP32[$20>>2]|0;
  $625 = HEAP32[19149]|0;
  $626 = ((($625)) + 424|0);
  $627 = (($626) + ($624<<1)|0);
  HEAP16[$627>>1] = $623;
  $628 = HEAP32[$20>>2]|0;
  $629 = (($628) + 1)|0;
  HEAP32[$20>>2] = $629;
 }
 HEAP32[$20>>2] = 0;
 while(1) {
  $630 = HEAP32[$20>>2]|0;
  $631 = $30;
  $632 = ($630|0)<($631|0);
  if (!($632)) {
   break;
  }
  $633 = HEAP32[$20>>2]|0;
  $634 = (($46) + ($633<<2)|0);
  $635 = HEAP32[$634>>2]|0;
  $636 = HEAP32[$20>>2]|0;
  $637 = HEAP32[19149]|0;
  $638 = ((($637)) + 424|0);
  $639 = (($638) + ($636<<1)|0);
  $640 = HEAP16[$639>>1]|0;
  $641 = $640 << 16 >> 16;
  $642 = (($641) + ($635))|0;
  $643 = $642&65535;
  HEAP16[$639>>1] = $643;
  $644 = HEAP32[$20>>2]|0;
  $645 = (($644) + 1)|0;
  HEAP32[$20>>2] = $645;
 }
 HEAP32[$20>>2] = 0;
 while(1) {
  $646 = HEAP32[$20>>2]|0;
  $647 = $28;
  $648 = ($646|0)<($647|0);
  if (!($648)) {
   break;
  }
  $649 = HEAP32[$20>>2]|0;
  $650 = (($44) + ($649<<2)|0);
  $651 = HEAP32[$650>>2]|0;
  $652 = $651&255;
  $653 = HEAP32[$20>>2]|0;
  $654 = HEAP32[19149]|0;
  $655 = ((($654)) + 408|0);
  $656 = (($655) + ($653)|0);
  HEAP8[$656>>0] = $652;
  $657 = HEAP32[$20>>2]|0;
  $658 = (($44) + ($657<<2)|0);
  $659 = HEAP32[$658>>2]|0;
  $660 = (($659) - 1)|0;
  $661 = $660&255;
  $662 = HEAP32[$20>>2]|0;
  $663 = HEAP32[19149]|0;
  $664 = ((($663)) + 416|0);
  $665 = (($664) + ($662)|0);
  HEAP8[$665>>0] = $661;
  $666 = HEAP32[$20>>2]|0;
  $667 = (($666) + 1)|0;
  HEAP32[$20>>2] = $667;
 }
 $668 = HEAP32[1124]|0;
 $14 = $668;
 $669 = $14;
 STACKTOP = sp;return ($669|0);
}
function __ZL11fgets_stripPciP8_IO_FILE($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $8 = $0;
 $9 = $1;
 $10 = $2;
 $13 = $8;
 $14 = $9;
 $15 = $10;
 $16 = (_fgets($13,$14,$15)|0);
 $17 = ($16|0)==(0|0);
 if ($17) {
  $7 = 0;
  $47 = $7;
  STACKTOP = sp;return ($47|0);
 }
 $18 = $8;
 $19 = HEAP8[$18>>0]|0;
 $20 = $19 << 24 >> 24;
 $21 = ($20|0)==(35);
 $22 = $8;
 if ($21) {
  HEAP8[$22>>0] = 0;
  $23 = $8;
  $7 = $23;
  $47 = $7;
  STACKTOP = sp;return ($47|0);
 }
 $24 = (_strlen($22)|0);
 $11 = $24;
 while(1) {
  $25 = $11;
  $26 = (($25) + -1)|0;
  $11 = $26;
  $27 = ($26|0)>(0);
  if (!($27)) {
   break;
  }
  $28 = $11;
  $29 = $8;
  $30 = (($29) + ($28)|0);
  $31 = HEAP8[$30>>0]|0;
  $32 = $31 << 24 >> 24;
  $33 = (_isspace($32)|0);
  $34 = ($33|0)!=(0);
  if (!($34)) {
   break;
  }
  $35 = $11;
  $36 = $8;
  $37 = (($36) + ($35)|0);
  HEAP8[$37>>0] = 0;
 }
 $38 = $8;
 $5 = $38;
 $6 = 26334;
 $39 = $5;
 $40 = $6;
 $3 = $39;
 $4 = $40;
 $41 = $3;
 $42 = $4;
 $43 = (_strstr($41,$42)|0);
 $12 = $43;
 $44 = ($43|0)!=(0|0);
 if ($44) {
  $45 = $12;
  HEAP8[$45>>0] = 0;
 }
 $46 = $8;
 $7 = $46;
 $47 = $7;
 STACKTOP = sp;return ($47|0);
}
function __ZL12VoiceFormantPc($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0.0, $2 = 0, $20 = 0.0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0.0, $31 = 0.0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0.0, $42 = 0.0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $vararg_buffer = 0, $vararg_ptr2 = 0, $vararg_ptr3 = 0, $vararg_ptr4 = 0, $vararg_ptr5 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $vararg_buffer = sp;
 $3 = sp + 36|0;
 $4 = sp + 32|0;
 $5 = sp + 28|0;
 $6 = sp + 24|0;
 $7 = sp + 20|0;
 $1 = $0;
 HEAP32[$4>>2] = 100;
 HEAP32[$5>>2] = 100;
 HEAP32[$6>>2] = 100;
 HEAP32[$7>>2] = 0;
 $8 = $1;
 HEAP32[$vararg_buffer>>2] = $3;
 $vararg_ptr2 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr2>>2] = $4;
 $vararg_ptr3 = ((($vararg_buffer)) + 8|0);
 HEAP32[$vararg_ptr3>>2] = $5;
 $vararg_ptr4 = ((($vararg_buffer)) + 12|0);
 HEAP32[$vararg_ptr4>>2] = $6;
 $vararg_ptr5 = ((($vararg_buffer)) + 16|0);
 HEAP32[$vararg_ptr5>>2] = $7;
 $9 = (_sscanf($8,25912,$vararg_buffer)|0);
 $2 = $9;
 $10 = $2;
 $11 = ($10|0)<(2);
 if ($11) {
  STACKTOP = sp;return;
 }
 $12 = HEAP32[$3>>2]|0;
 $13 = ($12|0)<(0);
 $14 = HEAP32[$3>>2]|0;
 $15 = ($14|0)>(8);
 $or$cond = $13 | $15;
 if ($or$cond) {
  STACKTOP = sp;return;
 }
 $16 = HEAP32[$4>>2]|0;
 $17 = ($16|0)>=(0);
 if ($17) {
  $18 = HEAP32[$4>>2]|0;
  $19 = (+($18|0));
  $20 = $19 * 2.5600100000000001;
  $21 = (~~(($20)));
  $22 = $21&65535;
  $23 = HEAP32[$3>>2]|0;
  $24 = HEAP32[1124]|0;
  $25 = ((($24)) + 164|0);
  $26 = (($25) + ($23<<1)|0);
  HEAP16[$26>>1] = $22;
 }
 $27 = HEAP32[$5>>2]|0;
 $28 = ($27|0)>=(0);
 if ($28) {
  $29 = HEAP32[$5>>2]|0;
  $30 = (+($29|0));
  $31 = $30 * 2.5600100000000001;
  $32 = (~~(($31)));
  $33 = $32&65535;
  $34 = HEAP32[$3>>2]|0;
  $35 = HEAP32[1124]|0;
  $36 = ((($35)) + 182|0);
  $37 = (($36) + ($34<<1)|0);
  HEAP16[$37>>1] = $33;
 }
 $38 = HEAP32[$6>>2]|0;
 $39 = ($38|0)>=(0);
 if ($39) {
  $40 = HEAP32[$6>>2]|0;
  $41 = (+($40|0));
  $42 = $41 * 2.5600100000000001;
  $43 = (~~(($42)));
  $44 = $43&65535;
  $45 = HEAP32[$3>>2]|0;
  $46 = HEAP32[1124]|0;
  $47 = ((($46)) + 200|0);
  $48 = (($47) + ($45<<1)|0);
  HEAP16[$48>>1] = $44;
 }
 $49 = HEAP32[$7>>2]|0;
 $50 = $49&65535;
 $51 = HEAP32[$3>>2]|0;
 $52 = HEAP32[1124]|0;
 $53 = ((($52)) + 218|0);
 $54 = (($53) + ($51<<1)|0);
 HEAP16[$54>>1] = $50;
 STACKTOP = sp;return;
}
function __ZL12Read8NumbersPcPi($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr3 = 0, $vararg_ptr4 = 0, $vararg_ptr5 = 0, $vararg_ptr6 = 0, $vararg_ptr7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $vararg_buffer = sp;
 $2 = $0;
 $3 = $1;
 $4 = $3;
 ;HEAP32[$4>>2]=0|0;HEAP32[$4+4>>2]=0|0;HEAP32[$4+8>>2]=0|0;
 $5 = $2;
 $6 = $3;
 $7 = $3;
 $8 = ((($7)) + 4|0);
 $9 = $3;
 $10 = ((($9)) + 8|0);
 $11 = $3;
 $12 = ((($11)) + 12|0);
 $13 = $3;
 $14 = ((($13)) + 16|0);
 $15 = $3;
 $16 = ((($15)) + 20|0);
 $17 = $3;
 $18 = ((($17)) + 24|0);
 $19 = $3;
 $20 = ((($19)) + 28|0);
 HEAP32[$vararg_buffer>>2] = $6;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $8;
 $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
 HEAP32[$vararg_ptr2>>2] = $10;
 $vararg_ptr3 = ((($vararg_buffer)) + 12|0);
 HEAP32[$vararg_ptr3>>2] = $12;
 $vararg_ptr4 = ((($vararg_buffer)) + 16|0);
 HEAP32[$vararg_ptr4>>2] = $14;
 $vararg_ptr5 = ((($vararg_buffer)) + 20|0);
 HEAP32[$vararg_ptr5>>2] = $16;
 $vararg_ptr6 = ((($vararg_buffer)) + 24|0);
 HEAP32[$vararg_ptr6>>2] = $18;
 $vararg_ptr7 = ((($vararg_buffer)) + 28|0);
 HEAP32[$vararg_ptr7>>2] = $20;
 $21 = (_sscanf($5,25888,$vararg_buffer)|0);
 STACKTOP = sp;return ($21|0);
}
function __ZL10LookupTunePKc($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = 0;
 while(1) {
  $4 = $3;
  $5 = HEAP32[10467]|0;
  $6 = ($4|0)<($5|0);
  if (!($6)) {
   label = 6;
   break;
  }
  $7 = $2;
  $8 = $3;
  $9 = HEAP32[10468]|0;
  $10 = (($9) + (($8*68)|0)|0);
  $11 = (_strcmp($7,$10)|0);
  $12 = ($11|0)==(0);
  $13 = $3;
  if ($12) {
   label = 4;
   break;
  }
  $14 = (($13) + 1)|0;
  $3 = $14;
 }
 if ((label|0) == 4) {
  $1 = $13;
  $15 = $1;
  STACKTOP = sp;return ($15|0);
 }
 else if ((label|0) == 6) {
  $1 = -1;
  $15 = $1;
  STACKTOP = sp;return ($15|0);
 }
 return (0)|0;
}
function __ZL18PhonemeReplacementiPc($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $vararg_buffer = 0, $vararg_ptr2 = 0, $vararg_ptr3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $vararg_buffer = sp;
 $6 = sp + 12|0;
 $7 = sp + 44|0;
 $8 = sp + 32|0;
 $2 = $0;
 $3 = $1;
 HEAP32[$6>>2] = 0;
 (_strcpy($8,25579)|0);
 $9 = $3;
 HEAP32[$vararg_buffer>>2] = $6;
 $vararg_ptr2 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr2>>2] = $7;
 $vararg_ptr3 = ((($vararg_buffer)) + 8|0);
 HEAP32[$vararg_ptr3>>2] = $8;
 $10 = (_sscanf($9,25879,$vararg_buffer)|0);
 $4 = $10;
 $11 = $4;
 $12 = ($11|0)<(2);
 $13 = HEAP32[19490]|0;
 $14 = ($13|0)>=(60);
 $or$cond = $12 | $14;
 if ($or$cond) {
  STACKTOP = sp;return;
 }
 $15 = (__Z19LookupPhonemeStringPKc($7)|0);
 $5 = $15;
 $16 = ($15|0)==(0);
 if ($16) {
  STACKTOP = sp;return;
 }
 $17 = $5;
 $18 = $17&255;
 $19 = HEAP32[19490]|0;
 $20 = (120748 + (($19*3)|0)|0);
 HEAP8[$20>>0] = $18;
 $21 = (__Z19LookupPhonemeStringPKc($8)|0);
 $22 = $21&255;
 $23 = HEAP32[19490]|0;
 $24 = (120748 + (($23*3)|0)|0);
 $25 = ((($24)) + 1|0);
 HEAP8[$25>>0] = $22;
 $26 = HEAP32[$6>>2]|0;
 $27 = $26&255;
 $28 = HEAP32[19490]|0;
 $29 = (($28) + 1)|0;
 HEAP32[19490] = $29;
 $30 = (120748 + (($28*3)|0)|0);
 $31 = ((($30)) + 2|0);
 HEAP8[$31>>0] = $27;
 STACKTOP = sp;return;
}
function __ZL13StringToWord2PKc($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $4 = 0;
 $2 = 0;
 while(1) {
  $5 = $2;
  $6 = ($5|0)<(4);
  if ($6) {
   $7 = $2;
   $8 = $1;
   $9 = (($8) + ($7)|0);
   $10 = HEAP8[$9>>0]|0;
   $11 = $10 << 24 >> 24;
   $3 = $11;
   $12 = ($11|0)!=(0);
   $20 = $12;
  } else {
   $20 = 0;
  }
  $13 = $4;
  if (!($20)) {
   break;
  }
  $14 = $13 << 8;
  $15 = $3;
  $16 = $15 & 255;
  $17 = $14 | $16;
  $4 = $17;
  $18 = $2;
  $19 = (($18) + 1)|0;
  $2 = $19;
 }
 STACKTOP = sp;return ($13|0);
}
function __Z16LoadVoiceVariantPKci($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(80|0);
 $7 = sp + 20|0;
 $3 = $0;
 $4 = $1;
 $8 = $3;
 __Z8strncpy0PcPKci($7,$8,60);
 $9 = $4;
 $10 = (__ZL23ExtractVoiceVariantNamePcii($7,$9,1)|0);
 $6 = $10;
 $11 = (__Z9LoadVoicePKci($7,0)|0);
 $5 = $11;
 $12 = ($11|0)==(0|0);
 if ($12) {
  $2 = 0;
  $20 = $2;
  STACKTOP = sp;return ($20|0);
 }
 $13 = $6;
 $14 = HEAP8[$13>>0]|0;
 $15 = $14 << 24 >> 24;
 $16 = ($15|0)!=(0);
 if ($16) {
  $17 = $6;
  $18 = (__Z9LoadVoicePKci($17,2)|0);
  $5 = $18;
 }
 $19 = $5;
 $2 = $19;
 $20 = $2;
 STACKTOP = sp;return ($20|0);
}
function __ZL23ExtractVoiceVariantNamePcii($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer5 = 0, $vararg_buffer9 = 0;
 var $vararg_ptr12 = 0, $vararg_ptr4 = 0, $vararg_ptr8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(80|0);
 $vararg_buffer9 = sp + 24|0;
 $vararg_buffer5 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $11 = sp + 64|0;
 $7 = $0;
 $8 = $1;
 $9 = $2;
 HEAP8[122168] = 0;
 HEAP32[$vararg_buffer>>2] = 47;
 (_sprintf($11,26546,$vararg_buffer)|0);
 $12 = $9;
 $13 = ($12|0)==(0);
 if ($13) {
  HEAP8[$11>>0] = 0;
 }
 $14 = $7;
 $15 = ($14|0)!=(0|0);
 do {
  if ($15) {
   $16 = $7;
   $5 = $16;
   $6 = 43;
   $17 = $5;
   $18 = $6;
   $3 = $17;
   $4 = $18;
   $19 = $3;
   $20 = $4;
   $21 = (_strchr($19,$20)|0);
   $10 = $21;
   $22 = ($21|0)!=(0|0);
   if ($22) {
    $8 = 0;
    $23 = $10;
    $24 = ((($23)) + 1|0);
    $10 = $24;
    HEAP8[$23>>0] = 0;
    $25 = $10;
    $26 = HEAP8[$25>>0]|0;
    $27 = $26 << 24 >> 24;
    $28 = (__Z9IsDigit09j($27)|0);
    $29 = ($28|0)!=(0);
    if ($29) {
     $30 = $10;
     $31 = (_atoi($30)|0);
     $8 = $31;
     break;
    } else {
     $32 = $10;
     HEAP32[$vararg_buffer1>>2] = $11;
     $vararg_ptr4 = ((($vararg_buffer1)) + 4|0);
     HEAP32[$vararg_ptr4>>2] = $32;
     (_sprintf(122168,25477,$vararg_buffer1)|0);
     break;
    }
   }
  }
 } while(0);
 $33 = $8;
 $34 = ($33|0)>(0);
 if (!($34)) {
  STACKTOP = sp;return (122168|0);
 }
 $35 = $8;
 $36 = ($35|0)<(10);
 $37 = $8;
 if ($36) {
  HEAP32[$vararg_buffer5>>2] = $11;
  $vararg_ptr8 = ((($vararg_buffer5)) + 4|0);
  HEAP32[$vararg_ptr8>>2] = $37;
  (_sprintf(122168,26551,$vararg_buffer5)|0);
  STACKTOP = sp;return (122168|0);
 } else {
  $38 = (($37) - 10)|0;
  HEAP32[$vararg_buffer9>>2] = $11;
  $vararg_ptr12 = ((($vararg_buffer9)) + 4|0);
  HEAP32[$vararg_ptr12>>2] = $38;
  (_sprintf(122168,26557,$vararg_buffer9)|0);
  STACKTOP = sp;return (122168|0);
 }
 return (0)|0;
}
function __Z17SelectVoiceByNamePP12espeak_VOICEPKc($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 160|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(160|0);
 $vararg_buffer = sp;
 $16 = sp + 104|0;
 $17 = sp + 64|0;
 $7 = $0;
 $8 = $1;
 $10 = -1;
 $11 = -1;
 $12 = -1;
 $18 = $7;
 $19 = ($18|0)==(0|0);
 if ($19) {
  $20 = HEAP32[19869]|0;
  $21 = ($20|0)==(0);
  if ($21) {
   (_espeak_ListVoices(0)|0);
  }
  $7 = 79480;
 }
 $22 = $8;
 __Z8strncpy0PcPKci($17,$22,40);
 $4 = $17;
 $5 = 43;
 $23 = $4;
 $24 = $5;
 $2 = $23;
 $3 = $24;
 $25 = $2;
 $26 = $3;
 $27 = (_strchr($25,$26)|0);
 $14 = $27;
 $28 = ($27|0)!=(0|0);
 if ($28) {
  $29 = $14;
  HEAP8[$29>>0] = 0;
  $30 = $14;
  $31 = ((($30)) + 1|0);
  $14 = $31;
 }
 HEAP32[$vararg_buffer>>2] = 47;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $17;
 (_sprintf($16,26563,$vararg_buffer)|0);
 $32 = (_strlen($16)|0);
 $15 = $32;
 $9 = 0;
 while(1) {
  $33 = $9;
  $34 = $7;
  $35 = (($34) + ($33<<2)|0);
  $36 = HEAP32[$35>>2]|0;
  $37 = ($36|0)!=(0|0);
  if (!($37)) {
   break;
  }
  $38 = $9;
  $39 = $7;
  $40 = (($39) + ($38<<2)|0);
  $41 = HEAP32[$40>>2]|0;
  $42 = HEAP32[$41>>2]|0;
  $43 = (_strcmp($17,$42)|0);
  $44 = ($43|0)==(0);
  $45 = $9;
  if ($44) {
   label = 10;
   break;
  }
  $46 = $7;
  $47 = (($46) + ($45<<2)|0);
  $48 = HEAP32[$47>>2]|0;
  $49 = ((($48)) + 8|0);
  $50 = HEAP32[$49>>2]|0;
  $13 = $50;
  $51 = $13;
  $52 = (_strcmp($17,$51)|0);
  $53 = ($52|0)==(0);
  if ($53) {
   $54 = $9;
   $10 = $54;
  } else {
   $55 = $13;
   $56 = (_strlen($55)|0);
   $57 = $15;
   $58 = (($56) - ($57))|0;
   $59 = $13;
   $60 = (($59) + ($58)|0);
   $61 = (_strcmp($16,$60)|0);
   $62 = ($61|0)==(0);
   if ($62) {
    $63 = $9;
    $11 = $63;
   }
  }
  $64 = $9;
  $65 = (($64) + 1)|0;
  $9 = $65;
 }
 if ((label|0) == 10) {
  $12 = $45;
 }
 $66 = $12;
 $67 = ($66|0)<(0);
 if ($67) {
  $68 = $10;
  $12 = $68;
  $69 = $12;
  $70 = ($69|0)<(0);
  if ($70) {
   $71 = $11;
   $12 = $71;
  }
 }
 $72 = $12;
 $73 = ($72|0)<(0);
 if ($73) {
  $6 = 0;
  $78 = $6;
  STACKTOP = sp;return ($78|0);
 } else {
  $74 = $12;
  $75 = $7;
  $76 = (($75) + ($74<<2)|0);
  $77 = HEAP32[$76>>2]|0;
  $6 = $77;
  $78 = $6;
  STACKTOP = sp;return ($78|0);
 }
 return (0)|0;
}
function _espeak_ListVoices($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 208|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(208|0);
 $vararg_buffer = sp;
 $2 = sp + 24|0;
 $1 = $0;
 __Z13FreeVoiceListv();
 HEAP32[$vararg_buffer>>2] = 119484;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = 47;
 (_sprintf($2,26568,$vararg_buffer)|0);
 $6 = (_strlen($2)|0);
 $7 = (($6) + 1)|0;
 HEAP32[20120] = $7;
 __ZL9GetVoicesPKc($2);
 $8 = HEAP32[19869]|0;
 $9 = (79480 + ($8<<2)|0);
 HEAP32[$9>>2] = 0;
 $10 = HEAP32[20121]|0;
 $11 = HEAP32[19869]|0;
 $12 = (($11) + 1)|0;
 $13 = $12<<2;
 $14 = (_realloc($10,$13)|0);
 HEAP32[20121] = $14;
 $15 = HEAP32[19869]|0;
 _qsort(79480,$15,4,26);
 $16 = $1;
 $17 = ($16|0)!=(0|0);
 if ($17) {
  $18 = $1;
  $19 = HEAP32[20121]|0;
  (__ZL14SetVoiceScoresP12espeak_VOICEPS0_i($18,$19,1)|0);
  $56 = HEAP32[20121]|0;
  STACKTOP = sp;return ($56|0);
 }
 $4 = 0;
 $3 = 0;
 while(1) {
  $20 = $3;
  $21 = (79480 + ($20<<2)|0);
  $22 = HEAP32[$21>>2]|0;
  $5 = $22;
  $23 = ($22|0)!=(0|0);
  if (!($23)) {
   break;
  }
  $24 = $5;
  $25 = ((($24)) + 4|0);
  $26 = HEAP32[$25>>2]|0;
  $27 = HEAP8[$26>>0]|0;
  $28 = $27 << 24 >> 24;
  $29 = ($28|0)!=(0);
  if ($29) {
   $30 = $5;
   $31 = ((($30)) + 4|0);
   $32 = HEAP32[$31>>2]|0;
   $33 = ((($32)) + 1|0);
   $34 = (_strcmp($33,25542)|0);
   $35 = ($34|0)!=(0);
   if ($35) {
    $36 = $5;
    $37 = ((($36)) + 8|0);
    $38 = HEAP32[$37>>2]|0;
    $39 = (_memcmp($38,26579,3)|0);
    $40 = ($39|0)!=(0);
    if ($40) {
     $41 = $5;
     $42 = ((($41)) + 8|0);
     $43 = HEAP32[$42>>2]|0;
     $44 = (_memcmp($43,26583,5)|0);
     $45 = ($44|0)!=(0);
     if ($45) {
      $46 = $5;
      $47 = $4;
      $48 = (($47) + 1)|0;
      $4 = $48;
      $49 = HEAP32[20121]|0;
      $50 = (($49) + ($47<<2)|0);
      HEAP32[$50>>2] = $46;
     }
    }
   }
  }
  $51 = $3;
  $52 = (($51) + 1)|0;
  $3 = $52;
 }
 $53 = $4;
 $54 = HEAP32[20121]|0;
 $55 = (($54) + ($53<<2)|0);
 HEAP32[$55>>2] = 0;
 $56 = HEAP32[20121]|0;
 STACKTOP = sp;return ($56|0);
}
function __Z13FreeVoiceListv() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $0 = 0;
 while(1) {
  $1 = $0;
  $2 = HEAP32[19869]|0;
  $3 = ($1|0)<($2|0);
  if (!($3)) {
   break;
  }
  $4 = $0;
  $5 = (79480 + ($4<<2)|0);
  $6 = HEAP32[$5>>2]|0;
  $7 = ($6|0)!=(0|0);
  if ($7) {
   $8 = $0;
   $9 = (79480 + ($8<<2)|0);
   $10 = HEAP32[$9>>2]|0;
   _free($10);
   $11 = $0;
   $12 = (79480 + ($11<<2)|0);
   HEAP32[$12>>2] = 0;
  }
  $13 = $0;
  $14 = (($13) + 1)|0;
  $0 = $14;
 }
 HEAP32[19869] = 0;
 STACKTOP = sp;return;
}
function __ZL9GetVoicesPKc($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $vararg_buffer = 0, $vararg_ptr2 = 0, $vararg_ptr3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 304|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(304|0);
 $vararg_buffer = sp;
 $5 = sp + 36|0;
 $1 = $0;
 $8 = $1;
 $9 = (_opendir($8)|0);
 $6 = $9;
 $10 = ($9|0)==(0|0);
 if ($10) {
  STACKTOP = sp;return;
 }
 while(1) {
  $11 = $6;
  $12 = (_readdir($11)|0);
  $7 = $12;
  $13 = ($12|0)==(0|0);
  $14 = HEAP32[19869]|0;
  $15 = ($14|0)>=(248);
  $or$cond = $13 | $15;
  if ($or$cond) {
   break;
  }
  $16 = $7;
  $17 = ((($16)) + 11|0);
  $18 = HEAP8[$17>>0]|0;
  $19 = $18 << 24 >> 24;
  $20 = ($19|0)==(46);
  if ($20) {
   continue;
  }
  $21 = $1;
  $22 = $7;
  $23 = ((($22)) + 11|0);
  HEAP32[$vararg_buffer>>2] = $21;
  $vararg_ptr2 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr2>>2] = 47;
  $vararg_ptr3 = ((($vararg_buffer)) + 8|0);
  HEAP32[$vararg_ptr3>>2] = $23;
  (_sprintf($5,26611,$vararg_buffer)|0);
  $24 = (__Z13GetFileLengthPKc($5)|0);
  $4 = $24;
  $25 = $4;
  $26 = ($25|0)==(-2);
  if ($26) {
   __ZL9GetVoicesPKc($5);
   continue;
  }
  $27 = $4;
  $28 = ($27|0)>(0);
  if (!($28)) {
   continue;
  }
  $29 = (_fopen($5,25527)|0);
  $2 = $29;
  $30 = ($29|0)==(0|0);
  if ($30) {
   continue;
  }
  $31 = $2;
  $32 = HEAP32[20120]|0;
  $33 = (($5) + ($32)|0);
  $34 = $7;
  $35 = ((($34)) + 11|0);
  $36 = (__ZL13ReadVoiceFileP8_IO_FILEPKcS2_($31,$33,$35)|0);
  $3 = $36;
  $37 = $2;
  (_fclose($37)|0);
  $38 = $3;
  $39 = ($38|0)!=(0|0);
  if (!($39)) {
   continue;
  }
  $40 = $3;
  $41 = HEAP32[19869]|0;
  $42 = (($41) + 1)|0;
  HEAP32[19869] = $42;
  $43 = (79480 + ($41<<2)|0);
  HEAP32[$43>>2] = $40;
 }
 $44 = $6;
 (_closedir($44)|0);
 STACKTOP = sp;return;
}
function __ZL15VoiceNameSorterPKvS0_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $3 = $0;
 $4 = $1;
 $8 = $3;
 $9 = HEAP32[$8>>2]|0;
 $6 = $9;
 $10 = $4;
 $11 = HEAP32[$10>>2]|0;
 $7 = $11;
 $12 = $6;
 $13 = ((($12)) + 4|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = ((($14)) + 1|0);
 $16 = $7;
 $17 = ((($16)) + 4|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = ((($18)) + 1|0);
 $20 = (_strcmp($15,$19)|0);
 $5 = $20;
 $21 = ($20|0)!=(0);
 if ($21) {
  $22 = $5;
  $2 = $22;
  $41 = $2;
  STACKTOP = sp;return ($41|0);
 }
 $23 = $6;
 $24 = ((($23)) + 4|0);
 $25 = HEAP32[$24>>2]|0;
 $26 = HEAP8[$25>>0]|0;
 $27 = $26 << 24 >> 24;
 $28 = $7;
 $29 = ((($28)) + 4|0);
 $30 = HEAP32[$29>>2]|0;
 $31 = HEAP8[$30>>0]|0;
 $32 = $31 << 24 >> 24;
 $33 = (($27) - ($32))|0;
 $5 = $33;
 $34 = ($33|0)!=(0);
 if ($34) {
  $35 = $5;
  $2 = $35;
  $41 = $2;
  STACKTOP = sp;return ($41|0);
 } else {
  $36 = $6;
  $37 = HEAP32[$36>>2]|0;
  $38 = $7;
  $39 = HEAP32[$38>>2]|0;
  $40 = (_strcmp($37,$39)|0);
  $2 = $40;
  $41 = $2;
  STACKTOP = sp;return ($41|0);
 }
 return (0)|0;
}
function __ZL14SetVoiceScoresP12espeak_VOICEPS0_i($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
 var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0;
 var $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 368|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(368|0);
 $vararg_buffer = sp;
 $13 = sp + 288|0;
 $14 = sp + 48|0;
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $10 = 0;
 $11 = 0;
 $15 = $4;
 $16 = ((($15)) + 4|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = ($17|0)!=(0|0);
 L1: do {
  if ($18) {
   $19 = $4;
   $20 = ((($19)) + 4|0);
   $21 = HEAP32[$20>>2]|0;
   $22 = HEAP8[$21>>0]|0;
   $23 = $22 << 24 >> 24;
   $24 = ($23|0)!=(0);
   if ($24) {
    $10 = 1;
    $25 = $4;
    $26 = ((($25)) + 4|0);
    $27 = HEAP32[$26>>2]|0;
    $28 = (_strlen($27)|0);
    $11 = $28;
    $7 = 0;
    while(1) {
     $29 = $7;
     $30 = $11;
     $31 = ($29|0)<=($30|0);
     $32 = $7;
     $33 = ($32>>>0)<(80);
     $34 = $31 ? $33 : 0;
     if (!($34)) {
      break L1;
     }
     $35 = $7;
     $36 = $4;
     $37 = ((($36)) + 4|0);
     $38 = HEAP32[$37>>2]|0;
     $39 = (($38) + ($35)|0);
     $40 = HEAP8[$39>>0]|0;
     $41 = $40 << 24 >> 24;
     $42 = (_tolower($41)|0);
     $43 = $42&255;
     $44 = $7;
     $45 = (($13) + ($44)|0);
     HEAP8[$45>>0] = $43;
     $46 = $43 << 24 >> 24;
     $47 = ($46|0)==(45);
     if ($47) {
      $48 = $10;
      $49 = (($48) + 1)|0;
      $10 = $49;
     }
     $50 = $7;
     $51 = (($50) + 1)|0;
     $7 = $51;
    }
   }
  }
 } while(0);
 $52 = $10;
 $53 = ($52|0)==(1);
 if ($53) {
  $54 = $6;
  $55 = $54 & 1;
  $56 = ($55|0)!=(0);
  if ($56) {
   $57 = (_strcmp($13,26170)|0);
   $58 = ($57|0)==(0);
   if ($58) {
    $59 = ((($13)) + 2|0);
    HEAP8[$59>>0] = 0;
    $11 = 2;
   }
   HEAP32[$vararg_buffer>>2] = 119484;
   $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
   HEAP32[$vararg_ptr1>>2] = $13;
   (_sprintf($14,26589,$vararg_buffer)|0);
   $60 = (__Z13GetFileLengthPKc($14)|0);
   $61 = ($60|0)==(-2);
   if ($61) {
    $62 = $11;
    $63 = (($62) + 1)|0;
    $11 = $63;
    $64 = (($13) + ($62)|0);
    HEAP8[$64>>0] = 47;
    $65 = $11;
    $66 = (($13) + ($65)|0);
    HEAP8[$66>>0] = 0;
    $10 = -1;
   }
  }
 }
 $9 = 0;
 $7 = 0;
 while(1) {
  $67 = $7;
  $68 = HEAP32[19869]|0;
  $69 = ($67|0)<($68|0);
  if (!($69)) {
   break;
  }
  $70 = $7;
  $71 = (79480 + ($70<<2)|0);
  $72 = HEAP32[$71>>2]|0;
  $12 = $72;
  $73 = $6;
  $74 = $73 & 1;
  $75 = ($74|0)==(0);
  if ($75) {
   $76 = $12;
   $77 = ((($76)) + 8|0);
   $78 = HEAP32[$77>>2]|0;
   $79 = (_memcmp($78,26579,3)|0);
   $80 = ($79|0)==(0);
   if (!($80)) {
    label = 18;
   }
  } else {
   label = 18;
  }
  if ((label|0) == 18) {
   label = 0;
   $81 = $4;
   $82 = $10;
   $83 = $11;
   $84 = $7;
   $85 = (79480 + ($84<<2)|0);
   $86 = HEAP32[$85>>2]|0;
   $87 = (__ZL10ScoreVoiceP12espeak_VOICEPKciiS0_($81,$13,$82,$83,$86)|0);
   $8 = $87;
   $88 = ($87|0)>(0);
   if ($88) {
    $89 = $12;
    $90 = $9;
    $91 = (($90) + 1)|0;
    $9 = $91;
    $92 = $5;
    $93 = (($92) + ($90<<2)|0);
    HEAP32[$93>>2] = $89;
    $94 = $8;
    $95 = $12;
    $96 = ((($95)) + 16|0);
    HEAP32[$96>>2] = $94;
   }
  }
  $97 = $7;
  $98 = (($97) + 1)|0;
  $7 = $98;
 }
 $99 = $9;
 $100 = $5;
 $101 = (($100) + ($99<<2)|0);
 HEAP32[$101>>2] = 0;
 $102 = $9;
 $103 = ($102|0)==(0);
 if ($103) {
  $3 = 0;
  $107 = $3;
  STACKTOP = sp;return ($107|0);
 } else {
  $104 = $5;
  $105 = $9;
  _qsort($104,$105,4,27);
  $106 = $9;
  $3 = $106;
  $107 = $3;
  STACKTOP = sp;return ($107|0);
 }
 return (0)|0;
}
function __ZL10ScoreVoiceP12espeak_VOICEPKciiS0_($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$ = 0, $$1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0;
 var $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0;
 var $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0;
 var $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0;
 var $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(80|0);
 $6 = $0;
 $7 = $1;
 $8 = $2;
 $9 = $3;
 $10 = $4;
 $19 = 0;
 $24 = $10;
 $25 = ((($24)) + 4|0);
 $26 = HEAP32[$25>>2]|0;
 $12 = $26;
 $27 = $8;
 $28 = ($27|0)<(0);
 if ($28) {
  $29 = $10;
  $30 = ((($29)) + 8|0);
  $31 = HEAP32[$30>>2]|0;
  $32 = $7;
  $33 = $9;
  $34 = (_memcmp($31,$32,$33)|0);
  $35 = ($34|0)==(0);
  if ($35) {
   $5 = 100;
   $237 = $5;
   STACKTOP = sp;return ($237|0);
  } else {
   $5 = 0;
   $237 = $5;
   STACKTOP = sp;return ($237|0);
  }
 }
 $36 = $8;
 $37 = ($36|0)==(0);
 L9: do {
  if ($37) {
   $19 = 100;
  } else {
   $38 = $12;
   $39 = HEAP8[$38>>0]|0;
   $40 = $39 << 24 >> 24;
   $41 = ($40|0)==(0);
   if ($41) {
    $42 = $7;
    $43 = (_strcmp($42,26602)|0);
    $44 = ($43|0)==(0);
    if ($44) {
     $19 = 100;
    }
   }
   while(1) {
    $45 = $12;
    $46 = HEAP8[$45>>0]|0;
    $47 = $46 << 24 >> 24;
    $48 = ($47|0)!=(0);
    if (!($48)) {
     break L9;
    }
    $49 = $12;
    $50 = ((($49)) + 1|0);
    $12 = $50;
    $51 = HEAP8[$49>>0]|0;
    $52 = $51 << 24 >> 24;
    $15 = $52;
    $17 = 1;
    $18 = 0;
    $16 = 1;
    $11 = 0;
    while(1) {
     $53 = $11;
     $54 = $9;
     $55 = ($53|0)>=($54|0);
     if ($55) {
      label = 14;
     } else {
      $56 = $11;
      $57 = $7;
      $58 = (($57) + ($56)|0);
      $59 = HEAP8[$58>>0]|0;
      $60 = $59 << 24 >> 24;
      $13 = $60;
      $61 = ($60|0)==(45);
      if ($61) {
       label = 14;
      }
     }
     if ((label|0) == 14) {
      label = 0;
      $13 = 0;
     }
     $62 = $11;
     $63 = $12;
     $64 = (($63) + ($62)|0);
     $65 = HEAP8[$64>>0]|0;
     $66 = $65 << 24 >> 24;
     $14 = $66;
     $67 = ($66|0)==(45);
     $$ = $67 ? 0 : $66;
     $14 = $$;
     $68 = $13;
     $69 = $14;
     $70 = ($68|0)!=($69|0);
     if ($70) {
      $17 = 0;
     }
     $71 = $11;
     $72 = $12;
     $73 = (($72) + ($71)|0);
     $74 = HEAP8[$73>>0]|0;
     $75 = $74 << 24 >> 24;
     $76 = ($75|0)==(45);
     if ($76) {
      $77 = $16;
      $78 = (($77) + 1)|0;
      $16 = $78;
      $79 = $17;
      $80 = ($79|0)!=(0);
      if ($80) {
       $81 = $18;
       $82 = (($81) + 1)|0;
       $18 = $82;
      }
     }
     $83 = $11;
     $84 = $12;
     $85 = (($84) + ($83)|0);
     $86 = HEAP8[$85>>0]|0;
     $87 = $86 << 24 >> 24;
     $88 = ($87|0)==(0);
     $89 = $11;
     $90 = (($89) + 1)|0;
     if ($88) {
      break;
     }
     $11 = $90;
    }
    $91 = $12;
    $92 = (($91) + ($90)|0);
    $12 = $92;
    $93 = $17;
    $94 = $18;
    $95 = (($94) + ($93))|0;
    $18 = $95;
    $96 = $18;
    $97 = ($96|0)==(0);
    if ($97) {
     continue;
    }
    $20 = 5;
    $98 = $8;
    $99 = $18;
    $100 = (($98) - ($99))|0;
    $23 = $100;
    $101 = ($100|0)>(0);
    if ($101) {
     $102 = $23;
     $103 = $20;
     $104 = (($103) - ($102))|0;
     $20 = $104;
    }
    $105 = $16;
    $106 = $18;
    $107 = (($105) - ($106))|0;
    $23 = $107;
    $108 = ($107|0)>(0);
    if ($108) {
     $109 = $23;
     $110 = $20;
     $111 = (($110) - ($109))|0;
     $20 = $111;
    }
    $112 = $20;
    $113 = ($112*100)|0;
    $114 = $15;
    $115 = $114<<1;
    $116 = (($113) - ($115))|0;
    $20 = $116;
    $117 = $20;
    $118 = $19;
    $119 = ($117|0)>($118|0);
    if (!($119)) {
     continue;
    }
    $120 = $20;
    $19 = $120;
   }
  }
 } while(0);
 $121 = $19;
 $122 = ($121|0)==(0);
 if ($122) {
  $5 = 0;
  $237 = $5;
  STACKTOP = sp;return ($237|0);
 }
 $123 = $6;
 $124 = HEAP32[$123>>2]|0;
 $125 = ($124|0)!=(0|0);
 do {
  if ($125) {
   $126 = $6;
   $127 = HEAP32[$126>>2]|0;
   $128 = $10;
   $129 = HEAP32[$128>>2]|0;
   $130 = (_strcmp($127,$129)|0);
   $131 = ($130|0)==(0);
   if ($131) {
    $132 = $19;
    $133 = (($132) + 500)|0;
    $19 = $133;
    break;
   }
   $134 = $6;
   $135 = HEAP32[$134>>2]|0;
   $136 = $10;
   $137 = ((($136)) + 8|0);
   $138 = HEAP32[$137>>2]|0;
   $139 = (_strcmp($135,$138)|0);
   $140 = ($139|0)==(0);
   if ($140) {
    $141 = $19;
    $142 = (($141) + 400)|0;
    $19 = $142;
   }
  }
 } while(0);
 $143 = $6;
 $144 = ((($143)) + 12|0);
 $145 = HEAP8[$144>>0]|0;
 $146 = $145&255;
 $147 = ($146|0)==(1);
 if ($147) {
  label = 38;
 } else {
  $148 = $6;
  $149 = ((($148)) + 12|0);
  $150 = HEAP8[$149>>0]|0;
  $151 = $150&255;
  $152 = ($151|0)==(2);
  if ($152) {
   label = 38;
  }
 }
 do {
  if ((label|0) == 38) {
   $153 = $10;
   $154 = ((($153)) + 12|0);
   $155 = HEAP8[$154>>0]|0;
   $156 = $155&255;
   $157 = ($156|0)==(1);
   if (!($157)) {
    $158 = $10;
    $159 = ((($158)) + 12|0);
    $160 = HEAP8[$159>>0]|0;
    $161 = $160&255;
    $162 = ($161|0)==(2);
    if (!($162)) {
     break;
    }
   }
   $163 = $6;
   $164 = ((($163)) + 12|0);
   $165 = HEAP8[$164>>0]|0;
   $166 = $165&255;
   $167 = $10;
   $168 = ((($167)) + 12|0);
   $169 = HEAP8[$168>>0]|0;
   $170 = $169&255;
   $171 = ($166|0)==($170|0);
   $172 = $19;
   if ($171) {
    $173 = (($172) + 50)|0;
    $19 = $173;
    break;
   } else {
    $174 = (($172) - 50)|0;
    $19 = $174;
    break;
   }
  }
 } while(0);
 $175 = $6;
 $176 = ((($175)) + 13|0);
 $177 = HEAP8[$176>>0]|0;
 $178 = $177&255;
 $179 = ($178|0)<=(12);
 if ($179) {
  $180 = $10;
  $181 = ((($180)) + 12|0);
  $182 = HEAP8[$181>>0]|0;
  $183 = $182&255;
  $184 = ($183|0)==(2);
  if ($184) {
   $185 = $10;
   $186 = ((($185)) + 13|0);
   $187 = HEAP8[$186>>0]|0;
   $188 = $187&255;
   $189 = ($188|0)>(12);
   if ($189) {
    $190 = $19;
    $191 = (($190) + 5)|0;
    $19 = $191;
   }
  }
 }
 $192 = $10;
 $193 = ((($192)) + 13|0);
 $194 = HEAP8[$193>>0]|0;
 $195 = $194&255;
 $196 = ($195|0)!=(0);
 if ($196) {
  $197 = $6;
  $198 = ((($197)) + 13|0);
  $199 = HEAP8[$198>>0]|0;
  $200 = $199&255;
  $201 = ($200|0)==(0);
  if ($201) {
   $22 = 30;
  } else {
   $202 = $6;
   $203 = ((($202)) + 13|0);
   $204 = HEAP8[$203>>0]|0;
   $205 = $204&255;
   $22 = $205;
  }
  $206 = $22;
  $207 = ($206*100)|0;
  $208 = $10;
  $209 = ((($208)) + 13|0);
  $210 = HEAP8[$209>>0]|0;
  $211 = $210&255;
  $212 = (($207|0) / ($211|0))&-1;
  $21 = $212;
  $213 = $21;
  $214 = ($213|0)<(100);
  if ($214) {
   $215 = $21;
   $216 = (10000 / ($215|0))&-1;
   $21 = $216;
  }
  $217 = $21;
  $218 = (($217) - 100)|0;
  $219 = (($218|0) / 10)&-1;
  $21 = $219;
  $220 = $21;
  $221 = (5 - ($220))|0;
  $20 = $221;
  $222 = $20;
  $223 = ($222|0)>(0);
  $$1 = $223 ? 0 : $221;
  $20 = $$1;
  $224 = $19;
  $225 = $20;
  $226 = (($224) + ($225))|0;
  $19 = $226;
  $227 = $6;
  $228 = ((($227)) + 13|0);
  $229 = HEAP8[$228>>0]|0;
  $230 = $229&255;
  $231 = ($230|0)>(0);
  if ($231) {
   $232 = $19;
   $233 = (($232) + 10)|0;
   $19 = $233;
  }
 }
 $234 = $19;
 $235 = ($234|0)<(1);
 if ($235) {
  $19 = 1;
 }
 $236 = $19;
 $5 = $236;
 $237 = $5;
 STACKTOP = sp;return ($237|0);
}
function __ZL16VoiceScoreSorterPKvS0_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $3 = $0;
 $4 = $1;
 $8 = $3;
 $9 = HEAP32[$8>>2]|0;
 $6 = $9;
 $10 = $4;
 $11 = HEAP32[$10>>2]|0;
 $7 = $11;
 $12 = $7;
 $13 = ((($12)) + 16|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = $6;
 $16 = ((($15)) + 16|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = (($14) - ($17))|0;
 $5 = $18;
 $19 = ($18|0)!=(0);
 if ($19) {
  $20 = $5;
  $2 = $20;
  $26 = $2;
  STACKTOP = sp;return ($26|0);
 } else {
  $21 = $6;
  $22 = HEAP32[$21>>2]|0;
  $23 = $7;
  $24 = HEAP32[$23>>2]|0;
  $25 = (_strcmp($22,$24)|0);
  $2 = $25;
  $26 = $2;
  STACKTOP = sp;return ($26|0);
 }
 return (0)|0;
}
function __ZL13ReadVoiceFileP8_IO_FILEPKcS2_($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0;
 var $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0;
 var $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0;
 var $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0;
 var $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $vararg_buffer = 0, $vararg_buffer2 = 0, $vararg_buffer6 = 0, $vararg_ptr1 = 0, $vararg_ptr5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 736|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(736|0);
 $vararg_buffer6 = sp + 16|0;
 $vararg_buffer2 = sp + 8|0;
 $vararg_buffer = sp;
 $7 = sp + 616|0;
 $8 = sp + 536|0;
 $9 = sp + 456|0;
 $10 = sp + 376|0;
 $11 = sp + 72|0;
 $17 = sp + 32|0;
 $18 = sp + 28|0;
 $19 = sp + 24|0;
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $13 = 0;
 $14 = 0;
 HEAP32[$19>>2] = 4;
 HEAP8[$8>>0] = 0;
 HEAP8[$9>>0] = 0;
 HEAP32[$18>>2] = 0;
 while(1) {
  $21 = $4;
  $22 = (__ZL11fgets_stripPciP8_IO_FILE($7,120,$21)|0);
  $23 = ($22|0)!=(0|0);
  if (!($23)) {
   break;
  }
  $24 = (_memcmp($7,25927,4)|0);
  $25 = ($24|0)==(0);
  if ($25) {
   $26 = ((($7)) + 4|0);
   $15 = $26;
   while(1) {
    $27 = $15;
    $28 = HEAP8[$27>>0]|0;
    $29 = $28 << 24 >> 24;
    $30 = (_isspace($29)|0);
    $31 = ($30|0)!=(0);
    if (!($31)) {
     break;
    }
    $32 = $15;
    $33 = ((($32)) + 1|0);
    $15 = $33;
   }
   $34 = $15;
   __Z8strncpy0PcPKci($8,$34,80);
   continue;
  }
  $35 = (_memcmp($7,25932,8)|0);
  $36 = ($35|0)==(0);
  if ($36) {
   HEAP32[$17>>2] = 5;
   HEAP8[$10>>0] = 0;
   $37 = ((($7)) + 8|0);
   HEAP32[$vararg_buffer>>2] = $10;
   $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
   HEAP32[$vararg_ptr1>>2] = $17;
   (_sscanf($37,25536,$vararg_buffer)|0);
   $38 = (_strlen($10)|0);
   $39 = (($38) + 2)|0;
   $12 = $39;
   $40 = $12;
   $41 = $13;
   $42 = (300 - ($41))|0;
   $43 = (($42) - 1)|0;
   $44 = ($40>>>0)<($43>>>0);
   if (!($44)) {
    continue;
   }
   $45 = HEAP32[$17>>2]|0;
   $46 = $45&255;
   $47 = $13;
   $48 = (($11) + ($47)|0);
   HEAP8[$48>>0] = $46;
   $49 = $13;
   $50 = (($49) + 1)|0;
   $51 = (($11) + ($50)|0);
   (_strcpy($51,$10)|0);
   $52 = $12;
   $53 = $13;
   $54 = (($53) + ($52))|0;
   $13 = $54;
   $55 = $14;
   $56 = (($55) + 1)|0;
   $14 = $56;
   continue;
  }
  $57 = (_memcmp($7,25941,6)|0);
  $58 = ($57|0)==(0);
  if ($58) {
   $59 = ((($7)) + 6|0);
   HEAP32[$vararg_buffer2>>2] = $9;
   $vararg_ptr5 = ((($vararg_buffer2)) + 4|0);
   HEAP32[$vararg_ptr5>>2] = $18;
   (_sscanf($59,25536,$vararg_buffer2)|0);
   continue;
  }
  $60 = (_memcmp($7,26602,8)|0);
  $61 = ($60|0)==(0);
  if (!($61)) {
   continue;
  }
  $62 = ((($7)) + 8|0);
  HEAP32[$vararg_buffer6>>2] = $19;
  (_sscanf($62,25637,$vararg_buffer6)|0);
 }
 $63 = $13;
 $64 = (($63) + 1)|0;
 $13 = $64;
 $65 = (($11) + ($63)|0);
 HEAP8[$65>>0] = 0;
 $66 = (__Z10LookupMnemP8MNEM_TABPKc(4404,$9)|0);
 $20 = $66;
 $67 = $14;
 $68 = ($67|0)==(0);
 if ($68) {
  $3 = 0;
  $129 = $3;
  STACKTOP = sp;return ($129|0);
 }
 $69 = $13;
 $70 = (24 + ($69))|0;
 $71 = $5;
 $72 = (_strlen($71)|0);
 $73 = (($70) + ($72))|0;
 $74 = (_strlen($8)|0);
 $75 = (($73) + ($74))|0;
 $76 = (($75) + 3)|0;
 $77 = (_calloc($76,1)|0);
 $15 = $77;
 $78 = $15;
 $16 = $78;
 $79 = $15;
 $80 = ((($79)) + 24|0);
 $15 = $80;
 $81 = $15;
 $82 = $13;
 _memcpy(($81|0),($11|0),($82|0))|0;
 $83 = $15;
 $84 = $16;
 $85 = ((($84)) + 4|0);
 HEAP32[$85>>2] = $83;
 $86 = $13;
 $87 = $15;
 $88 = (($87) + ($86)|0);
 $89 = $5;
 (_strcpy($88,$89)|0);
 $90 = $13;
 $91 = $15;
 $92 = (($91) + ($90)|0);
 $93 = $16;
 $94 = ((($93)) + 8|0);
 HEAP32[$94>>2] = $92;
 $95 = $13;
 $96 = $15;
 $97 = (($96) + ($95)|0);
 $98 = $16;
 HEAP32[$98>>2] = $97;
 $99 = HEAP8[$8>>0]|0;
 $100 = $99 << 24 >> 24;
 $101 = ($100|0)!=(0);
 if ($101) {
  $102 = $5;
  $103 = (_strlen($102)|0);
  $104 = (($103) + 1)|0;
  $105 = $13;
  $106 = (($105) + ($104))|0;
  $13 = $106;
  $107 = $13;
  $108 = $15;
  $109 = (($108) + ($107)|0);
  (_strcpy($109,$8)|0);
  $110 = $13;
  $111 = $15;
  $112 = (($111) + ($110)|0);
  $113 = $16;
  HEAP32[$113>>2] = $112;
 }
 $114 = HEAP32[$18>>2]|0;
 $115 = $114&255;
 $116 = $16;
 $117 = ((($116)) + 13|0);
 HEAP8[$117>>0] = $115;
 $118 = $20;
 $119 = $118&255;
 $120 = $16;
 $121 = ((($120)) + 12|0);
 HEAP8[$121>>0] = $119;
 $122 = $16;
 $123 = ((($122)) + 14|0);
 HEAP8[$123>>0] = 0;
 $124 = HEAP32[$19>>2]|0;
 $125 = $124&255;
 $126 = $16;
 $127 = ((($126)) + 15|0);
 HEAP8[$127>>0] = $125;
 $128 = $16;
 $3 = $128;
 $129 = $3;
 STACKTOP = sp;return ($129|0);
}
function __Z11SelectVoiceP12espeak_VOICEPi($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0;
 var $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0;
 var $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0;
 var $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0;
 var $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0;
 var $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0;
 var $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond = 0, $or$cond4 = 0, $vararg_buffer = 0, $vararg_buffer6 = 0, $vararg_ptr5 = 0, $vararg_ptr9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 2160|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(2160|0);
 $vararg_buffer6 = sp + 8|0;
 $vararg_buffer = sp;
 $19 = sp + 2064|0;
 $20 = sp + 1064|0;
 $21 = sp + 16|0;
 $3 = $0;
 $4 = $1;
 $13 = 1;
 $17 = 0;
 $22 = $4;
 HEAP32[$22>>2] = 1;
 $23 = $3;
 ;HEAP32[$19>>2]=HEAP32[$23>>2]|0;HEAP32[$19+4>>2]=HEAP32[$23+4>>2]|0;HEAP32[$19+8>>2]=HEAP32[$23+8>>2]|0;HEAP32[$19+12>>2]=HEAP32[$23+12>>2]|0;HEAP32[$19+16>>2]=HEAP32[$23+16>>2]|0;HEAP32[$19+20>>2]=HEAP32[$23+20>>2]|0;
 $24 = HEAP32[19869]|0;
 $25 = ($24|0)==(0);
 if ($25) {
  (_espeak_ListVoices(0)|0);
 }
 $26 = ((($19)) + 4|0);
 $27 = HEAP32[$26>>2]|0;
 $28 = ($27|0)==(0|0);
 if ($28) {
  label = 5;
 } else {
  $29 = ((($19)) + 4|0);
  $30 = HEAP32[$29>>2]|0;
  $31 = HEAP8[$30>>0]|0;
  $32 = $31 << 24 >> 24;
  $33 = ($32|0)==(0);
  if ($33) {
   label = 5;
  }
 }
 if ((label|0) == 5) {
  $34 = HEAP32[$19>>2]|0;
  $35 = ($34|0)==(0|0);
  if ($35) {
   $36 = ((($19)) + 8|0);
   $37 = HEAP32[$36>>2]|0;
   HEAP32[$19>>2] = $37;
   $38 = ($37|0)==(0|0);
   if ($38) {
    HEAP32[$19>>2] = 27818;
   }
  }
  $39 = HEAP32[$19>>2]|0;
  __Z8strncpy0PcPKci(122208,$39,60);
  $40 = (__ZL23ExtractVoiceVariantNamePcii(122208,0,0)|0);
  $14 = $40;
  $41 = (__Z17SelectVoiceByNamePP12espeak_VOICEPKc(79480,122208)|0);
  $17 = $41;
  $42 = $17;
  $43 = ($42|0)!=(0|0);
  if ($43) {
   $44 = $17;
   $45 = ((($44)) + 4|0);
   $46 = HEAP32[$45>>2]|0;
   $47 = ((($46)) + 1|0);
   $48 = ((($19)) + 4|0);
   HEAP32[$48>>2] = $47;
   $49 = ((($19)) + 12|0);
   $50 = HEAP8[$49>>0]|0;
   $51 = $50&255;
   $52 = ($51|0)==(0);
   if ($52) {
    $53 = ((($19)) + 13|0);
    $54 = HEAP8[$53>>0]|0;
    $55 = $54&255;
    $56 = ($55|0)==(0);
    if ($56) {
     $57 = ((($19)) + 14|0);
     $58 = HEAP8[$57>>0]|0;
     $59 = $58&255;
     $60 = ($59|0)==(0);
     if ($60) {
      $61 = $14;
      $62 = HEAP8[$61>>0]|0;
      $63 = $62 << 24 >> 24;
      $64 = ($63|0)!=(0);
      $65 = $17;
      $66 = ((($65)) + 8|0);
      $67 = HEAP32[$66>>2]|0;
      if ($64) {
       $68 = $14;
       HEAP32[$vararg_buffer>>2] = $67;
       $vararg_ptr5 = ((($vararg_buffer)) + 4|0);
       HEAP32[$vararg_ptr5>>2] = $68;
       (_sprintf(122268,26618,$vararg_buffer)|0);
       $2 = 122268;
       $211 = $2;
       STACKTOP = sp;return ($211|0);
      } else {
       $2 = $67;
       $211 = $2;
       STACKTOP = sp;return ($211|0);
      }
     }
    }
   }
  }
 }
 $69 = (__ZL14SetVoiceScoresP12espeak_VOICEPS0_i($19,$20,0)|0);
 $5 = $69;
 $70 = $5;
 $71 = ($70|0)==(0);
 if ($71) {
  $72 = $4;
  HEAP32[$72>>2] = 0;
  $73 = (__Z17SelectVoiceByNamePP12espeak_VOICEPKc(79480,27818)|0);
  HEAP32[$20>>2] = $73;
  $74 = ($73|0)!=(0|0);
  if ($74) {
   $5 = 1;
  }
 }
 $11 = 0;
 $75 = ((($19)) + 12|0);
 $76 = HEAP8[$75>>0]|0;
 $77 = $76&255;
 $78 = ($77|0)==(2);
 do {
  if ($78) {
   label = 21;
  } else {
   $79 = ((($19)) + 13|0);
   $80 = HEAP8[$79>>0]|0;
   $81 = $80&255;
   $82 = ($81|0)>(0);
   if ($82) {
    $83 = ((($19)) + 13|0);
    $84 = HEAP8[$83>>0]|0;
    $85 = $84&255;
    $86 = ($85|0)<(13);
    if ($86) {
     label = 21;
     break;
    }
   }
   $87 = ((($19)) + 12|0);
   $88 = HEAP8[$87>>0]|0;
   $89 = $88&255;
   $90 = ($89|0)==(1);
   if ($90) {
    $11 = 1;
   }
  }
 } while(0);
 if ((label|0) == 21) {
  $11 = 2;
 }
 $91 = ((($19)) + 13|0);
 $92 = HEAP8[$91>>0]|0;
 $93 = $92&255;
 $94 = ($93|0)<(60);
 if ($94) {
  $13 = 0;
 }
 $95 = $11;
 $96 = (4484 + ($95<<2)|0);
 $97 = HEAP32[$96>>2]|0;
 $16 = $97;
 $15 = $97;
 $98 = $13;
 $99 = ($98|0)==(0);
 if ($99) {
  $100 = $15;
  $101 = ((($100)) + 1|0);
  $15 = $101;
 }
 $9 = 0;
 $6 = 0;
 $7 = 0;
 while(1) {
  $102 = $6;
  $103 = $5;
  $104 = ($102|0)<($103|0);
  if (!($104)) {
   break;
  }
  $105 = $6;
  $106 = (($20) + ($105<<2)|0);
  $107 = HEAP32[$106>>2]|0;
  $17 = $107;
  $12 = 0;
  $108 = $11;
  $109 = ($108|0)!=(0);
  if ($109) {
   $110 = $17;
   $111 = ((($110)) + 12|0);
   $112 = HEAP8[$111>>0]|0;
   $113 = $112&255;
   $114 = $11;
   $115 = ($113|0)!=($114|0);
   if ($115) {
    $12 = 1;
   }
  }
  $116 = $7;
  $117 = ($116|0)==(0);
  $118 = $13;
  $119 = ($118|0)!=(0);
  $or$cond = $117 & $119;
  if ($or$cond) {
   $120 = $17;
   $121 = ((($120)) + 13|0);
   $122 = HEAP8[$121>>0]|0;
   $123 = $122&255;
   $124 = ($123|0)<(60);
   if ($124) {
    $12 = 1;
   }
  }
  $125 = $12;
  $126 = ($125|0)==(0);
  if ($126) {
   $127 = $17;
   $128 = $7;
   $129 = (($128) + 1)|0;
   $7 = $129;
   $130 = (($21) + ($128<<2)|0);
   HEAP32[$130>>2] = $127;
  }
  $8 = 0;
  while(1) {
   $131 = $8;
   $132 = $17;
   $133 = ((($132)) + 15|0);
   $134 = HEAP8[$133>>0]|0;
   $135 = $134&255;
   $136 = ($131|0)<($135|0);
   $137 = $9;
   $138 = ($137|0)<(12);
   $139 = $136 ? $138 : 0;
   if (!($139)) {
    break;
   }
   $140 = $15;
   $141 = HEAP8[$140>>0]|0;
   $142 = $141 << 24 >> 24;
   $10 = $142;
   $143 = ($142|0)==(0);
   if ($143) {
    $144 = $16;
    $15 = $144;
    continue;
   } else {
    $145 = $9;
    $146 = (($145) + 1)|0;
    $9 = $146;
    $147 = (80488 + (($145*24)|0)|0);
    $18 = $147;
    $148 = $18;
    $149 = $17;
    ;HEAP32[$148>>2]=HEAP32[$149>>2]|0;HEAP32[$148+4>>2]=HEAP32[$149+4>>2]|0;HEAP32[$148+8>>2]=HEAP32[$149+8>>2]|0;HEAP32[$148+12>>2]=HEAP32[$149+12>>2]|0;HEAP32[$148+16>>2]=HEAP32[$149+16>>2]|0;HEAP32[$148+20>>2]=HEAP32[$149+20>>2]|0;
    $150 = $10;
    $151 = $150&255;
    $152 = $18;
    $153 = ((($152)) + 14|0);
    HEAP8[$153>>0] = $151;
    $154 = $18;
    $155 = $7;
    $156 = (($155) + 1)|0;
    $7 = $156;
    $157 = (($21) + ($155<<2)|0);
    HEAP32[$157>>2] = $154;
    $158 = $15;
    $159 = ((($158)) + 1|0);
    $15 = $159;
    $160 = $8;
    $161 = (($160) + 1)|0;
    $8 = $161;
    continue;
   }
  }
  $162 = $6;
  $163 = (($162) + 1)|0;
  $6 = $163;
 }
 while(1) {
  $164 = $17;
  $165 = ($164|0)!=(0|0);
  if (!($165)) {
   break;
  }
  $166 = $15;
  $167 = ((($166)) + 1|0);
  $15 = $167;
  $168 = HEAP8[$166>>0]|0;
  $169 = $168 << 24 >> 24;
  $10 = $169;
  $170 = ($169|0)!=(0);
  $171 = $9;
  $172 = ($171|0)<(12);
  $or$cond4 = $170 & $172;
  if (!($or$cond4)) {
   break;
  }
  $173 = $9;
  $174 = (($173) + 1)|0;
  $9 = $174;
  $175 = (80488 + (($173*24)|0)|0);
  $18 = $175;
  $176 = $18;
  $177 = $17;
  ;HEAP32[$176>>2]=HEAP32[$177>>2]|0;HEAP32[$176+4>>2]=HEAP32[$177+4>>2]|0;HEAP32[$176+8>>2]=HEAP32[$177+8>>2]|0;HEAP32[$176+12>>2]=HEAP32[$177+12>>2]|0;HEAP32[$176+16>>2]=HEAP32[$177+16>>2]|0;HEAP32[$176+20>>2]=HEAP32[$177+20>>2]|0;
  $178 = $10;
  $179 = $178&255;
  $180 = $18;
  $181 = ((($180)) + 14|0);
  HEAP8[$181>>0] = $179;
  $182 = $18;
  $183 = $7;
  $184 = (($183) + 1)|0;
  $7 = $184;
  $185 = (($21) + ($183<<2)|0);
  HEAP32[$185>>2] = $182;
 }
 $186 = $7;
 $187 = ($186|0)==(0);
 if ($187) {
  $2 = 0;
  $211 = $2;
  STACKTOP = sp;return ($211|0);
 }
 $188 = ((($19)) + 14|0);
 $189 = HEAP8[$188>>0]|0;
 $190 = $189&255;
 $191 = $7;
 $192 = (($190|0) % ($191|0))&-1;
 $193 = (($21) + ($192<<2)|0);
 $194 = HEAP32[$193>>2]|0;
 $17 = $194;
 $195 = $17;
 $196 = ((($195)) + 14|0);
 $197 = HEAP8[$196>>0]|0;
 $198 = $197&255;
 $199 = ($198|0)!=(0);
 $200 = $17;
 if ($199) {
  $201 = ((($200)) + 14|0);
  $202 = HEAP8[$201>>0]|0;
  $203 = $202&255;
  $204 = (__ZL23ExtractVoiceVariantNamePcii(0,$203,0)|0);
  $14 = $204;
  $205 = $17;
  $206 = ((($205)) + 8|0);
  $207 = HEAP32[$206>>2]|0;
  $208 = $14;
  HEAP32[$vararg_buffer6>>2] = $207;
  $vararg_ptr9 = ((($vararg_buffer6)) + 4|0);
  HEAP32[$vararg_ptr9>>2] = $208;
  (_sprintf(122268,26618,$vararg_buffer6)|0);
  $2 = 122268;
  $211 = $2;
  STACKTOP = sp;return ($211|0);
 } else {
  $209 = ((($200)) + 8|0);
  $210 = HEAP32[$209>>2]|0;
  $2 = $210;
  $211 = $2;
  STACKTOP = sp;return ($211|0);
 }
 return (0)|0;
}
function __Z14SetVoiceByNamePKc($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $5 = sp + 8|0;
 $2 = $0;
 $7 = $2;
 __Z8strncpy0PcPKci(122318,$7,60);
 $8 = (__ZL23ExtractVoiceVariantNamePcii(122318,0,1)|0);
 $6 = $8;
 $4 = 0;
 while(1) {
  $9 = $4;
  $10 = (122318 + ($9)|0);
  $11 = HEAP8[$10>>0]|0;
  $12 = $11 << 24 >> 24;
  $13 = (_tolower($12)|0);
  $14 = $13&255;
  $15 = $4;
  $16 = (122318 + ($15)|0);
  HEAP8[$16>>0] = $14;
  $17 = $14 << 24 >> 24;
  $18 = ($17|0)==(0);
  if ($18) {
   break;
  }
  $19 = $4;
  $20 = (($19) + 1)|0;
  $4 = $20;
 }
 ;HEAP32[$5>>2]=0|0;HEAP32[$5+4>>2]=0|0;HEAP32[$5+8>>2]=0|0;HEAP32[$5+12>>2]=0|0;HEAP32[$5+16>>2]=0|0;HEAP32[$5+20>>2]=0|0;
 $21 = $2;
 HEAP32[$5>>2] = $21;
 $22 = (__Z9LoadVoicePKci(122318,1)|0);
 $23 = ($22|0)!=(0|0);
 if ($23) {
  $24 = $6;
  $25 = HEAP8[$24>>0]|0;
  $26 = $25 << 24 >> 24;
  $27 = ($26|0)!=(0);
  if ($27) {
   $28 = $6;
   (__Z9LoadVoicePKci($28,2)|0);
  }
  $29 = HEAP32[1124]|0;
  __Z13DoVoiceChangeP7voice_t($29);
  $30 = HEAP32[1124]|0;
  $31 = ((($30)) + 40|0);
  $32 = ((($5)) + 4|0);
  HEAP32[$32>>2] = $31;
  $33 = $6;
  __Z13SetVoiceStackP12espeak_VOICEPKc($5,$33);
  $1 = 0;
  $53 = $1;
  STACKTOP = sp;return ($53|0);
 }
 $34 = HEAP32[19869]|0;
 $35 = ($34|0)==(0);
 if ($35) {
  (_espeak_ListVoices(0)|0);
 }
 $36 = (__Z17SelectVoiceByNamePP12espeak_VOICEPKc(79480,122318)|0);
 $3 = $36;
 $37 = ($36|0)!=(0|0);
 if ($37) {
  $38 = $3;
  $39 = ((($38)) + 8|0);
  $40 = HEAP32[$39>>2]|0;
  $41 = (__Z9LoadVoicePKci($40,0)|0);
  $42 = ($41|0)!=(0|0);
  if ($42) {
   $43 = $6;
   $44 = HEAP8[$43>>0]|0;
   $45 = $44 << 24 >> 24;
   $46 = ($45|0)!=(0);
   if ($46) {
    $47 = $6;
    (__Z9LoadVoicePKci($47,2)|0);
   }
   $48 = HEAP32[1124]|0;
   __Z13DoVoiceChangeP7voice_t($48);
   $49 = HEAP32[1124]|0;
   $50 = ((($49)) + 40|0);
   $51 = ((($5)) + 4|0);
   HEAP32[$51>>2] = $50;
   $52 = $6;
   __Z13SetVoiceStackP12espeak_VOICEPKc($5,$52);
   $1 = 0;
   $53 = $1;
   STACKTOP = sp;return ($53|0);
  }
 }
 $1 = -1;
 $53 = $1;
 STACKTOP = sp;return ($53|0);
}
function __Z20SetVoiceByPropertiesP12espeak_VOICE($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $4 = sp;
 $2 = $0;
 $5 = $2;
 $6 = (__Z11SelectVoiceP12espeak_VOICEPi($5,$4)|0);
 $3 = $6;
 $7 = HEAP32[$4>>2]|0;
 $8 = ($7|0)==(0);
 if ($8) {
  $1 = 2;
  $12 = $1;
  STACKTOP = sp;return ($12|0);
 } else {
  $9 = $3;
  (__Z16LoadVoiceVariantPKci($9,0)|0);
  $10 = HEAP32[1124]|0;
  __Z13DoVoiceChangeP7voice_t($10);
  $11 = $2;
  __Z13SetVoiceStackP12espeak_VOICEPKc($11,122378);
  $1 = 0;
  $12 = $1;
  STACKTOP = sp;return ($12|0);
 }
 return (0)|0;
}
function _espeak_GetCurrentVoice() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (78088|0);
}
function __Z9WcmdqStopv() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[20916] = 0;
 HEAP32[20917] = 0;
 $0 = HEAP32[20919]|0;
 $1 = ($0|0)!=(0|0);
 if ($1) {
  $2 = HEAP32[20919]|0;
  _sonicDestroyStream($2);
  HEAP32[20919] = 0;
 }
 $3 = HEAP8[120473]|0;
 $4 = $3 << 24 >> 24;
 $5 = ($4|0)!=(0);
 if (!($5)) {
  return;
 }
 __Z11MbrolaResetv();
 return;
}
function __Z9WcmdqFreev() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = HEAP32[20916]|0;
 $2 = HEAP32[20917]|0;
 $3 = (($1) - ($2))|0;
 $0 = $3;
 $4 = $0;
 $5 = ($4|0)<=(0);
 if ($5) {
  $6 = $0;
  $7 = (($6) + 170)|0;
  $0 = $7;
 }
 $8 = $0;
 STACKTOP = sp;return ($8|0);
}
function __Z9WcmdqUsedv() {
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__Z9WcmdqFreev()|0);
 $1 = (170 - ($0))|0;
 return ($1|0);
}
function __Z8WcmdqIncv() {
 var $$ = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[20917]|0;
 $1 = (($0) + 1)|0;
 HEAP32[20917] = $1;
 $2 = HEAP32[20917]|0;
 $3 = ($2|0)>=(170);
 $$ = $3 ? 0 : $1;
 HEAP32[20917] = $$;
 return;
}
function __Z16WavegenOpenSoundv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 0;
}
function __Z17WavegenCloseSoundv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 0;
}
function __Z16WavegenInitSoundv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 0;
}
function __Z11WavegenInitii($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$ = 0, $$1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0.0, $39 = 0.0, $4 = 0, $40 = 0, $41 = 0.0, $42 = 0.0, $43 = 0.0, $44 = 0.0;
 var $45 = 0.0, $46 = 0.0, $47 = 0, $48 = 0, $49 = 0, $5 = 0.0, $50 = 0, $51 = 0, $52 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $2 = $0;
 $3 = $1;
 $6 = $3;
 $7 = ($6|0)==(0);
 $$ = $7 ? 60 : $1;
 $3 = $$;
 HEAP32[20194] = 0;
 $8 = $2;
 HEAP32[20212] = $8;
 HEAP32[20211] = $8;
 $9 = HEAP32[20211]|0;
 $10 = (134217728 / ($9|0))&-1;
 HEAP32[20920] = $10;
 $11 = HEAP32[20211]|0;
 $12 = $11<<6;
 $13 = $2;
 $14 = (($12|0) / ($13|0))&-1;
 HEAP32[20921] = $14;
 HEAP32[20922] = 0;
 HEAP32[20923] = 0;
 HEAP32[20924] = 2147483647;
 HEAP32[20925] = 0;
 HEAP32[(80916)>>2] = 32;
 HEAP32[(80924)>>2] = 100;
 $4 = 0;
 while(1) {
  $15 = $4;
  $16 = ($15|0)<(15);
  if (!($16)) {
   break;
  }
  $17 = $4;
  $18 = (4988 + ($17<<2)|0);
  $19 = HEAP32[$18>>2]|0;
  $20 = $4;
  $21 = (80784 + ($20<<2)|0);
  HEAP32[$21>>2] = $19;
  $22 = $4;
  $23 = (($22) + 1)|0;
  $4 = $23;
 }
 $24 = HEAP32[20211]|0;
 $25 = $3;
 $26 = Math_imul($24, $25)|0;
 $27 = (($26|0) / 12800)&-1;
 HEAP32[20926] = $27;
 $28 = HEAP32[20926]|0;
 $29 = ($28|0)>(128);
 $$1 = $29 ? 128 : $27;
 HEAP32[20926] = $$1;
 $30 = HEAP32[20926]|0;
 $31 = (($30|0) / 2)&-1;
 HEAP32[20927] = $31;
 $32 = HEAP32[20211]|0;
 $33 = ($32|0)!=(22050);
 if (!($33)) {
  __ZL17WavegenInitPkDatai(1);
  __ZL17WavegenInitPkDatai(0);
  HEAP32[20928] = 27111;
  __Z9KlattInitv();
  STACKTOP = sp;return;
 }
 $4 = 0;
 while(1) {
  $34 = $4;
  $35 = HEAP32[20926]|0;
  $36 = ($34|0)<($35|0);
  if (!($36)) {
   break;
  }
  $37 = $4;
  $38 = (+($37|0));
  $39 = 6.2831853070000001 * $38;
  $40 = HEAP32[20926]|0;
  $41 = (+($40|0));
  $42 = $39 / $41;
  $43 = (+Math_cos((+$42)));
  $44 = 1.0 - $43;
  $45 = 127.0 * $44;
  $5 = $45;
  $46 = $5;
  $47 = (~~(($46)));
  $48 = $47&255;
  $49 = $4;
  $50 = (26983 + ($49)|0);
  HEAP8[$50>>0] = $48;
  $51 = $4;
  $52 = (($51) + 1)|0;
  $4 = $52;
 }
 __ZL17WavegenInitPkDatai(1);
 __ZL17WavegenInitPkDatai(0);
 HEAP32[20928] = 27111;
 __Z9KlattInitv();
 STACKTOP = sp;return;
}
function __ZL17WavegenInitPkDatai($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 STACKTOP = sp;return;
}
function __Z12GetAmplitudev() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = HEAP32[(80796)>>2]|0;
 $2 = ($1*55)|0;
 $3 = (($2|0) / 100)&-1;
 $0 = $3;
 $4 = $0;
 $5 = HEAP32[(80836)>>2]|0;
 $6 = (27368 + ($5)|0);
 $7 = HEAP8[$6>>0]|0;
 $8 = $7&255;
 $9 = Math_imul($4, $8)|0;
 $10 = (($9|0) / 16)&-1;
 HEAP32[1262] = $10;
 $11 = HEAP32[1262]|0;
 STACKTOP = sp;return ($11|0);
}
function __Z16PeaksToHarmspectP15wavegen_peaks_tiPii($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$ = 0, $$1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0;
 var $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0;
 var $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0;
 var $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0;
 var $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $28 = 0;
 var $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0;
 var $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(80|0);
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $22 = HEAP32[20194]|0;
 $23 = ($22|0)==(0|0);
 if ($23) {
  $4 = 1;
  $278 = $4;
  STACKTOP = sp;return ($278|0);
 }
 $24 = HEAP32[20194]|0;
 $25 = ((($24)) + 104|0);
 $26 = HEAP32[$25>>2]|0;
 $27 = $5;
 $28 = (($27) + (($26*80)|0)|0);
 $29 = HEAP32[$28>>2]|0;
 $30 = HEAP32[20194]|0;
 $31 = ((($30)) + 104|0);
 $32 = HEAP32[$31>>2]|0;
 $33 = $5;
 $34 = (($33) + (($32*80)|0)|0);
 $35 = ((($34)) + 12|0);
 $36 = HEAP32[$35>>2]|0;
 $37 = (($29) + ($36))|0;
 $38 = $6;
 $39 = (($37|0) / ($38|0))&-1;
 $15 = $39;
 $40 = $15;
 $41 = ($40|0)>=(400);
 $$ = $41 ? 399 : $39;
 $15 = $$;
 $42 = HEAP32[20211]|0;
 $43 = ($42*19)|0;
 $44 = (($43|0) / 40)&-1;
 $45 = $44 << 16;
 $46 = $6;
 $47 = (($45|0) / ($46|0))&-1;
 $16 = $47;
 $48 = $15;
 $49 = $16;
 $50 = ($48|0)>($49|0);
 if ($50) {
  $51 = $16;
  $15 = $51;
 }
 $13 = 0;
 while(1) {
  $52 = $13;
  $53 = $15;
  $54 = ($52|0)<=($53|0);
  if (!($54)) {
   break;
  }
  $55 = $13;
  $56 = $7;
  $57 = (($56) + ($55<<2)|0);
  HEAP32[$57>>2] = 0;
  $58 = $13;
  $59 = (($58) + 1)|0;
  $13 = $59;
 }
 $13 = 0;
 $14 = 0;
 while(1) {
  $60 = $14;
  $61 = HEAP32[20194]|0;
  $62 = ((($61)) + 104|0);
  $63 = HEAP32[$62>>2]|0;
  $64 = ($60|0)<=($63|0);
  if (!($64)) {
   break;
  }
  $65 = $14;
  $66 = $5;
  $67 = (($66) + (($65*80)|0)|0);
  $10 = $67;
  $68 = $10;
  $69 = ((($68)) + 4|0);
  $70 = HEAP32[$69>>2]|0;
  $71 = ($70|0)==(0);
  L15: do {
   if (!($71)) {
    $72 = $10;
    $73 = HEAP32[$72>>2]|0;
    $11 = $73;
    $74 = ($73|0)==(0);
    if (!($74)) {
     $75 = $10;
     $76 = HEAP32[$75>>2]|0;
     $77 = $10;
     $78 = ((($77)) + 12|0);
     $79 = HEAP32[$78>>2]|0;
     $80 = (($76) + ($79))|0;
     $12 = $80;
     $81 = $10;
     $82 = HEAP32[$81>>2]|0;
     $83 = $10;
     $84 = ((($83)) + 8|0);
     $85 = HEAP32[$84>>2]|0;
     $86 = (($82) - ($85))|0;
     $87 = $6;
     $88 = (($86|0) / ($87|0))&-1;
     $89 = (($88) + 1)|0;
     $13 = $89;
     $90 = $13;
     $91 = ($90|0)<=(0);
     $$1 = $91 ? 1 : $89;
     $13 = $$1;
     $92 = $6;
     $93 = $13;
     $94 = Math_imul($92, $93)|0;
     $9 = $94;
     while(1) {
      $95 = $9;
      $96 = $11;
      $97 = ($95|0)<($96|0);
      if (!($97)) {
       break;
      }
      $98 = $11;
      $99 = $9;
      $100 = (($98) - ($99))|0;
      $101 = $10;
      $102 = ((($101)) + 8|0);
      $103 = HEAP32[$102>>2]|0;
      $104 = $103 >> 8;
      $105 = (($100|0) / ($104|0))&-1;
      $106 = HEAP32[20928]|0;
      $107 = (($106) + ($105)|0);
      $108 = HEAP8[$107>>0]|0;
      $109 = $108&255;
      $110 = $10;
      $111 = ((($110)) + 4|0);
      $112 = HEAP32[$111>>2]|0;
      $113 = Math_imul($109, $112)|0;
      $114 = $13;
      $115 = (($114) + 1)|0;
      $13 = $115;
      $116 = $7;
      $117 = (($116) + ($114<<2)|0);
      $118 = HEAP32[$117>>2]|0;
      $119 = (($118) + ($113))|0;
      HEAP32[$117>>2] = $119;
      $120 = $6;
      $121 = $9;
      $122 = (($121) + ($120))|0;
      $9 = $122;
     }
     while(1) {
      $123 = $9;
      $124 = $12;
      $125 = ($123|0)<($124|0);
      if (!($125)) {
       break L15;
      }
      $126 = $9;
      $127 = $11;
      $128 = (($126) - ($127))|0;
      $129 = $10;
      $130 = ((($129)) + 12|0);
      $131 = HEAP32[$130>>2]|0;
      $132 = $131 >> 8;
      $133 = (($128|0) / ($132|0))&-1;
      $134 = HEAP32[20928]|0;
      $135 = (($134) + ($133)|0);
      $136 = HEAP8[$135>>0]|0;
      $137 = $136&255;
      $138 = $10;
      $139 = ((($138)) + 4|0);
      $140 = HEAP32[$139>>2]|0;
      $141 = Math_imul($137, $140)|0;
      $142 = $13;
      $143 = (($142) + 1)|0;
      $13 = $143;
      $144 = $7;
      $145 = (($144) + ($142<<2)|0);
      $146 = HEAP32[$145>>2]|0;
      $147 = (($146) + ($141))|0;
      HEAP32[$145>>2] = $147;
      $148 = $6;
      $149 = $9;
      $150 = (($149) + ($148))|0;
      $9 = $150;
     }
    }
   }
  } while(0);
  $151 = $14;
  $152 = (($151) + 1)|0;
  $14 = $152;
 }
 $153 = $5;
 $154 = ((($153)) + 80|0);
 $155 = ((($154)) + 4|0);
 $156 = HEAP32[$155>>2]|0;
 $157 = ($156*10)|0;
 $20 = $157;
 $158 = $6;
 $159 = (65536000 / ($158|0))&-1;
 $21 = $159;
 $160 = $21;
 $161 = ($160|0)>(0);
 L26: do {
  if ($161) {
   $162 = $20;
   $163 = $21;
   $164 = (($162|0) / ($163|0))&-1;
   $17 = $164;
   $13 = 1;
   while(1) {
    $165 = $20;
    $166 = ($165|0)>(0);
    if (!($166)) {
     break L26;
    }
    $167 = $20;
    $168 = $13;
    $169 = (($168) + 1)|0;
    $13 = $169;
    $170 = $7;
    $171 = (($170) + ($168<<2)|0);
    $172 = HEAP32[$171>>2]|0;
    $173 = (($172) + ($167))|0;
    HEAP32[$171>>2] = $173;
    $174 = $17;
    $175 = $20;
    $176 = (($175) - ($174))|0;
    $20 = $176;
   }
  }
 } while(0);
 while(1) {
  $177 = $14;
  $178 = ($177|0)<(9);
  if (!($178)) {
   break;
  }
  $179 = $14;
  $180 = $5;
  $181 = (($180) + (($179*80)|0)|0);
  $182 = ((($181)) + 4|0);
  $183 = HEAP32[$182>>2]|0;
  $184 = $183 >> 14;
  $17 = $184;
  $185 = $17;
  $186 = $17;
  $187 = Math_imul($185, $186)|0;
  $188 = ($187*5)|0;
  $189 = (($188|0) / 2)&-1;
  $190 = $14;
  $191 = (83716 + ($190<<2)|0);
  HEAP32[$191>>2] = $189;
  $192 = $8;
  $193 = ($192|0)==(0);
  if ($193) {
   $194 = $14;
   $195 = $5;
   $196 = (($195) + (($194*80)|0)|0);
   $197 = HEAP32[$196>>2]|0;
   $198 = $6;
   $199 = (($197|0) / ($198|0))&-1;
   $200 = $14;
   $201 = (83752 + ($200<<2)|0);
   HEAP32[$201>>2] = $199;
  }
  $202 = $14;
  $203 = (83752 + ($202<<2)|0);
  $204 = HEAP32[$203>>2]|0;
  $205 = $16;
  $206 = ($204|0)>=($205|0);
  if ($206) {
   $207 = $14;
   $208 = (83716 + ($207<<2)|0);
   HEAP32[$208>>2] = 0;
  }
  $209 = $14;
  $210 = (($209) + 1)|0;
  $14 = $210;
 }
 $9 = 0;
 $13 = 0;
 while(1) {
  $211 = $13;
  $212 = $15;
  $213 = ($211|0)<=($212|0);
  if (!($213)) {
   break;
  }
  $214 = $13;
  $215 = $7;
  $216 = (($215) + ($214<<2)|0);
  $217 = HEAP32[$216>>2]|0;
  $218 = $217 >> 15;
  $17 = $218;
  $219 = $17;
  $220 = $17;
  $221 = Math_imul($219, $220)|0;
  $222 = $221 >> 8;
  $223 = $13;
  $224 = $7;
  $225 = (($224) + ($223<<2)|0);
  HEAP32[$225>>2] = $222;
  $226 = $9;
  $227 = $226 >> 19;
  $18 = $227;
  $228 = ($227|0)<(1000);
  if ($228) {
   $229 = $13;
   $230 = $7;
   $231 = (($230) + ($229<<2)|0);
   $232 = HEAP32[$231>>2]|0;
   $233 = $18;
   $234 = HEAP32[20194]|0;
   $235 = ((($234)) + 364|0);
   $236 = (($235) + ($233)|0);
   $237 = HEAP8[$236>>0]|0;
   $238 = $237&255;
   $239 = Math_imul($232, $238)|0;
   $240 = $239 >> 13;
   $241 = $13;
   $242 = $7;
   $243 = (($242) + ($241<<2)|0);
   HEAP32[$243>>2] = $240;
  }
  $244 = $13;
  $245 = (($244) + 1)|0;
  $13 = $245;
  $246 = $6;
  $247 = $9;
  $248 = (($247) + ($246))|0;
  $9 = $248;
 }
 $249 = $7;
 $250 = ((($249)) + 4|0);
 $251 = HEAP32[$250>>2]|0;
 $252 = HEAP32[1263]|0;
 $253 = Math_imul($251, $252)|0;
 $19 = $253;
 $254 = $19;
 $255 = (($254|0) / 8)&-1;
 $256 = $7;
 $257 = ((($256)) + 4|0);
 HEAP32[$257>>2] = $255;
 $258 = $8;
 $259 = $258 & 1;
 $260 = ($259|0)!=(0);
 L48: do {
  if ($260) {
   $13 = 1;
   while(1) {
    $261 = $13;
    $262 = ($261|0)<(30);
    if (!($262)) {
     break L48;
    }
    $263 = $13;
    $264 = $7;
    $265 = (($264) + ($263<<2)|0);
    $266 = HEAP32[$265>>2]|0;
    $267 = $13;
    $268 = HEAP32[20947]|0;
    $269 = (($268) + ($267<<2)|0);
    $270 = HEAP32[$269>>2]|0;
    $271 = (($266) - ($270))|0;
    $272 = $271 >> 3;
    $273 = $13;
    $274 = (83792 + ($273<<2)|0);
    HEAP32[$274>>2] = $272;
    $275 = $13;
    $276 = (($275) + 1)|0;
    $13 = $276;
   }
  }
 } while(0);
 $277 = $15;
 $4 = $277;
 $278 = $4;
 STACKTOP = sp;return ($278|0);
}
function __Z10InitBreathv() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0.0, $3 = 0.0, $4 = 0.0, $5 = 0.0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = HEAP32[20211]|0;
 $2 = (+($1|0));
 $3 = -3.1415926999999999 / $2;
 HEAPF64[4622] = $3;
 $4 = +HEAPF64[4622];
 $5 = -2.0 * $4;
 HEAPF64[4623] = $5;
 $0 = 0;
 while(1) {
  $6 = $0;
  $7 = ($6|0)<(9);
  if (!($7)) {
   break;
  }
  $8 = $0;
  $9 = (36992 + (($8*40)|0)|0);
  __ZL12setresonatorP9RESONATORiii($9,2000,200,1);
  $10 = $0;
  $11 = (($10) + 1)|0;
  $0 = $11;
 }
 STACKTOP = sp;return;
}
function __ZL12setresonatorP9RESONATORiii($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0.0, $17 = 0, $18 = 0.0, $19 = 0.0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0.0, $25 = 0.0, $26 = 0, $27 = 0, $28 = 0.0, $29 = 0;
 var $30 = 0.0, $31 = 0.0, $32 = 0.0, $33 = 0.0, $34 = 0.0, $35 = 0.0, $36 = 0.0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0.0, $42 = 0.0, $43 = 0, $44 = 0, $45 = 0.0, $46 = 0.0, $47 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0.0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $3;
 $10 = $7;
 $11 = ($10|0)!=(0);
 if ($11) {
  $12 = $4;
  $13 = ((($12)) + 24|0);
  HEAPF64[$13>>3] = 0.0;
  $14 = $4;
  $15 = ((($14)) + 32|0);
  HEAPF64[$15>>3] = 0.0;
 }
 $16 = +HEAPF64[4622];
 $17 = $6;
 $18 = (+($17|0));
 $19 = $16 * $18;
 $9 = $19;
 $20 = $9;
 $21 = (+Math_exp((+$20)));
 $8 = $21;
 $22 = $8;
 $23 = $8;
 $24 = $22 * $23;
 $25 = -$24;
 $26 = $4;
 $27 = ((($26)) + 16|0);
 HEAPF64[$27>>3] = $25;
 $28 = +HEAPF64[4623];
 $29 = $5;
 $30 = (+($29|0));
 $31 = $28 * $30;
 $9 = $31;
 $32 = $8;
 $33 = $9;
 $34 = (+Math_cos((+$33)));
 $35 = $32 * $34;
 $36 = $35 * 2.0;
 $37 = $4;
 $38 = ((($37)) + 8|0);
 HEAPF64[$38>>3] = $36;
 $39 = $4;
 $40 = ((($39)) + 8|0);
 $41 = +HEAPF64[$40>>3];
 $42 = 1.0 - $41;
 $43 = $4;
 $44 = ((($43)) + 16|0);
 $45 = +HEAPF64[$44>>3];
 $46 = $42 - $45;
 $47 = $4;
 HEAPF64[$47>>3] = $46;
 STACKTOP = sp;return;
}
function __Z7Wavegenv() {
 var $$ = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0;
 var $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0;
 var $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0;
 var $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0;
 var $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0;
 var $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0;
 var $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0;
 var $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0;
 var $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0;
 var $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0;
 var $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0;
 var $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0;
 var $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0;
 var $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0;
 var $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0;
 var $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0;
 var $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0;
 var $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0;
 var $421 = 0, $422 = 0, $423 = 0, $424 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0;
 var $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0;
 var $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0;
 var $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 L1: while(1) {
  $17 = HEAP32[20978]|0;
  $18 = ($17|0)==(0);
  if ($18) {
   $19 = HEAP32[20922]|0;
   $20 = HEAP32[20923]|0;
   $21 = ($19|0)==($20|0);
   if ($21) {
    label = 4;
    break;
   }
  }
  $22 = HEAP32[20922]|0;
  $23 = $22 & 63;
  $24 = ($23|0)==(0);
  $25 = HEAP32[20922]|0;
  if ($24) {
   $26 = ($25|0)==(0);
   if ($26) {
    HEAP32[20979] = 0;
    HEAP32[20947] = 83920;
    $27 = HEAP32[(80868)>>2]|0;
    $28 = $27 << 4;
    $29 = (__Z16PeaksToHarmspectP15wavegen_peaks_tiPii(37352,$28,83920,0)|0);
    HEAP32[21780] = $29;
    $30 = HEAP32[(80916)>>2]|0;
    $31 = HEAP32[(80868)>>2]|0;
    $32 = $31 >> 8;
    $33 = Math_imul($30, $32)|0;
    $34 = HEAP32[(80924)>>2]|0;
    $35 = Math_imul($33, $34)|0;
    $36 = (($35|0) / 80000)&-1;
    HEAP32[21781] = $36;
    $37 = HEAP32[(80868)>>2]|0;
    $38 = $37 >> 12;
    $39 = (890 / ($38|0))&-1;
    HEAP32[21782] = $39;
   } else {
    __ZL17AdvanceParametersv();
   }
   $40 = HEAP32[(80868)>>2]|0;
   $41 = $40 >> 7;
   $42 = HEAP32[20920]|0;
   $43 = Math_imul($41, $42)|0;
   HEAP32[21783] = $43;
   $44 = HEAP32[20211]|0;
   $45 = HEAP32[(80868)>>2]|0;
   $46 = $45 >> 12;
   $47 = (($44|0) / ($46|0))&-1;
   HEAP32[21784] = $47;
   $48 = HEAP32[(80868)>>2]|0;
   $49 = $48 >> 11;
   HEAP32[21785] = $49;
   $50 = HEAP32[21780]|0;
   HEAP32[21786] = $50;
   $51 = HEAP32[20979]|0;
   $52 = (83920 + (($51*1600)|0)|0);
   HEAP32[20947] = $52;
   $53 = HEAP32[20979]|0;
   $54 = $53 ^ 1;
   HEAP32[20979] = $54;
   $55 = HEAP32[(80868)>>2]|0;
   $56 = $55 << 4;
   $57 = HEAP32[20979]|0;
   $58 = (83920 + (($57*1600)|0)|0);
   $59 = (__Z16PeaksToHarmspectP15wavegen_peaks_tiPii(37352,$56,$58,1)|0);
   HEAP32[21780] = $59;
   __ZL9SetBreathv();
  } else {
   $60 = $25 & 7;
   $61 = ($60|0)==(0);
   if ($61) {
    $4 = 1;
    while(1) {
     $62 = $4;
     $63 = ($62|0)<(30);
     if (!($63)) {
      break;
     }
     $64 = $4;
     $65 = HEAP32[21780]|0;
     $66 = ($64|0)<=($65|0);
     if (!($66)) {
      break;
     }
     $67 = $4;
     $68 = HEAP32[21786]|0;
     $69 = ($67|0)<=($68|0);
     if (!($69)) {
      break;
     }
     $70 = $4;
     $71 = (83792 + ($70<<2)|0);
     $72 = HEAP32[$71>>2]|0;
     $73 = $4;
     $74 = HEAP32[20947]|0;
     $75 = (($74) + ($73<<2)|0);
     $76 = HEAP32[$75>>2]|0;
     $77 = (($76) + ($72))|0;
     HEAP32[$75>>2] = $77;
     $78 = $4;
     $79 = (($78) + 1)|0;
     $4 = $79;
    }
    $80 = HEAP32[1264]|0;
    $81 = ($80|0)<(256);
    if ($81) {
     $82 = HEAP32[1264]|0;
     $83 = (($82) + 1)|0;
     HEAP32[1264] = $83;
    }
   }
  }
  $84 = HEAP32[20922]|0;
  $85 = (($84) + 1)|0;
  HEAP32[20922] = $85;
  $86 = HEAP32[20924]|0;
  $87 = ($86|0)>(0);
  $88 = HEAP32[21783]|0;
  $89 = HEAP32[20924]|0;
  $90 = (($89) + ($88))|0;
  HEAP32[20924] = $90;
  $91 = HEAP32[20924]|0;
  $92 = ($91|0)<(0);
  $or$cond = $87 & $92;
  do {
   if ($or$cond) {
    $93 = HEAP32[20927]|0;
    $94 = HEAP32[21784]|0;
    $95 = (($94|0) / 2)&-1;
    $96 = (($93) - ($95))|0;
    HEAP32[21787] = $96;
    $97 = HEAP32[20922]|0;
    $98 = HEAP32[20923]|0;
    $99 = ($97|0)>($98|0);
    if ($99) {
     label = 20;
     break L1;
    }
    $100 = HEAP32[21788]|0;
    $101 = (($100) + 1)|0;
    HEAP32[21788] = $101;
    $102 = HEAP32[20194]|0;
    $103 = ((($102)) + 104|0);
    $104 = HEAP32[$103>>2]|0;
    $105 = (($104) + 1)|0;
    $11 = $105;
    while(1) {
     $106 = $11;
     $107 = ($106|0)<(9);
     if (!($107)) {
      break;
     }
     $108 = $11;
     $109 = (37352 + (($108*80)|0)|0);
     $110 = HEAP32[$109>>2]|0;
     $111 = HEAP32[(80868)>>2]|0;
     $112 = $111<<3;
     $113 = (($110|0) / ($112|0))&-1;
     $114 = (($113) + 1)|0;
     $115 = (($114|0) / 2)&-1;
     $116 = $11;
     $117 = (83752 + ($116<<2)|0);
     HEAP32[$117>>2] = $115;
     $118 = $11;
     $119 = (($118) + 1)|0;
     $11 = $119;
    }
    $120 = HEAP32[(80916)>>2]|0;
    $121 = HEAP32[(80868)>>2]|0;
    $122 = $121 >> 8;
    $123 = Math_imul($120, $122)|0;
    $124 = HEAP32[(80924)>>2]|0;
    $125 = Math_imul($123, $124)|0;
    $126 = (($125|0) / 80000)&-1;
    HEAP32[21781] = $126;
    $127 = HEAP32[21789]|0;
    $128 = ($127|0)>(0);
    do {
     if ($128) {
      $129 = HEAP32[21789]|0;
      $130 = ($129|0)==(3);
      if ($130) {
       $131 = HEAP32[20923]|0;
       $132 = HEAP32[20922]|0;
       $133 = (($131) - ($132))|0;
       $134 = HEAP32[21784]|0;
       $135 = $134<<1;
       $136 = ($133|0)<($135|0);
       if (!($136)) {
        break;
       }
       HEAP32[21789] = 2;
       $137 = HEAP32[21781]|0;
       $138 = HEAP32[21790]|0;
       $139 = Math_imul($137, $138)|0;
       $140 = (($139|0) / 256)&-1;
       HEAP32[21781] = $140;
       break;
      }
      $141 = HEAP32[21789]|0;
      $142 = ($141|0)==(4);
      if ($142) {
       HEAP32[21789] = 2;
       $143 = HEAP32[21781]|0;
       $144 = HEAP32[21790]|0;
       $145 = Math_imul($143, $144)|0;
       $146 = (($145|0) / 256)&-1;
       HEAP32[21781] = $146;
       break;
      } else {
       $147 = HEAP32[21789]|0;
       $148 = (($147) + -1)|0;
       HEAP32[21789] = $148;
       break;
      }
     }
    } while(0);
    $149 = HEAP32[21791]|0;
    $150 = ($149|0)!=(0|0);
    if ($150) {
     $151 = HEAP32[21792]|0;
     $152 = $151 >> 8;
     $5 = $152;
     $153 = ($152|0)>(127);
     $$ = $153 ? 127 : $152;
     $5 = $$;
     $154 = $5;
     $155 = HEAP32[21791]|0;
     $156 = (($155) + ($154)|0);
     $157 = HEAP8[$156>>0]|0;
     $158 = $157&255;
     $14 = $158;
     $159 = HEAP32[21781]|0;
     $160 = $14;
     $161 = Math_imul($159, $160)|0;
     $162 = (($161|0) / 128)&-1;
     HEAP32[21781] = $162;
    }
    $16 = 0;
    $163 = HEAP32[1124]|0;
    $164 = ((($163)) + 92|0);
    $165 = HEAP32[$164>>2]|0;
    $166 = ($165|0)<(8);
    if ($166) {
     $167 = HEAP32[21793]|0;
     $168 = HEAP32[1124]|0;
     $169 = ((($168)) + 92|0);
     $170 = HEAP32[$169>>2]|0;
     $171 = (27373 + ($170<<3)|0);
     $172 = (($171) + ($167)|0);
     $173 = HEAP8[$172>>0]|0;
     $174 = $173&255;
     $16 = $174;
     $175 = $16;
     $176 = $175 & 15;
     $15 = $176;
     $177 = $16;
     $178 = $177 >> 4;
     $16 = $178;
    }
    $179 = $16;
    $180 = ($179|0)!=(0);
    if ($180) {
     $181 = $16;
     $182 = ($181|0)==(15);
     if ($182) {
      $183 = HEAP32[21781]|0;
      $184 = $15;
      $185 = Math_imul($183, $184)|0;
      $186 = (($185|0) / 16)&-1;
      HEAP32[21781] = $186;
      HEAP32[21793] = 0;
      break;
     }
     $187 = HEAP32[21788]|0;
     $188 = $16;
     $189 = (($187|0) % ($188|0))&-1;
     $190 = ($189|0)==(0);
     if ($190) {
      $191 = HEAP32[21781]|0;
      $192 = $15;
      $193 = Math_imul($191, $192)|0;
      $194 = (($193|0) / 16)&-1;
      HEAP32[21781] = $194;
     }
    }
   }
  } while(0);
  $195 = HEAP32[20924]|0;
  $196 = $195 >> 16;
  $197 = $196&65535;
  $1 = $197;
  $3 = 0;
  $198 = HEAP32[21787]|0;
  $199 = (($198) + 1)|0;
  HEAP32[21787] = $199;
  $200 = HEAP32[21787]|0;
  $201 = ($200|0)>=(0);
  if ($201) {
   $202 = HEAP32[21787]|0;
   $203 = HEAP32[20926]|0;
   $204 = ($202|0)<($203|0);
   if ($204) {
    $205 = HEAP32[20194]|0;
    $206 = ((($205)) + 104|0);
    $207 = HEAP32[$206>>2]|0;
    $208 = (($207) + 1)|0;
    $11 = $208;
    while(1) {
     $209 = $11;
     $210 = ($209|0)<(9);
     if (!($210)) {
      break;
     }
     $211 = $11;
     $212 = (83752 + ($211<<2)|0);
     $213 = HEAP32[$212>>2]|0;
     $214 = $1;
     $215 = $214&65535;
     $216 = Math_imul($213, $215)|0;
     $217 = $216&65535;
     $2 = $217;
     $218 = $2;
     $219 = $218&65535;
     $220 = $219 >> 5;
     $221 = (10652 + ($220<<1)|0);
     $222 = HEAP16[$221>>1]|0;
     $223 = $222 << 16 >> 16;
     $224 = $11;
     $225 = (83716 + ($224<<2)|0);
     $226 = HEAP32[$225>>2]|0;
     $227 = Math_imul($223, $226)|0;
     $228 = $3;
     $229 = (($228) + ($227))|0;
     $3 = $229;
     $230 = $11;
     $231 = (($230) + 1)|0;
     $11 = $231;
    }
    $232 = $3;
    $233 = HEAP32[21785]|0;
    $234 = (($232|0) / ($233|0))&-1;
    $235 = HEAP32[21787]|0;
    $236 = (26983 + ($235)|0);
    $237 = HEAP8[$236>>0]|0;
    $238 = $237&255;
    $239 = Math_imul($234, $238)|0;
    $3 = $239;
   }
  }
  $240 = $1;
  $2 = $240;
  $4 = 1;
  while(1) {
   $241 = $4;
   $242 = HEAP32[21782]|0;
   $243 = ($241|0)<=($242|0);
   if (!($243)) {
    break;
   }
   $244 = $2;
   $245 = $244&65535;
   $246 = $245 >> 5;
   $247 = (10652 + ($246<<1)|0);
   $248 = HEAP16[$247>>1]|0;
   $249 = $248 << 16 >> 16;
   $250 = $4;
   $251 = HEAP32[20947]|0;
   $252 = (($251) + ($250<<2)|0);
   $253 = HEAP32[$252>>2]|0;
   $254 = Math_imul($249, $253)|0;
   $255 = $3;
   $256 = (($255) + ($254))|0;
   $3 = $256;
   $257 = $1;
   $258 = $257&65535;
   $259 = $2;
   $260 = $259&65535;
   $261 = (($260) + ($258))|0;
   $262 = $261&65535;
   $2 = $262;
   $263 = $4;
   $264 = (($263) + 1)|0;
   $4 = $264;
  }
  while(1) {
   $265 = $4;
   $266 = HEAP32[21786]|0;
   $267 = ($265|0)<=($266|0);
   if (!($267)) {
    break;
   }
   $268 = $2;
   $269 = $268&65535;
   $270 = $269 >> 5;
   $271 = (10652 + ($270<<1)|0);
   $272 = HEAP16[$271>>1]|0;
   $273 = $272 << 16 >> 16;
   $274 = $4;
   $275 = HEAP32[20947]|0;
   $276 = (($275) + ($274<<2)|0);
   $277 = HEAP32[$276>>2]|0;
   $278 = Math_imul($273, $277)|0;
   $279 = $3;
   $280 = (($279) - ($278))|0;
   $3 = $280;
   $281 = $1;
   $282 = $281&65535;
   $283 = $2;
   $284 = $283&65535;
   $285 = (($284) + ($282))|0;
   $286 = $285&65535;
   $2 = $286;
   $287 = $4;
   $288 = (($287) + 1)|0;
   $4 = $288;
  }
  $289 = HEAP32[21794]|0;
  $290 = ($289|0)!=(64);
  if ($290) {
   $291 = $3;
   $292 = $291 >> 6;
   $293 = HEAP32[21794]|0;
   $294 = Math_imul($292, $293)|0;
   $3 = $294;
  }
  $295 = HEAP32[20194]|0;
  $296 = ((($295)) + 292|0);
  $297 = HEAP32[$296>>2]|0;
  $298 = ($297|0)!=(0);
  if ($298) {
   $299 = (__ZL11ApplyBreathv()|0);
   $300 = $3;
   $301 = (($300) + ($299))|0;
   $3 = $301;
  }
  $8 = 0;
  $302 = HEAP32[(80904)>>2]|0;
  $303 = HEAP32[(80892)>>2]|0;
  $304 = ($302|0)<($303|0);
  if ($304) {
   $305 = HEAP32[(80896)>>2]|0;
   $306 = ($305|0)==(0);
   if ($306) {
    $307 = HEAP32[(80904)>>2]|0;
    $308 = HEAP32[(80912)>>2]|0;
    $309 = (($307) + ($308))|0;
    $310 = (($309) + 1)|0;
    $311 = HEAP32[(80888)>>2]|0;
    $312 = (($311) + ($310)|0);
    $313 = HEAP8[$312>>0]|0;
    $12 = $313;
    $314 = HEAP32[(80904)>>2]|0;
    $315 = HEAP32[(80912)>>2]|0;
    $316 = (($314) + ($315))|0;
    $317 = HEAP32[(80888)>>2]|0;
    $318 = (($317) + ($316)|0);
    $319 = HEAP8[$318>>0]|0;
    $320 = $319&255;
    $321 = $12;
    $322 = $321 << 24 >> 24;
    $323 = $322<<8;
    $324 = (($320) + ($323))|0;
    $13 = $324;
    $325 = HEAP32[(80904)>>2]|0;
    $326 = (($325) + 2)|0;
    HEAP32[(80904)>>2] = $326;
   } else {
    $327 = HEAP32[(80912)>>2]|0;
    $328 = HEAP32[(80904)>>2]|0;
    $329 = (($328) + 1)|0;
    HEAP32[(80904)>>2] = $329;
    $330 = (($327) + ($328))|0;
    $331 = HEAP32[(80888)>>2]|0;
    $332 = (($331) + ($330)|0);
    $333 = HEAP8[$332>>0]|0;
    $334 = $333 << 24 >> 24;
    $335 = HEAP32[(80896)>>2]|0;
    $336 = Math_imul($334, $335)|0;
    $13 = $336;
   }
   $337 = $13;
   $338 = HEAP32[(80920)>>2]|0;
   $339 = Math_imul($337, $338)|0;
   $340 = $339 >> 10;
   $8 = $340;
   $341 = $8;
   $342 = HEAP32[(80900)>>2]|0;
   $343 = Math_imul($341, $342)|0;
   $344 = (($343|0) / 32)&-1;
   $8 = $344;
   $345 = HEAP32[(80904)>>2]|0;
   $346 = HEAP32[(80912)>>2]|0;
   $347 = (($345) + ($346))|0;
   $348 = HEAP32[(80908)>>2]|0;
   $349 = ($347|0)>=($348|0);
   if ($349) {
    $350 = HEAP32[(80908)>>2]|0;
    $351 = ($350*3)|0;
    $352 = (($351|0) / 4)&-1;
    $353 = HEAP32[(80912)>>2]|0;
    $354 = (($353) - ($352))|0;
    HEAP32[(80912)>>2] = $354;
   }
  }
  $355 = $8;
  $356 = $3;
  $357 = $356 >> 8;
  $358 = HEAP32[21781]|0;
  $359 = Math_imul($357, $358)|0;
  $360 = $359 >> 13;
  $361 = (($355) + ($360))|0;
  $7 = $361;
  $362 = HEAP32[20214]|0;
  $363 = (($362) + 1)|0;
  HEAP32[20214] = $363;
  $364 = (108420 + ($362<<1)|0);
  $365 = HEAP16[$364>>1]|0;
  $366 = $365 << 16 >> 16;
  $367 = HEAP32[20215]|0;
  $368 = Math_imul($366, $367)|0;
  $9 = $368;
  $369 = $9;
  $370 = $369 >> 8;
  $371 = $7;
  $372 = (($371) + ($370))|0;
  $7 = $372;
  $373 = HEAP32[20214]|0;
  $374 = ($373|0)>=(5500);
  if ($374) {
   HEAP32[20214] = 0;
  }
  $375 = $7;
  $376 = HEAP32[1264]|0;
  $377 = Math_imul($375, $376)|0;
  $378 = $377 >> 8;
  $6 = $378;
  $379 = $6;
  $380 = ($379|0)>=(32768);
  if ($380) {
   $381 = $7;
   $382 = (8388608 / ($381|0))&-1;
   $383 = (($382) - 1)|0;
   $10 = $383;
   $384 = $10;
   $385 = HEAP32[1264]|0;
   $386 = ($384|0)<($385|0);
   if ($386) {
    $387 = $10;
    HEAP32[1264] = $387;
   }
   $388 = $7;
   $389 = HEAP32[1264]|0;
   $390 = Math_imul($388, $389)|0;
   $391 = $390 >> 8;
   $6 = $391;
  } else {
   $392 = $6;
   $393 = ($392|0)<=(-32768);
   if ($393) {
    $394 = $7;
    $395 = (-8388608 / ($394|0))&-1;
    $396 = (($395) - 1)|0;
    $10 = $396;
    $397 = $10;
    $398 = HEAP32[1264]|0;
    $399 = ($397|0)<($398|0);
    if ($399) {
     $400 = $10;
     HEAP32[1264] = $400;
    }
    $401 = $7;
    $402 = HEAP32[1264]|0;
    $403 = Math_imul($401, $402)|0;
    $404 = $403 >> 8;
    $6 = $404;
   }
  }
  $405 = $6;
  $406 = $405&255;
  $407 = HEAP32[20232]|0;
  $408 = ((($407)) + 1|0);
  HEAP32[20232] = $408;
  HEAP8[$407>>0] = $406;
  $409 = $6;
  $410 = $409 >> 8;
  $411 = $410&255;
  $412 = HEAP32[20232]|0;
  $413 = ((($412)) + 1|0);
  HEAP32[20232] = $413;
  HEAP8[$412>>0] = $411;
  $414 = $6;
  $415 = $414&65535;
  $416 = HEAP32[20213]|0;
  $417 = (($416) + 1)|0;
  HEAP32[20213] = $417;
  $418 = (108420 + ($416<<1)|0);
  HEAP16[$418>>1] = $415;
  $419 = HEAP32[20213]|0;
  $420 = ($419|0)>=(5500);
  if ($420) {
   HEAP32[20213] = 0;
  }
  $421 = HEAP32[20232]|0;
  $422 = HEAP32[20234]|0;
  $423 = ($421>>>0)>=($422>>>0);
  if ($423) {
   label = 74;
   break;
  }
 }
 if ((label|0) == 4) {
  $0 = 0;
  $424 = $0;
  STACKTOP = sp;return ($424|0);
 }
 else if ((label|0) == 20) {
  $0 = 0;
  $424 = $0;
  STACKTOP = sp;return ($424|0);
 }
 else if ((label|0) == 74) {
  $0 = 1;
  $424 = $0;
  STACKTOP = sp;return ($424|0);
 }
 return (0)|0;
}
function __ZL17AdvanceParametersv() {
 var $$ = 0, $$1 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0.0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0.0, $112 = 0.0, $113 = 0;
 var $114 = 0, $115 = 0, $116 = 0.0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0;
 var $132 = 0, $133 = 0, $134 = 0, $135 = 0.0, $136 = 0, $137 = 0, $138 = 0, $139 = 0.0, $14 = 0, $140 = 0.0, $141 = 0, $142 = 0, $143 = 0, $144 = 0.0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0;
 var $150 = 0, $151 = 0.0, $152 = 0, $153 = 0, $154 = 0, $155 = 0.0, $156 = 0.0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0.0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0;
 var $169 = 0, $17 = 0, $170 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0;
 var $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0;
 var $51 = 0.0, $52 = 0, $53 = 0, $54 = 0, $55 = 0.0, $56 = 0.0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0.0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0.0, $68 = 0, $69 = 0;
 var $7 = 0, $70 = 0, $71 = 0.0, $72 = 0.0, $73 = 0, $74 = 0, $75 = 0, $76 = 0.0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0;
 var $88 = 0.0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0.0, $93 = 0.0, $94 = 0, $95 = 0, $96 = 0, $97 = 0.0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = HEAP32[(80876)>>2]|0;
 $3 = HEAP32[(80872)>>2]|0;
 $4 = (($3) + ($2))|0;
 HEAP32[(80872)>>2] = $4;
 $5 = HEAP32[(80872)>>2]|0;
 $6 = $5 >> 8;
 $1 = $6;
 $7 = ($6|0)>(127);
 $$ = $7 ? 127 : $6;
 $1 = $$;
 $8 = $1;
 $9 = HEAP32[20216]|0;
 $10 = (($9) + ($8)|0);
 $11 = HEAP8[$10>>0]|0;
 $12 = $11&255;
 $13 = HEAP32[(80884)>>2]|0;
 $14 = Math_imul($12, $13)|0;
 $0 = $14;
 $15 = $0;
 $16 = $15 >> 8;
 $17 = HEAP32[(80880)>>2]|0;
 $18 = (($16) + ($17))|0;
 HEAP32[(80868)>>2] = $18;
 $19 = HEAP32[21795]|0;
 $20 = HEAP32[21792]|0;
 $21 = (($20) + ($19))|0;
 HEAP32[21792] = $21;
 $22 = HEAP32[21796]|0;
 $23 = ($22|0)>=(23552);
 if ($23) {
  HEAP32[21796] = 0;
 }
 $24 = HEAP32[21796]|0;
 $25 = $24 >> 6;
 $26 = (27437 + ($25)|0);
 $27 = HEAP8[$26>>0]|0;
 $28 = $27&255;
 $29 = (($28) - 128)|0;
 $30 = HEAP32[1265]|0;
 $31 = Math_imul($29, $30)|0;
 $0 = $31;
 $32 = HEAP32[20921]|0;
 $33 = HEAP32[21796]|0;
 $34 = (($33) + ($32))|0;
 HEAP32[21796] = $34;
 $35 = $0;
 $36 = HEAP32[(80868)>>2]|0;
 $37 = (($36) + ($35))|0;
 HEAP32[(80868)>>2] = $37;
 $38 = HEAP32[(80868)>>2]|0;
 $39 = ($38|0)<(102400);
 $$1 = $39 ? 102400 : $37;
 HEAP32[(80868)>>2] = $$1;
 $40 = HEAP32[20922]|0;
 $41 = HEAP32[21797]|0;
 $42 = ($40|0)==($41|0);
 if ($42) {
  STACKTOP = sp;return;
 }
 $1 = 0;
 while(1) {
  $43 = $1;
  $44 = HEAP32[20194]|0;
  $45 = ((($44)) + 104|0);
  $46 = HEAP32[$45>>2]|0;
  $47 = ($43|0)<=($46|0);
  if (!($47)) {
   break;
  }
  $48 = $1;
  $49 = (37352 + (($48*80)|0)|0);
  $50 = ((($49)) + 48|0);
  $51 = +HEAPF64[$50>>3];
  $52 = $1;
  $53 = (37352 + (($52*80)|0)|0);
  $54 = ((($53)) + 16|0);
  $55 = +HEAPF64[$54>>3];
  $56 = $55 + $51;
  HEAPF64[$54>>3] = $56;
  $57 = $1;
  $58 = (37352 + (($57*80)|0)|0);
  $59 = ((($58)) + 16|0);
  $60 = +HEAPF64[$59>>3];
  $61 = (~~(($60)));
  $62 = $1;
  $63 = (37352 + (($62*80)|0)|0);
  HEAP32[$63>>2] = $61;
  $64 = $1;
  $65 = (37352 + (($64*80)|0)|0);
  $66 = ((($65)) + 56|0);
  $67 = +HEAPF64[$66>>3];
  $68 = $1;
  $69 = (37352 + (($68*80)|0)|0);
  $70 = ((($69)) + 24|0);
  $71 = +HEAPF64[$70>>3];
  $72 = $71 + $67;
  HEAPF64[$70>>3] = $72;
  $73 = $1;
  $74 = (37352 + (($73*80)|0)|0);
  $75 = ((($74)) + 24|0);
  $76 = +HEAPF64[$75>>3];
  $77 = (~~(($76)));
  $78 = $1;
  $79 = (37352 + (($78*80)|0)|0);
  $80 = ((($79)) + 4|0);
  HEAP32[$80>>2] = $77;
  $81 = ($77|0)<(0);
  if ($81) {
   $82 = $1;
   $83 = (37352 + (($82*80)|0)|0);
   $84 = ((($83)) + 4|0);
   HEAP32[$84>>2] = 0;
  }
  $85 = $1;
  $86 = (37352 + (($85*80)|0)|0);
  $87 = ((($86)) + 64|0);
  $88 = +HEAPF64[$87>>3];
  $89 = $1;
  $90 = (37352 + (($89*80)|0)|0);
  $91 = ((($90)) + 32|0);
  $92 = +HEAPF64[$91>>3];
  $93 = $92 + $88;
  HEAPF64[$91>>3] = $93;
  $94 = $1;
  $95 = (37352 + (($94*80)|0)|0);
  $96 = ((($95)) + 32|0);
  $97 = +HEAPF64[$96>>3];
  $98 = (~~(($97)));
  $99 = $1;
  $100 = (37352 + (($99*80)|0)|0);
  $101 = ((($100)) + 8|0);
  HEAP32[$101>>2] = $98;
  $102 = $1;
  $103 = ($102|0)<(3);
  $104 = $1;
  $105 = (37352 + (($104*80)|0)|0);
  if ($103) {
   $106 = ((($105)) + 72|0);
   $107 = +HEAPF64[$106>>3];
   $108 = $1;
   $109 = (37352 + (($108*80)|0)|0);
   $110 = ((($109)) + 40|0);
   $111 = +HEAPF64[$110>>3];
   $112 = $111 + $107;
   HEAPF64[$110>>3] = $112;
   $113 = $1;
   $114 = (37352 + (($113*80)|0)|0);
   $115 = ((($114)) + 40|0);
   $116 = +HEAPF64[$115>>3];
   $117 = (~~(($116)));
   $118 = $1;
   $119 = (37352 + (($118*80)|0)|0);
   $120 = ((($119)) + 12|0);
   HEAP32[$120>>2] = $117;
  } else {
   $121 = ((($105)) + 8|0);
   $122 = HEAP32[$121>>2]|0;
   $123 = $1;
   $124 = (37352 + (($123*80)|0)|0);
   $125 = ((($124)) + 12|0);
   HEAP32[$125>>2] = $122;
  }
  $126 = $1;
  $127 = (($126) + 1)|0;
  $1 = $127;
 }
 while(1) {
  $128 = $1;
  $129 = ($128|0)<(8);
  if (!($129)) {
   break;
  }
  $130 = $1;
  $131 = ($130|0)<(7);
  if ($131) {
   $132 = $1;
   $133 = (37352 + (($132*80)|0)|0);
   $134 = ((($133)) + 48|0);
   $135 = +HEAPF64[$134>>3];
   $136 = $1;
   $137 = (37352 + (($136*80)|0)|0);
   $138 = ((($137)) + 16|0);
   $139 = +HEAPF64[$138>>3];
   $140 = $139 + $135;
   HEAPF64[$138>>3] = $140;
   $141 = $1;
   $142 = (37352 + (($141*80)|0)|0);
   $143 = ((($142)) + 16|0);
   $144 = +HEAPF64[$143>>3];
   $145 = (~~(($144)));
   $146 = $1;
   $147 = (37352 + (($146*80)|0)|0);
   HEAP32[$147>>2] = $145;
  }
  $148 = $1;
  $149 = (37352 + (($148*80)|0)|0);
  $150 = ((($149)) + 56|0);
  $151 = +HEAPF64[$150>>3];
  $152 = $1;
  $153 = (37352 + (($152*80)|0)|0);
  $154 = ((($153)) + 24|0);
  $155 = +HEAPF64[$154>>3];
  $156 = $155 + $151;
  HEAPF64[$154>>3] = $156;
  $157 = $1;
  $158 = (37352 + (($157*80)|0)|0);
  $159 = ((($158)) + 24|0);
  $160 = +HEAPF64[$159>>3];
  $161 = (~~(($160)));
  $162 = $1;
  $163 = (37352 + (($162*80)|0)|0);
  $164 = ((($163)) + 4|0);
  HEAP32[$164>>2] = $161;
  $165 = ($161|0)<(0);
  if ($165) {
   $166 = $1;
   $167 = (37352 + (($166*80)|0)|0);
   $168 = ((($167)) + 4|0);
   HEAP32[$168>>2] = 0;
  }
  $169 = $1;
  $170 = (($169) + 1)|0;
  $1 = $170;
 }
 STACKTOP = sp;return;
}
function __ZL9SetBreathv() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = HEAP32[20194]|0;
 $2 = ((($1)) + 292|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==(0);
 if ($4) {
  STACKTOP = sp;return;
 }
 $0 = 1;
 while(1) {
  $5 = $0;
  $6 = ($5|0)<(9);
  if (!($6)) {
   break;
  }
  $7 = $0;
  $8 = HEAP32[20194]|0;
  $9 = ((($8)) + 292|0);
  $10 = (($9) + ($7<<2)|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = ($11|0)!=(0);
  if ($12) {
   $13 = $0;
   $14 = (36992 + (($13*40)|0)|0);
   $15 = $0;
   $16 = (37352 + (($15*80)|0)|0);
   $17 = HEAP32[$16>>2]|0;
   $18 = $17 >> 16;
   $19 = $0;
   $20 = HEAP32[20194]|0;
   $21 = ((($20)) + 328|0);
   $22 = (($21) + ($19<<2)|0);
   $23 = HEAP32[$22>>2]|0;
   __ZL12setresonatorP9RESONATORiii($14,$18,$23,0);
  }
  $24 = $0;
  $25 = (($24) + 1)|0;
  $0 = $25;
 }
 STACKTOP = sp;return;
}
function __ZL11ApplyBreathv() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0.0, $26 = 0.0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $0 = 0;
 $4 = (_rand()|0);
 $5 = $4 & 16383;
 $6 = (($5) - 8192)|0;
 $1 = $6;
 $2 = 1;
 while(1) {
  $7 = $2;
  $8 = ($7|0)<(9);
  if (!($8)) {
   break;
  }
  $9 = $2;
  $10 = HEAP32[20194]|0;
  $11 = ((($10)) + 292|0);
  $12 = (($11) + ($9<<2)|0);
  $13 = HEAP32[$12>>2]|0;
  $3 = $13;
  $14 = ($13|0)!=(0);
  if ($14) {
   $15 = $2;
   $16 = (37352 + (($15*80)|0)|0);
   $17 = ((($16)) + 4|0);
   $18 = HEAP32[$17>>2]|0;
   $19 = $18 >> 14;
   $20 = $3;
   $21 = Math_imul($20, $19)|0;
   $3 = $21;
   $22 = $2;
   $23 = (36992 + (($22*40)|0)|0);
   $24 = $1;
   $25 = (+($24|0));
   $26 = (+__ZL9resonatorP9RESONATORd($23,$25));
   $27 = (~~(($26)));
   $28 = $3;
   $29 = Math_imul($27, $28)|0;
   $30 = $0;
   $31 = (($30) + ($29))|0;
   $0 = $31;
  }
  $32 = $2;
  $33 = (($32) + 1)|0;
  $2 = $33;
 }
 $34 = $0;
 STACKTOP = sp;return ($34|0);
}
function __ZL9resonatorP9RESONATORd($0,$1) {
 $0 = $0|0;
 $1 = +$1;
 var $10 = 0, $11 = 0.0, $12 = 0, $13 = 0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0, $18 = 0, $19 = 0.0, $2 = 0, $20 = 0, $21 = 0, $22 = 0.0, $23 = 0.0, $24 = 0.0, $25 = 0, $26 = 0, $27 = 0.0, $28 = 0;
 var $29 = 0, $3 = 0.0, $30 = 0.0, $31 = 0, $32 = 0, $33 = 0.0, $4 = 0.0, $5 = 0, $6 = 0.0, $7 = 0.0, $8 = 0.0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $2 = $0;
 $3 = $1;
 $5 = $2;
 $6 = +HEAPF64[$5>>3];
 $7 = $3;
 $8 = $6 * $7;
 $9 = $2;
 $10 = ((($9)) + 8|0);
 $11 = +HEAPF64[$10>>3];
 $12 = $2;
 $13 = ((($12)) + 24|0);
 $14 = +HEAPF64[$13>>3];
 $15 = $11 * $14;
 $16 = $8 + $15;
 $17 = $2;
 $18 = ((($17)) + 16|0);
 $19 = +HEAPF64[$18>>3];
 $20 = $2;
 $21 = ((($20)) + 32|0);
 $22 = +HEAPF64[$21>>3];
 $23 = $19 * $22;
 $24 = $16 + $23;
 $4 = $24;
 $25 = $2;
 $26 = ((($25)) + 24|0);
 $27 = +HEAPF64[$26>>3];
 $28 = $2;
 $29 = ((($28)) + 32|0);
 HEAPF64[$29>>3] = $27;
 $30 = $4;
 $31 = $2;
 $32 = ((($31)) + 24|0);
 HEAPF64[$32>>3] = $30;
 $33 = $4;
 STACKTOP = sp;return (+$33);
}
function __Z11SetEmbeddedii($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $4 = 0;
 $6 = $2;
 $7 = $6 & 31;
 $5 = $7;
 $8 = $2;
 $9 = $8 & 96;
 $10 = ($9|0)==(96);
 if ($10) {
  $4 = -1;
 } else {
  $11 = $2;
  $12 = $11 & 96;
  $13 = ($12|0)==(64);
  if ($13) {
   $4 = 1;
  }
 }
 $14 = $5;
 $15 = ($14|0)<(15);
 if ($15) {
  $16 = $4;
  $17 = ($16|0)==(0);
  $18 = $3;
  if ($17) {
   $19 = $5;
   $20 = (80784 + ($19<<2)|0);
   HEAP32[$20>>2] = $18;
  } else {
   $21 = $4;
   $22 = Math_imul($18, $21)|0;
   $23 = $5;
   $24 = (80784 + ($23<<2)|0);
   $25 = HEAP32[$24>>2]|0;
   $26 = (($25) + ($22))|0;
   HEAP32[$24>>2] = $26;
  }
  $27 = $5;
  $28 = (80784 + ($27<<2)|0);
  $29 = HEAP32[$28>>2]|0;
  $30 = $5;
  $31 = (5064 + ($30<<2)|0);
  $32 = HEAP32[$31>>2]|0;
  $33 = (__ZL13SetWithRange0ii($29,$32)|0);
  $34 = $5;
  $35 = (80784 + ($34<<2)|0);
  HEAP32[$35>>2] = $33;
 }
 $36 = $5;
 switch ($36|0) {
 case 6:  {
  __ZL14WavegenSetEchov();
  break;
 }
 case 1:  {
  break;
 }
 case 3:  {
  $37 = (__Z12GetAmplitudev()|0);
  HEAP32[1262] = $37;
  STACKTOP = sp;return;
  break;
 }
 case 13:  {
  $38 = (__Z12GetAmplitudev()|0);
  HEAP32[1262] = $38;
  STACKTOP = sp;return;
  break;
 }
 case 5:  {
  __ZL14WavegenSetEchov();
  STACKTOP = sp;return;
  break;
 }
 default: {
  STACKTOP = sp;return;
 }
 }
 __ZL16SetPitchFormantsv();
 STACKTOP = sp;return;
}
function __ZL13SetWithRange0ii($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $5 = $3;
 $6 = ($5|0)<(0);
 do {
  if ($6) {
   $2 = 0;
  } else {
   $7 = $3;
   $8 = $4;
   $9 = ($7|0)>($8|0);
   if ($9) {
    $10 = $4;
    $2 = $10;
    break;
   } else {
    $11 = $3;
    $2 = $11;
    break;
   }
  }
 } while(0);
 $12 = $2;
 STACKTOP = sp;return ($12|0);
}
function __ZL14WavegenSetEchov() {
 var $$ = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = HEAP32[20194]|0;
 $3 = ((($2)) + 112|0);
 $4 = HEAP32[$3>>2]|0;
 HEAP32[21794] = $4;
 $5 = HEAP32[20194]|0;
 $6 = ((($5)) + 96|0);
 $7 = HEAP32[$6>>2]|0;
 $0 = $7;
 $8 = HEAP32[20194]|0;
 $9 = ((($8)) + 100|0);
 $10 = HEAP32[$9>>2]|0;
 $1 = $10;
 $11 = $0;
 $12 = ($11|0)>=(5500);
 if ($12) {
  $0 = 5499;
 }
 $13 = $1;
 $14 = ($13|0)>(100);
 if ($14) {
  $1 = 100;
 }
 _memset((108420|0),0,11000)|0;
 HEAP32[20214] = 0;
 $15 = HEAP32[(80804)>>2]|0;
 $16 = ($15|0)>(0);
 if ($16) {
  $17 = HEAP32[(80804)>>2]|0;
  $1 = $17;
  $0 = 130;
 }
 $18 = $0;
 $19 = ($18|0)==(0);
 if ($19) {
  $1 = 0;
 }
 $20 = $0;
 $21 = HEAP32[20211]|0;
 $22 = Math_imul($20, $21)|0;
 $23 = (($22|0) / 1000)&-1;
 HEAP32[20213] = $23;
 $24 = HEAP32[20213]|0;
 HEAP32[21798] = $24;
 $25 = $1;
 $26 = ($25|0)==(0);
 $$ = $26 ? 0 : $24;
 HEAP32[21798] = $$;
 $27 = $1;
 $28 = ($27|0)>(20);
 if ($28) {
  $29 = HEAP32[20213]|0;
  $30 = $29<<1;
  HEAP32[21798] = $30;
 }
 $31 = $1;
 HEAP32[20215] = $31;
 $32 = (__Z12GetAmplitudev()|0);
 HEAP32[1262] = $32;
 $33 = HEAP32[1262]|0;
 $34 = $1;
 $35 = (500 - ($34))|0;
 $36 = Math_imul($33, $35)|0;
 $37 = (($36|0) / 500)&-1;
 HEAP32[1262] = $37;
 STACKTOP = sp;return;
}
function __ZL16SetPitchFormantsv() {
 var $$ = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = 256;
 $3 = HEAP32[(80788)>>2]|0;
 $2 = $3;
 $4 = ($3|0)>(101);
 $$ = $4 ? 101 : $3;
 $2 = $$;
 $5 = $2;
 $6 = ($5|0)>(50);
 if ($6) {
  $7 = $2;
  $8 = (($7) - 50)|0;
  $9 = ($8*25)|0;
  $10 = (($9|0) / 50)&-1;
  $11 = (256 + ($10))|0;
  $1 = $11;
 }
 $0 = 0;
 while(1) {
  $12 = $0;
  $13 = ($12|0)<=(5);
  if (!($13)) {
   break;
  }
  $14 = $0;
  $15 = HEAP32[20194]|0;
  $16 = ((($15)) + 236|0);
  $17 = (($16) + ($14<<1)|0);
  $18 = HEAP16[$17>>1]|0;
  $19 = $18 << 16 >> 16;
  $20 = $1;
  $21 = Math_imul($19, $20)|0;
  $22 = (($21|0) / 256)&-1;
  $23 = $22&65535;
  $24 = $0;
  $25 = HEAP32[20194]|0;
  $26 = ((($25)) + 164|0);
  $27 = (($26) + ($24<<1)|0);
  HEAP16[$27>>1] = $23;
  $28 = $0;
  $29 = (($28) + 1)|0;
  $0 = $29;
 }
 $30 = HEAP32[(80808)>>2]|0;
 $31 = ($30*3)|0;
 $1 = $31;
 $32 = HEAP32[20194]|0;
 $33 = ((($32)) + 254|0);
 $34 = HEAP16[$33>>1]|0;
 $35 = $34 << 16 >> 16;
 $36 = $1;
 $37 = $36<<1;
 $38 = (256 - ($37))|0;
 $39 = Math_imul($35, $38)|0;
 $40 = (($39|0) / 256)&-1;
 $41 = $40&65535;
 $42 = HEAP32[20194]|0;
 $43 = ((($42)) + 182|0);
 HEAP16[$43>>1] = $41;
 $44 = HEAP32[20194]|0;
 $45 = ((($44)) + 254|0);
 $46 = ((($45)) + 2|0);
 $47 = HEAP16[$46>>1]|0;
 $48 = $47 << 16 >> 16;
 $49 = $1;
 $50 = (256 - ($49))|0;
 $51 = Math_imul($48, $50)|0;
 $52 = (($51|0) / 256)&-1;
 $53 = $52&65535;
 $54 = HEAP32[20194]|0;
 $55 = ((($54)) + 182|0);
 $56 = ((($55)) + 2|0);
 HEAP16[$56>>1] = $53;
 STACKTOP = sp;return;
}
function __Z15WavegenSetVoiceP7voice_t($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 _memcpy((87196|0),($2|0),1364)|0;
 HEAP32[20194] = 87196;
 $3 = $1;
 $4 = ((($3)) + 108|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)==(0);
 if ($6) {
  HEAP32[20928] = 26726;
 } else {
  HEAP32[20928] = 27111;
 }
 $7 = $1;
 $8 = ((($7)) + 120|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ($9*26)|0;
 $11 = (($10|0) / 100)&-1;
 HEAP32[1281] = $11;
 $12 = HEAP32[20211]|0;
 $13 = ($12|0)<=(11000);
 if ($13) {
  $14 = HEAP32[1281]|0;
  $15 = $14<<1;
  HEAP32[1281] = $15;
  HEAP32[1263] = 6;
 }
 __ZL14WavegenSetEchov();
 __ZL16SetPitchFormantsv();
 $16 = HEAP32[20194]|0;
 $17 = ((($16)) + 128|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = HEAP32[20232]|0;
 __Z11MarkerEventijiiPh(8,0,$18,0,$19);
 STACKTOP = sp;return;
}
function __Z9SetPitch2P7voice_tiiPiS1_($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$ = 0, $$1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $9 = $4;
 $14 = $6;
 $15 = $7;
 $16 = ($14|0)>($15|0);
 if ($16) {
  $17 = $6;
  $10 = $17;
  $18 = $7;
  $6 = $18;
  $19 = $10;
  $7 = $19;
 }
 $20 = HEAP32[(80788)>>2]|0;
 $13 = $20;
 $21 = ($20|0)>(101);
 $$ = $21 ? 101 : $20;
 $13 = $$;
 $22 = HEAP32[(80808)>>2]|0;
 $23 = $13;
 $24 = (($23) - ($22))|0;
 $13 = $24;
 $25 = $13;
 $26 = ($25|0)<(0);
 $$1 = $26 ? 0 : $24;
 $13 = $$1;
 $27 = $5;
 $28 = ((($27)) + 64|0);
 $29 = HEAP32[$28>>2]|0;
 $30 = $13;
 $31 = (26624 + ($30)|0);
 $32 = HEAP8[$31>>0]|0;
 $33 = $32&255;
 $34 = Math_imul($29, $33)|0;
 $35 = (($34|0) / 128)&-1;
 $11 = $35;
 $36 = $5;
 $37 = ((($36)) + 68|0);
 $38 = HEAP32[$37>>2]|0;
 $39 = HEAP32[(80800)>>2]|0;
 $40 = Math_imul($38, $39)|0;
 $41 = (($40|0) / 50)&-1;
 $12 = $41;
 $42 = $12;
 $43 = $5;
 $44 = ((($43)) + 68|0);
 $45 = HEAP32[$44>>2]|0;
 $46 = (($42) - ($45))|0;
 $47 = ($46*18)|0;
 $48 = $11;
 $49 = (($48) - ($47))|0;
 $11 = $49;
 $50 = $11;
 $51 = $6;
 $52 = $12;
 $53 = Math_imul($51, $52)|0;
 $54 = (($53|0) / 2)&-1;
 $55 = (($50) + ($54))|0;
 $56 = $8;
 HEAP32[$56>>2] = $55;
 $57 = $11;
 $58 = $7;
 $59 = $12;
 $60 = Math_imul($58, $59)|0;
 $61 = (($60|0) / 2)&-1;
 $62 = (($57) + ($61))|0;
 $63 = $8;
 $64 = HEAP32[$63>>2]|0;
 $65 = (($62) - ($64))|0;
 $66 = $9;
 HEAP32[$66>>2] = $65;
 STACKTOP = sp;return;
}
function __Z8SetPitchiPhii($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$ = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $3;
 $8 = $5;
 HEAP32[20216] = $8;
 $9 = ($8|0)==(0|0);
 $$ = $9 ? 18752 : $8;
 HEAP32[20216] = $$;
 HEAP32[(80872)>>2] = 0;
 $10 = $4;
 $11 = ($10|0)==(0);
 if ($11) {
  HEAP32[(80876)>>2] = 0;
 } else {
  $12 = $4;
  $13 = (2097152 / ($12|0))&-1;
  HEAP32[(80876)>>2] = $13;
 }
 $14 = HEAP32[20194]|0;
 $15 = $6;
 $16 = $7;
 __Z9SetPitch2P7voice_tiiPiS1_($14,$15,$16,(80880),(80884));
 $17 = HEAP32[20216]|0;
 $18 = HEAP8[$17>>0]|0;
 $19 = $18&255;
 $20 = HEAP32[(80884)>>2]|0;
 $21 = Math_imul($19, $20)|0;
 $22 = $21 >> 8;
 $23 = HEAP32[(80880)>>2]|0;
 $24 = (($22) + ($23))|0;
 HEAP32[(80868)>>2] = $24;
 $25 = HEAP32[20194]|0;
 $26 = ((($25)) + 88|0);
 $27 = HEAP32[$26>>2]|0;
 HEAP32[1265] = $27;
 STACKTOP = sp;return;
}
function __Z8SetSynthiiP7frame_tS0_P7voice_t($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$ = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0.0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0;
 var $117 = 0.0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0.0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0;
 var $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0.0, $151 = 0.0, $152 = 0;
 var $153 = 0, $154 = 0, $155 = 0.0, $156 = 0.0, $157 = 0.0, $158 = 0, $159 = 0.0, $16 = 0, $160 = 0.0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0;
 var $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0.0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0.0, $186 = 0, $187 = 0, $188 = 0, $189 = 0;
 var $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0.0, $205 = 0.0, $206 = 0, $207 = 0;
 var $208 = 0, $209 = 0.0, $21 = 0, $210 = 0.0, $211 = 0.0, $212 = 0, $213 = 0.0, $214 = 0.0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0;
 var $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0.0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0;
 var $244 = 0, $245 = 0, $246 = 0.0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0;
 var $262 = 0, $263 = 0, $264 = 0, $265 = 0.0, $266 = 0.0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0.0, $271 = 0.0, $272 = 0.0, $273 = 0, $274 = 0.0, $275 = 0.0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0;
 var $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0.0, $296 = 0, $297 = 0, $298 = 0;
 var $299 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0.0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0;
 var $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0.0, $322 = 0.0, $323 = 0, $324 = 0, $325 = 0, $326 = 0.0, $327 = 0.0, $328 = 0.0, $329 = 0, $33 = 0, $330 = 0.0, $331 = 0.0, $332 = 0, $333 = 0, $334 = 0;
 var $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0;
 var $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $9 = $4;
 HEAP32[22140] = 0;
 HEAP32[20978] = 1;
 $16 = $6;
 $17 = $16 & 255;
 HEAP32[21793] = $17;
 HEAP32[21789] = 0;
 $18 = $6;
 $19 = $18 & 1024;
 $20 = ($19|0)!=(0);
 if ($20) {
  HEAP32[21789] = 3;
  $21 = $6;
  $22 = $21 >> 8;
  $23 = $22 & 3;
  $24 = (5128 + ($23<<2)|0);
  $25 = HEAP32[$24>>2]|0;
  HEAP32[21790] = $25;
 }
 $26 = $6;
 $27 = $26 & 2048;
 $28 = ($27|0)!=(0);
 if ($28) {
  HEAP32[21789] = 4;
  $29 = $6;
  $30 = $29 >> 8;
  $31 = $30 & 3;
  $32 = (5144 + ($31<<2)|0);
  $33 = HEAP32[$32>>2]|0;
  HEAP32[21790] = $33;
 }
 $34 = HEAP32[20916]|0;
 $35 = (($34) + 1)|0;
 $14 = $35;
 while(1) {
  $36 = $14;
  $37 = ($36|0)>=(170);
  if ($37) {
   $14 = 0;
  }
  $38 = $14;
  $39 = HEAP32[20917]|0;
  $40 = ($38|0)==($39|0);
  if ($40) {
   break;
  }
  $41 = $14;
  $42 = (80944 + ($41<<4)|0);
  $43 = HEAP32[$42>>2]|0;
  $15 = $43;
  $44 = $15;
  $45 = ($44|0)==(3);
  if ($45) {
   label = 10;
   break;
  }
  $46 = $15;
  $47 = ($46|0)==(6);
  $48 = $15;
  $49 = ($48|0)==(5);
  $or$cond = $47 | $49;
  if ($or$cond) {
   break;
  }
  $50 = $14;
  $51 = (($50) + 1)|0;
  $14 = $51;
 }
 if ((label|0) == 10) {
  HEAP32[20978] = 0;
 }
 $52 = $5;
 $53 = (($52) + 32)|0;
 $54 = $53 & -64;
 $12 = $54;
 $55 = $12;
 $56 = ($55|0)==(0);
 $$ = $56 ? 64 : $54;
 $12 = $$;
 $57 = HEAP32[20922]|0;
 HEAP32[21797] = $57;
 $58 = $12;
 $59 = HEAP32[20923]|0;
 $60 = (($59) + ($58))|0;
 HEAP32[20923] = $60;
 $61 = $12;
 $62 = (($61|0) / 4)&-1;
 $13 = $62;
 $63 = $9;
 $64 = ((($63)) + 164|0);
 $65 = ((($64)) + 14|0);
 $66 = HEAP16[$65>>1]|0;
 $67 = $66 << 16 >> 16;
 $68 = ($67*7800)|0;
 $69 = $9;
 $70 = ((($69)) + 218|0);
 $71 = ((($70)) + 14|0);
 $72 = HEAP16[$71>>1]|0;
 $73 = $72 << 16 >> 16;
 $74 = $73<<8;
 $75 = (($68) + ($74))|0;
 $76 = $75 << 8;
 HEAP32[(37912)>>2] = $76;
 $77 = $9;
 $78 = ((($77)) + 164|0);
 $79 = ((($78)) + 16|0);
 $80 = HEAP16[$79>>1]|0;
 $81 = $80 << 16 >> 16;
 $82 = ($81*9000)|0;
 $83 = $9;
 $84 = ((($83)) + 218|0);
 $85 = ((($84)) + 16|0);
 $86 = HEAP16[$85>>1]|0;
 $87 = $86 << 16 >> 16;
 $88 = $87<<8;
 $89 = (($82) + ($88))|0;
 $90 = $89 << 8;
 HEAP32[(37992)>>2] = $90;
 $10 = 0;
 while(1) {
  $91 = $10;
  $92 = ($91|0)<(8);
  if (!($92)) {
   break;
  }
  $93 = $10;
  $94 = ($93|0)<(7);
  if ($94) {
   $95 = $10;
   $96 = $7;
   $97 = ((($96)) + 2|0);
   $98 = (($97) + ($95<<1)|0);
   $99 = HEAP16[$98>>1]|0;
   $100 = $99 << 16 >> 16;
   $101 = $10;
   $102 = $9;
   $103 = ((($102)) + 164|0);
   $104 = (($103) + ($101<<1)|0);
   $105 = HEAP16[$104>>1]|0;
   $106 = $105 << 16 >> 16;
   $107 = Math_imul($100, $106)|0;
   $108 = $10;
   $109 = $9;
   $110 = ((($109)) + 218|0);
   $111 = (($110) + ($108<<1)|0);
   $112 = HEAP16[$111>>1]|0;
   $113 = $112 << 16 >> 16;
   $114 = $113<<8;
   $115 = (($107) + ($114))|0;
   $116 = $115 << 8;
   $117 = (+($116|0));
   $118 = $10;
   $119 = (37352 + (($118*80)|0)|0);
   $120 = ((($119)) + 16|0);
   HEAPF64[$120>>3] = $117;
   $121 = $10;
   $122 = (37352 + (($121*80)|0)|0);
   $123 = ((($122)) + 16|0);
   $124 = +HEAPF64[$123>>3];
   $125 = (~~(($124)));
   $126 = $10;
   $127 = (37352 + (($126*80)|0)|0);
   HEAP32[$127>>2] = $125;
   $128 = $10;
   $129 = $8;
   $130 = ((($129)) + 2|0);
   $131 = (($130) + ($128<<1)|0);
   $132 = HEAP16[$131>>1]|0;
   $133 = $132 << 16 >> 16;
   $134 = $10;
   $135 = $9;
   $136 = ((($135)) + 164|0);
   $137 = (($136) + ($134<<1)|0);
   $138 = HEAP16[$137>>1]|0;
   $139 = $138 << 16 >> 16;
   $140 = Math_imul($133, $139)|0;
   $141 = $10;
   $142 = $9;
   $143 = ((($142)) + 218|0);
   $144 = (($143) + ($141<<1)|0);
   $145 = HEAP16[$144>>1]|0;
   $146 = $145 << 16 >> 16;
   $147 = $146<<8;
   $148 = (($140) + ($147))|0;
   $149 = $148 << 8;
   $150 = (+($149|0));
   $11 = $150;
   $151 = $11;
   $152 = $10;
   $153 = (37352 + (($152*80)|0)|0);
   $154 = ((($153)) + 16|0);
   $155 = +HEAPF64[$154>>3];
   $156 = $151 - $155;
   $157 = $156 * 16.0;
   $158 = $13;
   $159 = (+($158|0));
   $160 = $157 / $159;
   $161 = $10;
   $162 = (37352 + (($161*80)|0)|0);
   $163 = ((($162)) + 48|0);
   HEAPF64[$163>>3] = $160;
  }
  $164 = $10;
  $165 = $7;
  $166 = ((($165)) + 18|0);
  $167 = (($166) + ($164)|0);
  $168 = HEAP8[$167>>0]|0;
  $169 = $168&255;
  $170 = $10;
  $171 = $9;
  $172 = ((($171)) + 182|0);
  $173 = (($172) + ($170<<1)|0);
  $174 = HEAP16[$173>>1]|0;
  $175 = $174 << 16 >> 16;
  $176 = Math_imul($169, $175)|0;
  $177 = $176 << 6;
  $178 = (+($177|0));
  $179 = $10;
  $180 = (37352 + (($179*80)|0)|0);
  $181 = ((($180)) + 24|0);
  HEAPF64[$181>>3] = $178;
  $182 = $10;
  $183 = (37352 + (($182*80)|0)|0);
  $184 = ((($183)) + 24|0);
  $185 = +HEAPF64[$184>>3];
  $186 = (~~(($185)));
  $187 = $10;
  $188 = (37352 + (($187*80)|0)|0);
  $189 = ((($188)) + 4|0);
  HEAP32[$189>>2] = $186;
  $190 = $10;
  $191 = $8;
  $192 = ((($191)) + 18|0);
  $193 = (($192) + ($190)|0);
  $194 = HEAP8[$193>>0]|0;
  $195 = $194&255;
  $196 = $10;
  $197 = $9;
  $198 = ((($197)) + 182|0);
  $199 = (($198) + ($196<<1)|0);
  $200 = HEAP16[$199>>1]|0;
  $201 = $200 << 16 >> 16;
  $202 = Math_imul($195, $201)|0;
  $203 = $202 << 6;
  $204 = (+($203|0));
  $11 = $204;
  $205 = $11;
  $206 = $10;
  $207 = (37352 + (($206*80)|0)|0);
  $208 = ((($207)) + 24|0);
  $209 = +HEAPF64[$208>>3];
  $210 = $205 - $209;
  $211 = $210 * 64.0;
  $212 = $12;
  $213 = (+($212|0));
  $214 = $211 / $213;
  $215 = $10;
  $216 = (37352 + (($215*80)|0)|0);
  $217 = ((($216)) + 56|0);
  HEAPF64[$217>>3] = $214;
  $218 = $10;
  $219 = ($218|0)<=(5);
  do {
   if ($219) {
    $220 = $10;
    $221 = HEAP32[20194]|0;
    $222 = ((($221)) + 104|0);
    $223 = HEAP32[$222>>2]|0;
    $224 = ($220|0)<=($223|0);
    if ($224) {
     $225 = $10;
     $226 = $7;
     $227 = ((($226)) + 26|0);
     $228 = (($227) + ($225)|0);
     $229 = HEAP8[$228>>0]|0;
     $230 = $229&255;
     $231 = $10;
     $232 = $9;
     $233 = ((($232)) + 200|0);
     $234 = (($233) + ($231<<1)|0);
     $235 = HEAP16[$234>>1]|0;
     $236 = $235 << 16 >> 16;
     $237 = Math_imul($230, $236)|0;
     $238 = $237 << 10;
     $239 = (+($238|0));
     $240 = $10;
     $241 = (37352 + (($240*80)|0)|0);
     $242 = ((($241)) + 32|0);
     HEAPF64[$242>>3] = $239;
     $243 = $10;
     $244 = (37352 + (($243*80)|0)|0);
     $245 = ((($244)) + 32|0);
     $246 = +HEAPF64[$245>>3];
     $247 = (~~(($246)));
     $248 = $10;
     $249 = (37352 + (($248*80)|0)|0);
     $250 = ((($249)) + 8|0);
     HEAP32[$250>>2] = $247;
     $251 = $10;
     $252 = $8;
     $253 = ((($252)) + 26|0);
     $254 = (($253) + ($251)|0);
     $255 = HEAP8[$254>>0]|0;
     $256 = $255&255;
     $257 = $10;
     $258 = $9;
     $259 = ((($258)) + 200|0);
     $260 = (($259) + ($257<<1)|0);
     $261 = HEAP16[$260>>1]|0;
     $262 = $261 << 16 >> 16;
     $263 = Math_imul($256, $262)|0;
     $264 = $263 << 10;
     $265 = (+($264|0));
     $11 = $265;
     $266 = $11;
     $267 = $10;
     $268 = (37352 + (($267*80)|0)|0);
     $269 = ((($268)) + 32|0);
     $270 = +HEAPF64[$269>>3];
     $271 = $266 - $270;
     $272 = $271 * 64.0;
     $273 = $12;
     $274 = (+($273|0));
     $275 = $272 / $274;
     $276 = $10;
     $277 = (37352 + (($276*80)|0)|0);
     $278 = ((($277)) + 64|0);
     HEAPF64[$278>>3] = $275;
     $279 = $10;
     $280 = ($279|0)<(3);
     $281 = $10;
     if ($280) {
      $282 = $7;
      $283 = ((($282)) + 32|0);
      $284 = (($283) + ($281)|0);
      $285 = HEAP8[$284>>0]|0;
      $286 = $285&255;
      $287 = $10;
      $288 = $9;
      $289 = ((($288)) + 200|0);
      $290 = (($289) + ($287<<1)|0);
      $291 = HEAP16[$290>>1]|0;
      $292 = $291 << 16 >> 16;
      $293 = Math_imul($286, $292)|0;
      $294 = $293 << 10;
      $295 = (+($294|0));
      $296 = $10;
      $297 = (37352 + (($296*80)|0)|0);
      $298 = ((($297)) + 40|0);
      HEAPF64[$298>>3] = $295;
      $299 = $10;
      $300 = (37352 + (($299*80)|0)|0);
      $301 = ((($300)) + 40|0);
      $302 = +HEAPF64[$301>>3];
      $303 = (~~(($302)));
      $304 = $10;
      $305 = (37352 + (($304*80)|0)|0);
      $306 = ((($305)) + 12|0);
      HEAP32[$306>>2] = $303;
      $307 = $10;
      $308 = $8;
      $309 = ((($308)) + 32|0);
      $310 = (($309) + ($307)|0);
      $311 = HEAP8[$310>>0]|0;
      $312 = $311&255;
      $313 = $10;
      $314 = $9;
      $315 = ((($314)) + 200|0);
      $316 = (($315) + ($313<<1)|0);
      $317 = HEAP16[$316>>1]|0;
      $318 = $317 << 16 >> 16;
      $319 = Math_imul($312, $318)|0;
      $320 = $319 << 10;
      $321 = (+($320|0));
      $11 = $321;
      $322 = $11;
      $323 = $10;
      $324 = (37352 + (($323*80)|0)|0);
      $325 = ((($324)) + 40|0);
      $326 = +HEAPF64[$325>>3];
      $327 = $322 - $326;
      $328 = $327 * 64.0;
      $329 = $12;
      $330 = (+($329|0));
      $331 = $328 / $330;
      $332 = $10;
      $333 = (37352 + (($332*80)|0)|0);
      $334 = ((($333)) + 72|0);
      HEAPF64[$334>>3] = $331;
      break;
     } else {
      $335 = (37352 + (($281*80)|0)|0);
      $336 = ((($335)) + 8|0);
      $337 = HEAP32[$336>>2]|0;
      $338 = $10;
      $339 = (37352 + (($338*80)|0)|0);
      $340 = ((($339)) + 12|0);
      HEAP32[$340>>2] = $337;
      break;
     }
    }
   }
  } while(0);
  $341 = $10;
  $342 = (($341) + 1)|0;
  $10 = $342;
 }
 STACKTOP = sp;return;
}
function __Z12WavegenFill2i($0) {
 $0 = $0|0;
 var $$ = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0.0, $187 = 0.0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0;
 var $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0;
 var $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0;
 var $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0;
 var $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $2 = $0;
 while(1) {
  $7 = HEAP32[20232]|0;
  $8 = HEAP32[20234]|0;
  $9 = ($7>>>0)<($8>>>0);
  if (!($9)) {
   label = 35;
   break;
  }
  $10 = (__Z9WcmdqUsedv()|0);
  $11 = ($10|0)<=(0);
  if ($11) {
   break;
  }
  $5 = 0;
  $26 = HEAP32[20916]|0;
  $27 = (80944 + ($26<<4)|0);
  $3 = $27;
  $28 = $3;
  $29 = ((($28)) + 4|0);
  $30 = HEAP32[$29>>2]|0;
  $4 = $30;
  $31 = $3;
  $32 = HEAP32[$31>>2]|0;
  $33 = $32 & 255;
  do {
   switch ($33|0) {
   case 9:  {
    $34 = $4;
    $35 = $3;
    $36 = ((($35)) + 8|0);
    $37 = HEAP32[$36>>2]|0;
    $38 = $37;
    $39 = $3;
    $40 = ((($39)) + 12|0);
    $41 = HEAP32[$40>>2]|0;
    $42 = $41 >>> 16;
    $43 = $3;
    $44 = ((($43)) + 12|0);
    $45 = HEAP32[$44>>2]|0;
    $46 = $45 & 65535;
    __Z8SetPitchiPhii($34,$38,$42,$46);
    break;
   }
   case 5:  {
    $47 = HEAP32[22142]|0;
    $48 = ($47|0)==(0);
    if ($48) {
     $49 = $4;
     $50 = HEAP32[22141]|0;
     $51 = (($50) - ($49))|0;
     HEAP32[22141] = $51;
    }
    HEAP32[(80892)>>2] = 0;
    HEAP32[(80924)>>2] = 100;
    __Z10KlattReseti(1);
    $52 = $4;
    $53 = HEAP32[22142]|0;
    $54 = (__ZL11PlaySilenceii($52,$53)|0);
    $5 = $54;
    break;
   }
   case 6:  {
    $55 = HEAP32[21798]|0;
    HEAP32[22141] = $55;
    HEAP32[(80892)>>2] = 0;
    __Z10KlattReseti(1);
    $56 = $4;
    $57 = HEAP32[22142]|0;
    $58 = $3;
    $59 = ((($58)) + 8|0);
    $60 = HEAP32[$59>>2]|0;
    $61 = $60;
    $62 = $3;
    $63 = ((($62)) + 12|0);
    $64 = HEAP32[$63>>2]|0;
    $65 = $64 & 255;
    $66 = $3;
    $67 = ((($66)) + 12|0);
    $68 = HEAP32[$67>>2]|0;
    $69 = $68 >>> 8;
    $70 = (__ZL8PlayWaveiiPhii($56,$57,$61,$65,$69)|0);
    $5 = $70;
    break;
   }
   case 7:  {
    $71 = $3;
    $72 = ((($71)) + 12|0);
    $73 = HEAP32[$72>>2]|0;
    $74 = $73 >>> 8;
    HEAP32[(80900)>>2] = $74;
    $75 = $3;
    $76 = ((($75)) + 12|0);
    $77 = HEAP32[$76>>2]|0;
    $78 = $77 & 255;
    HEAP32[(80896)>>2] = $78;
    $79 = $4;
    $80 = $79 & 65535;
    HEAP32[(80892)>>2] = $80;
    $81 = $4;
    $82 = $81 >> 16;
    $83 = $82 & 65535;
    HEAP32[(80908)>>2] = $83;
    $84 = HEAP32[(80896)>>2]|0;
    $85 = ($84|0)==(0);
    if ($85) {
     $86 = HEAP32[(80892)>>2]|0;
     $87 = $86<<1;
     HEAP32[(80892)>>2] = $87;
     $88 = HEAP32[(80908)>>2]|0;
     $89 = $88<<1;
     HEAP32[(80908)>>2] = $89;
    }
    HEAP32[(80904)>>2] = 0;
    HEAP32[(80912)>>2] = 0;
    $90 = $3;
    $91 = ((($90)) + 8|0);
    $92 = HEAP32[$91>>2]|0;
    $93 = $92;
    HEAP32[(80888)>>2] = $93;
    break;
   }
   case 4:  {
    HEAP32[(80892)>>2] = 0;
    label = 21;
    break;
   }
   case 3:  {
    label = 21;
    break;
   }
   case 2:  {
    HEAP32[(80892)>>2] = 0;
    label = 23;
    break;
   }
   case 1:  {
    label = 23;
    break;
   }
   case 10:  {
    $128 = $3;
    $129 = HEAP32[$128>>2]|0;
    $130 = $129 >>> 8;
    $6 = $130;
    $131 = $6;
    $132 = $3;
    $133 = ((($132)) + 4|0);
    $134 = HEAP32[$133>>2]|0;
    $135 = $3;
    $136 = ((($135)) + 8|0);
    $137 = HEAP32[$136>>2]|0;
    $138 = $3;
    $139 = ((($138)) + 12|0);
    $140 = HEAP32[$139>>2]|0;
    $141 = HEAP32[20232]|0;
    __Z11MarkerEventijiiPh($131,$134,$137,$140,$141);
    $142 = $6;
    $143 = ($142|0)==(1);
    if ($143) {
     $144 = $3;
     $145 = ((($144)) + 4|0);
     $146 = HEAP32[$145>>2]|0;
     $147 = $146 & 16777215;
     HEAP32[20918] = $147;
    }
    break;
   }
   case 8:  {
    $148 = $4;
    $149 = $3;
    $150 = ((($149)) + 8|0);
    $151 = HEAP32[$150>>2]|0;
    $152 = $151;
    $153 = $3;
    $154 = ((($153)) + 12|0);
    $155 = HEAP32[$154>>2]|0;
    __ZL12SetAmplitudeiPhi($148,$152,$155);
    break;
   }
   case 11:  {
    $156 = $3;
    $157 = ((($156)) + 8|0);
    $158 = HEAP32[$157>>2]|0;
    $159 = $158;
    __Z15WavegenSetVoiceP7voice_t($159);
    $160 = $3;
    $161 = ((($160)) + 8|0);
    $162 = HEAP32[$161>>2]|0;
    $163 = $162;
    _free($163);
    break;
   }
   case 12:  {
    $164 = $3;
    $165 = ((($164)) + 4|0);
    $166 = HEAP32[$165>>2]|0;
    $167 = $3;
    $168 = ((($167)) + 8|0);
    $169 = HEAP32[$168>>2]|0;
    __Z11SetEmbeddedii($166,$169);
    break;
   }
   case 13:  {
    $170 = $4;
    $171 = HEAP32[22142]|0;
    $172 = HEAP32[1262]|0;
    $173 = HEAP32[20194]|0;
    $174 = ((($173)) + 112|0);
    $175 = HEAP32[$174>>2]|0;
    $176 = Math_imul($172, $175)|0;
    $177 = (($176|0) / 64)&-1;
    $178 = (__Z10MbrolaFilliii($170,$171,$177)|0);
    $5 = $178;
    break;
   }
   case 14:  {
    $179 = $3;
    $180 = ((($179)) + 4|0);
    $181 = HEAP32[$180>>2]|0;
    HEAP32[(80924)>>2] = $181;
    $182 = ($181|0)==(0);
    $$ = $182 ? 100 : $181;
    HEAP32[(80924)>>2] = $$;
    break;
   }
   case 15:  {
    $183 = $3;
    $184 = ((($183)) + 4|0);
    $185 = HEAP32[$184>>2]|0;
    $186 = (+($185>>>0));
    $187 = $186 / 1024.0;
    HEAPF64[1] = $187;
    break;
   }
   default: {
   }
   }
  } while(0);
  if ((label|0) == 21) {
   label = 0;
   $94 = HEAP32[21798]|0;
   HEAP32[22141] = $94;
   $95 = $4;
   $96 = $95 & 65535;
   $97 = $3;
   $98 = ((($97)) + 4|0);
   $99 = HEAP32[$98>>2]|0;
   $100 = $99 >>> 16;
   $101 = HEAP32[22142]|0;
   $102 = $3;
   $103 = ((($102)) + 8|0);
   $104 = HEAP32[$103>>2]|0;
   $105 = $104;
   $106 = $3;
   $107 = ((($106)) + 12|0);
   $108 = HEAP32[$107>>2]|0;
   $109 = $108;
   $110 = (__ZL8Wavegen2iiiP7frame_tS0_($96,$100,$101,$105,$109)|0);
   $5 = $110;
  }
  else if ((label|0) == 23) {
   label = 0;
   $111 = HEAP32[21798]|0;
   HEAP32[22141] = $111;
   $112 = $4;
   $113 = $112 & 65535;
   $114 = $3;
   $115 = ((($114)) + 4|0);
   $116 = HEAP32[$115>>2]|0;
   $117 = $116 >>> 16;
   $118 = HEAP32[22142]|0;
   $119 = $3;
   $120 = ((($119)) + 8|0);
   $121 = HEAP32[$120>>2]|0;
   $122 = $121;
   $123 = $3;
   $124 = ((($123)) + 12|0);
   $125 = HEAP32[$124>>2]|0;
   $126 = $125;
   $127 = (__Z14Wavegen_Klatt2iiiP7frame_tS0_($113,$117,$118,$122,$126)|0);
   $5 = $127;
  }
  $188 = $5;
  $189 = ($188|0)==(0);
  if ($189) {
   __ZL12WcmdqIncHeadv();
   HEAP32[22142] = 0;
   continue;
  } else {
   HEAP32[22142] = 1;
   continue;
  }
 }
 if ((label|0) == 35) {
  $1 = 0;
  $190 = $1;
  STACKTOP = sp;return ($190|0);
 }
 $12 = HEAP32[22141]|0;
 $13 = ($12|0)>(0);
 if ($13) {
  $14 = HEAP32[22141]|0;
  $15 = HEAP32[22142]|0;
  $16 = (__ZL11PlaySilenceii($14,$15)|0);
  HEAP32[22142] = $16;
  $17 = HEAP32[22142]|0;
  $18 = ($17|0)==(1);
  if ($18) {
   $1 = 0;
   $190 = $1;
   STACKTOP = sp;return ($190|0);
  }
 }
 $19 = $2;
 $20 = ($19|0)!=(0);
 L42: do {
  if ($20) {
   while(1) {
    $21 = HEAP32[20232]|0;
    $22 = HEAP32[20234]|0;
    $23 = ($21>>>0)<($22>>>0);
    if (!($23)) {
     break L42;
    }
    $24 = HEAP32[20232]|0;
    $25 = ((($24)) + 1|0);
    HEAP32[20232] = $25;
    HEAP8[$24>>0] = 0;
   }
  }
 } while(0);
 $1 = 1;
 $190 = $1;
 STACKTOP = sp;return ($190|0);
}
function __ZL11PlaySilenceii($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $5 = 0;
 HEAP32[20923] = 0;
 HEAP32[20922] = 0;
 HEAP32[20924] = 2147483647;
 $6 = $3;
 $7 = ($6|0)==(0);
 if ($7) {
  $2 = 0;
  $43 = $2;
  STACKTOP = sp;return ($43|0);
 }
 $8 = $4;
 $9 = ($8|0)==(0);
 if ($9) {
  $10 = $3;
  HEAP32[22145] = $10;
 }
 while(1) {
  $11 = HEAP32[22145]|0;
  $12 = (($11) + -1)|0;
  HEAP32[22145] = $12;
  $13 = ($11|0)>(0);
  if (!($13)) {
   label = 12;
   break;
  }
  $14 = HEAP32[20214]|0;
  $15 = (($14) + 1)|0;
  HEAP32[20214] = $15;
  $16 = (108420 + ($14<<1)|0);
  $17 = HEAP16[$16>>1]|0;
  $18 = $17 << 16 >> 16;
  $19 = HEAP32[20215]|0;
  $20 = Math_imul($18, $19)|0;
  $21 = $20 >> 8;
  $5 = $21;
  $22 = HEAP32[20214]|0;
  $23 = ($22|0)>=(5500);
  if ($23) {
   HEAP32[20214] = 0;
  }
  $24 = $5;
  $25 = $24&255;
  $26 = HEAP32[20232]|0;
  $27 = ((($26)) + 1|0);
  HEAP32[20232] = $27;
  HEAP8[$26>>0] = $25;
  $28 = $5;
  $29 = $28 >> 8;
  $30 = $29&255;
  $31 = HEAP32[20232]|0;
  $32 = ((($31)) + 1|0);
  HEAP32[20232] = $32;
  HEAP8[$31>>0] = $30;
  $33 = $5;
  $34 = $33&65535;
  $35 = HEAP32[20213]|0;
  $36 = (($35) + 1)|0;
  HEAP32[20213] = $36;
  $37 = (108420 + ($35<<1)|0);
  HEAP16[$37>>1] = $34;
  $38 = HEAP32[20213]|0;
  $39 = ($38|0)>=(5500);
  if ($39) {
   HEAP32[20213] = 0;
  }
  $40 = HEAP32[20232]|0;
  $41 = HEAP32[20234]|0;
  $42 = ($40>>>0)>=($41>>>0);
  if ($42) {
   label = 11;
   break;
  }
 }
 if ((label|0) == 11) {
  $2 = 1;
  $43 = $2;
  STACKTOP = sp;return ($43|0);
 }
 else if ((label|0) == 12) {
  $2 = 0;
  $43 = $2;
  STACKTOP = sp;return ($43|0);
 }
 return (0)|0;
}
function __ZL8PlayWaveiiPhii($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0;
 var $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0;
 var $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $6 = $0;
 $7 = $1;
 $8 = $2;
 $9 = $3;
 $10 = $4;
 $13 = $7;
 $14 = ($13|0)==(0);
 if ($14) {
  $15 = $6;
  HEAP32[22143] = $15;
  HEAP32[22144] = 0;
 }
 HEAP32[20923] = 0;
 HEAP32[20922] = 0;
 while(1) {
  $16 = HEAP32[22143]|0;
  $17 = (($16) + -1)|0;
  HEAP32[22143] = $17;
  $18 = ($16|0)>(0);
  if (!($18)) {
   label = 18;
   break;
  }
  $19 = $9;
  $20 = ($19|0)==(0);
  $21 = HEAP32[22144]|0;
  $22 = (($21) + 1)|0;
  if ($20) {
   $23 = $8;
   $24 = (($23) + ($22)|0);
   $25 = HEAP8[$24>>0]|0;
   $12 = $25;
   $26 = HEAP32[22144]|0;
   $27 = $8;
   $28 = (($27) + ($26)|0);
   $29 = HEAP8[$28>>0]|0;
   $30 = $29&255;
   $31 = $12;
   $32 = $31 << 24 >> 24;
   $33 = $32<<8;
   $34 = (($30) + ($33))|0;
   $11 = $34;
   $35 = HEAP32[22144]|0;
   $36 = (($35) + 2)|0;
   HEAP32[22144] = $36;
  } else {
   HEAP32[22144] = $22;
   $37 = $8;
   $38 = (($37) + ($21)|0);
   $39 = HEAP8[$38>>0]|0;
   $40 = $39 << 24 >> 24;
   $41 = $9;
   $42 = Math_imul($40, $41)|0;
   $11 = $42;
  }
  $43 = HEAP32[1281]|0;
  $44 = HEAP32[1262]|0;
  $45 = Math_imul($43, $44)|0;
  $46 = $11;
  $47 = Math_imul($46, $45)|0;
  $11 = $47;
  $48 = $11;
  $49 = $48 >> 10;
  $11 = $49;
  $50 = $11;
  $51 = $10;
  $52 = Math_imul($50, $51)|0;
  $53 = (($52|0) / 32)&-1;
  $11 = $53;
  $54 = HEAP32[20214]|0;
  $55 = (($54) + 1)|0;
  HEAP32[20214] = $55;
  $56 = (108420 + ($54<<1)|0);
  $57 = HEAP16[$56>>1]|0;
  $58 = $57 << 16 >> 16;
  $59 = HEAP32[20215]|0;
  $60 = Math_imul($58, $59)|0;
  $61 = $60 >> 8;
  $62 = $11;
  $63 = (($62) + ($61))|0;
  $11 = $63;
  $64 = $11;
  $65 = ($64|0)>(32767);
  if ($65) {
   $11 = 32768;
  } else {
   $66 = $11;
   $67 = ($66|0)<(-32768);
   if ($67) {
    $11 = -32768;
   }
  }
  $68 = HEAP32[20214]|0;
  $69 = ($68|0)>=(5500);
  if ($69) {
   HEAP32[20214] = 0;
  }
  $70 = $11;
  $71 = $70&255;
  $72 = HEAP32[20232]|0;
  HEAP8[$72>>0] = $71;
  $73 = $11;
  $74 = $73 >> 8;
  $75 = $74&255;
  $76 = HEAP32[20232]|0;
  $77 = ((($76)) + 1|0);
  HEAP8[$77>>0] = $75;
  $78 = HEAP32[20232]|0;
  $79 = ((($78)) + 2|0);
  HEAP32[20232] = $79;
  $80 = $11;
  $81 = ($80*3)|0;
  $82 = (($81|0) / 4)&-1;
  $83 = $82&65535;
  $84 = HEAP32[20213]|0;
  $85 = (($84) + 1)|0;
  HEAP32[20213] = $85;
  $86 = (108420 + ($84<<1)|0);
  HEAP16[$86>>1] = $83;
  $87 = HEAP32[20213]|0;
  $88 = ($87|0)>=(5500);
  if ($88) {
   HEAP32[20213] = 0;
  }
  $89 = HEAP32[20232]|0;
  $90 = HEAP32[20234]|0;
  $91 = ($89>>>0)>=($90>>>0);
  if ($91) {
   label = 17;
   break;
  }
 }
 if ((label|0) == 17) {
  $5 = 1;
  $92 = $5;
  STACKTOP = sp;return ($92|0);
 }
 else if ((label|0) == 18) {
  $5 = 0;
  $92 = $5;
  STACKTOP = sp;return ($92|0);
 }
 return (0)|0;
}
function __ZL8Wavegen2iiiP7frame_tS0_($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $9 = $4;
 $10 = $7;
 $11 = ($10|0)==(0);
 if ($11) {
  $12 = $5;
  $13 = $6;
  $14 = $8;
  $15 = $9;
  $16 = HEAP32[20194]|0;
  __Z8SetSynthiiP7frame_tS0_P7voice_t($12,$13,$14,$15,$16);
 }
 $17 = (__Z7Wavegenv()|0);
 STACKTOP = sp;return ($17|0);
}
function __ZL12SetAmplitudeiPhi($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 HEAP32[21792] = 0;
 $6 = $3;
 $7 = ($6|0)==(0);
 if ($7) {
  HEAP32[21795] = 0;
 } else {
  $8 = $3;
  $9 = (2097152 / ($8|0))&-1;
  HEAP32[21795] = $9;
 }
 $10 = $5;
 $11 = HEAP32[1262]|0;
 $12 = Math_imul($10, $11)|0;
 $13 = (($12|0) / 16)&-1;
 HEAP32[(80916)>>2] = $13;
 $14 = HEAP32[(80916)>>2]|0;
 $15 = HEAP32[20194]|0;
 $16 = ((($15)) + 124|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = Math_imul($14, $17)|0;
 $19 = ($18*15)|0;
 $20 = (($19|0) / 100)&-1;
 HEAP32[(80920)>>2] = $20;
 $21 = $4;
 HEAP32[21791] = $21;
 STACKTOP = sp;return;
}
function __ZL12WcmdqIncHeadv() {
 var $$ = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[20916]|0;
 $1 = (($0) + 1)|0;
 HEAP32[20916] = $1;
 $2 = HEAP32[20916]|0;
 $3 = ($2|0)>=(170);
 $$ = $3 ? 0 : $1;
 HEAP32[20916] = $$;
 return;
}
function __Z11WavegenFilli($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0.0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $1 = $0;
 $6 = HEAP32[20232]|0;
 $3 = $6;
 $7 = (__Z12WavegenFill2i(0)|0);
 $2 = $7;
 $8 = +HEAPF64[1];
 $9 = $8 > 1.0;
 if (!($9)) {
  $33 = $2;
  STACKTOP = sp;return ($33|0);
 }
 $10 = HEAP32[20234]|0;
 $11 = $3;
 $12 = $10;
 $13 = $11;
 $14 = (($12) - ($13))|0;
 $5 = $14;
 $15 = $3;
 $16 = HEAP32[20232]|0;
 $17 = $3;
 $18 = $16;
 $19 = $17;
 $20 = (($18) - ($19))|0;
 $21 = (($20|0) / 2)&-1;
 $22 = $5;
 $23 = (($22|0) / 2)&-1;
 $24 = $2;
 $25 = (__ZL7SpeedUpPsiii($15,$21,$23,$24)|0);
 $26 = $25<<1;
 $4 = $26;
 $27 = $3;
 $28 = $4;
 $29 = (($27) + ($28)|0);
 HEAP32[20232] = $29;
 $30 = $4;
 $31 = $5;
 $32 = ($30|0)>=($31|0);
 if (!($32)) {
  $33 = $2;
  STACKTOP = sp;return ($33|0);
 }
 $2 = 0;
 $33 = $2;
 STACKTOP = sp;return ($33|0);
}
function __ZL7SpeedUpPsiii($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0, $19 = 0, $20 = 0.0, $21 = 0.0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $9 = $6;
 $10 = ($9|0)>(0);
 if ($10) {
  $11 = HEAP32[20919]|0;
  $12 = ($11|0)==(0|0);
  if ($12) {
   $13 = (_sonicCreateStream(22050,1)|0);
   HEAP32[20919] = $13;
  }
  $14 = HEAP32[20919]|0;
  $15 = (+_sonicGetSpeed($14));
  $16 = $15;
  $17 = +HEAPF64[1];
  $18 = $16 != $17;
  if ($18) {
   $19 = HEAP32[20919]|0;
   $20 = +HEAPF64[1];
   $21 = $20;
   _sonicSetSpeed($19,$21);
  }
  $22 = HEAP32[20919]|0;
  $23 = $5;
  $24 = $6;
  (_sonicWriteShortToStream($22,$23,$24)|0);
 }
 $25 = HEAP32[20919]|0;
 $26 = ($25|0)==(0|0);
 if ($26) {
  $4 = 0;
  $34 = $4;
  STACKTOP = sp;return ($34|0);
 }
 $27 = $8;
 $28 = ($27|0)!=(0);
 if ($28) {
  $29 = HEAP32[20919]|0;
  (_sonicFlushStream($29)|0);
 }
 $30 = HEAP32[20919]|0;
 $31 = $5;
 $32 = $7;
 $33 = (_sonicReadShortFromStream($30,$31,$32)|0);
 $4 = $33;
 $34 = $4;
 STACKTOP = sp;return ($34|0);
}
function __Z15MakePhonemeListP10Translatorii($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$ = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0;
 var $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0;
 var $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0;
 var $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0;
 var $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0;
 var $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0;
 var $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0;
 var $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0;
 var $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0;
 var $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0;
 var $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0;
 var $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0;
 var $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0;
 var $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0;
 var $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0;
 var $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0;
 var $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0;
 var $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0;
 var $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0;
 var $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0;
 var $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0;
 var $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0;
 var $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0;
 var $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0;
 var $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0;
 var $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0;
 var $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0;
 var $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0;
 var $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0;
 var $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0;
 var $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0;
 var $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0;
 var $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0;
 var $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0;
 var $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0;
 var $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0;
 var $749 = 0, $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0, $765 = 0, $766 = 0;
 var $767 = 0, $768 = 0, $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0, $783 = 0, $784 = 0;
 var $785 = 0, $786 = 0, $787 = 0, $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0, $799 = 0, $8 = 0, $80 = 0, $800 = 0, $801 = 0;
 var $802 = 0, $803 = 0, $804 = 0, $805 = 0, $806 = 0, $807 = 0, $808 = 0, $809 = 0, $81 = 0, $810 = 0, $811 = 0, $812 = 0, $813 = 0, $814 = 0, $815 = 0, $816 = 0, $817 = 0, $818 = 0, $819 = 0, $82 = 0;
 var $820 = 0, $821 = 0, $822 = 0, $823 = 0, $824 = 0, $825 = 0, $826 = 0, $827 = 0, $828 = 0, $829 = 0, $83 = 0, $830 = 0, $831 = 0, $832 = 0, $833 = 0, $834 = 0, $835 = 0, $836 = 0, $837 = 0, $838 = 0;
 var $839 = 0, $84 = 0, $840 = 0, $841 = 0, $842 = 0, $843 = 0, $844 = 0, $845 = 0, $846 = 0, $847 = 0, $848 = 0, $849 = 0, $85 = 0, $850 = 0, $851 = 0, $852 = 0, $853 = 0, $854 = 0, $855 = 0, $856 = 0;
 var $857 = 0, $858 = 0, $859 = 0, $86 = 0, $860 = 0, $861 = 0, $862 = 0, $863 = 0, $864 = 0, $865 = 0, $866 = 0, $867 = 0, $868 = 0, $869 = 0, $87 = 0, $870 = 0, $871 = 0, $872 = 0, $873 = 0, $874 = 0;
 var $875 = 0, $876 = 0, $877 = 0, $878 = 0, $879 = 0, $88 = 0, $880 = 0, $881 = 0, $882 = 0, $883 = 0, $884 = 0, $885 = 0, $886 = 0, $887 = 0, $888 = 0, $889 = 0, $89 = 0, $890 = 0, $891 = 0, $892 = 0;
 var $893 = 0, $894 = 0, $895 = 0, $896 = 0, $897 = 0, $898 = 0, $899 = 0, $9 = 0, $90 = 0, $900 = 0, $901 = 0, $902 = 0, $903 = 0, $904 = 0, $905 = 0, $906 = 0, $907 = 0, $908 = 0, $909 = 0, $91 = 0;
 var $910 = 0, $911 = 0, $912 = 0, $913 = 0, $914 = 0, $915 = 0, $916 = 0, $917 = 0, $918 = 0, $919 = 0, $92 = 0, $920 = 0, $921 = 0, $922 = 0, $923 = 0, $924 = 0, $925 = 0, $926 = 0, $927 = 0, $928 = 0;
 var $929 = 0, $93 = 0, $930 = 0, $931 = 0, $932 = 0, $933 = 0, $934 = 0, $935 = 0, $936 = 0, $937 = 0, $938 = 0, $939 = 0, $94 = 0, $940 = 0, $941 = 0, $942 = 0, $943 = 0, $944 = 0, $945 = 0, $946 = 0;
 var $947 = 0, $948 = 0, $949 = 0, $95 = 0, $950 = 0, $951 = 0, $952 = 0, $953 = 0, $954 = 0, $955 = 0, $956 = 0, $957 = 0, $958 = 0, $959 = 0, $96 = 0, $960 = 0, $961 = 0, $962 = 0, $963 = 0, $964 = 0;
 var $965 = 0, $966 = 0, $967 = 0, $968 = 0, $969 = 0, $97 = 0, $970 = 0, $971 = 0, $972 = 0, $973 = 0, $974 = 0, $975 = 0, $976 = 0, $977 = 0, $978 = 0, $979 = 0, $98 = 0, $980 = 0, $981 = 0, $982 = 0;
 var $983 = 0, $984 = 0, $985 = 0, $986 = 0, $987 = 0, $99 = 0, $or$cond = 0, $or$cond11 = 0, $or$cond13 = 0, $or$cond15 = 0, $or$cond17 = 0, $or$cond19 = 0, $or$cond3 = 0, $or$cond5 = 0, $or$cond7 = 0, $or$cond9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 24352|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(24352|0);
 $29 = sp + 24088|0;
 $33 = sp + 72|0;
 $35 = sp + 40|0;
 $7 = $0;
 $8 = $1;
 $9 = $2;
 $10 = 0;
 $12 = 0;
 $17 = 0;
 $18 = 0;
 $32 = 0;
 ;HEAP32[$35>>2]=0|0;HEAP32[$35+4>>2]=0|0;HEAP32[$35+8>>2]=0|0;HEAP32[$35+12>>2]=0|0;HEAP32[$35+16>>2]=0|0;HEAP32[$35+20>>2]=0|0;
 $34 = 100420;
 $13 = 51088;
 $45 = HEAP32[19177]|0;
 $46 = (($45) - 1)|0;
 $47 = $34;
 $48 = (($47) + ($46<<3)|0);
 $49 = ((($48)) + 4|0);
 $50 = HEAP16[$49>>1]|0;
 $51 = $50&65535;
 $23 = $51;
 $20 = 0;
 $52 = HEAP32[19177]|0;
 $53 = (($52) - 3)|0;
 $11 = $53;
 while(1) {
  $54 = $11;
  $55 = ($54|0)>=(0);
  if (!($55)) {
   break;
  }
  $56 = $11;
  $57 = $34;
  $58 = (($57) + ($56<<3)|0);
  $59 = ((($58)) + 3|0);
  $60 = HEAP8[$59>>0]|0;
  $61 = $60&255;
  $62 = $61 & 127;
  $63 = $20;
  $64 = ($62|0)>($63|0);
  if ($64) {
   $65 = $11;
   $66 = $34;
   $67 = (($66) + ($65<<3)|0);
   $68 = ((($67)) + 3|0);
   $69 = HEAP8[$68>>0]|0;
   $70 = $69&255;
   $71 = $70 & 127;
   $20 = $71;
  }
  $72 = $11;
  $73 = $34;
  $74 = (($73) + ($72<<3)|0);
  $75 = ((($74)) + 4|0);
  $76 = HEAP16[$75>>1]|0;
  $77 = $76&65535;
  $78 = ($77|0)!=(0);
  if ($78) {
   break;
  }
  $79 = $11;
  $80 = (($79) + -1)|0;
  $11 = $80;
 }
 $81 = $20;
 $82 = ($81|0)<(4);
 L9: do {
  if ($82) {
   while(1) {
    $83 = $11;
    $84 = (($83) + -1)|0;
    $11 = $84;
    $85 = ($84|0)>=(0);
    if (!($85)) {
     break L9;
    }
    $86 = $11;
    $87 = $34;
    $88 = (($87) + ($86<<3)|0);
    $89 = HEAP16[$88>>1]|0;
    $90 = $89&65535;
    $91 = $90 & 64;
    $92 = ($91|0)!=(0);
    $93 = $11;
    $94 = $34;
    $95 = (($94) + ($93<<3)|0);
    $96 = ((($95)) + 3|0);
    if ($92) {
     break;
    }
    $97 = HEAP8[$96>>0]|0;
    $98 = $97&255;
    $99 = ($98|0)>=(4);
    if ($99) {
     break L9;
    }
   }
   HEAP8[$96>>0] = 4;
  }
 } while(0);
 $25 = 0;
 $100 = $7;
 $101 = ((($100)) + 404|0);
 $102 = HEAP32[$101>>2]|0;
 $19 = $102;
 $11 = 0;
 while(1) {
  $103 = $11;
  $104 = HEAP32[19177]|0;
  $105 = ($103|0)<($104|0);
  if (!($105)) {
   break;
  }
  $106 = $19;
  $107 = $7;
  $108 = ((($107)) + 404|0);
  $109 = HEAP32[$108>>2]|0;
  $110 = ($106|0)!=($109|0);
  if ($110) {
   $111 = $11;
   $112 = $34;
   $113 = (($112) + ($111<<3)|0);
   $114 = HEAP16[$113>>1]|0;
   $115 = $114&65535;
   $116 = $115 | 32;
   $117 = $116&65535;
   HEAP16[$113>>1] = $117;
  }
  $118 = $25;
  $119 = ($118|0)>(0);
  if ($119) {
   $120 = $11;
   $121 = $25;
   $122 = (($120) - ($121))|0;
   $123 = $34;
   $124 = (($123) + ($122<<3)|0);
   $125 = $11;
   $126 = $34;
   $127 = (($126) + ($125<<3)|0);
   ;HEAP16[$124>>1]=HEAP16[$127>>1]|0;HEAP16[$124+2>>1]=HEAP16[$127+2>>1]|0;HEAP16[$124+4>>1]=HEAP16[$127+4>>1]|0;HEAP16[$124+6>>1]=HEAP16[$127+6>>1]|0;
  }
  $128 = $11;
  $129 = $34;
  $130 = (($129) + ($128<<3)|0);
  $131 = ((($130)) + 2|0);
  $132 = HEAP8[$131>>0]|0;
  $133 = $132&255;
  $134 = ($133|0)==(21);
  L25: do {
   if ($134) {
    $135 = $11;
    $136 = $34;
    $137 = (($136) + ($135<<3)|0);
    $138 = HEAP16[$137>>1]|0;
    $139 = $138&65535;
    $140 = $139 & 2;
    $141 = ($140|0)!=(0);
    do {
     if (!($141)) {
      $142 = $11;
      $143 = $34;
      $144 = (($143) + ($142<<3)|0);
      $145 = ((($144)) + 7|0);
      $146 = HEAP8[$145>>0]|0;
      $147 = $146&255;
      $148 = $19;
      $149 = ($147|0)==($148|0);
      if (!($149)) {
       $150 = $11;
       $151 = (($150) + 1)|0;
       $152 = $34;
       $153 = (($152) + ($151<<3)|0);
       $154 = ((($153)) + 2|0);
       $155 = HEAP8[$154>>0]|0;
       $156 = $155&255;
       $157 = ($156|0)==(21);
       if (!($157)) {
        $158 = $11;
        $159 = (($158) + 1)|0;
        $160 = $34;
        $161 = (($160) + ($159<<3)|0);
        $162 = ((($161)) + 2|0);
        $163 = HEAP8[$162>>0]|0;
        $164 = $163&255;
        $165 = ($164|0)==(9);
        if (!($165)) {
         break;
        }
        $166 = $11;
        $167 = (($166) + 2)|0;
        $168 = $34;
        $169 = (($168) + ($167<<3)|0);
        $170 = ((($169)) + 2|0);
        $171 = HEAP8[$170>>0]|0;
        $172 = $171&255;
        $173 = ($172|0)==(21);
        if (!($173)) {
         break;
        }
       }
      }
      $174 = $25;
      $175 = (($174) + 1)|0;
      $25 = $175;
      break L25;
     }
    } while(0);
    $176 = $11;
    $177 = $34;
    $178 = (($177) + ($176<<3)|0);
    $179 = ((($178)) + 7|0);
    $180 = HEAP8[$179>>0]|0;
    $181 = $180&255;
    $19 = $181;
   }
  } while(0);
  $182 = $11;
  $183 = (($182) + 1)|0;
  $11 = $183;
 }
 $184 = $25;
 $185 = HEAP32[19177]|0;
 $186 = (($185) - ($184))|0;
 HEAP32[19177] = $186;
 $187 = $7;
 $188 = ((($187)) + 24|0);
 $189 = ((($188)) + 16|0);
 $190 = HEAP32[$189>>2]|0;
 $22 = $190;
 $191 = ($190|0)!=(0);
 L37: do {
  if ($191) {
   $37 = 0;
   $21 = 0;
   $192 = HEAP32[19177]|0;
   $193 = (($192) - 1)|0;
   $11 = $193;
   while(1) {
    $194 = $11;
    $195 = ($194|0)>=(0);
    if (!($195)) {
     break L37;
    }
    $196 = $11;
    $197 = $34;
    $198 = (($197) + ($196<<3)|0);
    $199 = ((($198)) + 2|0);
    $200 = HEAP8[$199>>0]|0;
    $201 = $200&255;
    $202 = (45008 + ($201<<2)|0);
    $203 = HEAP32[$202>>2]|0;
    $14 = $203;
    $204 = $14;
    $205 = ($204|0)==(0|0);
    do {
     if (!($205)) {
      $206 = $11;
      $207 = $34;
      $208 = (($207) + ($206<<3)|0);
      $209 = HEAP16[$208>>1]|0;
      $210 = $209&65535;
      $211 = $210 & 32;
      $212 = ($211|0)!=(0);
      if ($212) {
       $37 = 0;
       $21 = 0;
       $213 = $22;
       $214 = $213 & 256;
       $215 = ($214|0)!=(0);
       $$ = $215 ? 1 : 0;
       $21 = $$;
       break;
      }
      $216 = $14;
      $217 = ((($216)) + 11|0);
      $218 = HEAP8[$217>>0]|0;
      $219 = $218&255;
      $36 = $219;
      $220 = $22;
      $221 = $220 & 2;
      $222 = ($221|0)!=(0);
      do {
       if ($222) {
        $223 = $14;
        $224 = HEAP32[$223>>2]|0;
        $225 = $224 & 255;
        $226 = ($225|0)==(118);
        if (!($226)) {
         $227 = $14;
         $228 = HEAP32[$227>>2]|0;
         $229 = $228 & 255;
         $230 = ($229|0)==(82);
         if (!($230)) {
          break;
         }
        }
        $37 = 1;
        $231 = $22;
        $232 = $231 & 16;
        $233 = ($232|0)!=(0);
        if ($233) {
         $21 = 0;
        }
       }
      } while(0);
      $234 = $36;
      $235 = ($234|0)==(4);
      $236 = $36;
      $237 = ($236|0)==(6);
      $or$cond = $235 | $237;
      do {
       if ($or$cond) {
        $238 = $21;
        $239 = ($238|0)==(0);
        if ($239) {
         $240 = $22;
         $241 = $240 & 15;
         $242 = ($241|0)!=(0);
         if ($242) {
          $21 = 1;
          break;
         }
        }
        $243 = $21;
        $244 = ($243|0)==(2);
        if ($244) {
         $245 = $14;
         $246 = ((($245)) + 13|0);
         $247 = HEAP8[$246>>0]|0;
         $248 = $247&255;
         $249 = ($248|0)!=(0);
         if ($249) {
          $250 = $14;
          $251 = ((($250)) + 13|0);
          $252 = HEAP8[$251>>0]|0;
          $253 = $11;
          $254 = $34;
          $255 = (($254) + ($253<<3)|0);
          $256 = ((($255)) + 2|0);
          HEAP8[$256>>0] = $252;
         }
        }
       } else {
        $257 = $36;
        $258 = ($257|0)==(5);
        $259 = $36;
        $260 = ($259|0)==(7);
        $or$cond3 = $258 | $260;
        if (!($or$cond3)) {
         $280 = $22;
         $281 = $280 & 8;
         $282 = ($281|0)!=(0);
         if (!($282)) {
          $21 = 0;
          break;
         }
         $283 = $36;
         $284 = ($283|0)==(0);
         $285 = $36;
         $286 = ($285|0)==(2);
         $or$cond5 = $284 | $286;
         if (!($or$cond5)) {
          break;
         }
         $21 = 0;
         break;
        }
        $261 = $21;
        $262 = ($261|0)==(0);
        if ($262) {
         $263 = $22;
         $264 = $263 & 15;
         $265 = ($264|0)!=(0);
         if ($265) {
          $21 = 2;
          break;
         }
        }
        $266 = $21;
        $267 = ($266|0)==(1);
        if ($267) {
         $268 = $14;
         $269 = ((($268)) + 13|0);
         $270 = HEAP8[$269>>0]|0;
         $271 = $270&255;
         $272 = ($271|0)!=(0);
         if ($272) {
          $273 = $14;
          $274 = ((($273)) + 13|0);
          $275 = HEAP8[$274>>0]|0;
          $276 = $11;
          $277 = $34;
          $278 = (($277) + ($276<<3)|0);
          $279 = ((($278)) + 2|0);
          HEAP8[$279>>0] = $275;
         }
        }
       }
      } while(0);
      $287 = $37;
      $288 = ($287|0)!=(0);
      if ($288) {
       $21 = 0;
       $37 = 0;
      }
      $289 = $11;
      $290 = $34;
      $291 = (($290) + ($289<<3)|0);
      $292 = ((($291)) + 4|0);
      $293 = HEAP16[$292>>1]|0;
      $294 = ($293<<16>>16)!=(0);
      if ($294) {
       $295 = $22;
       $296 = $295 & 4;
       $297 = ($296|0)!=(0);
       if ($297) {
        $21 = 0;
       }
       $298 = $22;
       $299 = $298 & 256;
       $300 = ($299|0)!=(0);
       $301 = $21;
       $302 = ($301|0)==(0);
       $or$cond17 = $300 & $302;
       if ($or$cond17) {
        $21 = 1;
       }
      }
     }
    } while(0);
    $303 = $11;
    $304 = (($303) + -1)|0;
    $11 = $304;
   }
  }
 } while(0);
 $305 = $7;
 $306 = (__ZL18SubstitutePhonemesP10TranslatorP12PHONEME_LIST($305,$33)|0);
 $307 = (($306) - 2)|0;
 $30 = $307;
 $11 = 0;
 while(1) {
  $308 = $11;
  $309 = $30;
  $310 = ($308|0)<($309|0);
  $311 = $10;
  $312 = ($311|0)<(997);
  $313 = $310 ? $312 : 0;
  if (!($313)) {
   break;
  }
  $314 = $11;
  $315 = (($33) + (($314*24)|0)|0);
  $316 = ((($315)) + 4|0);
  $317 = HEAP16[$316>>1]|0;
  $318 = ($317<<16>>16)!=(0);
  if (!($318)) {
   $354 = $11;
   $355 = (($354) + 1)|0;
   $11 = $355;
   continue;
  }
  $18 = 0;
  $319 = $11;
  $39 = $319;
  while(1) {
   $320 = $39;
   $321 = $30;
   $322 = ($320|0)<($321|0);
   if (!($322)) {
    break;
   }
   $323 = $39;
   $324 = (($33) + (($323*24)|0)|0);
   $325 = ((($324)) + 3|0);
   $326 = HEAP8[$325>>0]|0;
   $327 = $326&255;
   $328 = $18;
   $329 = ($327|0)>($328|0);
   if ($329) {
    $330 = $39;
    $331 = (($33) + (($330*24)|0)|0);
    $332 = ((($331)) + 3|0);
    $333 = HEAP8[$332>>0]|0;
    $334 = $333&255;
    $18 = $334;
   }
   $335 = $39;
   $336 = (($335) + 1)|0;
   $39 = $336;
   $337 = $39;
   $338 = (($33) + (($337*24)|0)|0);
   $339 = ((($338)) + 4|0);
   $340 = HEAP16[$339>>1]|0;
   $341 = ($340<<16>>16)!=(0);
   if ($341) {
    break;
   }
  }
  $342 = $11;
  $38 = $342;
  while(1) {
   $343 = $38;
   $344 = $39;
   $345 = ($343|0)<($344|0);
   if (!($345)) {
    break;
   }
   $346 = $18;
   $347 = $346&255;
   $348 = $38;
   $349 = (($33) + (($348*24)|0)|0);
   $350 = ((($349)) + 6|0);
   HEAP8[$350>>0] = $347;
   $351 = $38;
   $352 = (($351) + 1)|0;
   $38 = $352;
  }
  $353 = $39;
  $11 = $353;
 }
 $356 = HEAP32[(45044)>>2]|0;
 $14 = $356;
 $357 = $14;
 $358 = ((($33)) + 8|0);
 HEAP32[$358>>2] = $357;
 $26 = 1;
 $11 = 0;
 while(1) {
  $359 = $12;
  $360 = ($359|0)!=(0);
  if (!($360)) {
   $361 = $11;
   $362 = $30;
   $363 = ($361|0)<($362|0);
   $364 = $10;
   $365 = ($364|0)<(997);
   $366 = $363 ? $365 : 0;
   if (!($366)) {
    break;
   }
  }
  $367 = $11;
  $368 = (($33) + (($367*24)|0)|0);
  $31 = $368;
  $27 = 0;
  $28 = 0;
  $369 = $12;
  $370 = ($369|0)!=(0);
  $371 = $31;
  if ($370) {
   $372 = ((($371)) + 2|0);
   $373 = HEAP8[$372>>0]|0;
   $374 = $373&255;
   $375 = (45008 + ($374<<2)|0);
   $376 = HEAP32[$375>>2]|0;
   $15 = $376;
   $377 = $11;
   $378 = (($377) + -1)|0;
   $11 = $378;
   $379 = $11;
   $380 = (($33) + (($379*24)|0)|0);
   $32 = $380;
   $31 = $380;
   $381 = $11;
   $382 = ($381|0)>(0);
   L112: do {
    if ($382) {
     $383 = $26;
     $384 = ($383|0)>(0);
     if ($384) {
      $385 = $26;
      $40 = $385;
      $386 = $26;
      $387 = (($386) + -1)|0;
      $26 = $387;
     } else {
      $40 = 2;
     }
     while(1) {
      $388 = $40;
      $389 = $11;
      $390 = ($388|0)<=($389|0);
      if (!($390)) {
       break L112;
      }
      $391 = $40;
      $392 = (($391) - 1)|0;
      $393 = (($33) + (($392*24)|0)|0);
      $394 = $40;
      $395 = (($33) + (($394*24)|0)|0);
      ;HEAP32[$393>>2]=HEAP32[$395>>2]|0;HEAP32[$393+4>>2]=HEAP32[$395+4>>2]|0;HEAP32[$393+8>>2]=HEAP32[$395+8>>2]|0;HEAP32[$393+12>>2]=HEAP32[$395+12>>2]|0;HEAP32[$393+16>>2]=HEAP32[$395+16>>2]|0;HEAP32[$393+20>>2]=HEAP32[$395+20>>2]|0;
      $396 = $40;
      $397 = (($396) + 1)|0;
      $40 = $397;
     }
    }
   } while(0);
   $398 = $31;
   ;HEAP32[$398>>2]=0|0;HEAP32[$398+4>>2]=0|0;HEAP32[$398+8>>2]=0|0;HEAP32[$398+12>>2]=0|0;HEAP32[$398+16>>2]=0|0;HEAP32[$398+20>>2]=0|0;
   $399 = $12;
   $400 = $399&255;
   $401 = $31;
   $402 = ((($401)) + 2|0);
   HEAP8[$402>>0] = $400;
   $403 = $12;
   $404 = (45008 + ($403<<2)|0);
   $405 = HEAP32[$404>>2]|0;
   $14 = $405;
   $406 = $14;
   $407 = $31;
   $408 = ((($407)) + 8|0);
   HEAP32[$408>>2] = $406;
   $12 = 0;
   $27 = 1;
  } else {
   $409 = ((($371)) + 4|0);
   $410 = HEAP16[$409>>1]|0;
   $411 = $410&65535;
   $412 = ($411|0)!=(0);
   if ($412) {
    $413 = $11;
    $26 = $413;
   }
   $414 = $31;
   $415 = ((($414)) + 2|0);
   $416 = HEAP8[$415>>0]|0;
   $417 = $416&255;
   $418 = (45008 + ($417<<2)|0);
   $419 = HEAP32[$418>>2]|0;
   $14 = $419;
   $420 = $14;
   $421 = $31;
   $422 = ((($421)) + 8|0);
   HEAP32[$422>>2] = $420;
   $423 = $31;
   $424 = ((($423)) + 2|0);
   $425 = HEAP8[$424>>0]|0;
   $426 = $425&255;
   $427 = ($426|0)==(21);
   if ($427) {
    $428 = $31;
    $429 = ((($428)) + 7|0);
    $430 = HEAP8[$429>>0]|0;
    $431 = $430&255;
    __Z18SelectPhonemeTablei($431);
   }
   $432 = $31;
   $433 = ((($432)) + 24|0);
   $434 = ((($433)) + 2|0);
   $435 = HEAP8[$434>>0]|0;
   $436 = $435&255;
   $437 = (45008 + ($436<<2)|0);
   $438 = HEAP32[$437>>2]|0;
   $15 = $438;
   $439 = $15;
   $440 = $31;
   $441 = ((($440)) + 24|0);
   $442 = ((($441)) + 8|0);
   HEAP32[$442>>2] = $439;
  }
  $443 = $14;
  $444 = ($443|0)==(0|0);
  if (!($444)) {
   $445 = $7;
   $446 = $31;
   __Z16InterpretPhonemeP10TranslatoriP12PHONEME_LISTP12PHONEME_DATAP12WORD_PH_DATA($445,256,$446,$29,$35);
   $447 = ((($29)) + 4|0);
   $448 = ((($447)) + 8|0);
   $449 = HEAP32[$448>>2]|0;
   $24 = $449;
   $450 = ($449|0)>(0);
   if ($450) {
    $451 = $24;
    $452 = (45008 + ($451<<2)|0);
    $453 = HEAP32[$452>>2]|0;
    $454 = $11;
    $455 = (($454) + 1)|0;
    $456 = (($33) + (($455*24)|0)|0);
    $457 = ((($456)) + 8|0);
    HEAP32[$457>>2] = $453;
    $458 = $24;
    $459 = $458&255;
    $460 = $11;
    $461 = (($460) + 1)|0;
    $462 = (($33) + (($461*24)|0)|0);
    $463 = ((($462)) + 2|0);
    HEAP8[$463>>0] = $459;
    $464 = $24;
    $465 = (45008 + ($464<<2)|0);
    $466 = HEAP32[$465>>2]|0;
    $467 = ((($466)) + 11|0);
    $468 = HEAP8[$467>>0]|0;
    $469 = $11;
    $470 = (($469) + 1)|0;
    $471 = (($33) + (($470*24)|0)|0);
    $472 = ((($471)) + 17|0);
    HEAP8[$472>>0] = $468;
    $473 = $24;
    $474 = (45008 + ($473<<2)|0);
    $475 = HEAP32[$474>>2]|0;
    $15 = $475;
   }
   $476 = ((($29)) + 4|0);
   $477 = ((($476)) + 12|0);
   $478 = HEAP32[$477>>2]|0;
   $24 = $478;
   $479 = ($478|0)>(0);
   $480 = $27;
   $481 = ($480|0)==(0);
   $or$cond7 = $479 & $481;
   if ($or$cond7) {
    $482 = $14;
    $41 = $482;
    $483 = $31;
    $484 = ((($483)) + 2|0);
    $485 = HEAP8[$484>>0]|0;
    $486 = $485&255;
    $12 = $486;
    $487 = $24;
    $488 = (45008 + ($487<<2)|0);
    $489 = HEAP32[$488>>2]|0;
    $14 = $489;
    $490 = $14;
    $491 = $31;
    $492 = ((($491)) + 8|0);
    HEAP32[$492>>2] = $490;
    $493 = $24;
    $494 = $493&255;
    $495 = $31;
    $496 = ((($495)) + 2|0);
    HEAP8[$496>>0] = $494;
    $497 = $14;
    $498 = ((($497)) + 11|0);
    $499 = HEAP8[$498>>0]|0;
    $500 = $499&255;
    $501 = ($500|0)==(2);
    $502 = $31;
    $503 = HEAP16[$502>>1]|0;
    $504 = $503&65535;
    if ($501) {
     $505 = $504 | 4;
     $506 = $505&65535;
     HEAP16[$502>>1] = $506;
     $507 = $41;
     $508 = ((($507)) + 11|0);
     $509 = HEAP8[$508>>0]|0;
     $510 = $509&255;
     $511 = ($510|0)!=(2);
     if ($511) {
      $512 = $31;
      $513 = ((($512)) + 3|0);
      HEAP8[$513>>0] = 0;
     }
    } else {
     $514 = $504 & -5;
     $515 = $514&65535;
     HEAP16[$502>>1] = $515;
    }
    $516 = $7;
    $517 = $31;
    __Z16InterpretPhonemeP10TranslatoriP12PHONEME_LISTP12PHONEME_DATAP12WORD_PH_DATA($516,256,$517,$29,$35);
   }
   $518 = ((($29)) + 4|0);
   $519 = ((($518)) + 4|0);
   $520 = HEAP32[$519>>2]|0;
   $24 = $520;
   $521 = ($520|0)>(0);
   do {
    if ($521) {
     $522 = $14;
     $42 = $522;
     $523 = $24;
     $524 = (45008 + ($523<<2)|0);
     $525 = HEAP32[$524>>2]|0;
     $14 = $525;
     $526 = $14;
     $527 = $31;
     $528 = ((($527)) + 8|0);
     HEAP32[$528>>2] = $526;
     $529 = $24;
     $530 = $529&255;
     $531 = $31;
     $532 = ((($531)) + 2|0);
     HEAP8[$532>>0] = $530;
     $533 = $24;
     $534 = ($533|0)==(1);
     if ($534) {
      $28 = 1;
      break;
     }
     $535 = $14;
     $536 = ((($535)) + 11|0);
     $537 = HEAP8[$536>>0]|0;
     $538 = $537&255;
     $539 = ($538|0)==(2);
     $540 = $31;
     $541 = HEAP16[$540>>1]|0;
     $542 = $541&65535;
     if ($539) {
      $543 = $542 | 4;
      $544 = $543&65535;
      HEAP16[$540>>1] = $544;
      $545 = $42;
      $546 = ((($545)) + 11|0);
      $547 = HEAP8[$546>>0]|0;
      $548 = $547&255;
      $549 = ($548|0)!=(2);
      if ($549) {
       $550 = $31;
       $551 = ((($550)) + 3|0);
       HEAP8[$551>>0] = 0;
      }
     } else {
      $552 = $542 & -5;
      $553 = $552&65535;
      HEAP16[$540>>1] = $553;
     }
     $554 = $7;
     $555 = $31;
     __Z16InterpretPhonemeP10TranslatoriP12PHONEME_LISTP12PHONEME_DATAP12WORD_PH_DATA($554,256,$555,$29,$35);
    }
   } while(0);
   $556 = $14;
   $557 = ((($556)) + 11|0);
   $558 = HEAP8[$557>>0]|0;
   $559 = $558&255;
   $560 = ($559|0)==(2);
   $561 = $28;
   $562 = ($561|0)==(0);
   $or$cond9 = $560 & $562;
   L153: do {
    if ($or$cond9) {
     $563 = $31;
     $564 = ((($563)) + 3|0);
     $565 = HEAP8[$564>>0]|0;
     $566 = $565&255;
     $567 = ($566|0)<=(1);
     if (!($567)) {
      $17 = 0;
      break;
     }
     $568 = $17;
     $569 = (($568) + 1)|0;
     $17 = $569;
     $570 = $7;
     $571 = ((($570)) + 12|0);
     $572 = HEAP32[$571>>2]|0;
     $573 = $572 & 8;
     $574 = ($573|0)!=(0);
     if (!($574)) {
      $607 = $17;
      $608 = ($607|0)>(1);
      if (!($608)) {
       break;
      }
      $609 = $17;
      $610 = $609 & 1;
      $611 = ($610|0)==(0);
      if (!($611)) {
       break;
      }
      $612 = $7;
      $613 = ((($612)) + 12|0);
      $614 = HEAP32[$613>>2]|0;
      $615 = $614 & 2;
      $616 = ($615|0)!=(0);
      do {
       if (!($616)) {
        $617 = $18;
        $618 = ($617|0)>(3);
        if ($618) {
         $619 = $31;
         $620 = ((($619)) + 24|0);
         $621 = ((($620)) + 4|0);
         $622 = HEAP16[$621>>1]|0;
         $623 = $622&65535;
         $624 = ($623|0)!=(0);
         if ($624) {
          break;
         }
        }
        $625 = $31;
        $626 = ((($625)) + 3|0);
        HEAP8[$626>>0] = 0;
        break L153;
       }
      } while(0);
      $17 = 1;
      break;
     }
     $575 = $31;
     $576 = ((($575)) + 24|0);
     $43 = $576;
     while(1) {
      $577 = $43;
      $578 = ((($577)) + 17|0);
      $579 = HEAP8[$578>>0]|0;
      $580 = $579&255;
      $581 = ($580|0)!=(0);
      if (!($581)) {
       break L153;
      }
      $582 = $43;
      $583 = ((($582)) + 17|0);
      $584 = HEAP8[$583>>0]|0;
      $585 = $584&255;
      $586 = ($585|0)==(2);
      $587 = $43;
      if ($586) {
       break;
      }
      $606 = ((($587)) + 24|0);
      $43 = $606;
     }
     $588 = ((($587)) + 3|0);
     $589 = HEAP8[$588>>0]|0;
     $590 = $589&255;
     $591 = ($590|0)<=(1);
     if ($591) {
      $592 = $31;
      $593 = ((($592)) + 6|0);
      $594 = HEAP8[$593>>0]|0;
      $595 = $594&255;
      $596 = ($595|0)<(4);
      if ($596) {
       $597 = $31;
       $598 = ((($597)) + 3|0);
       HEAP8[$598>>0] = 0;
      }
      $599 = $43;
      $600 = ((($599)) + 6|0);
      $601 = HEAP8[$600>>0]|0;
      $602 = $601&255;
      $603 = ($602|0)<(4);
      if ($603) {
       $604 = $43;
       $605 = ((($604)) + 3|0);
       HEAP8[$605>>0] = 0;
      }
     }
    }
   } while(0);
   $627 = $31;
   $628 = ((($627)) + 24|0);
   $629 = HEAP16[$628>>1]|0;
   $630 = $629&65535;
   $631 = $630 & 8;
   $632 = ($631|0)!=(0);
   $633 = $11;
   $634 = ($633|0)>(0);
   $or$cond19 = $632 & $634;
   if ($or$cond19) {
    $635 = $15;
    $636 = ((($635)) + 11|0);
    $637 = HEAP8[$636>>0]|0;
    $638 = $637&255;
    $5 = 27813;
    $6 = $638;
    $639 = $5;
    $640 = $6;
    $3 = $639;
    $4 = $640;
    $641 = $3;
    $642 = $4;
    $643 = (_strchr($641,$642)|0);
    $644 = ($643|0)!=(0|0);
    if ($644) {
     $645 = $15;
     $646 = ((($645)) + 10|0);
     $647 = HEAP8[$646>>0]|0;
     $648 = $647&255;
     $12 = $648;
     $649 = $31;
     $650 = ((($649)) + 24|0);
     $651 = HEAP16[$650>>1]|0;
     $652 = $651&65535;
     $653 = $652 ^ 8;
     $654 = $653&65535;
     HEAP16[$650>>1] = $654;
    }
   }
   $655 = $31;
   $656 = ((($655)) + 24|0);
   $657 = ((($656)) + 4|0);
   $658 = HEAP16[$657>>1]|0;
   $659 = $658&65535;
   $660 = ($659|0)!=(0);
   if ($660) {
    $661 = $7;
    $662 = ((($661)) + 4|0);
    $663 = HEAP32[$662>>2]|0;
    $664 = ($663|0)!=(0);
    do {
     if ($664) {
      $665 = $14;
      $666 = ((($665)) + 11|0);
      $667 = HEAP8[$666>>0]|0;
      $668 = $667&255;
      $669 = ($668|0)!=(0);
      if ($669) {
       $670 = $14;
       $671 = ((($670)) + 11|0);
       $672 = HEAP8[$671>>0]|0;
       $673 = $672&255;
       $674 = ($673|0)!=(2);
       if ($674) {
        $675 = $7;
        $676 = ((($675)) + 4|0);
        $677 = HEAP32[$676>>2]|0;
        $678 = $677 & 512;
        $679 = ($678|0)!=(0);
        if ($679) {
         $12 = 11;
        }
       }
       $680 = $15;
       $681 = ((($680)) + 11|0);
       $682 = HEAP8[$681>>0]|0;
       $683 = $682&255;
       $684 = ($683|0)==(2);
       if ($684) {
        $685 = $7;
        $686 = ((($685)) + 4|0);
        $687 = HEAP32[$686>>2]|0;
        $688 = $687 & 12;
        $44 = $688;
        $689 = ($688|0)!=(0);
        do {
         if ($689) {
          $690 = $44;
          $691 = ($690|0)==(12);
          if ($691) {
           $12 = 11;
           break;
          } else {
           $12 = 23;
           break;
          }
         }
        } while(0);
        $692 = $14;
        $693 = ((($692)) + 11|0);
        $694 = HEAP8[$693>>0]|0;
        $695 = $694&255;
        $696 = ($695|0)==(2);
        do {
         if ($696) {
          $697 = $7;
          $698 = ((($697)) + 4|0);
          $699 = HEAP32[$698>>2]|0;
          $700 = $699 & 3;
          $44 = $700;
          $701 = ($700|0)!=(0);
          if (!($701)) {
           break;
          }
          $702 = $44;
          $703 = ($702|0)==(2);
          if ($703) {
           $12 = 10;
           break;
          } else {
           $12 = 23;
           break;
          }
         }
        } while(0);
        $704 = $31;
        $705 = ((($704)) + 24|0);
        $706 = ((($705)) + 3|0);
        $707 = HEAP8[$706>>0]|0;
        $708 = $707&255;
        $709 = ($708|0)>=(4);
        if (!($709)) {
         break;
        }
        $710 = $7;
        $711 = ((($710)) + 4|0);
        $712 = HEAP32[$711>>2]|0;
        $713 = $712 & 256;
        $714 = ($713|0)!=(0);
        if (!($714)) {
         break;
        }
        $12 = 10;
       }
      }
     }
    } while(0);
    $715 = $31;
    $716 = $32;
    $717 = ($715|0)!=($716|0);
    $718 = $10;
    $719 = ($718|0)>(0);
    $or$cond11 = $717 & $719;
    if ($or$cond11) {
     $720 = $7;
     $721 = HEAP32[$720>>2]|0;
     $722 = $721 & 7;
     $44 = $722;
     $723 = ($722|0)!=(0);
     do {
      if ($723) {
       $724 = $44;
       $725 = ($724|0)>(1);
       if (!($725)) {
        $726 = $12;
        $727 = ($726|0)!=(10);
        $728 = $12;
        $729 = ($728|0)!=(11);
        $or$cond13 = $727 & $729;
        if (!($or$cond13)) {
         break;
        }
       }
       $730 = $44;
       $731 = (27805 + ($730)|0);
       $732 = HEAP8[$731>>0]|0;
       $733 = $732&255;
       $12 = $733;
      }
     } while(0);
     $734 = HEAP32[19164]|0;
     $735 = ($734|0)>(0);
     if ($735) {
      $12 = 24;
     }
    }
   }
   $736 = $31;
   $737 = ((($736)) + 48|0);
   $738 = ((($737)) + 2|0);
   $739 = HEAP8[$738>>0]|0;
   $740 = $739&255;
   $741 = (45008 + ($740<<2)|0);
   $742 = HEAP32[$741>>2]|0;
   $16 = $742;
   $743 = $16;
   $744 = $31;
   $745 = ((($744)) + 48|0);
   $746 = ((($745)) + 8|0);
   HEAP32[$746>>2] = $743;
   $747 = $12;
   $748 = ($747|0)==(0);
   if ($748) {
    $749 = ((($29)) + 4|0);
    $750 = ((($749)) + 16|0);
    $751 = HEAP32[$750>>2]|0;
    $752 = ($751|0)!=(0);
    if ($752) {
     $753 = ((($29)) + 4|0);
     $754 = ((($753)) + 16|0);
     $755 = HEAP32[$754>>2]|0;
     $12 = $755;
    }
   }
   $756 = $28;
   $757 = ($756|0)==(0);
   if ($757) {
    $758 = $14;
    $759 = $10;
    $760 = $13;
    $761 = (($760) + (($759*24)|0)|0);
    $762 = ((($761)) + 8|0);
    HEAP32[$762>>2] = $758;
    $763 = $14;
    $764 = ((($763)) + 11|0);
    $765 = HEAP8[$764>>0]|0;
    $766 = $10;
    $767 = $13;
    $768 = (($767) + (($766*24)|0)|0);
    $769 = ((($768)) + 17|0);
    HEAP8[$769>>0] = $765;
    $770 = $10;
    $771 = $13;
    $772 = (($771) + (($770*24)|0)|0);
    $773 = ((($772)) + 16|0);
    HEAP8[$773>>0] = 0;
    $774 = $31;
    $775 = HEAP16[$774>>1]|0;
    $776 = $10;
    $777 = $13;
    $778 = (($777) + (($776*24)|0)|0);
    HEAP16[$778>>1] = $775;
    $779 = $31;
    $780 = ((($779)) + 3|0);
    $781 = HEAP8[$780>>0]|0;
    $782 = $781&255;
    $783 = $782 & 15;
    $784 = $783&255;
    $785 = $10;
    $786 = $13;
    $787 = (($786) + (($785*24)|0)|0);
    $788 = ((($787)) + 3|0);
    HEAP8[$788>>0] = $784;
    $789 = $31;
    $790 = ((($789)) + 6|0);
    $791 = HEAP8[$790>>0]|0;
    $792 = $10;
    $793 = $13;
    $794 = (($793) + (($792*24)|0)|0);
    $795 = ((($794)) + 6|0);
    HEAP8[$795>>0] = $791;
    $796 = $31;
    $797 = ((($796)) + 7|0);
    $798 = HEAP8[$797>>0]|0;
    $799 = $10;
    $800 = $13;
    $801 = (($800) + (($799*24)|0)|0);
    $802 = ((($801)) + 7|0);
    HEAP8[$802>>0] = $798;
    $803 = $10;
    $804 = $13;
    $805 = (($804) + (($803*24)|0)|0);
    $806 = ((($805)) + 4|0);
    HEAP16[$806>>1] = 0;
    $807 = $14;
    $808 = ((($807)) + 10|0);
    $809 = HEAP8[$808>>0]|0;
    $810 = $10;
    $811 = $13;
    $812 = (($811) + (($810*24)|0)|0);
    $813 = ((($812)) + 2|0);
    HEAP8[$813>>0] = $809;
    $814 = $31;
    $815 = ((($814)) + 4|0);
    $816 = HEAP16[$815>>1]|0;
    $817 = $816&65535;
    $818 = ($817|0)!=(0);
    if ($818) {
     $819 = $31;
     $820 = ((($819)) + 4|0);
     $821 = HEAP16[$820>>1]|0;
     $822 = $10;
     $823 = $13;
     $824 = (($823) + (($822*24)|0)|0);
     $825 = ((($824)) + 4|0);
     HEAP16[$825>>1] = $821;
     $826 = $10;
     $827 = $13;
     $828 = (($827) + (($826*24)|0)|0);
     $829 = ((($828)) + 21|0);
     HEAP8[$829>>0] = 1;
     $830 = $9;
     $831 = ($830|0)!=(0);
     if ($831) {
      $832 = $10;
      $833 = $13;
      $834 = (($833) + (($832*24)|0)|0);
      $835 = ((($834)) + 21|0);
      HEAP8[$835>>0] = 5;
      $9 = 0;
     }
    } else {
     $836 = $10;
     $837 = $13;
     $838 = (($837) + (($836*24)|0)|0);
     $839 = ((($838)) + 21|0);
     HEAP8[$839>>0] = 0;
    }
    $840 = ((($29)) + 4|0);
    $841 = ((($840)) + 40|0);
    $842 = HEAP32[$841>>2]|0;
    $843 = $842<<1;
    $844 = $10;
    $845 = $13;
    $846 = (($845) + (($844*24)|0)|0);
    $847 = ((($846)) + 12|0);
    HEAP32[$847>>2] = $843;
    $848 = $14;
    $849 = ((($848)) + 10|0);
    $850 = HEAP8[$849>>0]|0;
    $851 = $850&255;
    $852 = ($851|0)==(24);
    $853 = HEAP32[19164]|0;
    $854 = ($853|0)>(0);
    $or$cond15 = $852 & $854;
    if ($or$cond15) {
     $855 = $31;
     $856 = ((($855)) + 24|0);
     $857 = ((($856)) + 4|0);
     $858 = HEAP16[$857>>1]|0;
     $859 = $858&65535;
     $860 = ($859|0)!=(0);
     if ($860) {
      $861 = HEAP32[(45048)>>2]|0;
      $862 = $10;
      $863 = $13;
      $864 = (($863) + (($862*24)|0)|0);
      $865 = ((($864)) + 8|0);
      HEAP32[$865>>2] = $861;
      $866 = HEAP32[19164]|0;
      $867 = ($866*14)|0;
      $868 = $10;
      $869 = $13;
      $870 = (($869) + (($868*24)|0)|0);
      $871 = ((($870)) + 12|0);
      HEAP32[$871>>2] = $867;
     }
    }
    $872 = $14;
    $873 = ((($872)) + 11|0);
    $874 = HEAP8[$873>>0]|0;
    $875 = $874&255;
    $876 = ($875|0)==(2);
    do {
     if ($876) {
      label = 176;
     } else {
      $877 = $14;
      $878 = ((($877)) + 11|0);
      $879 = HEAP8[$878>>0]|0;
      $880 = $879&255;
      $881 = ($880|0)==(3);
      if ($881) {
       label = 176;
      } else {
       $882 = $14;
       $883 = ((($882)) + 11|0);
       $884 = HEAP8[$883>>0]|0;
       $885 = $884&255;
       $886 = ($885|0)==(8);
       if ($886) {
        label = 176;
        break;
       }
       $887 = $14;
       $888 = ((($887)) + 11|0);
       $889 = HEAP8[$888>>0]|0;
       $890 = $889&255;
       $891 = ($890|0)==(5);
       if ($891) {
        label = 176;
        break;
       }
       $892 = $14;
       $893 = ((($892)) + 11|0);
       $894 = HEAP8[$893>>0]|0;
       $895 = $894&255;
       $896 = ($895|0)==(7);
       if ($896) {
        label = 176;
        break;
       }
       $897 = $14;
       $898 = ((($897)) + 4|0);
       $899 = HEAP32[$898>>2]|0;
       $900 = $899 & 33554432;
       $901 = ($900|0)!=(0);
       if ($901) {
        label = 176;
       }
      }
     }
    } while(0);
    if ((label|0) == 176) {
     label = 0;
     $902 = $10;
     $903 = $13;
     $904 = (($903) + (($902*24)|0)|0);
     $905 = ((($904)) + 12|0);
     HEAP32[$905>>2] = 128;
     $906 = $10;
     $907 = $13;
     $908 = (($907) + (($906*24)|0)|0);
     $909 = ((($908)) + 16|0);
     HEAP8[$909>>0] = 0;
    }
    $910 = $10;
    $911 = $13;
    $912 = (($911) + (($910*24)|0)|0);
    $913 = ((($912)) + 18|0);
    HEAP8[$913>>0] = 0;
    $914 = $10;
    $915 = $13;
    $916 = (($915) + (($914*24)|0)|0);
    $917 = ((($916)) + 20|0);
    HEAP8[$917>>0] = 20;
    $918 = $10;
    $919 = $13;
    $920 = (($919) + (($918*24)|0)|0);
    $921 = ((($920)) + 22|0);
    HEAP8[$921>>0] = -1;
    $922 = $10;
    $923 = $13;
    $924 = (($923) + (($922*24)|0)|0);
    $925 = ((($924)) + 23|0);
    HEAP8[$925>>0] = -1;
    $926 = $10;
    $927 = (($926) + 1)|0;
    $10 = $927;
   }
  }
  $928 = $11;
  $929 = (($928) + 1)|0;
  $11 = $929;
 }
 $930 = $10;
 $931 = $13;
 $932 = (($931) + (($930*24)|0)|0);
 $933 = ((($932)) + 21|0);
 HEAP8[$933>>0] = 2;
 $934 = $10;
 $935 = $13;
 $936 = (($935) + (($934*24)|0)|0);
 $937 = ((($936)) + 2|0);
 HEAP8[$937>>0] = 9;
 $938 = $10;
 $939 = $13;
 $940 = (($939) + (($938*24)|0)|0);
 $941 = ((($940)) + 17|0);
 HEAP8[$941>>0] = 0;
 $942 = $8;
 $943 = $10;
 $944 = $13;
 $945 = (($944) + (($943*24)|0)|0);
 $946 = ((($945)) + 12|0);
 HEAP32[$946>>2] = $942;
 $947 = $23;
 $948 = $947&65535;
 $949 = $10;
 $950 = $13;
 $951 = (($950) + (($949*24)|0)|0);
 $952 = ((($951)) + 4|0);
 HEAP16[$952>>1] = $948;
 $953 = $10;
 $954 = $13;
 $955 = (($954) + (($953*24)|0)|0);
 HEAP16[$955>>1] = 0;
 $956 = HEAP32[(45044)>>2]|0;
 $957 = $10;
 $958 = (($957) + 1)|0;
 $10 = $958;
 $959 = $13;
 $960 = (($959) + (($957*24)|0)|0);
 $961 = ((($960)) + 8|0);
 HEAP32[$961>>2] = $956;
 $962 = $10;
 $963 = $13;
 $964 = (($963) + (($962*24)|0)|0);
 $965 = ((($964)) + 2|0);
 HEAP8[$965>>0] = 9;
 $966 = $10;
 $967 = $13;
 $968 = (($967) + (($966*24)|0)|0);
 $969 = ((($968)) + 17|0);
 HEAP8[$969>>0] = 0;
 $970 = $10;
 $971 = $13;
 $972 = (($971) + (($970*24)|0)|0);
 $973 = ((($972)) + 12|0);
 HEAP32[$973>>2] = 0;
 $974 = $10;
 $975 = $13;
 $976 = (($975) + (($974*24)|0)|0);
 $977 = ((($976)) + 4|0);
 HEAP16[$977>>1] = 0;
 $978 = $10;
 $979 = $13;
 $980 = (($979) + (($978*24)|0)|0);
 HEAP16[$980>>1] = 0;
 $981 = HEAP32[(45048)>>2]|0;
 $982 = $10;
 $983 = (($982) + 1)|0;
 $10 = $983;
 $984 = $13;
 $985 = (($984) + (($982*24)|0)|0);
 $986 = ((($985)) + 8|0);
 HEAP32[$986>>2] = $981;
 $987 = $10;
 HEAP32[12771] = $987;
 STACKTOP = sp;return;
}
function __ZL18SubstitutePhonemesP10TranslatorP12PHONEME_LIST($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
 var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0;
 var $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $2 = $0;
 $3 = $1;
 $7 = 0;
 $10 = 0;
 $4 = 0;
 while(1) {
  $11 = $4;
  $12 = HEAP32[19177]|0;
  $13 = ($11|0)<($12|0);
  $14 = $7;
  $15 = ($14|0)<(1000);
  $16 = $13 ? $15 : 0;
  if (!($16)) {
   break;
  }
  $17 = $4;
  $18 = (100420 + ($17<<3)|0);
  $9 = $18;
  $19 = $9;
  $20 = HEAP16[$19>>1]|0;
  $21 = $20&65535;
  $22 = $21 & 32;
  $23 = ($22|0)!=(0);
  if ($23) {
   label = 23;
  } else {
   $24 = $4;
   $25 = HEAP32[19177]|0;
   $26 = (($25) - 1)|0;
   $27 = ($24|0)<($26|0);
   if ($27) {
    $28 = $4;
    $29 = (($28) + 1)|0;
    $30 = (100420 + ($29<<3)|0);
    $31 = ((($30)) + 2|0);
    $32 = HEAP8[$31>>0]|0;
    $33 = $32&255;
    $34 = (45008 + ($33<<2)|0);
    $35 = HEAP32[$34>>2]|0;
    $10 = $35;
   }
   $8 = 0;
   $36 = $9;
   $37 = ((($36)) + 8|0);
   $38 = ((($37)) + 4|0);
   $39 = HEAP16[$38>>1]|0;
   $40 = ($39<<16>>16)!=(0);
   if ($40) {
    label = 9;
   } else {
    $41 = $10;
    $42 = ($41|0)!=(0|0);
    if ($42) {
     $43 = $10;
     $44 = ((($43)) + 11|0);
     $45 = HEAP8[$44>>0]|0;
     $46 = $45&255;
     $47 = ($46|0)==(0);
     if ($47) {
      label = 9;
     }
    }
   }
   if ((label|0) == 9) {
    label = 0;
    $8 = 1;
   }
   $5 = 0;
   L15: while(1) {
    $48 = $5;
    $49 = HEAP32[19490]|0;
    $50 = ($48|0)<($49|0);
    if (!($50)) {
     break;
    }
    $51 = $9;
    $52 = ((($51)) + 2|0);
    $53 = HEAP8[$52>>0]|0;
    $54 = $53&255;
    $55 = $5;
    $56 = (120748 + (($55*3)|0)|0);
    $57 = HEAP8[$56>>0]|0;
    $58 = $57&255;
    $59 = ($54|0)==($58|0);
    do {
     if ($59) {
      $60 = $5;
      $61 = (120748 + (($60*3)|0)|0);
      $62 = ((($61)) + 2|0);
      $63 = HEAP8[$62>>0]|0;
      $64 = $63 << 24 >> 24;
      $6 = $64;
      $65 = $6;
      $66 = $65 & 1;
      $67 = ($66|0)!=(0);
      $68 = $8;
      $69 = ($68|0)==(0);
      $or$cond = $67 & $69;
      if (!($or$cond)) {
       $70 = $6;
       $71 = $70 & 2;
       $72 = ($71|0)!=(0);
       if ($72) {
        $73 = $9;
        $74 = ((($73)) + 3|0);
        $75 = HEAP8[$74>>0]|0;
        $76 = $75&255;
        $77 = $76 & 7;
        $78 = ($77|0)>(3);
        if ($78) {
         break;
        }
       }
       $79 = $6;
       $80 = $79 & 4;
       $81 = ($80|0)!=(0);
       if (!($81)) {
        label = 18;
        break L15;
       }
       $82 = $9;
       $83 = ((($82)) + 4|0);
       $84 = HEAP16[$83>>1]|0;
       $85 = $84&65535;
       $86 = ($85|0)==(0);
       if (!($86)) {
        label = 18;
        break L15;
       }
      }
     }
    } while(0);
    $110 = $5;
    $111 = (($110) + 1)|0;
    $5 = $111;
   }
   if ((label|0) == 18) {
    label = 0;
    $87 = $5;
    $88 = (120748 + (($87*3)|0)|0);
    $89 = ((($88)) + 1|0);
    $90 = HEAP8[$89>>0]|0;
    $91 = $9;
    $92 = ((($91)) + 2|0);
    HEAP8[$92>>0] = $90;
    $93 = $9;
    $94 = ((($93)) + 3|0);
    $95 = HEAP8[$94>>0]|0;
    $96 = $95&255;
    $97 = ($96|0)>(1);
    if ($97) {
     $98 = $9;
     $99 = ((($98)) + 2|0);
     $100 = HEAP8[$99>>0]|0;
     $101 = $100&255;
     $102 = (45008 + ($101<<2)|0);
     $103 = HEAP32[$102>>2]|0;
     $104 = ((($103)) + 4|0);
     $105 = HEAP32[$104>>2]|0;
     $106 = $105 & 2;
     $107 = ($106|0)!=(0);
     if ($107) {
      $108 = $9;
      $109 = ((($108)) + 3|0);
      HEAP8[$109>>0] = 0;
     }
    }
   }
   $112 = $9;
   $113 = ((($112)) + 2|0);
   $114 = HEAP8[$113>>0]|0;
   $115 = $114&255;
   $116 = ($115|0)==(0);
   if (!($116)) {
    label = 23;
   }
  }
  if ((label|0) == 23) {
   label = 0;
   $117 = $7;
   $118 = $3;
   $119 = (($118) + (($117*24)|0)|0);
   $120 = $9;
   ;HEAP16[$119>>1]=HEAP16[$120>>1]|0;HEAP16[$119+2>>1]=HEAP16[$120+2>>1]|0;HEAP16[$119+4>>1]=HEAP16[$120+4>>1]|0;HEAP16[$119+6>>1]=HEAP16[$120+6>>1]|0;
   $121 = $9;
   $122 = ((($121)) + 2|0);
   $123 = HEAP8[$122>>0]|0;
   $124 = $123&255;
   $125 = (45008 + ($124<<2)|0);
   $126 = HEAP32[$125>>2]|0;
   $127 = $7;
   $128 = $3;
   $129 = (($128) + (($127*24)|0)|0);
   $130 = ((($129)) + 8|0);
   HEAP32[$130>>2] = $126;
   $131 = $7;
   $132 = $3;
   $133 = (($132) + (($131*24)|0)|0);
   $134 = ((($133)) + 8|0);
   $135 = HEAP32[$134>>2]|0;
   $136 = ((($135)) + 11|0);
   $137 = HEAP8[$136>>0]|0;
   $138 = $7;
   $139 = $3;
   $140 = (($139) + (($138*24)|0)|0);
   $141 = ((($140)) + 17|0);
   HEAP8[$141>>0] = $137;
   $142 = $7;
   $143 = (($142) + 1)|0;
   $7 = $143;
  }
  $144 = $4;
  $145 = (($144) + 1)|0;
  $4 = $145;
 }
 $146 = $7;
 STACKTOP = sp;return ($146|0);
}
function __Z10KlattReseti($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $3 = $1;
 $4 = ($3|0)==(2);
 if ($4) {
  $5 = HEAP32[(38080)>>2]|0;
  $6 = ($5*950)|0;
  $7 = (($6|0) / 10000)&-1;
  HEAP32[(38084)>>2] = $7;
  $8 = HEAP32[(38080)>>2]|0;
  $9 = ($8*630)|0;
  $10 = (($9|0) / 10000)&-1;
  HEAP32[(38088)>>2] = $10;
  $11 = HEAP32[(38080)>>2]|0;
  $12 = (+($11|0));
  $13 = -3.1415926999999999 / $12;
  HEAPF64[(38144)>>3] = $13;
  $14 = +HEAPF64[(38144)>>3];
  $15 = -2.0 * $14;
  HEAPF64[(38152)>>3] = $15;
  $16 = HEAP32[(38084)>>2]|0;
  $17 = HEAP32[(38088)>>2]|0;
  __ZL6setabcllP11resonator_t($16,$17,(39416));
 }
 $18 = $1;
 $19 = ($18|0)>(0);
 L4: do {
  if ($19) {
   HEAP32[(38104)>>2] = 0;
   HEAP32[(38112)>>2] = 0;
   HEAP32[(38116)>>2] = 0;
   HEAP32[(38120)>>2] = 0;
   $2 = 17;
   while(1) {
    $20 = $2;
    $21 = ($20|0)<(20);
    if (!($21)) {
     break L4;
    }
    $22 = $2;
    $23 = ((38264) + ($22<<6)|0);
    $24 = ((($23)) + 24|0);
    HEAPF64[$24>>3] = 0.0;
    $25 = $2;
    $26 = ((38264) + ($25<<6)|0);
    $27 = ((($26)) + 32|0);
    HEAPF64[$27>>3] = 0.0;
    $28 = $2;
    $29 = (($28) + 1)|0;
    $2 = $29;
   }
  }
 } while(0);
 $2 = 0;
 while(1) {
  $30 = $2;
  $31 = ($30|0)<=(16);
  if (!($31)) {
   break;
  }
  $32 = $2;
  $33 = ((38264) + ($32<<6)|0);
  $34 = ((($33)) + 24|0);
  HEAPF64[$34>>3] = 0.0;
  $35 = $2;
  $36 = ((38264) + ($35<<6)|0);
  $37 = ((($36)) + 32|0);
  HEAPF64[$37>>3] = 0.0;
  $38 = $2;
  $39 = (($38) + 1)|0;
  $2 = $39;
 }
 STACKTOP = sp;return;
}
function __ZL6setabcllP11resonator_t($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0, $19 = 0, $20 = 0.0, $21 = 0, $22 = 0.0, $23 = 0.0, $24 = 0.0, $25 = 0.0, $26 = 0.0, $27 = 0.0, $28 = 0.0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0.0, $34 = 0.0, $35 = 0, $36 = 0, $37 = 0.0, $38 = 0.0, $39 = 0, $4 = 0, $5 = 0, $6 = 0.0, $7 = 0.0, $8 = 0.0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $8 = +HEAPF64[(38144)>>3];
 $9 = $4;
 $10 = (+($9|0));
 $11 = $8 * $10;
 $7 = $11;
 $12 = $7;
 $13 = (+Math_exp((+$12)));
 $6 = $13;
 $14 = $6;
 $15 = $6;
 $16 = $14 * $15;
 $17 = -$16;
 $18 = $5;
 $19 = ((($18)) + 16|0);
 HEAPF64[$19>>3] = $17;
 $20 = +HEAPF64[(38152)>>3];
 $21 = $3;
 $22 = (+($21|0));
 $23 = $20 * $22;
 $7 = $23;
 $24 = $6;
 $25 = $7;
 $26 = (+Math_cos((+$25)));
 $27 = $24 * $26;
 $28 = $27 * 2.0;
 $29 = $5;
 $30 = ((($29)) + 8|0);
 HEAPF64[$30>>3] = $28;
 $31 = $5;
 $32 = ((($31)) + 8|0);
 $33 = +HEAPF64[$32>>3];
 $34 = 1.0 - $33;
 $35 = $5;
 $36 = ((($35)) + 16|0);
 $37 = +HEAPF64[$36>>3];
 $38 = $34 - $37;
 $39 = $5;
 HEAPF64[$39>>3] = $38;
 STACKTOP = sp;return;
}
function __Z13Wavegen_Klatti($0) {
 $0 = $0|0;
 var $$ = 0, $$1 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0.0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0.0, $111 = 0.0, $112 = 0, $113 = 0, $114 = 0;
 var $115 = 0.0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0.0, $127 = 0, $128 = 0, $129 = 0.0, $13 = 0, $130 = 0.0, $131 = 0, $132 = 0;
 var $133 = 0.0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0;
 var $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0;
 var $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0;
 var $188 = 0, $189 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0;
 var $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0;
 var $53 = 0, $54 = 0, $55 = 0, $56 = 0.0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0.0, $61 = 0.0, $62 = 0, $63 = 0, $64 = 0, $65 = 0.0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0;
 var $71 = 0, $72 = 0.0, $73 = 0, $74 = 0, $75 = 0, $76 = 0.0, $77 = 0.0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0.0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0.0;
 var $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0.0, $94 = 0.0, $95 = 0, $96 = 0, $97 = 0, $98 = 0.0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $2 = $0;
 $7 = $2;
 $8 = ($7|0)==(0);
 if ($8) {
  HEAP32[22146] = 0;
 }
 while(1) {
  $9 = HEAP32[22146]|0;
  $10 = HEAP32[22147]|0;
  $11 = ($9|0)<($10|0);
  if (!($11)) {
   break;
  }
  $12 = HEAP32[(80868)>>2]|0;
  $13 = ($12*10)|0;
  $14 = (($13|0) / 4096)&-1;
  HEAP32[22148] = $14;
  $5 = 0;
  while(1) {
   $15 = $5;
   $16 = ($15|0)<(6);
   if (!($16)) {
    break;
   }
   $17 = $5;
   $18 = (40824 + (($17*80)|0)|0);
   $19 = HEAP32[$18>>2]|0;
   $20 = $5;
   $21 = ((88600) + ($20<<2)|0);
   HEAP32[$21>>2] = $19;
   $22 = $5;
   $23 = ($22|0)<(4);
   if ($23) {
    $24 = $5;
    $25 = (40824 + (($24*80)|0)|0);
    $26 = ((($25)) + 4|0);
    $27 = HEAP32[$26>>2]|0;
    $28 = $5;
    $29 = ((88640) + ($28<<2)|0);
    HEAP32[$29>>2] = $27;
   }
   $30 = $5;
   $31 = (($30) + 1)|0;
   $5 = $31;
  }
  $5 = 1;
  while(1) {
   $32 = $5;
   $33 = ($32|0)<(7);
   if (!($33)) {
    break;
   }
   $34 = $5;
   $35 = (40824 + (($34*80)|0)|0);
   $36 = ((($35)) + 8|0);
   $37 = HEAP32[$36>>2]|0;
   $38 = $5;
   $39 = ((88680) + ($38<<2)|0);
   HEAP32[$39>>2] = $37;
   $40 = $5;
   $41 = (($40) + 1)|0;
   $5 = $41;
  }
  $42 = HEAP32[22220]|0;
  HEAP32[(88596)>>2] = $42;
  $43 = HEAP32[(88904)>>2]|0;
  HEAP32[(88788)>>2] = $43;
  $44 = HEAP32[(88908)>>2]|0;
  HEAP32[(88776)>>2] = $44;
  $45 = HEAP32[(88912)>>2]|0;
  HEAP32[(88784)>>2] = $45;
  $46 = HEAP32[(88892)>>2]|0;
  HEAP32[(88760)>>2] = $46;
  $47 = HEAP32[(88916)>>2]|0;
  HEAP32[(88768)>>2] = $47;
  $48 = HEAP32[(88896)>>2]|0;
  HEAP32[(88780)>>2] = $48;
  $49 = HEAP32[(88888)>>2]|0;
  HEAP32[(88772)>>2] = $49;
  $50 = HEAP32[(88900)>>2]|0;
  HEAP32[(88764)>>2] = $50;
  $3 = 0;
  while(1) {
   $51 = $3;
   $52 = ($51|0)<(9);
   if (!($52)) {
    break;
   }
   $53 = $3;
   $54 = (40824 + (($53*80)|0)|0);
   $55 = ((($54)) + 48|0);
   $56 = +HEAPF64[$55>>3];
   $57 = $3;
   $58 = (40824 + (($57*80)|0)|0);
   $59 = ((($58)) + 16|0);
   $60 = +HEAPF64[$59>>3];
   $61 = $60 + $56;
   HEAPF64[$59>>3] = $61;
   $62 = $3;
   $63 = (40824 + (($62*80)|0)|0);
   $64 = ((($63)) + 16|0);
   $65 = +HEAPF64[$64>>3];
   $66 = (~~(($65)));
   $67 = $3;
   $68 = (40824 + (($67*80)|0)|0);
   HEAP32[$68>>2] = $66;
   $69 = $3;
   $70 = (40824 + (($69*80)|0)|0);
   $71 = ((($70)) + 56|0);
   $72 = +HEAPF64[$71>>3];
   $73 = $3;
   $74 = (40824 + (($73*80)|0)|0);
   $75 = ((($74)) + 24|0);
   $76 = +HEAPF64[$75>>3];
   $77 = $76 + $72;
   HEAPF64[$75>>3] = $77;
   $78 = $3;
   $79 = (40824 + (($78*80)|0)|0);
   $80 = ((($79)) + 24|0);
   $81 = +HEAPF64[$80>>3];
   $82 = (~~(($81)));
   $83 = $3;
   $84 = (40824 + (($83*80)|0)|0);
   $85 = ((($84)) + 4|0);
   HEAP32[$85>>2] = $82;
   $86 = $3;
   $87 = (40824 + (($86*80)|0)|0);
   $88 = ((($87)) + 72|0);
   $89 = +HEAPF64[$88>>3];
   $90 = $3;
   $91 = (40824 + (($90*80)|0)|0);
   $92 = ((($91)) + 40|0);
   $93 = +HEAPF64[$92>>3];
   $94 = $93 + $89;
   HEAPF64[$92>>3] = $94;
   $95 = $3;
   $96 = (40824 + (($95*80)|0)|0);
   $97 = ((($96)) + 40|0);
   $98 = +HEAPF64[$97>>3];
   $99 = (~~(($98)));
   $100 = $3;
   $101 = (40824 + (($100*80)|0)|0);
   $102 = ((($101)) + 12|0);
   HEAP32[$102>>2] = $99;
   $103 = $3;
   $104 = (40824 + (($103*80)|0)|0);
   $105 = ((($104)) + 64|0);
   $106 = +HEAPF64[$105>>3];
   $107 = $3;
   $108 = (40824 + (($107*80)|0)|0);
   $109 = ((($108)) + 32|0);
   $110 = +HEAPF64[$109>>3];
   $111 = $110 + $106;
   HEAPF64[$109>>3] = $111;
   $112 = $3;
   $113 = (40824 + (($112*80)|0)|0);
   $114 = ((($113)) + 32|0);
   $115 = +HEAPF64[$114>>3];
   $116 = (~~(($115)));
   $117 = $3;
   $118 = (40824 + (($117*80)|0)|0);
   $119 = ((($118)) + 8|0);
   HEAP32[$119>>2] = $116;
   $120 = $3;
   $121 = (($120) + 1)|0;
   $3 = $121;
  }
  $5 = 0;
  while(1) {
   $122 = $5;
   $123 = ($122|0)<(10);
   if (!($123)) {
    break;
   }
   $124 = $5;
   $125 = (41544 + ($124<<3)|0);
   $126 = +HEAPF64[$125>>3];
   $127 = $5;
   $128 = (41624 + ($127<<3)|0);
   $129 = +HEAPF64[$128>>3];
   $130 = $129 + $126;
   HEAPF64[$128>>3] = $130;
   $131 = $5;
   $132 = (41624 + ($131<<3)|0);
   $133 = +HEAPF64[$132>>3];
   $134 = (~~(($133)));
   $135 = $5;
   $136 = (88880 + ($135<<2)|0);
   HEAP32[$136>>2] = $134;
   $137 = $5;
   $138 = (($137) + 1)|0;
   $5 = $138;
  }
  $5 = 0;
  while(1) {
   $139 = $5;
   $140 = ($139|0)<=(6);
   if (!($140)) {
    break;
   }
   $141 = $5;
   $142 = (40824 + (($141*80)|0)|0);
   $143 = HEAP32[$142>>2]|0;
   $144 = $5;
   $145 = ((88800) + ($144<<2)|0);
   HEAP32[$145>>2] = $143;
   $146 = $5;
   $147 = ($146|0)<(4);
   if ($147) {
    $148 = $5;
    $149 = (40824 + (($148*80)|0)|0);
    $150 = ((($149)) + 4|0);
    $151 = HEAP32[$150>>2]|0;
    $152 = $5;
    $153 = ((88840) + ($152<<2)|0);
    HEAP32[$153>>2] = $151;
   }
   $154 = $5;
   $155 = (($154) + 1)|0;
   $5 = $155;
  }
  $156 = HEAP32[(80876)>>2]|0;
  $157 = HEAP32[(80872)>>2]|0;
  $158 = (($157) + ($156))|0;
  HEAP32[(80872)>>2] = $158;
  $159 = HEAP32[(80872)>>2]|0;
  $160 = $159 >> 8;
  $5 = $160;
  $161 = ($160|0)>(127);
  $$ = $161 ? 127 : $160;
  $5 = $$;
  $162 = $5;
  $163 = HEAP32[20216]|0;
  $164 = (($163) + ($162)|0);
  $165 = HEAP8[$164>>0]|0;
  $166 = $165&255;
  $167 = HEAP32[(80884)>>2]|0;
  $168 = Math_imul($166, $167)|0;
  $4 = $168;
  $169 = $4;
  $170 = $169 >> 8;
  $171 = HEAP32[(80880)>>2]|0;
  $172 = (($170) + ($171))|0;
  HEAP32[(80868)>>2] = $172;
  $173 = HEAP32[22147]|0;
  $174 = HEAP32[22146]|0;
  $175 = (($173) - ($174))|0;
  HEAP32[(38100)>>2] = $175;
  $176 = HEAP32[(38100)>>2]|0;
  $177 = ($176|0)>(64);
  $$1 = $177 ? 64 : $175;
  HEAP32[(38100)>>2] = $$1;
  __ZL10frame_initP13klatt_frame_t(88592);
  $178 = (__ZL7parwaveP13klatt_frame_t(88592)|0);
  $179 = ($178|0)==(1);
  if ($179) {
   label = 24;
   break;
  }
 }
 if ((label|0) == 24) {
  $1 = 1;
  $189 = $1;
  STACKTOP = sp;return ($189|0);
 }
 $180 = HEAP32[22230]|0;
 $181 = ($180|0)>(0);
 if ($181) {
  $6 = 64;
  $182 = $6;
  HEAP32[(38256)>>2] = $182;
  HEAP32[22230] = 0;
  $183 = $6;
  $184 = HEAP32[22146]|0;
  $185 = (($184) - ($183))|0;
  HEAP32[22146] = $185;
  $186 = $6;
  HEAP32[(38100)>>2] = $186;
  $187 = (__ZL7parwaveP13klatt_frame_t(88592)|0);
  $188 = ($187|0)==(1);
  if ($188) {
   $1 = 1;
   $189 = $1;
   STACKTOP = sp;return ($189|0);
  }
 }
 $1 = 0;
 $189 = $1;
 STACKTOP = sp;return ($189|0);
}
function __ZL10frame_initP13klatt_frame_t($0) {
 $0 = $0|0;
 var $$ = 0, $1 = 0, $10 = 0, $100 = 0.0, $101 = 0.0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0.0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0.0, $113 = 0.0, $114 = 0.0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0.0, $122 = 0, $123 = 0, $124 = 0, $125 = 0.0, $126 = 0.0, $127 = 0.0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0.0, $146 = 0.0, $147 = 0.0, $148 = 0.0, $149 = 0.0, $15 = 0, $150 = 0.0, $151 = 0.0;
 var $152 = 0.0, $153 = 0.0, $154 = 0.0, $155 = 0.0, $156 = 0.0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0.0, $175 = 0, $176 = 0, $177 = 0, $178 = 0.0, $179 = 0.0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0.0, $24 = 0.0, $25 = 0, $26 = 0, $27 = 0, $28 = 0.0, $29 = 0.0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0.0, $34 = 0, $35 = 0, $36 = 0, $37 = 0.0, $38 = 0.0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0.0, $47 = 0, $48 = 0, $49 = 0.0, $5 = 0, $50 = 0.0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0.0, $63 = 0, $64 = 0.0, $65 = 0.0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0;
 var $96 = 0.0, $97 = 0, $98 = 0, $99 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(80|0);
 $2 = sp;
 $1 = $0;
 $5 = $1;
 $6 = HEAP32[$5>>2]|0;
 $7 = (($6|0) / 10)&-1;
 HEAP32[(38252)>>2] = $7;
 $8 = $1;
 $9 = ((($8)) + 4|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = (($10) - 7)|0;
 $12 = $1;
 $13 = ((($12)) + 204|0);
 HEAP32[$13>>2] = $11;
 $14 = $1;
 $15 = ((($14)) + 204|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = ($16|0)<(0);
 if ($17) {
  $18 = $1;
  $19 = ((($18)) + 204|0);
  HEAP32[$19>>2] = 0;
 }
 $20 = $1;
 $21 = ((($20)) + 168|0);
 $22 = HEAP32[$21>>2]|0;
 $23 = (+__ZL7DBtoLINl($22));
 $24 = $23 * 0.050000000000000003;
 HEAPF64[(38200)>>3] = $24;
 $25 = $1;
 $26 = ((($25)) + 184|0);
 $27 = HEAP32[$26>>2]|0;
 $28 = (+__ZL7DBtoLINl($27));
 $29 = $28 * 0.25;
 HEAPF64[(38208)>>3] = $29;
 $30 = $1;
 $31 = ((($30)) + 196|0);
 $32 = HEAP32[$31>>2]|0;
 $33 = (+__ZL7DBtoLINl($32));
 HEAPF64[(38192)>>3] = $33;
 $34 = $1;
 $35 = ((($34)) + 192|0);
 $36 = HEAP32[$35>>2]|0;
 $37 = (+__ZL7DBtoLINl($36));
 $38 = $37 * 0.050000000000000003;
 HEAPF64[(38176)>>3] = $38;
 $4 = 0;
 while(1) {
  $39 = $4;
  $40 = ($39|0)<=(6);
  if (!($40)) {
   break;
  }
  $41 = $4;
  $42 = $1;
  $43 = ((($42)) + 88|0);
  $44 = (($43) + ($41<<2)|0);
  $45 = HEAP32[$44>>2]|0;
  $46 = (+__ZL7DBtoLINl($45));
  $47 = $4;
  $48 = (40 + ($47<<3)|0);
  $49 = +HEAPF64[$48>>3];
  $50 = $46 * $49;
  $51 = $4;
  $52 = (($2) + ($51<<3)|0);
  HEAPF64[$52>>3] = $50;
  $53 = $4;
  $54 = (($53) + 1)|0;
  $4 = $54;
 }
 $55 = $1;
 $56 = ((($55)) + 200|0);
 $57 = HEAP32[$56>>2]|0;
 $58 = (($57) - 3)|0;
 $3 = $58;
 $59 = $3;
 $60 = ($59|0)<=(0);
 $$ = $60 ? 57 : $58;
 $3 = $$;
 $61 = $3;
 $62 = (+__ZL7DBtoLINl($61));
 $63 = HEAP32[(38260)>>2]|0;
 $64 = (+($63|0));
 $65 = $62 / $64;
 HEAPF64[(38224)>>3] = $65;
 $4 = 1;
 while(1) {
  $66 = $4;
  $67 = ($66|0)<=(9);
  if (!($67)) {
   break;
  }
  $68 = $4;
  $69 = $1;
  $70 = ((($69)) + 8|0);
  $71 = (($70) + ($68<<2)|0);
  $72 = HEAP32[$71>>2]|0;
  $73 = $4;
  $74 = $1;
  $75 = ((($74)) + 48|0);
  $76 = (($75) + ($73<<2)|0);
  $77 = HEAP32[$76>>2]|0;
  $78 = $4;
  $79 = ((38264) + ($78<<6)|0);
  __ZL6setabcllP11resonator_t($72,$77,$79);
  $80 = $4;
  $81 = ($80|0)<=(5);
  if ($81) {
   $82 = $4;
   $83 = $1;
   $84 = ((($83)) + 208|0);
   $85 = (($84) + ($82<<2)|0);
   $86 = HEAP32[$85>>2]|0;
   $87 = $4;
   $88 = $1;
   $89 = ((($88)) + 248|0);
   $90 = (($89) + ($87<<2)|0);
   $91 = HEAP32[$90>>2]|0;
   $92 = $4;
   $93 = ((39544) + ($92<<6)|0);
   __ZL6setabcllP11resonator_t($86,$91,$93);
   $94 = $4;
   $95 = ((39544) + ($94<<6)|0);
   $96 = +HEAPF64[$95>>3];
   $97 = $4;
   $98 = ((38264) + ($97<<6)|0);
   $99 = +HEAPF64[$98>>3];
   $100 = $96 - $99;
   $101 = $100 / 64.0;
   $102 = $4;
   $103 = ((38264) + ($102<<6)|0);
   $104 = ((($103)) + 40|0);
   HEAPF64[$104>>3] = $101;
   $105 = $4;
   $106 = ((39544) + ($105<<6)|0);
   $107 = ((($106)) + 8|0);
   $108 = +HEAPF64[$107>>3];
   $109 = $4;
   $110 = ((38264) + ($109<<6)|0);
   $111 = ((($110)) + 8|0);
   $112 = +HEAPF64[$111>>3];
   $113 = $108 - $112;
   $114 = $113 / 64.0;
   $115 = $4;
   $116 = ((38264) + ($115<<6)|0);
   $117 = ((($116)) + 48|0);
   HEAPF64[$117>>3] = $114;
   $118 = $4;
   $119 = ((39544) + ($118<<6)|0);
   $120 = ((($119)) + 16|0);
   $121 = +HEAPF64[$120>>3];
   $122 = $4;
   $123 = ((38264) + ($122<<6)|0);
   $124 = ((($123)) + 16|0);
   $125 = +HEAPF64[$124>>3];
   $126 = $121 - $125;
   $127 = $126 / 64.0;
   $128 = $4;
   $129 = ((38264) + ($128<<6)|0);
   $130 = ((($129)) + 56|0);
   HEAPF64[$130>>3] = $127;
  }
  $131 = $4;
  $132 = (($131) + 1)|0;
  $4 = $132;
 }
 $133 = $1;
 $134 = ((($133)) + 8|0);
 $135 = HEAP32[$134>>2]|0;
 $136 = $1;
 $137 = ((($136)) + 48|0);
 $138 = HEAP32[$137>>2]|0;
 __ZL10setzeroabcllP11resonator_t($135,$138,(38264));
 $139 = $1;
 $140 = ((($139)) + 208|0);
 $141 = HEAP32[$140>>2]|0;
 $142 = $1;
 $143 = ((($142)) + 248|0);
 $144 = HEAP32[$143>>2]|0;
 __ZL10setzeroabcllP11resonator_t($141,$144,(39544));
 $145 = +HEAPF64[(39544)>>3];
 $146 = +HEAPF64[(38264)>>3];
 $147 = $145 - $146;
 $148 = $147 / 64.0;
 HEAPF64[(38304)>>3] = $148;
 $149 = +HEAPF64[(39552)>>3];
 $150 = +HEAPF64[(38272)>>3];
 $151 = $149 - $150;
 $152 = $151 / 64.0;
 HEAPF64[(38312)>>3] = $152;
 $153 = +HEAPF64[(39560)>>3];
 $154 = +HEAPF64[(38280)>>3];
 $155 = $153 - $154;
 $156 = $155 / 64.0;
 HEAPF64[(38320)>>3] = $156;
 $4 = 0;
 while(1) {
  $157 = $4;
  $158 = ($157|0)<=(6);
  if (!($158)) {
   break;
  }
  $159 = $4;
  $160 = $1;
  $161 = ((($160)) + 8|0);
  $162 = (($161) + ($159<<2)|0);
  $163 = HEAP32[$162>>2]|0;
  $164 = $4;
  $165 = $1;
  $166 = ((($165)) + 128|0);
  $167 = (($166) + ($164<<2)|0);
  $168 = HEAP32[$167>>2]|0;
  $169 = $4;
  $170 = (10 + ($169))|0;
  $171 = ((38264) + ($170<<6)|0);
  __ZL6setabcllP11resonator_t($163,$168,$171);
  $172 = $4;
  $173 = (($2) + ($172<<3)|0);
  $174 = +HEAPF64[$173>>3];
  $175 = $4;
  $176 = (10 + ($175))|0;
  $177 = ((38264) + ($176<<6)|0);
  $178 = +HEAPF64[$177>>3];
  $179 = $178 * $174;
  HEAPF64[$177>>3] = $179;
  $180 = $4;
  $181 = (($180) + 1)|0;
  $4 = $181;
 }
 $182 = HEAP32[(38080)>>2]|0;
 $183 = (($182|0) / 2)&-1;
 __ZL6setabcllP11resonator_t(0,$183,(39480));
 STACKTOP = sp;return;
}
function __ZL7parwaveP13klatt_frame_t($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0.0, $100 = 0.0, $101 = 0.0, $102 = 0.0, $103 = 0.0, $104 = 0.0, $105 = 0.0, $106 = 0.0, $107 = 0.0, $108 = 0.0, $109 = 0.0, $11 = 0.0, $110 = 0.0, $111 = 0.0, $112 = 0.0, $113 = 0.0, $114 = 0.0, $115 = 0.0, $116 = 0.0;
 var $117 = 0, $118 = 0, $119 = 0, $12 = 0.0, $120 = 0, $121 = 0.0, $122 = 0.0, $123 = 0.0, $124 = 0.0, $125 = 0, $126 = 0, $127 = 0.0, $128 = 0.0, $129 = 0.0, $13 = 0, $130 = 0.0, $131 = 0.0, $132 = 0.0, $133 = 0.0, $134 = 0.0;
 var $135 = 0.0, $136 = 0, $137 = 0.0, $138 = 0.0, $139 = 0.0, $14 = 0, $140 = 0.0, $141 = 0, $142 = 0.0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0;
 var $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0;
 var $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0.0, $18 = 0, $180 = 0.0, $181 = 0.0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0.0, $187 = 0, $188 = 0.0, $189 = 0.0;
 var $19 = 0, $190 = 0.0, $191 = 0.0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0;
 var $207 = 0, $208 = 0, $209 = 0, $21 = 0.0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0.0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0;
 var $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $24 = 0, $25 = 0, $26 = 0.0, $27 = 0.0, $28 = 0.0, $29 = 0.0, $3 = 0.0, $30 = 0.0, $31 = 0, $32 = 0, $33 = 0, $34 = 0.0;
 var $35 = 0.0, $36 = 0.0, $37 = 0.0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0.0, $43 = 0.0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0.0, $49 = 0.0, $5 = 0.0, $50 = 0.0, $51 = 0.0, $52 = 0.0;
 var $53 = 0.0, $54 = 0.0, $55 = 0.0, $56 = 0, $57 = 0, $58 = 0, $59 = 0.0, $6 = 0.0, $60 = 0, $61 = 0.0, $62 = 0.0, $63 = 0.0, $64 = 0.0, $65 = 0.0, $66 = 0.0, $67 = 0.0, $68 = 0.0, $69 = 0.0, $7 = 0, $70 = 0.0;
 var $71 = 0.0, $72 = 0.0, $73 = 0.0, $74 = 0.0, $75 = 0.0, $76 = 0.0, $77 = 0.0, $78 = 0.0, $79 = 0.0, $8 = 0.0, $80 = 0, $81 = 0, $82 = 0.0, $83 = 0.0, $84 = 0.0, $85 = 0.0, $86 = 0.0, $87 = 0.0, $88 = 0.0, $89 = 0.0;
 var $9 = 0.0, $90 = 0.0, $91 = 0.0, $92 = 0.0, $93 = 0.0, $94 = 0.0, $95 = 0.0, $96 = 0.0, $97 = 0.0, $98 = 0.0, $99 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(96|0);
 $2 = $0;
 $17 = $2;
 __ZL7flutterP13klatt_frame_t($17);
 HEAP32[(38108)>>2] = 0;
 while(1) {
  $18 = HEAP32[(38108)>>2]|0;
  $19 = HEAP32[(38100)>>2]|0;
  $20 = ($18|0)<($19|0);
  if (!($20)) {
   label = 40;
   break;
  }
  $21 = +HEAPF64[5213];
  $22 = (+__ZL9gen_noised($21));
  HEAPF64[5213] = $22;
  $23 = HEAP32[(38104)>>2]|0;
  $24 = HEAP32[(38120)>>2]|0;
  $25 = ($23|0)>($24|0);
  if ($25) {
   $26 = +HEAPF64[5213];
   $27 = $26 * 0.5;
   HEAPF64[5213] = $27;
  }
  $28 = +HEAPF64[(38208)>>3];
  $29 = +HEAPF64[5213];
  $30 = $28 * $29;
  $8 = $30;
  $7 = 0;
  while(1) {
   $31 = $7;
   $32 = ($31|0)<(4);
   if (!($32)) {
    break;
   }
   $33 = HEAP32[(38092)>>2]|0;
   switch ($33|0) {
   case 1:  {
    $34 = (+__ZL16impulsive_sourcev());
    HEAPF64[5214] = $34;
    break;
   }
   case 2:  {
    $35 = (+__ZL14natural_sourcev());
    HEAPF64[5214] = $35;
    break;
   }
   case 3:  {
    $36 = (+__ZL14sampled_sourcei(0));
    HEAPF64[5214] = $36;
    break;
   }
   case 4:  {
    $37 = (+__ZL14sampled_sourcei(1));
    HEAPF64[5214] = $37;
    break;
   }
   default: {
   }
   }
   $38 = HEAP32[(38104)>>2]|0;
   $39 = HEAP32[(38112)>>2]|0;
   $40 = ($38|0)>=($39|0);
   if ($40) {
    HEAP32[(38104)>>2] = 0;
    $41 = $2;
    __ZL21pitch_synch_par_resetP13klatt_frame_t($41);
   }
   $42 = +HEAPF64[5214];
   $43 = (+__ZL9resonatorP11resonator_td((39416),$42));
   HEAPF64[5214] = $43;
   $44 = HEAP32[(38104)>>2]|0;
   $45 = (($44) + 1)|0;
   HEAP32[(38104)>>2] = $45;
   $46 = $7;
   $47 = (($46) + 1)|0;
   $7 = $47;
  }
  $48 = +HEAPF64[5214];
  $49 = +HEAPF64[(38160)>>3];
  $50 = $48 * $49;
  $51 = +HEAPF64[5215];
  $52 = +HEAPF64[(38168)>>3];
  $53 = $51 * $52;
  $54 = $50 + $53;
  HEAPF64[5214] = $54;
  $55 = +HEAPF64[5214];
  HEAPF64[5215] = $55;
  $56 = HEAP32[(38104)>>2]|0;
  $57 = HEAP32[(38116)>>2]|0;
  $58 = ($56|0)<($57|0);
  if ($58) {
   $59 = +HEAPF64[(38216)>>3];
   $60 = HEAP32[(38124)>>2]|0;
   $61 = (+($60|0));
   $62 = $59 * $61;
   $63 = +HEAPF64[5214];
   $64 = $63 + $62;
   HEAPF64[5214] = $64;
  }
  $65 = +HEAPF64[(38184)>>3];
  $66 = +HEAPF64[5214];
  $67 = $65 * $66;
  $9 = $67;
  $68 = +HEAPF64[(38192)>>3];
  $69 = +HEAPF64[5214];
  $70 = $68 * $69;
  $12 = $70;
  $71 = +HEAPF64[(38200)>>3];
  $72 = +HEAPF64[5213];
  $73 = $71 * $72;
  $10 = $73;
  $74 = $10;
  $75 = $9;
  $76 = $75 + $74;
  $9 = $76;
  $77 = $10;
  $78 = $12;
  $79 = $78 + $77;
  $12 = $79;
  $6 = 0.0;
  $80 = HEAP32[9518]|0;
  $81 = ($80|0)!=(2);
  if ($81) {
   $82 = $9;
   $83 = (+__ZL14antiresonator2P11resonator_td((38264),$82));
   $11 = $83;
   $84 = $11;
   $85 = (+__ZL9resonatorP11resonator_td((38840),$84));
   $11 = $85;
   $86 = $11;
   $87 = (+__ZL9resonatorP11resonator_td((38776),$86));
   $11 = $87;
   $88 = $11;
   $89 = (+__ZL9resonatorP11resonator_td((38712),$88));
   $11 = $89;
   $90 = $11;
   $91 = (+__ZL9resonatorP11resonator_td((38648),$90));
   $11 = $91;
   $92 = $11;
   $93 = (+__ZL10resonator2P11resonator_td((38584),$92));
   $11 = $93;
   $94 = $11;
   $95 = (+__ZL10resonator2P11resonator_td((38520),$94));
   $11 = $95;
   $96 = $11;
   $97 = (+__ZL10resonator2P11resonator_td((38456),$96));
   $11 = $97;
   $98 = $11;
   $99 = (+__ZL10resonator2P11resonator_td((38392),$98));
   $11 = $99;
   $100 = $11;
   $101 = (+__ZL10resonator2P11resonator_td((38328),$100));
   $6 = $101;
  }
  $102 = $12;
  HEAPF64[5216] = $102;
  $103 = +HEAPF64[5216];
  $104 = (+__ZL9resonatorP11resonator_td((38968),$103));
  $105 = $6;
  $106 = $105 + $104;
  $6 = $106;
  $107 = +HEAPF64[5216];
  $108 = (+__ZL9resonatorP11resonator_td((38904),$107));
  $109 = $6;
  $110 = $109 + $108;
  $6 = $110;
  $111 = $8;
  $112 = $12;
  $113 = $111 + $112;
  $114 = +HEAPF64[5217];
  $115 = $113 - $114;
  HEAPF64[5216] = $115;
  $116 = $12;
  HEAPF64[5217] = $116;
  $13 = 12;
  while(1) {
   $117 = $13;
   $118 = ($117|0)<=(16);
   if (!($118)) {
    break;
   }
   $119 = $13;
   $120 = ((38264) + ($119<<6)|0);
   $121 = +HEAPF64[5216];
   $122 = (+__ZL9resonatorP11resonator_td($120,$121));
   $123 = $6;
   $124 = $122 - $123;
   $6 = $124;
   $125 = $13;
   $126 = (($125) + 1)|0;
   $13 = $126;
  }
  $127 = +HEAPF64[(38176)>>3];
  $128 = +HEAPF64[5216];
  $129 = $127 * $128;
  $5 = $129;
  $130 = $5;
  $131 = $6;
  $132 = $130 - $131;
  $6 = $132;
  $133 = $6;
  $134 = (+__ZL9resonatorP11resonator_td((39480),$133));
  $6 = $134;
  $135 = $6;
  $136 = HEAP32[(80916)>>2]|0;
  $137 = (+($136|0));
  $138 = $135 * $137;
  $139 = +HEAPF64[(38224)>>3];
  $140 = $138 * $139;
  $141 = (~~(($140)));
  $142 = (+($141|0));
  $3 = $142;
  $14 = 0;
  $143 = HEAP32[(80904)>>2]|0;
  $144 = HEAP32[(80892)>>2]|0;
  $145 = ($143|0)<($144|0);
  if ($145) {
   $146 = HEAP32[(80896)>>2]|0;
   $147 = ($146|0)==(0);
   $148 = HEAP32[(80904)>>2]|0;
   $149 = (($148) + 1)|0;
   if ($147) {
    $150 = HEAP32[(80888)>>2]|0;
    $151 = (($150) + ($149)|0);
    $152 = HEAP8[$151>>0]|0;
    $15 = $152;
    $153 = HEAP32[(80904)>>2]|0;
    $154 = HEAP32[(80888)>>2]|0;
    $155 = (($154) + ($153)|0);
    $156 = HEAP8[$155>>0]|0;
    $157 = $156&255;
    $158 = $15;
    $159 = $158 << 24 >> 24;
    $160 = $159<<8;
    $161 = (($157) + ($160))|0;
    $16 = $161;
    $162 = HEAP32[(80904)>>2]|0;
    $163 = (($162) + 2)|0;
    HEAP32[(80904)>>2] = $163;
   } else {
    HEAP32[(80904)>>2] = $149;
    $164 = HEAP32[(80888)>>2]|0;
    $165 = (($164) + ($148)|0);
    $166 = HEAP8[$165>>0]|0;
    $167 = $166 << 24 >> 24;
    $168 = HEAP32[(80896)>>2]|0;
    $169 = Math_imul($167, $168)|0;
    $16 = $169;
   }
   $170 = $16;
   $171 = HEAP32[(80920)>>2]|0;
   $172 = Math_imul($170, $171)|0;
   $173 = (($172|0) / 1024)&-1;
   $14 = $173;
   $174 = $14;
   $175 = HEAP32[(80900)>>2]|0;
   $176 = Math_imul($174, $175)|0;
   $177 = (($176|0) / 40)&-1;
   $14 = $177;
   $178 = $14;
   $179 = (+($178|0));
   $180 = $3;
   $181 = $180 + $179;
   $3 = $181;
  }
  $182 = HEAP32[(38256)>>2]|0;
  $183 = ($182|0)>(0);
  if ($183) {
   $184 = HEAP32[(38256)>>2]|0;
   $185 = (($184) + -1)|0;
   HEAP32[(38256)>>2] = $185;
   $186 = $3;
   $187 = HEAP32[(38256)>>2]|0;
   $188 = (+($187|0));
   $189 = $186 * $188;
   $190 = $189 / 64.0;
   $3 = $190;
  }
  $191 = $3;
  $192 = (~~(($191)));
  $193 = HEAP32[20214]|0;
  $194 = (($193) + 1)|0;
  HEAP32[20214] = $194;
  $195 = (108420 + ($193<<1)|0);
  $196 = HEAP16[$195>>1]|0;
  $197 = $196 << 16 >> 16;
  $198 = HEAP32[20215]|0;
  $199 = Math_imul($197, $198)|0;
  $200 = $199 >> 8;
  $201 = (($192) + ($200))|0;
  $4 = $201;
  $202 = HEAP32[20214]|0;
  $203 = ($202|0)>=(5500);
  if ($203) {
   HEAP32[20214] = 0;
  }
  $204 = $4;
  $205 = ($204|0)<(-32768);
  if ($205) {
   $4 = -32768;
  }
  $206 = $4;
  $207 = ($206|0)>(32767);
  if ($207) {
   $4 = 32767;
  }
  $208 = $4;
  $209 = $208&255;
  $210 = HEAP32[20232]|0;
  $211 = ((($210)) + 1|0);
  HEAP32[20232] = $211;
  HEAP8[$210>>0] = $209;
  $212 = $4;
  $213 = $212 >> 8;
  $214 = $213&255;
  $215 = HEAP32[20232]|0;
  $216 = ((($215)) + 1|0);
  HEAP32[20232] = $216;
  HEAP8[$215>>0] = $214;
  $217 = $4;
  $218 = $217&65535;
  $219 = HEAP32[20213]|0;
  $220 = (($219) + 1)|0;
  HEAP32[20213] = $220;
  $221 = (108420 + ($219<<1)|0);
  HEAP16[$221>>1] = $218;
  $222 = HEAP32[20213]|0;
  $223 = ($222|0)>=(5500);
  if ($223) {
   HEAP32[20213] = 0;
  }
  $224 = HEAP32[22146]|0;
  $225 = (($224) + 1)|0;
  HEAP32[22146] = $225;
  $226 = HEAP32[20232]|0;
  $227 = HEAP32[20234]|0;
  $228 = ($226>>>0)>=($227>>>0);
  if ($228) {
   label = 38;
   break;
  }
  $229 = HEAP32[(38108)>>2]|0;
  $230 = (($229) + 1)|0;
  HEAP32[(38108)>>2] = $230;
 }
 if ((label|0) == 38) {
  $1 = 1;
  $231 = $1;
  STACKTOP = sp;return ($231|0);
 }
 else if ((label|0) == 40) {
  $1 = 0;
  $231 = $1;
  STACKTOP = sp;return ($231|0);
 }
 return (0)|0;
}
function __ZL7flutterP13klatt_frame_t($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0.0, $11 = 0, $12 = 0.0, $13 = 0.0, $14 = 0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0, $19 = 0.0, $2 = 0.0, $20 = 0.0, $21 = 0.0, $22 = 0, $23 = 0.0, $24 = 0.0, $25 = 0.0, $26 = 0.0, $27 = 0.0;
 var $28 = 0.0, $29 = 0.0, $3 = 0.0, $30 = 0.0, $31 = 0.0, $32 = 0.0, $33 = 0.0, $34 = 0.0, $35 = 0.0, $36 = 0, $37 = 0, $38 = 0.0, $39 = 0, $4 = 0.0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $5 = 0.0, $6 = 0.0;
 var $7 = 0.0, $8 = 0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $1 = $0;
 $8 = HEAP32[(38096)>>2]|0;
 $9 = (+($8|0));
 $10 = $9 / 50.0;
 $3 = $10;
 $11 = HEAP32[(38252)>>2]|0;
 $12 = (+($11|0));
 $13 = $12 / 100.0;
 $4 = $13;
 $14 = HEAP32[22232]|0;
 $15 = (+($14|0));
 $16 = 39.898227289999994 * $15;
 $17 = (+Math_sin((+$16)));
 $5 = $17;
 $18 = HEAP32[22232]|0;
 $19 = (+($18|0));
 $20 = 22.305308169999996 * $19;
 $21 = (+Math_sin((+$20)));
 $6 = $21;
 $22 = HEAP32[22232]|0;
 $23 = (+($22|0));
 $24 = 14.76548569 * $23;
 $25 = (+Math_sin((+$24)));
 $7 = $25;
 $26 = $3;
 $27 = $4;
 $28 = $26 * $27;
 $29 = $5;
 $30 = $6;
 $31 = $29 + $30;
 $32 = $7;
 $33 = $31 + $32;
 $34 = $28 * $33;
 $35 = $34 * 10.0;
 $2 = $35;
 $36 = $1;
 $37 = HEAP32[$36>>2]|0;
 $38 = $2;
 $39 = (~~(($38)));
 $40 = (($37) + ($39))|0;
 $41 = $1;
 HEAP32[$41>>2] = $40;
 $42 = HEAP32[22232]|0;
 $43 = (($42) + 1)|0;
 HEAP32[22232] = $43;
 STACKTOP = sp;return;
}
function __ZL9gen_noised($0) {
 $0 = +$0;
 var $1 = 0.0, $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0.0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $3 = (_rand()|0);
 $4 = (($3|0) % 16383)&-1;
 $5 = (($4) + -8191)|0;
 $2 = $5;
 $6 = $2;
 HEAP32[(38124)>>2] = $6;
 $7 = HEAP32[(38124)>>2]|0;
 $8 = (+($7|0));
 $9 = +HEAPF64[5220];
 $10 = 0.75 * $9;
 $11 = $8 + $10;
 $1 = $11;
 $12 = $1;
 HEAPF64[5220] = $12;
 $13 = $1;
 STACKTOP = sp;return (+$13);
}
function __ZL16impulsive_sourcev() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0.0, $5 = 0.0, $6 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[(38104)>>2]|0;
 $1 = ($0|0)<(3);
 if ($1) {
  $2 = HEAP32[(38104)>>2]|0;
  $3 = (16 + ($2<<3)|0);
  $4 = +HEAPF64[$3>>3];
  HEAPF64[5219] = $4;
 } else {
  HEAPF64[5219] = 0.0;
 }
 $5 = +HEAPF64[5219];
 $6 = (+__ZL9resonatorP11resonator_td((39352),$5));
 return (+$6);
}
function __ZL14natural_sourcev() {
 var $0 = 0.0, $1 = 0.0, $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $2 = 0, $3 = 0, $4 = 0, $5 = 0.0, $6 = 0.0, $7 = 0.0, $8 = 0.0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = HEAP32[(38104)>>2]|0;
 $3 = HEAP32[(38116)>>2]|0;
 $4 = ($2|0)<($3|0);
 if ($4) {
  $5 = +HEAPF64[(38136)>>3];
  $6 = +HEAPF64[(38128)>>3];
  $7 = $6 - $5;
  HEAPF64[(38128)>>3] = $7;
  $8 = +HEAPF64[(38128)>>3];
  $9 = +HEAPF64[5218];
  $10 = $9 + $8;
  HEAPF64[5218] = $10;
  $11 = +HEAPF64[5218];
  $12 = $11 * 0.028000000000000001;
  $1 = $12;
  $13 = $1;
  $0 = $13;
  $14 = $0;
  STACKTOP = sp;return (+$14);
 } else {
  HEAPF64[5218] = 0.0;
  $0 = 0.0;
  $14 = $0;
  STACKTOP = sp;return (+$14);
 }
 return +(0.0);
}
function __ZL14sampled_sourcei($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0.0, $16 = 0.0, $17 = 0, $18 = 0.0, $19 = 0.0, $2 = 0, $20 = 0.0, $21 = 0, $22 = 0.0, $23 = 0.0, $24 = 0.0, $25 = 0, $26 = 0.0, $27 = 0;
 var $28 = 0.0, $29 = 0.0, $3 = 0.0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0.0, $40 = 0, $41 = 0, $42 = 0.0, $43 = 0, $44 = 0.0, $45 = 0.0;
 var $46 = 0.0, $47 = 0.0, $48 = 0.0, $49 = 0, $5 = 0.0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0.0, $55 = 0.0, $56 = 0.0, $57 = 0.0, $58 = 0.0, $59 = 0.0, $6 = 0, $60 = 0.0, $7 = 0, $8 = 0.0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $1 = $0;
 $10 = $1;
 $11 = ($10|0)==(0);
 if ($11) {
  $9 = 15372;
  HEAP32[(38232)>>2] = 100;
 } else {
  $9 = 15572;
  HEAP32[(38232)>>2] = 256;
 }
 $12 = HEAP32[(38112)>>2]|0;
 $13 = ($12|0)!=(0);
 if ($13) {
  $14 = HEAP32[(38104)>>2]|0;
  $15 = (+($14|0));
  $3 = $15;
  $16 = $3;
  $17 = HEAP32[(38112)>>2]|0;
  $18 = (+($17|0));
  $19 = $16 / $18;
  $3 = $19;
  $20 = $3;
  $21 = HEAP32[(38232)>>2]|0;
  $22 = (+($21|0));
  $23 = $20 * $22;
  $3 = $23;
  $24 = $3;
  $25 = (~~(($24)));
  $2 = $25;
  $26 = $3;
  $27 = $2;
  $28 = (+($27|0));
  $29 = $26 - $28;
  $8 = $29;
  $30 = $2;
  $31 = $9;
  $32 = (($31) + ($30<<1)|0);
  $33 = HEAP16[$32>>1]|0;
  $34 = $33 << 16 >> 16;
  $6 = $34;
  $35 = $2;
  $36 = (($35) + 1)|0;
  $37 = $9;
  $38 = (($37) + ($36<<1)|0);
  $39 = HEAP16[$38>>1]|0;
  $40 = $39 << 16 >> 16;
  $7 = $40;
  $41 = $7;
  $42 = (+($41|0));
  $43 = $6;
  $44 = (+($43|0));
  $45 = $42 - $44;
  $5 = $45;
  $46 = $5;
  $47 = $8;
  $48 = $46 * $47;
  $5 = $48;
  $49 = $2;
  $50 = $9;
  $51 = (($50) + ($49<<1)|0);
  $52 = HEAP16[$51>>1]|0;
  $53 = $52 << 16 >> 16;
  $54 = (+($53|0));
  $55 = $5;
  $56 = $54 + $55;
  $4 = $56;
  $57 = $4;
  $58 = +HEAPF64[(38240)>>3];
  $59 = $57 * $58;
  $4 = $59;
  $60 = $4;
  STACKTOP = sp;return (+$60);
 } else {
  $4 = 0.0;
  $60 = $4;
  STACKTOP = sp;return (+$60);
 }
 return +(0.0);
}
function __ZL21pitch_synch_par_resetP13klatt_frame_t($0) {
 $0 = $0|0;
 var $$ = 0, $1 = 0, $10 = 0, $100 = 0.0, $101 = 0.0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0.0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0.0, $27 = 0.0, $28 = 0, $29 = 0, $3 = 0.0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0.0, $49 = 0.0, $5 = 0, $50 = 0, $51 = 0.0, $52 = 0.0, $53 = 0.0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0.0, $6 = 0, $60 = 0.0;
 var $61 = 0.0, $62 = 0.0, $63 = 0.0, $64 = 0.0, $65 = 0.0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0.0, $97 = 0.0;
 var $98 = 0.0, $99 = 0, $or$cond = 0, $or$cond3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $4 = $1;
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)>(0);
 if ($6) {
  $7 = HEAP32[(38080)>>2]|0;
  $8 = ($7*40)|0;
  $9 = $1;
  $10 = HEAP32[$9>>2]|0;
  $11 = (($8|0) / ($10|0))&-1;
  HEAP32[(38112)>>2] = $11;
  $12 = $1;
  $13 = ((($12)) + 204|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = (+__ZL7DBtoLINl($14));
  HEAPF64[(38184)>>3] = $15;
  $16 = HEAP32[(38112)>>2]|0;
  HEAP32[(38120)>>2] = $16;
  $17 = $1;
  $18 = ((($17)) + 204|0);
  $19 = HEAP32[$18>>2]|0;
  $20 = ($19|0)>(0);
  if ($20) {
   $21 = HEAP32[(38120)>>2]|0;
   $22 = $21 >> 1;
   HEAP32[(38120)>>2] = $22;
  }
  $23 = $1;
  $24 = ((($23)) + 176|0);
  $25 = HEAP32[$24>>2]|0;
  $26 = (+__ZL7DBtoLINl($25));
  $27 = $26 * 0.10000000000000001;
  HEAPF64[(38216)>>3] = $27;
  $28 = $1;
  $29 = ((($28)) + 172|0);
  $30 = HEAP32[$29>>2]|0;
  $31 = $30<<2;
  HEAP32[(38116)>>2] = $31;
  $32 = HEAP32[(38092)>>2]|0;
  $33 = ($32|0)==(1);
  $34 = HEAP32[(38116)>>2]|0;
  $35 = ($34|0)>(263);
  $or$cond = $33 & $35;
  $$ = $or$cond ? 263 : $31;
  HEAP32[(38116)>>2] = $$;
  $36 = HEAP32[(38116)>>2]|0;
  $37 = HEAP32[(38112)>>2]|0;
  $38 = (($37) - 1)|0;
  $39 = ($36|0)>=($38|0);
  if ($39) {
   $40 = HEAP32[(38112)>>2]|0;
   $41 = (($40) - 2)|0;
   HEAP32[(38116)>>2] = $41;
  }
  $42 = HEAP32[(38116)>>2]|0;
  $43 = ($42|0)<(40);
  if ($43) {
   HEAP32[(38116)>>2] = 40;
  }
  $44 = HEAP32[(38116)>>2]|0;
  $45 = (($44) - 40)|0;
  $46 = (14748 + ($45<<1)|0);
  $47 = HEAP16[$46>>1]|0;
  $48 = (+($47<<16>>16));
  HEAPF64[(38136)>>3] = $48;
  $49 = +HEAPF64[(38136)>>3];
  $50 = HEAP32[(38116)>>2]|0;
  $51 = (+($50|0));
  $52 = $49 * $51;
  $53 = $52 * 0.33300000000000002;
  HEAPF64[(38128)>>3] = $53;
  $54 = HEAP32[(38080)>>2]|0;
  $55 = HEAP32[(38116)>>2]|0;
  $56 = (($54|0) / ($55|0))&-1;
  $2 = $56;
  $57 = $2;
  __ZL6setabcllP11resonator_t(0,$57,(39352));
  $58 = HEAP32[(38116)>>2]|0;
  $59 = (+($58|0));
  $60 = $59 * 0.0083300000000000006;
  $3 = $60;
  $61 = $3;
  $62 = $3;
  $63 = $61 * $62;
  $64 = +HEAPF64[(39352)>>3];
  $65 = $64 * $63;
  HEAPF64[(39352)>>3] = $65;
  $66 = HEAP32[(38112)>>2]|0;
  $67 = HEAP32[(38116)>>2]|0;
  $68 = (($66) - ($67))|0;
  $2 = $68;
  $69 = $1;
  $70 = ((($69)) + 188|0);
  $71 = HEAP32[$70>>2]|0;
  $72 = $2;
  $73 = ($71|0)>($72|0);
  if ($73) {
   $74 = $2;
   $75 = $1;
   $76 = ((($75)) + 188|0);
   HEAP32[$76>>2] = $74;
  }
  $77 = HEAP32[22231]|0;
  $78 = ($77|0)>=(0);
  $79 = $1;
  $80 = ((($79)) + 188|0);
  $81 = HEAP32[$80>>2]|0;
  if ($78) {
   HEAP32[22231] = $81;
  } else {
   $82 = (0 - ($81))|0;
   HEAP32[22231] = $82;
  }
  $83 = HEAP32[(38112)>>2]|0;
  $84 = HEAP32[22231]|0;
  $85 = (($83) + ($84))|0;
  HEAP32[(38112)>>2] = $85;
  $86 = HEAP32[22231]|0;
  $87 = (0 - ($86))|0;
  HEAP32[22231] = $87;
 } else {
  HEAP32[(38112)>>2] = 4;
  HEAPF64[(38184)>>3] = 0.0;
  $88 = HEAP32[(38112)>>2]|0;
  HEAP32[(38120)>>2] = $88;
  HEAPF64[(38216)>>3] = 0.0;
  HEAPF64[(38128)>>3] = 0.0;
  HEAPF64[(38136)>>3] = 0.0;
 }
 $89 = HEAP32[(38112)>>2]|0;
 $90 = ($89|0)!=(4);
 $91 = HEAP32[(38108)>>2]|0;
 $92 = ($91|0)==(0);
 $or$cond3 = $90 | $92;
 if (!($or$cond3)) {
  STACKTOP = sp;return;
 }
 $93 = $1;
 $94 = ((($93)) + 180|0);
 $95 = HEAP32[$94>>2]|0;
 $96 = (+($95|0));
 $97 = 0.033000000000000002 * $96;
 HEAPF64[(38168)>>3] = $97;
 $98 = +HEAPF64[(38168)>>3];
 $99 = $98 > 0.0;
 if ($99) {
  $100 = +HEAPF64[(38168)>>3];
  $101 = 1.0 - $100;
  HEAPF64[(38160)>>3] = $101;
  STACKTOP = sp;return;
 } else {
  HEAPF64[(38160)>>3] = 1.0;
  STACKTOP = sp;return;
 }
}
function __ZL9resonatorP11resonator_td($0,$1) {
 $0 = $0|0;
 $1 = +$1;
 var $10 = 0, $11 = 0.0, $12 = 0, $13 = 0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0, $18 = 0, $19 = 0.0, $2 = 0, $20 = 0, $21 = 0, $22 = 0.0, $23 = 0.0, $24 = 0.0, $25 = 0, $26 = 0, $27 = 0.0, $28 = 0;
 var $29 = 0, $3 = 0.0, $30 = 0.0, $31 = 0, $32 = 0, $33 = 0.0, $4 = 0.0, $5 = 0, $6 = 0.0, $7 = 0.0, $8 = 0.0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $2 = $0;
 $3 = $1;
 $5 = $2;
 $6 = +HEAPF64[$5>>3];
 $7 = $3;
 $8 = $6 * $7;
 $9 = $2;
 $10 = ((($9)) + 8|0);
 $11 = +HEAPF64[$10>>3];
 $12 = $2;
 $13 = ((($12)) + 24|0);
 $14 = +HEAPF64[$13>>3];
 $15 = $11 * $14;
 $16 = $8 + $15;
 $17 = $2;
 $18 = ((($17)) + 16|0);
 $19 = +HEAPF64[$18>>3];
 $20 = $2;
 $21 = ((($20)) + 32|0);
 $22 = +HEAPF64[$21>>3];
 $23 = $19 * $22;
 $24 = $16 + $23;
 $4 = $24;
 $25 = $2;
 $26 = ((($25)) + 24|0);
 $27 = +HEAPF64[$26>>3];
 $28 = $2;
 $29 = ((($28)) + 32|0);
 HEAPF64[$29>>3] = $27;
 $30 = $4;
 $31 = $2;
 $32 = ((($31)) + 24|0);
 HEAPF64[$32>>3] = $30;
 $33 = $4;
 STACKTOP = sp;return (+$33);
}
function __ZL14antiresonator2P11resonator_td($0,$1) {
 $0 = $0|0;
 $1 = +$1;
 var $10 = 0, $11 = 0.0, $12 = 0, $13 = 0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0, $18 = 0, $19 = 0.0, $2 = 0, $20 = 0, $21 = 0, $22 = 0.0, $23 = 0.0, $24 = 0.0, $25 = 0, $26 = 0, $27 = 0.0, $28 = 0;
 var $29 = 0, $3 = 0.0, $30 = 0.0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0.0, $36 = 0, $37 = 0.0, $38 = 0.0, $39 = 0, $4 = 0.0, $40 = 0, $41 = 0.0, $42 = 0, $43 = 0, $44 = 0.0, $45 = 0.0, $46 = 0;
 var $47 = 0, $48 = 0.0, $49 = 0, $5 = 0, $50 = 0, $51 = 0.0, $52 = 0.0, $53 = 0.0, $6 = 0.0, $7 = 0.0, $8 = 0.0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $2 = $0;
 $3 = $1;
 $5 = $2;
 $6 = +HEAPF64[$5>>3];
 $7 = $3;
 $8 = $6 * $7;
 $9 = $2;
 $10 = ((($9)) + 8|0);
 $11 = +HEAPF64[$10>>3];
 $12 = $2;
 $13 = ((($12)) + 24|0);
 $14 = +HEAPF64[$13>>3];
 $15 = $11 * $14;
 $16 = $8 + $15;
 $17 = $2;
 $18 = ((($17)) + 16|0);
 $19 = +HEAPF64[$18>>3];
 $20 = $2;
 $21 = ((($20)) + 32|0);
 $22 = +HEAPF64[$21>>3];
 $23 = $19 * $22;
 $24 = $16 + $23;
 $4 = $24;
 $25 = $2;
 $26 = ((($25)) + 24|0);
 $27 = +HEAPF64[$26>>3];
 $28 = $2;
 $29 = ((($28)) + 32|0);
 HEAPF64[$29>>3] = $27;
 $30 = $3;
 $31 = $2;
 $32 = ((($31)) + 24|0);
 HEAPF64[$32>>3] = $30;
 $33 = $2;
 $34 = ((($33)) + 40|0);
 $35 = +HEAPF64[$34>>3];
 $36 = $2;
 $37 = +HEAPF64[$36>>3];
 $38 = $37 + $35;
 HEAPF64[$36>>3] = $38;
 $39 = $2;
 $40 = ((($39)) + 48|0);
 $41 = +HEAPF64[$40>>3];
 $42 = $2;
 $43 = ((($42)) + 8|0);
 $44 = +HEAPF64[$43>>3];
 $45 = $44 + $41;
 HEAPF64[$43>>3] = $45;
 $46 = $2;
 $47 = ((($46)) + 56|0);
 $48 = +HEAPF64[$47>>3];
 $49 = $2;
 $50 = ((($49)) + 16|0);
 $51 = +HEAPF64[$50>>3];
 $52 = $51 + $48;
 HEAPF64[$50>>3] = $52;
 $53 = $4;
 STACKTOP = sp;return (+$53);
}
function __ZL10resonator2P11resonator_td($0,$1) {
 $0 = $0|0;
 $1 = +$1;
 var $10 = 0, $11 = 0.0, $12 = 0, $13 = 0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0, $18 = 0, $19 = 0.0, $2 = 0, $20 = 0, $21 = 0, $22 = 0.0, $23 = 0.0, $24 = 0.0, $25 = 0, $26 = 0, $27 = 0.0, $28 = 0;
 var $29 = 0, $3 = 0.0, $30 = 0.0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0.0, $36 = 0, $37 = 0.0, $38 = 0.0, $39 = 0, $4 = 0.0, $40 = 0, $41 = 0.0, $42 = 0, $43 = 0, $44 = 0.0, $45 = 0.0, $46 = 0;
 var $47 = 0, $48 = 0.0, $49 = 0, $5 = 0, $50 = 0, $51 = 0.0, $52 = 0.0, $53 = 0.0, $6 = 0.0, $7 = 0.0, $8 = 0.0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $2 = $0;
 $3 = $1;
 $5 = $2;
 $6 = +HEAPF64[$5>>3];
 $7 = $3;
 $8 = $6 * $7;
 $9 = $2;
 $10 = ((($9)) + 8|0);
 $11 = +HEAPF64[$10>>3];
 $12 = $2;
 $13 = ((($12)) + 24|0);
 $14 = +HEAPF64[$13>>3];
 $15 = $11 * $14;
 $16 = $8 + $15;
 $17 = $2;
 $18 = ((($17)) + 16|0);
 $19 = +HEAPF64[$18>>3];
 $20 = $2;
 $21 = ((($20)) + 32|0);
 $22 = +HEAPF64[$21>>3];
 $23 = $19 * $22;
 $24 = $16 + $23;
 $4 = $24;
 $25 = $2;
 $26 = ((($25)) + 24|0);
 $27 = +HEAPF64[$26>>3];
 $28 = $2;
 $29 = ((($28)) + 32|0);
 HEAPF64[$29>>3] = $27;
 $30 = $4;
 $31 = $2;
 $32 = ((($31)) + 24|0);
 HEAPF64[$32>>3] = $30;
 $33 = $2;
 $34 = ((($33)) + 40|0);
 $35 = +HEAPF64[$34>>3];
 $36 = $2;
 $37 = +HEAPF64[$36>>3];
 $38 = $37 + $35;
 HEAPF64[$36>>3] = $38;
 $39 = $2;
 $40 = ((($39)) + 48|0);
 $41 = +HEAPF64[$40>>3];
 $42 = $2;
 $43 = ((($42)) + 8|0);
 $44 = +HEAPF64[$43>>3];
 $45 = $44 + $41;
 HEAPF64[$43>>3] = $45;
 $46 = $2;
 $47 = ((($46)) + 56|0);
 $48 = +HEAPF64[$47>>3];
 $49 = $2;
 $50 = ((($49)) + 16|0);
 $51 = +HEAPF64[$50>>3];
 $52 = $51 + $48;
 HEAPF64[$50>>3] = $52;
 $53 = $4;
 STACKTOP = sp;return (+$53);
}
function __ZL7DBtoLINl($0) {
 $0 = $0|0;
 var $1 = 0.0, $10 = 0.0, $11 = 0.0, $12 = 0.0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $2;
 $4 = ($3|0)<(0);
 $5 = $2;
 $6 = ($5|0)>(87);
 $or$cond = $4 | $6;
 if ($or$cond) {
  $1 = 0.0;
  $12 = $1;
  STACKTOP = sp;return (+$12);
 } else {
  $7 = $2;
  $8 = (15196 + ($7<<1)|0);
  $9 = HEAP16[$8>>1]|0;
  $10 = (+($9<<16>>16));
  $11 = $10 * 0.001;
  $1 = $11;
  $12 = $1;
  STACKTOP = sp;return (+$12);
 }
 return +(0.0);
}
function __ZL10setzeroabcllP11resonator_t($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0.0, $11 = 0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $20 = 0, $21 = 0, $22 = 0.0, $23 = 0, $24 = 0.0, $25 = 0.0, $26 = 0.0, $27 = 0.0, $28 = 0.0, $29 = 0.0;
 var $3 = 0, $30 = 0.0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0.0, $36 = 0.0, $37 = 0, $38 = 0, $39 = 0.0, $4 = 0, $40 = 0.0, $41 = 0, $42 = 0, $43 = 0.0, $44 = 0, $45 = 0, $46 = 0.0, $47 = 0.0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0.0, $51 = 0.0, $52 = 0, $53 = 0, $54 = 0.0, $55 = 0.0, $56 = 0, $57 = 0.0, $58 = 0.0, $59 = 0, $6 = 0.0, $60 = 0, $61 = 0.0, $62 = 0.0, $7 = 0.0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $8 = $3;
 $9 = (0 - ($8))|0;
 $3 = $9;
 $10 = +HEAPF64[(38144)>>3];
 $11 = $4;
 $12 = (+($11|0));
 $13 = $10 * $12;
 $7 = $13;
 $14 = $7;
 $15 = (+Math_exp((+$14)));
 $6 = $15;
 $16 = $6;
 $17 = $6;
 $18 = $16 * $17;
 $19 = -$18;
 $20 = $5;
 $21 = ((($20)) + 16|0);
 HEAPF64[$21>>3] = $19;
 $22 = +HEAPF64[(38152)>>3];
 $23 = $3;
 $24 = (+($23|0));
 $25 = $22 * $24;
 $7 = $25;
 $26 = $6;
 $27 = $7;
 $28 = (+Math_cos((+$27)));
 $29 = $26 * $28;
 $30 = $29 * 2.0;
 $31 = $5;
 $32 = ((($31)) + 8|0);
 HEAPF64[$32>>3] = $30;
 $33 = $5;
 $34 = ((($33)) + 8|0);
 $35 = +HEAPF64[$34>>3];
 $36 = 1.0 - $35;
 $37 = $5;
 $38 = ((($37)) + 16|0);
 $39 = +HEAPF64[$38>>3];
 $40 = $36 - $39;
 $41 = $5;
 HEAPF64[$41>>3] = $40;
 $42 = $5;
 $43 = +HEAPF64[$42>>3];
 $44 = $43 != 0.0;
 if (!($44)) {
  STACKTOP = sp;return;
 }
 $45 = $5;
 $46 = +HEAPF64[$45>>3];
 $47 = 1.0 / $46;
 $48 = $5;
 HEAPF64[$48>>3] = $47;
 $49 = $5;
 $50 = +HEAPF64[$49>>3];
 $51 = -$50;
 $52 = $5;
 $53 = ((($52)) + 16|0);
 $54 = +HEAPF64[$53>>3];
 $55 = $54 * $51;
 HEAPF64[$53>>3] = $55;
 $56 = $5;
 $57 = +HEAPF64[$56>>3];
 $58 = -$57;
 $59 = $5;
 $60 = ((($59)) + 8|0);
 $61 = +HEAPF64[$60>>3];
 $62 = $61 * $58;
 HEAPF64[$60>>3] = $62;
 STACKTOP = sp;return;
}
function __Z14SetSynth_KlattiiP7frame_tS0_P7voice_ti($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$ = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0;
 var $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0.0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0.0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0;
 var $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0.0, $14 = 0, $140 = 0, $141 = 0.0, $142 = 0.0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0;
 var $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0.0, $164 = 0.0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0;
 var $171 = 0.0, $172 = 0.0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0.0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0;
 var $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0.0, $197 = 0.0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0.0, $205 = 0.0, $206 = 0.0, $207 = 0;
 var $208 = 0, $209 = 0, $21 = 0, $210 = 0.0, $211 = 0.0, $212 = 0.0, $213 = 0, $214 = 0.0, $215 = 0.0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0;
 var $226 = 0, $227 = 0, $228 = 0.0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0.0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0;
 var $244 = 0, $245 = 0, $246 = 0, $247 = 0.0, $248 = 0.0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0.0, $253 = 0.0, $254 = 0.0, $255 = 0, $256 = 0.0, $257 = 0.0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0;
 var $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0.0, $27 = 0, $270 = 0.0, $271 = 0, $272 = 0, $273 = 0.0, $274 = 0.0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0;
 var $280 = 0, $281 = 0, $282 = 0.0, $283 = 0.0, $284 = 0, $285 = 0, $286 = 0.0, $287 = 0.0, $288 = 0.0, $289 = 0.0, $29 = 0, $290 = 0.0, $291 = 0, $292 = 0.0, $293 = 0.0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0;
 var $299 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0.0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0.0, $316 = 0;
 var $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0.0, $328 = 0.0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0.0, $333 = 0.0, $334 = 0.0;
 var $335 = 0, $336 = 0.0, $337 = 0.0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0.0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0;
 var $353 = 0.0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0.0, $364 = 0.0, $365 = 0, $366 = 0, $367 = 0, $368 = 0.0, $369 = 0.0, $37 = 0, $370 = 0.0;
 var $371 = 0, $372 = 0.0, $373 = 0.0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0;
 var $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0;
 var $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $6 = $0;
 $7 = $1;
 $8 = $2;
 $9 = $3;
 $10 = $4;
 $11 = $5;
 $17 = HEAP32[20194]|0;
 $18 = ($17|0)!=(0|0);
 if ($18) {
  $19 = HEAP32[20194]|0;
  $20 = ((($19)) + 132|0);
  $21 = HEAP32[$20>>2]|0;
  $22 = ($21|0)>(0);
  if ($22) {
   $23 = HEAP32[20194]|0;
   $24 = ((($23)) + 132|0);
   $25 = HEAP32[$24>>2]|0;
   $26 = ($25|0)<=(4);
   if ($26) {
    $27 = HEAP32[20194]|0;
    $28 = ((($27)) + 132|0);
    $29 = HEAP32[$28>>2]|0;
    HEAP32[(38092)>>2] = $29;
    $30 = HEAP32[(38092)>>2]|0;
    $31 = (5160 + ($30<<2)|0);
    $32 = HEAP32[$31>>2]|0;
    HEAP32[(38260)>>2] = $32;
   }
  }
  $33 = HEAP32[20194]|0;
  $34 = ((($33)) + 88|0);
  $35 = HEAP32[$34>>2]|0;
  $36 = (($35|0) / 32)&-1;
  HEAP32[(38096)>>2] = $36;
 }
 HEAP32[22230] = 0;
 $37 = $11;
 $38 = $37 & 2;
 $39 = ($38|0)!=(0);
 $$ = $39 ? 1 : 0;
 HEAP32[22230] = $$;
 $40 = $11;
 $41 = $40 & 1;
 $42 = ($41|0)!=(0);
 L8: do {
  if ($42) {
   HEAP32[22230] = 1;
   $43 = HEAP32[20916]|0;
   $44 = (($43) + 1)|0;
   $14 = $44;
   while(1) {
    $45 = $14;
    $46 = ($45|0)>=(170);
    if ($46) {
     $14 = 0;
    }
    $47 = $14;
    $48 = HEAP32[20917]|0;
    $49 = ($47|0)==($48|0);
    if ($49) {
     break L8;
    }
    $50 = $14;
    $51 = (80944 + ($50<<4)|0);
    $52 = HEAP32[$51>>2]|0;
    $15 = $52;
    $53 = $15;
    $54 = ($53|0)==(1);
    if ($54) {
     break;
    }
    $77 = $15;
    $78 = ($77|0)==(6);
    $79 = $15;
    $80 = ($79|0)==(5);
    $or$cond = $78 | $80;
    if ($or$cond) {
     break L8;
    }
    $81 = $14;
    $82 = (($81) + 1)|0;
    $14 = $82;
   }
   HEAP32[22230] = 0;
   $55 = $14;
   $56 = (80944 + ($55<<4)|0);
   $57 = ((($56)) + 8|0);
   $58 = HEAP32[$57>>2]|0;
   $59 = $58;
   $16 = $59;
   $12 = 1;
   while(1) {
    $60 = $12;
    $61 = ($60|0)<(6);
    if (!($61)) {
     break L8;
    }
    $62 = $12;
    $63 = $16;
    $64 = ((($63)) + 2|0);
    $65 = (($64) + ($62<<1)|0);
    $66 = HEAP16[$65>>1]|0;
    $67 = $66 << 16 >> 16;
    $68 = $12;
    $69 = $9;
    $70 = ((($69)) + 2|0);
    $71 = (($70) + ($68<<1)|0);
    $72 = HEAP16[$71>>1]|0;
    $73 = $72 << 16 >> 16;
    $74 = ($67|0)!=($73|0);
    if ($74) {
     break;
    }
    $75 = $12;
    $76 = (($75) + 1)|0;
    $12 = $76;
   }
   HEAP32[22230] = 2;
  }
 } while(0);
 $83 = $11;
 $84 = $83 & 1;
 $85 = ($84|0)!=(0);
 if ($85) {
  $12 = 1;
  while(1) {
   $86 = $12;
   $87 = ($86|0)<(6);
   if (!($87)) {
    break;
   }
   $88 = $12;
   $89 = ((119422) + ($88<<1)|0);
   $90 = HEAP16[$89>>1]|0;
   $91 = $90 << 16 >> 16;
   $92 = $12;
   $93 = $8;
   $94 = ((($93)) + 2|0);
   $95 = (($94) + ($92<<1)|0);
   $96 = HEAP16[$95>>1]|0;
   $97 = $96 << 16 >> 16;
   $98 = ($91|0)!=($97|0);
   if ($98) {
    label = 23;
    break;
   }
   $99 = $12;
   $100 = (($99) + 1)|0;
   $12 = $100;
  }
  if ((label|0) == 23) {
   __Z10KlattReseti(0);
  }
  $101 = $9;
  dest=119420; src=$101; stop=dest+64|0; do { HEAP16[dest>>1]=HEAP16[src>>1]|0; dest=dest+2|0; src=src+2|0; } while ((dest|0) < (stop|0));
 }
 $12 = 0;
 while(1) {
  $102 = $12;
  $103 = ($102|0)<(10);
  if (!($103)) {
   break;
  }
  $104 = $12;
  $105 = ($104|0)>=(5);
  if ($105) {
   $106 = $8;
   $107 = HEAP16[$106>>1]|0;
   $108 = $107 << 16 >> 16;
   $109 = $108 & 1;
   $110 = ($109|0)==(0);
   if ($110) {
    $111 = $12;
    $112 = (88880 + ($111<<2)|0);
    HEAP32[$112>>2] = 0;
    $113 = $12;
    $114 = (41624 + ($113<<3)|0);
    HEAPF64[$114>>3] = 0.0;
    $115 = $12;
    $116 = (41544 + ($115<<3)|0);
    HEAPF64[$116>>3] = 0.0;
   } else {
    label = 31;
   }
  } else {
   label = 31;
  }
  if ((label|0) == 31) {
   label = 0;
   $117 = $12;
   $118 = $8;
   $119 = ((($118)) + 39|0);
   $120 = (($119) + ($117)|0);
   $121 = HEAP8[$120>>0]|0;
   $122 = $121&255;
   $123 = $12;
   $124 = (88880 + ($123<<2)|0);
   HEAP32[$124>>2] = $122;
   $125 = (+($122|0));
   $126 = $12;
   $127 = (41624 + ($126<<3)|0);
   HEAPF64[$127>>3] = $125;
   $128 = $12;
   $129 = $9;
   $130 = ((($129)) + 39|0);
   $131 = (($130) + ($128)|0);
   $132 = HEAP8[$131>>0]|0;
   $133 = $132&255;
   $134 = $12;
   $135 = (88880 + ($134<<2)|0);
   $136 = HEAP32[$135>>2]|0;
   $137 = (($133) - ($136))|0;
   $138 = $137<<6;
   $139 = (+($138|0));
   $140 = $6;
   $141 = (+($140|0));
   $142 = $139 / $141;
   $143 = $12;
   $144 = (41544 + ($143<<3)|0);
   HEAPF64[$144>>3] = $142;
  }
  $145 = $12;
  $146 = (($145) + 1)|0;
  $12 = $146;
 }
 $147 = $6;
 HEAP32[22147] = $147;
 $12 = 1;
 while(1) {
  $148 = $12;
  $149 = ($148|0)<(6);
  if (!($149)) {
   break;
  }
  $150 = $12;
  $151 = $8;
  $152 = ((($151)) + 2|0);
  $153 = (($152) + ($150<<1)|0);
  $154 = HEAP16[$153>>1]|0;
  $155 = $154 << 16 >> 16;
  $156 = $12;
  $157 = $10;
  $158 = ((($157)) + 164|0);
  $159 = (($158) + ($156<<1)|0);
  $160 = HEAP16[$159>>1]|0;
  $161 = $160 << 16 >> 16;
  $162 = Math_imul($155, $161)|0;
  $163 = (+($162|0));
  $164 = $163 / 256.0;
  $165 = $12;
  $166 = $10;
  $167 = ((($166)) + 218|0);
  $168 = (($167) + ($165<<1)|0);
  $169 = HEAP16[$168>>1]|0;
  $170 = $169 << 16 >> 16;
  $171 = (+($170|0));
  $172 = $164 + $171;
  $173 = $12;
  $174 = (40824 + (($173*80)|0)|0);
  $175 = ((($174)) + 16|0);
  HEAPF64[$175>>3] = $172;
  $176 = $12;
  $177 = (40824 + (($176*80)|0)|0);
  $178 = ((($177)) + 16|0);
  $179 = +HEAPF64[$178>>3];
  $180 = (~~(($179)));
  $181 = $12;
  $182 = (40824 + (($181*80)|0)|0);
  HEAP32[$182>>2] = $180;
  $183 = $12;
  $184 = $9;
  $185 = ((($184)) + 2|0);
  $186 = (($185) + ($183<<1)|0);
  $187 = HEAP16[$186>>1]|0;
  $188 = $187 << 16 >> 16;
  $189 = $12;
  $190 = $10;
  $191 = ((($190)) + 164|0);
  $192 = (($191) + ($189<<1)|0);
  $193 = HEAP16[$192>>1]|0;
  $194 = $193 << 16 >> 16;
  $195 = Math_imul($188, $194)|0;
  $196 = (+($195|0));
  $197 = $196 / 256.0;
  $198 = $12;
  $199 = $10;
  $200 = ((($199)) + 218|0);
  $201 = (($200) + ($198<<1)|0);
  $202 = HEAP16[$201>>1]|0;
  $203 = $202 << 16 >> 16;
  $204 = (+($203|0));
  $205 = $197 + $204;
  $13 = $205;
  $206 = $13;
  $207 = $12;
  $208 = (40824 + (($207*80)|0)|0);
  $209 = ((($208)) + 16|0);
  $210 = +HEAPF64[$209>>3];
  $211 = $206 - $210;
  $212 = $211 * 64.0;
  $213 = $6;
  $214 = (+($213|0));
  $215 = $212 / $214;
  $216 = $12;
  $217 = (40824 + (($216*80)|0)|0);
  $218 = ((($217)) + 48|0);
  HEAPF64[$218>>3] = $215;
  $219 = $12;
  $220 = ($219|0)<(4);
  if ($220) {
   $221 = $12;
   $222 = $8;
   $223 = ((($222)) + 35|0);
   $224 = (($223) + ($221)|0);
   $225 = HEAP8[$224>>0]|0;
   $226 = $225&255;
   $227 = $226<<1;
   $228 = (+($227|0));
   $229 = $12;
   $230 = (40824 + (($229*80)|0)|0);
   $231 = ((($230)) + 24|0);
   HEAPF64[$231>>3] = $228;
   $232 = $12;
   $233 = (40824 + (($232*80)|0)|0);
   $234 = ((($233)) + 24|0);
   $235 = +HEAPF64[$234>>3];
   $236 = (~~(($235)));
   $237 = $12;
   $238 = (40824 + (($237*80)|0)|0);
   $239 = ((($238)) + 4|0);
   HEAP32[$239>>2] = $236;
   $240 = $12;
   $241 = $9;
   $242 = ((($241)) + 35|0);
   $243 = (($242) + ($240)|0);
   $244 = HEAP8[$243>>0]|0;
   $245 = $244&255;
   $246 = $245<<1;
   $247 = (+($246|0));
   $13 = $247;
   $248 = $13;
   $249 = $12;
   $250 = (40824 + (($249*80)|0)|0);
   $251 = ((($250)) + 24|0);
   $252 = +HEAPF64[$251>>3];
   $253 = $248 - $252;
   $254 = $253 * 64.0;
   $255 = $6;
   $256 = (+($255|0));
   $257 = $254 / $256;
   $258 = $12;
   $259 = (40824 + (($258*80)|0)|0);
   $260 = ((($259)) + 56|0);
   HEAPF64[$260>>3] = $257;
  }
  $261 = $12;
  $262 = (($261) + 1)|0;
  $12 = $262;
 }
 $263 = $8;
 $264 = ((($263)) + 39|0);
 $265 = ((($264)) + 1|0);
 $266 = HEAP8[$265>>0]|0;
 $267 = $266&255;
 $268 = $267<<1;
 $269 = (+($268|0));
 HEAPF64[(40840)>>3] = $269;
 $270 = +HEAPF64[(40840)>>3];
 $271 = $270 == 0.0;
 if ($271) {
  $272 = HEAP32[(88636)>>2]|0;
  $273 = (+($272|0));
  HEAPF64[(40840)>>3] = $273;
 }
 $274 = +HEAPF64[(40840)>>3];
 $275 = (~~(($274)));
 HEAP32[10206] = $275;
 $276 = $9;
 $277 = ((($276)) + 39|0);
 $278 = ((($277)) + 1|0);
 $279 = HEAP8[$278>>0]|0;
 $280 = $279&255;
 $281 = $280<<1;
 $282 = (+($281|0));
 $13 = $282;
 $283 = $13;
 $284 = $283 == 0.0;
 if ($284) {
  $285 = HEAP32[(88636)>>2]|0;
  $286 = (+($285|0));
  $13 = $286;
 }
 $287 = $13;
 $288 = +HEAPF64[(40840)>>3];
 $289 = $287 - $288;
 $290 = $289 * 64.0;
 $291 = $6;
 $292 = (+($291|0));
 $293 = $290 / $292;
 HEAPF64[(40872)>>3] = $293;
 HEAPF64[(40848)>>3] = 89.0;
 HEAP32[(40828)>>2] = 89;
 HEAPF64[(40880)>>3] = 0.0;
 $294 = $8;
 $295 = HEAP16[$294>>1]|0;
 $296 = $295 << 16 >> 16;
 $297 = $296 & 1;
 $298 = ($297|0)!=(0);
 if (!($298)) {
  STACKTOP = sp;return;
 }
 $12 = 1;
 while(1) {
  $299 = $12;
  $300 = ($299|0)<(7);
  if (!($300)) {
   break;
  }
  $301 = $12;
  $302 = $8;
  $303 = ((($302)) + 56|0);
  $304 = (($303) + ($301)|0);
  $305 = HEAP8[$304>>0]|0;
  $306 = $305&255;
  $307 = $306<<2;
  $308 = (+($307|0));
  $309 = $12;
  $310 = (40824 + (($309*80)|0)|0);
  $311 = ((($310)) + 40|0);
  HEAPF64[$311>>3] = $308;
  $312 = $12;
  $313 = (40824 + (($312*80)|0)|0);
  $314 = ((($313)) + 40|0);
  $315 = +HEAPF64[$314>>3];
  $316 = (~~(($315)));
  $317 = $12;
  $318 = (40824 + (($317*80)|0)|0);
  $319 = ((($318)) + 12|0);
  HEAP32[$319>>2] = $316;
  $320 = $12;
  $321 = $9;
  $322 = ((($321)) + 56|0);
  $323 = (($322) + ($320)|0);
  $324 = HEAP8[$323>>0]|0;
  $325 = $324&255;
  $326 = $325<<2;
  $327 = (+($326|0));
  $13 = $327;
  $328 = $13;
  $329 = $12;
  $330 = (40824 + (($329*80)|0)|0);
  $331 = ((($330)) + 40|0);
  $332 = +HEAPF64[$331>>3];
  $333 = $328 - $332;
  $334 = $333 * 64.0;
  $335 = $6;
  $336 = (+($335|0));
  $337 = $334 / $336;
  $338 = $12;
  $339 = (40824 + (($338*80)|0)|0);
  $340 = ((($339)) + 72|0);
  HEAPF64[$340>>3] = $337;
  $341 = $12;
  $342 = $8;
  $343 = ((($342)) + 49|0);
  $344 = (($343) + ($341)|0);
  $345 = HEAP8[$344>>0]|0;
  $346 = (+($345&255));
  $347 = $12;
  $348 = (40824 + (($347*80)|0)|0);
  $349 = ((($348)) + 32|0);
  HEAPF64[$349>>3] = $346;
  $350 = $12;
  $351 = (40824 + (($350*80)|0)|0);
  $352 = ((($351)) + 32|0);
  $353 = +HEAPF64[$352>>3];
  $354 = (~~(($353)));
  $355 = $12;
  $356 = (40824 + (($355*80)|0)|0);
  $357 = ((($356)) + 8|0);
  HEAP32[$357>>2] = $354;
  $358 = $12;
  $359 = $9;
  $360 = ((($359)) + 49|0);
  $361 = (($360) + ($358)|0);
  $362 = HEAP8[$361>>0]|0;
  $363 = (+($362&255));
  $13 = $363;
  $364 = $13;
  $365 = $12;
  $366 = (40824 + (($365*80)|0)|0);
  $367 = ((($366)) + 32|0);
  $368 = +HEAPF64[$367>>3];
  $369 = $364 - $368;
  $370 = $369 * 64.0;
  $371 = $6;
  $372 = (+($371|0));
  $373 = $370 / $372;
  $374 = $12;
  $375 = (40824 + (($374*80)|0)|0);
  $376 = ((($375)) + 64|0);
  HEAPF64[$376>>3] = $373;
  $377 = $12;
  $378 = (($377) + 1)|0;
  $12 = $378;
 }
 STACKTOP = sp;return;
}
function __Z14Wavegen_Klatt2iiiP7frame_tS0_($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $9 = $4;
 $10 = $7;
 $11 = ($10|0)==(0);
 if ($11) {
  $12 = $5;
  $13 = $6;
  $14 = $8;
  $15 = $9;
  $16 = HEAP32[20194]|0;
  __Z14SetSynth_KlattiiP7frame_tS0_P7voice_ti($12,$13,$14,$15,$16,1);
 }
 $17 = $7;
 $18 = (__Z13Wavegen_Klatti($17)|0);
 STACKTOP = sp;return ($18|0);
}
function __Z9KlattInitv() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $0 = 0;
 while(1) {
  $1 = $0;
  $2 = ($1|0)<(256);
  if (!($2)) {
   break;
  }
  $3 = $0;
  $4 = (($3) + 1)|0;
  $0 = $4;
 }
 HEAP32[22146] = 0;
 HEAP32[9518] = 1;
 HEAP32[(38080)>>2] = 22050;
 HEAP32[(38092)>>2] = 1;
 $5 = HEAP32[(38092)>>2]|0;
 $6 = (5160 + ($5<<2)|0);
 $7 = HEAP32[$6>>2]|0;
 HEAP32[(38260)>>2] = $7;
 HEAP32[(38248)>>2] = 15372;
 HEAP32[(38232)>>2] = 100;
 HEAPF64[(38240)>>3] = 3.0;
 $8 = HEAP32[(38080)>>2]|0;
 $9 = ($8*10)|0;
 $10 = (($9|0) / 1000)&-1;
 HEAP32[(38100)>>2] = $10;
 HEAP32[(38076)>>2] = 0;
 HEAP32[(38096)>>2] = 20;
 __Z10KlattReseti(2);
 $0 = 0;
 while(1) {
  $11 = $0;
  $12 = ($11|0)<=(9);
  if (!($12)) {
   break;
  }
  $13 = $0;
  $14 = (16084 + ($13<<1)|0);
  $15 = HEAP16[$14>>1]|0;
  $16 = $15 << 16 >> 16;
  $17 = $0;
  $18 = ((88600) + ($17<<2)|0);
  HEAP32[$18>>2] = $16;
  $19 = $0;
  $20 = (16104 + ($19<<1)|0);
  $21 = HEAP16[$20>>1]|0;
  $22 = $21 << 16 >> 16;
  $23 = $0;
  $24 = ((88640) + ($23<<2)|0);
  HEAP32[$24>>2] = $22;
  $25 = $0;
  $26 = (16124 + ($25<<1)|0);
  $27 = HEAP16[$26>>1]|0;
  $28 = $27 << 16 >> 16;
  $29 = $0;
  $30 = ((88680) + ($29<<2)|0);
  HEAP32[$30>>2] = $28;
  $31 = $0;
  $32 = (16144 + ($31<<1)|0);
  $33 = HEAP16[$32>>1]|0;
  $34 = $33 << 16 >> 16;
  $35 = $0;
  $36 = ((88720) + ($35<<2)|0);
  HEAP32[$36>>2] = $34;
  $37 = $0;
  $38 = (($37) + 1)|0;
  $0 = $38;
 }
 $39 = HEAP16[8052]|0;
 $40 = $39 << 16 >> 16;
 HEAP32[(88840)>>2] = $40;
 HEAP32[22148] = 1000;
 HEAP32[(88596)>>2] = 59;
 HEAP32[(88760)>>2] = 0;
 HEAP32[(88764)>>2] = 40;
 HEAP32[(88768)>>2] = 0;
 HEAP32[(88772)>>2] = 0;
 HEAP32[(88776)>>2] = 50;
 HEAP32[(88780)>>2] = 0;
 HEAP32[(88784)>>2] = 0;
 HEAP32[(88788)>>2] = 0;
 HEAP32[(88792)>>2] = 62;
 STACKTOP = sp;return;
}
function _sonicGetSpeed($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = ((($2)) + 16|0);
 $4 = +HEAPF32[$3>>2];
 STACKTOP = sp;return (+$4);
}
function _sonicSetSpeed($0,$1) {
 $0 = $0|0;
 $1 = +$1;
 var $2 = 0, $3 = 0.0, $4 = 0.0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $4 = $3;
 $5 = $2;
 $6 = ((($5)) + 16|0);
 HEAPF32[$6>>2] = $4;
 STACKTOP = sp;return;
}
function _sonicDestroyStream($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)!=(0|0);
 if ($4) {
  $5 = $1;
  $6 = HEAP32[$5>>2]|0;
  _free($6);
 }
 $7 = $1;
 $8 = ((($7)) + 4|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ($9|0)!=(0|0);
 if ($10) {
  $11 = $1;
  $12 = ((($11)) + 4|0);
  $13 = HEAP32[$12>>2]|0;
  _free($13);
 }
 $14 = $1;
 $15 = ((($14)) + 8|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = ($16|0)!=(0|0);
 if ($17) {
  $18 = $1;
  $19 = ((($18)) + 8|0);
  $20 = HEAP32[$19>>2]|0;
  _free($20);
 }
 $21 = $1;
 $22 = ((($21)) + 12|0);
 $23 = HEAP32[$22>>2]|0;
 $24 = ($23|0)!=(0|0);
 if (!($24)) {
  $28 = $1;
  _free($28);
  STACKTOP = sp;return;
 }
 $25 = $1;
 $26 = ((($25)) + 12|0);
 $27 = HEAP32[$26>>2]|0;
 _free($27);
 $28 = $1;
 _free($28);
 STACKTOP = sp;return;
}
function _sonicCreateStream($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0;
 var $83 = 0, $84 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $3 = $0;
 $4 = $1;
 $9 = (_calloc(1,88)|0);
 $5 = $9;
 $10 = $3;
 $11 = (($10|0) / 400)&-1;
 $6 = $11;
 $12 = $3;
 $13 = (($12|0) / 65)&-1;
 $7 = $13;
 $14 = $7;
 $15 = $14<<1;
 $8 = $15;
 $16 = $5;
 $17 = ($16|0)==(0|0);
 if ($17) {
  $2 = 0;
  $84 = $2;
  STACKTOP = sp;return ($84|0);
 }
 $18 = $8;
 $19 = $5;
 $20 = ((($19)) + 32|0);
 HEAP32[$20>>2] = $18;
 $21 = $8;
 $22 = $4;
 $23 = $22<<1;
 $24 = (_calloc($21,$23)|0);
 $25 = $5;
 HEAP32[$25>>2] = $24;
 $26 = $5;
 $27 = HEAP32[$26>>2]|0;
 $28 = ($27|0)==(0|0);
 if ($28) {
  $29 = $5;
  _sonicDestroyStream($29);
  $2 = 0;
  $84 = $2;
  STACKTOP = sp;return ($84|0);
 }
 $30 = $8;
 $31 = $5;
 $32 = ((($31)) + 40|0);
 HEAP32[$32>>2] = $30;
 $33 = $8;
 $34 = $4;
 $35 = $34<<1;
 $36 = (_calloc($33,$35)|0);
 $37 = $5;
 $38 = ((($37)) + 4|0);
 HEAP32[$38>>2] = $36;
 $39 = $5;
 $40 = ((($39)) + 4|0);
 $41 = HEAP32[$40>>2]|0;
 $42 = ($41|0)==(0|0);
 if ($42) {
  $43 = $5;
  _sonicDestroyStream($43);
  $2 = 0;
  $84 = $2;
  STACKTOP = sp;return ($84|0);
 }
 $44 = $8;
 $45 = $5;
 $46 = ((($45)) + 36|0);
 HEAP32[$46>>2] = $44;
 $47 = $8;
 $48 = $4;
 $49 = $48<<1;
 $50 = (_calloc($47,$49)|0);
 $51 = $5;
 $52 = ((($51)) + 8|0);
 HEAP32[$52>>2] = $50;
 $53 = $5;
 $54 = ((($53)) + 8|0);
 $55 = HEAP32[$54>>2]|0;
 $56 = ($55|0)==(0|0);
 if ($56) {
  $57 = $5;
  _sonicDestroyStream($57);
  $2 = 0;
  $84 = $2;
  STACKTOP = sp;return ($84|0);
 } else {
  $58 = $8;
  $59 = (_calloc($58,2)|0);
  $60 = $5;
  $61 = ((($60)) + 12|0);
  HEAP32[$61>>2] = $59;
  $62 = $5;
  $63 = ((($62)) + 16|0);
  HEAPF32[$63>>2] = 1.0;
  $64 = $5;
  $65 = ((($64)) + 24|0);
  HEAPF32[$65>>2] = 1.0;
  $66 = $5;
  $67 = ((($66)) + 20|0);
  HEAPF32[$67>>2] = 1.0;
  $68 = $3;
  $69 = $5;
  $70 = ((($69)) + 72|0);
  HEAP32[$70>>2] = $68;
  $71 = $4;
  $72 = $5;
  $73 = ((($72)) + 28|0);
  HEAP32[$73>>2] = $71;
  $74 = $6;
  $75 = $5;
  $76 = ((($75)) + 56|0);
  HEAP32[$76>>2] = $74;
  $77 = $7;
  $78 = $5;
  $79 = ((($78)) + 60|0);
  HEAP32[$79>>2] = $77;
  $80 = $8;
  $81 = $5;
  $82 = ((($81)) + 64|0);
  HEAP32[$82>>2] = $80;
  $83 = $5;
  $2 = $83;
  $84 = $2;
  STACKTOP = sp;return ($84|0);
 }
 return (0)|0;
}
function _sonicReadShortFromStream($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $9 = $4;
 $10 = ((($9)) + 48|0);
 $11 = HEAP32[$10>>2]|0;
 $7 = $11;
 $8 = 0;
 $12 = $7;
 $13 = ($12|0)==(0);
 if ($13) {
  $3 = 0;
  $55 = $3;
  STACKTOP = sp;return ($55|0);
 }
 $14 = $7;
 $15 = $6;
 $16 = ($14|0)>($15|0);
 if ($16) {
  $17 = $7;
  $18 = $6;
  $19 = (($17) - ($18))|0;
  $8 = $19;
  $20 = $6;
  $7 = $20;
 }
 $21 = $5;
 $22 = $4;
 $23 = ((($22)) + 4|0);
 $24 = HEAP32[$23>>2]|0;
 $25 = $7;
 $26 = $25<<1;
 $27 = $4;
 $28 = ((($27)) + 28|0);
 $29 = HEAP32[$28>>2]|0;
 $30 = Math_imul($26, $29)|0;
 _memcpy(($21|0),($24|0),($30|0))|0;
 $31 = $8;
 $32 = ($31|0)>(0);
 if ($32) {
  $33 = $4;
  $34 = ((($33)) + 4|0);
  $35 = HEAP32[$34>>2]|0;
  $36 = $4;
  $37 = ((($36)) + 4|0);
  $38 = HEAP32[$37>>2]|0;
  $39 = $7;
  $40 = $4;
  $41 = ((($40)) + 28|0);
  $42 = HEAP32[$41>>2]|0;
  $43 = Math_imul($39, $42)|0;
  $44 = (($38) + ($43<<1)|0);
  $45 = $8;
  $46 = $45<<1;
  $47 = $4;
  $48 = ((($47)) + 28|0);
  $49 = HEAP32[$48>>2]|0;
  $50 = Math_imul($46, $49)|0;
  _memmove(($35|0),($44|0),($50|0))|0;
 }
 $51 = $8;
 $52 = $4;
 $53 = ((($52)) + 48|0);
 HEAP32[$53>>2] = $51;
 $54 = $7;
 $3 = $54;
 $55 = $3;
 STACKTOP = sp;return ($55|0);
}
function _sonicFlushStream($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0.0, $55 = 0, $56 = 0, $57 = 0.0, $58 = 0.0, $59 = 0.0, $6 = 0, $60 = 0.0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $2 = $0;
 $8 = $2;
 $9 = ((($8)) + 64|0);
 $10 = HEAP32[$9>>2]|0;
 $3 = $10;
 $11 = $2;
 $12 = ((($11)) + 44|0);
 $13 = HEAP32[$12>>2]|0;
 $4 = $13;
 $14 = $4;
 $15 = ($14|0)==(0);
 if ($15) {
  $1 = 1;
  $74 = $1;
  STACKTOP = sp;return ($74|0);
 }
 $16 = $4;
 $17 = $3;
 $18 = ($16|0)>=($17|0);
 if ($18) {
  $19 = $2;
  $20 = (_sonicWriteShortToStream($19,0,0)|0);
  $21 = ($20|0)!=(0);
  if (!($21)) {
   $1 = 0;
   $74 = $1;
   STACKTOP = sp;return ($74|0);
  }
 }
 $22 = $2;
 $23 = ((($22)) + 44|0);
 $24 = HEAP32[$23>>2]|0;
 $4 = $24;
 $25 = $4;
 $26 = ($25|0)==(0);
 if ($26) {
  $1 = 1;
  $74 = $1;
  STACKTOP = sp;return ($74|0);
 }
 $27 = $3;
 $28 = $4;
 $29 = (($27) - ($28))|0;
 $5 = $29;
 $30 = $2;
 $31 = HEAP32[$30>>2]|0;
 $32 = $4;
 $33 = $2;
 $34 = ((($33)) + 28|0);
 $35 = HEAP32[$34>>2]|0;
 $36 = Math_imul($32, $35)|0;
 $37 = (($31) + ($36<<1)|0);
 $38 = $5;
 $39 = $38<<1;
 $40 = $2;
 $41 = ((($40)) + 28|0);
 $42 = HEAP32[$41>>2]|0;
 $43 = Math_imul($39, $42)|0;
 _memset(($37|0),0,($43|0))|0;
 $44 = $3;
 $45 = $2;
 $46 = ((($45)) + 44|0);
 HEAP32[$46>>2] = $44;
 $47 = $2;
 $48 = ((($47)) + 48|0);
 $49 = HEAP32[$48>>2]|0;
 $6 = $49;
 $50 = $2;
 $51 = (_sonicWriteShortToStream($50,0,0)|0);
 $52 = ($51|0)!=(0);
 if (!($52)) {
  $1 = 0;
  $74 = $1;
  STACKTOP = sp;return ($74|0);
 }
 $53 = $4;
 $54 = (+($53|0));
 $55 = $2;
 $56 = ((($55)) + 16|0);
 $57 = +HEAPF32[$56>>2];
 $58 = $54 * $57;
 $59 = $58;
 $60 = $59 + 0.5;
 $61 = (~~(($60)));
 $7 = $61;
 $62 = $2;
 $63 = ((($62)) + 48|0);
 $64 = HEAP32[$63>>2]|0;
 $65 = $6;
 $66 = $7;
 $67 = (($65) + ($66))|0;
 $68 = ($64|0)>($67|0);
 if ($68) {
  $69 = $6;
  $70 = $7;
  $71 = (($69) + ($70))|0;
  $72 = $2;
  $73 = ((($72)) + 48|0);
  HEAP32[$73>>2] = $71;
 }
 $1 = 1;
 $74 = $1;
 STACKTOP = sp;return ($74|0);
}
function _sonicWriteShortToStream($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $4;
 $8 = $5;
 $9 = $6;
 $10 = (__ZL28addShortSamplesToInputBufferP17sonicStreamStructPsi($7,$8,$9)|0);
 $11 = ($10|0)!=(0);
 if ($11) {
  $12 = $4;
  $13 = (__ZL18processStreamInputP17sonicStreamStruct($12)|0);
  $3 = $13;
  $14 = $3;
  STACKTOP = sp;return ($14|0);
 } else {
  $3 = 0;
  $14 = $3;
  STACKTOP = sp;return ($14|0);
 }
 return (0)|0;
}
function __ZL28addShortSamplesToInputBufferP17sonicStreamStructPsi($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $6;
 $8 = ($7|0)==(0);
 if ($8) {
  $3 = 1;
  $35 = $3;
  STACKTOP = sp;return ($35|0);
 }
 $9 = $4;
 $10 = $6;
 $11 = (__ZL26enlargeInputBufferIfNeededP17sonicStreamStructi($9,$10)|0);
 $12 = ($11|0)!=(0);
 if ($12) {
  $13 = $4;
  $14 = HEAP32[$13>>2]|0;
  $15 = $4;
  $16 = ((($15)) + 44|0);
  $17 = HEAP32[$16>>2]|0;
  $18 = $4;
  $19 = ((($18)) + 28|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = Math_imul($17, $20)|0;
  $22 = (($14) + ($21<<1)|0);
  $23 = $5;
  $24 = $6;
  $25 = $24<<1;
  $26 = $4;
  $27 = ((($26)) + 28|0);
  $28 = HEAP32[$27>>2]|0;
  $29 = Math_imul($25, $28)|0;
  _memcpy(($22|0),($23|0),($29|0))|0;
  $30 = $6;
  $31 = $4;
  $32 = ((($31)) + 44|0);
  $33 = HEAP32[$32>>2]|0;
  $34 = (($33) + ($30))|0;
  HEAP32[$32>>2] = $34;
  $3 = 1;
  $35 = $3;
  STACKTOP = sp;return ($35|0);
 } else {
  $3 = 0;
  $35 = $3;
  STACKTOP = sp;return ($35|0);
 }
 return (0)|0;
}
function __ZL18processStreamInputP17sonicStreamStruct($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0.0, $11 = 0, $12 = 0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0, $18 = 0.0, $19 = 0.0, $2 = 0, $20 = 0, $21 = 0, $22 = 0.0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0.0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0.0, $40 = 0, $41 = 0, $42 = 0, $43 = 0.0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0.0, $66 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $5 = $2;
 $6 = ((($5)) + 48|0);
 $7 = HEAP32[$6>>2]|0;
 $3 = $7;
 $8 = $2;
 $9 = ((($8)) + 16|0);
 $10 = +HEAPF32[$9>>2];
 $11 = $2;
 $12 = ((($11)) + 24|0);
 $13 = +HEAPF32[$12>>2];
 $14 = $10 / $13;
 $4 = $14;
 $15 = $4;
 $16 = $15;
 $17 = $16 > 1.0000100000000001;
 do {
  if ($17) {
   label = 3;
  } else {
   $18 = $4;
   $19 = $18;
   $20 = $19 < 0.99999000000000004;
   if ($20) {
    label = 3;
   } else {
    $23 = $2;
    $24 = $2;
    $25 = HEAP32[$24>>2]|0;
    $26 = $2;
    $27 = ((($26)) + 44|0);
    $28 = HEAP32[$27>>2]|0;
    $29 = (__ZL12copyToOutputP17sonicStreamStructPsi($23,$25,$28)|0);
    $30 = ($29|0)!=(0);
    if ($30) {
     $31 = $2;
     $32 = ((($31)) + 44|0);
     HEAP32[$32>>2] = 0;
     break;
    }
    $1 = 0;
    $66 = $1;
    STACKTOP = sp;return ($66|0);
   }
  }
 } while(0);
 if ((label|0) == 3) {
  $21 = $2;
  $22 = $4;
  (__ZL11changeSpeedP17sonicStreamStructf($21,$22)|0);
 }
 $33 = $2;
 $34 = ((($33)) + 24|0);
 $35 = +HEAPF32[$34>>2];
 $36 = $35 != 1.0;
 if ($36) {
  $37 = $2;
  $38 = $3;
  $39 = (__ZL11adjustPitchP17sonicStreamStructi($37,$38)|0);
  $40 = ($39|0)!=(0);
  if (!($40)) {
   $1 = 0;
   $66 = $1;
   STACKTOP = sp;return ($66|0);
  }
 }
 $41 = $2;
 $42 = ((($41)) + 20|0);
 $43 = +HEAPF32[$42>>2];
 $44 = $43 != 1.0;
 if ($44) {
  $45 = $2;
  $46 = ((($45)) + 4|0);
  $47 = HEAP32[$46>>2]|0;
  $48 = $3;
  $49 = $2;
  $50 = ((($49)) + 28|0);
  $51 = HEAP32[$50>>2]|0;
  $52 = Math_imul($48, $51)|0;
  $53 = (($47) + ($52<<1)|0);
  $54 = $2;
  $55 = ((($54)) + 48|0);
  $56 = HEAP32[$55>>2]|0;
  $57 = $3;
  $58 = (($56) - ($57))|0;
  $59 = $2;
  $60 = ((($59)) + 28|0);
  $61 = HEAP32[$60>>2]|0;
  $62 = Math_imul($58, $61)|0;
  $63 = $2;
  $64 = ((($63)) + 20|0);
  $65 = +HEAPF32[$64>>2];
  __ZL12scaleSamplesPsif($53,$62,$65);
 }
 $1 = 1;
 $66 = $1;
 STACKTOP = sp;return ($66|0);
}
function __ZL11changeSpeedP17sonicStreamStructf($0,$1) {
 $0 = $0|0;
 $1 = +$1;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0.0, $40 = 0, $41 = 0, $42 = 0.0, $43 = 0.0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0.0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $3 = $0;
 $4 = $1;
 $11 = $3;
 $12 = ((($11)) + 44|0);
 $13 = HEAP32[$12>>2]|0;
 $6 = $13;
 $7 = 0;
 $14 = $3;
 $15 = ((($14)) + 64|0);
 $16 = HEAP32[$15>>2]|0;
 $10 = $16;
 $17 = $3;
 $18 = ((($17)) + 44|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = $10;
 $21 = ($19|0)<($20|0);
 if ($21) {
  $2 = 1;
  $68 = $2;
  STACKTOP = sp;return ($68|0);
 }
 while(1) {
  $22 = $3;
  $23 = ((($22)) + 68|0);
  $24 = HEAP32[$23>>2]|0;
  $25 = ($24|0)>(0);
  $26 = $3;
  do {
   if ($25) {
    $27 = $7;
    $28 = (__ZL17copyInputToOutputP17sonicStreamStructi($26,$27)|0);
    $9 = $28;
    $29 = $9;
    $30 = $7;
    $31 = (($30) + ($29))|0;
    $7 = $31;
   } else {
    $32 = HEAP32[$26>>2]|0;
    $33 = $7;
    $34 = $3;
    $35 = ((($34)) + 28|0);
    $36 = HEAP32[$35>>2]|0;
    $37 = Math_imul($33, $36)|0;
    $38 = (($32) + ($37<<1)|0);
    $5 = $38;
    $39 = $3;
    $40 = $5;
    $41 = (__ZL15findPitchPeriodP17sonicStreamStructPs($39,$40)|0);
    $8 = $41;
    $42 = $4;
    $43 = $42;
    $44 = $43 > 1.0;
    $45 = $3;
    $46 = $5;
    $47 = $4;
    $48 = $8;
    if ($44) {
     $49 = (__ZL15skipPitchPeriodP17sonicStreamStructPsfi($45,$46,$47,$48)|0);
     $9 = $49;
     $50 = $8;
     $51 = $9;
     $52 = (($50) + ($51))|0;
     $53 = $7;
     $54 = (($53) + ($52))|0;
     $7 = $54;
     break;
    } else {
     $55 = (__ZL17insertPitchPeriodP17sonicStreamStructPsfi($45,$46,$47,$48)|0);
     $9 = $55;
     $56 = $9;
     $57 = $7;
     $58 = (($57) + ($56))|0;
     $7 = $58;
     break;
    }
   }
  } while(0);
  $59 = $9;
  $60 = ($59|0)==(0);
  if ($60) {
   label = 9;
   break;
  }
  $61 = $7;
  $62 = $10;
  $63 = (($61) + ($62))|0;
  $64 = $6;
  $65 = ($63|0)<=($64|0);
  if (!($65)) {
   label = 11;
   break;
  }
 }
 if ((label|0) == 9) {
  $2 = 0;
  $68 = $2;
  STACKTOP = sp;return ($68|0);
 }
 else if ((label|0) == 11) {
  $66 = $3;
  $67 = $7;
  __ZL18removeInputSamplesP17sonicStreamStructi($66,$67);
  $2 = 1;
  $68 = $2;
  STACKTOP = sp;return ($68|0);
 }
 return (0)|0;
}
function __ZL12copyToOutputP17sonicStreamStructPsi($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $4;
 $8 = $6;
 $9 = (__ZL27enlargeOutputBufferIfNeededP17sonicStreamStructi($7,$8)|0);
 $10 = ($9|0)!=(0);
 if ($10) {
  $11 = $4;
  $12 = ((($11)) + 4|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = $4;
  $15 = ((($14)) + 48|0);
  $16 = HEAP32[$15>>2]|0;
  $17 = $4;
  $18 = ((($17)) + 28|0);
  $19 = HEAP32[$18>>2]|0;
  $20 = Math_imul($16, $19)|0;
  $21 = (($13) + ($20<<1)|0);
  $22 = $5;
  $23 = $6;
  $24 = $23<<1;
  $25 = $4;
  $26 = ((($25)) + 28|0);
  $27 = HEAP32[$26>>2]|0;
  $28 = Math_imul($24, $27)|0;
  _memcpy(($21|0),($22|0),($28|0))|0;
  $29 = $6;
  $30 = $4;
  $31 = ((($30)) + 48|0);
  $32 = HEAP32[$31>>2]|0;
  $33 = (($32) + ($29))|0;
  HEAP32[$31>>2] = $33;
  $34 = $6;
  $3 = $34;
  $35 = $3;
  STACKTOP = sp;return ($35|0);
 } else {
  $3 = 0;
  $35 = $3;
  STACKTOP = sp;return ($35|0);
 }
 return (0)|0;
}
function __ZL11adjustPitchP17sonicStreamStructi($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0.0, $17 = 0;
 var $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0;
 var $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0.0, $49 = 0.0, $5 = 0.0, $50 = 0.0, $51 = 0, $52 = 0, $53 = 0;
 var $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0.0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0;
 var $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0;
 var $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $3 = $0;
 $4 = $1;
 $14 = $3;
 $15 = ((($14)) + 24|0);
 $16 = +HEAPF32[$15>>2];
 $5 = $16;
 $17 = $3;
 $18 = ((($17)) + 28|0);
 $19 = HEAP32[$18>>2]|0;
 $6 = $19;
 $10 = 0;
 $20 = $3;
 $21 = ((($20)) + 48|0);
 $22 = HEAP32[$21>>2]|0;
 $23 = $4;
 $24 = ($22|0)==($23|0);
 if ($24) {
  $2 = 1;
  $111 = $2;
  STACKTOP = sp;return ($111|0);
 }
 $25 = $3;
 $26 = $4;
 $27 = (__ZL27moveNewSamplesToPitchBufferP17sonicStreamStructi($25,$26)|0);
 $28 = ($27|0)!=(0);
 if (!($28)) {
  $2 = 0;
  $111 = $2;
  STACKTOP = sp;return ($111|0);
 }
 while(1) {
  $29 = $3;
  $30 = ((($29)) + 52|0);
  $31 = HEAP32[$30>>2]|0;
  $32 = $10;
  $33 = (($31) - ($32))|0;
  $34 = $3;
  $35 = ((($34)) + 64|0);
  $36 = HEAP32[$35>>2]|0;
  $37 = ($33|0)>=($36|0);
  $38 = $3;
  if (!($37)) {
   label = 12;
   break;
  }
  $39 = $3;
  $40 = ((($39)) + 8|0);
  $41 = HEAP32[$40>>2]|0;
  $42 = $10;
  $43 = $6;
  $44 = Math_imul($42, $43)|0;
  $45 = (($41) + ($44<<1)|0);
  $46 = (__ZL15findPitchPeriodP17sonicStreamStructPs($38,$45)|0);
  $7 = $46;
  $47 = $7;
  $48 = (+($47|0));
  $49 = $5;
  $50 = $48 / $49;
  $51 = (~~(($50)));
  $8 = $51;
  $52 = $3;
  $53 = $8;
  $54 = (__ZL27enlargeOutputBufferIfNeededP17sonicStreamStructi($52,$53)|0);
  $55 = ($54|0)!=(0);
  if (!($55)) {
   label = 7;
   break;
  }
  $56 = $3;
  $57 = ((($56)) + 4|0);
  $58 = HEAP32[$57>>2]|0;
  $59 = $3;
  $60 = ((($59)) + 48|0);
  $61 = HEAP32[$60>>2]|0;
  $62 = $6;
  $63 = Math_imul($61, $62)|0;
  $64 = (($58) + ($63<<1)|0);
  $11 = $64;
  $65 = $5;
  $66 = $65 >= 1.0;
  $67 = $3;
  $68 = ((($67)) + 8|0);
  $69 = HEAP32[$68>>2]|0;
  $70 = $10;
  $71 = $6;
  $72 = Math_imul($70, $71)|0;
  $73 = (($69) + ($72<<1)|0);
  $12 = $73;
  $74 = $3;
  $75 = ((($74)) + 8|0);
  $76 = HEAP32[$75>>2]|0;
  $77 = $10;
  if ($66) {
   $78 = $7;
   $79 = (($77) + ($78))|0;
   $80 = $8;
   $81 = (($79) - ($80))|0;
   $82 = $6;
   $83 = Math_imul($81, $82)|0;
   $84 = (($76) + ($83<<1)|0);
   $13 = $84;
   $85 = $8;
   $86 = $6;
   $87 = $11;
   $88 = $12;
   $89 = $13;
   __ZL10overlapAddiiPsS_S_($85,$86,$87,$88,$89);
  } else {
   $90 = $6;
   $91 = Math_imul($77, $90)|0;
   $92 = (($76) + ($91<<1)|0);
   $13 = $92;
   $93 = $8;
   $94 = $7;
   $95 = (($93) - ($94))|0;
   $9 = $95;
   $96 = $7;
   $97 = $6;
   $98 = $9;
   $99 = $11;
   $100 = $12;
   $101 = $13;
   __ZL24overlapAddWithSeparationiiiPsS_S_($96,$97,$98,$99,$100,$101);
  }
  $102 = $8;
  $103 = $3;
  $104 = ((($103)) + 48|0);
  $105 = HEAP32[$104>>2]|0;
  $106 = (($105) + ($102))|0;
  HEAP32[$104>>2] = $106;
  $107 = $7;
  $108 = $10;
  $109 = (($108) + ($107))|0;
  $10 = $109;
 }
 if ((label|0) == 7) {
  $2 = 0;
  $111 = $2;
  STACKTOP = sp;return ($111|0);
 }
 else if ((label|0) == 12) {
  $110 = $10;
  __ZL18removePitchSamplesP17sonicStreamStructi($38,$110);
  $2 = 1;
  $111 = $2;
  STACKTOP = sp;return ($111|0);
 }
 return (0)|0;
}
function __ZL12scaleSamplesPsif($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = +$2;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $3 = 0, $4 = 0;
 var $5 = 0.0, $6 = 0, $7 = 0, $8 = 0.0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $8 = $5;
 $9 = $8 * 4096.0;
 $10 = (~~(($9)));
 $6 = $10;
 while(1) {
  $11 = $4;
  $12 = (($11) + -1)|0;
  $4 = $12;
  $13 = ($11|0)!=(0);
  if (!($13)) {
   break;
  }
  $14 = $3;
  $15 = HEAP16[$14>>1]|0;
  $16 = $15 << 16 >> 16;
  $17 = $6;
  $18 = Math_imul($16, $17)|0;
  $19 = $18 >> 12;
  $7 = $19;
  $20 = $7;
  $21 = ($20|0)>(32767);
  if ($21) {
   $7 = 32767;
  } else {
   $22 = $7;
   $23 = ($22|0)<(-32767);
   if ($23) {
    $7 = -32767;
   }
  }
  $24 = $7;
  $25 = $24&65535;
  $26 = $3;
  $27 = ((($26)) + 2|0);
  $3 = $27;
  HEAP16[$26>>1] = $25;
 }
 STACKTOP = sp;return;
}
function __ZL27moveNewSamplesToPitchBufferP17sonicStreamStructi($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $3 = $0;
 $4 = $1;
 $7 = $3;
 $8 = ((($7)) + 48|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = $4;
 $11 = (($9) - ($10))|0;
 $5 = $11;
 $12 = $3;
 $13 = ((($12)) + 28|0);
 $14 = HEAP32[$13>>2]|0;
 $6 = $14;
 $15 = $3;
 $16 = ((($15)) + 52|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = $5;
 $19 = (($17) + ($18))|0;
 $20 = $3;
 $21 = ((($20)) + 36|0);
 $22 = HEAP32[$21>>2]|0;
 $23 = ($19|0)>($22|0);
 if ($23) {
  $24 = $3;
  $25 = ((($24)) + 36|0);
  $26 = HEAP32[$25>>2]|0;
  $27 = $26 >> 1;
  $28 = $5;
  $29 = (($27) + ($28))|0;
  $30 = $3;
  $31 = ((($30)) + 36|0);
  $32 = HEAP32[$31>>2]|0;
  $33 = (($32) + ($29))|0;
  HEAP32[$31>>2] = $33;
  $34 = $3;
  $35 = ((($34)) + 8|0);
  $36 = HEAP32[$35>>2]|0;
  $37 = $3;
  $38 = ((($37)) + 36|0);
  $39 = HEAP32[$38>>2]|0;
  $40 = $39<<1;
  $41 = $6;
  $42 = Math_imul($40, $41)|0;
  $43 = (_realloc($36,$42)|0);
  $44 = $3;
  $45 = ((($44)) + 8|0);
  HEAP32[$45>>2] = $43;
  $46 = $3;
  $47 = ((($46)) + 8|0);
  $48 = HEAP32[$47>>2]|0;
  $49 = ($48|0)==(0|0);
  if ($49) {
   $2 = 0;
   $78 = $2;
   STACKTOP = sp;return ($78|0);
  }
 }
 $50 = $3;
 $51 = ((($50)) + 8|0);
 $52 = HEAP32[$51>>2]|0;
 $53 = $3;
 $54 = ((($53)) + 52|0);
 $55 = HEAP32[$54>>2]|0;
 $56 = $6;
 $57 = Math_imul($55, $56)|0;
 $58 = (($52) + ($57<<1)|0);
 $59 = $3;
 $60 = ((($59)) + 4|0);
 $61 = HEAP32[$60>>2]|0;
 $62 = $4;
 $63 = $6;
 $64 = Math_imul($62, $63)|0;
 $65 = (($61) + ($64<<1)|0);
 $66 = $5;
 $67 = $66<<1;
 $68 = $6;
 $69 = Math_imul($67, $68)|0;
 _memcpy(($58|0),($65|0),($69|0))|0;
 $70 = $4;
 $71 = $3;
 $72 = ((($71)) + 48|0);
 HEAP32[$72>>2] = $70;
 $73 = $5;
 $74 = $3;
 $75 = ((($74)) + 52|0);
 $76 = HEAP32[$75>>2]|0;
 $77 = (($76) + ($73))|0;
 HEAP32[$75>>2] = $77;
 $2 = 1;
 $78 = $2;
 STACKTOP = sp;return ($78|0);
}
function __ZL15findPitchPeriodP17sonicStreamStructPs($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0;
 var $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0;
 var $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0;
 var $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0;
 var $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0;
 var $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $7 = sp + 16|0;
 $8 = sp + 12|0;
 $2 = $0;
 $3 = $1;
 $12 = $2;
 $13 = ((($12)) + 56|0);
 $14 = HEAP32[$13>>2]|0;
 $4 = $14;
 $15 = $2;
 $16 = ((($15)) + 60|0);
 $17 = HEAP32[$16>>2]|0;
 $5 = $17;
 $18 = $2;
 $19 = ((($18)) + 72|0);
 $20 = HEAP32[$19>>2]|0;
 $6 = $20;
 $10 = 1;
 $21 = $6;
 $22 = ($21|0)>(4000);
 if ($22) {
  $23 = $6;
  $24 = (($23|0) / 4000)&-1;
  $10 = $24;
 }
 $25 = $2;
 $26 = ((($25)) + 28|0);
 $27 = HEAP32[$26>>2]|0;
 $28 = ($27|0)==(1);
 $29 = $10;
 $30 = ($29|0)==(1);
 $or$cond = $28 & $30;
 do {
  if ($or$cond) {
   $31 = $3;
   $32 = $4;
   $33 = $5;
   $34 = (__ZL22findPitchPeriodInRangePsiiPiS0_($31,$32,$33,$7,$8)|0);
   $11 = $34;
  } else {
   $35 = $2;
   $36 = $3;
   $37 = $10;
   __ZL15downSampleInputP17sonicStreamStructPsi($35,$36,$37);
   $38 = $2;
   $39 = ((($38)) + 12|0);
   $40 = HEAP32[$39>>2]|0;
   $41 = $4;
   $42 = $10;
   $43 = (($41|0) / ($42|0))&-1;
   $44 = $5;
   $45 = $10;
   $46 = (($44|0) / ($45|0))&-1;
   $47 = (__ZL22findPitchPeriodInRangePsiiPiS0_($40,$43,$46,$7,$8)|0);
   $11 = $47;
   $48 = $10;
   $49 = ($48|0)!=(1);
   if ($49) {
    $50 = $10;
    $51 = $11;
    $52 = Math_imul($51, $50)|0;
    $11 = $52;
    $53 = $11;
    $54 = $10;
    $55 = $54 << 2;
    $56 = (($53) - ($55))|0;
    $4 = $56;
    $57 = $11;
    $58 = $10;
    $59 = $58 << 2;
    $60 = (($57) + ($59))|0;
    $5 = $60;
    $61 = $4;
    $62 = $2;
    $63 = ((($62)) + 56|0);
    $64 = HEAP32[$63>>2]|0;
    $65 = ($61|0)<($64|0);
    if ($65) {
     $66 = $2;
     $67 = ((($66)) + 56|0);
     $68 = HEAP32[$67>>2]|0;
     $4 = $68;
    }
    $69 = $5;
    $70 = $2;
    $71 = ((($70)) + 60|0);
    $72 = HEAP32[$71>>2]|0;
    $73 = ($69|0)>($72|0);
    if ($73) {
     $74 = $2;
     $75 = ((($74)) + 60|0);
     $76 = HEAP32[$75>>2]|0;
     $5 = $76;
    }
    $77 = $2;
    $78 = ((($77)) + 28|0);
    $79 = HEAP32[$78>>2]|0;
    $80 = ($79|0)==(1);
    if ($80) {
     $81 = $3;
     $82 = $4;
     $83 = $5;
     $84 = (__ZL22findPitchPeriodInRangePsiiPiS0_($81,$82,$83,$7,$8)|0);
     $11 = $84;
     break;
    } else {
     $85 = $2;
     $86 = $3;
     __ZL15downSampleInputP17sonicStreamStructPsi($85,$86,1);
     $87 = $2;
     $88 = ((($87)) + 12|0);
     $89 = HEAP32[$88>>2]|0;
     $90 = $4;
     $91 = $5;
     $92 = (__ZL22findPitchPeriodInRangePsiiPiS0_($89,$90,$91,$7,$8)|0);
     $11 = $92;
     break;
    }
   }
  }
 } while(0);
 $93 = $2;
 $94 = $11;
 $95 = HEAP32[$7>>2]|0;
 $96 = HEAP32[$8>>2]|0;
 $97 = (__ZL16prevPeriodBetterP17sonicStreamStructiii($93,$94,$95,$96)|0);
 $98 = ($97|0)!=(0);
 if ($98) {
  $99 = $2;
  $100 = ((($99)) + 76|0);
  $101 = HEAP32[$100>>2]|0;
  $9 = $101;
  $103 = HEAP32[$7>>2]|0;
  $104 = $2;
  $105 = ((($104)) + 84|0);
  HEAP32[$105>>2] = $103;
  $106 = HEAP32[$8>>2]|0;
  $107 = $2;
  $108 = ((($107)) + 80|0);
  HEAP32[$108>>2] = $106;
  $109 = $11;
  $110 = $2;
  $111 = ((($110)) + 76|0);
  HEAP32[$111>>2] = $109;
  $112 = $9;
  STACKTOP = sp;return ($112|0);
 } else {
  $102 = $11;
  $9 = $102;
  $103 = HEAP32[$7>>2]|0;
  $104 = $2;
  $105 = ((($104)) + 84|0);
  HEAP32[$105>>2] = $103;
  $106 = HEAP32[$8>>2]|0;
  $107 = $2;
  $108 = ((($107)) + 80|0);
  HEAP32[$108>>2] = $106;
  $109 = $11;
  $110 = $2;
  $111 = ((($110)) + 76|0);
  HEAP32[$111>>2] = $109;
  $112 = $9;
  STACKTOP = sp;return ($112|0);
 }
 return (0)|0;
}
function __ZL27enlargeOutputBufferIfNeededP17sonicStreamStructi($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $5 = $3;
 $6 = ((($5)) + 48|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = $4;
 $9 = (($7) + ($8))|0;
 $10 = $3;
 $11 = ((($10)) + 40|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = ($9|0)>($12|0);
 if ($13) {
  $14 = $3;
  $15 = ((($14)) + 40|0);
  $16 = HEAP32[$15>>2]|0;
  $17 = $16 >> 1;
  $18 = $4;
  $19 = (($17) + ($18))|0;
  $20 = $3;
  $21 = ((($20)) + 40|0);
  $22 = HEAP32[$21>>2]|0;
  $23 = (($22) + ($19))|0;
  HEAP32[$21>>2] = $23;
  $24 = $3;
  $25 = ((($24)) + 4|0);
  $26 = HEAP32[$25>>2]|0;
  $27 = $3;
  $28 = ((($27)) + 40|0);
  $29 = HEAP32[$28>>2]|0;
  $30 = $29<<1;
  $31 = $3;
  $32 = ((($31)) + 28|0);
  $33 = HEAP32[$32>>2]|0;
  $34 = Math_imul($30, $33)|0;
  $35 = (_realloc($26,$34)|0);
  $36 = $3;
  $37 = ((($36)) + 4|0);
  HEAP32[$37>>2] = $35;
  $38 = $3;
  $39 = ((($38)) + 4|0);
  $40 = HEAP32[$39>>2]|0;
  $41 = ($40|0)==(0|0);
  if ($41) {
   $2 = 0;
   $42 = $2;
   STACKTOP = sp;return ($42|0);
  }
 }
 $2 = 1;
 $42 = $2;
 STACKTOP = sp;return ($42|0);
}
function __ZL10overlapAddiiPsS_S_($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $9 = $4;
 $13 = 0;
 while(1) {
  $15 = $13;
  $16 = $6;
  $17 = ($15|0)<($16|0);
  if (!($17)) {
   break;
  }
  $18 = $7;
  $19 = $13;
  $20 = (($18) + ($19<<1)|0);
  $10 = $20;
  $21 = $9;
  $22 = $13;
  $23 = (($21) + ($22<<1)|0);
  $11 = $23;
  $24 = $8;
  $25 = $13;
  $26 = (($24) + ($25<<1)|0);
  $12 = $26;
  $14 = 0;
  while(1) {
   $27 = $14;
   $28 = $5;
   $29 = ($27|0)<($28|0);
   if (!($29)) {
    break;
   }
   $30 = $12;
   $31 = HEAP16[$30>>1]|0;
   $32 = $31 << 16 >> 16;
   $33 = $5;
   $34 = $14;
   $35 = (($33) - ($34))|0;
   $36 = Math_imul($32, $35)|0;
   $37 = $11;
   $38 = HEAP16[$37>>1]|0;
   $39 = $38 << 16 >> 16;
   $40 = $14;
   $41 = Math_imul($39, $40)|0;
   $42 = (($36) + ($41))|0;
   $43 = $5;
   $44 = (($42|0) / ($43|0))&-1;
   $45 = $44&65535;
   $46 = $10;
   HEAP16[$46>>1] = $45;
   $47 = $6;
   $48 = $10;
   $49 = (($48) + ($47<<1)|0);
   $10 = $49;
   $50 = $6;
   $51 = $12;
   $52 = (($51) + ($50<<1)|0);
   $12 = $52;
   $53 = $6;
   $54 = $11;
   $55 = (($54) + ($53<<1)|0);
   $11 = $55;
   $56 = $14;
   $57 = (($56) + 1)|0;
   $14 = $57;
  }
  $58 = $13;
  $59 = (($58) + 1)|0;
  $13 = $59;
 }
 STACKTOP = sp;return;
}
function __ZL24overlapAddWithSeparationiiiPsS_S_($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0;
 var $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0;
 var $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $6 = $0;
 $7 = $1;
 $8 = $2;
 $9 = $3;
 $10 = $4;
 $11 = $5;
 $15 = 0;
 while(1) {
  $17 = $15;
  $18 = $7;
  $19 = ($17|0)<($18|0);
  if (!($19)) {
   break;
  }
  $20 = $9;
  $21 = $15;
  $22 = (($20) + ($21<<1)|0);
  $12 = $22;
  $23 = $11;
  $24 = $15;
  $25 = (($23) + ($24<<1)|0);
  $13 = $25;
  $26 = $10;
  $27 = $15;
  $28 = (($26) + ($27<<1)|0);
  $14 = $28;
  $16 = 0;
  while(1) {
   $29 = $16;
   $30 = $6;
   $31 = $8;
   $32 = (($30) + ($31))|0;
   $33 = ($29|0)<($32|0);
   if (!($33)) {
    break;
   }
   $34 = $16;
   $35 = $8;
   $36 = ($34|0)<($35|0);
   do {
    if ($36) {
     $37 = $14;
     $38 = HEAP16[$37>>1]|0;
     $39 = $38 << 16 >> 16;
     $40 = $6;
     $41 = $16;
     $42 = (($40) - ($41))|0;
     $43 = Math_imul($39, $42)|0;
     $44 = $6;
     $45 = (($43|0) / ($44|0))&-1;
     $46 = $45&65535;
     $47 = $12;
     HEAP16[$47>>1] = $46;
     $48 = $7;
     $49 = $14;
     $50 = (($49) + ($48<<1)|0);
     $14 = $50;
    } else {
     $51 = $16;
     $52 = $6;
     $53 = ($51|0)<($52|0);
     if ($53) {
      $54 = $14;
      $55 = HEAP16[$54>>1]|0;
      $56 = $55 << 16 >> 16;
      $57 = $6;
      $58 = $16;
      $59 = (($57) - ($58))|0;
      $60 = Math_imul($56, $59)|0;
      $61 = $13;
      $62 = HEAP16[$61>>1]|0;
      $63 = $62 << 16 >> 16;
      $64 = $16;
      $65 = $8;
      $66 = (($64) - ($65))|0;
      $67 = Math_imul($63, $66)|0;
      $68 = (($60) + ($67))|0;
      $69 = $6;
      $70 = (($68|0) / ($69|0))&-1;
      $71 = $70&65535;
      $72 = $12;
      HEAP16[$72>>1] = $71;
      $73 = $7;
      $74 = $14;
      $75 = (($74) + ($73<<1)|0);
      $14 = $75;
      $76 = $7;
      $77 = $13;
      $78 = (($77) + ($76<<1)|0);
      $13 = $78;
      break;
     } else {
      $79 = $13;
      $80 = HEAP16[$79>>1]|0;
      $81 = $80 << 16 >> 16;
      $82 = $16;
      $83 = $8;
      $84 = (($82) - ($83))|0;
      $85 = Math_imul($81, $84)|0;
      $86 = $6;
      $87 = (($85|0) / ($86|0))&-1;
      $88 = $87&65535;
      $89 = $12;
      HEAP16[$89>>1] = $88;
      $90 = $7;
      $91 = $13;
      $92 = (($91) + ($90<<1)|0);
      $13 = $92;
      break;
     }
    }
   } while(0);
   $93 = $7;
   $94 = $12;
   $95 = (($94) + ($93<<1)|0);
   $12 = $95;
   $96 = $16;
   $97 = (($96) + 1)|0;
   $16 = $97;
  }
  $98 = $15;
  $99 = (($98) + 1)|0;
  $15 = $99;
 }
 STACKTOP = sp;return;
}
function __ZL18removePitchSamplesP17sonicStreamStructi($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $6 = $2;
 $7 = ((($6)) + 28|0);
 $8 = HEAP32[$7>>2]|0;
 $4 = $8;
 $9 = $2;
 $10 = ((($9)) + 8|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = $3;
 $13 = $4;
 $14 = Math_imul($12, $13)|0;
 $15 = (($11) + ($14<<1)|0);
 $5 = $15;
 $16 = $3;
 $17 = ($16|0)==(0);
 if ($17) {
  STACKTOP = sp;return;
 }
 $18 = $3;
 $19 = $2;
 $20 = ((($19)) + 52|0);
 $21 = HEAP32[$20>>2]|0;
 $22 = ($18|0)!=($21|0);
 if ($22) {
  $23 = $2;
  $24 = ((($23)) + 8|0);
  $25 = HEAP32[$24>>2]|0;
  $26 = $5;
  $27 = $2;
  $28 = ((($27)) + 52|0);
  $29 = HEAP32[$28>>2]|0;
  $30 = $3;
  $31 = (($29) - ($30))|0;
  $32 = $31<<1;
  $33 = $4;
  $34 = Math_imul($32, $33)|0;
  _memmove(($25|0),($26|0),($34|0))|0;
 }
 $35 = $3;
 $36 = $2;
 $37 = ((($36)) + 52|0);
 $38 = HEAP32[$37>>2]|0;
 $39 = (($38) - ($35))|0;
 HEAP32[$37>>2] = $39;
 STACKTOP = sp;return;
}
function __ZL22findPitchPeriodInRangePsiiPiS0_($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$sink = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $9 = $4;
 $11 = 0;
 $17 = 1;
 $18 = 0;
 $20 = $6;
 $10 = $20;
 while(1) {
  $21 = $10;
  $22 = $7;
  $23 = ($21|0)<=($22|0);
  if (!($23)) {
   break;
  }
  $16 = 0;
  $24 = $5;
  $12 = $24;
  $25 = $5;
  $26 = $10;
  $27 = (($25) + ($26<<1)|0);
  $13 = $27;
  $19 = 0;
  while(1) {
   $28 = $19;
   $29 = $10;
   $30 = ($28|0)<($29|0);
   if (!($30)) {
    break;
   }
   $31 = $12;
   $32 = ((($31)) + 2|0);
   $12 = $32;
   $33 = HEAP16[$31>>1]|0;
   $14 = $33;
   $34 = $13;
   $35 = ((($34)) + 2|0);
   $13 = $35;
   $36 = HEAP16[$34>>1]|0;
   $15 = $36;
   $37 = $14;
   $38 = $37 << 16 >> 16;
   $39 = $15;
   $40 = $39 << 16 >> 16;
   $41 = ($38|0)>=($40|0);
   if ($41) {
    $42 = $14;
    $43 = $42 << 16 >> 16;
    $44 = $15;
    $45 = $44 << 16 >> 16;
    $46 = (($43) - ($45))|0;
    $$sink = $46;
   } else {
    $47 = $15;
    $48 = $47 << 16 >> 16;
    $49 = $14;
    $50 = $49 << 16 >> 16;
    $51 = (($48) - ($50))|0;
    $$sink = $51;
   }
   $52 = $$sink&65535;
   $53 = $52&65535;
   $54 = $16;
   $55 = (($54) + ($53))|0;
   $16 = $55;
   $56 = $19;
   $57 = (($56) + 1)|0;
   $19 = $57;
  }
  $58 = $16;
  $59 = $11;
  $60 = Math_imul($58, $59)|0;
  $61 = $17;
  $62 = $10;
  $63 = Math_imul($61, $62)|0;
  $64 = ($60>>>0)<($63>>>0);
  if ($64) {
   $65 = $16;
   $17 = $65;
   $66 = $10;
   $11 = $66;
  }
  $67 = $16;
  $68 = $11;
  $69 = Math_imul($67, $68)|0;
  $70 = $18;
  $71 = $10;
  $72 = Math_imul($70, $71)|0;
  $73 = ($69>>>0)>($72>>>0);
  if ($73) {
   $74 = $16;
   $18 = $74;
  }
  $75 = $10;
  $76 = (($75) + 1)|0;
  $10 = $76;
 }
 $77 = $17;
 $78 = $8;
 HEAP32[$78>>2] = $77;
 $79 = $18;
 $80 = $9;
 HEAP32[$80>>2] = $79;
 $81 = $11;
 STACKTOP = sp;return ($81|0);
}
function __ZL15downSampleInputP17sonicStreamStructPsi($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $12 = $3;
 $13 = ((($12)) + 64|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = $5;
 $16 = (($14|0) / ($15|0))&-1;
 $6 = $16;
 $17 = $3;
 $18 = ((($17)) + 28|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = $5;
 $21 = Math_imul($19, $20)|0;
 $7 = $21;
 $22 = $3;
 $23 = ((($22)) + 12|0);
 $24 = HEAP32[$23>>2]|0;
 $11 = $24;
 $8 = 0;
 while(1) {
  $25 = $8;
  $26 = $6;
  $27 = ($25|0)<($26|0);
  if (!($27)) {
   break;
  }
  $10 = 0;
  $9 = 0;
  while(1) {
   $28 = $9;
   $29 = $7;
   $30 = ($28|0)<($29|0);
   if (!($30)) {
    break;
   }
   $31 = $4;
   $32 = ((($31)) + 2|0);
   $4 = $32;
   $33 = HEAP16[$31>>1]|0;
   $34 = $33 << 16 >> 16;
   $35 = $10;
   $36 = (($35) + ($34))|0;
   $10 = $36;
   $37 = $9;
   $38 = (($37) + 1)|0;
   $9 = $38;
  }
  $39 = $7;
  $40 = $10;
  $41 = (($40|0) / ($39|0))&-1;
  $10 = $41;
  $42 = $10;
  $43 = $42&65535;
  $44 = $11;
  $45 = ((($44)) + 2|0);
  $11 = $45;
  HEAP16[$44>>1] = $43;
  $46 = $8;
  $47 = (($46) + 1)|0;
  $8 = $47;
 }
 STACKTOP = sp;return;
}
function __ZL16prevPeriodBetterP17sonicStreamStructiii($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0.0, $18 = 0.0, $19 = 0, $20 = 0, $21 = 0, $22 = 0.0, $23 = 0.0, $24 = 0, $25 = 0, $26 = 0, $27 = 0.0, $28 = 0, $29 = 0.0;
 var $30 = 0.0, $31 = 0.0, $32 = 0, $33 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $9 = $8;
 $10 = ($9*3)|0;
 $11 = (($10|0) / 2)&-1;
 $12 = $5;
 $13 = ((($12)) + 80|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = ($11|0)<($14|0);
 if ($15) {
  $16 = $8;
  $17 = (+($16|0));
  $18 = $17 * 3.0;
  $19 = $5;
  $20 = ((($19)) + 84|0);
  $21 = HEAP32[$20>>2]|0;
  $22 = (+($21|0));
  $23 = $18 * $22;
  $24 = $5;
  $25 = ((($24)) + 80|0);
  $26 = HEAP32[$25>>2]|0;
  $27 = (+($26|0));
  $28 = $7;
  $29 = (+($28|0));
  $30 = $27 * $29;
  $31 = $30 * 2.0;
  $32 = $23 < $31;
  if ($32) {
   $4 = 1;
   $33 = $4;
   STACKTOP = sp;return ($33|0);
  }
 }
 $4 = 0;
 $33 = $4;
 STACKTOP = sp;return ($33|0);
}
function __ZL17copyInputToOutputP17sonicStreamStructi($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $6 = $3;
 $7 = ((($6)) + 68|0);
 $8 = HEAP32[$7>>2]|0;
 $5 = $8;
 $9 = $5;
 $10 = $3;
 $11 = ((($10)) + 64|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = ($9|0)>($12|0);
 if ($13) {
  $14 = $3;
  $15 = ((($14)) + 64|0);
  $16 = HEAP32[$15>>2]|0;
  $5 = $16;
 }
 $17 = $3;
 $18 = $3;
 $19 = HEAP32[$18>>2]|0;
 $20 = $4;
 $21 = $3;
 $22 = ((($21)) + 28|0);
 $23 = HEAP32[$22>>2]|0;
 $24 = Math_imul($20, $23)|0;
 $25 = (($19) + ($24<<1)|0);
 $26 = $5;
 $27 = (__ZL12copyToOutputP17sonicStreamStructPsi($17,$25,$26)|0);
 $28 = ($27|0)!=(0);
 if ($28) {
  $29 = $5;
  $30 = $3;
  $31 = ((($30)) + 68|0);
  $32 = HEAP32[$31>>2]|0;
  $33 = (($32) - ($29))|0;
  HEAP32[$31>>2] = $33;
  $34 = $5;
  $2 = $34;
  $35 = $2;
  STACKTOP = sp;return ($35|0);
 } else {
  $2 = 0;
  $35 = $2;
  STACKTOP = sp;return ($35|0);
 }
 return (0)|0;
}
function __ZL15skipPitchPeriodP17sonicStreamStructPsfi($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = +$2;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0.0, $16 = 0, $17 = 0, $18 = 0.0, $19 = 0.0, $20 = 0.0, $21 = 0.0, $22 = 0, $23 = 0, $24 = 0.0, $25 = 0.0, $26 = 0.0, $27 = 0.0, $28 = 0.0, $29 = 0.0;
 var $30 = 0.0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $7 = 0.0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $11 = $8;
 $9 = $11;
 $12 = $5;
 $13 = ((($12)) + 28|0);
 $14 = HEAP32[$13>>2]|0;
 $10 = $14;
 $15 = $7;
 $16 = $15 >= 2.0;
 $17 = $8;
 if ($16) {
  $18 = (+($17|0));
  $19 = $7;
  $20 = $19 - 1.0;
  $21 = $18 / $20;
  $22 = (~~(($21)));
  $9 = $22;
 } else {
  $9 = $17;
  $23 = $8;
  $24 = (+($23|0));
  $25 = $7;
  $26 = 2.0 - $25;
  $27 = $24 * $26;
  $28 = $7;
  $29 = $28 - 1.0;
  $30 = $27 / $29;
  $31 = (~~(($30)));
  $32 = $5;
  $33 = ((($32)) + 68|0);
  HEAP32[$33>>2] = $31;
 }
 $34 = $5;
 $35 = $9;
 $36 = (__ZL27enlargeOutputBufferIfNeededP17sonicStreamStructi($34,$35)|0);
 $37 = ($36|0)!=(0);
 if ($37) {
  $38 = $9;
  $39 = $10;
  $40 = $5;
  $41 = ((($40)) + 4|0);
  $42 = HEAP32[$41>>2]|0;
  $43 = $5;
  $44 = ((($43)) + 48|0);
  $45 = HEAP32[$44>>2]|0;
  $46 = $10;
  $47 = Math_imul($45, $46)|0;
  $48 = (($42) + ($47<<1)|0);
  $49 = $6;
  $50 = $6;
  $51 = $8;
  $52 = $10;
  $53 = Math_imul($51, $52)|0;
  $54 = (($50) + ($53<<1)|0);
  __ZL10overlapAddiiPsS_S_($38,$39,$48,$49,$54);
  $55 = $9;
  $56 = $5;
  $57 = ((($56)) + 48|0);
  $58 = HEAP32[$57>>2]|0;
  $59 = (($58) + ($55))|0;
  HEAP32[$57>>2] = $59;
  $60 = $9;
  $4 = $60;
  $61 = $4;
  STACKTOP = sp;return ($61|0);
 } else {
  $4 = 0;
  $61 = $4;
  STACKTOP = sp;return ($61|0);
 }
 return (0)|0;
}
function __ZL17insertPitchPeriodP17sonicStreamStructPsfi($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = +$2;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0.0, $16 = 0, $17 = 0, $18 = 0.0, $19 = 0.0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0, $25 = 0, $26 = 0.0, $27 = 0.0, $28 = 0.0, $29 = 0.0;
 var $30 = 0.0, $31 = 0.0, $32 = 0.0, $33 = 0.0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0.0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0;
 var $85 = 0, $86 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $12 = $5;
 $13 = ((($12)) + 28|0);
 $14 = HEAP32[$13>>2]|0;
 $11 = $14;
 $15 = $7;
 $16 = $15 < 0.5;
 $17 = $8;
 if ($16) {
  $18 = (+($17|0));
  $19 = $7;
  $20 = $18 * $19;
  $21 = $7;
  $22 = 1.0 - $21;
  $23 = $20 / $22;
  $24 = (~~(($23)));
  $9 = $24;
 } else {
  $9 = $17;
  $25 = $8;
  $26 = (+($25|0));
  $27 = $7;
  $28 = 2.0 * $27;
  $29 = $28 - 1.0;
  $30 = $26 * $29;
  $31 = $7;
  $32 = 1.0 - $31;
  $33 = $30 / $32;
  $34 = (~~(($33)));
  $35 = $5;
  $36 = ((($35)) + 68|0);
  HEAP32[$36>>2] = $34;
 }
 $37 = $5;
 $38 = $8;
 $39 = $9;
 $40 = (($38) + ($39))|0;
 $41 = (__ZL27enlargeOutputBufferIfNeededP17sonicStreamStructi($37,$40)|0);
 $42 = ($41|0)!=(0);
 if ($42) {
  $43 = $5;
  $44 = ((($43)) + 4|0);
  $45 = HEAP32[$44>>2]|0;
  $46 = $5;
  $47 = ((($46)) + 48|0);
  $48 = HEAP32[$47>>2]|0;
  $49 = $11;
  $50 = Math_imul($48, $49)|0;
  $51 = (($45) + ($50<<1)|0);
  $10 = $51;
  $52 = $10;
  $53 = $6;
  $54 = $8;
  $55 = $54<<1;
  $56 = $11;
  $57 = Math_imul($55, $56)|0;
  _memcpy(($52|0),($53|0),($57|0))|0;
  $58 = $5;
  $59 = ((($58)) + 4|0);
  $60 = HEAP32[$59>>2]|0;
  $61 = $5;
  $62 = ((($61)) + 48|0);
  $63 = HEAP32[$62>>2]|0;
  $64 = $8;
  $65 = (($63) + ($64))|0;
  $66 = $11;
  $67 = Math_imul($65, $66)|0;
  $68 = (($60) + ($67<<1)|0);
  $10 = $68;
  $69 = $9;
  $70 = $11;
  $71 = $10;
  $72 = $6;
  $73 = $8;
  $74 = $11;
  $75 = Math_imul($73, $74)|0;
  $76 = (($72) + ($75<<1)|0);
  $77 = $6;
  __ZL10overlapAddiiPsS_S_($69,$70,$71,$76,$77);
  $78 = $8;
  $79 = $9;
  $80 = (($78) + ($79))|0;
  $81 = $5;
  $82 = ((($81)) + 48|0);
  $83 = HEAP32[$82>>2]|0;
  $84 = (($83) + ($80))|0;
  HEAP32[$82>>2] = $84;
  $85 = $9;
  $4 = $85;
  $86 = $4;
  STACKTOP = sp;return ($86|0);
 } else {
  $4 = 0;
  $86 = $4;
  STACKTOP = sp;return ($86|0);
 }
 return (0)|0;
}
function __ZL18removeInputSamplesP17sonicStreamStructi($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $5 = $2;
 $6 = ((($5)) + 44|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = $3;
 $9 = (($7) - ($8))|0;
 $4 = $9;
 $10 = $4;
 $11 = ($10|0)>(0);
 if (!($11)) {
  $28 = $4;
  $29 = $2;
  $30 = ((($29)) + 44|0);
  HEAP32[$30>>2] = $28;
  STACKTOP = sp;return;
 }
 $12 = $2;
 $13 = HEAP32[$12>>2]|0;
 $14 = $2;
 $15 = HEAP32[$14>>2]|0;
 $16 = $3;
 $17 = $2;
 $18 = ((($17)) + 28|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = Math_imul($16, $19)|0;
 $21 = (($15) + ($20<<1)|0);
 $22 = $4;
 $23 = $22<<1;
 $24 = $2;
 $25 = ((($24)) + 28|0);
 $26 = HEAP32[$25>>2]|0;
 $27 = Math_imul($23, $26)|0;
 _memmove(($13|0),($21|0),($27|0))|0;
 $28 = $4;
 $29 = $2;
 $30 = ((($29)) + 44|0);
 HEAP32[$30>>2] = $28;
 STACKTOP = sp;return;
}
function __ZL26enlargeInputBufferIfNeededP17sonicStreamStructi($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $5 = $3;
 $6 = ((($5)) + 44|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = $4;
 $9 = (($7) + ($8))|0;
 $10 = $3;
 $11 = ((($10)) + 32|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = ($9|0)>($12|0);
 if ($13) {
  $14 = $3;
  $15 = ((($14)) + 32|0);
  $16 = HEAP32[$15>>2]|0;
  $17 = $16 >> 1;
  $18 = $4;
  $19 = (($17) + ($18))|0;
  $20 = $3;
  $21 = ((($20)) + 32|0);
  $22 = HEAP32[$21>>2]|0;
  $23 = (($22) + ($19))|0;
  HEAP32[$21>>2] = $23;
  $24 = $3;
  $25 = HEAP32[$24>>2]|0;
  $26 = $3;
  $27 = ((($26)) + 32|0);
  $28 = HEAP32[$27>>2]|0;
  $29 = $28<<1;
  $30 = $3;
  $31 = ((($30)) + 28|0);
  $32 = HEAP32[$31>>2]|0;
  $33 = Math_imul($29, $32)|0;
  $34 = (_realloc($25,$33)|0);
  $35 = $3;
  HEAP32[$35>>2] = $34;
  $36 = $3;
  $37 = HEAP32[$36>>2]|0;
  $38 = ($37|0)==(0|0);
  if ($38) {
   $2 = 0;
   $39 = $2;
   STACKTOP = sp;return ($39|0);
  }
 }
 $2 = 1;
 $39 = $2;
 STACKTOP = sp;return ($39|0);
}
function _emscripten_bind_espeak_VOICE_get_name_0($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = HEAP32[$2>>2]|0;
 STACKTOP = sp;return ($3|0);
}
function _emscripten_bind_espeak_VOICE_set_name_1($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $4 = $3;
 $5 = $2;
 HEAP32[$5>>2] = $4;
 STACKTOP = sp;return;
}
function _emscripten_bind_espeak_VOICE_get_languages_1($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $4 = $3;
 $5 = $2;
 $6 = ((($5)) + 4|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (($7) + ($4)|0);
 $9 = HEAP8[$8>>0]|0;
 STACKTOP = sp;return ($9|0);
}
function _emscripten_bind_espeak_VOICE_get_identifier_0($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = ((($2)) + 8|0);
 $4 = HEAP32[$3>>2]|0;
 STACKTOP = sp;return ($4|0);
}
function _emscripten_bind_espeak_VOICE_set_identifier_1($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $4 = $3;
 $5 = $2;
 $6 = ((($5)) + 8|0);
 HEAP32[$6>>2] = $4;
 STACKTOP = sp;return;
}
function _emscripten_bind_espeak_VOICE_get_gender_0($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = ((($2)) + 12|0);
 $4 = HEAP8[$3>>0]|0;
 STACKTOP = sp;return ($4|0);
}
function _emscripten_bind_espeak_VOICE_set_gender_1($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $4 = $3;
 $5 = $2;
 $6 = ((($5)) + 12|0);
 HEAP8[$6>>0] = $4;
 STACKTOP = sp;return;
}
function _emscripten_bind_espeak_VOICE_get_age_0($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = ((($2)) + 13|0);
 $4 = HEAP8[$3>>0]|0;
 STACKTOP = sp;return ($4|0);
}
function _emscripten_bind_espeak_VOICE_set_age_1($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $4 = $3;
 $5 = $2;
 $6 = ((($5)) + 13|0);
 HEAP8[$6>>0] = $4;
 STACKTOP = sp;return;
}
function _emscripten_bind_espeak_VOICE_get_variant_0($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = ((($2)) + 14|0);
 $4 = HEAP8[$3>>0]|0;
 STACKTOP = sp;return ($4|0);
}
function _emscripten_bind_espeak_VOICE_set_variant_1($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $4 = $3;
 $5 = $2;
 $6 = ((($5)) + 14|0);
 HEAP8[$6>>0] = $4;
 STACKTOP = sp;return;
}
function _emscripten_bind_espeak_VOICE_get_xx1_0($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = ((($2)) + 15|0);
 $4 = HEAP8[$3>>0]|0;
 STACKTOP = sp;return ($4|0);
}
function _emscripten_bind_espeak_VOICE_set_xx1_1($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $4 = $3;
 $5 = $2;
 $6 = ((($5)) + 15|0);
 HEAP8[$6>>0] = $4;
 STACKTOP = sp;return;
}
function _emscripten_bind_espeak_VOICE_get_score_0($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = ((($2)) + 16|0);
 $4 = HEAP32[$3>>2]|0;
 STACKTOP = sp;return ($4|0);
}
function _emscripten_bind_espeak_VOICE_set_score_1($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $4 = $3;
 $5 = $2;
 $6 = ((($5)) + 16|0);
 HEAP32[$6>>2] = $4;
 STACKTOP = sp;return;
}
function _emscripten_bind_espeak_VOICE_get_spare_0($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = ((($2)) + 20|0);
 $4 = HEAP32[$3>>2]|0;
 STACKTOP = sp;return ($4|0);
}
function _emscripten_bind_espeak_VOICE_set_spare_1($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $4 = $3;
 $5 = $2;
 $6 = ((($5)) + 20|0);
 HEAP32[$6>>2] = $4;
 STACKTOP = sp;return;
}
function _emscripten_bind_espeak_VOICE___destroy___0($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = ($2|0)==(0|0);
 if (!($3)) {
  __ZdlPv($2);
 }
 STACKTOP = sp;return;
}
function _emscripten_bind_VoidPtr___destroy___0($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = ($2|0)==(0|0);
 if (!($3)) {
  __ZdlPv($2);
 }
 STACKTOP = sp;return;
}
function _emscripten_bind_espeak_EVENT_get_type_0($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = HEAP32[$2>>2]|0;
 STACKTOP = sp;return ($3|0);
}
function _emscripten_bind_espeak_EVENT_get_unique_identifier_0($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = ((($2)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 STACKTOP = sp;return ($4|0);
}
function _emscripten_bind_espeak_EVENT_get_text_position_0($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = ((($2)) + 8|0);
 $4 = HEAP32[$3>>2]|0;
 STACKTOP = sp;return ($4|0);
}
function _emscripten_bind_espeak_EVENT_get_length_0($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = ((($2)) + 12|0);
 $4 = HEAP32[$3>>2]|0;
 STACKTOP = sp;return ($4|0);
}
function _emscripten_bind_espeak_EVENT_get_audio_position_0($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = ((($2)) + 16|0);
 $4 = HEAP32[$3>>2]|0;
 STACKTOP = sp;return ($4|0);
}
function _emscripten_bind_espeak_EVENT_get_sample_0($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = ((($2)) + 20|0);
 $4 = HEAP32[$3>>2]|0;
 STACKTOP = sp;return ($4|0);
}
function _emscripten_bind_espeak_EVENT_get_user_data_0($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = ((($2)) + 24|0);
 $4 = HEAP32[$3>>2]|0;
 STACKTOP = sp;return ($4|0);
}
function _emscripten_bind_espeak_EVENT___destroy___0($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = ($2|0)==(0|0);
 if (!($3)) {
  __ZdlPv($2);
 }
 STACKTOP = sp;return;
}
function _emscripten_bind_EspeakWorker_EspeakWorker_0() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = (__Znwj(20)|0);
 __THREW__ = 0;
 invoke_vi(28,($2|0));
 $3 = __THREW__; __THREW__ = 0;
 $4 = $3&1;
 if ($4) {
  $5 = ___cxa_find_matching_catch_2()|0;
  $6 = tempRet0;
  $0 = $5;
  $1 = $6;
  __ZdlPv($2);
  $7 = $0;
  $8 = $1;
  ___resumeException($7|0);
  // unreachable;
 } else {
  STACKTOP = sp;return ($2|0);
 }
 return (0)|0;
}
function _emscripten_bind_EspeakWorker_synth__2($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $6 = $3;
 $7 = $4;
 $8 = $5;
 __ZN12EspeakWorker6synth_EPKcPv($6,$7,$8);
 STACKTOP = sp;return;
}
function _emscripten_bind_EspeakWorker_getSizeOfEventStruct__0($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = (__ZN12EspeakWorker21getSizeOfEventStruct_Ev($2)|0);
 STACKTOP = sp;return ($3|0);
}
function _emscripten_bind_EspeakWorker_setVoice_2($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $6 = $3;
 $7 = $4;
 $8 = $5;
 __ZN12EspeakWorker8setVoiceEPKcS1_hhh($6,$7,$8,0,0,0);
 STACKTOP = sp;return;
}
function _emscripten_bind_EspeakWorker_setVoice_3($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $3;
 $8 = $4;
 $9 = $5;
 $10 = $6;
 $11 = $7;
 __ZN12EspeakWorker8setVoiceEPKcS1_hhh($8,$9,$10,$11,0,0);
 STACKTOP = sp;return;
}
function _emscripten_bind_EspeakWorker_setVoice_4($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $9 = $4;
 $10 = $5;
 $11 = $6;
 $12 = $7;
 $13 = $8;
 $14 = $9;
 __ZN12EspeakWorker8setVoiceEPKcS1_hhh($10,$11,$12,$13,$14,0);
 STACKTOP = sp;return;
}
function _emscripten_bind_EspeakWorker_setVoice_5($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $6 = $0;
 $7 = $1;
 $8 = $2;
 $9 = $3;
 $10 = $4;
 $11 = $5;
 $12 = $6;
 $13 = $7;
 $14 = $8;
 $15 = $9;
 $16 = $10;
 $17 = $11;
 __ZN12EspeakWorker8setVoiceEPKcS1_hhh($12,$13,$14,$15,$16,$17);
 STACKTOP = sp;return;
}
function _emscripten_bind_EspeakWorker_get_voices_1($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $4 = $3;
 $5 = $2;
 $6 = HEAP32[$5>>2]|0;
 $7 = (($6) + ($4<<2)|0);
 $8 = HEAP32[$7>>2]|0;
 STACKTOP = sp;return ($8|0);
}
function _emscripten_bind_EspeakWorker_set_voices_2($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $6 = $5;
 $7 = $4;
 $8 = $3;
 $9 = HEAP32[$8>>2]|0;
 $10 = (($9) + ($7<<2)|0);
 HEAP32[$10>>2] = $6;
 STACKTOP = sp;return;
}
function _emscripten_bind_EspeakWorker_get_samplerate_0($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = ((($2)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 STACKTOP = sp;return ($4|0);
}
function _emscripten_bind_EspeakWorker_get_rate_0($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = ((($2)) + 8|0);
 $4 = HEAP32[$3>>2]|0;
 STACKTOP = sp;return ($4|0);
}
function _emscripten_bind_EspeakWorker_set_rate_1($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $4 = $3;
 $5 = $2;
 $6 = ((($5)) + 8|0);
 HEAP32[$6>>2] = $4;
 STACKTOP = sp;return;
}
function _emscripten_bind_EspeakWorker_get_pitch_0($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = ((($2)) + 12|0);
 $4 = HEAP32[$3>>2]|0;
 STACKTOP = sp;return ($4|0);
}
function _emscripten_bind_EspeakWorker_set_pitch_1($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $4 = $3;
 $5 = $2;
 $6 = ((($5)) + 12|0);
 HEAP32[$6>>2] = $4;
 STACKTOP = sp;return;
}
function _emscripten_bind_EspeakWorker___destroy___0($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = ($2|0)==(0|0);
 if (!($3)) {
  __ZdlPv($2);
 }
 STACKTOP = sp;return;
}
function _emscripten_enum_espeak_EVENT_TYPE_espeakEVENT_LIST_TERMINATED() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 0;
}
function _emscripten_enum_espeak_EVENT_TYPE_espeakEVENT_WORD() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 1;
}
function _emscripten_enum_espeak_EVENT_TYPE_espeakEVENT_SENTENCE() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 2;
}
function _emscripten_enum_espeak_EVENT_TYPE_espeakEVENT_MARK() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 3;
}
function _emscripten_enum_espeak_EVENT_TYPE_espeakEVENT_PLAY() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 4;
}
function _emscripten_enum_espeak_EVENT_TYPE_espeakEVENT_END() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 5;
}
function _emscripten_enum_espeak_EVENT_TYPE_espeakEVENT_MSG_TERMINATED() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 6;
}
function _emscripten_enum_espeak_EVENT_TYPE_espeakEVENT_PHONEME() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 7;
}
function _emscripten_enum_espeak_EVENT_TYPE_espeakEVENT_SAMPLERATE() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 8;
}
function __ZN12EspeakWorker8setVoiceEPKcS1_hhh($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $12 = sp;
 $6 = $0;
 $7 = $1;
 $8 = $2;
 $9 = $3;
 $10 = $4;
 $11 = $5;
 $13 = $6;
 ;HEAP32[$12>>2]=0|0;HEAP32[$12+4>>2]=0|0;HEAP32[$12+8>>2]=0|0;HEAP32[$12+12>>2]=0|0;HEAP32[$12+16>>2]=0|0;HEAP32[$12+20>>2]=0|0;
 $14 = $7;
 HEAP32[$12>>2] = $14;
 $15 = $8;
 $16 = ((($12)) + 4|0);
 HEAP32[$16>>2] = $15;
 $17 = $9;
 $18 = ((($12)) + 12|0);
 HEAP8[$18>>0] = $17;
 $19 = $10;
 $20 = ((($12)) + 13|0);
 HEAP8[$20>>0] = $19;
 $21 = $11;
 $22 = ((($12)) + 14|0);
 HEAP8[$22>>0] = $21;
 (_espeak_SetVoiceByProperties($12)|0);
 $23 = (_espeak_GetCurrentVoice()|0);
 $24 = ((($13)) + 16|0);
 HEAP32[$24>>2] = $23;
 STACKTOP = sp;return;
}
function __ZN12EspeakWorker21getSizeOfEventStruct_Ev($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 STACKTOP = sp;return 36;
}
function __ZN12EspeakWorker6synth_EPKcPv($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $7 = $3;
 $8 = $5;
 $6 = $8;
 $9 = $6;
 _espeak_SetSynthCallback($9);
 $10 = ((($7)) + 12|0);
 $11 = HEAP32[$10>>2]|0;
 (_espeak_SetParameter(3,$11,0)|0);
 $12 = ((($7)) + 8|0);
 $13 = HEAP32[$12>>2]|0;
 (_espeak_SetParameter(1,$13,0)|0);
 $14 = ((($7)) + 16|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = ($15|0)!=(0|0);
 if ($16) {
  $17 = ((($7)) + 16|0);
  $18 = HEAP32[$17>>2]|0;
  (_espeak_SetVoiceByProperties($18)|0);
  $19 = $4;
  (_espeak_Synth($19,0,0,1,0,0,0,0)|0);
  _espeak_SetSynthCallback(0);
  STACKTOP = sp;return;
 } else {
  (_espeak_SetVoiceByName(27818)|0);
  $19 = $4;
  (_espeak_Synth($19,0,0,1,0,0,0,0)|0);
  _espeak_SetSynthCallback(0);
  STACKTOP = sp;return;
 }
}
function __ZN12EspeakWorkerC2Ev($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = ((($2)) + 8|0);
 HEAP32[$3>>2] = 175;
 $4 = ((($2)) + 12|0);
 HEAP32[$4>>2] = 50;
 $5 = ((($2)) + 16|0);
 HEAP32[$5>>2] = 0;
 $6 = HEAP32[22233]|0;
 $7 = ($6|0)!=(0);
 if (!($7)) {
  $8 = (_espeak_Initialize(2,100,0,32768)|0);
  HEAP32[22233] = $8;
 }
 $9 = HEAP32[22233]|0;
 $10 = ((($2)) + 4|0);
 HEAP32[$10>>2] = $9;
 $11 = (_espeak_ListVoices(0)|0);
 HEAP32[$2>>2] = $11;
 STACKTOP = sp;return;
}
function _emscripten_get_global_libc() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (88936|0);
}
function ___stdio_close($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 $1 = ((($0)) + 60|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (_dummy_485($2)|0);
 HEAP32[$vararg_buffer>>2] = $3;
 $4 = (___syscall6(6,($vararg_buffer|0))|0);
 $5 = (___syscall_ret($4)|0);
 STACKTOP = sp;return ($5|0);
}
function ___stdio_read($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $$cast = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $vararg_buffer = sp;
 $3 = sp + 16|0;
 HEAP32[$3>>2] = $1;
 $4 = ((($3)) + 4|0);
 $5 = ((($0)) + 48|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($6|0)!=(0);
 $8 = $7&1;
 $9 = (($2) - ($8))|0;
 HEAP32[$4>>2] = $9;
 $10 = ((($3)) + 8|0);
 $11 = ((($0)) + 44|0);
 $12 = HEAP32[$11>>2]|0;
 HEAP32[$10>>2] = $12;
 $13 = ((($3)) + 12|0);
 HEAP32[$13>>2] = $6;
 $14 = ((($0)) + 60|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = $3;
 HEAP32[$vararg_buffer>>2] = $15;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $16;
 $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
 HEAP32[$vararg_ptr2>>2] = 2;
 $17 = (___syscall145(145,($vararg_buffer|0))|0);
 $18 = (___syscall_ret($17)|0);
 $19 = ($18|0)<(1);
 if ($19) {
  $20 = $18 & 48;
  $21 = $20 ^ 16;
  $22 = HEAP32[$0>>2]|0;
  $23 = $22 | $21;
  HEAP32[$0>>2] = $23;
  $$0 = $18;
 } else {
  $24 = HEAP32[$4>>2]|0;
  $25 = ($18>>>0)>($24>>>0);
  if ($25) {
   $26 = (($18) - ($24))|0;
   $27 = HEAP32[$11>>2]|0;
   $28 = ((($0)) + 4|0);
   HEAP32[$28>>2] = $27;
   $$cast = $27;
   $29 = (($$cast) + ($26)|0);
   $30 = ((($0)) + 8|0);
   HEAP32[$30>>2] = $29;
   $31 = HEAP32[$5>>2]|0;
   $32 = ($31|0)==(0);
   if ($32) {
    $$0 = $2;
   } else {
    $33 = ((($$cast)) + 1|0);
    HEAP32[$28>>2] = $33;
    $34 = HEAP8[$$cast>>0]|0;
    $35 = (($2) + -1)|0;
    $36 = (($1) + ($35)|0);
    HEAP8[$36>>0] = $34;
    $$0 = $2;
   }
  } else {
   $$0 = $18;
  }
 }
 STACKTOP = sp;return ($$0|0);
}
function ___stdio_seek($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$pre = 0, $10 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr3 = 0, $vararg_ptr4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $vararg_buffer = sp;
 $3 = sp + 20|0;
 $4 = ((($0)) + 60|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = $3;
 HEAP32[$vararg_buffer>>2] = $5;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = 0;
 $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
 HEAP32[$vararg_ptr2>>2] = $1;
 $vararg_ptr3 = ((($vararg_buffer)) + 12|0);
 HEAP32[$vararg_ptr3>>2] = $6;
 $vararg_ptr4 = ((($vararg_buffer)) + 16|0);
 HEAP32[$vararg_ptr4>>2] = $2;
 $7 = (___syscall140(140,($vararg_buffer|0))|0);
 $8 = (___syscall_ret($7)|0);
 $9 = ($8|0)<(0);
 if ($9) {
  HEAP32[$3>>2] = -1;
  $10 = -1;
 } else {
  $$pre = HEAP32[$3>>2]|0;
  $10 = $$pre;
 }
 STACKTOP = sp;return ($10|0);
}
function ___syscall_ret($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($0>>>0)>(4294963200);
 if ($1) {
  $2 = (0 - ($0))|0;
  $3 = (___errno_location()|0);
  HEAP32[$3>>2] = $2;
  $$0 = -1;
 } else {
  $$0 = $0;
 }
 return ($$0|0);
}
function ___errno_location() {
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_pthread_self()|0);
 $1 = ((($0)) + 64|0);
 return ($1|0);
}
function _pthread_self() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (5432|0);
}
function _dummy_485($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return ($0|0);
}
function ___stdout_write($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $vararg_buffer = sp;
 $3 = sp + 16|0;
 $4 = ((($0)) + 36|0);
 HEAP32[$4>>2] = 9;
 $5 = HEAP32[$0>>2]|0;
 $6 = $5 & 64;
 $7 = ($6|0)==(0);
 if ($7) {
  $8 = ((($0)) + 60|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = $3;
  HEAP32[$vararg_buffer>>2] = $9;
  $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr1>>2] = 21523;
  $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
  HEAP32[$vararg_ptr2>>2] = $10;
  $11 = (___syscall54(54,($vararg_buffer|0))|0);
  $12 = ($11|0)==(0);
  if (!($12)) {
   $13 = ((($0)) + 75|0);
   HEAP8[$13>>0] = -1;
  }
 }
 $14 = (___stdio_write($0,$1,$2)|0);
 STACKTOP = sp;return ($14|0);
}
function ___stdio_write($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $$04756 = 0, $$04855 = 0, $$04954 = 0, $$051 = 0, $$1 = 0, $$150 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer3 = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0;
 var $vararg_ptr6 = 0, $vararg_ptr7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer = sp;
 $3 = sp + 32|0;
 $4 = ((($0)) + 28|0);
 $5 = HEAP32[$4>>2]|0;
 HEAP32[$3>>2] = $5;
 $6 = ((($3)) + 4|0);
 $7 = ((($0)) + 20|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = (($8) - ($5))|0;
 HEAP32[$6>>2] = $9;
 $10 = ((($3)) + 8|0);
 HEAP32[$10>>2] = $1;
 $11 = ((($3)) + 12|0);
 HEAP32[$11>>2] = $2;
 $12 = (($9) + ($2))|0;
 $13 = ((($0)) + 60|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = $3;
 HEAP32[$vararg_buffer>>2] = $14;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $15;
 $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
 HEAP32[$vararg_ptr2>>2] = 2;
 $16 = (___syscall146(146,($vararg_buffer|0))|0);
 $17 = (___syscall_ret($16)|0);
 $18 = ($12|0)==($17|0);
 L1: do {
  if ($18) {
   label = 3;
  } else {
   $$04756 = 2;$$04855 = $12;$$04954 = $3;$26 = $17;
   while(1) {
    $27 = ($26|0)<(0);
    if ($27) {
     break;
    }
    $35 = (($$04855) - ($26))|0;
    $36 = ((($$04954)) + 4|0);
    $37 = HEAP32[$36>>2]|0;
    $38 = ($26>>>0)>($37>>>0);
    $39 = ((($$04954)) + 8|0);
    $$150 = $38 ? $39 : $$04954;
    $40 = $38 << 31 >> 31;
    $$1 = (($40) + ($$04756))|0;
    $41 = $38 ? $37 : 0;
    $$0 = (($26) - ($41))|0;
    $42 = HEAP32[$$150>>2]|0;
    $43 = (($42) + ($$0)|0);
    HEAP32[$$150>>2] = $43;
    $44 = ((($$150)) + 4|0);
    $45 = HEAP32[$44>>2]|0;
    $46 = (($45) - ($$0))|0;
    HEAP32[$44>>2] = $46;
    $47 = HEAP32[$13>>2]|0;
    $48 = $$150;
    HEAP32[$vararg_buffer3>>2] = $47;
    $vararg_ptr6 = ((($vararg_buffer3)) + 4|0);
    HEAP32[$vararg_ptr6>>2] = $48;
    $vararg_ptr7 = ((($vararg_buffer3)) + 8|0);
    HEAP32[$vararg_ptr7>>2] = $$1;
    $49 = (___syscall146(146,($vararg_buffer3|0))|0);
    $50 = (___syscall_ret($49)|0);
    $51 = ($35|0)==($50|0);
    if ($51) {
     label = 3;
     break L1;
    } else {
     $$04756 = $$1;$$04855 = $35;$$04954 = $$150;$26 = $50;
    }
   }
   $28 = ((($0)) + 16|0);
   HEAP32[$28>>2] = 0;
   HEAP32[$4>>2] = 0;
   HEAP32[$7>>2] = 0;
   $29 = HEAP32[$0>>2]|0;
   $30 = $29 | 32;
   HEAP32[$0>>2] = $30;
   $31 = ($$04756|0)==(2);
   if ($31) {
    $$051 = 0;
   } else {
    $32 = ((($$04954)) + 4|0);
    $33 = HEAP32[$32>>2]|0;
    $34 = (($2) - ($33))|0;
    $$051 = $34;
   }
  }
 } while(0);
 if ((label|0) == 3) {
  $19 = ((($0)) + 44|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = ((($0)) + 48|0);
  $22 = HEAP32[$21>>2]|0;
  $23 = (($20) + ($22)|0);
  $24 = ((($0)) + 16|0);
  HEAP32[$24>>2] = $23;
  $25 = $20;
  HEAP32[$4>>2] = $25;
  HEAP32[$7>>2] = $25;
  $$051 = $2;
 }
 STACKTOP = sp;return ($$051|0);
}
function ___randname($0) {
 $0 = $0|0;
 var $$01112 = 0, $$013 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $exitcond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp;
 (___clock_gettime(0,($1|0))|0);
 $2 = ((($1)) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3*65537)|0;
 $5 = $1;
 $6 = $5 >>> 4;
 $7 = $0;
 $8 = (($6) + ($7))|0;
 $9 = $4 ^ $8;
 $$01112 = 0;$$013 = $9;
 while(1) {
  $10 = $$013 & 15;
  $11 = (($10) + 65)|0;
  $12 = $$013 << 1;
  $13 = $12 & 32;
  $14 = $11 | $13;
  $15 = $14&255;
  $16 = (($0) + ($$01112)|0);
  HEAP8[$16>>0] = $15;
  $17 = (($$01112) + 1)|0;
  $18 = $$013 >>> 5;
  $exitcond = ($17|0)==(6);
  if ($exitcond) {
   break;
  } else {
   $$01112 = $17;$$013 = $18;
  }
 }
 STACKTOP = sp;return ($0|0);
}
function ___mkostemps($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $$1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $or$cond = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 $3 = (_strlen($0)|0);
 $4 = ($3>>>0)<(6);
 $5 = (($3) + -6)|0;
 $6 = ($5>>>0)<($1>>>0);
 $or$cond = $4 | $6;
 L1: do {
  if ($or$cond) {
   label = 3;
  } else {
   $7 = (($0) + ($3)|0);
   $8 = (0 - ($1))|0;
   $9 = (($7) + ($8)|0);
   $10 = ((($9)) + -6|0);
   $11 = (_memcmp($10,27826,6)|0);
   $12 = ($11|0)==(0);
   if ($12) {
    $14 = $2 & -2097348;
    $15 = $14 | 194;
    $$0 = 100;
    while(1) {
     (___randname($10)|0);
     HEAP32[$vararg_buffer>>2] = 384;
     $16 = (_open($0,$15,$vararg_buffer)|0);
     $17 = ($16|0)>(-1);
     if ($17) {
      $$1 = $16;
      break L1;
     }
     $18 = (($$0) + -1)|0;
     $19 = ($18|0)==(0);
     if ($19) {
      break;
     }
     $20 = (___errno_location()|0);
     $21 = HEAP32[$20>>2]|0;
     $22 = ($21|0)==(17);
     if ($22) {
      $$0 = $18;
     } else {
      break;
     }
    }
    ;HEAP8[$10>>0]=HEAP8[27826>>0]|0;HEAP8[$10+1>>0]=HEAP8[27826+1>>0]|0;HEAP8[$10+2>>0]=HEAP8[27826+2>>0]|0;HEAP8[$10+3>>0]=HEAP8[27826+3>>0]|0;HEAP8[$10+4>>0]=HEAP8[27826+4>>0]|0;HEAP8[$10+5>>0]=HEAP8[27826+5>>0]|0;
    $$1 = -1;
   } else {
    label = 3;
   }
  }
 } while(0);
 if ((label|0) == 3) {
  $13 = (___errno_location()|0);
  HEAP32[$13>>2] = 22;
  $$1 = -1;
 }
 STACKTOP = sp;return ($$1|0);
}
function _strlen($0) {
 $0 = $0|0;
 var $$0 = 0, $$014 = 0, $$015$lcssa = 0, $$01518 = 0, $$1$lcssa = 0, $$pn = 0, $$pn29 = 0, $$pre = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0;
 var $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = $0;
 $2 = $1 & 3;
 $3 = ($2|0)==(0);
 L1: do {
  if ($3) {
   $$015$lcssa = $0;
   label = 4;
  } else {
   $$01518 = $0;$22 = $1;
   while(1) {
    $4 = HEAP8[$$01518>>0]|0;
    $5 = ($4<<24>>24)==(0);
    if ($5) {
     $$pn = $22;
     break L1;
    }
    $6 = ((($$01518)) + 1|0);
    $7 = $6;
    $8 = $7 & 3;
    $9 = ($8|0)==(0);
    if ($9) {
     $$015$lcssa = $6;
     label = 4;
     break;
    } else {
     $$01518 = $6;$22 = $7;
    }
   }
  }
 } while(0);
 if ((label|0) == 4) {
  $$0 = $$015$lcssa;
  while(1) {
   $10 = HEAP32[$$0>>2]|0;
   $11 = (($10) + -16843009)|0;
   $12 = $10 & -2139062144;
   $13 = $12 ^ -2139062144;
   $14 = $13 & $11;
   $15 = ($14|0)==(0);
   $16 = ((($$0)) + 4|0);
   if ($15) {
    $$0 = $16;
   } else {
    break;
   }
  }
  $17 = $10&255;
  $18 = ($17<<24>>24)==(0);
  if ($18) {
   $$1$lcssa = $$0;
  } else {
   $$pn29 = $$0;
   while(1) {
    $19 = ((($$pn29)) + 1|0);
    $$pre = HEAP8[$19>>0]|0;
    $20 = ($$pre<<24>>24)==(0);
    if ($20) {
     $$1$lcssa = $19;
     break;
    } else {
     $$pn29 = $19;
    }
   }
  }
  $21 = $$1$lcssa;
  $$pn = $21;
 }
 $$014 = (($$pn) - ($1))|0;
 return ($$014|0);
}
function _memcmp($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$01318 = 0, $$01417 = 0, $$019 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ($2|0)==(0);
 L1: do {
  if ($3) {
   $14 = 0;
  } else {
   $$01318 = $0;$$01417 = $2;$$019 = $1;
   while(1) {
    $4 = HEAP8[$$01318>>0]|0;
    $5 = HEAP8[$$019>>0]|0;
    $6 = ($4<<24>>24)==($5<<24>>24);
    if (!($6)) {
     break;
    }
    $7 = (($$01417) + -1)|0;
    $8 = ((($$01318)) + 1|0);
    $9 = ((($$019)) + 1|0);
    $10 = ($7|0)==(0);
    if ($10) {
     $14 = 0;
     break L1;
    } else {
     $$01318 = $8;$$01417 = $7;$$019 = $9;
    }
   }
   $11 = $4&255;
   $12 = $5&255;
   $13 = (($11) - ($12))|0;
   $14 = $13;
  }
 } while(0);
 return ($14|0);
}
function _open($0,$1,$varargs) {
 $0 = $0|0;
 $1 = $1|0;
 $varargs = $varargs|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $arglist_current = 0, $arglist_next = 0;
 var $expanded = 0, $expanded2 = 0, $expanded4 = 0, $expanded5 = 0, $expanded6 = 0, $or$cond14 = 0, $vararg_buffer = 0, $vararg_buffer3 = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr6 = 0, $vararg_ptr7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer = sp;
 $2 = sp + 32|0;
 $3 = $1 & 4194368;
 $4 = ($3|0)==(0);
 if ($4) {
  $$0 = 0;
 } else {
  HEAP32[$2>>2] = $varargs;
  $arglist_current = HEAP32[$2>>2]|0;
  $5 = $arglist_current;
  $6 = ((0) + 4|0);
  $expanded2 = $6;
  $expanded = (($expanded2) - 1)|0;
  $7 = (($5) + ($expanded))|0;
  $8 = ((0) + 4|0);
  $expanded6 = $8;
  $expanded5 = (($expanded6) - 1)|0;
  $expanded4 = $expanded5 ^ -1;
  $9 = $7 & $expanded4;
  $10 = $9;
  $11 = HEAP32[$10>>2]|0;
  $arglist_next = ((($10)) + 4|0);
  HEAP32[$2>>2] = $arglist_next;
  $$0 = $11;
 }
 $12 = $0;
 $13 = $1 | 32768;
 HEAP32[$vararg_buffer>>2] = $12;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $13;
 $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
 HEAP32[$vararg_ptr2>>2] = $$0;
 $14 = (___syscall5(5,($vararg_buffer|0))|0);
 $15 = ($14|0)<(0);
 $16 = $1 & 524288;
 $17 = ($16|0)==(0);
 $or$cond14 = $17 | $15;
 if (!($or$cond14)) {
  HEAP32[$vararg_buffer3>>2] = $14;
  $vararg_ptr6 = ((($vararg_buffer3)) + 4|0);
  HEAP32[$vararg_ptr6>>2] = 2;
  $vararg_ptr7 = ((($vararg_buffer3)) + 8|0);
  HEAP32[$vararg_ptr7>>2] = 1;
  (___syscall221(221,($vararg_buffer3|0))|0);
 }
 $18 = (___syscall_ret($14)|0);
 STACKTOP = sp;return ($18|0);
}
function _mkstemp($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (___mkostemps($0,0,0)|0);
 return ($1|0);
}
function _stat($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 $2 = $0;
 $3 = $1;
 HEAP32[$vararg_buffer>>2] = $2;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $3;
 $4 = (___syscall195(195,($vararg_buffer|0))|0);
 $5 = (___syscall_ret($4)|0);
 STACKTOP = sp;return ($5|0);
}
function _poll($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, $5 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 $3 = $0;
 HEAP32[$vararg_buffer>>2] = $3;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $1;
 $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
 HEAP32[$vararg_ptr2>>2] = $2;
 $4 = (___syscall168(168,($vararg_buffer|0))|0);
 $5 = (___syscall_ret($4)|0);
 STACKTOP = sp;return ($5|0);
}
function _rand() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = 41768;
 $1 = $0;
 $2 = HEAP32[$1>>2]|0;
 $3 = (($0) + 4)|0;
 $4 = $3;
 $5 = HEAP32[$4>>2]|0;
 $6 = (___muldi3(($2|0),($5|0),1284865837,1481765933)|0);
 $7 = tempRet0;
 $8 = (_i64Add(($6|0),($7|0),1,0)|0);
 $9 = tempRet0;
 $10 = 41768;
 $11 = $10;
 HEAP32[$11>>2] = $8;
 $12 = (($10) + 4)|0;
 $13 = $12;
 HEAP32[$13>>2] = $9;
 $14 = (_bitshift64Lshr(($8|0),($9|0),33)|0);
 $15 = tempRet0;
 return ($14|0);
}
function _strspn($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $$01925 = 0, $$020 = 0, $$1$lcssa = 0, $$123 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $div = 0, $div21 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $2 = sp;
 ;HEAP32[$2>>2]=0|0;HEAP32[$2+4>>2]=0|0;HEAP32[$2+8>>2]=0|0;HEAP32[$2+12>>2]=0|0;HEAP32[$2+16>>2]=0|0;HEAP32[$2+20>>2]=0|0;HEAP32[$2+24>>2]=0|0;HEAP32[$2+28>>2]=0|0;
 $3 = HEAP8[$1>>0]|0;
 $4 = ($3<<24>>24)==(0);
 do {
  if ($4) {
   $$0 = 0;
  } else {
   $5 = ((($1)) + 1|0);
   $6 = HEAP8[$5>>0]|0;
   $7 = ($6<<24>>24)==(0);
   if ($7) {
    $$020 = $0;
    while(1) {
     $8 = HEAP8[$$020>>0]|0;
     $9 = ($8<<24>>24)==($3<<24>>24);
     $10 = ((($$020)) + 1|0);
     if ($9) {
      $$020 = $10;
     } else {
      break;
     }
    }
    $11 = $$020;
    $12 = $0;
    $13 = (($11) - ($12))|0;
    $$0 = $13;
    break;
   } else {
    $$01925 = $1;$17 = $3;
   }
   while(1) {
    $16 = $17 & 31;
    $18 = $16&255;
    $19 = 1 << $18;
    $div21 = ($17&255) >>> 5;
    $20 = $div21&255;
    $21 = (($2) + ($20<<2)|0);
    $22 = HEAP32[$21>>2]|0;
    $23 = $22 | $19;
    HEAP32[$21>>2] = $23;
    $24 = ((($$01925)) + 1|0);
    $25 = HEAP8[$24>>0]|0;
    $26 = ($25<<24>>24)==(0);
    if ($26) {
     break;
    } else {
     $$01925 = $24;$17 = $25;
    }
   }
   $14 = HEAP8[$0>>0]|0;
   $15 = ($14<<24>>24)==(0);
   L10: do {
    if ($15) {
     $$1$lcssa = $0;
    } else {
     $$123 = $0;$27 = $14;
     while(1) {
      $div = ($27&255) >>> 5;
      $28 = $div&255;
      $29 = (($2) + ($28<<2)|0);
      $30 = HEAP32[$29>>2]|0;
      $31 = $27 & 31;
      $32 = $31&255;
      $33 = 1 << $32;
      $34 = $30 & $33;
      $35 = ($34|0)==(0);
      if ($35) {
       $$1$lcssa = $$123;
       break L10;
      }
      $36 = ((($$123)) + 1|0);
      $37 = HEAP8[$36>>0]|0;
      $38 = ($37<<24>>24)==(0);
      if ($38) {
       $$1$lcssa = $36;
       break;
      } else {
       $$123 = $36;$27 = $37;
      }
     }
    }
   } while(0);
   $39 = $$1$lcssa;
   $40 = $0;
   $41 = (($39) - ($40))|0;
   $$0 = $41;
  }
 } while(0);
 STACKTOP = sp;return ($$0|0);
}
function _tolower($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (_isupper($0)|0);
 $2 = ($1|0)==(0);
 $3 = $0 | 32;
 $$0 = $2 ? $0 : $3;
 return ($$0|0);
}
function _isupper($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (($0) + -65)|0;
 $2 = ($1>>>0)<(26);
 $3 = $2&1;
 return ($3|0);
}
function _memchr($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0$lcssa = 0, $$035$lcssa = 0, $$035$lcssa65 = 0, $$03555 = 0, $$036$lcssa = 0, $$036$lcssa64 = 0, $$03654 = 0, $$046 = 0, $$137$lcssa = 0, $$13745 = 0, $$140 = 0, $$2 = 0, $$23839 = 0, $$3 = 0, $$lcssa = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0;
 var $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0;
 var $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond53 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = $1 & 255;
 $4 = $0;
 $5 = $4 & 3;
 $6 = ($5|0)!=(0);
 $7 = ($2|0)!=(0);
 $or$cond53 = $7 & $6;
 L1: do {
  if ($or$cond53) {
   $8 = $1&255;
   $$03555 = $0;$$03654 = $2;
   while(1) {
    $9 = HEAP8[$$03555>>0]|0;
    $10 = ($9<<24>>24)==($8<<24>>24);
    if ($10) {
     $$035$lcssa65 = $$03555;$$036$lcssa64 = $$03654;
     label = 6;
     break L1;
    }
    $11 = ((($$03555)) + 1|0);
    $12 = (($$03654) + -1)|0;
    $13 = $11;
    $14 = $13 & 3;
    $15 = ($14|0)!=(0);
    $16 = ($12|0)!=(0);
    $or$cond = $16 & $15;
    if ($or$cond) {
     $$03555 = $11;$$03654 = $12;
    } else {
     $$035$lcssa = $11;$$036$lcssa = $12;$$lcssa = $16;
     label = 5;
     break;
    }
   }
  } else {
   $$035$lcssa = $0;$$036$lcssa = $2;$$lcssa = $7;
   label = 5;
  }
 } while(0);
 if ((label|0) == 5) {
  if ($$lcssa) {
   $$035$lcssa65 = $$035$lcssa;$$036$lcssa64 = $$036$lcssa;
   label = 6;
  } else {
   $$2 = $$035$lcssa;$$3 = 0;
  }
 }
 L8: do {
  if ((label|0) == 6) {
   $17 = HEAP8[$$035$lcssa65>>0]|0;
   $18 = $1&255;
   $19 = ($17<<24>>24)==($18<<24>>24);
   if ($19) {
    $$2 = $$035$lcssa65;$$3 = $$036$lcssa64;
   } else {
    $20 = Math_imul($3, 16843009)|0;
    $21 = ($$036$lcssa64>>>0)>(3);
    L11: do {
     if ($21) {
      $$046 = $$035$lcssa65;$$13745 = $$036$lcssa64;
      while(1) {
       $22 = HEAP32[$$046>>2]|0;
       $23 = $22 ^ $20;
       $24 = (($23) + -16843009)|0;
       $25 = $23 & -2139062144;
       $26 = $25 ^ -2139062144;
       $27 = $26 & $24;
       $28 = ($27|0)==(0);
       if (!($28)) {
        break;
       }
       $29 = ((($$046)) + 4|0);
       $30 = (($$13745) + -4)|0;
       $31 = ($30>>>0)>(3);
       if ($31) {
        $$046 = $29;$$13745 = $30;
       } else {
        $$0$lcssa = $29;$$137$lcssa = $30;
        label = 11;
        break L11;
       }
      }
      $$140 = $$046;$$23839 = $$13745;
     } else {
      $$0$lcssa = $$035$lcssa65;$$137$lcssa = $$036$lcssa64;
      label = 11;
     }
    } while(0);
    if ((label|0) == 11) {
     $32 = ($$137$lcssa|0)==(0);
     if ($32) {
      $$2 = $$0$lcssa;$$3 = 0;
      break;
     } else {
      $$140 = $$0$lcssa;$$23839 = $$137$lcssa;
     }
    }
    while(1) {
     $33 = HEAP8[$$140>>0]|0;
     $34 = ($33<<24>>24)==($18<<24>>24);
     if ($34) {
      $$2 = $$140;$$3 = $$23839;
      break L8;
     }
     $35 = ((($$140)) + 1|0);
     $36 = (($$23839) + -1)|0;
     $37 = ($36|0)==(0);
     if ($37) {
      $$2 = $35;$$3 = 0;
      break;
     } else {
      $$140 = $35;$$23839 = $36;
     }
    }
   }
  }
 } while(0);
 $38 = ($$3|0)!=(0);
 $39 = $38 ? $$2 : 0;
 return ($39|0);
}
function _wcschr($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $$09 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($1|0)==(0);
 if ($2) {
  $3 = (_wcslen($0)|0);
  $4 = (($0) + ($3<<2)|0);
  $$0 = $4;
 } else {
  $$09 = $0;
  while(1) {
   $5 = HEAP32[$$09>>2]|0;
   $6 = ($5|0)==(0);
   $7 = ($5|0)==($1|0);
   $or$cond = $6 | $7;
   $8 = ((($$09)) + 4|0);
   if ($or$cond) {
    break;
   } else {
    $$09 = $8;
   }
  }
  $9 = ($5|0)!=(0);
  $10 = $9 ? $$09 : 0;
  $$0 = $10;
 }
 return ($$0|0);
}
function _wcslen($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $$0 = $0;
 while(1) {
  $1 = HEAP32[$$0>>2]|0;
  $2 = ($1|0)==(0);
  $3 = ((($$0)) + 4|0);
  if ($2) {
   break;
  } else {
   $$0 = $3;
  }
 }
 $4 = $$0;
 $5 = $0;
 $6 = (($4) - ($5))|0;
 $7 = $6 >> 2;
 return ($7|0);
}
function _strcspn($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $$01823 = 0, $$019$lcssa = 0, $$01921 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $div = 0, $div20 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $2 = sp;
 $3 = HEAP8[$1>>0]|0;
 $4 = ($3<<24>>24)==(0);
 if ($4) {
  label = 3;
 } else {
  $5 = ((($1)) + 1|0);
  $6 = HEAP8[$5>>0]|0;
  $7 = ($6<<24>>24)==(0);
  if ($7) {
   label = 3;
  } else {
   ;HEAP32[$2>>2]=0|0;HEAP32[$2+4>>2]=0|0;HEAP32[$2+8>>2]=0|0;HEAP32[$2+12>>2]=0|0;HEAP32[$2+16>>2]=0|0;HEAP32[$2+20>>2]=0|0;HEAP32[$2+24>>2]=0|0;HEAP32[$2+28>>2]=0|0;
   $$01823 = $1;$16 = $3;
   while(1) {
    $15 = $16 & 31;
    $17 = $15&255;
    $18 = 1 << $17;
    $div20 = ($16&255) >>> 5;
    $19 = $div20&255;
    $20 = (($2) + ($19<<2)|0);
    $21 = HEAP32[$20>>2]|0;
    $22 = $21 | $18;
    HEAP32[$20>>2] = $22;
    $23 = ((($$01823)) + 1|0);
    $24 = HEAP8[$23>>0]|0;
    $25 = ($24<<24>>24)==(0);
    if ($25) {
     break;
    } else {
     $$01823 = $23;$16 = $24;
    }
   }
   $13 = HEAP8[$0>>0]|0;
   $14 = ($13<<24>>24)==(0);
   L7: do {
    if ($14) {
     $$019$lcssa = $0;
    } else {
     $$01921 = $0;$26 = $13;
     while(1) {
      $div = ($26&255) >>> 5;
      $27 = $div&255;
      $28 = (($2) + ($27<<2)|0);
      $29 = HEAP32[$28>>2]|0;
      $30 = $26 & 31;
      $31 = $30&255;
      $32 = 1 << $31;
      $33 = $29 & $32;
      $34 = ($33|0)==(0);
      if (!($34)) {
       $$019$lcssa = $$01921;
       break L7;
      }
      $35 = ((($$01921)) + 1|0);
      $36 = HEAP8[$35>>0]|0;
      $37 = ($36<<24>>24)==(0);
      if ($37) {
       $$019$lcssa = $35;
       break;
      } else {
       $$01921 = $35;$26 = $36;
      }
     }
    }
   } while(0);
   $38 = $$019$lcssa;
   $39 = $0;
   $40 = (($38) - ($39))|0;
   $$0 = $40;
  }
 }
 if ((label|0) == 3) {
  $8 = $3 << 24 >> 24;
  $9 = (___strchrnul($0,$8)|0);
  $10 = $9;
  $11 = $0;
  $12 = (($10) - ($11))|0;
  $$0 = $12;
 }
 STACKTOP = sp;return ($$0|0);
}
function ___strchrnul($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $$029$lcssa = 0, $$02936 = 0, $$030$lcssa = 0, $$03039 = 0, $$1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond33 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = $1 & 255;
 $3 = ($2|0)==(0);
 L1: do {
  if ($3) {
   $8 = (_strlen($0)|0);
   $9 = (($0) + ($8)|0);
   $$0 = $9;
  } else {
   $4 = $0;
   $5 = $4 & 3;
   $6 = ($5|0)==(0);
   if ($6) {
    $$030$lcssa = $0;
   } else {
    $7 = $1&255;
    $$03039 = $0;
    while(1) {
     $10 = HEAP8[$$03039>>0]|0;
     $11 = ($10<<24>>24)==(0);
     $12 = ($10<<24>>24)==($7<<24>>24);
     $or$cond = $11 | $12;
     if ($or$cond) {
      $$0 = $$03039;
      break L1;
     }
     $13 = ((($$03039)) + 1|0);
     $14 = $13;
     $15 = $14 & 3;
     $16 = ($15|0)==(0);
     if ($16) {
      $$030$lcssa = $13;
      break;
     } else {
      $$03039 = $13;
     }
    }
   }
   $17 = Math_imul($2, 16843009)|0;
   $18 = HEAP32[$$030$lcssa>>2]|0;
   $19 = (($18) + -16843009)|0;
   $20 = $18 & -2139062144;
   $21 = $20 ^ -2139062144;
   $22 = $21 & $19;
   $23 = ($22|0)==(0);
   L10: do {
    if ($23) {
     $$02936 = $$030$lcssa;$25 = $18;
     while(1) {
      $24 = $25 ^ $17;
      $26 = (($24) + -16843009)|0;
      $27 = $24 & -2139062144;
      $28 = $27 ^ -2139062144;
      $29 = $28 & $26;
      $30 = ($29|0)==(0);
      if (!($30)) {
       $$029$lcssa = $$02936;
       break L10;
      }
      $31 = ((($$02936)) + 4|0);
      $32 = HEAP32[$31>>2]|0;
      $33 = (($32) + -16843009)|0;
      $34 = $32 & -2139062144;
      $35 = $34 ^ -2139062144;
      $36 = $35 & $33;
      $37 = ($36|0)==(0);
      if ($37) {
       $$02936 = $31;$25 = $32;
      } else {
       $$029$lcssa = $31;
       break;
      }
     }
    } else {
     $$029$lcssa = $$030$lcssa;
    }
   } while(0);
   $38 = $1&255;
   $$1 = $$029$lcssa;
   while(1) {
    $39 = HEAP8[$$1>>0]|0;
    $40 = ($39<<24>>24)==(0);
    $41 = ($39<<24>>24)==($38<<24>>24);
    $or$cond33 = $40 | $41;
    $42 = ((($$1)) + 1|0);
    if ($or$cond33) {
     $$0 = $$1;
     break;
    } else {
     $$1 = $42;
    }
   }
  }
 } while(0);
 return ($$0|0);
}
function _strerror($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (_pthread_self()|0);
 $2 = ((($1)) + 188|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (___strerror_l($0,$3)|0);
 return ($4|0);
}
function ___strerror_l($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$012$lcssa = 0, $$01214 = 0, $$016 = 0, $$113 = 0, $$115 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $$016 = 0;
 while(1) {
  $3 = (27833 + ($$016)|0);
  $4 = HEAP8[$3>>0]|0;
  $5 = $4&255;
  $6 = ($5|0)==($0|0);
  if ($6) {
   label = 2;
   break;
  }
  $7 = (($$016) + 1)|0;
  $8 = ($7|0)==(87);
  if ($8) {
   $$01214 = 27921;$$115 = 87;
   label = 5;
   break;
  } else {
   $$016 = $7;
  }
 }
 if ((label|0) == 2) {
  $2 = ($$016|0)==(0);
  if ($2) {
   $$012$lcssa = 27921;
  } else {
   $$01214 = 27921;$$115 = $$016;
   label = 5;
  }
 }
 if ((label|0) == 5) {
  while(1) {
   label = 0;
   $$113 = $$01214;
   while(1) {
    $9 = HEAP8[$$113>>0]|0;
    $10 = ($9<<24>>24)==(0);
    $11 = ((($$113)) + 1|0);
    if ($10) {
     break;
    } else {
     $$113 = $11;
    }
   }
   $12 = (($$115) + -1)|0;
   $13 = ($12|0)==(0);
   if ($13) {
    $$012$lcssa = $11;
    break;
   } else {
    $$01214 = $11;$$115 = $12;
    label = 5;
   }
  }
 }
 $14 = ((($1)) + 20|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = (___lctrans($$012$lcssa,$15)|0);
 return ($16|0);
}
function ___lctrans($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (___lctrans_impl($0,$1)|0);
 return ($2|0);
}
function ___lctrans_impl($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($1|0)==(0|0);
 if ($2) {
  $$0 = 0;
 } else {
  $3 = HEAP32[$1>>2]|0;
  $4 = ((($1)) + 4|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = (___mo_lookup($3,$5,$0)|0);
  $$0 = $6;
 }
 $7 = ($$0|0)!=(0|0);
 $8 = $7 ? $$0 : $0;
 return ($8|0);
}
function ___mo_lookup($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$ = 0, $$$i = 0, $$$i105 = 0, $$$i106 = 0, $$$i107 = 0, $$$i108 = 0, $$$i109 = 0, $$$i110 = 0, $$090 = 0, $$094 = 0, $$191 = 0, $$195 = 0, $$4 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0;
 var $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0;
 var $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0;
 var $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond102 = 0, $or$cond104 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = HEAP32[$0>>2]|0;
 $4 = ((($0)) + 8|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($3|0)==(-1794895138);
 $7 = (_llvm_bswap_i32(($5|0))|0);
 $$$i = $6 ? $5 : $7;
 $8 = ((($0)) + 12|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = (_llvm_bswap_i32(($9|0))|0);
 $$$i110 = $6 ? $9 : $10;
 $11 = ((($0)) + 16|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = (_llvm_bswap_i32(($12|0))|0);
 $$$i109 = $6 ? $12 : $13;
 $14 = $1 >>> 2;
 $15 = ($$$i>>>0)<($14>>>0);
 L1: do {
  if ($15) {
   $16 = $$$i << 2;
   $17 = (($1) - ($16))|0;
   $18 = ($$$i110>>>0)<($17>>>0);
   $19 = ($$$i109>>>0)<($17>>>0);
   $or$cond = $18 & $19;
   if ($or$cond) {
    $20 = $$$i109 | $$$i110;
    $21 = $20 & 3;
    $22 = ($21|0)==(0);
    if ($22) {
     $23 = $$$i110 >>> 2;
     $24 = $$$i109 >>> 2;
     $$090 = 0;$$094 = $$$i;
     while(1) {
      $25 = $$094 >>> 1;
      $26 = (($$090) + ($25))|0;
      $27 = $26 << 1;
      $28 = (($27) + ($23))|0;
      $29 = (($0) + ($28<<2)|0);
      $30 = HEAP32[$29>>2]|0;
      $31 = (_llvm_bswap_i32(($30|0))|0);
      $$$i108 = $6 ? $30 : $31;
      $32 = (($28) + 1)|0;
      $33 = (($0) + ($32<<2)|0);
      $34 = HEAP32[$33>>2]|0;
      $35 = (_llvm_bswap_i32(($34|0))|0);
      $$$i107 = $6 ? $34 : $35;
      $36 = ($$$i107>>>0)<($1>>>0);
      $37 = (($1) - ($$$i107))|0;
      $38 = ($$$i108>>>0)<($37>>>0);
      $or$cond102 = $36 & $38;
      if (!($or$cond102)) {
       $$4 = 0;
       break L1;
      }
      $39 = (($$$i107) + ($$$i108))|0;
      $40 = (($0) + ($39)|0);
      $41 = HEAP8[$40>>0]|0;
      $42 = ($41<<24>>24)==(0);
      if (!($42)) {
       $$4 = 0;
       break L1;
      }
      $43 = (($0) + ($$$i107)|0);
      $44 = (_strcmp($2,$43)|0);
      $45 = ($44|0)==(0);
      if ($45) {
       break;
      }
      $62 = ($$094|0)==(1);
      if ($62) {
       $$4 = 0;
       break L1;
      }
      $63 = (($$094) - ($25))|0;
      $64 = ($44|0)<(0);
      $$195 = $64 ? $25 : $63;
      $$191 = $64 ? $$090 : $26;
      $$090 = $$191;$$094 = $$195;
     }
     $46 = (($27) + ($24))|0;
     $47 = (($0) + ($46<<2)|0);
     $48 = HEAP32[$47>>2]|0;
     $49 = (_llvm_bswap_i32(($48|0))|0);
     $$$i106 = $6 ? $48 : $49;
     $50 = (($46) + 1)|0;
     $51 = (($0) + ($50<<2)|0);
     $52 = HEAP32[$51>>2]|0;
     $53 = (_llvm_bswap_i32(($52|0))|0);
     $$$i105 = $6 ? $52 : $53;
     $54 = ($$$i105>>>0)<($1>>>0);
     $55 = (($1) - ($$$i105))|0;
     $56 = ($$$i106>>>0)<($55>>>0);
     $or$cond104 = $54 & $56;
     if ($or$cond104) {
      $57 = (($0) + ($$$i105)|0);
      $58 = (($$$i105) + ($$$i106))|0;
      $59 = (($0) + ($58)|0);
      $60 = HEAP8[$59>>0]|0;
      $61 = ($60<<24>>24)==(0);
      $$ = $61 ? $57 : 0;
      $$4 = $$;
     } else {
      $$4 = 0;
     }
    } else {
     $$4 = 0;
    }
   } else {
    $$4 = 0;
   }
  } else {
   $$4 = 0;
  }
 } while(0);
 return ($$4|0);
}
function _strcmp($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$011 = 0, $$0710 = 0, $$lcssa = 0, $$lcssa8 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $2 = HEAP8[$0>>0]|0;
 $3 = HEAP8[$1>>0]|0;
 $4 = ($2<<24>>24)!=($3<<24>>24);
 $5 = ($2<<24>>24)==(0);
 $or$cond9 = $5 | $4;
 if ($or$cond9) {
  $$lcssa = $3;$$lcssa8 = $2;
 } else {
  $$011 = $1;$$0710 = $0;
  while(1) {
   $6 = ((($$0710)) + 1|0);
   $7 = ((($$011)) + 1|0);
   $8 = HEAP8[$6>>0]|0;
   $9 = HEAP8[$7>>0]|0;
   $10 = ($8<<24>>24)!=($9<<24>>24);
   $11 = ($8<<24>>24)==(0);
   $or$cond = $11 | $10;
   if ($or$cond) {
    $$lcssa = $9;$$lcssa8 = $8;
    break;
   } else {
    $$011 = $7;$$0710 = $6;
   }
  }
 }
 $12 = $$lcssa8&255;
 $13 = $$lcssa&255;
 $14 = (($12) - ($13))|0;
 return ($14|0);
}
function _strtok($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $$010 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($0|0)==(0|0);
 if ($2) {
  $3 = HEAP32[22250]|0;
  $4 = ($3|0)==(0|0);
  if ($4) {
   $$0 = 0;
  } else {
   $$010 = $3;
   label = 3;
  }
 } else {
  $$010 = $0;
  label = 3;
 }
 do {
  if ((label|0) == 3) {
   $5 = (_strspn($$010,$1)|0);
   $6 = (($$010) + ($5)|0);
   $7 = HEAP8[$6>>0]|0;
   $8 = ($7<<24>>24)==(0);
   if ($8) {
    HEAP32[22250] = 0;
    $$0 = 0;
    break;
   }
   $9 = (_strcspn($6,$1)|0);
   $10 = (($6) + ($9)|0);
   HEAP32[22250] = $10;
   $11 = HEAP8[$10>>0]|0;
   $12 = ($11<<24>>24)==(0);
   if ($12) {
    HEAP32[22250] = 0;
    $$0 = $6;
    break;
   } else {
    $13 = ((($10)) + 1|0);
    HEAP32[22250] = $13;
    HEAP8[$10>>0] = 0;
    $$0 = $6;
    break;
   }
  }
 } while(0);
 return ($$0|0);
}
function _strcpy($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 (___stpcpy($0,$1)|0);
 return ($0|0);
}
function ___stpcpy($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0$lcssa = 0, $$025$lcssa = 0, $$02536 = 0, $$026$lcssa = 0, $$02642 = 0, $$027$lcssa = 0, $$02741 = 0, $$029 = 0, $$037 = 0, $$1$ph = 0, $$128$ph = 0, $$12834 = 0, $$135 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0;
 var $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0;
 var $35 = 0, $36 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = $1;
 $3 = $0;
 $4 = $2 ^ $3;
 $5 = $4 & 3;
 $6 = ($5|0)==(0);
 L1: do {
  if ($6) {
   $7 = $2 & 3;
   $8 = ($7|0)==(0);
   if ($8) {
    $$026$lcssa = $1;$$027$lcssa = $0;
   } else {
    $$02642 = $1;$$02741 = $0;
    while(1) {
     $9 = HEAP8[$$02642>>0]|0;
     HEAP8[$$02741>>0] = $9;
     $10 = ($9<<24>>24)==(0);
     if ($10) {
      $$029 = $$02741;
      break L1;
     }
     $11 = ((($$02642)) + 1|0);
     $12 = ((($$02741)) + 1|0);
     $13 = $11;
     $14 = $13 & 3;
     $15 = ($14|0)==(0);
     if ($15) {
      $$026$lcssa = $11;$$027$lcssa = $12;
      break;
     } else {
      $$02642 = $11;$$02741 = $12;
     }
    }
   }
   $16 = HEAP32[$$026$lcssa>>2]|0;
   $17 = (($16) + -16843009)|0;
   $18 = $16 & -2139062144;
   $19 = $18 ^ -2139062144;
   $20 = $19 & $17;
   $21 = ($20|0)==(0);
   if ($21) {
    $$02536 = $$027$lcssa;$$037 = $$026$lcssa;$24 = $16;
    while(1) {
     $22 = ((($$037)) + 4|0);
     $23 = ((($$02536)) + 4|0);
     HEAP32[$$02536>>2] = $24;
     $25 = HEAP32[$22>>2]|0;
     $26 = (($25) + -16843009)|0;
     $27 = $25 & -2139062144;
     $28 = $27 ^ -2139062144;
     $29 = $28 & $26;
     $30 = ($29|0)==(0);
     if ($30) {
      $$02536 = $23;$$037 = $22;$24 = $25;
     } else {
      $$0$lcssa = $22;$$025$lcssa = $23;
      break;
     }
    }
   } else {
    $$0$lcssa = $$026$lcssa;$$025$lcssa = $$027$lcssa;
   }
   $$1$ph = $$0$lcssa;$$128$ph = $$025$lcssa;
   label = 8;
  } else {
   $$1$ph = $1;$$128$ph = $0;
   label = 8;
  }
 } while(0);
 if ((label|0) == 8) {
  $31 = HEAP8[$$1$ph>>0]|0;
  HEAP8[$$128$ph>>0] = $31;
  $32 = ($31<<24>>24)==(0);
  if ($32) {
   $$029 = $$128$ph;
  } else {
   $$12834 = $$128$ph;$$135 = $$1$ph;
   while(1) {
    $33 = ((($$135)) + 1|0);
    $34 = ((($$12834)) + 1|0);
    $35 = HEAP8[$33>>0]|0;
    HEAP8[$34>>0] = $35;
    $36 = ($35<<24>>24)==(0);
    if ($36) {
     $$029 = $34;
     break;
    } else {
     $$12834 = $34;$$135 = $33;
    }
   }
  }
 }
 return ($$029|0);
}
function ___stpncpy($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0$lcssa = 0, $$037$lcssa = 0, $$03753 = 0, $$038$lcssa = 0, $$038$lcssa79 = 0, $$03866 = 0, $$039$lcssa = 0, $$039$lcssa78 = 0, $$03965 = 0, $$041$lcssa = 0, $$041$lcssa77 = 0, $$04164 = 0, $$054 = 0, $$1$lcssa = 0, $$140$ph = 0, $$14046 = 0, $$142$ph = 0, $$14245 = 0, $$152 = 0, $$2$ph = 0;
 var $$243 = 0, $$247 = 0, $$3 = 0, $$lcssa = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $or$cond = 0, $or$cond63 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = $1;
 $4 = $0;
 $5 = $3 ^ $4;
 $6 = $5 & 3;
 $7 = ($6|0)==(0);
 do {
  if ($7) {
   $8 = $3 & 3;
   $9 = ($8|0)!=(0);
   $10 = ($2|0)!=(0);
   $or$cond63 = $10 & $9;
   L3: do {
    if ($or$cond63) {
     $$03866 = $2;$$03965 = $1;$$04164 = $0;
     while(1) {
      $11 = HEAP8[$$03965>>0]|0;
      HEAP8[$$04164>>0] = $11;
      $12 = ($11<<24>>24)==(0);
      if ($12) {
       $$038$lcssa79 = $$03866;$$039$lcssa78 = $$03965;$$041$lcssa77 = $$04164;
       break L3;
      }
      $13 = (($$03866) + -1)|0;
      $14 = ((($$03965)) + 1|0);
      $15 = ((($$04164)) + 1|0);
      $16 = $14;
      $17 = $16 & 3;
      $18 = ($17|0)!=(0);
      $19 = ($13|0)!=(0);
      $or$cond = $19 & $18;
      if ($or$cond) {
       $$03866 = $13;$$03965 = $14;$$04164 = $15;
      } else {
       $$038$lcssa = $13;$$039$lcssa = $14;$$041$lcssa = $15;$$lcssa = $19;
       label = 5;
       break;
      }
     }
    } else {
     $$038$lcssa = $2;$$039$lcssa = $1;$$041$lcssa = $0;$$lcssa = $10;
     label = 5;
    }
   } while(0);
   if ((label|0) == 5) {
    if ($$lcssa) {
     $$038$lcssa79 = $$038$lcssa;$$039$lcssa78 = $$039$lcssa;$$041$lcssa77 = $$041$lcssa;
    } else {
     $$243 = $$041$lcssa;$$3 = 0;
     break;
    }
   }
   $20 = HEAP8[$$039$lcssa78>>0]|0;
   $21 = ($20<<24>>24)==(0);
   if ($21) {
    $$243 = $$041$lcssa77;$$3 = $$038$lcssa79;
   } else {
    $22 = ($$038$lcssa79>>>0)>(3);
    L11: do {
     if ($22) {
      $$03753 = $$041$lcssa77;$$054 = $$039$lcssa78;$$152 = $$038$lcssa79;
      while(1) {
       $23 = HEAP32[$$054>>2]|0;
       $24 = (($23) + -16843009)|0;
       $25 = $23 & -2139062144;
       $26 = $25 ^ -2139062144;
       $27 = $26 & $24;
       $28 = ($27|0)==(0);
       if (!($28)) {
        $$0$lcssa = $$054;$$037$lcssa = $$03753;$$1$lcssa = $$152;
        break L11;
       }
       HEAP32[$$03753>>2] = $23;
       $29 = (($$152) + -4)|0;
       $30 = ((($$054)) + 4|0);
       $31 = ((($$03753)) + 4|0);
       $32 = ($29>>>0)>(3);
       if ($32) {
        $$03753 = $31;$$054 = $30;$$152 = $29;
       } else {
        $$0$lcssa = $30;$$037$lcssa = $31;$$1$lcssa = $29;
        break;
       }
      }
     } else {
      $$0$lcssa = $$039$lcssa78;$$037$lcssa = $$041$lcssa77;$$1$lcssa = $$038$lcssa79;
     }
    } while(0);
    $$140$ph = $$0$lcssa;$$142$ph = $$037$lcssa;$$2$ph = $$1$lcssa;
    label = 11;
   }
  } else {
   $$140$ph = $1;$$142$ph = $0;$$2$ph = $2;
   label = 11;
  }
 } while(0);
 L16: do {
  if ((label|0) == 11) {
   $33 = ($$2$ph|0)==(0);
   if ($33) {
    $$243 = $$142$ph;$$3 = 0;
   } else {
    $$14046 = $$140$ph;$$14245 = $$142$ph;$$247 = $$2$ph;
    while(1) {
     $34 = HEAP8[$$14046>>0]|0;
     HEAP8[$$14245>>0] = $34;
     $35 = ($34<<24>>24)==(0);
     if ($35) {
      $$243 = $$14245;$$3 = $$247;
      break L16;
     }
     $36 = (($$247) + -1)|0;
     $37 = ((($$14046)) + 1|0);
     $38 = ((($$14245)) + 1|0);
     $39 = ($36|0)==(0);
     if ($39) {
      $$243 = $38;$$3 = 0;
      break;
     } else {
      $$14046 = $37;$$14245 = $38;$$247 = $36;
     }
    }
   }
  }
 } while(0);
 _memset(($$243|0),0,($$3|0))|0;
 return ($$243|0);
}
function _strchr($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (___strchrnul($0,$1)|0);
 $3 = HEAP8[$2>>0]|0;
 $4 = $1&255;
 $5 = ($3<<24>>24)==($4<<24>>24);
 $6 = $5 ? $2 : 0;
 return ($6|0);
}
function _towlower($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (___towcase($0,1)|0);
 return ($1|0);
}
function ___towcase($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$ = 0, $$06385 = 0, $$16484 = 0, $$2 = 0, $$neg76 = 0, $$neg78 = 0, $$neg79 = 0, $$not = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0;
 var $58 = 0, $59 = 0, $6 = 0, $60 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond66 = 0, $or$cond68 = 0, $or$cond70 = 0, $or$cond72 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = $1 << 1;
 $3 = (($2) + -1)|0;
 $4 = (($1) + -1)|0;
 $5 = (_iswalpha($0)|0);
 $6 = ($5|0)==(0);
 $7 = (($0) + -1536)|0;
 $8 = ($7>>>0)<(2560);
 $or$cond66 = $8 | $6;
 $9 = (($0) + -11776)|0;
 $10 = ($9>>>0)<(30784);
 $or$cond68 = $10 | $or$cond66;
 $11 = (($0) + -43008)|0;
 $12 = ($11>>>0)<(22272);
 $or$cond70 = $12 | $or$cond68;
 L1: do {
  if ($or$cond70) {
   $$2 = $0;
  } else {
   $13 = ($1|0)!=(0);
   $14 = (($0) + -4256)|0;
   $15 = ($14>>>0)<(46);
   $or$cond72 = $13 & $15;
   if ($or$cond72) {
    $16 = ($0|0)>(4293);
    if ($16) {
     switch ($0|0) {
     case 4295: case 4301:  {
      break;
     }
     default: {
      $$2 = $0;
      break L1;
     }
     }
    }
    $17 = (($0) + 7264)|0;
    $$2 = $17;
    break;
   }
   $$not = $13 ^ 1;
   $18 = (($0) + -11520)|0;
   $19 = ($18>>>0)<(38);
   $or$cond = $19 & $$not;
   if ($or$cond) {
    $20 = ($0|0)>(11557);
    if ($20) {
     switch ($0|0) {
     case 11559: case 11565:  {
      break;
     }
     default: {
      $$2 = $0;
      break L1;
     }
     }
    }
    $21 = (($0) + -7264)|0;
    $$2 = $21;
    break;
   } else {
    $$06385 = 0;
   }
   while(1) {
    $28 = (((16652 + ($$06385<<2)|0)) + 3|0);
    $29 = HEAP8[$28>>0]|0;
    $30 = (16652 + ($$06385<<2)|0);
    $31 = HEAP16[$30>>1]|0;
    $32 = $31&65535;
    $33 = (((16652 + ($$06385<<2)|0)) + 2|0);
    $34 = HEAP8[$33>>0]|0;
    $35 = $34 << 24 >> 24;
    $36 = $35 & $4;
    $$neg76 = (($0) - ($32))|0;
    $37 = (($$neg76) - ($36))|0;
    $38 = $29&255;
    $39 = ($37>>>0)<($38>>>0);
    $22 = (($$06385) + 1)|0;
    if ($39) {
     label = 13;
     break;
    }
    $23 = ($22|0)==(61);
    if ($23) {
     break;
    } else {
     $$06385 = $22;
    }
   }
   if ((label|0) == 13) {
    $40 = ($34<<24>>24)==(1);
    if ($40) {
     $41 = (($1) + ($0))|0;
     $42 = $$neg76 & 1;
     $43 = (($41) - ($42))|0;
     $$2 = $43;
     break;
    } else {
     $44 = Math_imul($35, $3)|0;
     $45 = (($44) + ($0))|0;
     $$2 = $45;
     break;
    }
   }
   $24 = (1 - ($1))|0;
   $25 = (16164 + ($24<<1)|0);
   $26 = HEAP16[$25>>1]|0;
   $27 = ($26<<16>>16)==(0);
   L23: do {
    if (!($27)) {
     $$16484 = 0;$47 = $26;
     while(1) {
      $46 = $47&65535;
      $48 = ($46|0)==($0|0);
      if ($48) {
       break;
      }
      $52 = (($$16484) + 1)|0;
      $53 = ((16164 + ($52<<2)|0) + ($24<<1)|0);
      $54 = HEAP16[$53>>1]|0;
      $55 = ($54<<16>>16)==(0);
      if ($55) {
       break L23;
      } else {
       $$16484 = $52;$47 = $54;
      }
     }
     $49 = ((16164 + ($$16484<<2)|0) + ($1<<1)|0);
     $50 = HEAP16[$49>>1]|0;
     $51 = $50&65535;
     $$2 = $51;
     break L1;
    }
   } while(0);
   $$neg78 = ($1*40)|0;
   $$neg79 = (($0) + -66600)|0;
   $56 = (($$neg79) + ($$neg78))|0;
   $57 = ($56>>>0)<(40);
   $58 = (($0) + -40)|0;
   $59 = ($1*80)|0;
   $60 = (($58) + ($59))|0;
   $$ = $57 ? $60 : $0;
   return ($$|0);
  }
 } while(0);
 return ($$2|0);
}
function _iswalpha($0) {
 $0 = $0|0;
 var $$ = 0, $$0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($0>>>0)<(131072);
 if ($1) {
  $2 = $0 >>> 8;
  $3 = (29725 + ($2)|0);
  $4 = HEAP8[$3>>0]|0;
  $5 = $4&255;
  $6 = $5 << 5;
  $7 = $0 >>> 3;
  $8 = $7 & 31;
  $9 = $6 | $8;
  $10 = (29725 + ($9)|0);
  $11 = HEAP8[$10>>0]|0;
  $12 = $11&255;
  $13 = $0 & 7;
  $14 = $12 >>> $13;
  $15 = $14 & 1;
  $$0 = $15;
 } else {
  $16 = ($0>>>0)<(196606);
  $$ = $16&1;
  $$0 = $$;
 }
 return ($$0|0);
}
function _strncmp($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0$lcssa = 0, $$01823 = 0, $$01925 = 0, $$01925$in = 0, $$020 = 0, $$024 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond21 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ($2|0)==(0);
 if ($3) {
  $$020 = 0;
 } else {
  $4 = HEAP8[$0>>0]|0;
  $5 = ($4<<24>>24)==(0);
  L3: do {
   if ($5) {
    $$0$lcssa = $1;$16 = 0;
   } else {
    $$01823 = $0;$$01925$in = $2;$$024 = $1;$9 = $4;
    while(1) {
     $$01925 = (($$01925$in) + -1)|0;
     $6 = HEAP8[$$024>>0]|0;
     $7 = ($6<<24>>24)!=(0);
     $8 = ($$01925|0)!=(0);
     $or$cond = $8 & $7;
     $10 = ($9<<24>>24)==($6<<24>>24);
     $or$cond21 = $10 & $or$cond;
     if (!($or$cond21)) {
      $$0$lcssa = $$024;$16 = $9;
      break L3;
     }
     $11 = ((($$01823)) + 1|0);
     $12 = ((($$024)) + 1|0);
     $13 = HEAP8[$11>>0]|0;
     $14 = ($13<<24>>24)==(0);
     if ($14) {
      $$0$lcssa = $12;$16 = 0;
      break;
     } else {
      $$01823 = $11;$$01925$in = $$01925;$$024 = $12;$9 = $13;
     }
    }
   }
  } while(0);
  $15 = $16&255;
  $17 = HEAP8[$$0$lcssa>>0]|0;
  $18 = $17&255;
  $19 = (($15) - ($18))|0;
  $$020 = $19;
 }
 return ($$020|0);
}
function _strcat($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (_strlen($0)|0);
 $3 = (($0) + ($2)|0);
 (_strcpy($3,$1)|0);
 return ($0|0);
}
function _strstr($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $$0$in16$i = 0, $$014$lcssa$i = 0, $$01415$i = 0, $$016$lcssa$i = 0, $$01618$i = 0, $$0165$i = 0, $$0167$i = 0, $$0168$i = 0, $$0169$i = 0, $$0174$ph$ph$lcssa217$i = 0, $$0174$ph$ph$lcssa217329$i = 0, $$0174$ph$ph256$i = 0, $$0178244$i = 0, $$018$lcssa$i = 0, $$0182$ph197$ph255$i = 0, $$0182$ph197250$i = 0, $$0182$ph262$i = 0, $$01820$i = 0, $$0184$ph$lcssa$i = 0;
 var $$0184$ph$lcssa328$i = 0, $$0184$ph261$i = 0, $$0186265$i = 0, $$019$i = 0, $$021$i = 0, $$1175$$0174$i = 0, $$1175$ph$ph$lcssa208$i = 0, $$1175$ph$ph235$i = 0, $$1179224$i = 0, $$1183$ph193$ph234$i = 0, $$1183$ph193229$i = 0, $$1183$ph241$i = 0, $$1185$$0184$$i = 0, $$1185$$0184$i = 0, $$1185$ph$lcssa$i = 0, $$1185$ph240$i = 0, $$2180$i = 0, $$3$i = 0, $$3172$i = 0, $$3177$i = 0;
 var $$3181223$i = 0, $$4$i = 0, $$lcssa$i = 0, $$lcssa$i23 = 0, $$pr$i = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0;
 var $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0;
 var $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0;
 var $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0;
 var $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0;
 var $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0;
 var $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0;
 var $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0;
 var $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0;
 var $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0;
 var $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0;
 var $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $div$i = 0, $div187$i = 0, $or$cond$i = 0, $or$cond$i18 = 0, $or$cond$i21 = 0, $or$cond188$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1056|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(1056|0);
 $2 = sp + 1024|0;
 $3 = sp;
 $4 = HEAP8[$1>>0]|0;
 $5 = ($4<<24>>24)==(0);
 do {
  if ($5) {
   $$0 = $0;
  } else {
   $6 = $4 << 24 >> 24;
   $7 = (_strchr($0,$6)|0);
   $8 = ($7|0)==(0|0);
   if ($8) {
    $$0 = 0;
   } else {
    $9 = ((($1)) + 1|0);
    $10 = HEAP8[$9>>0]|0;
    $11 = ($10<<24>>24)==(0);
    if ($11) {
     $$0 = $7;
    } else {
     $12 = ((($7)) + 1|0);
     $13 = HEAP8[$12>>0]|0;
     $14 = ($13<<24>>24)==(0);
     if ($14) {
      $$0 = 0;
     } else {
      $15 = ((($1)) + 2|0);
      $16 = HEAP8[$15>>0]|0;
      $17 = ($16<<24>>24)==(0);
      if ($17) {
       $18 = $4&255;
       $19 = $18 << 8;
       $20 = $10&255;
       $21 = $20 | $19;
       $22 = HEAP8[$7>>0]|0;
       $23 = $22&255;
       $24 = $23 << 8;
       $25 = $13&255;
       $26 = $24 | $25;
       $$0$in16$i = $26;$$01415$i = $12;$237 = $13;
       while(1) {
        $27 = $$0$in16$i & 65535;
        $28 = ($27|0)==($21|0);
        if ($28) {
         $$014$lcssa$i = $$01415$i;$35 = $237;
         break;
        }
        $29 = $27 << 8;
        $30 = ((($$01415$i)) + 1|0);
        $31 = HEAP8[$30>>0]|0;
        $32 = $31&255;
        $33 = $32 | $29;
        $34 = ($31<<24>>24)==(0);
        if ($34) {
         $$014$lcssa$i = $30;$35 = 0;
         break;
        } else {
         $$0$in16$i = $33;$$01415$i = $30;$237 = $31;
        }
       }
       $36 = ($35<<24>>24)!=(0);
       $37 = ((($$014$lcssa$i)) + -1|0);
       $38 = $36 ? $37 : 0;
       $$0 = $38;
       break;
      }
      $39 = ((($7)) + 2|0);
      $40 = HEAP8[$39>>0]|0;
      $41 = ($40<<24>>24)==(0);
      if ($41) {
       $$0 = 0;
      } else {
       $42 = ((($1)) + 3|0);
       $43 = HEAP8[$42>>0]|0;
       $44 = ($43<<24>>24)==(0);
       if ($44) {
        $45 = $4&255;
        $46 = $45 << 24;
        $47 = $10&255;
        $48 = $47 << 16;
        $49 = $48 | $46;
        $50 = $16&255;
        $51 = $50 << 8;
        $52 = $49 | $51;
        $53 = HEAP8[$7>>0]|0;
        $54 = $53&255;
        $55 = $54 << 24;
        $56 = $13&255;
        $57 = $56 << 16;
        $58 = $40&255;
        $59 = $58 << 8;
        $60 = $59 | $57;
        $61 = $60 | $55;
        $62 = ($61|0)==($52|0);
        if ($62) {
         $$016$lcssa$i = $39;$$lcssa$i = $40;
        } else {
         $$01618$i = $39;$$019$i = $61;
         while(1) {
          $63 = ((($$01618$i)) + 1|0);
          $64 = HEAP8[$63>>0]|0;
          $65 = $64&255;
          $66 = $65 | $$019$i;
          $67 = $66 << 8;
          $68 = ($64<<24>>24)==(0);
          $69 = ($67|0)==($52|0);
          $or$cond$i18 = $68 | $69;
          if ($or$cond$i18) {
           $$016$lcssa$i = $63;$$lcssa$i = $64;
           break;
          } else {
           $$01618$i = $63;$$019$i = $67;
          }
         }
        }
        $70 = ($$lcssa$i<<24>>24)!=(0);
        $71 = ((($$016$lcssa$i)) + -2|0);
        $72 = $70 ? $71 : 0;
        $$0 = $72;
        break;
       }
       $73 = ((($7)) + 3|0);
       $74 = HEAP8[$73>>0]|0;
       $75 = ($74<<24>>24)==(0);
       if ($75) {
        $$0 = 0;
       } else {
        $76 = ((($1)) + 4|0);
        $77 = HEAP8[$76>>0]|0;
        $78 = ($77<<24>>24)==(0);
        if ($78) {
         $79 = $4&255;
         $80 = $79 << 24;
         $81 = $10&255;
         $82 = $81 << 16;
         $83 = $82 | $80;
         $84 = $16&255;
         $85 = $84 << 8;
         $86 = $83 | $85;
         $87 = $43&255;
         $88 = $86 | $87;
         $89 = HEAP8[$7>>0]|0;
         $90 = $89&255;
         $91 = $90 << 24;
         $92 = $13&255;
         $93 = $92 << 16;
         $94 = $40&255;
         $95 = $94 << 8;
         $96 = $74&255;
         $97 = $95 | $93;
         $98 = $97 | $96;
         $99 = $98 | $91;
         $100 = ($99|0)==($88|0);
         if ($100) {
          $$018$lcssa$i = $73;$$lcssa$i23 = $74;
         } else {
          $$01820$i = $73;$$021$i = $99;
          while(1) {
           $101 = $$021$i << 8;
           $102 = ((($$01820$i)) + 1|0);
           $103 = HEAP8[$102>>0]|0;
           $104 = $103&255;
           $105 = $104 | $101;
           $106 = ($103<<24>>24)==(0);
           $107 = ($105|0)==($88|0);
           $or$cond$i21 = $106 | $107;
           if ($or$cond$i21) {
            $$018$lcssa$i = $102;$$lcssa$i23 = $103;
            break;
           } else {
            $$01820$i = $102;$$021$i = $105;
           }
          }
         }
         $108 = ($$lcssa$i23<<24>>24)!=(0);
         $109 = ((($$018$lcssa$i)) + -3|0);
         $110 = $108 ? $109 : 0;
         $$0 = $110;
         break;
        }
        ;HEAP32[$2>>2]=0|0;HEAP32[$2+4>>2]=0|0;HEAP32[$2+8>>2]=0|0;HEAP32[$2+12>>2]=0|0;HEAP32[$2+16>>2]=0|0;HEAP32[$2+20>>2]=0|0;HEAP32[$2+24>>2]=0|0;HEAP32[$2+28>>2]=0|0;
        $$0186265$i = 0;$115 = $4;
        while(1) {
         $111 = (($7) + ($$0186265$i)|0);
         $112 = HEAP8[$111>>0]|0;
         $113 = ($112<<24>>24)==(0);
         if ($113) {
          $$3$i = 0;
          break;
         }
         $114 = $115 & 31;
         $116 = $114&255;
         $117 = 1 << $116;
         $div187$i = ($115&255) >>> 5;
         $118 = $div187$i&255;
         $119 = (($2) + ($118<<2)|0);
         $120 = HEAP32[$119>>2]|0;
         $121 = $120 | $117;
         HEAP32[$119>>2] = $121;
         $122 = (($$0186265$i) + 1)|0;
         $123 = $115&255;
         $124 = (($3) + ($123<<2)|0);
         HEAP32[$124>>2] = $122;
         $125 = (($1) + ($122)|0);
         $126 = HEAP8[$125>>0]|0;
         $127 = ($126<<24>>24)==(0);
         if ($127) {
          label = 23;
          break;
         } else {
          $$0186265$i = $122;$115 = $126;
         }
        }
        L32: do {
         if ((label|0) == 23) {
          $128 = ($122>>>0)>(1);
          L34: do {
           if ($128) {
            $$0182$ph262$i = 0;$$0184$ph261$i = -1;$238 = 1;
            L35: while(1) {
             $$0174$ph$ph256$i = 1;$$0182$ph197$ph255$i = $$0182$ph262$i;$239 = $238;
             while(1) {
              $$0182$ph197250$i = $$0182$ph197$ph255$i;$240 = $239;
              L39: while(1) {
               $$0178244$i = 1;$130 = $240;
               while(1) {
                $135 = (($$0178244$i) + ($$0184$ph261$i))|0;
                $136 = (($1) + ($135)|0);
                $137 = HEAP8[$136>>0]|0;
                $138 = (($1) + ($130)|0);
                $139 = HEAP8[$138>>0]|0;
                $140 = ($137<<24>>24)==($139<<24>>24);
                if (!($140)) {
                 break L39;
                }
                $141 = ($$0178244$i|0)==($$0174$ph$ph256$i|0);
                $133 = (($$0178244$i) + 1)|0;
                if ($141) {
                 break;
                }
                $132 = (($133) + ($$0182$ph197250$i))|0;
                $134 = ($132>>>0)<($122>>>0);
                if ($134) {
                 $$0178244$i = $133;$130 = $132;
                } else {
                 $$0174$ph$ph$lcssa217$i = $$0174$ph$ph256$i;$$0184$ph$lcssa$i = $$0184$ph261$i;
                 break L35;
                }
               }
               $142 = (($$0182$ph197250$i) + ($$0174$ph$ph256$i))|0;
               $143 = (($142) + 1)|0;
               $144 = ($143>>>0)<($122>>>0);
               if ($144) {
                $$0182$ph197250$i = $142;$240 = $143;
               } else {
                $$0174$ph$ph$lcssa217$i = $$0174$ph$ph256$i;$$0184$ph$lcssa$i = $$0184$ph261$i;
                break L35;
               }
              }
              $145 = ($137&255)>($139&255);
              $146 = (($130) - ($$0184$ph261$i))|0;
              if (!($145)) {
               break;
              }
              $129 = (($130) + 1)|0;
              $131 = ($129>>>0)<($122>>>0);
              if ($131) {
               $$0174$ph$ph256$i = $146;$$0182$ph197$ph255$i = $130;$239 = $129;
              } else {
               $$0174$ph$ph$lcssa217$i = $146;$$0184$ph$lcssa$i = $$0184$ph261$i;
               break L35;
              }
             }
             $147 = (($$0182$ph197250$i) + 1)|0;
             $148 = (($$0182$ph197250$i) + 2)|0;
             $149 = ($148>>>0)<($122>>>0);
             if ($149) {
              $$0182$ph262$i = $147;$$0184$ph261$i = $$0182$ph197250$i;$238 = $148;
             } else {
              $$0174$ph$ph$lcssa217$i = 1;$$0184$ph$lcssa$i = $$0182$ph197250$i;
              break;
             }
            }
            $$1183$ph241$i = 0;$$1185$ph240$i = -1;$241 = 1;
            while(1) {
             $$1175$ph$ph235$i = 1;$$1183$ph193$ph234$i = $$1183$ph241$i;$243 = $241;
             while(1) {
              $$1183$ph193229$i = $$1183$ph193$ph234$i;$242 = $243;
              L54: while(1) {
               $$1179224$i = 1;$157 = $242;
               while(1) {
                $153 = (($$1179224$i) + ($$1185$ph240$i))|0;
                $154 = (($1) + ($153)|0);
                $155 = HEAP8[$154>>0]|0;
                $156 = (($1) + ($157)|0);
                $158 = HEAP8[$156>>0]|0;
                $159 = ($155<<24>>24)==($158<<24>>24);
                if (!($159)) {
                 break L54;
                }
                $160 = ($$1179224$i|0)==($$1175$ph$ph235$i|0);
                $151 = (($$1179224$i) + 1)|0;
                if ($160) {
                 break;
                }
                $150 = (($151) + ($$1183$ph193229$i))|0;
                $152 = ($150>>>0)<($122>>>0);
                if ($152) {
                 $$1179224$i = $151;$157 = $150;
                } else {
                 $$0174$ph$ph$lcssa217329$i = $$0174$ph$ph$lcssa217$i;$$0184$ph$lcssa328$i = $$0184$ph$lcssa$i;$$1175$ph$ph$lcssa208$i = $$1175$ph$ph235$i;$$1185$ph$lcssa$i = $$1185$ph240$i;
                 break L34;
                }
               }
               $161 = (($$1183$ph193229$i) + ($$1175$ph$ph235$i))|0;
               $162 = (($161) + 1)|0;
               $163 = ($162>>>0)<($122>>>0);
               if ($163) {
                $$1183$ph193229$i = $161;$242 = $162;
               } else {
                $$0174$ph$ph$lcssa217329$i = $$0174$ph$ph$lcssa217$i;$$0184$ph$lcssa328$i = $$0184$ph$lcssa$i;$$1175$ph$ph$lcssa208$i = $$1175$ph$ph235$i;$$1185$ph$lcssa$i = $$1185$ph240$i;
                break L34;
               }
              }
              $164 = ($155&255)<($158&255);
              $165 = (($157) - ($$1185$ph240$i))|0;
              if (!($164)) {
               break;
              }
              $169 = (($157) + 1)|0;
              $170 = ($169>>>0)<($122>>>0);
              if ($170) {
               $$1175$ph$ph235$i = $165;$$1183$ph193$ph234$i = $157;$243 = $169;
              } else {
               $$0174$ph$ph$lcssa217329$i = $$0174$ph$ph$lcssa217$i;$$0184$ph$lcssa328$i = $$0184$ph$lcssa$i;$$1175$ph$ph$lcssa208$i = $165;$$1185$ph$lcssa$i = $$1185$ph240$i;
               break L34;
              }
             }
             $166 = (($$1183$ph193229$i) + 1)|0;
             $167 = (($$1183$ph193229$i) + 2)|0;
             $168 = ($167>>>0)<($122>>>0);
             if ($168) {
              $$1183$ph241$i = $166;$$1185$ph240$i = $$1183$ph193229$i;$241 = $167;
             } else {
              $$0174$ph$ph$lcssa217329$i = $$0174$ph$ph$lcssa217$i;$$0184$ph$lcssa328$i = $$0184$ph$lcssa$i;$$1175$ph$ph$lcssa208$i = 1;$$1185$ph$lcssa$i = $$1183$ph193229$i;
              break;
             }
            }
           } else {
            $$0174$ph$ph$lcssa217329$i = 1;$$0184$ph$lcssa328$i = -1;$$1175$ph$ph$lcssa208$i = 1;$$1185$ph$lcssa$i = -1;
           }
          } while(0);
          $171 = (($$1185$ph$lcssa$i) + 1)|0;
          $172 = (($$0184$ph$lcssa328$i) + 1)|0;
          $173 = ($171>>>0)>($172>>>0);
          $$1175$$0174$i = $173 ? $$1175$ph$ph$lcssa208$i : $$0174$ph$ph$lcssa217329$i;
          $$1185$$0184$i = $173 ? $$1185$ph$lcssa$i : $$0184$ph$lcssa328$i;
          $174 = (($1) + ($$1175$$0174$i)|0);
          $175 = (($$1185$$0184$i) + 1)|0;
          $176 = (_memcmp($1,$174,$175)|0);
          $177 = ($176|0)==(0);
          if ($177) {
           $182 = (($122) - ($$1175$$0174$i))|0;
           $$0167$i = $182;$$3177$i = $$1175$$0174$i;
          } else {
           $178 = (($122) - ($$1185$$0184$i))|0;
           $179 = (($178) + -1)|0;
           $180 = ($$1185$$0184$i>>>0)>($179>>>0);
           $$1185$$0184$$i = $180 ? $$1185$$0184$i : $179;
           $181 = (($$1185$$0184$$i) + 1)|0;
           $$0167$i = 0;$$3177$i = $181;
          }
          $183 = $122 | 63;
          $184 = ($$0167$i|0)!=(0);
          $185 = (($122) - ($$3177$i))|0;
          $$0165$i = $7;$$0168$i = 0;$$0169$i = $7;
          L69: while(1) {
           $186 = $$0169$i;
           $187 = $$0165$i;
           $188 = (($186) - ($187))|0;
           $189 = ($188>>>0)<($122>>>0);
           do {
            if ($189) {
             $190 = (_memchr($$0169$i,0,$183)|0);
             $191 = ($190|0)==(0|0);
             if ($191) {
              $195 = (($$0169$i) + ($183)|0);
              $$3172$i = $195;
              break;
             } else {
              $192 = $190;
              $193 = (($192) - ($187))|0;
              $194 = ($193>>>0)<($122>>>0);
              if ($194) {
               $$3$i = 0;
               break L32;
              } else {
               $$3172$i = $190;
               break;
              }
             }
            } else {
             $$3172$i = $$0169$i;
            }
           } while(0);
           $196 = (($$0165$i) + ($$0186265$i)|0);
           $197 = HEAP8[$196>>0]|0;
           $div$i = ($197&255) >>> 5;
           $198 = $div$i&255;
           $199 = (($2) + ($198<<2)|0);
           $200 = HEAP32[$199>>2]|0;
           $201 = $197 & 31;
           $202 = $201&255;
           $203 = 1 << $202;
           $204 = $203 & $200;
           $205 = ($204|0)==(0);
           if ($205) {
            $214 = (($$0165$i) + ($122)|0);
            $$0165$i = $214;$$0168$i = 0;$$0169$i = $$3172$i;
            continue;
           }
           $206 = $197&255;
           $207 = (($3) + ($206<<2)|0);
           $208 = HEAP32[$207>>2]|0;
           $209 = (($122) - ($208))|0;
           $210 = ($209|0)==(0);
           if (!($210)) {
            $211 = ($$0168$i|0)!=(0);
            $or$cond$i = $184 & $211;
            $212 = ($209>>>0)<($$3177$i>>>0);
            $or$cond188$i = $or$cond$i & $212;
            $$2180$i = $or$cond188$i ? $185 : $209;
            $213 = (($$0165$i) + ($$2180$i)|0);
            $$0165$i = $213;$$0168$i = 0;$$0169$i = $$3172$i;
            continue;
           }
           $215 = ($175>>>0)>($$0168$i>>>0);
           $216 = $215 ? $175 : $$0168$i;
           $217 = (($1) + ($216)|0);
           $218 = HEAP8[$217>>0]|0;
           $219 = ($218<<24>>24)==(0);
           L83: do {
            if ($219) {
             $$4$i = $175;
            } else {
             $$3181223$i = $216;$$pr$i = $218;
             while(1) {
              $220 = (($$0165$i) + ($$3181223$i)|0);
              $221 = HEAP8[$220>>0]|0;
              $222 = ($$pr$i<<24>>24)==($221<<24>>24);
              if (!($222)) {
               break;
              }
              $223 = (($$3181223$i) + 1)|0;
              $224 = (($1) + ($223)|0);
              $225 = HEAP8[$224>>0]|0;
              $226 = ($225<<24>>24)==(0);
              if ($226) {
               $$4$i = $175;
               break L83;
              } else {
               $$3181223$i = $223;$$pr$i = $225;
              }
             }
             $227 = (($$3181223$i) - ($$1185$$0184$i))|0;
             $228 = (($$0165$i) + ($227)|0);
             $$0165$i = $228;$$0168$i = 0;$$0169$i = $$3172$i;
             continue L69;
            }
           } while(0);
           while(1) {
            $229 = ($$4$i>>>0)>($$0168$i>>>0);
            if (!($229)) {
             $$3$i = $$0165$i;
             break L32;
            }
            $230 = (($$4$i) + -1)|0;
            $231 = (($1) + ($230)|0);
            $232 = HEAP8[$231>>0]|0;
            $233 = (($$0165$i) + ($230)|0);
            $234 = HEAP8[$233>>0]|0;
            $235 = ($232<<24>>24)==($234<<24>>24);
            if ($235) {
             $$4$i = $230;
            } else {
             break;
            }
           }
           $236 = (($$0165$i) + ($$3177$i)|0);
           $$0165$i = $236;$$0168$i = $$0167$i;$$0169$i = $$3172$i;
          }
         }
        } while(0);
        $$0 = $$3$i;
       }
      }
     }
    }
   }
  }
 } while(0);
 STACKTOP = sp;return ($$0|0);
}
function ___strdup($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (_strlen($0)|0);
 $2 = (($1) + 1)|0;
 $3 = (_malloc($2)|0);
 $4 = ($3|0)==(0|0);
 if ($4) {
  $$0 = 0;
 } else {
  _memcpy(($3|0),($0|0),($2|0))|0;
  $$0 = $3;
 }
 return ($$0|0);
}
function _strncpy($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 (___stpncpy($0,$1,$2)|0);
 return ($0|0);
}
function _mbrtowc($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$ = 0, $$0 = 0, $$03952 = 0, $$04051 = 0, $$04350 = 0, $$1 = 0, $$141 = 0, $$144 = 0, $$2 = 0, $$47 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0;
 var $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $not$ = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $4 = sp;
 $5 = ($3|0)==(0|0);
 $$ = $5 ? 89004 : $3;
 $6 = HEAP32[$$>>2]|0;
 $7 = ($1|0)==(0|0);
 L1: do {
  if ($7) {
   $8 = ($6|0)==(0);
   if ($8) {
    $$0 = 0;
   } else {
    label = 17;
   }
  } else {
   $9 = ($0|0)==(0|0);
   $$47 = $9 ? $4 : $0;
   $10 = ($2|0)==(0);
   if ($10) {
    $$0 = -2;
   } else {
    $11 = ($6|0)==(0);
    if ($11) {
     $12 = HEAP8[$1>>0]|0;
     $13 = ($12<<24>>24)>(-1);
     if ($13) {
      $14 = $12&255;
      HEAP32[$$47>>2] = $14;
      $15 = ($12<<24>>24)!=(0);
      $16 = $15&1;
      $$0 = $16;
      break;
     }
     $17 = (_pthread_self()|0);
     $18 = ((($17)) + 188|0);
     $19 = HEAP32[$18>>2]|0;
     $20 = HEAP32[$19>>2]|0;
     $not$ = ($20|0)==(0|0);
     $21 = HEAP8[$1>>0]|0;
     if ($not$) {
      $22 = $21 << 24 >> 24;
      $23 = $22 & 57343;
      HEAP32[$$47>>2] = $23;
      $$0 = 1;
      break;
     }
     $24 = $21&255;
     $25 = (($24) + -194)|0;
     $26 = ($25>>>0)>(50);
     if ($26) {
      label = 17;
      break;
     }
     $27 = ((($1)) + 1|0);
     $28 = (5228 + ($25<<2)|0);
     $29 = HEAP32[$28>>2]|0;
     $30 = (($2) + -1)|0;
     $31 = ($30|0)==(0);
     if ($31) {
      $$2 = $29;
     } else {
      $$03952 = $27;$$04051 = $29;$$04350 = $30;
      label = 11;
     }
    } else {
     $$03952 = $1;$$04051 = $6;$$04350 = $2;
     label = 11;
    }
    L14: do {
     if ((label|0) == 11) {
      $32 = HEAP8[$$03952>>0]|0;
      $33 = $32&255;
      $34 = $33 >>> 3;
      $35 = (($34) + -16)|0;
      $36 = $$04051 >> 26;
      $37 = (($34) + ($36))|0;
      $38 = $35 | $37;
      $39 = ($38>>>0)>(7);
      if ($39) {
       label = 17;
       break L1;
      } else {
       $$1 = $$03952;$$141 = $$04051;$$144 = $$04350;$43 = $32;
      }
      while(1) {
       $40 = $$141 << 6;
       $41 = ((($$1)) + 1|0);
       $42 = $43&255;
       $44 = (($42) + -128)|0;
       $45 = $44 | $40;
       $46 = (($$144) + -1)|0;
       $47 = ($45|0)<(0);
       if (!($47)) {
        break;
       }
       $49 = ($46|0)==(0);
       if ($49) {
        $$2 = $45;
        break L14;
       }
       $50 = HEAP8[$41>>0]|0;
       $51 = $50 & -64;
       $52 = ($51<<24>>24)==(-128);
       if ($52) {
        $$1 = $41;$$141 = $45;$$144 = $46;$43 = $50;
       } else {
        label = 17;
        break L1;
       }
      }
      HEAP32[$$>>2] = 0;
      HEAP32[$$47>>2] = $45;
      $48 = (($2) - ($46))|0;
      $$0 = $48;
      break L1;
     }
    } while(0);
    HEAP32[$$>>2] = $$2;
    $$0 = -2;
   }
  }
 } while(0);
 if ((label|0) == 17) {
  HEAP32[$$>>2] = 0;
  $53 = (___errno_location()|0);
  HEAP32[$53>>2] = 84;
  $$0 = -1;
 }
 STACKTOP = sp;return ($$0|0);
}
function _wctomb($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($0|0)==(0|0);
 if ($2) {
  $$0 = 0;
 } else {
  $3 = (_wcrtomb($0,$1,0)|0);
  $$0 = $3;
 }
 return ($$0|0);
}
function _wcrtomb($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $not$ = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ($0|0)==(0|0);
 do {
  if ($3) {
   $$0 = 1;
  } else {
   $4 = ($1>>>0)<(128);
   if ($4) {
    $5 = $1&255;
    HEAP8[$0>>0] = $5;
    $$0 = 1;
    break;
   }
   $6 = (_pthread_self()|0);
   $7 = ((($6)) + 188|0);
   $8 = HEAP32[$7>>2]|0;
   $9 = HEAP32[$8>>2]|0;
   $not$ = ($9|0)==(0|0);
   if ($not$) {
    $10 = $1 & -128;
    $11 = ($10|0)==(57216);
    if ($11) {
     $13 = $1&255;
     HEAP8[$0>>0] = $13;
     $$0 = 1;
     break;
    } else {
     $12 = (___errno_location()|0);
     HEAP32[$12>>2] = 84;
     $$0 = -1;
     break;
    }
   }
   $14 = ($1>>>0)<(2048);
   if ($14) {
    $15 = $1 >>> 6;
    $16 = $15 | 192;
    $17 = $16&255;
    $18 = ((($0)) + 1|0);
    HEAP8[$0>>0] = $17;
    $19 = $1 & 63;
    $20 = $19 | 128;
    $21 = $20&255;
    HEAP8[$18>>0] = $21;
    $$0 = 2;
    break;
   }
   $22 = ($1>>>0)<(55296);
   $23 = $1 & -8192;
   $24 = ($23|0)==(57344);
   $or$cond = $22 | $24;
   if ($or$cond) {
    $25 = $1 >>> 12;
    $26 = $25 | 224;
    $27 = $26&255;
    $28 = ((($0)) + 1|0);
    HEAP8[$0>>0] = $27;
    $29 = $1 >>> 6;
    $30 = $29 & 63;
    $31 = $30 | 128;
    $32 = $31&255;
    $33 = ((($0)) + 2|0);
    HEAP8[$28>>0] = $32;
    $34 = $1 & 63;
    $35 = $34 | 128;
    $36 = $35&255;
    HEAP8[$33>>0] = $36;
    $$0 = 3;
    break;
   }
   $37 = (($1) + -65536)|0;
   $38 = ($37>>>0)<(1048576);
   if ($38) {
    $39 = $1 >>> 18;
    $40 = $39 | 240;
    $41 = $40&255;
    $42 = ((($0)) + 1|0);
    HEAP8[$0>>0] = $41;
    $43 = $1 >>> 12;
    $44 = $43 & 63;
    $45 = $44 | 128;
    $46 = $45&255;
    $47 = ((($0)) + 2|0);
    HEAP8[$42>>0] = $46;
    $48 = $1 >>> 6;
    $49 = $48 & 63;
    $50 = $49 | 128;
    $51 = $50&255;
    $52 = ((($0)) + 3|0);
    HEAP8[$47>>0] = $51;
    $53 = $1 & 63;
    $54 = $53 | 128;
    $55 = $54&255;
    HEAP8[$52>>0] = $55;
    $$0 = 4;
    break;
   } else {
    $56 = (___errno_location()|0);
    HEAP32[$56>>2] = 84;
    $$0 = -1;
    break;
   }
  }
 } while(0);
 return ($$0|0);
}
function _isspace($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($0|0)==(32);
 $2 = (($0) + -9)|0;
 $3 = ($2>>>0)<(5);
 $4 = $1 | $3;
 $5 = $4&1;
 return ($5|0);
}
function ___shlim($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 104|0);
 HEAP32[$2>>2] = $1;
 $3 = ((($0)) + 8|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($0)) + 4|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (($4) - ($6))|0;
 $8 = ((($0)) + 108|0);
 HEAP32[$8>>2] = $7;
 $9 = ($1|0)!=(0);
 $10 = ($7|0)>($1|0);
 $or$cond = $9 & $10;
 if ($or$cond) {
  $11 = $6;
  $12 = (($11) + ($1)|0);
  $13 = ((($0)) + 100|0);
  HEAP32[$13>>2] = $12;
 } else {
  $14 = ((($0)) + 100|0);
  HEAP32[$14>>2] = $4;
 }
 return;
}
function ___intscan($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$0154222 = 0, $$0157 = 0, $$0157$ = 0, $$0159 = 0, $$1155188 = 0, $$1158 = 0, $$1160 = 0, $$1160169 = 0, $$1165 = 0, $$1165167 = 0, $$1165168 = 0, $$166 = 0, $$2156206 = 0, $$2161$be = 0, $$2161$lcssa = 0, $$3162$be = 0, $$3162$lcssa = 0, $$3162211 = 0, $$4163$be = 0, $$4163$lcssa = 0;
 var $$5$be = 0, $$6$be = 0, $$6$lcssa = 0, $$7$be = 0, $$7194 = 0, $$8 = 0, $$9$be = 0, $$lcssa = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0;
 var $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0;
 var $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0;
 var $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0;
 var $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0;
 var $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0;
 var $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0;
 var $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0;
 var $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0;
 var $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0;
 var $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0;
 var $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0;
 var $98 = 0, $99 = 0, $or$cond = 0, $or$cond12 = 0, $or$cond183 = 0, $or$cond5 = 0, $or$cond7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $5 = ($1>>>0)>(36);
 L1: do {
  if ($5) {
   $8 = (___errno_location()|0);
   HEAP32[$8>>2] = 22;
   $289 = 0;$290 = 0;
  } else {
   $6 = ((($0)) + 4|0);
   $7 = ((($0)) + 100|0);
   while(1) {
    $9 = HEAP32[$6>>2]|0;
    $10 = HEAP32[$7>>2]|0;
    $11 = ($9>>>0)<($10>>>0);
    if ($11) {
     $12 = ((($9)) + 1|0);
     HEAP32[$6>>2] = $12;
     $13 = HEAP8[$9>>0]|0;
     $14 = $13&255;
     $16 = $14;
    } else {
     $15 = (___shgetc($0)|0);
     $16 = $15;
    }
    $17 = (_isspace($16)|0);
    $18 = ($17|0)==(0);
    if ($18) {
     break;
    }
   }
   $19 = ($16|0)==(45);
   L11: do {
    switch ($16|0) {
    case 43: case 45:  {
     $20 = $19 << 31 >> 31;
     $21 = HEAP32[$6>>2]|0;
     $22 = HEAP32[$7>>2]|0;
     $23 = ($21>>>0)<($22>>>0);
     if ($23) {
      $24 = ((($21)) + 1|0);
      HEAP32[$6>>2] = $24;
      $25 = HEAP8[$21>>0]|0;
      $26 = $25&255;
      $$0157 = $20;$$0159 = $26;
      break L11;
     } else {
      $27 = (___shgetc($0)|0);
      $$0157 = $20;$$0159 = $27;
      break L11;
     }
     break;
    }
    default: {
     $$0157 = 0;$$0159 = $16;
    }
    }
   } while(0);
   $28 = ($1|0)==(0);
   $29 = $1 | 16;
   $30 = ($29|0)==(16);
   $31 = ($$0159|0)==(48);
   $or$cond5 = $30 & $31;
   do {
    if ($or$cond5) {
     $32 = HEAP32[$6>>2]|0;
     $33 = HEAP32[$7>>2]|0;
     $34 = ($32>>>0)<($33>>>0);
     if ($34) {
      $35 = ((($32)) + 1|0);
      HEAP32[$6>>2] = $35;
      $36 = HEAP8[$32>>0]|0;
      $37 = $36&255;
      $40 = $37;
     } else {
      $38 = (___shgetc($0)|0);
      $40 = $38;
     }
     $39 = $40 | 32;
     $41 = ($39|0)==(120);
     if (!($41)) {
      if ($28) {
       $$1160169 = $40;$$1165168 = 8;
       label = 46;
       break;
      } else {
       $$1160 = $40;$$1165 = $1;
       label = 32;
       break;
      }
     }
     $42 = HEAP32[$6>>2]|0;
     $43 = HEAP32[$7>>2]|0;
     $44 = ($42>>>0)<($43>>>0);
     if ($44) {
      $45 = ((($42)) + 1|0);
      HEAP32[$6>>2] = $45;
      $46 = HEAP8[$42>>0]|0;
      $47 = $46&255;
      $50 = $47;
     } else {
      $48 = (___shgetc($0)|0);
      $50 = $48;
     }
     $49 = ((32702) + ($50)|0);
     $51 = HEAP8[$49>>0]|0;
     $52 = ($51&255)>(15);
     if ($52) {
      $53 = HEAP32[$7>>2]|0;
      $54 = ($53|0)==(0|0);
      if (!($54)) {
       $55 = HEAP32[$6>>2]|0;
       $56 = ((($55)) + -1|0);
       HEAP32[$6>>2] = $56;
      }
      $57 = ($2|0)==(0);
      if ($57) {
       ___shlim($0,0);
       $289 = 0;$290 = 0;
       break L1;
      }
      if ($54) {
       $289 = 0;$290 = 0;
       break L1;
      }
      $58 = HEAP32[$6>>2]|0;
      $59 = ((($58)) + -1|0);
      HEAP32[$6>>2] = $59;
      $289 = 0;$290 = 0;
      break L1;
     } else {
      $$1160169 = $50;$$1165168 = 16;
      label = 46;
     }
    } else {
     $$166 = $28 ? 10 : $1;
     $60 = ((32702) + ($$0159)|0);
     $61 = HEAP8[$60>>0]|0;
     $62 = $61&255;
     $63 = ($62>>>0)<($$166>>>0);
     if ($63) {
      $$1160 = $$0159;$$1165 = $$166;
      label = 32;
     } else {
      $64 = HEAP32[$7>>2]|0;
      $65 = ($64|0)==(0|0);
      if (!($65)) {
       $66 = HEAP32[$6>>2]|0;
       $67 = ((($66)) + -1|0);
       HEAP32[$6>>2] = $67;
      }
      ___shlim($0,0);
      $68 = (___errno_location()|0);
      HEAP32[$68>>2] = 22;
      $289 = 0;$290 = 0;
      break L1;
     }
    }
   } while(0);
   if ((label|0) == 32) {
    $69 = ($$1165|0)==(10);
    if ($69) {
     $70 = (($$1160) + -48)|0;
     $71 = ($70>>>0)<(10);
     if ($71) {
      $$0154222 = 0;$74 = $70;
      while(1) {
       $72 = ($$0154222*10)|0;
       $73 = (($72) + ($74))|0;
       $75 = HEAP32[$6>>2]|0;
       $76 = HEAP32[$7>>2]|0;
       $77 = ($75>>>0)<($76>>>0);
       if ($77) {
        $78 = ((($75)) + 1|0);
        HEAP32[$6>>2] = $78;
        $79 = HEAP8[$75>>0]|0;
        $80 = $79&255;
        $$2161$be = $80;
       } else {
        $81 = (___shgetc($0)|0);
        $$2161$be = $81;
       }
       $82 = (($$2161$be) + -48)|0;
       $83 = ($82>>>0)<(10);
       $84 = ($73>>>0)<(429496729);
       $85 = $83 & $84;
       if ($85) {
        $$0154222 = $73;$74 = $82;
       } else {
        break;
       }
      }
      $$2161$lcssa = $$2161$be;$291 = $73;$292 = 0;
     } else {
      $$2161$lcssa = $$1160;$291 = 0;$292 = 0;
     }
     $86 = (($$2161$lcssa) + -48)|0;
     $87 = ($86>>>0)<(10);
     if ($87) {
      $$3162211 = $$2161$lcssa;$88 = $291;$89 = $292;$92 = $86;
      while(1) {
       $90 = (___muldi3(($88|0),($89|0),10,0)|0);
       $91 = tempRet0;
       $93 = ($92|0)<(0);
       $94 = $93 << 31 >> 31;
       $95 = $92 ^ -1;
       $96 = $94 ^ -1;
       $97 = ($91>>>0)>($96>>>0);
       $98 = ($90>>>0)>($95>>>0);
       $99 = ($91|0)==($96|0);
       $100 = $99 & $98;
       $101 = $97 | $100;
       if ($101) {
        $$3162$lcssa = $$3162211;$$lcssa = $92;$293 = $88;$294 = $89;
        break;
       }
       $102 = (_i64Add(($90|0),($91|0),($92|0),($94|0))|0);
       $103 = tempRet0;
       $104 = HEAP32[$6>>2]|0;
       $105 = HEAP32[$7>>2]|0;
       $106 = ($104>>>0)<($105>>>0);
       if ($106) {
        $107 = ((($104)) + 1|0);
        HEAP32[$6>>2] = $107;
        $108 = HEAP8[$104>>0]|0;
        $109 = $108&255;
        $$3162$be = $109;
       } else {
        $110 = (___shgetc($0)|0);
        $$3162$be = $110;
       }
       $111 = (($$3162$be) + -48)|0;
       $112 = ($111>>>0)<(10);
       $113 = ($103>>>0)<(429496729);
       $114 = ($102>>>0)<(2576980378);
       $115 = ($103|0)==(429496729);
       $116 = $115 & $114;
       $117 = $113 | $116;
       $or$cond7 = $112 & $117;
       if ($or$cond7) {
        $$3162211 = $$3162$be;$88 = $102;$89 = $103;$92 = $111;
       } else {
        $$3162$lcssa = $$3162$be;$$lcssa = $111;$293 = $102;$294 = $103;
        break;
       }
      }
      $118 = ($$lcssa>>>0)>(9);
      if ($118) {
       $$1158 = $$0157;$262 = $294;$264 = $293;
      } else {
       $$1165167 = 10;$$8 = $$3162$lcssa;$295 = $293;$296 = $294;
       label = 72;
      }
     } else {
      $$1158 = $$0157;$262 = $292;$264 = $291;
     }
    } else {
     $$1160169 = $$1160;$$1165168 = $$1165;
     label = 46;
    }
   }
   L63: do {
    if ((label|0) == 46) {
     $119 = (($$1165168) + -1)|0;
     $120 = $119 & $$1165168;
     $121 = ($120|0)==(0);
     if ($121) {
      $126 = ($$1165168*23)|0;
      $127 = $126 >>> 5;
      $128 = $127 & 7;
      $129 = (32958 + ($128)|0);
      $130 = HEAP8[$129>>0]|0;
      $131 = $130 << 24 >> 24;
      $132 = ((32702) + ($$1160169)|0);
      $133 = HEAP8[$132>>0]|0;
      $134 = $133&255;
      $135 = ($134>>>0)<($$1165168>>>0);
      if ($135) {
       $$1155188 = 0;$138 = $134;
       while(1) {
        $136 = $$1155188 << $131;
        $137 = $138 | $136;
        $139 = HEAP32[$6>>2]|0;
        $140 = HEAP32[$7>>2]|0;
        $141 = ($139>>>0)<($140>>>0);
        if ($141) {
         $142 = ((($139)) + 1|0);
         HEAP32[$6>>2] = $142;
         $143 = HEAP8[$139>>0]|0;
         $144 = $143&255;
         $$4163$be = $144;
        } else {
         $145 = (___shgetc($0)|0);
         $$4163$be = $145;
        }
        $146 = ((32702) + ($$4163$be)|0);
        $147 = HEAP8[$146>>0]|0;
        $148 = $147&255;
        $149 = ($148>>>0)<($$1165168>>>0);
        $150 = ($137>>>0)<(134217728);
        $151 = $150 & $149;
        if ($151) {
         $$1155188 = $137;$138 = $148;
        } else {
         break;
        }
       }
       $$4163$lcssa = $$4163$be;$155 = $147;$157 = 0;$159 = $137;
      } else {
       $$4163$lcssa = $$1160169;$155 = $133;$157 = 0;$159 = 0;
      }
      $152 = (_bitshift64Lshr(-1,-1,($131|0))|0);
      $153 = tempRet0;
      $154 = $155&255;
      $156 = ($154>>>0)>=($$1165168>>>0);
      $158 = ($157>>>0)>($153>>>0);
      $160 = ($159>>>0)>($152>>>0);
      $161 = ($157|0)==($153|0);
      $162 = $161 & $160;
      $163 = $158 | $162;
      $or$cond183 = $156 | $163;
      if ($or$cond183) {
       $$1165167 = $$1165168;$$8 = $$4163$lcssa;$295 = $159;$296 = $157;
       label = 72;
       break;
      } else {
       $164 = $159;$165 = $157;$169 = $155;
      }
      while(1) {
       $166 = (_bitshift64Shl(($164|0),($165|0),($131|0))|0);
       $167 = tempRet0;
       $168 = $169&255;
       $170 = $168 | $166;
       $171 = HEAP32[$6>>2]|0;
       $172 = HEAP32[$7>>2]|0;
       $173 = ($171>>>0)<($172>>>0);
       if ($173) {
        $174 = ((($171)) + 1|0);
        HEAP32[$6>>2] = $174;
        $175 = HEAP8[$171>>0]|0;
        $176 = $175&255;
        $$5$be = $176;
       } else {
        $177 = (___shgetc($0)|0);
        $$5$be = $177;
       }
       $178 = ((32702) + ($$5$be)|0);
       $179 = HEAP8[$178>>0]|0;
       $180 = $179&255;
       $181 = ($180>>>0)>=($$1165168>>>0);
       $182 = ($167>>>0)>($153>>>0);
       $183 = ($170>>>0)>($152>>>0);
       $184 = ($167|0)==($153|0);
       $185 = $184 & $183;
       $186 = $182 | $185;
       $or$cond = $181 | $186;
       if ($or$cond) {
        $$1165167 = $$1165168;$$8 = $$5$be;$295 = $170;$296 = $167;
        label = 72;
        break L63;
       } else {
        $164 = $170;$165 = $167;$169 = $179;
       }
      }
     }
     $122 = ((32702) + ($$1160169)|0);
     $123 = HEAP8[$122>>0]|0;
     $124 = $123&255;
     $125 = ($124>>>0)<($$1165168>>>0);
     if ($125) {
      $$2156206 = 0;$189 = $124;
      while(1) {
       $187 = Math_imul($$2156206, $$1165168)|0;
       $188 = (($189) + ($187))|0;
       $190 = HEAP32[$6>>2]|0;
       $191 = HEAP32[$7>>2]|0;
       $192 = ($190>>>0)<($191>>>0);
       if ($192) {
        $193 = ((($190)) + 1|0);
        HEAP32[$6>>2] = $193;
        $194 = HEAP8[$190>>0]|0;
        $195 = $194&255;
        $$6$be = $195;
       } else {
        $196 = (___shgetc($0)|0);
        $$6$be = $196;
       }
       $197 = ((32702) + ($$6$be)|0);
       $198 = HEAP8[$197>>0]|0;
       $199 = $198&255;
       $200 = ($199>>>0)<($$1165168>>>0);
       $201 = ($188>>>0)<(119304647);
       $202 = $201 & $200;
       if ($202) {
        $$2156206 = $188;$189 = $199;
       } else {
        break;
       }
      }
      $$6$lcssa = $$6$be;$204 = $198;$297 = $188;$298 = 0;
     } else {
      $$6$lcssa = $$1160169;$204 = $123;$297 = 0;$298 = 0;
     }
     $203 = $204&255;
     $205 = ($203>>>0)<($$1165168>>>0);
     if ($205) {
      $206 = (___udivdi3(-1,-1,($$1165168|0),0)|0);
      $207 = tempRet0;
      $$7194 = $$6$lcssa;$208 = $298;$210 = $297;$218 = $204;
      while(1) {
       $209 = ($208>>>0)>($207>>>0);
       $211 = ($210>>>0)>($206>>>0);
       $212 = ($208|0)==($207|0);
       $213 = $212 & $211;
       $214 = $209 | $213;
       if ($214) {
        $$1165167 = $$1165168;$$8 = $$7194;$295 = $210;$296 = $208;
        label = 72;
        break L63;
       }
       $215 = (___muldi3(($210|0),($208|0),($$1165168|0),0)|0);
       $216 = tempRet0;
       $217 = $218&255;
       $219 = $217 ^ -1;
       $220 = ($216>>>0)>(4294967295);
       $221 = ($215>>>0)>($219>>>0);
       $222 = ($216|0)==(-1);
       $223 = $222 & $221;
       $224 = $220 | $223;
       if ($224) {
        $$1165167 = $$1165168;$$8 = $$7194;$295 = $210;$296 = $208;
        label = 72;
        break L63;
       }
       $225 = (_i64Add(($217|0),0,($215|0),($216|0))|0);
       $226 = tempRet0;
       $227 = HEAP32[$6>>2]|0;
       $228 = HEAP32[$7>>2]|0;
       $229 = ($227>>>0)<($228>>>0);
       if ($229) {
        $230 = ((($227)) + 1|0);
        HEAP32[$6>>2] = $230;
        $231 = HEAP8[$227>>0]|0;
        $232 = $231&255;
        $$7$be = $232;
       } else {
        $233 = (___shgetc($0)|0);
        $$7$be = $233;
       }
       $234 = ((32702) + ($$7$be)|0);
       $235 = HEAP8[$234>>0]|0;
       $236 = $235&255;
       $237 = ($236>>>0)<($$1165168>>>0);
       if ($237) {
        $$7194 = $$7$be;$208 = $226;$210 = $225;$218 = $235;
       } else {
        $$1165167 = $$1165168;$$8 = $$7$be;$295 = $225;$296 = $226;
        label = 72;
        break;
       }
      }
     } else {
      $$1165167 = $$1165168;$$8 = $$6$lcssa;$295 = $297;$296 = $298;
      label = 72;
     }
    }
   } while(0);
   if ((label|0) == 72) {
    $238 = ((32702) + ($$8)|0);
    $239 = HEAP8[$238>>0]|0;
    $240 = $239&255;
    $241 = ($240>>>0)<($$1165167>>>0);
    if ($241) {
     while(1) {
      $242 = HEAP32[$6>>2]|0;
      $243 = HEAP32[$7>>2]|0;
      $244 = ($242>>>0)<($243>>>0);
      if ($244) {
       $245 = ((($242)) + 1|0);
       HEAP32[$6>>2] = $245;
       $246 = HEAP8[$242>>0]|0;
       $247 = $246&255;
       $$9$be = $247;
      } else {
       $248 = (___shgetc($0)|0);
       $$9$be = $248;
      }
      $249 = ((32702) + ($$9$be)|0);
      $250 = HEAP8[$249>>0]|0;
      $251 = $250&255;
      $252 = ($251>>>0)<($$1165167>>>0);
      if (!($252)) {
       break;
      }
     }
     $253 = (___errno_location()|0);
     HEAP32[$253>>2] = 34;
     $254 = $3 & 1;
     $255 = ($254|0)==(0);
     $256 = (0)==(0);
     $257 = $255 & $256;
     $$0157$ = $257 ? $$0157 : 0;
     $$1158 = $$0157$;$262 = $4;$264 = $3;
    } else {
     $$1158 = $$0157;$262 = $296;$264 = $295;
    }
   }
   $258 = HEAP32[$7>>2]|0;
   $259 = ($258|0)==(0|0);
   if (!($259)) {
    $260 = HEAP32[$6>>2]|0;
    $261 = ((($260)) + -1|0);
    HEAP32[$6>>2] = $261;
   }
   $263 = ($262>>>0)<($4>>>0);
   $265 = ($264>>>0)<($3>>>0);
   $266 = ($262|0)==($4|0);
   $267 = $266 & $265;
   $268 = $263 | $267;
   if (!($268)) {
    $269 = $3 & 1;
    $270 = ($269|0)!=(0);
    $271 = (0)!=(0);
    $272 = $270 | $271;
    $273 = ($$1158|0)!=(0);
    $or$cond12 = $272 | $273;
    if (!($or$cond12)) {
     $274 = (___errno_location()|0);
     HEAP32[$274>>2] = 34;
     $275 = (_i64Add(($3|0),($4|0),-1,-1)|0);
     $276 = tempRet0;
     $289 = $276;$290 = $275;
     break;
    }
    $277 = ($262>>>0)>($4>>>0);
    $278 = ($264>>>0)>($3>>>0);
    $279 = ($262|0)==($4|0);
    $280 = $279 & $278;
    $281 = $277 | $280;
    if ($281) {
     $282 = (___errno_location()|0);
     HEAP32[$282>>2] = 34;
     $289 = $4;$290 = $3;
     break;
    }
   }
   $283 = ($$1158|0)<(0);
   $284 = $283 << 31 >> 31;
   $285 = $264 ^ $$1158;
   $286 = $262 ^ $284;
   $287 = (_i64Subtract(($285|0),($286|0),($$1158|0),($284|0))|0);
   $288 = tempRet0;
   $289 = $288;$290 = $287;
  }
 } while(0);
 tempRet0 = ($289);
 return ($290|0);
}
function ___shgetc($0) {
 $0 = $0|0;
 var $$0 = 0, $$phi$trans$insert = 0, $$phi$trans$insert28 = 0, $$pre = 0, $$pre29 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 104|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0);
 if ($3) {
  label = 3;
 } else {
  $4 = ((($0)) + 108|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = ($5|0)<($2|0);
  if ($6) {
   label = 3;
  } else {
   label = 4;
  }
 }
 if ((label|0) == 3) {
  $7 = (___uflow($0)|0);
  $8 = ($7|0)<(0);
  if ($8) {
   label = 4;
  } else {
   $10 = HEAP32[$1>>2]|0;
   $11 = ($10|0)==(0);
   $$phi$trans$insert = ((($0)) + 8|0);
   $$pre = HEAP32[$$phi$trans$insert>>2]|0;
   if ($11) {
    $12 = $$pre;
    $42 = $12;
    label = 9;
   } else {
    $13 = ((($0)) + 4|0);
    $14 = HEAP32[$13>>2]|0;
    $15 = $14;
    $16 = (($$pre) - ($15))|0;
    $17 = ((($0)) + 108|0);
    $18 = HEAP32[$17>>2]|0;
    $19 = (($10) - ($18))|0;
    $20 = ($16|0)<($19|0);
    $21 = $$pre;
    if ($20) {
     $42 = $21;
     label = 9;
    } else {
     $22 = (($19) + -1)|0;
     $23 = (($14) + ($22)|0);
     $24 = ((($0)) + 100|0);
     HEAP32[$24>>2] = $23;
     $26 = $21;
    }
   }
   if ((label|0) == 9) {
    $25 = ((($0)) + 100|0);
    HEAP32[$25>>2] = $$pre;
    $26 = $42;
   }
   $27 = ($26|0)==(0|0);
   $$phi$trans$insert28 = ((($0)) + 4|0);
   if ($27) {
    $$pre29 = HEAP32[$$phi$trans$insert28>>2]|0;
    $37 = $$pre29;
   } else {
    $28 = HEAP32[$$phi$trans$insert28>>2]|0;
    $29 = $26;
    $30 = ((($0)) + 108|0);
    $31 = HEAP32[$30>>2]|0;
    $32 = (($29) + 1)|0;
    $33 = (($32) - ($28))|0;
    $34 = (($33) + ($31))|0;
    HEAP32[$30>>2] = $34;
    $35 = $28;
    $37 = $35;
   }
   $36 = ((($37)) + -1|0);
   $38 = HEAP8[$36>>0]|0;
   $39 = $38&255;
   $40 = ($39|0)==($7|0);
   if ($40) {
    $$0 = $7;
   } else {
    $41 = $7&255;
    HEAP8[$36>>0] = $41;
    $$0 = $7;
   }
  }
 }
 if ((label|0) == 4) {
  $9 = ((($0)) + 100|0);
  HEAP32[$9>>2] = 0;
  $$0 = -1;
 }
 return ($$0|0);
}
function ___uflow($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp;
 $2 = (___toread($0)|0);
 $3 = ($2|0)==(0);
 if ($3) {
  $4 = ((($0)) + 32|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = (FUNCTION_TABLE_iiii[$5 & 31]($0,$1,1)|0);
  $7 = ($6|0)==(1);
  if ($7) {
   $8 = HEAP8[$1>>0]|0;
   $9 = $8&255;
   $$0 = $9;
  } else {
   $$0 = -1;
  }
 } else {
  $$0 = -1;
 }
 STACKTOP = sp;return ($$0|0);
}
function ___toread($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $sext = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 74|0);
 $2 = HEAP8[$1>>0]|0;
 $3 = $2 << 24 >> 24;
 $4 = (($3) + 255)|0;
 $5 = $4 | $3;
 $6 = $5&255;
 HEAP8[$1>>0] = $6;
 $7 = ((($0)) + 20|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ((($0)) + 28|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ($8>>>0)>($10>>>0);
 if ($11) {
  $12 = ((($0)) + 36|0);
  $13 = HEAP32[$12>>2]|0;
  (FUNCTION_TABLE_iiii[$13 & 31]($0,0,0)|0);
 }
 $14 = ((($0)) + 16|0);
 HEAP32[$14>>2] = 0;
 HEAP32[$9>>2] = 0;
 HEAP32[$7>>2] = 0;
 $15 = HEAP32[$0>>2]|0;
 $16 = $15 & 4;
 $17 = ($16|0)==(0);
 if ($17) {
  $19 = ((($0)) + 44|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = ((($0)) + 48|0);
  $22 = HEAP32[$21>>2]|0;
  $23 = (($20) + ($22)|0);
  $24 = ((($0)) + 8|0);
  HEAP32[$24>>2] = $23;
  $25 = ((($0)) + 4|0);
  HEAP32[$25>>2] = $23;
  $26 = $15 << 27;
  $sext = $26 >> 31;
  $$0 = $sext;
 } else {
  $18 = $15 | 32;
  HEAP32[$0>>2] = $18;
  $$0 = -1;
 }
 return ($$0|0);
}
function _setlocale($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $$0$i = 0, $$04956 = 0, $$050$ = 0, $$05055 = 0, $$05253 = 0, $$151 = 0, $$154 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $exitcond = 0, $exitcond57 = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = sp;
 $3 = ($0>>>0)>(6);
 do {
  if ($3) {
   $$0 = 0;
  } else {
   ___lock((89008|0));
   $4 = ($0|0)==(6);
   $5 = ($1|0)==(0|0);
   if (!($4)) {
    if ($5) {
     $31 = (88976 + ($0<<2)|0);
     $32 = HEAP32[$31>>2]|0;
     $$0$i = $32;
    } else {
     $29 = (___get_locale($0,$1)|0);
     $30 = (88976 + ($0<<2)|0);
     HEAP32[$30>>2] = $29;
     $$0$i = $29;
    }
    $33 = ($$0$i|0)!=(0|0);
    $34 = ((($$0$i)) + 8|0);
    $35 = $33 ? $34 : 32983;
    ___unlock((89008|0));
    $$0 = $35;
    break;
   }
   if ($5) {
    $$05253 = 123419;$$154 = 0;
   } else {
    dest=$2; src=32967; stop=dest+16|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
    $$04956 = 0;$$05055 = $1;
    while(1) {
     $6 = (___strchrnul($$05055,59)|0);
     $7 = $6;
     $8 = $$05055;
     $9 = (($7) - ($8))|0;
     $10 = ($9|0)<(16);
     if ($10) {
      _memcpy(($2|0),($$05055|0),($9|0))|0;
      $11 = (($2) + ($9)|0);
      HEAP8[$11>>0] = 0;
      $12 = HEAP8[$6>>0]|0;
      $13 = ($12<<24>>24)==(0);
      $14 = ((($6)) + 1|0);
      $$050$ = $13 ? $$05055 : $14;
      $$151 = $$050$;
     } else {
      $$151 = $$05055;
     }
     $15 = (___get_locale($$04956,$2)|0);
     $16 = (88976 + ($$04956<<2)|0);
     HEAP32[$16>>2] = $15;
     $17 = (($$04956) + 1)|0;
     $exitcond57 = ($17|0)==(6);
     if ($exitcond57) {
      break;
     } else {
      $$04956 = $17;$$05055 = $$151;
     }
    }
    $$05253 = 123419;$$154 = 0;
   }
   while(1) {
    $18 = (88976 + ($$154<<2)|0);
    $19 = HEAP32[$18>>2]|0;
    $20 = ($19|0)!=(0|0);
    $21 = ((($19)) + 8|0);
    $22 = $20 ? $21 : 32983;
    $23 = (_strlen($22)|0);
    _memcpy(($$05253|0),($22|0),($23|0))|0;
    $24 = (($$05253) + ($23)|0);
    HEAP8[$24>>0] = 59;
    $25 = (($23) + 1)|0;
    $26 = (($$05253) + ($25)|0);
    $27 = (($$154) + 1)|0;
    $exitcond = ($27|0)==(6);
    if ($exitcond) {
     break;
    } else {
     $$05253 = $26;$$154 = $27;
    }
   }
   $28 = ((($26)) + -1|0);
   HEAP8[$28>>0] = 0;
   ___unlock((89008|0));
   $$0 = 123419;
  }
 } while(0);
 STACKTOP = sp;return ($$0|0);
}
function ___get_locale($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $$093$lcssa = 0, $$093118 = 0, $$094114 = 0, $$1 = 0, $$1100111 = 0, $$195112 = 0, $$2122 = 0, $$2123 = 0, $$2124 = 0, $$4 = 0, $$neg = 0, $$pre121 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $11 = 0, $12 = 0;
 var $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0;
 var $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0;
 var $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0;
 var $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__c_dot_utf8$$4 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 272|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(272|0);
 $2 = sp + 8|0;
 $3 = sp;
 $4 = HEAP8[$1>>0]|0;
 $5 = ($4<<24>>24)==(0);
 do {
  if ($5) {
   $6 = (_getenv((32985|0))|0);
   $7 = ($6|0)==(0|0);
   if (!($7)) {
    $8 = HEAP8[$6>>0]|0;
    $9 = ($8<<24>>24)==(0);
    if (!($9)) {
     $$1 = $6;
     break;
    }
   }
   $10 = (32992 + (($0*12)|0)|0);
   $11 = (_getenv(($10|0))|0);
   $12 = ($11|0)==(0|0);
   if (!($12)) {
    $13 = HEAP8[$11>>0]|0;
    $14 = ($13<<24>>24)==(0);
    if (!($14)) {
     $$1 = $11;
     break;
    }
   }
   $15 = (_getenv((33064|0))|0);
   $16 = ($15|0)==(0|0);
   if (!($16)) {
    $17 = HEAP8[$15>>0]|0;
    $18 = ($17<<24>>24)==(0);
    if (!($18)) {
     $$1 = $15;
     break;
    }
   }
   $$1 = 33069;
  } else {
   $$1 = $1;
  }
 } while(0);
 $$093118 = 0;
 L13: while(1) {
  $19 = (($$1) + ($$093118)|0);
  $20 = HEAP8[$19>>0]|0;
  switch ($20<<24>>24) {
  case 47: case 0:  {
   $$093$lcssa = $$093118;
   break L13;
   break;
  }
  default: {
  }
  }
  $21 = (($$093118) + 1)|0;
  $22 = ($21>>>0)<(15);
  if ($22) {
   $$093118 = $21;
  } else {
   $$093$lcssa = $21;
   break;
  }
 }
 $23 = HEAP8[$$1>>0]|0;
 $24 = ($23<<24>>24)==(46);
 if ($24) {
  $$2122 = 33069;
  label = 15;
 } else {
  $25 = (($$1) + ($$093$lcssa)|0);
  $26 = HEAP8[$25>>0]|0;
  $27 = ($26<<24>>24)==(0);
  if ($27) {
   $28 = ($23<<24>>24)==(67);
   if ($28) {
    $$2122 = $$1;
    label = 15;
   } else {
    $$2123 = $$1;
    label = 16;
   }
  } else {
   $$2122 = 33069;
   label = 15;
  }
 }
 if ((label|0) == 15) {
  $29 = ((($$2122)) + 1|0);
  $30 = HEAP8[$29>>0]|0;
  $31 = ($30<<24>>24)==(0);
  if ($31) {
   $$2124 = $$2122;
   label = 18;
  } else {
   $$2123 = $$2122;
   label = 16;
  }
 }
 L22: do {
  if ((label|0) == 16) {
   $32 = (_strcmp($$2123,33069)|0);
   $33 = ($32|0)==(0);
   if ($33) {
    $$2124 = $$2123;
    label = 18;
   } else {
    $34 = (_strcmp($$2123,33077)|0);
    $35 = ($34|0)==(0);
    if ($35) {
     $$2124 = $$2123;
     label = 18;
    } else {
     $40 = HEAP32[22254]|0;
     $41 = ($40|0)==(0|0);
     if (!($41)) {
      $$094114 = $40;
      while(1) {
       $42 = ((($$094114)) + 8|0);
       $43 = (_strcmp($$2123,$42)|0);
       $44 = ($43|0)==(0);
       if ($44) {
        $$0 = $$094114;
        break L22;
       }
       $45 = ((($$094114)) + 24|0);
       $46 = HEAP32[$45>>2]|0;
       $47 = ($46|0)==(0|0);
       if ($47) {
        break;
       } else {
        $$094114 = $46;
       }
      }
     }
     ___lock((89020|0));
     $48 = HEAP32[22254]|0;
     $49 = ($48|0)==(0|0);
     L32: do {
      if (!($49)) {
       $$195112 = $48;
       while(1) {
        $50 = ((($$195112)) + 8|0);
        $51 = (_strcmp($$2123,$50)|0);
        $52 = ($51|0)==(0);
        if ($52) {
         break;
        }
        $53 = ((($$195112)) + 24|0);
        $54 = HEAP32[$53>>2]|0;
        $55 = ($54|0)==(0|0);
        if ($55) {
         break L32;
        } else {
         $$195112 = $54;
        }
       }
       ___unlock((89020|0));
       $$0 = $$195112;
       break L22;
      }
     } while(0);
     $56 = HEAP32[(88944)>>2]|0;
     $57 = ($56|0)==(0);
     L39: do {
      if ($57) {
       $58 = (_getenv((33083|0))|0);
       $59 = ($58|0)==(0|0);
       if ($59) {
        label = 41;
       } else {
        $60 = HEAP8[$58>>0]|0;
        $61 = ($60<<24>>24)==(0);
        if ($61) {
         label = 41;
        } else {
         $62 = (254 - ($$093$lcssa))|0;
         $63 = (($$093$lcssa) + 1)|0;
         $$1100111 = $58;
         while(1) {
          $64 = (___strchrnul($$1100111,58)|0);
          $65 = $64;
          $66 = $$1100111;
          $67 = (($65) - ($66))|0;
          $68 = HEAP8[$64>>0]|0;
          $69 = ($68<<24>>24)!=(0);
          $$neg = $69 << 31 >> 31;
          $70 = (($$neg) + ($67))|0;
          $71 = ($70>>>0)<($62>>>0);
          if ($71) {
           _memcpy(($2|0),($$1100111|0),($70|0))|0;
           $72 = (($2) + ($70)|0);
           HEAP8[$72>>0] = 47;
           $73 = ((($72)) + 1|0);
           _memcpy(($73|0),($$2123|0),($$093$lcssa|0))|0;
           $74 = (($63) + ($70))|0;
           $75 = (($2) + ($74)|0);
           HEAP8[$75>>0] = 0;
           $76 = (___map_file(($2|0),($3|0))|0);
           $77 = ($76|0)==(0|0);
           if (!($77)) {
            break;
           }
           $$pre121 = HEAP8[$64>>0]|0;
           $86 = $$pre121;
          } else {
           $86 = $68;
          }
          $87 = ($86<<24>>24)!=(0);
          $88 = $87&1;
          $89 = (($64) + ($88)|0);
          $90 = HEAP8[$89>>0]|0;
          $91 = ($90<<24>>24)==(0);
          if ($91) {
           label = 41;
           break L39;
          } else {
           $$1100111 = $89;
          }
         }
         $78 = (_malloc(28)|0);
         $79 = ($78|0)==(0|0);
         if ($79) {
          $92 = HEAP32[$3>>2]|0;
          (___munmap($76,$92)|0);
          label = 41;
          break;
         } else {
          HEAP32[$78>>2] = $76;
          $80 = HEAP32[$3>>2]|0;
          $81 = ((($78)) + 4|0);
          HEAP32[$81>>2] = $80;
          $82 = ((($78)) + 8|0);
          _memcpy(($82|0),($$2123|0),($$093$lcssa|0))|0;
          $83 = (($82) + ($$093$lcssa)|0);
          HEAP8[$83>>0] = 0;
          $84 = HEAP32[22254]|0;
          $85 = ((($78)) + 24|0);
          HEAP32[$85>>2] = $84;
          HEAP32[22254] = $78;
          $$4 = $78;
          break;
         }
        }
       }
      } else {
       label = 41;
      }
     } while(0);
     if ((label|0) == 41) {
      $93 = (_malloc(28)|0);
      $94 = ($93|0)==(0|0);
      if ($94) {
       $$4 = $93;
      } else {
       $95 = HEAP32[1295]|0;
       HEAP32[$93>>2] = $95;
       $96 = HEAP32[(5184)>>2]|0;
       $97 = ((($93)) + 4|0);
       HEAP32[$97>>2] = $96;
       $98 = ((($93)) + 8|0);
       _memcpy(($98|0),($$2123|0),($$093$lcssa|0))|0;
       $99 = (($98) + ($$093$lcssa)|0);
       HEAP8[$99>>0] = 0;
       $100 = HEAP32[22254]|0;
       $101 = ((($93)) + 24|0);
       HEAP32[$101>>2] = $100;
       HEAP32[22254] = $93;
       $$4 = $93;
      }
     }
     $102 = ($$4|0)==(0|0);
     $103 = ($0|0)==(0);
     $or$cond = $103 & $102;
     $__c_dot_utf8$$4 = $or$cond ? 5180 : $$4;
     ___unlock((89020|0));
     $$0 = $__c_dot_utf8$$4;
    }
   }
  }
 } while(0);
 do {
  if ((label|0) == 18) {
   $36 = ($0|0)==(0);
   if ($36) {
    $37 = ((($$2124)) + 1|0);
    $38 = HEAP8[$37>>0]|0;
    $39 = ($38<<24>>24)==(46);
    if ($39) {
     $$0 = 5180;
     break;
    }
   }
   $$0 = 0;
  }
 } while(0);
 STACKTOP = sp;return ($$0|0);
}
function ___munmap($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 _dummy_140();
 $2 = $0;
 HEAP32[$vararg_buffer>>2] = $2;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $1;
 $3 = (___syscall91(91,($vararg_buffer|0))|0);
 $4 = (___syscall_ret($3)|0);
 STACKTOP = sp;return ($4|0);
}
function _dummy_140() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function _isalnum($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $isdigit = 0, $isdigittmp = 0, $not$ = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (_isalpha($0)|0);
 $isdigittmp = (($0) + -48)|0;
 $isdigit = ($isdigittmp>>>0)<(10);
 $not$ = ($1|0)!=(0);
 $2 = $isdigit | $not$;
 $3 = $2&1;
 return ($3|0);
}
function _isalpha($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = $0 | 32;
 $2 = (($1) + -97)|0;
 $3 = ($2>>>0)<(26);
 $4 = $3&1;
 return ($4|0);
}
function _iswspace($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($0|0)==(0);
 if ($1) {
  $5 = 0;
 } else {
  $2 = (_wcschr(5932,$0)|0);
  $3 = ($2|0)!=(0|0);
  $5 = $3;
 }
 $4 = $5&1;
 return ($4|0);
}
function _iswalnum($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (_iswdigit($0)|0);
 $2 = ($1|0)==(0);
 if ($2) {
  $3 = (_iswalpha($0)|0);
  $4 = ($3|0)!=(0);
  $6 = $4;
 } else {
  $6 = 1;
 }
 $5 = $6&1;
 return ($5|0);
}
function _iswdigit($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (($0) + -48)|0;
 $2 = ($1>>>0)<(10);
 $3 = $2&1;
 return ($3|0);
}
function _towupper($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (___towcase($0,0)|0);
 return ($1|0);
}
function _islower($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (($0) + -97)|0;
 $2 = ($1>>>0)<(26);
 $3 = $2&1;
 return ($3|0);
}
function _snprintf($0,$1,$2,$varargs) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $varargs = $varargs|0;
 var $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = sp;
 HEAP32[$3>>2] = $varargs;
 $4 = (_vsnprintf($0,$1,$2,$3)|0);
 STACKTOP = sp;return ($4|0);
}
function _vsnprintf($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$$015 = 0, $$0 = 0, $$014 = 0, $$015 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(128|0);
 $4 = sp + 124|0;
 $5 = sp;
 dest=$5; src=6020; stop=dest+124|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 $6 = (($1) + -1)|0;
 $7 = ($6>>>0)>(2147483646);
 if ($7) {
  $8 = ($1|0)==(0);
  if ($8) {
   $$014 = $4;$$015 = 1;
   label = 4;
  } else {
   $9 = (___errno_location()|0);
   HEAP32[$9>>2] = 75;
   $$0 = -1;
  }
 } else {
  $$014 = $0;$$015 = $1;
  label = 4;
 }
 if ((label|0) == 4) {
  $10 = $$014;
  $11 = (-2 - ($10))|0;
  $12 = ($$015>>>0)>($11>>>0);
  $$$015 = $12 ? $11 : $$015;
  $13 = ((($5)) + 48|0);
  HEAP32[$13>>2] = $$$015;
  $14 = ((($5)) + 20|0);
  HEAP32[$14>>2] = $$014;
  $15 = ((($5)) + 44|0);
  HEAP32[$15>>2] = $$014;
  $16 = (($$014) + ($$$015)|0);
  $17 = ((($5)) + 16|0);
  HEAP32[$17>>2] = $16;
  $18 = ((($5)) + 28|0);
  HEAP32[$18>>2] = $16;
  $19 = (_vfprintf($5,$2,$3)|0);
  $20 = ($$$015|0)==(0);
  if ($20) {
   $$0 = $19;
  } else {
   $21 = HEAP32[$14>>2]|0;
   $22 = HEAP32[$17>>2]|0;
   $23 = ($21|0)==($22|0);
   $24 = $23 << 31 >> 31;
   $25 = (($21) + ($24)|0);
   HEAP8[$25>>0] = 0;
   $$0 = $19;
  }
 }
 STACKTOP = sp;return ($$0|0);
}
function _vfprintf($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$ = 0, $$0 = 0, $$1 = 0, $$1$ = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $vacopy_currentptr = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 224|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(224|0);
 $3 = sp + 120|0;
 $4 = sp + 80|0;
 $5 = sp;
 $6 = sp + 136|0;
 dest=$4; stop=dest+40|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 $vacopy_currentptr = HEAP32[$2>>2]|0;
 HEAP32[$3>>2] = $vacopy_currentptr;
 $7 = (_printf_core(0,$1,$3,$5,$4)|0);
 $8 = ($7|0)<(0);
 if ($8) {
  $$0 = -1;
 } else {
  $9 = ((($0)) + 76|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = ($10|0)>(-1);
  if ($11) {
   $12 = (___lockfile($0)|0);
   $39 = $12;
  } else {
   $39 = 0;
  }
  $13 = HEAP32[$0>>2]|0;
  $14 = $13 & 32;
  $15 = ((($0)) + 74|0);
  $16 = HEAP8[$15>>0]|0;
  $17 = ($16<<24>>24)<(1);
  if ($17) {
   $18 = $13 & -33;
   HEAP32[$0>>2] = $18;
  }
  $19 = ((($0)) + 48|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = ($20|0)==(0);
  if ($21) {
   $23 = ((($0)) + 44|0);
   $24 = HEAP32[$23>>2]|0;
   HEAP32[$23>>2] = $6;
   $25 = ((($0)) + 28|0);
   HEAP32[$25>>2] = $6;
   $26 = ((($0)) + 20|0);
   HEAP32[$26>>2] = $6;
   HEAP32[$19>>2] = 80;
   $27 = ((($6)) + 80|0);
   $28 = ((($0)) + 16|0);
   HEAP32[$28>>2] = $27;
   $29 = (_printf_core($0,$1,$3,$5,$4)|0);
   $30 = ($24|0)==(0|0);
   if ($30) {
    $$1 = $29;
   } else {
    $31 = ((($0)) + 36|0);
    $32 = HEAP32[$31>>2]|0;
    (FUNCTION_TABLE_iiii[$32 & 31]($0,0,0)|0);
    $33 = HEAP32[$26>>2]|0;
    $34 = ($33|0)==(0|0);
    $$ = $34 ? -1 : $29;
    HEAP32[$23>>2] = $24;
    HEAP32[$19>>2] = 0;
    HEAP32[$28>>2] = 0;
    HEAP32[$25>>2] = 0;
    HEAP32[$26>>2] = 0;
    $$1 = $$;
   }
  } else {
   $22 = (_printf_core($0,$1,$3,$5,$4)|0);
   $$1 = $22;
  }
  $35 = HEAP32[$0>>2]|0;
  $36 = $35 & 32;
  $37 = ($36|0)==(0);
  $$1$ = $37 ? $$1 : -1;
  $38 = $35 | $14;
  HEAP32[$0>>2] = $38;
  $40 = ($39|0)==(0);
  if (!($40)) {
   ___unlockfile($0);
  }
  $$0 = $$1$;
 }
 STACKTOP = sp;return ($$0|0);
}
function _printf_core($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$ = 0, $$$0259 = 0, $$$0262 = 0, $$$0269 = 0, $$$3484$i = 0, $$$3484704$i = 0, $$$3484705$i = 0, $$$3501$i = 0, $$$4266 = 0, $$$4502$i = 0, $$$5 = 0, $$$i = 0, $$0 = 0, $$0$i = 0, $$0$lcssa$i300 = 0, $$0228 = 0, $$0229396 = 0, $$0232 = 0, $$0235 = 0, $$0237 = 0;
 var $$0240$lcssa = 0, $$0240$lcssa460 = 0, $$0240395 = 0, $$0243 = 0, $$0247 = 0, $$0249$lcssa = 0, $$0249383 = 0, $$0252 = 0, $$0253 = 0, $$0254 = 0, $$0254$ = 0, $$0259 = 0, $$0262342 = 0, $$0262390 = 0, $$0269 = 0, $$0269$phi = 0, $$0321 = 0, $$0463$lcssa$i = 0, $$0463593$i = 0, $$0464602$i = 0;
 var $$0466$i = 0.0, $$0470$i = 0, $$0471$i = 0.0, $$0479$i = 0, $$0487651$i = 0, $$0488$i = 0, $$0488662$i = 0, $$0488664$i = 0, $$0496$$9$i = 0, $$0497663$i = 0, $$0498$i = 0, $$05$lcssa$i = 0, $$0509591$i = 0.0, $$0510$i = 0, $$0511$i = 0, $$0514646$i = 0, $$0520$i = 0, $$0521$$i = 0, $$0521$i = 0, $$0523$i = 0;
 var $$0525$i = 0, $$0527$i = 0, $$0527638$i = 0, $$0527640$i = 0, $$0530645$i = 0, $$056$i = 0, $$06$i = 0, $$06$i290 = 0, $$06$i298 = 0, $$1 = 0, $$1230407 = 0, $$1233 = 0, $$1236 = 0, $$1238 = 0, $$1241406 = 0, $$1244394 = 0, $$1248 = 0, $$1250 = 0, $$1255 = 0, $$1260 = 0;
 var $$1263 = 0, $$1263$ = 0, $$1270 = 0, $$1322 = 0, $$1465$i = 0, $$1467$i = 0.0, $$1469$i = 0.0, $$1472$i = 0.0, $$1480$i = 0, $$1482$lcssa$i = 0, $$1482670$i = 0, $$1489650$i = 0, $$1499$lcssa$i = 0, $$1499669$i = 0, $$1508592$i = 0, $$1512$lcssa$i = 0, $$1512616$i = 0, $$1515$i = 0, $$1524$i = 0, $$1526$i = 0;
 var $$1528623$i = 0, $$1531$lcssa$i = 0, $$1531639$i = 0, $$1606$i = 0, $$2 = 0, $$2$i = 0, $$2234 = 0, $$2239 = 0, $$2242381 = 0, $$2245 = 0, $$2251 = 0, $$2256 = 0, $$2256$ = 0, $$2261 = 0, $$2271 = 0, $$2323$lcssa = 0, $$2323382 = 0, $$2473$i = 0.0, $$2476$$544$i = 0, $$2476$$546$i = 0;
 var $$2476$i = 0, $$2483$ph$i = 0, $$2490$lcssa$i = 0, $$2490631$i = 0, $$2500$i = 0, $$2513$i = 0, $$2516627$i = 0, $$2529$i = 0, $$2532626$i = 0, $$3$i = 0.0, $$3257 = 0, $$3265 = 0, $$3272 = 0, $$331 = 0, $$332 = 0, $$333 = 0, $$3379 = 0, $$3477$i = 0, $$3484$lcssa$i = 0, $$3484657$i = 0;
 var $$3501$lcssa$i = 0, $$3501656$i = 0, $$3533622$i = 0, $$4$i = 0.0, $$4258458 = 0, $$4266 = 0, $$4325 = 0, $$4478$lcssa$i = 0, $$4478599$i = 0, $$4492$i = 0, $$4502$i = 0, $$4518$i = 0, $$5 = 0, $$5$lcssa$i = 0, $$536$i = 0, $$537$$i = 0, $$537$i = 0, $$540$i = 0.0, $$543$i = 0, $$545$i = 0;
 var $$5486$lcssa$i = 0, $$5486632$i = 0, $$5493605$i = 0, $$5519$ph$i = 0, $$552$i = 0, $$553$i = 0, $$556$i = 0.0, $$5610$i = 0, $$6 = 0, $$6$i = 0, $$6268 = 0, $$6494598$i = 0, $$7 = 0, $$7495609$i = 0, $$7505$$i = 0, $$7505$i = 0, $$7505$ph$i = 0, $$8$i = 0, $$9$ph$i = 0, $$lcssa682$i = 0;
 var $$neg$i = 0, $$neg571$i = 0, $$pn$i = 0, $$pr = 0, $$pr$i = 0, $$pr570$i = 0, $$pre = 0, $$pre$i = 0, $$pre$phi703$iZ2D = 0, $$pre452 = 0, $$pre453 = 0, $$pre454 = 0, $$pre696$i = 0, $$pre699$i = 0, $$pre702$i = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0;
 var $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0;
 var $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0;
 var $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0;
 var $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0;
 var $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0;
 var $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0;
 var $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0;
 var $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0;
 var $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0;
 var $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0;
 var $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0;
 var $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0;
 var $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0;
 var $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0;
 var $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0.0, $372 = 0, $373 = 0, $374 = 0, $375 = 0.0, $376 = 0;
 var $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0;
 var $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0.0, $404 = 0.0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0;
 var $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0.0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0.0, $424 = 0.0, $425 = 0.0, $426 = 0.0, $427 = 0.0, $428 = 0.0, $429 = 0, $43 = 0, $430 = 0;
 var $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0;
 var $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0.0, $455 = 0.0, $456 = 0.0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0;
 var $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0;
 var $486 = 0, $487 = 0.0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0.0, $494 = 0.0, $495 = 0.0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0;
 var $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0;
 var $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0;
 var $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0;
 var $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0;
 var $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0;
 var $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0.0, $606 = 0.0, $607 = 0, $608 = 0.0, $609 = 0, $61 = 0, $610 = 0;
 var $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0;
 var $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0;
 var $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0;
 var $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0;
 var $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0;
 var $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0;
 var $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0;
 var $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0;
 var $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0;
 var $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0, $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0, $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0;
 var $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0, $799 = 0, $8 = 0, $80 = 0, $800 = 0, $801 = 0, $802 = 0, $803 = 0, $804 = 0, $805 = 0, $806 = 0, $807 = 0, $808 = 0, $809 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0;
 var $arglist_current = 0, $arglist_current2 = 0, $arglist_next = 0, $arglist_next3 = 0, $exitcond$i = 0, $expanded = 0, $expanded10 = 0, $expanded11 = 0, $expanded13 = 0, $expanded14 = 0, $expanded15 = 0, $expanded4 = 0, $expanded6 = 0, $expanded7 = 0, $expanded8 = 0, $isdigit = 0, $isdigit$i = 0, $isdigit$i292 = 0, $isdigit275 = 0, $isdigit277 = 0;
 var $isdigit5$i = 0, $isdigit5$i288 = 0, $isdigittmp = 0, $isdigittmp$ = 0, $isdigittmp$i = 0, $isdigittmp$i291 = 0, $isdigittmp274 = 0, $isdigittmp276 = 0, $isdigittmp4$i = 0, $isdigittmp4$i287 = 0, $isdigittmp7$i = 0, $isdigittmp7$i289 = 0, $notlhs$i = 0, $notrhs$i = 0, $or$cond = 0, $or$cond$i = 0, $or$cond280 = 0, $or$cond282 = 0, $or$cond285 = 0, $or$cond3$not$i = 0;
 var $or$cond412 = 0, $or$cond539$i = 0, $or$cond542$i = 0, $or$cond551$i = 0, $or$cond6$i = 0, $scevgep693$i = 0, $scevgep693694$i = 0, $storemerge = 0, $storemerge273345 = 0, $storemerge273389 = 0, $storemerge278 = 0, $sum = 0, $trunc = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 624|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(624|0);
 $5 = sp + 24|0;
 $6 = sp + 16|0;
 $7 = sp + 588|0;
 $8 = sp + 576|0;
 $9 = sp;
 $10 = sp + 536|0;
 $11 = sp + 8|0;
 $12 = sp + 528|0;
 $13 = ($0|0)!=(0|0);
 $14 = ((($10)) + 40|0);
 $15 = $14;
 $16 = ((($10)) + 39|0);
 $17 = ((($11)) + 4|0);
 $18 = $7;
 $19 = (0 - ($18))|0;
 $20 = ((($8)) + 12|0);
 $21 = ((($8)) + 11|0);
 $22 = $20;
 $23 = (($22) - ($18))|0;
 $24 = (-2 - ($18))|0;
 $25 = (($22) + 2)|0;
 $26 = ((($5)) + 288|0);
 $27 = ((($7)) + 9|0);
 $28 = $27;
 $29 = ((($7)) + 8|0);
 $$0243 = 0;$$0247 = 0;$$0269 = 0;$$0321 = $1;
 L1: while(1) {
  $30 = ($$0247|0)>(-1);
  do {
   if ($30) {
    $31 = (2147483647 - ($$0247))|0;
    $32 = ($$0243|0)>($31|0);
    if ($32) {
     $33 = (___errno_location()|0);
     HEAP32[$33>>2] = 75;
     $$1248 = -1;
     break;
    } else {
     $34 = (($$0243) + ($$0247))|0;
     $$1248 = $34;
     break;
    }
   } else {
    $$1248 = $$0247;
   }
  } while(0);
  $35 = HEAP8[$$0321>>0]|0;
  $36 = ($35<<24>>24)==(0);
  if ($36) {
   label = 243;
   break;
  } else {
   $$1322 = $$0321;$37 = $35;
  }
  L9: while(1) {
   switch ($37<<24>>24) {
   case 37:  {
    $$0249383 = $$1322;$$2323382 = $$1322;
    label = 9;
    break L9;
    break;
   }
   case 0:  {
    $$0249$lcssa = $$1322;$$2323$lcssa = $$1322;
    break L9;
    break;
   }
   default: {
   }
   }
   $38 = ((($$1322)) + 1|0);
   $$pre = HEAP8[$38>>0]|0;
   $$1322 = $38;$37 = $$pre;
  }
  L12: do {
   if ((label|0) == 9) {
    while(1) {
     label = 0;
     $39 = ((($$2323382)) + 1|0);
     $40 = HEAP8[$39>>0]|0;
     $41 = ($40<<24>>24)==(37);
     if (!($41)) {
      $$0249$lcssa = $$0249383;$$2323$lcssa = $$2323382;
      break L12;
     }
     $42 = ((($$0249383)) + 1|0);
     $43 = ((($$2323382)) + 2|0);
     $44 = HEAP8[$43>>0]|0;
     $45 = ($44<<24>>24)==(37);
     if ($45) {
      $$0249383 = $42;$$2323382 = $43;
      label = 9;
     } else {
      $$0249$lcssa = $42;$$2323$lcssa = $43;
      break;
     }
    }
   }
  } while(0);
  $46 = $$0249$lcssa;
  $47 = $$0321;
  $48 = (($46) - ($47))|0;
  if ($13) {
   $49 = HEAP32[$0>>2]|0;
   $50 = $49 & 32;
   $51 = ($50|0)==(0);
   if ($51) {
    (___fwritex($$0321,$48,$0)|0);
   }
  }
  $52 = ($48|0)==(0);
  if (!($52)) {
   $$0269$phi = $$0269;$$0243 = $48;$$0247 = $$1248;$$0321 = $$2323$lcssa;$$0269 = $$0269$phi;
   continue;
  }
  $53 = ((($$2323$lcssa)) + 1|0);
  $54 = HEAP8[$53>>0]|0;
  $55 = $54 << 24 >> 24;
  $isdigittmp = (($55) + -48)|0;
  $isdigit = ($isdigittmp>>>0)<(10);
  if ($isdigit) {
   $56 = ((($$2323$lcssa)) + 2|0);
   $57 = HEAP8[$56>>0]|0;
   $58 = ($57<<24>>24)==(36);
   $59 = ((($$2323$lcssa)) + 3|0);
   $$331 = $58 ? $59 : $53;
   $$$0269 = $58 ? 1 : $$0269;
   $isdigittmp$ = $58 ? $isdigittmp : -1;
   $$pre452 = HEAP8[$$331>>0]|0;
   $$0253 = $isdigittmp$;$$1270 = $$$0269;$61 = $$pre452;$storemerge = $$331;
  } else {
   $$0253 = -1;$$1270 = $$0269;$61 = $54;$storemerge = $53;
  }
  $60 = $61 << 24 >> 24;
  $62 = (($60) + -32)|0;
  $63 = ($62>>>0)<(32);
  L25: do {
   if ($63) {
    $$0262390 = 0;$65 = $62;$69 = $61;$storemerge273389 = $storemerge;
    while(1) {
     $64 = 1 << $65;
     $66 = $64 & 75913;
     $67 = ($66|0)==(0);
     if ($67) {
      $$0262342 = $$0262390;$78 = $69;$storemerge273345 = $storemerge273389;
      break L25;
     }
     $68 = $69 << 24 >> 24;
     $70 = (($68) + -32)|0;
     $71 = 1 << $70;
     $72 = $71 | $$0262390;
     $73 = ((($storemerge273389)) + 1|0);
     $74 = HEAP8[$73>>0]|0;
     $75 = $74 << 24 >> 24;
     $76 = (($75) + -32)|0;
     $77 = ($76>>>0)<(32);
     if ($77) {
      $$0262390 = $72;$65 = $76;$69 = $74;$storemerge273389 = $73;
     } else {
      $$0262342 = $72;$78 = $74;$storemerge273345 = $73;
      break;
     }
    }
   } else {
    $$0262342 = 0;$78 = $61;$storemerge273345 = $storemerge;
   }
  } while(0);
  $79 = ($78<<24>>24)==(42);
  do {
   if ($79) {
    $80 = ((($storemerge273345)) + 1|0);
    $81 = HEAP8[$80>>0]|0;
    $82 = $81 << 24 >> 24;
    $isdigittmp276 = (($82) + -48)|0;
    $isdigit277 = ($isdigittmp276>>>0)<(10);
    if ($isdigit277) {
     $83 = ((($storemerge273345)) + 2|0);
     $84 = HEAP8[$83>>0]|0;
     $85 = ($84<<24>>24)==(36);
     if ($85) {
      $86 = (($4) + ($isdigittmp276<<2)|0);
      HEAP32[$86>>2] = 10;
      $87 = HEAP8[$80>>0]|0;
      $88 = $87 << 24 >> 24;
      $89 = (($88) + -48)|0;
      $90 = (($3) + ($89<<3)|0);
      $91 = $90;
      $92 = $91;
      $93 = HEAP32[$92>>2]|0;
      $94 = (($91) + 4)|0;
      $95 = $94;
      $96 = HEAP32[$95>>2]|0;
      $97 = ((($storemerge273345)) + 3|0);
      $$0259 = $93;$$2271 = 1;$storemerge278 = $97;
     } else {
      label = 24;
     }
    } else {
     label = 24;
    }
    if ((label|0) == 24) {
     label = 0;
     $98 = ($$1270|0)==(0);
     if (!($98)) {
      $$0 = -1;
      break L1;
     }
     if (!($13)) {
      $$1260 = 0;$$1263 = $$0262342;$$3272 = 0;$$4325 = $80;$$pr = $81;
      break;
     }
     $arglist_current = HEAP32[$2>>2]|0;
     $99 = $arglist_current;
     $100 = ((0) + 4|0);
     $expanded4 = $100;
     $expanded = (($expanded4) - 1)|0;
     $101 = (($99) + ($expanded))|0;
     $102 = ((0) + 4|0);
     $expanded8 = $102;
     $expanded7 = (($expanded8) - 1)|0;
     $expanded6 = $expanded7 ^ -1;
     $103 = $101 & $expanded6;
     $104 = $103;
     $105 = HEAP32[$104>>2]|0;
     $arglist_next = ((($104)) + 4|0);
     HEAP32[$2>>2] = $arglist_next;
     $$0259 = $105;$$2271 = 0;$storemerge278 = $80;
    }
    $106 = ($$0259|0)<(0);
    $107 = $$0262342 | 8192;
    $108 = (0 - ($$0259))|0;
    $$$0262 = $106 ? $107 : $$0262342;
    $$$0259 = $106 ? $108 : $$0259;
    $$pre453 = HEAP8[$storemerge278>>0]|0;
    $$1260 = $$$0259;$$1263 = $$$0262;$$3272 = $$2271;$$4325 = $storemerge278;$$pr = $$pre453;
   } else {
    $109 = $78 << 24 >> 24;
    $isdigittmp4$i = (($109) + -48)|0;
    $isdigit5$i = ($isdigittmp4$i>>>0)<(10);
    if ($isdigit5$i) {
     $$06$i = 0;$113 = $storemerge273345;$isdigittmp7$i = $isdigittmp4$i;
     while(1) {
      $110 = ($$06$i*10)|0;
      $111 = (($110) + ($isdigittmp7$i))|0;
      $112 = ((($113)) + 1|0);
      $114 = HEAP8[$112>>0]|0;
      $115 = $114 << 24 >> 24;
      $isdigittmp$i = (($115) + -48)|0;
      $isdigit$i = ($isdigittmp$i>>>0)<(10);
      if ($isdigit$i) {
       $$06$i = $111;$113 = $112;$isdigittmp7$i = $isdigittmp$i;
      } else {
       break;
      }
     }
     $116 = ($111|0)<(0);
     if ($116) {
      $$0 = -1;
      break L1;
     } else {
      $$1260 = $111;$$1263 = $$0262342;$$3272 = $$1270;$$4325 = $112;$$pr = $114;
     }
    } else {
     $$1260 = 0;$$1263 = $$0262342;$$3272 = $$1270;$$4325 = $storemerge273345;$$pr = $78;
    }
   }
  } while(0);
  $117 = ($$pr<<24>>24)==(46);
  L45: do {
   if ($117) {
    $118 = ((($$4325)) + 1|0);
    $119 = HEAP8[$118>>0]|0;
    $120 = ($119<<24>>24)==(42);
    if (!($120)) {
     $147 = $119 << 24 >> 24;
     $isdigittmp4$i287 = (($147) + -48)|0;
     $isdigit5$i288 = ($isdigittmp4$i287>>>0)<(10);
     if ($isdigit5$i288) {
      $$06$i290 = 0;$151 = $118;$isdigittmp7$i289 = $isdigittmp4$i287;
     } else {
      $$0254 = 0;$$6 = $118;
      break;
     }
     while(1) {
      $148 = ($$06$i290*10)|0;
      $149 = (($148) + ($isdigittmp7$i289))|0;
      $150 = ((($151)) + 1|0);
      $152 = HEAP8[$150>>0]|0;
      $153 = $152 << 24 >> 24;
      $isdigittmp$i291 = (($153) + -48)|0;
      $isdigit$i292 = ($isdigittmp$i291>>>0)<(10);
      if ($isdigit$i292) {
       $$06$i290 = $149;$151 = $150;$isdigittmp7$i289 = $isdigittmp$i291;
      } else {
       $$0254 = $149;$$6 = $150;
       break L45;
      }
     }
    }
    $121 = ((($$4325)) + 2|0);
    $122 = HEAP8[$121>>0]|0;
    $123 = $122 << 24 >> 24;
    $isdigittmp274 = (($123) + -48)|0;
    $isdigit275 = ($isdigittmp274>>>0)<(10);
    if ($isdigit275) {
     $124 = ((($$4325)) + 3|0);
     $125 = HEAP8[$124>>0]|0;
     $126 = ($125<<24>>24)==(36);
     if ($126) {
      $127 = (($4) + ($isdigittmp274<<2)|0);
      HEAP32[$127>>2] = 10;
      $128 = HEAP8[$121>>0]|0;
      $129 = $128 << 24 >> 24;
      $130 = (($129) + -48)|0;
      $131 = (($3) + ($130<<3)|0);
      $132 = $131;
      $133 = $132;
      $134 = HEAP32[$133>>2]|0;
      $135 = (($132) + 4)|0;
      $136 = $135;
      $137 = HEAP32[$136>>2]|0;
      $138 = ((($$4325)) + 4|0);
      $$0254 = $134;$$6 = $138;
      break;
     }
    }
    $139 = ($$3272|0)==(0);
    if (!($139)) {
     $$0 = -1;
     break L1;
    }
    if ($13) {
     $arglist_current2 = HEAP32[$2>>2]|0;
     $140 = $arglist_current2;
     $141 = ((0) + 4|0);
     $expanded11 = $141;
     $expanded10 = (($expanded11) - 1)|0;
     $142 = (($140) + ($expanded10))|0;
     $143 = ((0) + 4|0);
     $expanded15 = $143;
     $expanded14 = (($expanded15) - 1)|0;
     $expanded13 = $expanded14 ^ -1;
     $144 = $142 & $expanded13;
     $145 = $144;
     $146 = HEAP32[$145>>2]|0;
     $arglist_next3 = ((($145)) + 4|0);
     HEAP32[$2>>2] = $arglist_next3;
     $$0254 = $146;$$6 = $121;
    } else {
     $$0254 = 0;$$6 = $121;
    }
   } else {
    $$0254 = -1;$$6 = $$4325;
   }
  } while(0);
  $$0252 = 0;$$7 = $$6;
  while(1) {
   $154 = HEAP8[$$7>>0]|0;
   $155 = $154 << 24 >> 24;
   $156 = (($155) + -65)|0;
   $157 = ($156>>>0)>(57);
   if ($157) {
    $$0 = -1;
    break L1;
   }
   $158 = ((($$7)) + 1|0);
   $159 = ((33096 + (($$0252*58)|0)|0) + ($156)|0);
   $160 = HEAP8[$159>>0]|0;
   $161 = $160&255;
   $162 = (($161) + -1)|0;
   $163 = ($162>>>0)<(8);
   if ($163) {
    $$0252 = $161;$$7 = $158;
   } else {
    break;
   }
  }
  $164 = ($160<<24>>24)==(0);
  if ($164) {
   $$0 = -1;
   break;
  }
  $165 = ($160<<24>>24)==(19);
  $166 = ($$0253|0)>(-1);
  do {
   if ($165) {
    if ($166) {
     $$0 = -1;
     break L1;
    } else {
     label = 51;
    }
   } else {
    if ($166) {
     $167 = (($4) + ($$0253<<2)|0);
     HEAP32[$167>>2] = $161;
     $168 = (($3) + ($$0253<<3)|0);
     $169 = $168;
     $170 = $169;
     $171 = HEAP32[$170>>2]|0;
     $172 = (($169) + 4)|0;
     $173 = $172;
     $174 = HEAP32[$173>>2]|0;
     $175 = $9;
     $176 = $175;
     HEAP32[$176>>2] = $171;
     $177 = (($175) + 4)|0;
     $178 = $177;
     HEAP32[$178>>2] = $174;
     label = 51;
     break;
    }
    if (!($13)) {
     $$0 = 0;
     break L1;
    }
    _pop_arg_794($9,$161,$2);
   }
  } while(0);
  if ((label|0) == 51) {
   label = 0;
   if (!($13)) {
    $$0243 = 0;$$0247 = $$1248;$$0269 = $$3272;$$0321 = $158;
    continue;
   }
  }
  $179 = HEAP8[$$7>>0]|0;
  $180 = $179 << 24 >> 24;
  $181 = ($$0252|0)!=(0);
  $182 = $180 & 15;
  $183 = ($182|0)==(3);
  $or$cond280 = $181 & $183;
  $184 = $180 & -33;
  $$0235 = $or$cond280 ? $184 : $180;
  $185 = $$1263 & 8192;
  $186 = ($185|0)==(0);
  $187 = $$1263 & -65537;
  $$1263$ = $186 ? $$1263 : $187;
  L74: do {
   switch ($$0235|0) {
   case 110:  {
    $trunc = $$0252&255;
    switch ($trunc<<24>>24) {
    case 0:  {
     $194 = HEAP32[$9>>2]|0;
     HEAP32[$194>>2] = $$1248;
     $$0243 = 0;$$0247 = $$1248;$$0269 = $$3272;$$0321 = $158;
     continue L1;
     break;
    }
    case 1:  {
     $195 = HEAP32[$9>>2]|0;
     HEAP32[$195>>2] = $$1248;
     $$0243 = 0;$$0247 = $$1248;$$0269 = $$3272;$$0321 = $158;
     continue L1;
     break;
    }
    case 2:  {
     $196 = ($$1248|0)<(0);
     $197 = $196 << 31 >> 31;
     $198 = HEAP32[$9>>2]|0;
     $199 = $198;
     $200 = $199;
     HEAP32[$200>>2] = $$1248;
     $201 = (($199) + 4)|0;
     $202 = $201;
     HEAP32[$202>>2] = $197;
     $$0243 = 0;$$0247 = $$1248;$$0269 = $$3272;$$0321 = $158;
     continue L1;
     break;
    }
    case 3:  {
     $203 = $$1248&65535;
     $204 = HEAP32[$9>>2]|0;
     HEAP16[$204>>1] = $203;
     $$0243 = 0;$$0247 = $$1248;$$0269 = $$3272;$$0321 = $158;
     continue L1;
     break;
    }
    case 4:  {
     $205 = $$1248&255;
     $206 = HEAP32[$9>>2]|0;
     HEAP8[$206>>0] = $205;
     $$0243 = 0;$$0247 = $$1248;$$0269 = $$3272;$$0321 = $158;
     continue L1;
     break;
    }
    case 6:  {
     $207 = HEAP32[$9>>2]|0;
     HEAP32[$207>>2] = $$1248;
     $$0243 = 0;$$0247 = $$1248;$$0269 = $$3272;$$0321 = $158;
     continue L1;
     break;
    }
    case 7:  {
     $208 = ($$1248|0)<(0);
     $209 = $208 << 31 >> 31;
     $210 = HEAP32[$9>>2]|0;
     $211 = $210;
     $212 = $211;
     HEAP32[$212>>2] = $$1248;
     $213 = (($211) + 4)|0;
     $214 = $213;
     HEAP32[$214>>2] = $209;
     $$0243 = 0;$$0247 = $$1248;$$0269 = $$3272;$$0321 = $158;
     continue L1;
     break;
    }
    default: {
     $$0243 = 0;$$0247 = $$1248;$$0269 = $$3272;$$0321 = $158;
     continue L1;
    }
    }
    break;
   }
   case 112:  {
    $215 = ($$0254>>>0)>(8);
    $216 = $215 ? $$0254 : 8;
    $217 = $$1263$ | 8;
    $$1236 = 120;$$1255 = $216;$$3265 = $217;
    label = 63;
    break;
   }
   case 88: case 120:  {
    $$1236 = $$0235;$$1255 = $$0254;$$3265 = $$1263$;
    label = 63;
    break;
   }
   case 111:  {
    $257 = $9;
    $258 = $257;
    $259 = HEAP32[$258>>2]|0;
    $260 = (($257) + 4)|0;
    $261 = $260;
    $262 = HEAP32[$261>>2]|0;
    $263 = ($259|0)==(0);
    $264 = ($262|0)==(0);
    $265 = $263 & $264;
    if ($265) {
     $$0$lcssa$i300 = $14;
    } else {
     $$06$i298 = $14;$267 = $259;$271 = $262;
     while(1) {
      $266 = $267 & 7;
      $268 = $266 | 48;
      $269 = $268&255;
      $270 = ((($$06$i298)) + -1|0);
      HEAP8[$270>>0] = $269;
      $272 = (_bitshift64Lshr(($267|0),($271|0),3)|0);
      $273 = tempRet0;
      $274 = ($272|0)==(0);
      $275 = ($273|0)==(0);
      $276 = $274 & $275;
      if ($276) {
       $$0$lcssa$i300 = $270;
       break;
      } else {
       $$06$i298 = $270;$267 = $272;$271 = $273;
      }
     }
    }
    $277 = $$1263$ & 8;
    $278 = ($277|0)==(0);
    if ($278) {
     $$0228 = $$0$lcssa$i300;$$1233 = 0;$$1238 = 33576;$$2256 = $$0254;$$4266 = $$1263$;
     label = 76;
    } else {
     $279 = $$0$lcssa$i300;
     $280 = (($15) - ($279))|0;
     $281 = ($$0254|0)>($280|0);
     $282 = (($280) + 1)|0;
     $$0254$ = $281 ? $$0254 : $282;
     $$0228 = $$0$lcssa$i300;$$1233 = 0;$$1238 = 33576;$$2256 = $$0254$;$$4266 = $$1263$;
     label = 76;
    }
    break;
   }
   case 105: case 100:  {
    $283 = $9;
    $284 = $283;
    $285 = HEAP32[$284>>2]|0;
    $286 = (($283) + 4)|0;
    $287 = $286;
    $288 = HEAP32[$287>>2]|0;
    $289 = ($288|0)<(0);
    if ($289) {
     $290 = (_i64Subtract(0,0,($285|0),($288|0))|0);
     $291 = tempRet0;
     $292 = $9;
     $293 = $292;
     HEAP32[$293>>2] = $290;
     $294 = (($292) + 4)|0;
     $295 = $294;
     HEAP32[$295>>2] = $291;
     $$0232 = 1;$$0237 = 33576;$300 = $290;$301 = $291;
     label = 75;
     break L74;
    }
    $296 = $$1263$ & 2048;
    $297 = ($296|0)==(0);
    if ($297) {
     $298 = $$1263$ & 1;
     $299 = ($298|0)==(0);
     $$ = $299 ? 33576 : (33578);
     $$0232 = $298;$$0237 = $$;$300 = $285;$301 = $288;
     label = 75;
    } else {
     $$0232 = 1;$$0237 = (33577);$300 = $285;$301 = $288;
     label = 75;
    }
    break;
   }
   case 117:  {
    $188 = $9;
    $189 = $188;
    $190 = HEAP32[$189>>2]|0;
    $191 = (($188) + 4)|0;
    $192 = $191;
    $193 = HEAP32[$192>>2]|0;
    $$0232 = 0;$$0237 = 33576;$300 = $190;$301 = $193;
    label = 75;
    break;
   }
   case 99:  {
    $321 = $9;
    $322 = $321;
    $323 = HEAP32[$322>>2]|0;
    $324 = (($321) + 4)|0;
    $325 = $324;
    $326 = HEAP32[$325>>2]|0;
    $327 = $323&255;
    HEAP8[$16>>0] = $327;
    $$2 = $16;$$2234 = 0;$$2239 = 33576;$$2251 = $14;$$5 = 1;$$6268 = $187;
    break;
   }
   case 109:  {
    $328 = (___errno_location()|0);
    $329 = HEAP32[$328>>2]|0;
    $330 = (_strerror($329)|0);
    $$1 = $330;
    label = 81;
    break;
   }
   case 115:  {
    $331 = HEAP32[$9>>2]|0;
    $332 = ($331|0)!=(0|0);
    $333 = $332 ? $331 : 33586;
    $$1 = $333;
    label = 81;
    break;
   }
   case 67:  {
    $340 = $9;
    $341 = $340;
    $342 = HEAP32[$341>>2]|0;
    $343 = (($340) + 4)|0;
    $344 = $343;
    $345 = HEAP32[$344>>2]|0;
    HEAP32[$11>>2] = $342;
    HEAP32[$17>>2] = 0;
    HEAP32[$9>>2] = $11;
    $$4258458 = -1;$809 = $11;
    label = 85;
    break;
   }
   case 83:  {
    $$pre454 = HEAP32[$9>>2]|0;
    $346 = ($$0254|0)==(0);
    if ($346) {
     _pad($0,32,$$1260,0,$$1263$);
     $$0240$lcssa460 = 0;
     label = 96;
    } else {
     $$4258458 = $$0254;$809 = $$pre454;
     label = 85;
    }
    break;
   }
   case 65: case 71: case 70: case 69: case 97: case 103: case 102: case 101:  {
    $371 = +HEAPF64[$9>>3];
    HEAP32[$6>>2] = 0;
    HEAPF64[tempDoublePtr>>3] = $371;$372 = HEAP32[tempDoublePtr>>2]|0;
    $373 = HEAP32[tempDoublePtr+4>>2]|0;
    $374 = ($373|0)<(0);
    if ($374) {
     $375 = -$371;
     $$0471$i = $375;$$0520$i = 1;$$0521$i = 33593;
    } else {
     $376 = $$1263$ & 2048;
     $377 = ($376|0)==(0);
     $378 = $$1263$ & 1;
     if ($377) {
      $379 = ($378|0)==(0);
      $$$i = $379 ? (33594) : (33599);
      $$0471$i = $371;$$0520$i = $378;$$0521$i = $$$i;
     } else {
      $$0471$i = $371;$$0520$i = 1;$$0521$i = (33596);
     }
    }
    HEAPF64[tempDoublePtr>>3] = $$0471$i;$380 = HEAP32[tempDoublePtr>>2]|0;
    $381 = HEAP32[tempDoublePtr+4>>2]|0;
    $382 = $381 & 2146435072;
    $383 = ($382>>>0)<(2146435072);
    $384 = (0)<(0);
    $385 = ($382|0)==(2146435072);
    $386 = $385 & $384;
    $387 = $383 | $386;
    do {
     if ($387) {
      $403 = (+_frexpl($$0471$i,$6));
      $404 = $403 * 2.0;
      $405 = $404 != 0.0;
      if ($405) {
       $406 = HEAP32[$6>>2]|0;
       $407 = (($406) + -1)|0;
       HEAP32[$6>>2] = $407;
      }
      $408 = $$0235 | 32;
      $409 = ($408|0)==(97);
      if ($409) {
       $410 = $$0235 & 32;
       $411 = ($410|0)==(0);
       $412 = ((($$0521$i)) + 9|0);
       $$0521$$i = $411 ? $$0521$i : $412;
       $413 = $$0520$i | 2;
       $414 = ($$0254>>>0)>(11);
       $415 = (12 - ($$0254))|0;
       $416 = ($415|0)==(0);
       $417 = $414 | $416;
       do {
        if ($417) {
         $$1472$i = $404;
        } else {
         $$0509591$i = 8.0;$$1508592$i = $415;
         while(1) {
          $418 = (($$1508592$i) + -1)|0;
          $419 = $$0509591$i * 16.0;
          $420 = ($418|0)==(0);
          if ($420) {
           break;
          } else {
           $$0509591$i = $419;$$1508592$i = $418;
          }
         }
         $421 = HEAP8[$$0521$$i>>0]|0;
         $422 = ($421<<24>>24)==(45);
         if ($422) {
          $423 = -$404;
          $424 = $423 - $419;
          $425 = $419 + $424;
          $426 = -$425;
          $$1472$i = $426;
          break;
         } else {
          $427 = $404 + $419;
          $428 = $427 - $419;
          $$1472$i = $428;
          break;
         }
        }
       } while(0);
       $429 = HEAP32[$6>>2]|0;
       $430 = ($429|0)<(0);
       $431 = (0 - ($429))|0;
       $432 = $430 ? $431 : $429;
       $433 = ($432|0)<(0);
       $434 = $433 << 31 >> 31;
       $435 = (_fmt_u($432,$434,$20)|0);
       $436 = ($435|0)==($20|0);
       if ($436) {
        HEAP8[$21>>0] = 48;
        $$0511$i = $21;
       } else {
        $$0511$i = $435;
       }
       $437 = $429 >> 31;
       $438 = $437 & 2;
       $439 = (($438) + 43)|0;
       $440 = $439&255;
       $441 = ((($$0511$i)) + -1|0);
       HEAP8[$441>>0] = $440;
       $442 = (($$0235) + 15)|0;
       $443 = $442&255;
       $444 = ((($$0511$i)) + -2|0);
       HEAP8[$444>>0] = $443;
       $notrhs$i = ($$0254|0)<(1);
       $445 = $$1263$ & 8;
       $446 = ($445|0)==(0);
       $$0523$i = $7;$$2473$i = $$1472$i;
       while(1) {
        $447 = (~~(($$2473$i)));
        $448 = (33560 + ($447)|0);
        $449 = HEAP8[$448>>0]|0;
        $450 = $449&255;
        $451 = $450 | $410;
        $452 = $451&255;
        $453 = ((($$0523$i)) + 1|0);
        HEAP8[$$0523$i>>0] = $452;
        $454 = (+($447|0));
        $455 = $$2473$i - $454;
        $456 = $455 * 16.0;
        $457 = $453;
        $458 = (($457) - ($18))|0;
        $459 = ($458|0)==(1);
        do {
         if ($459) {
          $notlhs$i = $456 == 0.0;
          $or$cond3$not$i = $notrhs$i & $notlhs$i;
          $or$cond$i = $446 & $or$cond3$not$i;
          if ($or$cond$i) {
           $$1524$i = $453;
           break;
          }
          $460 = ((($$0523$i)) + 2|0);
          HEAP8[$453>>0] = 46;
          $$1524$i = $460;
         } else {
          $$1524$i = $453;
         }
        } while(0);
        $461 = $456 != 0.0;
        if ($461) {
         $$0523$i = $$1524$i;$$2473$i = $456;
        } else {
         break;
        }
       }
       $462 = ($$0254|0)!=(0);
       $$pre699$i = $$1524$i;
       $463 = (($24) + ($$pre699$i))|0;
       $464 = ($463|0)<($$0254|0);
       $or$cond412 = $462 & $464;
       $465 = $444;
       $466 = (($25) + ($$0254))|0;
       $467 = (($466) - ($465))|0;
       $468 = (($23) - ($465))|0;
       $469 = (($468) + ($$pre699$i))|0;
       $$0525$i = $or$cond412 ? $467 : $469;
       $470 = (($$0525$i) + ($413))|0;
       _pad($0,32,$$1260,$470,$$1263$);
       $471 = HEAP32[$0>>2]|0;
       $472 = $471 & 32;
       $473 = ($472|0)==(0);
       if ($473) {
        (___fwritex($$0521$$i,$413,$0)|0);
       }
       $474 = $$1263$ ^ 65536;
       _pad($0,48,$$1260,$470,$474);
       $475 = (($$pre699$i) - ($18))|0;
       $476 = HEAP32[$0>>2]|0;
       $477 = $476 & 32;
       $478 = ($477|0)==(0);
       if ($478) {
        (___fwritex($7,$475,$0)|0);
       }
       $479 = (($22) - ($465))|0;
       $sum = (($475) + ($479))|0;
       $480 = (($$0525$i) - ($sum))|0;
       _pad($0,48,$480,0,0);
       $481 = HEAP32[$0>>2]|0;
       $482 = $481 & 32;
       $483 = ($482|0)==(0);
       if ($483) {
        (___fwritex($444,$479,$0)|0);
       }
       $484 = $$1263$ ^ 8192;
       _pad($0,32,$$1260,$470,$484);
       $485 = ($470|0)<($$1260|0);
       $$536$i = $485 ? $$1260 : $470;
       $$0470$i = $$536$i;
       break;
      }
      $486 = ($$0254|0)<(0);
      $$537$i = $486 ? 6 : $$0254;
      if ($405) {
       $487 = $404 * 268435456.0;
       $488 = HEAP32[$6>>2]|0;
       $489 = (($488) + -28)|0;
       HEAP32[$6>>2] = $489;
       $$3$i = $487;$$pr$i = $489;
      } else {
       $$pre696$i = HEAP32[$6>>2]|0;
       $$3$i = $404;$$pr$i = $$pre696$i;
      }
      $490 = ($$pr$i|0)<(0);
      $$553$i = $490 ? $5 : $26;
      $$0498$i = $$553$i;$$4$i = $$3$i;
      while(1) {
       $491 = (~~(($$4$i))>>>0);
       HEAP32[$$0498$i>>2] = $491;
       $492 = ((($$0498$i)) + 4|0);
       $493 = (+($491>>>0));
       $494 = $$4$i - $493;
       $495 = $494 * 1.0E+9;
       $496 = $495 != 0.0;
       if ($496) {
        $$0498$i = $492;$$4$i = $495;
       } else {
        break;
       }
      }
      $497 = ($$pr$i|0)>(0);
      if ($497) {
       $$1482670$i = $$553$i;$$1499669$i = $492;$498 = $$pr$i;
       while(1) {
        $499 = ($498|0)>(29);
        $500 = $499 ? 29 : $498;
        $$0488662$i = ((($$1499669$i)) + -4|0);
        $501 = ($$0488662$i>>>0)<($$1482670$i>>>0);
        do {
         if ($501) {
          $$2483$ph$i = $$1482670$i;
         } else {
          $$0488664$i = $$0488662$i;$$0497663$i = 0;
          while(1) {
           $502 = HEAP32[$$0488664$i>>2]|0;
           $503 = (_bitshift64Shl(($502|0),0,($500|0))|0);
           $504 = tempRet0;
           $505 = (_i64Add(($503|0),($504|0),($$0497663$i|0),0)|0);
           $506 = tempRet0;
           $507 = (___uremdi3(($505|0),($506|0),1000000000,0)|0);
           $508 = tempRet0;
           HEAP32[$$0488664$i>>2] = $507;
           $509 = (___udivdi3(($505|0),($506|0),1000000000,0)|0);
           $510 = tempRet0;
           $$0488$i = ((($$0488664$i)) + -4|0);
           $511 = ($$0488$i>>>0)<($$1482670$i>>>0);
           if ($511) {
            break;
           } else {
            $$0488664$i = $$0488$i;$$0497663$i = $509;
           }
          }
          $512 = ($509|0)==(0);
          if ($512) {
           $$2483$ph$i = $$1482670$i;
           break;
          }
          $513 = ((($$1482670$i)) + -4|0);
          HEAP32[$513>>2] = $509;
          $$2483$ph$i = $513;
         }
        } while(0);
        $$2500$i = $$1499669$i;
        while(1) {
         $514 = ($$2500$i>>>0)>($$2483$ph$i>>>0);
         if (!($514)) {
          break;
         }
         $515 = ((($$2500$i)) + -4|0);
         $516 = HEAP32[$515>>2]|0;
         $517 = ($516|0)==(0);
         if ($517) {
          $$2500$i = $515;
         } else {
          break;
         }
        }
        $518 = HEAP32[$6>>2]|0;
        $519 = (($518) - ($500))|0;
        HEAP32[$6>>2] = $519;
        $520 = ($519|0)>(0);
        if ($520) {
         $$1482670$i = $$2483$ph$i;$$1499669$i = $$2500$i;$498 = $519;
        } else {
         $$1482$lcssa$i = $$2483$ph$i;$$1499$lcssa$i = $$2500$i;$$pr570$i = $519;
         break;
        }
       }
      } else {
       $$1482$lcssa$i = $$553$i;$$1499$lcssa$i = $492;$$pr570$i = $$pr$i;
      }
      $521 = ($$pr570$i|0)<(0);
      if ($521) {
       $522 = (($$537$i) + 25)|0;
       $523 = (($522|0) / 9)&-1;
       $524 = (($523) + 1)|0;
       $525 = ($408|0)==(102);
       $$3484657$i = $$1482$lcssa$i;$$3501656$i = $$1499$lcssa$i;$527 = $$pr570$i;
       while(1) {
        $526 = (0 - ($527))|0;
        $528 = ($526|0)>(9);
        $529 = $528 ? 9 : $526;
        $530 = ($$3484657$i>>>0)<($$3501656$i>>>0);
        do {
         if ($530) {
          $534 = 1 << $529;
          $535 = (($534) + -1)|0;
          $536 = 1000000000 >>> $529;
          $$0487651$i = 0;$$1489650$i = $$3484657$i;
          while(1) {
           $537 = HEAP32[$$1489650$i>>2]|0;
           $538 = $537 & $535;
           $539 = $537 >>> $529;
           $540 = (($539) + ($$0487651$i))|0;
           HEAP32[$$1489650$i>>2] = $540;
           $541 = Math_imul($538, $536)|0;
           $542 = ((($$1489650$i)) + 4|0);
           $543 = ($542>>>0)<($$3501656$i>>>0);
           if ($543) {
            $$0487651$i = $541;$$1489650$i = $542;
           } else {
            break;
           }
          }
          $544 = HEAP32[$$3484657$i>>2]|0;
          $545 = ($544|0)==(0);
          $546 = ((($$3484657$i)) + 4|0);
          $$$3484$i = $545 ? $546 : $$3484657$i;
          $547 = ($541|0)==(0);
          if ($547) {
           $$$3484705$i = $$$3484$i;$$4502$i = $$3501656$i;
           break;
          }
          $548 = ((($$3501656$i)) + 4|0);
          HEAP32[$$3501656$i>>2] = $541;
          $$$3484705$i = $$$3484$i;$$4502$i = $548;
         } else {
          $531 = HEAP32[$$3484657$i>>2]|0;
          $532 = ($531|0)==(0);
          $533 = ((($$3484657$i)) + 4|0);
          $$$3484704$i = $532 ? $533 : $$3484657$i;
          $$$3484705$i = $$$3484704$i;$$4502$i = $$3501656$i;
         }
        } while(0);
        $549 = $525 ? $$553$i : $$$3484705$i;
        $550 = $$4502$i;
        $551 = $549;
        $552 = (($550) - ($551))|0;
        $553 = $552 >> 2;
        $554 = ($553|0)>($524|0);
        $555 = (($549) + ($524<<2)|0);
        $$$4502$i = $554 ? $555 : $$4502$i;
        $556 = HEAP32[$6>>2]|0;
        $557 = (($556) + ($529))|0;
        HEAP32[$6>>2] = $557;
        $558 = ($557|0)<(0);
        if ($558) {
         $$3484657$i = $$$3484705$i;$$3501656$i = $$$4502$i;$527 = $557;
        } else {
         $$3484$lcssa$i = $$$3484705$i;$$3501$lcssa$i = $$$4502$i;
         break;
        }
       }
      } else {
       $$3484$lcssa$i = $$1482$lcssa$i;$$3501$lcssa$i = $$1499$lcssa$i;
      }
      $559 = ($$3484$lcssa$i>>>0)<($$3501$lcssa$i>>>0);
      $560 = $$553$i;
      do {
       if ($559) {
        $561 = $$3484$lcssa$i;
        $562 = (($560) - ($561))|0;
        $563 = $562 >> 2;
        $564 = ($563*9)|0;
        $565 = HEAP32[$$3484$lcssa$i>>2]|0;
        $566 = ($565>>>0)<(10);
        if ($566) {
         $$1515$i = $564;
         break;
        } else {
         $$0514646$i = $564;$$0530645$i = 10;
        }
        while(1) {
         $567 = ($$0530645$i*10)|0;
         $568 = (($$0514646$i) + 1)|0;
         $569 = ($565>>>0)<($567>>>0);
         if ($569) {
          $$1515$i = $568;
          break;
         } else {
          $$0514646$i = $568;$$0530645$i = $567;
         }
        }
       } else {
        $$1515$i = 0;
       }
      } while(0);
      $570 = ($408|0)!=(102);
      $571 = $570 ? $$1515$i : 0;
      $572 = (($$537$i) - ($571))|0;
      $573 = ($408|0)==(103);
      $574 = ($$537$i|0)!=(0);
      $575 = $574 & $573;
      $$neg$i = $575 << 31 >> 31;
      $576 = (($572) + ($$neg$i))|0;
      $577 = $$3501$lcssa$i;
      $578 = (($577) - ($560))|0;
      $579 = $578 >> 2;
      $580 = ($579*9)|0;
      $581 = (($580) + -9)|0;
      $582 = ($576|0)<($581|0);
      if ($582) {
       $583 = ((($$553$i)) + 4|0);
       $584 = (($576) + 9216)|0;
       $585 = (($584|0) / 9)&-1;
       $586 = (($585) + -1024)|0;
       $587 = (($583) + ($586<<2)|0);
       $588 = (($584|0) % 9)&-1;
       $$0527638$i = (($588) + 1)|0;
       $589 = ($$0527638$i|0)<(9);
       if ($589) {
        $$0527640$i = $$0527638$i;$$1531639$i = 10;
        while(1) {
         $590 = ($$1531639$i*10)|0;
         $$0527$i = (($$0527640$i) + 1)|0;
         $exitcond$i = ($$0527$i|0)==(9);
         if ($exitcond$i) {
          $$1531$lcssa$i = $590;
          break;
         } else {
          $$0527640$i = $$0527$i;$$1531639$i = $590;
         }
        }
       } else {
        $$1531$lcssa$i = 10;
       }
       $591 = HEAP32[$587>>2]|0;
       $592 = (($591>>>0) % ($$1531$lcssa$i>>>0))&-1;
       $593 = ($592|0)==(0);
       $594 = ((($587)) + 4|0);
       $595 = ($594|0)==($$3501$lcssa$i|0);
       $or$cond539$i = $595 & $593;
       do {
        if ($or$cond539$i) {
         $$4492$i = $587;$$4518$i = $$1515$i;$$8$i = $$3484$lcssa$i;
        } else {
         $596 = (($591>>>0) / ($$1531$lcssa$i>>>0))&-1;
         $597 = $596 & 1;
         $598 = ($597|0)==(0);
         $$540$i = $598 ? 9007199254740992.0 : 9007199254740994.0;
         $599 = (($$1531$lcssa$i|0) / 2)&-1;
         $600 = ($592>>>0)<($599>>>0);
         if ($600) {
          $$0466$i = 0.5;
         } else {
          $601 = ($592|0)==($599|0);
          $or$cond542$i = $595 & $601;
          $$556$i = $or$cond542$i ? 1.0 : 1.5;
          $$0466$i = $$556$i;
         }
         $602 = ($$0520$i|0)==(0);
         do {
          if ($602) {
           $$1467$i = $$0466$i;$$1469$i = $$540$i;
          } else {
           $603 = HEAP8[$$0521$i>>0]|0;
           $604 = ($603<<24>>24)==(45);
           if (!($604)) {
            $$1467$i = $$0466$i;$$1469$i = $$540$i;
            break;
           }
           $605 = -$$540$i;
           $606 = -$$0466$i;
           $$1467$i = $606;$$1469$i = $605;
          }
         } while(0);
         $607 = (($591) - ($592))|0;
         HEAP32[$587>>2] = $607;
         $608 = $$1469$i + $$1467$i;
         $609 = $608 != $$1469$i;
         if (!($609)) {
          $$4492$i = $587;$$4518$i = $$1515$i;$$8$i = $$3484$lcssa$i;
          break;
         }
         $610 = (($607) + ($$1531$lcssa$i))|0;
         HEAP32[$587>>2] = $610;
         $611 = ($610>>>0)>(999999999);
         if ($611) {
          $$2490631$i = $587;$$5486632$i = $$3484$lcssa$i;
          while(1) {
           $612 = ((($$2490631$i)) + -4|0);
           HEAP32[$$2490631$i>>2] = 0;
           $613 = ($612>>>0)<($$5486632$i>>>0);
           if ($613) {
            $614 = ((($$5486632$i)) + -4|0);
            HEAP32[$614>>2] = 0;
            $$6$i = $614;
           } else {
            $$6$i = $$5486632$i;
           }
           $615 = HEAP32[$612>>2]|0;
           $616 = (($615) + 1)|0;
           HEAP32[$612>>2] = $616;
           $617 = ($616>>>0)>(999999999);
           if ($617) {
            $$2490631$i = $612;$$5486632$i = $$6$i;
           } else {
            $$2490$lcssa$i = $612;$$5486$lcssa$i = $$6$i;
            break;
           }
          }
         } else {
          $$2490$lcssa$i = $587;$$5486$lcssa$i = $$3484$lcssa$i;
         }
         $618 = $$5486$lcssa$i;
         $619 = (($560) - ($618))|0;
         $620 = $619 >> 2;
         $621 = ($620*9)|0;
         $622 = HEAP32[$$5486$lcssa$i>>2]|0;
         $623 = ($622>>>0)<(10);
         if ($623) {
          $$4492$i = $$2490$lcssa$i;$$4518$i = $621;$$8$i = $$5486$lcssa$i;
          break;
         } else {
          $$2516627$i = $621;$$2532626$i = 10;
         }
         while(1) {
          $624 = ($$2532626$i*10)|0;
          $625 = (($$2516627$i) + 1)|0;
          $626 = ($622>>>0)<($624>>>0);
          if ($626) {
           $$4492$i = $$2490$lcssa$i;$$4518$i = $625;$$8$i = $$5486$lcssa$i;
           break;
          } else {
           $$2516627$i = $625;$$2532626$i = $624;
          }
         }
        }
       } while(0);
       $627 = ((($$4492$i)) + 4|0);
       $628 = ($$3501$lcssa$i>>>0)>($627>>>0);
       $$$3501$i = $628 ? $627 : $$3501$lcssa$i;
       $$5519$ph$i = $$4518$i;$$7505$ph$i = $$$3501$i;$$9$ph$i = $$8$i;
      } else {
       $$5519$ph$i = $$1515$i;$$7505$ph$i = $$3501$lcssa$i;$$9$ph$i = $$3484$lcssa$i;
      }
      $629 = (0 - ($$5519$ph$i))|0;
      $$7505$i = $$7505$ph$i;
      while(1) {
       $630 = ($$7505$i>>>0)>($$9$ph$i>>>0);
       if (!($630)) {
        $$lcssa682$i = 0;
        break;
       }
       $631 = ((($$7505$i)) + -4|0);
       $632 = HEAP32[$631>>2]|0;
       $633 = ($632|0)==(0);
       if ($633) {
        $$7505$i = $631;
       } else {
        $$lcssa682$i = 1;
        break;
       }
      }
      do {
       if ($573) {
        $634 = $574&1;
        $635 = $634 ^ 1;
        $$537$$i = (($635) + ($$537$i))|0;
        $636 = ($$537$$i|0)>($$5519$ph$i|0);
        $637 = ($$5519$ph$i|0)>(-5);
        $or$cond6$i = $636 & $637;
        if ($or$cond6$i) {
         $638 = (($$0235) + -1)|0;
         $$neg571$i = (($$537$$i) + -1)|0;
         $639 = (($$neg571$i) - ($$5519$ph$i))|0;
         $$0479$i = $638;$$2476$i = $639;
        } else {
         $640 = (($$0235) + -2)|0;
         $641 = (($$537$$i) + -1)|0;
         $$0479$i = $640;$$2476$i = $641;
        }
        $642 = $$1263$ & 8;
        $643 = ($642|0)==(0);
        if (!($643)) {
         $$1480$i = $$0479$i;$$3477$i = $$2476$i;$$pre$phi703$iZ2D = $642;
         break;
        }
        do {
         if ($$lcssa682$i) {
          $644 = ((($$7505$i)) + -4|0);
          $645 = HEAP32[$644>>2]|0;
          $646 = ($645|0)==(0);
          if ($646) {
           $$2529$i = 9;
           break;
          }
          $647 = (($645>>>0) % 10)&-1;
          $648 = ($647|0)==(0);
          if ($648) {
           $$1528623$i = 0;$$3533622$i = 10;
          } else {
           $$2529$i = 0;
           break;
          }
          while(1) {
           $649 = ($$3533622$i*10)|0;
           $650 = (($$1528623$i) + 1)|0;
           $651 = (($645>>>0) % ($649>>>0))&-1;
           $652 = ($651|0)==(0);
           if ($652) {
            $$1528623$i = $650;$$3533622$i = $649;
           } else {
            $$2529$i = $650;
            break;
           }
          }
         } else {
          $$2529$i = 9;
         }
        } while(0);
        $653 = $$0479$i | 32;
        $654 = ($653|0)==(102);
        $655 = $$7505$i;
        $656 = (($655) - ($560))|0;
        $657 = $656 >> 2;
        $658 = ($657*9)|0;
        $659 = (($658) + -9)|0;
        if ($654) {
         $660 = (($659) - ($$2529$i))|0;
         $661 = ($660|0)<(0);
         $$543$i = $661 ? 0 : $660;
         $662 = ($$2476$i|0)<($$543$i|0);
         $$2476$$544$i = $662 ? $$2476$i : $$543$i;
         $$1480$i = $$0479$i;$$3477$i = $$2476$$544$i;$$pre$phi703$iZ2D = 0;
         break;
        } else {
         $663 = (($659) + ($$5519$ph$i))|0;
         $664 = (($663) - ($$2529$i))|0;
         $665 = ($664|0)<(0);
         $$545$i = $665 ? 0 : $664;
         $666 = ($$2476$i|0)<($$545$i|0);
         $$2476$$546$i = $666 ? $$2476$i : $$545$i;
         $$1480$i = $$0479$i;$$3477$i = $$2476$$546$i;$$pre$phi703$iZ2D = 0;
         break;
        }
       } else {
        $$pre702$i = $$1263$ & 8;
        $$1480$i = $$0235;$$3477$i = $$537$i;$$pre$phi703$iZ2D = $$pre702$i;
       }
      } while(0);
      $667 = $$3477$i | $$pre$phi703$iZ2D;
      $668 = ($667|0)!=(0);
      $669 = $668&1;
      $670 = $$1480$i | 32;
      $671 = ($670|0)==(102);
      if ($671) {
       $672 = ($$5519$ph$i|0)>(0);
       $673 = $672 ? $$5519$ph$i : 0;
       $$2513$i = 0;$$pn$i = $673;
      } else {
       $674 = ($$5519$ph$i|0)<(0);
       $675 = $674 ? $629 : $$5519$ph$i;
       $676 = ($675|0)<(0);
       $677 = $676 << 31 >> 31;
       $678 = (_fmt_u($675,$677,$20)|0);
       $679 = $678;
       $680 = (($22) - ($679))|0;
       $681 = ($680|0)<(2);
       if ($681) {
        $$1512616$i = $678;
        while(1) {
         $682 = ((($$1512616$i)) + -1|0);
         HEAP8[$682>>0] = 48;
         $683 = $682;
         $684 = (($22) - ($683))|0;
         $685 = ($684|0)<(2);
         if ($685) {
          $$1512616$i = $682;
         } else {
          $$1512$lcssa$i = $682;
          break;
         }
        }
       } else {
        $$1512$lcssa$i = $678;
       }
       $686 = $$5519$ph$i >> 31;
       $687 = $686 & 2;
       $688 = (($687) + 43)|0;
       $689 = $688&255;
       $690 = ((($$1512$lcssa$i)) + -1|0);
       HEAP8[$690>>0] = $689;
       $691 = $$1480$i&255;
       $692 = ((($$1512$lcssa$i)) + -2|0);
       HEAP8[$692>>0] = $691;
       $693 = $692;
       $694 = (($22) - ($693))|0;
       $$2513$i = $692;$$pn$i = $694;
      }
      $695 = (($$0520$i) + 1)|0;
      $696 = (($695) + ($$3477$i))|0;
      $$1526$i = (($696) + ($669))|0;
      $697 = (($$1526$i) + ($$pn$i))|0;
      _pad($0,32,$$1260,$697,$$1263$);
      $698 = HEAP32[$0>>2]|0;
      $699 = $698 & 32;
      $700 = ($699|0)==(0);
      if ($700) {
       (___fwritex($$0521$i,$$0520$i,$0)|0);
      }
      $701 = $$1263$ ^ 65536;
      _pad($0,48,$$1260,$697,$701);
      do {
       if ($671) {
        $702 = ($$9$ph$i>>>0)>($$553$i>>>0);
        $$0496$$9$i = $702 ? $$553$i : $$9$ph$i;
        $$5493605$i = $$0496$$9$i;
        while(1) {
         $703 = HEAP32[$$5493605$i>>2]|0;
         $704 = (_fmt_u($703,0,$27)|0);
         $705 = ($$5493605$i|0)==($$0496$$9$i|0);
         do {
          if ($705) {
           $711 = ($704|0)==($27|0);
           if (!($711)) {
            $$1465$i = $704;
            break;
           }
           HEAP8[$29>>0] = 48;
           $$1465$i = $29;
          } else {
           $706 = ($704>>>0)>($7>>>0);
           if (!($706)) {
            $$1465$i = $704;
            break;
           }
           $707 = $704;
           $708 = (($707) - ($18))|0;
           _memset(($7|0),48,($708|0))|0;
           $$0464602$i = $704;
           while(1) {
            $709 = ((($$0464602$i)) + -1|0);
            $710 = ($709>>>0)>($7>>>0);
            if ($710) {
             $$0464602$i = $709;
            } else {
             $$1465$i = $709;
             break;
            }
           }
          }
         } while(0);
         $712 = HEAP32[$0>>2]|0;
         $713 = $712 & 32;
         $714 = ($713|0)==(0);
         if ($714) {
          $715 = $$1465$i;
          $716 = (($28) - ($715))|0;
          (___fwritex($$1465$i,$716,$0)|0);
         }
         $717 = ((($$5493605$i)) + 4|0);
         $718 = ($717>>>0)>($$553$i>>>0);
         if ($718) {
          break;
         } else {
          $$5493605$i = $717;
         }
        }
        $719 = ($667|0)==(0);
        do {
         if (!($719)) {
          $720 = HEAP32[$0>>2]|0;
          $721 = $720 & 32;
          $722 = ($721|0)==(0);
          if (!($722)) {
           break;
          }
          (___fwritex(33624,1,$0)|0);
         }
        } while(0);
        $723 = ($717>>>0)<($$7505$i>>>0);
        $724 = ($$3477$i|0)>(0);
        $725 = $724 & $723;
        if ($725) {
         $$4478599$i = $$3477$i;$$6494598$i = $717;
         while(1) {
          $726 = HEAP32[$$6494598$i>>2]|0;
          $727 = (_fmt_u($726,0,$27)|0);
          $728 = ($727>>>0)>($7>>>0);
          if ($728) {
           $729 = $727;
           $730 = (($729) - ($18))|0;
           _memset(($7|0),48,($730|0))|0;
           $$0463593$i = $727;
           while(1) {
            $731 = ((($$0463593$i)) + -1|0);
            $732 = ($731>>>0)>($7>>>0);
            if ($732) {
             $$0463593$i = $731;
            } else {
             $$0463$lcssa$i = $731;
             break;
            }
           }
          } else {
           $$0463$lcssa$i = $727;
          }
          $733 = HEAP32[$0>>2]|0;
          $734 = $733 & 32;
          $735 = ($734|0)==(0);
          if ($735) {
           $736 = ($$4478599$i|0)>(9);
           $737 = $736 ? 9 : $$4478599$i;
           (___fwritex($$0463$lcssa$i,$737,$0)|0);
          }
          $738 = ((($$6494598$i)) + 4|0);
          $739 = (($$4478599$i) + -9)|0;
          $740 = ($738>>>0)<($$7505$i>>>0);
          $741 = ($$4478599$i|0)>(9);
          $742 = $741 & $740;
          if ($742) {
           $$4478599$i = $739;$$6494598$i = $738;
          } else {
           $$4478$lcssa$i = $739;
           break;
          }
         }
        } else {
         $$4478$lcssa$i = $$3477$i;
        }
        $743 = (($$4478$lcssa$i) + 9)|0;
        _pad($0,48,$743,9,0);
       } else {
        $744 = ((($$9$ph$i)) + 4|0);
        $$7505$$i = $$lcssa682$i ? $$7505$i : $744;
        $745 = ($$3477$i|0)>(-1);
        if ($745) {
         $746 = ($$pre$phi703$iZ2D|0)==(0);
         $$5610$i = $$3477$i;$$7495609$i = $$9$ph$i;
         while(1) {
          $747 = HEAP32[$$7495609$i>>2]|0;
          $748 = (_fmt_u($747,0,$27)|0);
          $749 = ($748|0)==($27|0);
          if ($749) {
           HEAP8[$29>>0] = 48;
           $$0$i = $29;
          } else {
           $$0$i = $748;
          }
          $750 = ($$7495609$i|0)==($$9$ph$i|0);
          do {
           if ($750) {
            $754 = ((($$0$i)) + 1|0);
            $755 = HEAP32[$0>>2]|0;
            $756 = $755 & 32;
            $757 = ($756|0)==(0);
            if ($757) {
             (___fwritex($$0$i,1,$0)|0);
            }
            $758 = ($$5610$i|0)<(1);
            $or$cond551$i = $746 & $758;
            if ($or$cond551$i) {
             $$2$i = $754;
             break;
            }
            $759 = HEAP32[$0>>2]|0;
            $760 = $759 & 32;
            $761 = ($760|0)==(0);
            if (!($761)) {
             $$2$i = $754;
             break;
            }
            (___fwritex(33624,1,$0)|0);
            $$2$i = $754;
           } else {
            $751 = ($$0$i>>>0)>($7>>>0);
            if (!($751)) {
             $$2$i = $$0$i;
             break;
            }
            $scevgep693$i = (($$0$i) + ($19)|0);
            $scevgep693694$i = $scevgep693$i;
            _memset(($7|0),48,($scevgep693694$i|0))|0;
            $$1606$i = $$0$i;
            while(1) {
             $752 = ((($$1606$i)) + -1|0);
             $753 = ($752>>>0)>($7>>>0);
             if ($753) {
              $$1606$i = $752;
             } else {
              $$2$i = $752;
              break;
             }
            }
           }
          } while(0);
          $762 = $$2$i;
          $763 = (($28) - ($762))|0;
          $764 = HEAP32[$0>>2]|0;
          $765 = $764 & 32;
          $766 = ($765|0)==(0);
          if ($766) {
           $767 = ($$5610$i|0)>($763|0);
           $768 = $767 ? $763 : $$5610$i;
           (___fwritex($$2$i,$768,$0)|0);
          }
          $769 = (($$5610$i) - ($763))|0;
          $770 = ((($$7495609$i)) + 4|0);
          $771 = ($770>>>0)<($$7505$$i>>>0);
          $772 = ($769|0)>(-1);
          $773 = $771 & $772;
          if ($773) {
           $$5610$i = $769;$$7495609$i = $770;
          } else {
           $$5$lcssa$i = $769;
           break;
          }
         }
        } else {
         $$5$lcssa$i = $$3477$i;
        }
        $774 = (($$5$lcssa$i) + 18)|0;
        _pad($0,48,$774,18,0);
        $775 = HEAP32[$0>>2]|0;
        $776 = $775 & 32;
        $777 = ($776|0)==(0);
        if (!($777)) {
         break;
        }
        $778 = $$2513$i;
        $779 = (($22) - ($778))|0;
        (___fwritex($$2513$i,$779,$0)|0);
       }
      } while(0);
      $780 = $$1263$ ^ 8192;
      _pad($0,32,$$1260,$697,$780);
      $781 = ($697|0)<($$1260|0);
      $$552$i = $781 ? $$1260 : $697;
      $$0470$i = $$552$i;
     } else {
      $388 = $$0235 & 32;
      $389 = ($388|0)!=(0);
      $390 = $389 ? 33612 : 33616;
      $391 = ($$0471$i != $$0471$i) | (0.0 != 0.0);
      $392 = $389 ? 36807 : 33620;
      $$0510$i = $391 ? $392 : $390;
      $393 = (($$0520$i) + 3)|0;
      _pad($0,32,$$1260,$393,$187);
      $394 = HEAP32[$0>>2]|0;
      $395 = $394 & 32;
      $396 = ($395|0)==(0);
      if ($396) {
       (___fwritex($$0521$i,$$0520$i,$0)|0);
       $$pre$i = HEAP32[$0>>2]|0;
       $398 = $$pre$i;
      } else {
       $398 = $394;
      }
      $397 = $398 & 32;
      $399 = ($397|0)==(0);
      if ($399) {
       (___fwritex($$0510$i,3,$0)|0);
      }
      $400 = $$1263$ ^ 8192;
      _pad($0,32,$$1260,$393,$400);
      $401 = ($393|0)<($$1260|0);
      $402 = $401 ? $$1260 : $393;
      $$0470$i = $402;
     }
    } while(0);
    $$0243 = $$0470$i;$$0247 = $$1248;$$0269 = $$3272;$$0321 = $158;
    continue L1;
    break;
   }
   default: {
    $$2 = $$0321;$$2234 = 0;$$2239 = 33576;$$2251 = $14;$$5 = $$0254;$$6268 = $$1263$;
   }
   }
  } while(0);
  L310: do {
   if ((label|0) == 63) {
    label = 0;
    $218 = $9;
    $219 = $218;
    $220 = HEAP32[$219>>2]|0;
    $221 = (($218) + 4)|0;
    $222 = $221;
    $223 = HEAP32[$222>>2]|0;
    $224 = $$1236 & 32;
    $225 = ($220|0)==(0);
    $226 = ($223|0)==(0);
    $227 = $225 & $226;
    if ($227) {
     $$05$lcssa$i = $14;$248 = 0;$250 = 0;
    } else {
     $$056$i = $14;$229 = $220;$236 = $223;
     while(1) {
      $228 = $229 & 15;
      $230 = (33560 + ($228)|0);
      $231 = HEAP8[$230>>0]|0;
      $232 = $231&255;
      $233 = $232 | $224;
      $234 = $233&255;
      $235 = ((($$056$i)) + -1|0);
      HEAP8[$235>>0] = $234;
      $237 = (_bitshift64Lshr(($229|0),($236|0),4)|0);
      $238 = tempRet0;
      $239 = ($237|0)==(0);
      $240 = ($238|0)==(0);
      $241 = $239 & $240;
      if ($241) {
       break;
      } else {
       $$056$i = $235;$229 = $237;$236 = $238;
      }
     }
     $242 = $9;
     $243 = $242;
     $244 = HEAP32[$243>>2]|0;
     $245 = (($242) + 4)|0;
     $246 = $245;
     $247 = HEAP32[$246>>2]|0;
     $$05$lcssa$i = $235;$248 = $244;$250 = $247;
    }
    $249 = ($248|0)==(0);
    $251 = ($250|0)==(0);
    $252 = $249 & $251;
    $253 = $$3265 & 8;
    $254 = ($253|0)==(0);
    $or$cond282 = $254 | $252;
    $255 = $$1236 >> 4;
    $256 = (33576 + ($255)|0);
    $$332 = $or$cond282 ? 33576 : $256;
    $$333 = $or$cond282 ? 0 : 2;
    $$0228 = $$05$lcssa$i;$$1233 = $$333;$$1238 = $$332;$$2256 = $$1255;$$4266 = $$3265;
    label = 76;
   }
   else if ((label|0) == 75) {
    label = 0;
    $302 = (_fmt_u($300,$301,$14)|0);
    $$0228 = $302;$$1233 = $$0232;$$1238 = $$0237;$$2256 = $$0254;$$4266 = $$1263$;
    label = 76;
   }
   else if ((label|0) == 81) {
    label = 0;
    $334 = (_memchr($$1,0,$$0254)|0);
    $335 = ($334|0)==(0|0);
    $336 = $334;
    $337 = $$1;
    $338 = (($336) - ($337))|0;
    $339 = (($$1) + ($$0254)|0);
    $$3257 = $335 ? $$0254 : $338;
    $$1250 = $335 ? $339 : $334;
    $$2 = $$1;$$2234 = 0;$$2239 = 33576;$$2251 = $$1250;$$5 = $$3257;$$6268 = $187;
   }
   else if ((label|0) == 85) {
    label = 0;
    $$0229396 = $809;$$0240395 = 0;$$1244394 = 0;
    while(1) {
     $347 = HEAP32[$$0229396>>2]|0;
     $348 = ($347|0)==(0);
     if ($348) {
      $$0240$lcssa = $$0240395;$$2245 = $$1244394;
      break;
     }
     $349 = (_wctomb($12,$347)|0);
     $350 = ($349|0)<(0);
     $351 = (($$4258458) - ($$0240395))|0;
     $352 = ($349>>>0)>($351>>>0);
     $or$cond285 = $350 | $352;
     if ($or$cond285) {
      $$0240$lcssa = $$0240395;$$2245 = $349;
      break;
     }
     $353 = ((($$0229396)) + 4|0);
     $354 = (($349) + ($$0240395))|0;
     $355 = ($$4258458>>>0)>($354>>>0);
     if ($355) {
      $$0229396 = $353;$$0240395 = $354;$$1244394 = $349;
     } else {
      $$0240$lcssa = $354;$$2245 = $349;
      break;
     }
    }
    $356 = ($$2245|0)<(0);
    if ($356) {
     $$0 = -1;
     break L1;
    }
    _pad($0,32,$$1260,$$0240$lcssa,$$1263$);
    $357 = ($$0240$lcssa|0)==(0);
    if ($357) {
     $$0240$lcssa460 = 0;
     label = 96;
    } else {
     $$1230407 = $809;$$1241406 = 0;
     while(1) {
      $358 = HEAP32[$$1230407>>2]|0;
      $359 = ($358|0)==(0);
      if ($359) {
       $$0240$lcssa460 = $$0240$lcssa;
       label = 96;
       break L310;
      }
      $360 = ((($$1230407)) + 4|0);
      $361 = (_wctomb($12,$358)|0);
      $362 = (($361) + ($$1241406))|0;
      $363 = ($362|0)>($$0240$lcssa|0);
      if ($363) {
       $$0240$lcssa460 = $$0240$lcssa;
       label = 96;
       break L310;
      }
      $364 = HEAP32[$0>>2]|0;
      $365 = $364 & 32;
      $366 = ($365|0)==(0);
      if ($366) {
       (___fwritex($12,$361,$0)|0);
      }
      $367 = ($362>>>0)<($$0240$lcssa>>>0);
      if ($367) {
       $$1230407 = $360;$$1241406 = $362;
      } else {
       $$0240$lcssa460 = $$0240$lcssa;
       label = 96;
       break;
      }
     }
    }
   }
  } while(0);
  if ((label|0) == 96) {
   label = 0;
   $368 = $$1263$ ^ 8192;
   _pad($0,32,$$1260,$$0240$lcssa460,$368);
   $369 = ($$1260|0)>($$0240$lcssa460|0);
   $370 = $369 ? $$1260 : $$0240$lcssa460;
   $$0243 = $370;$$0247 = $$1248;$$0269 = $$3272;$$0321 = $158;
   continue;
  }
  if ((label|0) == 76) {
   label = 0;
   $303 = ($$2256|0)>(-1);
   $304 = $$4266 & -65537;
   $$$4266 = $303 ? $304 : $$4266;
   $305 = $9;
   $306 = $305;
   $307 = HEAP32[$306>>2]|0;
   $308 = (($305) + 4)|0;
   $309 = $308;
   $310 = HEAP32[$309>>2]|0;
   $311 = ($307|0)!=(0);
   $312 = ($310|0)!=(0);
   $313 = $311 | $312;
   $314 = ($$2256|0)!=(0);
   $or$cond = $314 | $313;
   if ($or$cond) {
    $315 = $$0228;
    $316 = (($15) - ($315))|0;
    $317 = $313&1;
    $318 = $317 ^ 1;
    $319 = (($318) + ($316))|0;
    $320 = ($$2256|0)>($319|0);
    $$2256$ = $320 ? $$2256 : $319;
    $$2 = $$0228;$$2234 = $$1233;$$2239 = $$1238;$$2251 = $14;$$5 = $$2256$;$$6268 = $$$4266;
   } else {
    $$2 = $14;$$2234 = $$1233;$$2239 = $$1238;$$2251 = $14;$$5 = 0;$$6268 = $$$4266;
   }
  }
  $782 = $$2251;
  $783 = $$2;
  $784 = (($782) - ($783))|0;
  $785 = ($$5|0)<($784|0);
  $$$5 = $785 ? $784 : $$5;
  $786 = (($$$5) + ($$2234))|0;
  $787 = ($$1260|0)<($786|0);
  $$2261 = $787 ? $786 : $$1260;
  _pad($0,32,$$2261,$786,$$6268);
  $788 = HEAP32[$0>>2]|0;
  $789 = $788 & 32;
  $790 = ($789|0)==(0);
  if ($790) {
   (___fwritex($$2239,$$2234,$0)|0);
  }
  $791 = $$6268 ^ 65536;
  _pad($0,48,$$2261,$786,$791);
  _pad($0,48,$$$5,$784,0);
  $792 = HEAP32[$0>>2]|0;
  $793 = $792 & 32;
  $794 = ($793|0)==(0);
  if ($794) {
   (___fwritex($$2,$784,$0)|0);
  }
  $795 = $$6268 ^ 8192;
  _pad($0,32,$$2261,$786,$795);
  $$0243 = $$2261;$$0247 = $$1248;$$0269 = $$3272;$$0321 = $158;
 }
 L345: do {
  if ((label|0) == 243) {
   $796 = ($0|0)==(0|0);
   if ($796) {
    $797 = ($$0269|0)==(0);
    if ($797) {
     $$0 = 0;
    } else {
     $$2242381 = 1;
     while(1) {
      $798 = (($4) + ($$2242381<<2)|0);
      $799 = HEAP32[$798>>2]|0;
      $800 = ($799|0)==(0);
      if ($800) {
       $$3379 = $$2242381;
       break;
      }
      $801 = (($3) + ($$2242381<<3)|0);
      _pop_arg_794($801,$799,$2);
      $802 = (($$2242381) + 1)|0;
      $803 = ($802|0)<(10);
      if ($803) {
       $$2242381 = $802;
      } else {
       $$0 = 1;
       break L345;
      }
     }
     while(1) {
      $806 = (($4) + ($$3379<<2)|0);
      $807 = HEAP32[$806>>2]|0;
      $808 = ($807|0)==(0);
      $804 = (($$3379) + 1)|0;
      if (!($808)) {
       $$0 = -1;
       break L345;
      }
      $805 = ($804|0)<(10);
      if ($805) {
       $$3379 = $804;
      } else {
       $$0 = 1;
       break;
      }
     }
    }
   } else {
    $$0 = $$1248;
   }
  }
 } while(0);
 STACKTOP = sp;return ($$0|0);
}
function ___lockfile($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 0;
}
function ___unlockfile($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function ___fwritex($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$038 = 0, $$042 = 0, $$1 = 0, $$139 = 0, $$141 = 0, $$143 = 0, $$pre = 0, $$pre47 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ((($2)) + 16|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)==(0|0);
 if ($5) {
  $7 = (___towrite($2)|0);
  $8 = ($7|0)==(0);
  if ($8) {
   $$pre = HEAP32[$3>>2]|0;
   $12 = $$pre;
   label = 5;
  } else {
   $$1 = 0;
  }
 } else {
  $6 = $4;
  $12 = $6;
  label = 5;
 }
 L5: do {
  if ((label|0) == 5) {
   $9 = ((($2)) + 20|0);
   $10 = HEAP32[$9>>2]|0;
   $11 = (($12) - ($10))|0;
   $13 = ($11>>>0)<($1>>>0);
   $14 = $10;
   if ($13) {
    $15 = ((($2)) + 36|0);
    $16 = HEAP32[$15>>2]|0;
    $17 = (FUNCTION_TABLE_iiii[$16 & 31]($2,$0,$1)|0);
    $$1 = $17;
    break;
   }
   $18 = ((($2)) + 75|0);
   $19 = HEAP8[$18>>0]|0;
   $20 = ($19<<24>>24)>(-1);
   L10: do {
    if ($20) {
     $$038 = $1;
     while(1) {
      $21 = ($$038|0)==(0);
      if ($21) {
       $$139 = 0;$$141 = $0;$$143 = $1;$31 = $14;
       break L10;
      }
      $22 = (($$038) + -1)|0;
      $23 = (($0) + ($22)|0);
      $24 = HEAP8[$23>>0]|0;
      $25 = ($24<<24>>24)==(10);
      if ($25) {
       break;
      } else {
       $$038 = $22;
      }
     }
     $26 = ((($2)) + 36|0);
     $27 = HEAP32[$26>>2]|0;
     $28 = (FUNCTION_TABLE_iiii[$27 & 31]($2,$0,$$038)|0);
     $29 = ($28>>>0)<($$038>>>0);
     if ($29) {
      $$1 = $28;
      break L5;
     }
     $30 = (($0) + ($$038)|0);
     $$042 = (($1) - ($$038))|0;
     $$pre47 = HEAP32[$9>>2]|0;
     $$139 = $$038;$$141 = $30;$$143 = $$042;$31 = $$pre47;
    } else {
     $$139 = 0;$$141 = $0;$$143 = $1;$31 = $14;
    }
   } while(0);
   _memcpy(($31|0),($$141|0),($$143|0))|0;
   $32 = HEAP32[$9>>2]|0;
   $33 = (($32) + ($$143)|0);
   HEAP32[$9>>2] = $33;
   $34 = (($$139) + ($$143))|0;
   $$1 = $34;
  }
 } while(0);
 return ($$1|0);
}
function _pop_arg_794($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$mask = 0, $$mask31 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0.0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0.0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0;
 var $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $arglist_current = 0, $arglist_current11 = 0, $arglist_current14 = 0, $arglist_current17 = 0;
 var $arglist_current2 = 0, $arglist_current20 = 0, $arglist_current23 = 0, $arglist_current26 = 0, $arglist_current5 = 0, $arglist_current8 = 0, $arglist_next = 0, $arglist_next12 = 0, $arglist_next15 = 0, $arglist_next18 = 0, $arglist_next21 = 0, $arglist_next24 = 0, $arglist_next27 = 0, $arglist_next3 = 0, $arglist_next6 = 0, $arglist_next9 = 0, $expanded = 0, $expanded28 = 0, $expanded30 = 0, $expanded31 = 0;
 var $expanded32 = 0, $expanded34 = 0, $expanded35 = 0, $expanded37 = 0, $expanded38 = 0, $expanded39 = 0, $expanded41 = 0, $expanded42 = 0, $expanded44 = 0, $expanded45 = 0, $expanded46 = 0, $expanded48 = 0, $expanded49 = 0, $expanded51 = 0, $expanded52 = 0, $expanded53 = 0, $expanded55 = 0, $expanded56 = 0, $expanded58 = 0, $expanded59 = 0;
 var $expanded60 = 0, $expanded62 = 0, $expanded63 = 0, $expanded65 = 0, $expanded66 = 0, $expanded67 = 0, $expanded69 = 0, $expanded70 = 0, $expanded72 = 0, $expanded73 = 0, $expanded74 = 0, $expanded76 = 0, $expanded77 = 0, $expanded79 = 0, $expanded80 = 0, $expanded81 = 0, $expanded83 = 0, $expanded84 = 0, $expanded86 = 0, $expanded87 = 0;
 var $expanded88 = 0, $expanded90 = 0, $expanded91 = 0, $expanded93 = 0, $expanded94 = 0, $expanded95 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ($1>>>0)>(20);
 L1: do {
  if (!($3)) {
   do {
    switch ($1|0) {
    case 9:  {
     $arglist_current = HEAP32[$2>>2]|0;
     $4 = $arglist_current;
     $5 = ((0) + 4|0);
     $expanded28 = $5;
     $expanded = (($expanded28) - 1)|0;
     $6 = (($4) + ($expanded))|0;
     $7 = ((0) + 4|0);
     $expanded32 = $7;
     $expanded31 = (($expanded32) - 1)|0;
     $expanded30 = $expanded31 ^ -1;
     $8 = $6 & $expanded30;
     $9 = $8;
     $10 = HEAP32[$9>>2]|0;
     $arglist_next = ((($9)) + 4|0);
     HEAP32[$2>>2] = $arglist_next;
     HEAP32[$0>>2] = $10;
     break L1;
     break;
    }
    case 10:  {
     $arglist_current2 = HEAP32[$2>>2]|0;
     $11 = $arglist_current2;
     $12 = ((0) + 4|0);
     $expanded35 = $12;
     $expanded34 = (($expanded35) - 1)|0;
     $13 = (($11) + ($expanded34))|0;
     $14 = ((0) + 4|0);
     $expanded39 = $14;
     $expanded38 = (($expanded39) - 1)|0;
     $expanded37 = $expanded38 ^ -1;
     $15 = $13 & $expanded37;
     $16 = $15;
     $17 = HEAP32[$16>>2]|0;
     $arglist_next3 = ((($16)) + 4|0);
     HEAP32[$2>>2] = $arglist_next3;
     $18 = ($17|0)<(0);
     $19 = $18 << 31 >> 31;
     $20 = $0;
     $21 = $20;
     HEAP32[$21>>2] = $17;
     $22 = (($20) + 4)|0;
     $23 = $22;
     HEAP32[$23>>2] = $19;
     break L1;
     break;
    }
    case 11:  {
     $arglist_current5 = HEAP32[$2>>2]|0;
     $24 = $arglist_current5;
     $25 = ((0) + 4|0);
     $expanded42 = $25;
     $expanded41 = (($expanded42) - 1)|0;
     $26 = (($24) + ($expanded41))|0;
     $27 = ((0) + 4|0);
     $expanded46 = $27;
     $expanded45 = (($expanded46) - 1)|0;
     $expanded44 = $expanded45 ^ -1;
     $28 = $26 & $expanded44;
     $29 = $28;
     $30 = HEAP32[$29>>2]|0;
     $arglist_next6 = ((($29)) + 4|0);
     HEAP32[$2>>2] = $arglist_next6;
     $31 = $0;
     $32 = $31;
     HEAP32[$32>>2] = $30;
     $33 = (($31) + 4)|0;
     $34 = $33;
     HEAP32[$34>>2] = 0;
     break L1;
     break;
    }
    case 12:  {
     $arglist_current8 = HEAP32[$2>>2]|0;
     $35 = $arglist_current8;
     $36 = ((0) + 8|0);
     $expanded49 = $36;
     $expanded48 = (($expanded49) - 1)|0;
     $37 = (($35) + ($expanded48))|0;
     $38 = ((0) + 8|0);
     $expanded53 = $38;
     $expanded52 = (($expanded53) - 1)|0;
     $expanded51 = $expanded52 ^ -1;
     $39 = $37 & $expanded51;
     $40 = $39;
     $41 = $40;
     $42 = $41;
     $43 = HEAP32[$42>>2]|0;
     $44 = (($41) + 4)|0;
     $45 = $44;
     $46 = HEAP32[$45>>2]|0;
     $arglist_next9 = ((($40)) + 8|0);
     HEAP32[$2>>2] = $arglist_next9;
     $47 = $0;
     $48 = $47;
     HEAP32[$48>>2] = $43;
     $49 = (($47) + 4)|0;
     $50 = $49;
     HEAP32[$50>>2] = $46;
     break L1;
     break;
    }
    case 13:  {
     $arglist_current11 = HEAP32[$2>>2]|0;
     $51 = $arglist_current11;
     $52 = ((0) + 4|0);
     $expanded56 = $52;
     $expanded55 = (($expanded56) - 1)|0;
     $53 = (($51) + ($expanded55))|0;
     $54 = ((0) + 4|0);
     $expanded60 = $54;
     $expanded59 = (($expanded60) - 1)|0;
     $expanded58 = $expanded59 ^ -1;
     $55 = $53 & $expanded58;
     $56 = $55;
     $57 = HEAP32[$56>>2]|0;
     $arglist_next12 = ((($56)) + 4|0);
     HEAP32[$2>>2] = $arglist_next12;
     $58 = $57&65535;
     $59 = $58 << 16 >> 16;
     $60 = ($59|0)<(0);
     $61 = $60 << 31 >> 31;
     $62 = $0;
     $63 = $62;
     HEAP32[$63>>2] = $59;
     $64 = (($62) + 4)|0;
     $65 = $64;
     HEAP32[$65>>2] = $61;
     break L1;
     break;
    }
    case 14:  {
     $arglist_current14 = HEAP32[$2>>2]|0;
     $66 = $arglist_current14;
     $67 = ((0) + 4|0);
     $expanded63 = $67;
     $expanded62 = (($expanded63) - 1)|0;
     $68 = (($66) + ($expanded62))|0;
     $69 = ((0) + 4|0);
     $expanded67 = $69;
     $expanded66 = (($expanded67) - 1)|0;
     $expanded65 = $expanded66 ^ -1;
     $70 = $68 & $expanded65;
     $71 = $70;
     $72 = HEAP32[$71>>2]|0;
     $arglist_next15 = ((($71)) + 4|0);
     HEAP32[$2>>2] = $arglist_next15;
     $$mask31 = $72 & 65535;
     $73 = $0;
     $74 = $73;
     HEAP32[$74>>2] = $$mask31;
     $75 = (($73) + 4)|0;
     $76 = $75;
     HEAP32[$76>>2] = 0;
     break L1;
     break;
    }
    case 15:  {
     $arglist_current17 = HEAP32[$2>>2]|0;
     $77 = $arglist_current17;
     $78 = ((0) + 4|0);
     $expanded70 = $78;
     $expanded69 = (($expanded70) - 1)|0;
     $79 = (($77) + ($expanded69))|0;
     $80 = ((0) + 4|0);
     $expanded74 = $80;
     $expanded73 = (($expanded74) - 1)|0;
     $expanded72 = $expanded73 ^ -1;
     $81 = $79 & $expanded72;
     $82 = $81;
     $83 = HEAP32[$82>>2]|0;
     $arglist_next18 = ((($82)) + 4|0);
     HEAP32[$2>>2] = $arglist_next18;
     $84 = $83&255;
     $85 = $84 << 24 >> 24;
     $86 = ($85|0)<(0);
     $87 = $86 << 31 >> 31;
     $88 = $0;
     $89 = $88;
     HEAP32[$89>>2] = $85;
     $90 = (($88) + 4)|0;
     $91 = $90;
     HEAP32[$91>>2] = $87;
     break L1;
     break;
    }
    case 16:  {
     $arglist_current20 = HEAP32[$2>>2]|0;
     $92 = $arglist_current20;
     $93 = ((0) + 4|0);
     $expanded77 = $93;
     $expanded76 = (($expanded77) - 1)|0;
     $94 = (($92) + ($expanded76))|0;
     $95 = ((0) + 4|0);
     $expanded81 = $95;
     $expanded80 = (($expanded81) - 1)|0;
     $expanded79 = $expanded80 ^ -1;
     $96 = $94 & $expanded79;
     $97 = $96;
     $98 = HEAP32[$97>>2]|0;
     $arglist_next21 = ((($97)) + 4|0);
     HEAP32[$2>>2] = $arglist_next21;
     $$mask = $98 & 255;
     $99 = $0;
     $100 = $99;
     HEAP32[$100>>2] = $$mask;
     $101 = (($99) + 4)|0;
     $102 = $101;
     HEAP32[$102>>2] = 0;
     break L1;
     break;
    }
    case 17:  {
     $arglist_current23 = HEAP32[$2>>2]|0;
     $103 = $arglist_current23;
     $104 = ((0) + 8|0);
     $expanded84 = $104;
     $expanded83 = (($expanded84) - 1)|0;
     $105 = (($103) + ($expanded83))|0;
     $106 = ((0) + 8|0);
     $expanded88 = $106;
     $expanded87 = (($expanded88) - 1)|0;
     $expanded86 = $expanded87 ^ -1;
     $107 = $105 & $expanded86;
     $108 = $107;
     $109 = +HEAPF64[$108>>3];
     $arglist_next24 = ((($108)) + 8|0);
     HEAP32[$2>>2] = $arglist_next24;
     HEAPF64[$0>>3] = $109;
     break L1;
     break;
    }
    case 18:  {
     $arglist_current26 = HEAP32[$2>>2]|0;
     $110 = $arglist_current26;
     $111 = ((0) + 8|0);
     $expanded91 = $111;
     $expanded90 = (($expanded91) - 1)|0;
     $112 = (($110) + ($expanded90))|0;
     $113 = ((0) + 8|0);
     $expanded95 = $113;
     $expanded94 = (($expanded95) - 1)|0;
     $expanded93 = $expanded94 ^ -1;
     $114 = $112 & $expanded93;
     $115 = $114;
     $116 = +HEAPF64[$115>>3];
     $arglist_next27 = ((($115)) + 8|0);
     HEAP32[$2>>2] = $arglist_next27;
     HEAPF64[$0>>3] = $116;
     break L1;
     break;
    }
    default: {
     break L1;
    }
    }
   } while(0);
  }
 } while(0);
 return;
}
function _fmt_u($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$010$lcssa$off0 = 0, $$012 = 0, $$09$lcssa = 0, $$0914 = 0, $$1$lcssa = 0, $$111 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ($1>>>0)>(0);
 $4 = ($0>>>0)>(4294967295);
 $5 = ($1|0)==(0);
 $6 = $5 & $4;
 $7 = $3 | $6;
 if ($7) {
  $$0914 = $2;$8 = $0;$9 = $1;
  while(1) {
   $10 = (___uremdi3(($8|0),($9|0),10,0)|0);
   $11 = tempRet0;
   $12 = $10 | 48;
   $13 = $12&255;
   $14 = ((($$0914)) + -1|0);
   HEAP8[$14>>0] = $13;
   $15 = (___udivdi3(($8|0),($9|0),10,0)|0);
   $16 = tempRet0;
   $17 = ($9>>>0)>(9);
   $18 = ($8>>>0)>(4294967295);
   $19 = ($9|0)==(9);
   $20 = $19 & $18;
   $21 = $17 | $20;
   if ($21) {
    $$0914 = $14;$8 = $15;$9 = $16;
   } else {
    break;
   }
  }
  $$010$lcssa$off0 = $15;$$09$lcssa = $14;
 } else {
  $$010$lcssa$off0 = $0;$$09$lcssa = $2;
 }
 $22 = ($$010$lcssa$off0|0)==(0);
 if ($22) {
  $$1$lcssa = $$09$lcssa;
 } else {
  $$012 = $$010$lcssa$off0;$$111 = $$09$lcssa;
  while(1) {
   $23 = (($$012>>>0) % 10)&-1;
   $24 = $23 | 48;
   $25 = $24&255;
   $26 = ((($$111)) + -1|0);
   HEAP8[$26>>0] = $25;
   $27 = (($$012>>>0) / 10)&-1;
   $28 = ($$012>>>0)<(10);
   if ($28) {
    $$1$lcssa = $26;
    break;
   } else {
    $$012 = $27;$$111 = $26;
   }
  }
 }
 return ($$1$lcssa|0);
}
function _pad($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$0$lcssa16 = 0, $$012 = 0, $$pre = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 256|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(256|0);
 $5 = sp;
 $6 = $4 & 73728;
 $7 = ($6|0)==(0);
 $8 = ($2|0)>($3|0);
 $or$cond = $8 & $7;
 do {
  if ($or$cond) {
   $9 = (($2) - ($3))|0;
   $10 = ($9>>>0)>(256);
   $11 = $10 ? 256 : $9;
   _memset(($5|0),($1|0),($11|0))|0;
   $12 = ($9>>>0)>(255);
   $13 = HEAP32[$0>>2]|0;
   $14 = $13 & 32;
   $15 = ($14|0)==(0);
   if ($12) {
    $16 = (($2) - ($3))|0;
    $$012 = $9;$23 = $13;$24 = $15;
    while(1) {
     if ($24) {
      (___fwritex($5,256,$0)|0);
      $$pre = HEAP32[$0>>2]|0;
      $20 = $$pre;
     } else {
      $20 = $23;
     }
     $17 = (($$012) + -256)|0;
     $18 = ($17>>>0)>(255);
     $19 = $20 & 32;
     $21 = ($19|0)==(0);
     if ($18) {
      $$012 = $17;$23 = $20;$24 = $21;
     } else {
      break;
     }
    }
    $22 = $16 & 255;
    if ($21) {
     $$0$lcssa16 = $22;
    } else {
     break;
    }
   } else {
    if ($15) {
     $$0$lcssa16 = $9;
    } else {
     break;
    }
   }
   (___fwritex($5,$$0$lcssa16,$0)|0);
  }
 } while(0);
 STACKTOP = sp;return;
}
function _frexpl($0,$1) {
 $0 = +$0;
 $1 = $1|0;
 var $2 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (+_frexp($0,$1));
 return (+$2);
}
function _frexp($0,$1) {
 $0 = +$0;
 $1 = $1|0;
 var $$0 = 0.0, $$016 = 0.0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0.0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0.0, $9 = 0.0, $storemerge = 0, $trunc$clear = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 HEAPF64[tempDoublePtr>>3] = $0;$2 = HEAP32[tempDoublePtr>>2]|0;
 $3 = HEAP32[tempDoublePtr+4>>2]|0;
 $4 = (_bitshift64Lshr(($2|0),($3|0),52)|0);
 $5 = tempRet0;
 $6 = $4&65535;
 $trunc$clear = $6 & 2047;
 switch ($trunc$clear<<16>>16) {
 case 0:  {
  $7 = $0 != 0.0;
  if ($7) {
   $8 = $0 * 1.8446744073709552E+19;
   $9 = (+_frexp($8,$1));
   $10 = HEAP32[$1>>2]|0;
   $11 = (($10) + -64)|0;
   $$016 = $9;$storemerge = $11;
  } else {
   $$016 = $0;$storemerge = 0;
  }
  HEAP32[$1>>2] = $storemerge;
  $$0 = $$016;
  break;
 }
 case 2047:  {
  $$0 = $0;
  break;
 }
 default: {
  $12 = $4 & 2047;
  $13 = (($12) + -1022)|0;
  HEAP32[$1>>2] = $13;
  $14 = $3 & -2146435073;
  $15 = $14 | 1071644672;
  HEAP32[tempDoublePtr>>2] = $2;HEAP32[tempDoublePtr+4>>2] = $15;$16 = +HEAPF64[tempDoublePtr>>3];
  $$0 = $16;
 }
 }
 return (+$$0);
}
function ___towrite($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 74|0);
 $2 = HEAP8[$1>>0]|0;
 $3 = $2 << 24 >> 24;
 $4 = (($3) + 255)|0;
 $5 = $4 | $3;
 $6 = $5&255;
 HEAP8[$1>>0] = $6;
 $7 = HEAP32[$0>>2]|0;
 $8 = $7 & 8;
 $9 = ($8|0)==(0);
 if ($9) {
  $11 = ((($0)) + 8|0);
  HEAP32[$11>>2] = 0;
  $12 = ((($0)) + 4|0);
  HEAP32[$12>>2] = 0;
  $13 = ((($0)) + 44|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = ((($0)) + 28|0);
  HEAP32[$15>>2] = $14;
  $16 = ((($0)) + 20|0);
  HEAP32[$16>>2] = $14;
  $17 = $14;
  $18 = ((($0)) + 48|0);
  $19 = HEAP32[$18>>2]|0;
  $20 = (($17) + ($19)|0);
  $21 = ((($0)) + 16|0);
  HEAP32[$21>>2] = $20;
  $$0 = 0;
 } else {
  $10 = $7 | 32;
  HEAP32[$0>>2] = $10;
  $$0 = -1;
 }
 return ($$0|0);
}
function _sn_write($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$ = 0, $$cast = 0, $10 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ((($0)) + 16|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($0)) + 20|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (($4) - ($6))|0;
 $8 = ($7>>>0)>($2>>>0);
 $$ = $8 ? $2 : $7;
 $$cast = $6;
 _memcpy(($$cast|0),($1|0),($$|0))|0;
 $9 = HEAP32[$5>>2]|0;
 $10 = (($9) + ($$)|0);
 HEAP32[$5>>2] = $10;
 return ($2|0);
}
function _iswupper($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (_towlower($0)|0);
 $2 = ($1|0)!=($0|0);
 $3 = $2&1;
 return ($3|0);
}
function _iswlower($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (_towupper($0)|0);
 $2 = ($1|0)!=($0|0);
 $3 = $2&1;
 return ($3|0);
}
function _iswpunct($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($0>>>0)<(131072);
 if ($1) {
  $2 = $0 >>> 8;
  $3 = (33626 + ($2)|0);
  $4 = HEAP8[$3>>0]|0;
  $5 = $4&255;
  $6 = $5 << 5;
  $7 = $0 >>> 3;
  $8 = $7 & 31;
  $9 = $6 | $8;
  $10 = (33626 + ($9)|0);
  $11 = HEAP8[$10>>0]|0;
  $12 = $11&255;
  $13 = $0 & 7;
  $14 = $12 >>> $13;
  $15 = $14 & 1;
  $$0 = $15;
 } else {
  $$0 = 0;
 }
 return ($$0|0);
}
function _sprintf($0,$1,$varargs) {
 $0 = $0|0;
 $1 = $1|0;
 $varargs = $varargs|0;
 var $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = sp;
 HEAP32[$2>>2] = $varargs;
 $3 = (_vsprintf($0,$1,$2)|0);
 STACKTOP = sp;return ($3|0);
}
function _vsprintf($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = (_vsnprintf($0,2147483647,$1,$2)|0);
 return ($3|0);
}
function _close($0) {
 $0 = $0|0;
 var $$ = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 $1 = (_dummy_485($0)|0);
 HEAP32[$vararg_buffer>>2] = $1;
 $2 = (___syscall6(6,($vararg_buffer|0))|0);
 $3 = ($2|0)==(-4);
 $$ = $3 ? 0 : $2;
 $4 = (___syscall_ret($$)|0);
 STACKTOP = sp;return ($4|0);
}
function _fcntl($0,$1,$varargs) {
 $0 = $0|0;
 $1 = $1|0;
 $varargs = $varargs|0;
 var $$ = 0, $$0 = 0, $$2 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $arglist_current = 0, $arglist_next = 0, $expanded = 0, $expanded2 = 0, $expanded4 = 0, $expanded5 = 0, $expanded6 = 0, $vararg_buffer = 0, $vararg_buffer13 = 0, $vararg_buffer18 = 0, $vararg_buffer23 = 0, $vararg_buffer28 = 0, $vararg_buffer3 = 0, $vararg_buffer31 = 0, $vararg_buffer36 = 0, $vararg_buffer41 = 0, $vararg_buffer46 = 0, $vararg_buffer8 = 0, $vararg_ptr1 = 0;
 var $vararg_ptr11 = 0, $vararg_ptr12 = 0, $vararg_ptr16 = 0, $vararg_ptr17 = 0, $vararg_ptr2 = 0, $vararg_ptr21 = 0, $vararg_ptr22 = 0, $vararg_ptr26 = 0, $vararg_ptr27 = 0, $vararg_ptr34 = 0, $vararg_ptr35 = 0, $vararg_ptr39 = 0, $vararg_ptr40 = 0, $vararg_ptr44 = 0, $vararg_ptr45 = 0, $vararg_ptr49 = 0, $vararg_ptr50 = 0, $vararg_ptr6 = 0, $vararg_ptr7 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 192|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(192|0);
 $vararg_buffer46 = sp + 152|0;
 $vararg_buffer41 = sp + 136|0;
 $vararg_buffer36 = sp + 120|0;
 $vararg_buffer31 = sp + 104|0;
 $vararg_buffer28 = sp + 96|0;
 $vararg_buffer23 = sp + 80|0;
 $vararg_buffer18 = sp + 64|0;
 $vararg_buffer13 = sp + 48|0;
 $vararg_buffer8 = sp + 32|0;
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer = sp;
 $2 = sp + 176|0;
 $3 = sp + 168|0;
 HEAP32[$2>>2] = $varargs;
 $arglist_current = HEAP32[$2>>2]|0;
 $4 = $arglist_current;
 $5 = ((0) + 4|0);
 $expanded2 = $5;
 $expanded = (($expanded2) - 1)|0;
 $6 = (($4) + ($expanded))|0;
 $7 = ((0) + 4|0);
 $expanded6 = $7;
 $expanded5 = (($expanded6) - 1)|0;
 $expanded4 = $expanded5 ^ -1;
 $8 = $6 & $expanded4;
 $9 = $8;
 $10 = HEAP32[$9>>2]|0;
 $arglist_next = ((($9)) + 4|0);
 HEAP32[$2>>2] = $arglist_next;
 $11 = ($1|0)==(4);
 $12 = $10 | 32768;
 $$ = $11 ? $12 : $10;
 L1: do {
  switch ($1|0) {
  case 14:  {
   HEAP32[$vararg_buffer>>2] = $0;
   $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
   HEAP32[$vararg_ptr1>>2] = 14;
   $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
   HEAP32[$vararg_ptr2>>2] = $$;
   $13 = (___syscall221(221,($vararg_buffer|0))|0);
   $14 = (___syscall_ret($13)|0);
   $$2 = $14;
   break;
  }
  case 9:  {
   $15 = $3;
   HEAP32[$vararg_buffer3>>2] = $0;
   $vararg_ptr6 = ((($vararg_buffer3)) + 4|0);
   HEAP32[$vararg_ptr6>>2] = 16;
   $vararg_ptr7 = ((($vararg_buffer3)) + 8|0);
   HEAP32[$vararg_ptr7>>2] = $15;
   $16 = (___syscall221(221,($vararg_buffer3|0))|0);
   switch ($16|0) {
   case -22:  {
    HEAP32[$vararg_buffer8>>2] = $0;
    $vararg_ptr11 = ((($vararg_buffer8)) + 4|0);
    HEAP32[$vararg_ptr11>>2] = 9;
    $vararg_ptr12 = ((($vararg_buffer8)) + 8|0);
    HEAP32[$vararg_ptr12>>2] = $$;
    $17 = (___syscall221(221,($vararg_buffer8|0))|0);
    $$0 = $17;
    break;
   }
   case 0:  {
    $19 = HEAP32[$3>>2]|0;
    $20 = ($19|0)==(2);
    $21 = ((($3)) + 4|0);
    $22 = HEAP32[$21>>2]|0;
    $23 = (0 - ($22))|0;
    $24 = $20 ? $23 : $22;
    $$0 = $24;
    break;
   }
   default: {
    $18 = (___syscall_ret($16)|0);
    $$0 = $18;
   }
   }
   $$2 = $$0;
   break;
  }
  case 1030:  {
   HEAP32[$vararg_buffer13>>2] = $0;
   $vararg_ptr16 = ((($vararg_buffer13)) + 4|0);
   HEAP32[$vararg_ptr16>>2] = 1030;
   $vararg_ptr17 = ((($vararg_buffer13)) + 8|0);
   HEAP32[$vararg_ptr17>>2] = $$;
   $25 = (___syscall221(221,($vararg_buffer13|0))|0);
   $26 = ($25|0)==(-22);
   if (!($26)) {
    $27 = ($25|0)>(-1);
    if ($27) {
     HEAP32[$vararg_buffer18>>2] = $25;
     $vararg_ptr21 = ((($vararg_buffer18)) + 4|0);
     HEAP32[$vararg_ptr21>>2] = 2;
     $vararg_ptr22 = ((($vararg_buffer18)) + 8|0);
     HEAP32[$vararg_ptr22>>2] = 1;
     (___syscall221(221,($vararg_buffer18|0))|0);
    }
    $28 = (___syscall_ret($25)|0);
    $$2 = $28;
    break L1;
   }
   HEAP32[$vararg_buffer23>>2] = $0;
   $vararg_ptr26 = ((($vararg_buffer23)) + 4|0);
   HEAP32[$vararg_ptr26>>2] = 1030;
   $vararg_ptr27 = ((($vararg_buffer23)) + 8|0);
   HEAP32[$vararg_ptr27>>2] = 0;
   $29 = (___syscall221(221,($vararg_buffer23|0))|0);
   $30 = ($29|0)==(-22);
   if ($30) {
    HEAP32[$vararg_buffer31>>2] = $0;
    $vararg_ptr34 = ((($vararg_buffer31)) + 4|0);
    HEAP32[$vararg_ptr34>>2] = 0;
    $vararg_ptr35 = ((($vararg_buffer31)) + 8|0);
    HEAP32[$vararg_ptr35>>2] = $$;
    $33 = (___syscall221(221,($vararg_buffer31|0))|0);
    $34 = ($33|0)>(-1);
    if ($34) {
     HEAP32[$vararg_buffer36>>2] = $33;
     $vararg_ptr39 = ((($vararg_buffer36)) + 4|0);
     HEAP32[$vararg_ptr39>>2] = 2;
     $vararg_ptr40 = ((($vararg_buffer36)) + 8|0);
     HEAP32[$vararg_ptr40>>2] = 1;
     (___syscall221(221,($vararg_buffer36|0))|0);
    }
    $35 = (___syscall_ret($33)|0);
    $$2 = $35;
    break L1;
   } else {
    $31 = ($29|0)>(-1);
    if ($31) {
     HEAP32[$vararg_buffer28>>2] = $29;
     (___syscall6(6,($vararg_buffer28|0))|0);
    }
    $32 = (___syscall_ret(-22)|0);
    $$2 = $32;
    break L1;
   }
   break;
  }
  case 15: case 16: case 12: case 13:  {
   HEAP32[$vararg_buffer41>>2] = $0;
   $vararg_ptr44 = ((($vararg_buffer41)) + 4|0);
   HEAP32[$vararg_ptr44>>2] = $1;
   $vararg_ptr45 = ((($vararg_buffer41)) + 8|0);
   HEAP32[$vararg_ptr45>>2] = $$;
   $36 = (___syscall221(221,($vararg_buffer41|0))|0);
   $37 = (___syscall_ret($36)|0);
   $$2 = $37;
   break;
  }
  default: {
   HEAP32[$vararg_buffer46>>2] = $0;
   $vararg_ptr49 = ((($vararg_buffer46)) + 4|0);
   HEAP32[$vararg_ptr49>>2] = $1;
   $vararg_ptr50 = ((($vararg_buffer46)) + 8|0);
   HEAP32[$vararg_ptr50>>2] = $$;
   $38 = (___syscall221(221,($vararg_buffer46|0))|0);
   $39 = (___syscall_ret($38)|0);
   $$2 = $39;
  }
  }
 } while(0);
 STACKTOP = sp;return ($$2|0);
}
function _dup2($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 while(1) {
  HEAP32[$vararg_buffer>>2] = $0;
  $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr1>>2] = $1;
  $2 = (___syscall63(63,($vararg_buffer|0))|0);
  $3 = ($2|0)==(-16);
  if (!($3)) {
   break;
  }
 }
 $4 = (___syscall_ret($2)|0);
 STACKTOP = sp;return ($4|0);
}
function __exit($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __Exit(($0|0));
 // unreachable;
}
function _feof($0) {
 $0 = $0|0;
 var $$lobit = 0, $$lobit8 = 0, $$lobit9 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $phitmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 76|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)>(-1);
 if ($3) {
  $6 = (___lockfile($0)|0);
  $phitmp = ($6|0)==(0);
  $7 = HEAP32[$0>>2]|0;
  $8 = $7 >>> 4;
  $$lobit = $8 & 1;
  if ($phitmp) {
   $$lobit9 = $$lobit;
  } else {
   ___unlockfile($0);
   $$lobit9 = $$lobit;
  }
 } else {
  $4 = HEAP32[$0>>2]|0;
  $5 = $4 >>> 4;
  $$lobit8 = $5 & 1;
  $$lobit9 = $$lobit8;
 }
 return ($$lobit9|0);
}
function _fclose($0) {
 $0 = $0|0;
 var $$pre = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 76|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)>(-1);
 if ($3) {
  $4 = (___lockfile($0)|0);
  $29 = $4;
 } else {
  $29 = 0;
 }
 ___unlist_locked_file($0);
 $5 = HEAP32[$0>>2]|0;
 $6 = $5 & 1;
 $7 = ($6|0)!=(0);
 if (!($7)) {
  $8 = (___ofl_lock()|0);
  $9 = ((($0)) + 52|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = ($10|0)==(0|0);
  $12 = $10;
  $$pre = ((($0)) + 56|0);
  if (!($11)) {
   $13 = HEAP32[$$pre>>2]|0;
   $14 = ((($10)) + 56|0);
   HEAP32[$14>>2] = $13;
  }
  $15 = HEAP32[$$pre>>2]|0;
  $16 = ($15|0)==(0|0);
  $17 = $15;
  if (!($16)) {
   $18 = ((($15)) + 52|0);
   HEAP32[$18>>2] = $12;
  }
  $19 = HEAP32[$8>>2]|0;
  $20 = ($19|0)==($0|0);
  if ($20) {
   HEAP32[$8>>2] = $17;
  }
  ___ofl_unlock();
 }
 $21 = (_fflush($0)|0);
 $22 = ((($0)) + 12|0);
 $23 = HEAP32[$22>>2]|0;
 $24 = (FUNCTION_TABLE_ii[$23 & 31]($0)|0);
 $25 = $24 | $21;
 $26 = ((($0)) + 92|0);
 $27 = HEAP32[$26>>2]|0;
 $28 = ($27|0)==(0|0);
 if (!($28)) {
  _free($27);
 }
 if ($7) {
  $30 = ($29|0)==(0);
  if (!($30)) {
   ___unlockfile($0);
  }
 } else {
  _free($0);
 }
 return ($25|0);
}
function ___unlist_locked_file($0) {
 $0 = $0|0;
 var $$pre = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 68|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0);
 do {
  if (!($3)) {
   $4 = ((($0)) + 116|0);
   $5 = HEAP32[$4>>2]|0;
   $6 = ($5|0)==(0|0);
   $7 = $5;
   $$pre = ((($0)) + 112|0);
   if (!($6)) {
    $8 = HEAP32[$$pre>>2]|0;
    $9 = ((($5)) + 112|0);
    HEAP32[$9>>2] = $8;
   }
   $10 = HEAP32[$$pre>>2]|0;
   $11 = ($10|0)==(0|0);
   if ($11) {
    $13 = (_pthread_self()|0);
    $14 = ((($13)) + 232|0);
    HEAP32[$14>>2] = $7;
    break;
   } else {
    $12 = ((($10)) + 116|0);
    HEAP32[$12>>2] = $7;
    break;
   }
  }
 } while(0);
 return;
}
function ___ofl_lock() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 ___lock((89028|0));
 return (89036|0);
}
function ___ofl_unlock() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 ___unlock((89028|0));
 return;
}
function _fflush($0) {
 $0 = $0|0;
 var $$0 = 0, $$023 = 0, $$02325 = 0, $$02327 = 0, $$024$lcssa = 0, $$02426 = 0, $$1 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $phitmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($0|0)==(0|0);
 do {
  if ($1) {
   $8 = HEAP32[1450]|0;
   $9 = ($8|0)==(0|0);
   if ($9) {
    $29 = 0;
   } else {
    $10 = HEAP32[1450]|0;
    $11 = (_fflush($10)|0);
    $29 = $11;
   }
   $12 = (___ofl_lock()|0);
   $$02325 = HEAP32[$12>>2]|0;
   $13 = ($$02325|0)==(0|0);
   if ($13) {
    $$024$lcssa = $29;
   } else {
    $$02327 = $$02325;$$02426 = $29;
    while(1) {
     $14 = ((($$02327)) + 76|0);
     $15 = HEAP32[$14>>2]|0;
     $16 = ($15|0)>(-1);
     if ($16) {
      $17 = (___lockfile($$02327)|0);
      $25 = $17;
     } else {
      $25 = 0;
     }
     $18 = ((($$02327)) + 20|0);
     $19 = HEAP32[$18>>2]|0;
     $20 = ((($$02327)) + 28|0);
     $21 = HEAP32[$20>>2]|0;
     $22 = ($19>>>0)>($21>>>0);
     if ($22) {
      $23 = (___fflush_unlocked($$02327)|0);
      $24 = $23 | $$02426;
      $$1 = $24;
     } else {
      $$1 = $$02426;
     }
     $26 = ($25|0)==(0);
     if (!($26)) {
      ___unlockfile($$02327);
     }
     $27 = ((($$02327)) + 56|0);
     $$023 = HEAP32[$27>>2]|0;
     $28 = ($$023|0)==(0|0);
     if ($28) {
      $$024$lcssa = $$1;
      break;
     } else {
      $$02327 = $$023;$$02426 = $$1;
     }
    }
   }
   ___ofl_unlock();
   $$0 = $$024$lcssa;
  } else {
   $2 = ((($0)) + 76|0);
   $3 = HEAP32[$2>>2]|0;
   $4 = ($3|0)>(-1);
   if (!($4)) {
    $5 = (___fflush_unlocked($0)|0);
    $$0 = $5;
    break;
   }
   $6 = (___lockfile($0)|0);
   $phitmp = ($6|0)==(0);
   $7 = (___fflush_unlocked($0)|0);
   if ($phitmp) {
    $$0 = $7;
   } else {
    ___unlockfile($0);
    $$0 = $7;
   }
  }
 } while(0);
 return ($$0|0);
}
function ___fflush_unlocked($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 20|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($0)) + 28|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($2>>>0)>($4>>>0);
 if ($5) {
  $6 = ((($0)) + 36|0);
  $7 = HEAP32[$6>>2]|0;
  (FUNCTION_TABLE_iiii[$7 & 31]($0,0,0)|0);
  $8 = HEAP32[$1>>2]|0;
  $9 = ($8|0)==(0|0);
  if ($9) {
   $$0 = -1;
  } else {
   label = 3;
  }
 } else {
  label = 3;
 }
 if ((label|0) == 3) {
  $10 = ((($0)) + 4|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = ((($0)) + 8|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = ($11>>>0)<($13>>>0);
  if ($14) {
   $15 = ((($0)) + 40|0);
   $16 = HEAP32[$15>>2]|0;
   $17 = $11;
   $18 = $13;
   $19 = (($17) - ($18))|0;
   (FUNCTION_TABLE_iiii[$16 & 31]($0,$19,1)|0);
  }
  $20 = ((($0)) + 16|0);
  HEAP32[$20>>2] = 0;
  HEAP32[$3>>2] = 0;
  HEAP32[$1>>2] = 0;
  HEAP32[$12>>2] = 0;
  HEAP32[$10>>2] = 0;
  $$0 = 0;
 }
 return ($$0|0);
}
function ___fdopen($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $$pre = 0, $$pre31 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $memchr = 0, $vararg_buffer = 0, $vararg_buffer12 = 0, $vararg_buffer3 = 0, $vararg_buffer7 = 0, $vararg_ptr1 = 0, $vararg_ptr10 = 0, $vararg_ptr11 = 0, $vararg_ptr15 = 0, $vararg_ptr16 = 0, $vararg_ptr2 = 0, $vararg_ptr6 = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $vararg_buffer12 = sp + 40|0;
 $vararg_buffer7 = sp + 24|0;
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer = sp;
 $2 = sp + 56|0;
 $3 = HEAP8[$1>>0]|0;
 $4 = $3 << 24 >> 24;
 $memchr = (_memchr(36794,$4,4)|0);
 $5 = ($memchr|0)==(0|0);
 if ($5) {
  $6 = (___errno_location()|0);
  HEAP32[$6>>2] = 22;
  $$0 = 0;
 } else {
  $7 = (_malloc(1156)|0);
  $8 = ($7|0)==(0|0);
  if ($8) {
   $$0 = 0;
  } else {
   dest=$7; stop=dest+124|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
   $9 = (_strchr($1,43)|0);
   $10 = ($9|0)==(0|0);
   if ($10) {
    $11 = ($3<<24>>24)==(114);
    $12 = $11 ? 8 : 4;
    HEAP32[$7>>2] = $12;
   }
   $13 = (_strchr($1,101)|0);
   $14 = ($13|0)==(0|0);
   if ($14) {
    $15 = $3;
   } else {
    HEAP32[$vararg_buffer>>2] = $0;
    $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
    HEAP32[$vararg_ptr1>>2] = 2;
    $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
    HEAP32[$vararg_ptr2>>2] = 1;
    (___syscall221(221,($vararg_buffer|0))|0);
    $$pre = HEAP8[$1>>0]|0;
    $15 = $$pre;
   }
   $16 = ($15<<24>>24)==(97);
   if ($16) {
    HEAP32[$vararg_buffer3>>2] = $0;
    $vararg_ptr6 = ((($vararg_buffer3)) + 4|0);
    HEAP32[$vararg_ptr6>>2] = 3;
    $17 = (___syscall221(221,($vararg_buffer3|0))|0);
    $18 = $17 & 1024;
    $19 = ($18|0)==(0);
    if ($19) {
     $20 = $17 | 1024;
     HEAP32[$vararg_buffer7>>2] = $0;
     $vararg_ptr10 = ((($vararg_buffer7)) + 4|0);
     HEAP32[$vararg_ptr10>>2] = 4;
     $vararg_ptr11 = ((($vararg_buffer7)) + 8|0);
     HEAP32[$vararg_ptr11>>2] = $20;
     (___syscall221(221,($vararg_buffer7|0))|0);
    }
    $21 = HEAP32[$7>>2]|0;
    $22 = $21 | 128;
    HEAP32[$7>>2] = $22;
    $29 = $22;
   } else {
    $$pre31 = HEAP32[$7>>2]|0;
    $29 = $$pre31;
   }
   $23 = ((($7)) + 60|0);
   HEAP32[$23>>2] = $0;
   $24 = ((($7)) + 132|0);
   $25 = ((($7)) + 44|0);
   HEAP32[$25>>2] = $24;
   $26 = ((($7)) + 48|0);
   HEAP32[$26>>2] = 1024;
   $27 = ((($7)) + 75|0);
   HEAP8[$27>>0] = -1;
   $28 = $29 & 8;
   $30 = ($28|0)==(0);
   if ($30) {
    $31 = $2;
    HEAP32[$vararg_buffer12>>2] = $0;
    $vararg_ptr15 = ((($vararg_buffer12)) + 4|0);
    HEAP32[$vararg_ptr15>>2] = 21523;
    $vararg_ptr16 = ((($vararg_buffer12)) + 8|0);
    HEAP32[$vararg_ptr16>>2] = $31;
    $32 = (___syscall54(54,($vararg_buffer12|0))|0);
    $33 = ($32|0)==(0);
    if ($33) {
     HEAP8[$27>>0] = 10;
    }
   }
   $34 = ((($7)) + 32|0);
   HEAP32[$34>>2] = 29;
   $35 = ((($7)) + 36|0);
   HEAP32[$35>>2] = 9;
   $36 = ((($7)) + 40|0);
   HEAP32[$36>>2] = 8;
   $37 = ((($7)) + 12|0);
   HEAP32[$37>>2] = 6;
   $38 = HEAP32[(88940)>>2]|0;
   $39 = ($38|0)==(0);
   if ($39) {
    $40 = ((($7)) + 76|0);
    HEAP32[$40>>2] = -1;
   }
   $41 = (___ofl_add($7)|0);
   $$0 = $41;
  }
 }
 STACKTOP = sp;return ($$0|0);
}
function ___ofl_add($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (___ofl_lock()|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($0)) + 56|0);
 HEAP32[$3>>2] = $2;
 $4 = HEAP32[$1>>2]|0;
 $5 = ($4|0)==(0|0);
 if (!($5)) {
  $6 = ((($4)) + 52|0);
  HEAP32[$6>>2] = $0;
 }
 HEAP32[$1>>2] = $0;
 ___ofl_unlock();
 return ($0|0);
}
function _pipe($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 $1 = $0;
 HEAP32[$vararg_buffer>>2] = $1;
 $2 = (___syscall42(42,($vararg_buffer|0))|0);
 $3 = (___syscall_ret($2)|0);
 STACKTOP = sp;return ($3|0);
}
function _fwrite($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$ = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $phitmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = Math_imul($2, $1)|0;
 $5 = ($1|0)==(0);
 $$ = $5 ? 0 : $2;
 $6 = ((($3)) + 76|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($7|0)>(-1);
 if ($8) {
  $10 = (___lockfile($3)|0);
  $phitmp = ($10|0)==(0);
  $11 = (___fwritex($0,$4,$3)|0);
  if ($phitmp) {
   $12 = $11;
  } else {
   ___unlockfile($3);
   $12 = $11;
  }
 } else {
  $9 = (___fwritex($0,$4,$3)|0);
  $12 = $9;
 }
 $13 = ($12|0)==($4|0);
 if ($13) {
  $15 = $$;
 } else {
  $14 = (($12>>>0) / ($1>>>0))&-1;
  $15 = $14;
 }
 return ($15|0);
}
function ___overflow($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $$pre = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = sp;
 $3 = $1&255;
 HEAP8[$2>>0] = $3;
 $4 = ((($0)) + 16|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)==(0|0);
 if ($6) {
  $7 = (___towrite($0)|0);
  $8 = ($7|0)==(0);
  if ($8) {
   $$pre = HEAP32[$4>>2]|0;
   $12 = $$pre;
   label = 4;
  } else {
   $$0 = -1;
  }
 } else {
  $12 = $5;
  label = 4;
 }
 do {
  if ((label|0) == 4) {
   $9 = ((($0)) + 20|0);
   $10 = HEAP32[$9>>2]|0;
   $11 = ($10>>>0)<($12>>>0);
   if ($11) {
    $13 = $1 & 255;
    $14 = ((($0)) + 75|0);
    $15 = HEAP8[$14>>0]|0;
    $16 = $15 << 24 >> 24;
    $17 = ($13|0)==($16|0);
    if (!($17)) {
     $18 = ((($10)) + 1|0);
     HEAP32[$9>>2] = $18;
     HEAP8[$10>>0] = $3;
     $$0 = $13;
     break;
    }
   }
   $19 = ((($0)) + 36|0);
   $20 = HEAP32[$19>>2]|0;
   $21 = (FUNCTION_TABLE_iiii[$20 & 31]($0,$2,1)|0);
   $22 = ($21|0)==(1);
   if ($22) {
    $23 = HEAP8[$2>>0]|0;
    $24 = $23&255;
    $$0 = $24;
   } else {
    $$0 = -1;
   }
  }
 } while(0);
 STACKTOP = sp;return ($$0|0);
}
function _access($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 $2 = $0;
 HEAP32[$vararg_buffer>>2] = $2;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $1;
 $3 = (___syscall33(33,($vararg_buffer|0))|0);
 $4 = (___syscall_ret($3)|0);
 STACKTOP = sp;return ($4|0);
}
function _opendir($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $1 = (_open($0,589824,$vararg_buffer)|0);
 $2 = ($1|0)<(0);
 do {
  if ($2) {
   $$0 = 0;
  } else {
   $3 = (_calloc(1,2072)|0);
   $4 = ($3|0)==(0|0);
   if ($4) {
    HEAP32[$vararg_buffer1>>2] = $1;
    (___syscall6(6,($vararg_buffer1|0))|0);
    $$0 = 0;
    break;
   } else {
    HEAP32[$3>>2] = $1;
    $$0 = $3;
    break;
   }
  }
 } while(0);
 STACKTOP = sp;return ($$0|0);
}
function _readdir($0) {
 $0 = $0|0;
 var $$1 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 $1 = ((($0)) + 8|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($0)) + 12|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($2|0)<($4|0);
 L1: do {
  if ($5) {
   $14 = $2;
   label = 6;
  } else {
   $6 = HEAP32[$0>>2]|0;
   $7 = ((($0)) + 24|0);
   $8 = $7;
   HEAP32[$vararg_buffer>>2] = $6;
   $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
   HEAP32[$vararg_ptr1>>2] = $8;
   $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
   HEAP32[$vararg_ptr2>>2] = 2048;
   $9 = (___syscall220(220,($vararg_buffer|0))|0);
   $10 = ($9|0)<(1);
   if (!($10)) {
    HEAP32[$3>>2] = $9;
    HEAP32[$1>>2] = 0;
    $14 = 0;
    label = 6;
    break;
   }
   switch ($9|0) {
   case 0: case -2:  {
    $$1 = 0;
    break L1;
    break;
   }
   default: {
   }
   }
   $11 = (0 - ($9))|0;
   $12 = (___errno_location()|0);
   HEAP32[$12>>2] = $11;
   $$1 = 0;
  }
 } while(0);
 if ((label|0) == 6) {
  $13 = (((($0)) + 24|0) + ($14)|0);
  $15 = ((($13)) + 8|0);
  $16 = HEAP16[$15>>1]|0;
  $17 = $16&65535;
  $18 = (($17) + ($14))|0;
  HEAP32[$1>>2] = $18;
  $19 = ((($13)) + 4|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = ((($0)) + 4|0);
  HEAP32[$21>>2] = $20;
  $$1 = $13;
 }
 STACKTOP = sp;return ($$1|0);
}
function _closedir($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[$0>>2]|0;
 $2 = (_close($1)|0);
 _free($0);
 return ($2|0);
}
function _fopen($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $memchr = 0, $vararg_buffer = 0, $vararg_buffer3 = 0, $vararg_buffer8 = 0, $vararg_ptr1 = 0;
 var $vararg_ptr2 = 0, $vararg_ptr6 = 0, $vararg_ptr7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $vararg_buffer8 = sp + 32|0;
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer = sp;
 $2 = HEAP8[$1>>0]|0;
 $3 = $2 << 24 >> 24;
 $memchr = (_memchr(36794,$3,4)|0);
 $4 = ($memchr|0)==(0|0);
 if ($4) {
  $5 = (___errno_location()|0);
  HEAP32[$5>>2] = 22;
  $$0 = 0;
 } else {
  $6 = (___fmodeflags($1)|0);
  $7 = $0;
  $8 = $6 | 32768;
  HEAP32[$vararg_buffer>>2] = $7;
  $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr1>>2] = $8;
  $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
  HEAP32[$vararg_ptr2>>2] = 438;
  $9 = (___syscall5(5,($vararg_buffer|0))|0);
  $10 = (___syscall_ret($9)|0);
  $11 = ($10|0)<(0);
  if ($11) {
   $$0 = 0;
  } else {
   $12 = $6 & 524288;
   $13 = ($12|0)==(0);
   if (!($13)) {
    HEAP32[$vararg_buffer3>>2] = $10;
    $vararg_ptr6 = ((($vararg_buffer3)) + 4|0);
    HEAP32[$vararg_ptr6>>2] = 2;
    $vararg_ptr7 = ((($vararg_buffer3)) + 8|0);
    HEAP32[$vararg_ptr7>>2] = 1;
    (___syscall221(221,($vararg_buffer3|0))|0);
   }
   $14 = (___fdopen($10,$1)|0);
   $15 = ($14|0)==(0|0);
   if ($15) {
    HEAP32[$vararg_buffer8>>2] = $10;
    (___syscall6(6,($vararg_buffer8|0))|0);
    $$0 = 0;
   } else {
    $$0 = $14;
   }
  }
 }
 STACKTOP = sp;return ($$0|0);
}
function ___fmodeflags($0) {
 $0 = $0|0;
 var $$ = 0, $$$4 = 0, $$0 = 0, $$0$ = 0, $$2 = 0, $$2$ = 0, $$4 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $not$ = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (_strchr($0,43)|0);
 $2 = ($1|0)==(0|0);
 $3 = HEAP8[$0>>0]|0;
 $not$ = ($3<<24>>24)!=(114);
 $$ = $not$&1;
 $$0 = $2 ? $$ : 2;
 $4 = (_strchr($0,120)|0);
 $5 = ($4|0)==(0|0);
 $6 = $$0 | 128;
 $$0$ = $5 ? $$0 : $6;
 $7 = (_strchr($0,101)|0);
 $8 = ($7|0)==(0|0);
 $9 = $$0$ | 524288;
 $$2 = $8 ? $$0$ : $9;
 $10 = ($3<<24>>24)==(114);
 $11 = $$2 | 64;
 $$2$ = $10 ? $$2 : $11;
 $12 = ($3<<24>>24)==(119);
 $13 = $$2$ | 512;
 $$4 = $12 ? $13 : $$2$;
 $14 = ($3<<24>>24)==(97);
 $15 = $$4 | 1024;
 $$$4 = $14 ? $15 : $$4;
 return ($$$4|0);
}
function _fgets($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $$06266 = 0, $$063 = 0, $$064 = 0, $$1 = 0, $$old2 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0;
 var $or$cond3 = 0, $sext$mask = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ((($2)) + 76|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)>(-1);
 if ($5) {
  $6 = (___lockfile($2)|0);
  $15 = $6;
 } else {
  $15 = 0;
 }
 $7 = (($1) + -1)|0;
 $8 = ($1|0)<(2);
 if ($8) {
  $9 = ((($2)) + 74|0);
  $10 = HEAP8[$9>>0]|0;
  $11 = $10 << 24 >> 24;
  $12 = (($11) + 255)|0;
  $13 = $12 | $11;
  $14 = $13&255;
  HEAP8[$9>>0] = $14;
  $16 = ($15|0)==(0);
  if (!($16)) {
   ___unlockfile($2);
  }
  $17 = ($7|0)==(0);
  if ($17) {
   HEAP8[$0>>0] = 0;
   $$0 = $0;
  } else {
   $$0 = 0;
  }
 } else {
  $$old2 = ($7|0)==(0);
  L11: do {
   if ($$old2) {
    $$1 = $0;
    label = 17;
   } else {
    $18 = ((($2)) + 4|0);
    $19 = ((($2)) + 8|0);
    $$063 = $7;$$064 = $0;
    while(1) {
     $20 = HEAP32[$18>>2]|0;
     $21 = HEAP32[$19>>2]|0;
     $22 = $20;
     $23 = (($21) - ($22))|0;
     $24 = (_memchr($20,10,$23)|0);
     $25 = ($24|0)==(0|0);
     $26 = $24;
     $27 = (1 - ($22))|0;
     $28 = (($27) + ($26))|0;
     $29 = $25 ? $23 : $28;
     $30 = ($29>>>0)<($$063>>>0);
     $31 = $30 ? $29 : $$063;
     _memcpy(($$064|0),($20|0),($31|0))|0;
     $32 = HEAP32[$18>>2]|0;
     $33 = (($32) + ($31)|0);
     HEAP32[$18>>2] = $33;
     $34 = (($$064) + ($31)|0);
     $35 = (($$063) - ($31))|0;
     $36 = ($35|0)!=(0);
     $or$cond = $25 & $36;
     if (!($or$cond)) {
      $$1 = $34;
      label = 17;
      break L11;
     }
     $37 = HEAP32[$19>>2]|0;
     $38 = ($33>>>0)<($37>>>0);
     if ($38) {
      $39 = ((($33)) + 1|0);
      HEAP32[$18>>2] = $39;
      $40 = HEAP8[$33>>0]|0;
      $41 = $40&255;
      $50 = $41;
     } else {
      $42 = (___uflow($2)|0);
      $43 = ($42|0)<(0);
      if ($43) {
       break;
      } else {
       $50 = $42;
      }
     }
     $48 = (($35) + -1)|0;
     $49 = $50&255;
     $51 = ((($34)) + 1|0);
     HEAP8[$34>>0] = $49;
     $sext$mask = $50 & 255;
     $52 = ($sext$mask|0)!=(10);
     $53 = ($48|0)!=(0);
     $or$cond3 = $53 & $52;
     if ($or$cond3) {
      $$063 = $48;$$064 = $51;
     } else {
      $$1 = $51;
      label = 17;
      break L11;
     }
    }
    $44 = ($34|0)==($0|0);
    if ($44) {
     $$06266 = 0;
    } else {
     $45 = HEAP32[$2>>2]|0;
     $46 = $45 & 16;
     $47 = ($46|0)==(0);
     if ($47) {
      $$06266 = 0;
     } else {
      $$1 = $34;
      label = 17;
     }
    }
   }
  } while(0);
  if ((label|0) == 17) {
   $54 = ($0|0)==(0|0);
   if ($54) {
    $$06266 = 0;
   } else {
    HEAP8[$$1>>0] = 0;
    $$06266 = $0;
   }
  }
  $55 = ($15|0)==(0);
  if ($55) {
   $$0 = $$06266;
  } else {
   ___unlockfile($2);
   $$0 = $$06266;
  }
 }
 return ($$0|0);
}
function _sscanf($0,$1,$varargs) {
 $0 = $0|0;
 $1 = $1|0;
 $varargs = $varargs|0;
 var $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = sp;
 HEAP32[$2>>2] = $varargs;
 $3 = (_vsscanf($0,$1,$2)|0);
 STACKTOP = sp;return ($3|0);
}
function _vsscanf($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(128|0);
 $3 = sp;
 dest=$3; stop=dest+124|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 $4 = ((($3)) + 32|0);
 HEAP32[$4>>2] = 30;
 $5 = ((($3)) + 44|0);
 HEAP32[$5>>2] = $0;
 $6 = ((($3)) + 76|0);
 HEAP32[$6>>2] = -1;
 $7 = ((($3)) + 84|0);
 HEAP32[$7>>2] = $0;
 $8 = (_vfscanf($3,$1,$2)|0);
 STACKTOP = sp;return ($8|0);
}
function _do_read_754($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = (___string_read($0,$1,$2)|0);
 return ($3|0);
}
function _vfscanf($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$ = 0, $$$0266 = 0, $$$0268 = 0, $$0$i = 0, $$0266$lcssa = 0, $$0266408 = 0, $$0268 = 0, $$0270 = 0, $$0272 = 0, $$0273420 = 0, $$0276$ph = 0, $$0278$ph = 0, $$0278$ph$phi = 0, $$0278$ph331 = 0, $$0283419 = 0, $$0286411 = 0, $$0288$ = 0, $$0288416 = 0, $$0292 = 0, $$0293 = 0;
 var $$0294415 = 0, $$0305414 = 0, $$10 = 0, $$10304 = 0, $$11 = 0, $$1267 = 0, $$1271 = 0, $$1274 = 0, $$1277$ph = 0, $$1279 = 0, $$1284 = 0, $$1289 = 0, $$1295 = 0, $$1306 = 0, $$2 = 0, $$2275 = 0, $$2280 = 0, $$2280$ph = 0, $$2280$ph$phi = 0, $$2285 = 0;
 var $$2290 = 0, $$2296 = 0, $$2307$ph = 0, $$3$lcssa = 0, $$319 = 0, $$320 = 0, $$321 = 0, $$322 = 0, $$3281 = 0, $$3291 = 0, $$3297$ph = 0, $$3407 = 0, $$4 = 0, $$4282 = 0, $$4309 = 0, $$5 = 0, $$5299 = 0, $$5310 = 0, $$6 = 0, $$6300 = 0;
 var $$6311 = 0, $$7 = 0, $$7$ph = 0, $$7301 = 0, $$7312 = 0, $$8 = 0, $$8302 = 0, $$8313 = 0, $$9 = 0, $$9303 = 0, $$9314 = 0, $$lcssa349 = 0, $$not = 0, $$old4 = 0, $$pre = 0, $$pre$phi493Z2D = 0, $$pre482 = 0, $$pre484 = 0, $$pre486 = 0, $$pre488 = 0;
 var $$pre489 = 0, $$pre490 = 0, $$pre491 = 0, $$pre492 = 0, $$sroa$2$0$$sroa_idx13 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0;
 var $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0;
 var $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0;
 var $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0;
 var $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0;
 var $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0;
 var $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0;
 var $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0;
 var $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0;
 var $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0;
 var $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0;
 var $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0;
 var $312 = 0, $313 = 0.0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0.0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0;
 var $330 = 0, $331 = 0, $332 = 0, $333 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0;
 var $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $arglist_current = 0, $arglist_current2 = 0, $arglist_next = 0, $arglist_next3 = 0;
 var $expanded = 0, $expanded10 = 0, $expanded11 = 0, $expanded13 = 0, $expanded14 = 0, $expanded15 = 0, $expanded4 = 0, $expanded6 = 0, $expanded7 = 0, $expanded8 = 0, $factor = 0, $factor327 = 0, $isdigit = 0, $isdigit316 = 0, $isdigit316406 = 0, $isdigittmp = 0, $isdigittmp315 = 0, $isdigittmp315405 = 0, $not$ = 0, $or$cond = 0;
 var $or$cond3 = 0, $or$cond318 = 0, $or$cond5 = 0, $trunc = 0, $vacopy_currentptr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 304|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(304|0);
 $3 = sp + 16|0;
 $4 = sp + 8|0;
 $5 = sp + 33|0;
 $6 = sp;
 $7 = sp + 32|0;
 $8 = ((($0)) + 76|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ($9|0)>(-1);
 if ($10) {
  $11 = (___lockfile($0)|0);
  $332 = $11;
 } else {
  $332 = 0;
 }
 $12 = HEAP8[$1>>0]|0;
 $13 = ($12<<24>>24)==(0);
 L4: do {
  if ($13) {
   $$3291 = 0;
  } else {
   $14 = ((($0)) + 4|0);
   $15 = ((($0)) + 100|0);
   $16 = ((($0)) + 108|0);
   $17 = ((($0)) + 8|0);
   $18 = ((($5)) + 10|0);
   $19 = ((($5)) + 33|0);
   $$sroa$2$0$$sroa_idx13 = ((($4)) + 4|0);
   $20 = ((($5)) + 46|0);
   $21 = ((($5)) + 94|0);
   $22 = ((($5)) + 1|0);
   $23 = ((($5)) + 1|0);
   $$0273420 = $1;$$0283419 = 0;$$0288416 = 0;$$0294415 = 0;$$0305414 = 0;$25 = $12;
   L6: while(1) {
    $24 = $25&255;
    $26 = (_isspace($24)|0);
    $27 = ($26|0)==(0);
    L8: do {
     if ($27) {
      $54 = ($25<<24>>24)==(37);
      L10: do {
       if ($54) {
        $55 = ((($$0273420)) + 1|0);
        $56 = HEAP8[$55>>0]|0;
        L12: do {
         switch ($56<<24>>24) {
         case 37:  {
          break L10;
          break;
         }
         case 42:  {
          $77 = ((($$0273420)) + 2|0);
          $$0293 = 0;$$2275 = $77;
          break;
         }
         default: {
          $78 = $56&255;
          $isdigittmp = (($78) + -48)|0;
          $isdigit = ($isdigittmp>>>0)<(10);
          if ($isdigit) {
           $79 = ((($$0273420)) + 2|0);
           $80 = HEAP8[$79>>0]|0;
           $81 = ($80<<24>>24)==(36);
           if ($81) {
            $vacopy_currentptr = HEAP32[$2>>2]|0;
            HEAP32[$3>>2] = $vacopy_currentptr;
            $$0$i = $isdigittmp;
            while(1) {
             $82 = ($$0$i>>>0)>(1);
             $arglist_current = HEAP32[$3>>2]|0;
             $83 = $arglist_current;
             $84 = ((0) + 4|0);
             $expanded4 = $84;
             $expanded = (($expanded4) - 1)|0;
             $85 = (($83) + ($expanded))|0;
             $86 = ((0) + 4|0);
             $expanded8 = $86;
             $expanded7 = (($expanded8) - 1)|0;
             $expanded6 = $expanded7 ^ -1;
             $87 = $85 & $expanded6;
             $88 = $87;
             $89 = HEAP32[$88>>2]|0;
             $arglist_next = ((($88)) + 4|0);
             HEAP32[$3>>2] = $arglist_next;
             $90 = (($$0$i) + -1)|0;
             if ($82) {
              $$0$i = $90;
             } else {
              break;
             }
            }
            $91 = ((($$0273420)) + 3|0);
            $$0293 = $89;$$2275 = $91;
            break L12;
           }
          }
          $arglist_current2 = HEAP32[$2>>2]|0;
          $92 = $arglist_current2;
          $93 = ((0) + 4|0);
          $expanded11 = $93;
          $expanded10 = (($expanded11) - 1)|0;
          $94 = (($92) + ($expanded10))|0;
          $95 = ((0) + 4|0);
          $expanded15 = $95;
          $expanded14 = (($expanded15) - 1)|0;
          $expanded13 = $expanded14 ^ -1;
          $96 = $94 & $expanded13;
          $97 = $96;
          $98 = HEAP32[$97>>2]|0;
          $arglist_next3 = ((($97)) + 4|0);
          HEAP32[$2>>2] = $arglist_next3;
          $$0293 = $98;$$2275 = $55;
         }
         }
        } while(0);
        $99 = HEAP8[$$2275>>0]|0;
        $100 = $99&255;
        $isdigittmp315405 = (($100) + -48)|0;
        $isdigit316406 = ($isdigittmp315405>>>0)<(10);
        if ($isdigit316406) {
         $$0266408 = 0;$$3407 = $$2275;$104 = $100;
         while(1) {
          $101 = ($$0266408*10)|0;
          $102 = (($101) + -48)|0;
          $103 = (($102) + ($104))|0;
          $105 = ((($$3407)) + 1|0);
          $106 = HEAP8[$105>>0]|0;
          $107 = $106&255;
          $isdigittmp315 = (($107) + -48)|0;
          $isdigit316 = ($isdigittmp315>>>0)<(10);
          if ($isdigit316) {
           $$0266408 = $103;$$3407 = $105;$104 = $107;
          } else {
           $$0266$lcssa = $103;$$3$lcssa = $105;$$lcssa349 = $106;
           break;
          }
         }
        } else {
         $$0266$lcssa = 0;$$3$lcssa = $$2275;$$lcssa349 = $99;
        }
        $108 = ($$lcssa349<<24>>24)==(109);
        if ($108) {
         $109 = ($$0293|0)!=(0|0);
         $110 = $109&1;
         $111 = ((($$3$lcssa)) + 1|0);
         $$pre482 = HEAP8[$111>>0]|0;
         $$0270 = $110;$$1295 = 0;$$1306 = 0;$$4 = $111;$113 = $$pre482;
        } else {
         $$0270 = 0;$$1295 = $$0294415;$$1306 = $$0305414;$$4 = $$3$lcssa;$113 = $$lcssa349;
        }
        $112 = ((($$4)) + 1|0);
        switch ($113<<24>>24) {
        case 104:  {
         $114 = HEAP8[$112>>0]|0;
         $115 = ($114<<24>>24)==(104);
         $116 = ((($$4)) + 2|0);
         $$319 = $115 ? $116 : $112;
         $$320 = $115 ? -2 : -1;
         $$0268 = $$320;$$5 = $$319;
         break;
        }
        case 108:  {
         $117 = HEAP8[$112>>0]|0;
         $118 = ($117<<24>>24)==(108);
         $119 = ((($$4)) + 2|0);
         $$321 = $118 ? $119 : $112;
         $$322 = $118 ? 3 : 1;
         $$0268 = $$322;$$5 = $$321;
         break;
        }
        case 106:  {
         $$0268 = 3;$$5 = $112;
         break;
        }
        case 116: case 122:  {
         $$0268 = 1;$$5 = $112;
         break;
        }
        case 76:  {
         $$0268 = 2;$$5 = $112;
         break;
        }
        case 110: case 112: case 67: case 83: case 91: case 99: case 115: case 88: case 71: case 70: case 69: case 65: case 103: case 102: case 101: case 97: case 120: case 117: case 111: case 105: case 100:  {
         $$0268 = 0;$$5 = $$4;
         break;
        }
        default: {
         $$7312 = $$1306;$$8302 = $$1295;
         label = 154;
         break L6;
        }
        }
        $120 = HEAP8[$$5>>0]|0;
        $121 = $120&255;
        $122 = $121 & 47;
        $123 = ($122|0)==(3);
        $124 = $121 | 32;
        $$ = $123 ? $124 : $121;
        $$$0268 = $123 ? 1 : $$0268;
        $trunc = $$&255;
        switch ($trunc<<24>>24) {
        case 99:  {
         $125 = ($$0266$lcssa|0)<(1);
         $$$0266 = $125 ? 1 : $$0266$lcssa;
         $$1267 = $$$0266;$$1284 = $$0283419;
         break;
        }
        case 91:  {
         $$1267 = $$0266$lcssa;$$1284 = $$0283419;
         break;
        }
        case 110:  {
         $126 = ($$0283419|0)<(0);
         $127 = $126 << 31 >> 31;
         $128 = ($$0293|0)==(0|0);
         if ($128) {
          $$11 = $$5;$$1289 = $$0288416;$$2285 = $$0283419;$$6311 = $$1306;$$7301 = $$1295;
          break L8;
         }
         switch ($$$0268|0) {
         case -2:  {
          $129 = $$0283419&255;
          HEAP8[$$0293>>0] = $129;
          $$11 = $$5;$$1289 = $$0288416;$$2285 = $$0283419;$$6311 = $$1306;$$7301 = $$1295;
          break L8;
          break;
         }
         case -1:  {
          $130 = $$0283419&65535;
          HEAP16[$$0293>>1] = $130;
          $$11 = $$5;$$1289 = $$0288416;$$2285 = $$0283419;$$6311 = $$1306;$$7301 = $$1295;
          break L8;
          break;
         }
         case 0:  {
          HEAP32[$$0293>>2] = $$0283419;
          $$11 = $$5;$$1289 = $$0288416;$$2285 = $$0283419;$$6311 = $$1306;$$7301 = $$1295;
          break L8;
          break;
         }
         case 1:  {
          HEAP32[$$0293>>2] = $$0283419;
          $$11 = $$5;$$1289 = $$0288416;$$2285 = $$0283419;$$6311 = $$1306;$$7301 = $$1295;
          break L8;
          break;
         }
         case 3:  {
          $131 = $$0293;
          $132 = $131;
          HEAP32[$132>>2] = $$0283419;
          $133 = (($131) + 4)|0;
          $134 = $133;
          HEAP32[$134>>2] = $127;
          $$11 = $$5;$$1289 = $$0288416;$$2285 = $$0283419;$$6311 = $$1306;$$7301 = $$1295;
          break L8;
          break;
         }
         default: {
          $$11 = $$5;$$1289 = $$0288416;$$2285 = $$0283419;$$6311 = $$1306;$$7301 = $$1295;
          break L8;
         }
         }
         break;
        }
        default: {
         ___shlim($0,0);
         while(1) {
          $135 = HEAP32[$14>>2]|0;
          $136 = HEAP32[$15>>2]|0;
          $137 = ($135>>>0)<($136>>>0);
          if ($137) {
           $138 = ((($135)) + 1|0);
           HEAP32[$14>>2] = $138;
           $139 = HEAP8[$135>>0]|0;
           $140 = $139&255;
           $142 = $140;
          } else {
           $141 = (___shgetc($0)|0);
           $142 = $141;
          }
          $143 = (_isspace($142)|0);
          $144 = ($143|0)==(0);
          if ($144) {
           break;
          }
         }
         $145 = HEAP32[$15>>2]|0;
         $146 = ($145|0)==(0|0);
         if ($146) {
          $$pre484 = HEAP32[$14>>2]|0;
          $154 = $$pre484;
         } else {
          $147 = HEAP32[$14>>2]|0;
          $148 = ((($147)) + -1|0);
          HEAP32[$14>>2] = $148;
          $149 = $148;
          $154 = $149;
         }
         $150 = HEAP32[$16>>2]|0;
         $151 = HEAP32[$17>>2]|0;
         $152 = (($150) + ($$0283419))|0;
         $153 = (($152) + ($154))|0;
         $155 = (($153) - ($151))|0;
         $$1267 = $$0266$lcssa;$$1284 = $155;
        }
        }
        ___shlim($0,$$1267);
        $156 = HEAP32[$14>>2]|0;
        $157 = HEAP32[$15>>2]|0;
        $158 = ($156>>>0)<($157>>>0);
        if ($158) {
         $159 = ((($156)) + 1|0);
         HEAP32[$14>>2] = $159;
         $162 = $157;
        } else {
         $160 = (___shgetc($0)|0);
         $161 = ($160|0)<(0);
         if ($161) {
          $$7312 = $$1306;$$8302 = $$1295;
          label = 154;
          break L6;
         }
         $$pre486 = HEAP32[$15>>2]|0;
         $162 = $$pre486;
        }
        $163 = ($162|0)==(0|0);
        if (!($163)) {
         $164 = HEAP32[$14>>2]|0;
         $165 = ((($164)) + -1|0);
         HEAP32[$14>>2] = $165;
        }
        L68: do {
         switch ($trunc<<24>>24) {
         case 91: case 99: case 115:  {
          $166 = ($$|0)==(99);
          $167 = $$ | 16;
          $168 = ($167|0)==(115);
          L70: do {
           if ($168) {
            $169 = ($$|0)==(115);
            _memset(($22|0),-1,256)|0;
            HEAP8[$5>>0] = 0;
            if ($169) {
             HEAP8[$19>>0] = 0;
             ;HEAP8[$18>>0]=0|0;HEAP8[$18+1>>0]=0|0;HEAP8[$18+2>>0]=0|0;HEAP8[$18+3>>0]=0|0;HEAP8[$18+4>>0]=0|0;
             $$9 = $$5;
            } else {
             $$9 = $$5;
            }
           } else {
            $170 = ((($$5)) + 1|0);
            $171 = HEAP8[$170>>0]|0;
            $172 = ($171<<24>>24)==(94);
            $173 = ((($$5)) + 2|0);
            $$0292 = $172&1;
            $$6 = $172 ? $173 : $170;
            $174 = $172&1;
            _memset(($23|0),($174|0),256)|0;
            HEAP8[$5>>0] = 0;
            $175 = HEAP8[$$6>>0]|0;
            switch ($175<<24>>24) {
            case 45:  {
             $176 = ((($$6)) + 1|0);
             $177 = $$0292 ^ 1;
             $178 = $177&255;
             HEAP8[$20>>0] = $178;
             $$7$ph = $176;$$pre$phi493Z2D = $178;
             break;
            }
            case 93:  {
             $179 = ((($$6)) + 1|0);
             $180 = $$0292 ^ 1;
             $181 = $180&255;
             HEAP8[$21>>0] = $181;
             $$7$ph = $179;$$pre$phi493Z2D = $181;
             break;
            }
            default: {
             $$pre491 = $$0292 ^ 1;
             $$pre492 = $$pre491&255;
             $$7$ph = $$6;$$pre$phi493Z2D = $$pre492;
            }
            }
            $$7 = $$7$ph;
            while(1) {
             $182 = HEAP8[$$7>>0]|0;
             L81: do {
              switch ($182<<24>>24) {
              case 0:  {
               $$7312 = $$1306;$$8302 = $$1295;
               label = 154;
               break L6;
               break;
              }
              case 93:  {
               $$9 = $$7;
               break L70;
               break;
              }
              case 45:  {
               $183 = ((($$7)) + 1|0);
               $184 = HEAP8[$183>>0]|0;
               switch ($184<<24>>24) {
               case 93: case 0:  {
                $$8 = $$7;$195 = 45;
                break L81;
                break;
               }
               default: {
               }
               }
               $185 = ((($$7)) + -1|0);
               $186 = HEAP8[$185>>0]|0;
               $187 = ($186&255)<($184&255);
               if ($187) {
                $188 = $186&255;
                $$0286411 = $188;
                while(1) {
                 $189 = (($$0286411) + 1)|0;
                 $190 = (($5) + ($189)|0);
                 HEAP8[$190>>0] = $$pre$phi493Z2D;
                 $191 = HEAP8[$183>>0]|0;
                 $192 = $191&255;
                 $193 = ($189|0)<($192|0);
                 if ($193) {
                  $$0286411 = $189;
                 } else {
                  $$8 = $183;$195 = $191;
                  break;
                 }
                }
               } else {
                $$8 = $183;$195 = $184;
               }
               break;
              }
              default: {
               $$8 = $$7;$195 = $182;
              }
              }
             } while(0);
             $194 = $195&255;
             $196 = (($194) + 1)|0;
             $197 = (($5) + ($196)|0);
             HEAP8[$197>>0] = $$pre$phi493Z2D;
             $198 = ((($$8)) + 1|0);
             $$7 = $198;
            }
           }
          } while(0);
          $199 = (($$1267) + 1)|0;
          $200 = $166 ? $199 : 31;
          $201 = ($$$0268|0)==(1);
          $202 = ($$0270|0)!=(0);
          L89: do {
           if ($201) {
            if ($202) {
             $203 = $200 << 2;
             $204 = (_malloc($203)|0);
             $205 = ($204|0)==(0|0);
             if ($205) {
              $$7312 = 0;$$8302 = $204;
              label = 154;
              break L6;
             } else {
              $$2296 = $204;
             }
            } else {
             $$2296 = $$0293;
            }
            HEAP32[$4>>2] = 0;
            HEAP32[$$sroa$2$0$$sroa_idx13>>2] = 0;
            $$0276$ph = $200;$$0278$ph = 0;$$3297$ph = $$2296;
            L95: while(1) {
             $206 = ($$3297$ph|0)==(0|0);
             $$0278$ph331 = $$0278$ph;
             while(1) {
              L99: while(1) {
               $207 = HEAP32[$14>>2]|0;
               $208 = HEAP32[$15>>2]|0;
               $209 = ($207>>>0)<($208>>>0);
               if ($209) {
                $210 = ((($207)) + 1|0);
                HEAP32[$14>>2] = $210;
                $211 = HEAP8[$207>>0]|0;
                $212 = $211&255;
                $215 = $212;
               } else {
                $213 = (___shgetc($0)|0);
                $215 = $213;
               }
               $214 = (($215) + 1)|0;
               $216 = (($5) + ($214)|0);
               $217 = HEAP8[$216>>0]|0;
               $218 = ($217<<24>>24)==(0);
               if ($218) {
                break L95;
               }
               $219 = $215&255;
               HEAP8[$7>>0] = $219;
               $220 = (_mbrtowc($6,$7,1,$4)|0);
               switch ($220|0) {
               case -1:  {
                $$7312 = 0;$$8302 = $$3297$ph;
                label = 154;
                break L6;
                break;
               }
               case -2:  {
                break;
               }
               default: {
                break L99;
               }
               }
              }
              if ($206) {
               $$1279 = $$0278$ph331;
              } else {
               $221 = (($$3297$ph) + ($$0278$ph331<<2)|0);
               $222 = (($$0278$ph331) + 1)|0;
               $223 = HEAP32[$6>>2]|0;
               HEAP32[$221>>2] = $223;
               $$1279 = $222;
              }
              $224 = ($$1279|0)==($$0276$ph|0);
              $or$cond = $202 & $224;
              if ($or$cond) {
               break;
              } else {
               $$0278$ph331 = $$1279;
              }
             }
             $factor327 = $$0276$ph << 1;
             $225 = $factor327 | 1;
             $226 = $225 << 2;
             $227 = (_realloc($$3297$ph,$226)|0);
             $228 = ($227|0)==(0|0);
             if ($228) {
              $$7312 = 0;$$8302 = $$3297$ph;
              label = 154;
              break L6;
             } else {
              $$0278$ph$phi = $$0276$ph;$$0276$ph = $225;$$3297$ph = $227;$$0278$ph = $$0278$ph$phi;
             }
            }
            $229 = (_mbsinit($4)|0);
            $230 = ($229|0)==(0);
            if ($230) {
             $$7312 = 0;$$8302 = $$3297$ph;
             label = 154;
             break L6;
            } else {
             $$4282 = $$0278$ph331;$$4309 = 0;$$5299 = $$3297$ph;
            }
           } else {
            if ($202) {
             $231 = (_malloc($200)|0);
             $232 = ($231|0)==(0|0);
             if ($232) {
              $$7312 = 0;$$8302 = 0;
              label = 154;
              break L6;
             } else {
              $$1277$ph = $200;$$2280$ph = 0;$$2307$ph = $231;
             }
             while(1) {
              $$2280 = $$2280$ph;
              while(1) {
               $233 = HEAP32[$14>>2]|0;
               $234 = HEAP32[$15>>2]|0;
               $235 = ($233>>>0)<($234>>>0);
               if ($235) {
                $236 = ((($233)) + 1|0);
                HEAP32[$14>>2] = $236;
                $237 = HEAP8[$233>>0]|0;
                $238 = $237&255;
                $241 = $238;
               } else {
                $239 = (___shgetc($0)|0);
                $241 = $239;
               }
               $240 = (($241) + 1)|0;
               $242 = (($5) + ($240)|0);
               $243 = HEAP8[$242>>0]|0;
               $244 = ($243<<24>>24)==(0);
               if ($244) {
                $$4282 = $$2280;$$4309 = $$2307$ph;$$5299 = 0;
                break L89;
               }
               $245 = $241&255;
               $246 = (($$2280) + 1)|0;
               $247 = (($$2307$ph) + ($$2280)|0);
               HEAP8[$247>>0] = $245;
               $248 = ($246|0)==($$1277$ph|0);
               if ($248) {
                break;
               } else {
                $$2280 = $246;
               }
              }
              $factor = $$1277$ph << 1;
              $249 = $factor | 1;
              $250 = (_realloc($$2307$ph,$249)|0);
              $251 = ($250|0)==(0|0);
              if ($251) {
               $$7312 = $$2307$ph;$$8302 = 0;
               label = 154;
               break L6;
              } else {
               $$2280$ph$phi = $$1277$ph;$$1277$ph = $249;$$2307$ph = $250;$$2280$ph = $$2280$ph$phi;
              }
             }
            }
            $252 = ($$0293|0)==(0|0);
            if ($252) {
             $270 = $162;
             while(1) {
              $268 = HEAP32[$14>>2]|0;
              $269 = ($268>>>0)<($270>>>0);
              if ($269) {
               $271 = ((($268)) + 1|0);
               HEAP32[$14>>2] = $271;
               $272 = HEAP8[$268>>0]|0;
               $273 = $272&255;
               $276 = $273;
              } else {
               $274 = (___shgetc($0)|0);
               $276 = $274;
              }
              $275 = (($276) + 1)|0;
              $277 = (($5) + ($275)|0);
              $278 = HEAP8[$277>>0]|0;
              $279 = ($278<<24>>24)==(0);
              if ($279) {
               $$4282 = 0;$$4309 = 0;$$5299 = 0;
               break L89;
              }
              $$pre489 = HEAP32[$15>>2]|0;
              $270 = $$pre489;
             }
            } else {
             $$3281 = 0;$255 = $162;
             while(1) {
              $253 = HEAP32[$14>>2]|0;
              $254 = ($253>>>0)<($255>>>0);
              if ($254) {
               $256 = ((($253)) + 1|0);
               HEAP32[$14>>2] = $256;
               $257 = HEAP8[$253>>0]|0;
               $258 = $257&255;
               $261 = $258;
              } else {
               $259 = (___shgetc($0)|0);
               $261 = $259;
              }
              $260 = (($261) + 1)|0;
              $262 = (($5) + ($260)|0);
              $263 = HEAP8[$262>>0]|0;
              $264 = ($263<<24>>24)==(0);
              if ($264) {
               $$4282 = $$3281;$$4309 = $$0293;$$5299 = 0;
               break L89;
              }
              $265 = $261&255;
              $266 = (($$3281) + 1)|0;
              $267 = (($$0293) + ($$3281)|0);
              HEAP8[$267>>0] = $265;
              $$pre488 = HEAP32[$15>>2]|0;
              $$3281 = $266;$255 = $$pre488;
             }
            }
           }
          } while(0);
          $280 = HEAP32[$15>>2]|0;
          $281 = ($280|0)==(0|0);
          if ($281) {
           $$pre490 = HEAP32[$14>>2]|0;
           $288 = $$pre490;
          } else {
           $282 = HEAP32[$14>>2]|0;
           $283 = ((($282)) + -1|0);
           HEAP32[$14>>2] = $283;
           $284 = $283;
           $288 = $284;
          }
          $285 = HEAP32[$16>>2]|0;
          $286 = HEAP32[$17>>2]|0;
          $287 = (($288) - ($286))|0;
          $289 = (($287) + ($285))|0;
          $290 = ($289|0)==(0);
          if ($290) {
           $$10304 = $$5299;$$2 = $$0270;$$2290 = $$0288416;$$9314 = $$4309;
           break L6;
          }
          $$not = $166 ^ 1;
          $291 = ($289|0)==($$1267|0);
          $or$cond318 = $291 | $$not;
          if (!($or$cond318)) {
           $$10304 = $$5299;$$2 = $$0270;$$2290 = $$0288416;$$9314 = $$4309;
           break L6;
          }
          do {
           if ($202) {
            if ($201) {
             HEAP32[$$0293>>2] = $$5299;
             break;
            } else {
             HEAP32[$$0293>>2] = $$4309;
             break;
            }
           }
          } while(0);
          if ($166) {
           $$10 = $$9;$$5310 = $$4309;$$6300 = $$5299;
          } else {
           $292 = ($$5299|0)==(0|0);
           if (!($292)) {
            $293 = (($$5299) + ($$4282<<2)|0);
            HEAP32[$293>>2] = 0;
           }
           $294 = ($$4309|0)==(0|0);
           if ($294) {
            $$10 = $$9;$$5310 = 0;$$6300 = $$5299;
            break L68;
           }
           $295 = (($$4309) + ($$4282)|0);
           HEAP8[$295>>0] = 0;
           $$10 = $$9;$$5310 = $$4309;$$6300 = $$5299;
          }
          break;
         }
         case 120: case 88: case 112:  {
          $$0272 = 16;
          label = 136;
          break;
         }
         case 111:  {
          $$0272 = 8;
          label = 136;
          break;
         }
         case 117: case 100:  {
          $$0272 = 10;
          label = 136;
          break;
         }
         case 105:  {
          $$0272 = 0;
          label = 136;
          break;
         }
         case 71: case 103: case 70: case 102: case 69: case 101: case 65: case 97:  {
          $313 = (+___floatscan($0,$$$0268,0));
          $314 = HEAP32[$16>>2]|0;
          $315 = HEAP32[$14>>2]|0;
          $316 = HEAP32[$17>>2]|0;
          $317 = (($316) - ($315))|0;
          $318 = ($314|0)==($317|0);
          if ($318) {
           $$10304 = $$1295;$$2 = $$0270;$$2290 = $$0288416;$$9314 = $$1306;
           break L6;
          }
          $319 = ($$0293|0)==(0|0);
          if ($319) {
           $$10 = $$5;$$5310 = $$1306;$$6300 = $$1295;
          } else {
           switch ($$$0268|0) {
           case 0:  {
            $320 = $313;
            HEAPF32[$$0293>>2] = $320;
            $$10 = $$5;$$5310 = $$1306;$$6300 = $$1295;
            break L68;
            break;
           }
           case 1:  {
            HEAPF64[$$0293>>3] = $313;
            $$10 = $$5;$$5310 = $$1306;$$6300 = $$1295;
            break L68;
            break;
           }
           case 2:  {
            HEAPF64[$$0293>>3] = $313;
            $$10 = $$5;$$5310 = $$1306;$$6300 = $$1295;
            break L68;
            break;
           }
           default: {
            $$10 = $$5;$$5310 = $$1306;$$6300 = $$1295;
            break L68;
           }
           }
          }
          break;
         }
         default: {
          $$10 = $$5;$$5310 = $$1306;$$6300 = $$1295;
         }
         }
        } while(0);
        L169: do {
         if ((label|0) == 136) {
          label = 0;
          $296 = (___intscan($0,$$0272,0,-1,-1)|0);
          $297 = tempRet0;
          $298 = HEAP32[$16>>2]|0;
          $299 = HEAP32[$14>>2]|0;
          $300 = HEAP32[$17>>2]|0;
          $301 = (($300) - ($299))|0;
          $302 = ($298|0)==($301|0);
          if ($302) {
           $$10304 = $$1295;$$2 = $$0270;$$2290 = $$0288416;$$9314 = $$1306;
           break L6;
          }
          $303 = ($$|0)==(112);
          $304 = ($$0293|0)!=(0|0);
          $or$cond3 = $304 & $303;
          if ($or$cond3) {
           $305 = $296;
           HEAP32[$$0293>>2] = $305;
           $$10 = $$5;$$5310 = $$1306;$$6300 = $$1295;
           break;
          }
          $306 = ($$0293|0)==(0|0);
          if ($306) {
           $$10 = $$5;$$5310 = $$1306;$$6300 = $$1295;
          } else {
           switch ($$$0268|0) {
           case -2:  {
            $307 = $296&255;
            HEAP8[$$0293>>0] = $307;
            $$10 = $$5;$$5310 = $$1306;$$6300 = $$1295;
            break L169;
            break;
           }
           case -1:  {
            $308 = $296&65535;
            HEAP16[$$0293>>1] = $308;
            $$10 = $$5;$$5310 = $$1306;$$6300 = $$1295;
            break L169;
            break;
           }
           case 0:  {
            HEAP32[$$0293>>2] = $296;
            $$10 = $$5;$$5310 = $$1306;$$6300 = $$1295;
            break L169;
            break;
           }
           case 1:  {
            HEAP32[$$0293>>2] = $296;
            $$10 = $$5;$$5310 = $$1306;$$6300 = $$1295;
            break L169;
            break;
           }
           case 3:  {
            $309 = $$0293;
            $310 = $309;
            HEAP32[$310>>2] = $296;
            $311 = (($309) + 4)|0;
            $312 = $311;
            HEAP32[$312>>2] = $297;
            $$10 = $$5;$$5310 = $$1306;$$6300 = $$1295;
            break L169;
            break;
           }
           default: {
            $$10 = $$5;$$5310 = $$1306;$$6300 = $$1295;
            break L169;
           }
           }
          }
         }
        } while(0);
        $321 = HEAP32[$16>>2]|0;
        $322 = HEAP32[$14>>2]|0;
        $323 = HEAP32[$17>>2]|0;
        $324 = (($321) + ($$1284))|0;
        $325 = (($324) + ($322))|0;
        $326 = (($325) - ($323))|0;
        $not$ = ($$0293|0)!=(0|0);
        $327 = $not$&1;
        $$0288$ = (($327) + ($$0288416))|0;
        $$11 = $$10;$$1289 = $$0288$;$$2285 = $326;$$6311 = $$5310;$$7301 = $$6300;
        break L8;
       }
      } while(0);
      $57 = $54&1;
      $58 = (($$0273420) + ($57)|0);
      ___shlim($0,0);
      $59 = HEAP32[$14>>2]|0;
      $60 = HEAP32[$15>>2]|0;
      $61 = ($59>>>0)<($60>>>0);
      if ($61) {
       $62 = ((($59)) + 1|0);
       HEAP32[$14>>2] = $62;
       $63 = HEAP8[$59>>0]|0;
       $64 = $63&255;
       $68 = $64;
      } else {
       $65 = (___shgetc($0)|0);
       $68 = $65;
      }
      $66 = HEAP8[$58>>0]|0;
      $67 = $66&255;
      $69 = ($68|0)==($67|0);
      if (!($69)) {
       label = 22;
       break L6;
      }
      $76 = (($$0283419) + 1)|0;
      $$11 = $58;$$1289 = $$0288416;$$2285 = $76;$$6311 = $$0305414;$$7301 = $$0294415;
     } else {
      $$1274 = $$0273420;
      while(1) {
       $28 = ((($$1274)) + 1|0);
       $29 = HEAP8[$28>>0]|0;
       $30 = $29&255;
       $31 = (_isspace($30)|0);
       $32 = ($31|0)==(0);
       if ($32) {
        break;
       } else {
        $$1274 = $28;
       }
      }
      ___shlim($0,0);
      while(1) {
       $33 = HEAP32[$14>>2]|0;
       $34 = HEAP32[$15>>2]|0;
       $35 = ($33>>>0)<($34>>>0);
       if ($35) {
        $36 = ((($33)) + 1|0);
        HEAP32[$14>>2] = $36;
        $37 = HEAP8[$33>>0]|0;
        $38 = $37&255;
        $40 = $38;
       } else {
        $39 = (___shgetc($0)|0);
        $40 = $39;
       }
       $41 = (_isspace($40)|0);
       $42 = ($41|0)==(0);
       if ($42) {
        break;
       }
      }
      $43 = HEAP32[$15>>2]|0;
      $44 = ($43|0)==(0|0);
      if ($44) {
       $$pre = HEAP32[$14>>2]|0;
       $52 = $$pre;
      } else {
       $45 = HEAP32[$14>>2]|0;
       $46 = ((($45)) + -1|0);
       HEAP32[$14>>2] = $46;
       $47 = $46;
       $52 = $47;
      }
      $48 = HEAP32[$16>>2]|0;
      $49 = HEAP32[$17>>2]|0;
      $50 = (($48) + ($$0283419))|0;
      $51 = (($50) + ($52))|0;
      $53 = (($51) - ($49))|0;
      $$11 = $$1274;$$1289 = $$0288416;$$2285 = $53;$$6311 = $$0305414;$$7301 = $$0294415;
     }
    } while(0);
    $328 = ((($$11)) + 1|0);
    $329 = HEAP8[$328>>0]|0;
    $330 = ($329<<24>>24)==(0);
    if ($330) {
     $$3291 = $$1289;
     break L4;
    } else {
     $$0273420 = $328;$$0283419 = $$2285;$$0288416 = $$1289;$$0294415 = $$7301;$$0305414 = $$6311;$25 = $329;
    }
   }
   if ((label|0) == 22) {
    $70 = HEAP32[$15>>2]|0;
    $71 = ($70|0)==(0|0);
    if (!($71)) {
     $72 = HEAP32[$14>>2]|0;
     $73 = ((($72)) + -1|0);
     HEAP32[$14>>2] = $73;
    }
    $74 = ($68|0)>(-1);
    $75 = ($$0288416|0)!=(0);
    $or$cond5 = $75 | $74;
    if ($or$cond5) {
     $$3291 = $$0288416;
     break;
    } else {
     $$1271 = 0;$$8313 = $$0305414;$$9303 = $$0294415;
     label = 155;
    }
   }
   else if ((label|0) == 154) {
    $$old4 = ($$0288416|0)==(0);
    if ($$old4) {
     $$1271 = $$0270;$$8313 = $$7312;$$9303 = $$8302;
     label = 155;
    } else {
     $$10304 = $$8302;$$2 = $$0270;$$2290 = $$0288416;$$9314 = $$7312;
    }
   }
   if ((label|0) == 155) {
    $$10304 = $$9303;$$2 = $$1271;$$2290 = -1;$$9314 = $$8313;
   }
   $331 = ($$2|0)==(0);
   if ($331) {
    $$3291 = $$2290;
   } else {
    _free($$9314);
    _free($$10304);
    $$3291 = $$2290;
   }
  }
 } while(0);
 $333 = ($332|0)==(0);
 if (!($333)) {
  ___unlockfile($0);
 }
 STACKTOP = sp;return ($$3291|0);
}
function _mbsinit($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($0|0)==(0|0);
 if ($1) {
  $5 = 1;
 } else {
  $2 = HEAP32[$0>>2]|0;
  $3 = ($2|0)==(0);
  $5 = $3;
 }
 $4 = $5&1;
 return ($4|0);
}
function ___floatscan($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$$0340$i = 0, $$$0345$i = 0, $$$0380$i = 0, $$$0396$i = 0, $$$5350$i = 0, $$$5385$i = 0, $$$i = 0, $$0 = 0, $$0$i = 0, $$0105$ph = 0, $$0106$ph = 0, $$0107$lcssa = 0, $$0107163 = 0, $$0113 = 0, $$0114 = 0.0, $$0133$i = 0, $$0142$i = 0, $$0146$i = 0, $$0148$i = 0, $$0151$i = 0.0;
 var $$0152$i = 0.0, $$0155$i = 0.0, $$0159$i = 0, $$0166$i = 0, $$0166169$i = 0, $$0166170$i = 0, $$0324$i = 0, $$0327480$i = 0, $$0328$i = 0, $$0329$i = 0, $$0331476$i = 0, $$0335486$i = 0, $$0336$lcssa$i = 0, $$0336453$i = 0, $$0336454$i = 0, $$0336455$i = 0, $$0336503$i = 0, $$0340$lcssa$i = 0, $$0340457$i = 0, $$0340458$i = 0;
 var $$0340459$i = 0, $$0340502$i = 0, $$0345$lcssa545$i = 0, $$0345484$i = 0, $$0355$i = 0.0, $$0356$i = 0.0, $$0360474$i = 0.0, $$0364$i = 0, $$0367$i = 0, $$0375$i = 0, $$0375$ph$i = 0, $$0380$lcssa544$i = 0, $$0380483$i = 0, $$0388$i = 0, $$0391$i = 0, $$0396$lcssa$i = 0, $$0396463$i = 0, $$0396464$i = 0, $$0396465$i = 0, $$0396499$i = 0;
 var $$1$i = 0.0, $$1$lcssa = 0, $$1$ph$i = 0, $$10$i = 0, $$1108 = 0, $$1147$i = 0, $$1149$i = 0, $$1153$i = 0.0, $$1156$i = 0.0, $$1160$i = 0, $$1164 = 0, $$1325$be$i = 0, $$1325$ph$i = 0, $$1330$i = 0, $$1332$i = 0, $$1357$i = 0.0, $$1361$i = 0.0, $$1365$i = 0, $$1368$i = 0, $$1368$ph438$i = 0;
 var $$1376$i = 0, $$1376$ph$i = 0, $$1376$ph549$i = 0, $$1389$lcssa$i = 0, $$1389501$i = 0, $$2 = 0, $$2$i = 0, $$2$i117 = 0, $$2$lcssa$i = 0, $$2109161 = 0, $$2144$i = 0, $$2150$i = 0, $$2154$i = 0.0, $$2157$i = 0.0, $$2161$i = 0, $$2338$i = 0, $$2342$i = 0, $$2347$ph439$i = 0, $$2362$i = 0.0, $$2366$i = 0;
 var $$2369$i = 0, $$2382$ph437$i = 0, $$2390$i = 0, $$2393$i = 0, $$2398$i = 0, $$3$be$i = 0, $$3$lcssa$i = 0, $$3110 = 0, $$3145$i = 0, $$3158$lcssa$i = 0.0, $$3158179$i = 0.0, $$3162 = 0, $$3162$lcssa$i = 0, $$3162183$i = 0, $$3339493$i = 0, $$3343$i = 0, $$3359$i = 0.0, $$3363$i = 0.0, $$3370$i = 0, $$3378$i = 0;
 var $$3394$lcssa$i = 0, $$3394500$i = 0, $$3504$i = 0, $$4 = 0, $$4$i = 0.0, $$408$i = 0, $$4111 = 0, $$416$i = 0, $$4163$lcssa$i = 0, $$4163178$i = 0, $$4344485$i = 0, $$4349$i = 0, $$4349$ph$i = 0, $$4349$ph550$i = 0, $$4371$i = 0, $$4379$i = 0, $$4384$ph$i = 0, $$4384$ph435$i = 0, $$4395$i = 0, $$4475$i = 0;
 var $$5 = 0, $$5$$2369$i = 0, $$5$i = 0.0, $$5$i121 = 0, $$5$in$i = 0, $$5164$i = 0, $$5350478$i = 0, $$5385477$i = 0, $$6 = 0, $$6$i = 0, $$6373$ph$i = 0, $$6479$i = 0, $$9473$i = 0, $$in = 0, $$neg432$i = 0, $$neg433$i = 0, $$old8 = 0, $$pn$i = 0.0, $$pre$i = 0, $$pre$i119 = 0;
 var $$pre$phi202$iZ2D = 0.0, $$pre201$i = 0.0, $$promoted$i = 0, $$sink$off0$i = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0;
 var $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0;
 var $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0;
 var $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0;
 var $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0.0;
 var $187 = 0.0, $188 = 0.0, $189 = 0.0, $19 = 0, $190 = 0, $191 = 0, $192 = 0.0, $193 = 0.0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0;
 var $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0.0, $214 = 0.0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0;
 var $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0;
 var $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0;
 var $26 = 0, $260 = 0.0, $261 = 0.0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0.0, $27 = 0, $270 = 0.0, $271 = 0.0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0;
 var $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0.0, $283 = 0.0, $284 = 0.0, $285 = 0, $286 = 0, $287 = 0.0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0;
 var $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0.0;
 var $313 = 0.0, $314 = 0.0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0.0, $321 = 0.0, $322 = 0.0, $323 = 0.0, $324 = 0.0, $325 = 0.0, $326 = 0, $327 = 0, $328 = 0.0, $329 = 0, $33 = 0, $330 = 0;
 var $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0;
 var $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0;
 var $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0;
 var $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0;
 var $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0;
 var $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0.0, $428 = 0.0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0;
 var $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0.0, $445 = 0.0, $446 = 0.0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0.0, $457 = 0.0;
 var $458 = 0.0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0.0, $469 = 0.0, $47 = 0, $470 = 0.0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0;
 var $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0.0, $483 = 0, $484 = 0.0, $485 = 0.0, $486 = 0, $487 = 0.0, $488 = 0, $489 = 0.0, $49 = 0, $490 = 0.0, $491 = 0, $492 = 0, $493 = 0;
 var $494 = 0.0, $495 = 0.0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0.0, $501 = 0.0, $502 = 0.0, $503 = 0, $504 = 0, $505 = 0, $506 = 0.0, $507 = 0.0, $508 = 0, $509 = 0, $51 = 0, $510 = 0;
 var $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0;
 var $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0.0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0;
 var $548 = 0, $549 = 0, $55 = 0.0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0.0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0;
 var $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0;
 var $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0;
 var $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0;
 var $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0.0, $63 = 0, $630 = 0, $631 = 0, $632 = 0.0, $633 = 0.0, $634 = 0, $635 = 0.0, $636 = 0.0, $637 = 0;
 var $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0.0, $644 = 0.0, $645 = 0, $646 = 0.0, $647 = 0.0, $648 = 0.0, $649 = 0.0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0;
 var $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0.0, $661 = 0.0, $662 = 0, $663 = 0.0, $664 = 0.0, $665 = 0, $666 = 0, $667 = 0, $668 = 0.0, $669 = 0.0, $67 = 0, $670 = 0.0, $671 = 0.0, $672 = 0, $673 = 0;
 var $674 = 0.0, $675 = 0, $676 = 0.0, $677 = 0.0, $678 = 0.0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0.0, $683 = 0, $684 = 0, $685 = 0, $686 = 0.0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0;
 var $692 = 0.0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0;
 var $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0;
 var $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $cond$i = 0, $exitcond$i = 0;
 var $exitcond541$i = 0, $or$cond = 0, $or$cond$i = 0, $or$cond$i118 = 0, $or$cond168$i = 0, $or$cond3$i = 0, $or$cond4$i = 0, $or$cond410$i = 0, $or$cond412$i = 0, $or$cond413$i = 0, $or$cond414$i = 0, $or$cond417$i = 0, $or$cond418$i = 0, $or$cond5 = 0, $or$cond571$i = 0, $or$cond6$i = 0, $or$cond6$i122 = 0, $or$cond7 = 0, $or$cond9 = 0, $or$cond9$i = 0;
 var $storemerge$i = 0, $sum$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 512|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(512|0);
 $3 = sp;
 switch ($1|0) {
 case 0:  {
  $$0105$ph = -149;$$0106$ph = 24;
  label = 4;
  break;
 }
 case 1:  {
  $$0105$ph = -1074;$$0106$ph = 53;
  label = 4;
  break;
 }
 case 2:  {
  $$0105$ph = -1074;$$0106$ph = 53;
  label = 4;
  break;
 }
 default: {
  $$0114 = 0.0;
 }
 }
 L4: do {
  if ((label|0) == 4) {
   $4 = ((($0)) + 4|0);
   $5 = ((($0)) + 100|0);
   while(1) {
    $6 = HEAP32[$4>>2]|0;
    $7 = HEAP32[$5>>2]|0;
    $8 = ($6>>>0)<($7>>>0);
    if ($8) {
     $9 = ((($6)) + 1|0);
     HEAP32[$4>>2] = $9;
     $10 = HEAP8[$6>>0]|0;
     $11 = $10&255;
     $13 = $11;
    } else {
     $12 = (___shgetc($0)|0);
     $13 = $12;
    }
    $14 = (_isspace($13)|0);
    $15 = ($14|0)==(0);
    if ($15) {
     break;
    }
   }
   $16 = ($13|0)==(45);
   L13: do {
    switch ($13|0) {
    case 43: case 45:  {
     $17 = $16&1;
     $18 = $17 << 1;
     $19 = (1 - ($18))|0;
     $20 = HEAP32[$4>>2]|0;
     $21 = HEAP32[$5>>2]|0;
     $22 = ($20>>>0)<($21>>>0);
     if ($22) {
      $23 = ((($20)) + 1|0);
      HEAP32[$4>>2] = $23;
      $24 = HEAP8[$20>>0]|0;
      $25 = $24&255;
      $$0 = $25;$$0113 = $19;
      break L13;
     } else {
      $26 = (___shgetc($0)|0);
      $$0 = $26;$$0113 = $19;
      break L13;
     }
     break;
    }
    default: {
     $$0 = $13;$$0113 = 1;
    }
    }
   } while(0);
   $$0107163 = 0;$$1164 = $$0;
   while(1) {
    $27 = $$1164 | 32;
    $28 = (36798 + ($$0107163)|0);
    $29 = HEAP8[$28>>0]|0;
    $30 = $29 << 24 >> 24;
    $31 = ($27|0)==($30|0);
    if (!($31)) {
     $$0107$lcssa = $$0107163;$$1$lcssa = $$1164;
     break;
    }
    $32 = ($$0107163>>>0)<(7);
    do {
     if ($32) {
      $33 = HEAP32[$4>>2]|0;
      $34 = HEAP32[$5>>2]|0;
      $35 = ($33>>>0)<($34>>>0);
      if ($35) {
       $36 = ((($33)) + 1|0);
       HEAP32[$4>>2] = $36;
       $37 = HEAP8[$33>>0]|0;
       $38 = $37&255;
       $$2 = $38;
       break;
      } else {
       $39 = (___shgetc($0)|0);
       $$2 = $39;
       break;
      }
     } else {
      $$2 = $$1164;
     }
    } while(0);
    $40 = (($$0107163) + 1)|0;
    $41 = ($40>>>0)<(8);
    if ($41) {
     $$0107163 = $40;$$1164 = $$2;
    } else {
     $$0107$lcssa = $40;$$1$lcssa = $$2;
     break;
    }
   }
   L29: do {
    switch ($$0107$lcssa|0) {
    case 8:  {
     break;
    }
    case 3:  {
     label = 23;
     break;
    }
    default: {
     $42 = ($$0107$lcssa>>>0)>(3);
     $43 = ($2|0)!=(0);
     $or$cond5 = $43 & $42;
     if ($or$cond5) {
      $44 = ($$0107$lcssa|0)==(8);
      if ($44) {
       break L29;
      } else {
       label = 23;
       break L29;
      }
     }
     $57 = ($$0107$lcssa|0)==(0);
     L34: do {
      if ($57) {
       $$2109161 = 0;$$3162 = $$1$lcssa;
       while(1) {
        $58 = $$3162 | 32;
        $59 = (36807 + ($$2109161)|0);
        $60 = HEAP8[$59>>0]|0;
        $61 = $60 << 24 >> 24;
        $62 = ($58|0)==($61|0);
        if (!($62)) {
         $$3110 = $$2109161;$$5 = $$3162;
         break L34;
        }
        $63 = ($$2109161>>>0)<(2);
        do {
         if ($63) {
          $64 = HEAP32[$4>>2]|0;
          $65 = HEAP32[$5>>2]|0;
          $66 = ($64>>>0)<($65>>>0);
          if ($66) {
           $67 = ((($64)) + 1|0);
           HEAP32[$4>>2] = $67;
           $68 = HEAP8[$64>>0]|0;
           $69 = $68&255;
           $$4 = $69;
           break;
          } else {
           $70 = (___shgetc($0)|0);
           $$4 = $70;
           break;
          }
         } else {
          $$4 = $$3162;
         }
        } while(0);
        $71 = (($$2109161) + 1)|0;
        $72 = ($71>>>0)<(3);
        if ($72) {
         $$2109161 = $71;$$3162 = $$4;
        } else {
         $$3110 = $71;$$5 = $$4;
         break;
        }
       }
      } else {
       $$3110 = $$0107$lcssa;$$5 = $$1$lcssa;
      }
     } while(0);
     switch ($$3110|0) {
     case 3:  {
      $73 = HEAP32[$4>>2]|0;
      $74 = HEAP32[$5>>2]|0;
      $75 = ($73>>>0)<($74>>>0);
      if ($75) {
       $76 = ((($73)) + 1|0);
       HEAP32[$4>>2] = $76;
       $77 = HEAP8[$73>>0]|0;
       $78 = $77&255;
       $80 = $78;
      } else {
       $79 = (___shgetc($0)|0);
       $80 = $79;
      }
      $81 = ($80|0)==(40);
      if ($81) {
       $$4111 = 1;
      } else {
       $82 = HEAP32[$5>>2]|0;
       $83 = ($82|0)==(0|0);
       if ($83) {
        $$0114 = nan;
        break L4;
       }
       $84 = HEAP32[$4>>2]|0;
       $85 = ((($84)) + -1|0);
       HEAP32[$4>>2] = $85;
       $$0114 = nan;
       break L4;
      }
      while(1) {
       $86 = HEAP32[$4>>2]|0;
       $87 = HEAP32[$5>>2]|0;
       $88 = ($86>>>0)<($87>>>0);
       if ($88) {
        $89 = ((($86)) + 1|0);
        HEAP32[$4>>2] = $89;
        $90 = HEAP8[$86>>0]|0;
        $91 = $90&255;
        $94 = $91;
       } else {
        $92 = (___shgetc($0)|0);
        $94 = $92;
       }
       $93 = (($94) + -48)|0;
       $95 = ($93>>>0)<(10);
       $96 = (($94) + -65)|0;
       $97 = ($96>>>0)<(26);
       $or$cond = $95 | $97;
       if (!($or$cond)) {
        $98 = (($94) + -97)|0;
        $99 = ($98>>>0)<(26);
        $100 = ($94|0)==(95);
        $or$cond7 = $100 | $99;
        if (!($or$cond7)) {
         break;
        }
       }
       $112 = (($$4111) + 1)|0;
       $$4111 = $112;
      }
      $101 = ($94|0)==(41);
      if ($101) {
       $$0114 = nan;
       break L4;
      }
      $102 = HEAP32[$5>>2]|0;
      $103 = ($102|0)==(0|0);
      if (!($103)) {
       $104 = HEAP32[$4>>2]|0;
       $105 = ((($104)) + -1|0);
       HEAP32[$4>>2] = $105;
      }
      if (!($43)) {
       $107 = (___errno_location()|0);
       HEAP32[$107>>2] = 22;
       ___shlim($0,0);
       $$0114 = 0.0;
       break L4;
      }
      $106 = ($$4111|0)==(0);
      if ($106) {
       $$0114 = nan;
       break L4;
      } else {
       $$in = $$4111;
      }
      while(1) {
       $108 = (($$in) + -1)|0;
       if (!($103)) {
        $109 = HEAP32[$4>>2]|0;
        $110 = ((($109)) + -1|0);
        HEAP32[$4>>2] = $110;
       }
       $111 = ($108|0)==(0);
       if ($111) {
        $$0114 = nan;
        break L4;
       } else {
        $$in = $108;
       }
      }
      break;
     }
     case 0:  {
      $118 = ($$5|0)==(48);
      do {
       if ($118) {
        $119 = HEAP32[$4>>2]|0;
        $120 = HEAP32[$5>>2]|0;
        $121 = ($119>>>0)<($120>>>0);
        if ($121) {
         $122 = ((($119)) + 1|0);
         HEAP32[$4>>2] = $122;
         $123 = HEAP8[$119>>0]|0;
         $124 = $123&255;
         $127 = $124;
        } else {
         $125 = (___shgetc($0)|0);
         $127 = $125;
        }
        $126 = $127 | 32;
        $128 = ($126|0)==(120);
        if (!($128)) {
         $329 = HEAP32[$5>>2]|0;
         $330 = ($329|0)==(0|0);
         if ($330) {
          $$6 = 48;
          break;
         }
         $331 = HEAP32[$4>>2]|0;
         $332 = ((($331)) + -1|0);
         HEAP32[$4>>2] = $332;
         $$6 = 48;
         break;
        }
        $129 = HEAP32[$4>>2]|0;
        $130 = HEAP32[$5>>2]|0;
        $131 = ($129>>>0)<($130>>>0);
        if ($131) {
         $132 = ((($129)) + 1|0);
         HEAP32[$4>>2] = $132;
         $133 = HEAP8[$129>>0]|0;
         $134 = $133&255;
         $$0$i = $134;$$0142$i = 0;
        } else {
         $135 = (___shgetc($0)|0);
         $$0$i = $135;$$0142$i = 0;
        }
        L94: while(1) {
         switch ($$0$i|0) {
         case 46:  {
          label = 74;
          break L94;
          break;
         }
         case 48:  {
          break;
         }
         default: {
          $$0146$i = 0;$$0148$i = 0;$$0152$i = 1.0;$$0155$i = 0.0;$$0159$i = 0;$$2$i = $$0$i;$$2144$i = $$0142$i;$172 = 0;$174 = 0;$216 = 0;$218 = 0;
          break L94;
         }
         }
         $136 = HEAP32[$4>>2]|0;
         $137 = HEAP32[$5>>2]|0;
         $138 = ($136>>>0)<($137>>>0);
         if ($138) {
          $139 = ((($136)) + 1|0);
          HEAP32[$4>>2] = $139;
          $140 = HEAP8[$136>>0]|0;
          $141 = $140&255;
          $$0$i = $141;$$0142$i = 1;
          continue;
         } else {
          $142 = (___shgetc($0)|0);
          $$0$i = $142;$$0142$i = 1;
          continue;
         }
        }
        if ((label|0) == 74) {
         $143 = HEAP32[$4>>2]|0;
         $144 = HEAP32[$5>>2]|0;
         $145 = ($143>>>0)<($144>>>0);
         if ($145) {
          $146 = ((($143)) + 1|0);
          HEAP32[$4>>2] = $146;
          $147 = HEAP8[$143>>0]|0;
          $148 = $147&255;
          $$1$ph$i = $148;
         } else {
          $149 = (___shgetc($0)|0);
          $$1$ph$i = $149;
         }
         $150 = ($$1$ph$i|0)==(48);
         if ($150) {
          $158 = 0;$159 = 0;
          while(1) {
           $151 = HEAP32[$4>>2]|0;
           $152 = HEAP32[$5>>2]|0;
           $153 = ($151>>>0)<($152>>>0);
           if ($153) {
            $154 = ((($151)) + 1|0);
            HEAP32[$4>>2] = $154;
            $155 = HEAP8[$151>>0]|0;
            $156 = $155&255;
            $162 = $156;
           } else {
            $157 = (___shgetc($0)|0);
            $162 = $157;
           }
           $160 = (_i64Add(($158|0),($159|0),-1,-1)|0);
           $161 = tempRet0;
           $163 = ($162|0)==(48);
           if ($163) {
            $158 = $160;$159 = $161;
           } else {
            $$0146$i = 1;$$0148$i = 0;$$0152$i = 1.0;$$0155$i = 0.0;$$0159$i = 0;$$2$i = $162;$$2144$i = 1;$172 = 0;$174 = 0;$216 = $160;$218 = $161;
            break;
           }
          }
         } else {
          $$0146$i = 1;$$0148$i = 0;$$0152$i = 1.0;$$0155$i = 0.0;$$0159$i = 0;$$2$i = $$1$ph$i;$$2144$i = $$0142$i;$172 = 0;$174 = 0;$216 = 0;$218 = 0;
         }
        }
        while(1) {
         $164 = (($$2$i) + -48)|0;
         $165 = ($164>>>0)<(10);
         $$pre$i = $$2$i | 32;
         if ($165) {
          label = 86;
         } else {
          $166 = (($$pre$i) + -97)|0;
          $167 = ($166>>>0)<(6);
          $168 = ($$2$i|0)==(46);
          $or$cond6$i = $168 | $167;
          if (!($or$cond6$i)) {
           $$2$lcssa$i = $$2$i;
           break;
          }
          if ($168) {
           $169 = ($$0146$i|0)==(0);
           if ($169) {
            $$1147$i = 1;$$2150$i = $$0148$i;$$2154$i = $$0152$i;$$2157$i = $$0155$i;$$2161$i = $$0159$i;$$3145$i = $$2144$i;$693 = $174;$694 = $172;$695 = $174;$696 = $172;
           } else {
            $$2$lcssa$i = 46;
            break;
           }
          } else {
           label = 86;
          }
         }
         if ((label|0) == 86) {
          label = 0;
          $170 = ($$2$i|0)>(57);
          $171 = (($$pre$i) + -87)|0;
          $$0133$i = $170 ? $171 : $164;
          $173 = ($172|0)<(0);
          $175 = ($174>>>0)<(8);
          $176 = ($172|0)==(0);
          $177 = $176 & $175;
          $178 = $173 | $177;
          do {
           if ($178) {
            $179 = $$0159$i << 4;
            $180 = (($$0133$i) + ($179))|0;
            $$1149$i = $$0148$i;$$1153$i = $$0152$i;$$1156$i = $$0155$i;$$1160$i = $180;
           } else {
            $181 = ($172|0)<(0);
            $182 = ($174>>>0)<(14);
            $183 = ($172|0)==(0);
            $184 = $183 & $182;
            $185 = $181 | $184;
            if ($185) {
             $186 = (+($$0133$i|0));
             $187 = $$0152$i * 0.0625;
             $188 = $187 * $186;
             $189 = $$0155$i + $188;
             $$1149$i = $$0148$i;$$1153$i = $187;$$1156$i = $189;$$1160$i = $$0159$i;
             break;
            }
            $190 = ($$0133$i|0)==(0);
            $191 = ($$0148$i|0)!=(0);
            $or$cond$i = $191 | $190;
            if ($or$cond$i) {
             $$1149$i = $$0148$i;$$1153$i = $$0152$i;$$1156$i = $$0155$i;$$1160$i = $$0159$i;
            } else {
             $192 = $$0152$i * 0.5;
             $193 = $$0155$i + $192;
             $$1149$i = 1;$$1153$i = $$0152$i;$$1156$i = $193;$$1160$i = $$0159$i;
            }
           }
          } while(0);
          $194 = (_i64Add(($174|0),($172|0),1,0)|0);
          $195 = tempRet0;
          $$1147$i = $$0146$i;$$2150$i = $$1149$i;$$2154$i = $$1153$i;$$2157$i = $$1156$i;$$2161$i = $$1160$i;$$3145$i = 1;$693 = $216;$694 = $218;$695 = $194;$696 = $195;
         }
         $196 = HEAP32[$4>>2]|0;
         $197 = HEAP32[$5>>2]|0;
         $198 = ($196>>>0)<($197>>>0);
         if ($198) {
          $199 = ((($196)) + 1|0);
          HEAP32[$4>>2] = $199;
          $200 = HEAP8[$196>>0]|0;
          $201 = $200&255;
          $$0146$i = $$1147$i;$$0148$i = $$2150$i;$$0152$i = $$2154$i;$$0155$i = $$2157$i;$$0159$i = $$2161$i;$$2$i = $201;$$2144$i = $$3145$i;$172 = $696;$174 = $695;$216 = $693;$218 = $694;
          continue;
         } else {
          $202 = (___shgetc($0)|0);
          $$0146$i = $$1147$i;$$0148$i = $$2150$i;$$0152$i = $$2154$i;$$0155$i = $$2157$i;$$0159$i = $$2161$i;$$2$i = $202;$$2144$i = $$3145$i;$172 = $696;$174 = $695;$216 = $693;$218 = $694;
          continue;
         }
        }
        $203 = ($$2144$i|0)==(0);
        if ($203) {
         $204 = HEAP32[$5>>2]|0;
         $205 = ($204|0)==(0|0);
         if (!($205)) {
          $206 = HEAP32[$4>>2]|0;
          $207 = ((($206)) + -1|0);
          HEAP32[$4>>2] = $207;
         }
         $208 = ($2|0)==(0);
         if ($208) {
          ___shlim($0,0);
         } else {
          if (!($205)) {
           $209 = HEAP32[$4>>2]|0;
           $210 = ((($209)) + -1|0);
           HEAP32[$4>>2] = $210;
           $211 = ($$0146$i|0)==(0);
           if (!($211)) {
            $212 = ((($209)) + -2|0);
            HEAP32[$4>>2] = $212;
           }
          }
         }
         $213 = (+($$0113|0));
         $214 = $213 * 0.0;
         $$0114 = $214;
         break L4;
        }
        $215 = ($$0146$i|0)==(0);
        $217 = $215 ? $174 : $216;
        $219 = $215 ? $172 : $218;
        $220 = ($172|0)<(0);
        $221 = ($174>>>0)<(8);
        $222 = ($172|0)==(0);
        $223 = $222 & $221;
        $224 = $220 | $223;
        if ($224) {
         $$3162183$i = $$0159$i;$226 = $174;$227 = $172;
         while(1) {
          $225 = $$3162183$i << 4;
          $228 = (_i64Add(($226|0),($227|0),1,0)|0);
          $229 = tempRet0;
          $230 = ($229|0)<(0);
          $231 = ($228>>>0)<(8);
          $232 = ($229|0)==(0);
          $233 = $232 & $231;
          $234 = $230 | $233;
          if ($234) {
           $$3162183$i = $225;$226 = $228;$227 = $229;
          } else {
           $$3162$lcssa$i = $225;
           break;
          }
         }
        } else {
         $$3162$lcssa$i = $$0159$i;
        }
        $235 = $$2$lcssa$i | 32;
        $236 = ($235|0)==(112);
        if ($236) {
         $237 = (_scanexp($0,$2)|0);
         $238 = tempRet0;
         $239 = ($237|0)==(0);
         $240 = ($238|0)==(-2147483648);
         $241 = $239 & $240;
         if ($241) {
          $242 = ($2|0)==(0);
          if ($242) {
           ___shlim($0,0);
           $$0114 = 0.0;
           break L4;
          }
          $243 = HEAP32[$5>>2]|0;
          $244 = ($243|0)==(0|0);
          if ($244) {
           $255 = 0;$256 = 0;
          } else {
           $245 = HEAP32[$4>>2]|0;
           $246 = ((($245)) + -1|0);
           HEAP32[$4>>2] = $246;
           $255 = 0;$256 = 0;
          }
         } else {
          $255 = $237;$256 = $238;
         }
        } else {
         $247 = HEAP32[$5>>2]|0;
         $248 = ($247|0)==(0|0);
         if ($248) {
          $255 = 0;$256 = 0;
         } else {
          $249 = HEAP32[$4>>2]|0;
          $250 = ((($249)) + -1|0);
          HEAP32[$4>>2] = $250;
          $255 = 0;$256 = 0;
         }
        }
        $251 = (_bitshift64Shl(($217|0),($219|0),2)|0);
        $252 = tempRet0;
        $253 = (_i64Add(($251|0),($252|0),-32,-1)|0);
        $254 = tempRet0;
        $257 = (_i64Add(($253|0),($254|0),($255|0),($256|0))|0);
        $258 = tempRet0;
        $259 = ($$3162$lcssa$i|0)==(0);
        if ($259) {
         $260 = (+($$0113|0));
         $261 = $260 * 0.0;
         $$0114 = $261;
         break L4;
        }
        $262 = (0 - ($$0105$ph))|0;
        $263 = ($258|0)>(0);
        $264 = ($257>>>0)>($262>>>0);
        $265 = ($258|0)==(0);
        $266 = $265 & $264;
        $267 = $263 | $266;
        if ($267) {
         $268 = (___errno_location()|0);
         HEAP32[$268>>2] = 34;
         $269 = (+($$0113|0));
         $270 = $269 * 1.7976931348623157E+308;
         $271 = $270 * 1.7976931348623157E+308;
         $$0114 = $271;
         break L4;
        }
        $272 = (($$0105$ph) + -106)|0;
        $273 = ($272|0)<(0);
        $274 = $273 << 31 >> 31;
        $275 = ($258|0)<($274|0);
        $276 = ($257>>>0)<($272>>>0);
        $277 = ($258|0)==($274|0);
        $278 = $277 & $276;
        $279 = $275 | $278;
        if ($279) {
         $281 = (___errno_location()|0);
         HEAP32[$281>>2] = 34;
         $282 = (+($$0113|0));
         $283 = $282 * 2.2250738585072014E-308;
         $284 = $283 * 2.2250738585072014E-308;
         $$0114 = $284;
         break L4;
        }
        $280 = ($$3162$lcssa$i|0)>(-1);
        if ($280) {
         $$3158179$i = $$0155$i;$$4163178$i = $$3162$lcssa$i;$290 = $257;$291 = $258;
         while(1) {
          $285 = !($$3158179$i >= 0.5);
          $286 = $$4163178$i << 1;
          $287 = $$3158179$i + -1.0;
          $288 = $285&1;
          $289 = $288 | $286;
          $$5164$i = $289 ^ 1;
          $$pn$i = $285 ? $$3158179$i : $287;
          $$4$i = $$3158179$i + $$pn$i;
          $292 = (_i64Add(($290|0),($291|0),-1,-1)|0);
          $293 = tempRet0;
          $294 = ($289|0)>(-1);
          if ($294) {
           $$3158179$i = $$4$i;$$4163178$i = $$5164$i;$290 = $292;$291 = $293;
          } else {
           $$3158$lcssa$i = $$4$i;$$4163$lcssa$i = $$5164$i;$299 = $292;$300 = $293;
           break;
          }
         }
        } else {
         $$3158$lcssa$i = $$0155$i;$$4163$lcssa$i = $$3162$lcssa$i;$299 = $257;$300 = $258;
        }
        $295 = ($$0105$ph|0)<(0);
        $296 = $295 << 31 >> 31;
        $297 = (_i64Subtract(32,0,($$0105$ph|0),($296|0))|0);
        $298 = tempRet0;
        $301 = (_i64Add(($299|0),($300|0),($297|0),($298|0))|0);
        $302 = tempRet0;
        $303 = (0)>($302|0);
        $304 = ($$0106$ph>>>0)>($301>>>0);
        $305 = (0)==($302|0);
        $306 = $305 & $304;
        $307 = $303 | $306;
        if ($307) {
         $308 = ($301|0)<(0);
         if ($308) {
          $$0166170$i = 0;$311 = 84;
          label = 127;
         } else {
          $$0166$i = $301;
          label = 125;
         }
        } else {
         $$0166$i = $$0106$ph;
         label = 125;
        }
        if ((label|0) == 125) {
         $309 = ($$0166$i|0)<(53);
         $310 = (84 - ($$0166$i))|0;
         if ($309) {
          $$0166170$i = $$0166$i;$311 = $310;
          label = 127;
         } else {
          $$pre201$i = (+($$0113|0));
          $$0151$i = 0.0;$$0166169$i = $$0166$i;$$pre$phi202$iZ2D = $$pre201$i;
         }
        }
        if ((label|0) == 127) {
         $312 = (+_scalbn(1.0,$311));
         $313 = (+($$0113|0));
         $314 = (+_copysignl($312,$313));
         $$0151$i = $314;$$0166169$i = $$0166170$i;$$pre$phi202$iZ2D = $313;
        }
        $315 = ($$0166169$i|0)<(32);
        $316 = $$3158$lcssa$i != 0.0;
        $or$cond4$i = $316 & $315;
        $317 = $$4163$lcssa$i & 1;
        $318 = ($317|0)==(0);
        $or$cond168$i = $318 & $or$cond4$i;
        $319 = $or$cond168$i&1;
        $$6$i = (($319) + ($$4163$lcssa$i))|0;
        $$5$i = $or$cond168$i ? 0.0 : $$3158$lcssa$i;
        $320 = (+($$6$i>>>0));
        $321 = $$pre$phi202$iZ2D * $320;
        $322 = $$0151$i + $321;
        $323 = $$pre$phi202$iZ2D * $$5$i;
        $324 = $323 + $322;
        $325 = $324 - $$0151$i;
        $326 = $325 != 0.0;
        if (!($326)) {
         $327 = (___errno_location()|0);
         HEAP32[$327>>2] = 34;
        }
        $328 = (+_scalbnl($325,$299));
        $$0114 = $328;
        break L4;
       } else {
        $$6 = $$5;
       }
      } while(0);
      $sum$i = (($$0105$ph) + ($$0106$ph))|0;
      $333 = (0 - ($sum$i))|0;
      $$0324$i = $$6;$$0391$i = 0;
      L184: while(1) {
       switch ($$0324$i|0) {
       case 46:  {
        label = 138;
        break L184;
        break;
       }
       case 48:  {
        break;
       }
       default: {
        $$0388$i = 0;$$2$i117 = $$0324$i;$$2393$i = $$0391$i;$697 = 0;$698 = 0;
        break L184;
       }
       }
       $334 = HEAP32[$4>>2]|0;
       $335 = HEAP32[$5>>2]|0;
       $336 = ($334>>>0)<($335>>>0);
       if ($336) {
        $337 = ((($334)) + 1|0);
        HEAP32[$4>>2] = $337;
        $338 = HEAP8[$334>>0]|0;
        $339 = $338&255;
        $$0324$i = $339;$$0391$i = 1;
        continue;
       } else {
        $340 = (___shgetc($0)|0);
        $$0324$i = $340;$$0391$i = 1;
        continue;
       }
      }
      if ((label|0) == 138) {
       $341 = HEAP32[$4>>2]|0;
       $342 = HEAP32[$5>>2]|0;
       $343 = ($341>>>0)<($342>>>0);
       if ($343) {
        $344 = ((($341)) + 1|0);
        HEAP32[$4>>2] = $344;
        $345 = HEAP8[$341>>0]|0;
        $346 = $345&255;
        $$1325$ph$i = $346;
       } else {
        $347 = (___shgetc($0)|0);
        $$1325$ph$i = $347;
       }
       $348 = ($$1325$ph$i|0)==(48);
       if ($348) {
        $349 = 0;$350 = 0;
        while(1) {
         $351 = (_i64Add(($349|0),($350|0),-1,-1)|0);
         $352 = tempRet0;
         $353 = HEAP32[$4>>2]|0;
         $354 = HEAP32[$5>>2]|0;
         $355 = ($353>>>0)<($354>>>0);
         if ($355) {
          $356 = ((($353)) + 1|0);
          HEAP32[$4>>2] = $356;
          $357 = HEAP8[$353>>0]|0;
          $358 = $357&255;
          $$1325$be$i = $358;
         } else {
          $359 = (___shgetc($0)|0);
          $$1325$be$i = $359;
         }
         $360 = ($$1325$be$i|0)==(48);
         if ($360) {
          $349 = $351;$350 = $352;
         } else {
          $$0388$i = 1;$$2$i117 = $$1325$be$i;$$2393$i = 1;$697 = $351;$698 = $352;
          break;
         }
        }
       } else {
        $$0388$i = 1;$$2$i117 = $$1325$ph$i;$$2393$i = $$0391$i;$697 = 0;$698 = 0;
       }
      }
      HEAP32[$3>>2] = 0;
      $361 = (($$2$i117) + -48)|0;
      $362 = ($361>>>0)<(10);
      $363 = ($$2$i117|0)==(46);
      $364 = $363 | $362;
      L203: do {
       if ($364) {
        $365 = ((($3)) + 496|0);
        $$0336503$i = 0;$$0340502$i = 0;$$0396499$i = 0;$$1389501$i = $$0388$i;$$3394500$i = $$2393$i;$$3504$i = $$2$i117;$368 = 0;$369 = 0;$699 = $363;$700 = $361;$701 = $697;$702 = $698;
        L205: while(1) {
         do {
          if ($699) {
           $cond$i = ($$1389501$i|0)==(0);
           if ($cond$i) {
            $$2338$i = $$0336503$i;$$2342$i = $$0340502$i;$$2390$i = 1;$$2398$i = $$0396499$i;$$4395$i = $$3394500$i;$703 = $368;$704 = $369;$705 = $368;$706 = $369;
           } else {
            break L205;
           }
          } else {
           $367 = ($$0340502$i|0)<(125);
           $370 = (_i64Add(($368|0),($369|0),1,0)|0);
           $371 = tempRet0;
           $372 = ($$3504$i|0)!=(48);
           if (!($367)) {
            if (!($372)) {
             $$2338$i = $$0336503$i;$$2342$i = $$0340502$i;$$2390$i = $$1389501$i;$$2398$i = $$0396499$i;$$4395$i = $$3394500$i;$703 = $701;$704 = $702;$705 = $370;$706 = $371;
             break;
            }
            $382 = HEAP32[$365>>2]|0;
            $383 = $382 | 1;
            HEAP32[$365>>2] = $383;
            $$2338$i = $$0336503$i;$$2342$i = $$0340502$i;$$2390$i = $$1389501$i;$$2398$i = $$0396499$i;$$4395$i = $$3394500$i;$703 = $701;$704 = $702;$705 = $370;$706 = $371;
            break;
           }
           $$$0396$i = $372 ? $370 : $$0396499$i;
           $373 = ($$0336503$i|0)==(0);
           $374 = (($3) + ($$0340502$i<<2)|0);
           if ($373) {
            $storemerge$i = $700;
           } else {
            $375 = (($$3504$i) + -48)|0;
            $376 = HEAP32[$374>>2]|0;
            $377 = ($376*10)|0;
            $378 = (($375) + ($377))|0;
            $storemerge$i = $378;
           }
           HEAP32[$374>>2] = $storemerge$i;
           $379 = (($$0336503$i) + 1)|0;
           $380 = ($379|0)==(9);
           $381 = $380&1;
           $$$0340$i = (($381) + ($$0340502$i))|0;
           $$408$i = $380 ? 0 : $379;
           $$2338$i = $$408$i;$$2342$i = $$$0340$i;$$2390$i = $$1389501$i;$$2398$i = $$$0396$i;$$4395$i = 1;$703 = $701;$704 = $702;$705 = $370;$706 = $371;
          }
         } while(0);
         $384 = HEAP32[$4>>2]|0;
         $385 = HEAP32[$5>>2]|0;
         $386 = ($384>>>0)<($385>>>0);
         if ($386) {
          $387 = ((($384)) + 1|0);
          HEAP32[$4>>2] = $387;
          $388 = HEAP8[$384>>0]|0;
          $389 = $388&255;
          $$3$be$i = $389;
         } else {
          $390 = (___shgetc($0)|0);
          $$3$be$i = $390;
         }
         $391 = (($$3$be$i) + -48)|0;
         $392 = ($391>>>0)<(10);
         $393 = ($$3$be$i|0)==(46);
         $394 = $393 | $392;
         if ($394) {
          $$0336503$i = $$2338$i;$$0340502$i = $$2342$i;$$0396499$i = $$2398$i;$$1389501$i = $$2390$i;$$3394500$i = $$4395$i;$$3504$i = $$3$be$i;$368 = $705;$369 = $706;$699 = $393;$700 = $391;$701 = $703;$702 = $704;
         } else {
          $$0336$lcssa$i = $$2338$i;$$0340$lcssa$i = $$2342$i;$$0396$lcssa$i = $$2398$i;$$1389$lcssa$i = $$2390$i;$$3$lcssa$i = $$3$be$i;$$3394$lcssa$i = $$4395$i;$396 = $703;$397 = $705;$399 = $704;$400 = $706;
          label = 161;
          break L203;
         }
        }
        $366 = ($$3394500$i|0)!=(0);
        $$0336455$i = $$0336503$i;$$0340459$i = $$0340502$i;$$0396465$i = $$0396499$i;$707 = $368;$708 = $369;$709 = $701;$710 = $702;$711 = $366;
        label = 169;
       } else {
        $$0336$lcssa$i = 0;$$0340$lcssa$i = 0;$$0396$lcssa$i = 0;$$1389$lcssa$i = $$0388$i;$$3$lcssa$i = $$2$i117;$$3394$lcssa$i = $$2393$i;$396 = $697;$397 = 0;$399 = $698;$400 = 0;
        label = 161;
       }
      } while(0);
      do {
       if ((label|0) == 161) {
        $395 = ($$1389$lcssa$i|0)==(0);
        $398 = $395 ? $397 : $396;
        $401 = $395 ? $400 : $399;
        $402 = ($$3394$lcssa$i|0)!=(0);
        $403 = $$3$lcssa$i | 32;
        $404 = ($403|0)==(101);
        $or$cond410$i = $402 & $404;
        if (!($or$cond410$i)) {
         $419 = ($$3$lcssa$i|0)>(-1);
         if ($419) {
          $$0336455$i = $$0336$lcssa$i;$$0340459$i = $$0340$lcssa$i;$$0396465$i = $$0396$lcssa$i;$707 = $397;$708 = $400;$709 = $398;$710 = $401;$711 = $402;
          label = 169;
          break;
         } else {
          $$0336454$i = $$0336$lcssa$i;$$0340458$i = $$0340$lcssa$i;$$0396464$i = $$0396$lcssa$i;$712 = $397;$713 = $400;$714 = $402;$715 = $398;$716 = $401;
          label = 171;
          break;
         }
        }
        $405 = (_scanexp($0,$2)|0);
        $406 = tempRet0;
        $407 = ($405|0)==(0);
        $408 = ($406|0)==(-2147483648);
        $409 = $407 & $408;
        if ($409) {
         $410 = ($2|0)==(0);
         if ($410) {
          ___shlim($0,0);
          $$1$i = 0.0;
          break;
         }
         $411 = HEAP32[$5>>2]|0;
         $412 = ($411|0)==(0|0);
         if ($412) {
          $415 = 0;$416 = 0;
         } else {
          $413 = HEAP32[$4>>2]|0;
          $414 = ((($413)) + -1|0);
          HEAP32[$4>>2] = $414;
          $415 = 0;$416 = 0;
         }
        } else {
         $415 = $405;$416 = $406;
        }
        $417 = (_i64Add(($415|0),($416|0),($398|0),($401|0))|0);
        $418 = tempRet0;
        $$0336453$i = $$0336$lcssa$i;$$0340457$i = $$0340$lcssa$i;$$0396463$i = $$0396$lcssa$i;$429 = $417;$431 = $397;$432 = $418;$434 = $400;
        label = 173;
       }
      } while(0);
      if ((label|0) == 169) {
       $420 = HEAP32[$5>>2]|0;
       $421 = ($420|0)==(0|0);
       if ($421) {
        $$0336454$i = $$0336455$i;$$0340458$i = $$0340459$i;$$0396464$i = $$0396465$i;$712 = $707;$713 = $708;$714 = $711;$715 = $709;$716 = $710;
        label = 171;
       } else {
        $422 = HEAP32[$4>>2]|0;
        $423 = ((($422)) + -1|0);
        HEAP32[$4>>2] = $423;
        if ($711) {
         $$0336453$i = $$0336455$i;$$0340457$i = $$0340459$i;$$0396463$i = $$0396465$i;$429 = $709;$431 = $707;$432 = $710;$434 = $708;
         label = 173;
        } else {
         label = 172;
        }
       }
      }
      if ((label|0) == 171) {
       if ($714) {
        $$0336453$i = $$0336454$i;$$0340457$i = $$0340458$i;$$0396463$i = $$0396464$i;$429 = $715;$431 = $712;$432 = $716;$434 = $713;
        label = 173;
       } else {
        label = 172;
       }
      }
      do {
       if ((label|0) == 172) {
        $424 = (___errno_location()|0);
        HEAP32[$424>>2] = 22;
        ___shlim($0,0);
        $$1$i = 0.0;
       }
       else if ((label|0) == 173) {
        $425 = HEAP32[$3>>2]|0;
        $426 = ($425|0)==(0);
        if ($426) {
         $427 = (+($$0113|0));
         $428 = $427 * 0.0;
         $$1$i = $428;
         break;
        }
        $430 = ($429|0)==($431|0);
        $433 = ($432|0)==($434|0);
        $435 = $430 & $433;
        $436 = ($434|0)<(0);
        $437 = ($431>>>0)<(10);
        $438 = ($434|0)==(0);
        $439 = $438 & $437;
        $440 = $436 | $439;
        $or$cond$i118 = $440 & $435;
        if ($or$cond$i118) {
         $441 = ($$0106$ph>>>0)>(30);
         $442 = $425 >>> $$0106$ph;
         $443 = ($442|0)==(0);
         $or$cond412$i = $441 | $443;
         if ($or$cond412$i) {
          $444 = (+($$0113|0));
          $445 = (+($425>>>0));
          $446 = $444 * $445;
          $$1$i = $446;
          break;
         }
        }
        $447 = (($$0105$ph|0) / -2)&-1;
        $448 = ($447|0)<(0);
        $449 = $448 << 31 >> 31;
        $450 = ($432|0)>($449|0);
        $451 = ($429>>>0)>($447>>>0);
        $452 = ($432|0)==($449|0);
        $453 = $452 & $451;
        $454 = $450 | $453;
        if ($454) {
         $455 = (___errno_location()|0);
         HEAP32[$455>>2] = 34;
         $456 = (+($$0113|0));
         $457 = $456 * 1.7976931348623157E+308;
         $458 = $457 * 1.7976931348623157E+308;
         $$1$i = $458;
         break;
        }
        $459 = (($$0105$ph) + -106)|0;
        $460 = ($459|0)<(0);
        $461 = $460 << 31 >> 31;
        $462 = ($432|0)<($461|0);
        $463 = ($429>>>0)<($459>>>0);
        $464 = ($432|0)==($461|0);
        $465 = $464 & $463;
        $466 = $462 | $465;
        if ($466) {
         $467 = (___errno_location()|0);
         HEAP32[$467>>2] = 34;
         $468 = (+($$0113|0));
         $469 = $468 * 2.2250738585072014E-308;
         $470 = $469 * 2.2250738585072014E-308;
         $$1$i = $470;
         break;
        }
        $471 = ($$0336453$i|0)==(0);
        if ($471) {
         $$3343$i = $$0340457$i;
        } else {
         $472 = ($$0336453$i|0)<(9);
         if ($472) {
          $473 = (($3) + ($$0340457$i<<2)|0);
          $$promoted$i = HEAP32[$473>>2]|0;
          $$3339493$i = $$0336453$i;$475 = $$promoted$i;
          while(1) {
           $474 = ($475*10)|0;
           $476 = (($$3339493$i) + 1)|0;
           $exitcond541$i = ($476|0)==(9);
           if ($exitcond541$i) {
            break;
           } else {
            $$3339493$i = $476;$475 = $474;
           }
          }
          HEAP32[$473>>2] = $474;
         }
         $477 = (($$0340457$i) + 1)|0;
         $$3343$i = $477;
        }
        $478 = ($$0396463$i|0)<(9);
        if ($478) {
         $479 = ($$0396463$i|0)<=($429|0);
         $480 = ($429|0)<(18);
         $or$cond3$i = $479 & $480;
         if ($or$cond3$i) {
          $481 = ($429|0)==(9);
          if ($481) {
           $482 = (+($$0113|0));
           $483 = HEAP32[$3>>2]|0;
           $484 = (+($483>>>0));
           $485 = $482 * $484;
           $$1$i = $485;
           break;
          }
          $486 = ($429|0)<(9);
          if ($486) {
           $487 = (+($$0113|0));
           $488 = HEAP32[$3>>2]|0;
           $489 = (+($488>>>0));
           $490 = $487 * $489;
           $491 = (8 - ($429))|0;
           $492 = (6144 + ($491<<2)|0);
           $493 = HEAP32[$492>>2]|0;
           $494 = (+($493|0));
           $495 = $490 / $494;
           $$1$i = $495;
           break;
          }
          $$neg432$i = Math_imul($429, -3)|0;
          $$neg433$i = (($$0106$ph) + 27)|0;
          $496 = (($$neg433$i) + ($$neg432$i))|0;
          $497 = ($496|0)>(30);
          $$pre$i119 = HEAP32[$3>>2]|0;
          $498 = $$pre$i119 >>> $496;
          $499 = ($498|0)==(0);
          $or$cond571$i = $497 | $499;
          if ($or$cond571$i) {
           $500 = (+($$0113|0));
           $501 = (+($$pre$i119>>>0));
           $502 = $500 * $501;
           $503 = (($429) + -10)|0;
           $504 = (6144 + ($503<<2)|0);
           $505 = HEAP32[$504>>2]|0;
           $506 = (+($505|0));
           $507 = $502 * $506;
           $$1$i = $507;
           break;
          }
         }
        }
        $508 = (($429|0) % 9)&-1;
        $509 = ($508|0)==(0);
        if ($509) {
         $$0375$ph$i = 0;$$1368$ph438$i = $$3343$i;$$2347$ph439$i = 0;$$2382$ph437$i = $429;
        } else {
         $510 = ($429|0)>(-1);
         $511 = (($508) + 9)|0;
         $512 = $510 ? $508 : $511;
         $513 = (8 - ($512))|0;
         $514 = (6144 + ($513<<2)|0);
         $515 = HEAP32[$514>>2]|0;
         $516 = ($$3343$i|0)==(0);
         if ($516) {
          $$0345$lcssa545$i = 0;$$0367$i = 0;$$0380$lcssa544$i = $429;
         } else {
          $517 = (1000000000 / ($515|0))&-1;
          $$0335486$i = 0;$$0345484$i = 0;$$0380483$i = $429;$$4344485$i = 0;
          while(1) {
           $518 = (($3) + ($$4344485$i<<2)|0);
           $519 = HEAP32[$518>>2]|0;
           $520 = (($519>>>0) % ($515>>>0))&-1;
           $521 = (($519>>>0) / ($515>>>0))&-1;
           $522 = (($521) + ($$0335486$i))|0;
           HEAP32[$518>>2] = $522;
           $523 = Math_imul($520, $517)|0;
           $524 = ($$4344485$i|0)==($$0345484$i|0);
           $525 = ($522|0)==(0);
           $or$cond413$i = $524 & $525;
           $526 = (($$0345484$i) + 1)|0;
           $527 = $526 & 127;
           $528 = (($$0380483$i) + -9)|0;
           $$$0380$i = $or$cond413$i ? $528 : $$0380483$i;
           $$$0345$i = $or$cond413$i ? $527 : $$0345484$i;
           $529 = (($$4344485$i) + 1)|0;
           $530 = ($529|0)==($$3343$i|0);
           if ($530) {
            break;
           } else {
            $$0335486$i = $523;$$0345484$i = $$$0345$i;$$0380483$i = $$$0380$i;$$4344485$i = $529;
           }
          }
          $531 = ($523|0)==(0);
          if ($531) {
           $$0345$lcssa545$i = $$$0345$i;$$0367$i = $$3343$i;$$0380$lcssa544$i = $$$0380$i;
          } else {
           $532 = (($$3343$i) + 1)|0;
           $533 = (($3) + ($$3343$i<<2)|0);
           HEAP32[$533>>2] = $523;
           $$0345$lcssa545$i = $$$0345$i;$$0367$i = $532;$$0380$lcssa544$i = $$$0380$i;
          }
         }
         $534 = (9 - ($512))|0;
         $535 = (($534) + ($$0380$lcssa544$i))|0;
         $$0375$ph$i = 0;$$1368$ph438$i = $$0367$i;$$2347$ph439$i = $$0345$lcssa545$i;$$2382$ph437$i = $535;
        }
        L284: while(1) {
         $536 = ($$2382$ph437$i|0)<(18);
         $537 = ($$2382$ph437$i|0)==(18);
         $538 = (($3) + ($$2347$ph439$i<<2)|0);
         $$0375$i = $$0375$ph$i;$$1368$i = $$1368$ph438$i;
         while(1) {
          if (!($536)) {
           if (!($537)) {
            $$1376$ph$i = $$0375$i;$$4349$ph$i = $$2347$ph439$i;$$4384$ph435$i = $$2382$ph437$i;$$6373$ph$i = $$1368$i;
            break L284;
           }
           $539 = HEAP32[$538>>2]|0;
           $540 = ($539>>>0)<(9007199);
           if (!($540)) {
            $$1376$ph$i = $$0375$i;$$4349$ph$i = $$2347$ph439$i;$$4384$ph435$i = 18;$$6373$ph$i = $$1368$i;
            break L284;
           }
          }
          $541 = (($$1368$i) + 127)|0;
          $$0329$i = 0;$$2369$i = $$1368$i;$$5$in$i = $541;
          while(1) {
           $$5$i121 = $$5$in$i & 127;
           $542 = (($3) + ($$5$i121<<2)|0);
           $543 = HEAP32[$542>>2]|0;
           $544 = (_bitshift64Shl(($543|0),0,29)|0);
           $545 = tempRet0;
           $546 = (_i64Add(($544|0),($545|0),($$0329$i|0),0)|0);
           $547 = tempRet0;
           $548 = ($547>>>0)>(0);
           $549 = ($546>>>0)>(1000000000);
           $550 = ($547|0)==(0);
           $551 = $550 & $549;
           $552 = $548 | $551;
           if ($552) {
            $553 = (___udivdi3(($546|0),($547|0),1000000000,0)|0);
            $554 = tempRet0;
            $555 = (___uremdi3(($546|0),($547|0),1000000000,0)|0);
            $556 = tempRet0;
            $$1330$i = $553;$$sink$off0$i = $555;
           } else {
            $$1330$i = 0;$$sink$off0$i = $546;
           }
           HEAP32[$542>>2] = $$sink$off0$i;
           $557 = (($$2369$i) + 127)|0;
           $558 = $557 & 127;
           $559 = ($$5$i121|0)!=($558|0);
           $560 = ($$5$i121|0)==($$2347$ph439$i|0);
           $or$cond414$i = $559 | $560;
           $561 = ($$sink$off0$i|0)==(0);
           $$5$$2369$i = $561 ? $$5$i121 : $$2369$i;
           $$3370$i = $or$cond414$i ? $$2369$i : $$5$$2369$i;
           $562 = (($$5$i121) + -1)|0;
           if ($560) {
            break;
           } else {
            $$0329$i = $$1330$i;$$2369$i = $$3370$i;$$5$in$i = $562;
           }
          }
          $563 = (($$0375$i) + -29)|0;
          $564 = ($$1330$i|0)==(0);
          if ($564) {
           $$0375$i = $563;$$1368$i = $$3370$i;
          } else {
           break;
          }
         }
         $565 = (($$2382$ph437$i) + 9)|0;
         $566 = (($$2347$ph439$i) + 127)|0;
         $567 = $566 & 127;
         $568 = ($567|0)==($$3370$i|0);
         $569 = (($$3370$i) + 127)|0;
         $570 = $569 & 127;
         $571 = (($$3370$i) + 126)|0;
         $572 = $571 & 127;
         $573 = (($3) + ($572<<2)|0);
         if ($568) {
          $574 = (($3) + ($570<<2)|0);
          $575 = HEAP32[$574>>2]|0;
          $576 = HEAP32[$573>>2]|0;
          $577 = $576 | $575;
          HEAP32[$573>>2] = $577;
          $$4371$i = $570;
         } else {
          $$4371$i = $$3370$i;
         }
         $578 = (($3) + ($567<<2)|0);
         HEAP32[$578>>2] = $$1330$i;
         $$0375$ph$i = $563;$$1368$ph438$i = $$4371$i;$$2347$ph439$i = $567;$$2382$ph437$i = $565;
        }
        L302: while(1) {
         $615 = (($$6373$ph$i) + 1)|0;
         $612 = $615 & 127;
         $616 = (($$6373$ph$i) + 127)|0;
         $617 = $616 & 127;
         $618 = (($3) + ($617<<2)|0);
         $$1376$ph549$i = $$1376$ph$i;$$4349$ph550$i = $$4349$ph$i;$$4384$ph$i = $$4384$ph435$i;
         while(1) {
          $591 = ($$4384$ph$i|0)==(18);
          $619 = ($$4384$ph$i|0)>(27);
          $$416$i = $619 ? 9 : 1;
          $$1376$i = $$1376$ph549$i;$$4349$i = $$4349$ph550$i;
          while(1) {
           $$0331476$i = 0;
           while(1) {
            $579 = (($$0331476$i) + ($$4349$i))|0;
            $580 = $579 & 127;
            $581 = ($580|0)==($$6373$ph$i|0);
            if ($581) {
             $$1332$i = 2;
             label = 220;
             break;
            }
            $582 = (($3) + ($580<<2)|0);
            $583 = HEAP32[$582>>2]|0;
            $584 = (6176 + ($$0331476$i<<2)|0);
            $585 = HEAP32[$584>>2]|0;
            $586 = ($583>>>0)<($585>>>0);
            if ($586) {
             $$1332$i = 2;
             label = 220;
             break;
            }
            $587 = ($583>>>0)>($585>>>0);
            if ($587) {
             break;
            }
            $588 = (($$0331476$i) + 1)|0;
            $589 = ($588|0)<(2);
            if ($589) {
             $$0331476$i = $588;
            } else {
             $$1332$i = $588;
             label = 220;
             break;
            }
           }
           if ((label|0) == 220) {
            label = 0;
            $590 = ($$1332$i|0)==(2);
            $or$cond6$i122 = $591 & $590;
            if ($or$cond6$i122) {
             $$0360474$i = 0.0;$$4475$i = 0;$$9473$i = $$6373$ph$i;
             break L302;
            }
           }
           $592 = (($$1376$i) + ($$416$i))|0;
           $593 = ($$4349$i|0)==($$6373$ph$i|0);
           if ($593) {
            $$1376$i = $592;$$4349$i = $$6373$ph$i;
           } else {
            break;
           }
          }
          $594 = 1 << $$416$i;
          $595 = (($594) + -1)|0;
          $596 = 1000000000 >>> $$416$i;
          $$0327480$i = 0;$$5350478$i = $$4349$i;$$5385477$i = $$4384$ph$i;$$6479$i = $$4349$i;
          while(1) {
           $597 = (($3) + ($$6479$i<<2)|0);
           $598 = HEAP32[$597>>2]|0;
           $599 = $598 & $595;
           $600 = $598 >>> $$416$i;
           $601 = (($600) + ($$0327480$i))|0;
           HEAP32[$597>>2] = $601;
           $602 = Math_imul($599, $596)|0;
           $603 = ($$6479$i|0)==($$5350478$i|0);
           $604 = ($601|0)==(0);
           $or$cond417$i = $603 & $604;
           $605 = (($$5350478$i) + 1)|0;
           $606 = $605 & 127;
           $607 = (($$5385477$i) + -9)|0;
           $$$5385$i = $or$cond417$i ? $607 : $$5385477$i;
           $$$5350$i = $or$cond417$i ? $606 : $$5350478$i;
           $608 = (($$6479$i) + 1)|0;
           $609 = $608 & 127;
           $610 = ($609|0)==($$6373$ph$i|0);
           if ($610) {
            break;
           } else {
            $$0327480$i = $602;$$5350478$i = $$$5350$i;$$5385477$i = $$$5385$i;$$6479$i = $609;
           }
          }
          $611 = ($602|0)==(0);
          if ($611) {
           $$1376$ph549$i = $592;$$4349$ph550$i = $$$5350$i;$$4384$ph$i = $$$5385$i;
           continue;
          }
          $613 = ($612|0)==($$$5350$i|0);
          if (!($613)) {
           break;
          }
          $620 = HEAP32[$618>>2]|0;
          $621 = $620 | 1;
          HEAP32[$618>>2] = $621;
          $$1376$ph549$i = $592;$$4349$ph550$i = $$$5350$i;$$4384$ph$i = $$$5385$i;
         }
         $614 = (($3) + ($$6373$ph$i<<2)|0);
         HEAP32[$614>>2] = $602;
         $$1376$ph$i = $592;$$4349$ph$i = $$$5350$i;$$4384$ph435$i = $$$5385$i;$$6373$ph$i = $612;
        }
        while(1) {
         $622 = (($$4475$i) + ($$4349$i))|0;
         $623 = $622 & 127;
         $624 = ($623|0)==($$9473$i|0);
         $625 = (($$9473$i) + 1)|0;
         $626 = $625 & 127;
         if ($624) {
          $627 = (($626) + -1)|0;
          $628 = (($3) + ($627<<2)|0);
          HEAP32[$628>>2] = 0;
          $$10$i = $626;
         } else {
          $$10$i = $$9473$i;
         }
         $629 = $$0360474$i * 1.0E+9;
         $630 = (($3) + ($623<<2)|0);
         $631 = HEAP32[$630>>2]|0;
         $632 = (+($631>>>0));
         $633 = $629 + $632;
         $634 = (($$4475$i) + 1)|0;
         $exitcond$i = ($634|0)==(2);
         if ($exitcond$i) {
          break;
         } else {
          $$0360474$i = $633;$$4475$i = $634;$$9473$i = $$10$i;
         }
        }
        $635 = (+($$0113|0));
        $636 = $635 * $633;
        $637 = (($$1376$i) + 53)|0;
        $638 = (($637) - ($$0105$ph))|0;
        $639 = ($638|0)<($$0106$ph|0);
        $640 = ($638|0)<(0);
        $$$i = $640 ? 0 : $638;
        $$0364$i = $639&1;
        $$0328$i = $639 ? $$$i : $$0106$ph;
        $641 = ($$0328$i|0)<(53);
        if ($641) {
         $642 = (105 - ($$0328$i))|0;
         $643 = (+_scalbn(1.0,$642));
         $644 = (+_copysignl($643,$636));
         $645 = (53 - ($$0328$i))|0;
         $646 = (+_scalbn(1.0,$645));
         $647 = (+_fmodl($636,$646));
         $648 = $636 - $647;
         $649 = $644 + $648;
         $$0355$i = $644;$$0356$i = $647;$$1361$i = $649;
        } else {
         $$0355$i = 0.0;$$0356$i = 0.0;$$1361$i = $636;
        }
        $650 = (($$4349$i) + 2)|0;
        $651 = $650 & 127;
        $652 = ($651|0)==($$10$i|0);
        do {
         if ($652) {
          $$3359$i = $$0356$i;
         } else {
          $653 = (($3) + ($651<<2)|0);
          $654 = HEAP32[$653>>2]|0;
          $655 = ($654>>>0)<(500000000);
          do {
           if ($655) {
            $656 = ($654|0)==(0);
            if ($656) {
             $657 = (($$4349$i) + 3)|0;
             $658 = $657 & 127;
             $659 = ($658|0)==($$10$i|0);
             if ($659) {
              $$1357$i = $$0356$i;
              break;
             }
            }
            $660 = $635 * 0.25;
            $661 = $660 + $$0356$i;
            $$1357$i = $661;
           } else {
            $662 = ($654|0)==(500000000);
            if (!($662)) {
             $663 = $635 * 0.75;
             $664 = $663 + $$0356$i;
             $$1357$i = $664;
             break;
            }
            $665 = (($$4349$i) + 3)|0;
            $666 = $665 & 127;
            $667 = ($666|0)==($$10$i|0);
            if ($667) {
             $668 = $635 * 0.5;
             $669 = $668 + $$0356$i;
             $$1357$i = $669;
             break;
            } else {
             $670 = $635 * 0.75;
             $671 = $670 + $$0356$i;
             $$1357$i = $671;
             break;
            }
           }
          } while(0);
          $672 = (53 - ($$0328$i))|0;
          $673 = ($672|0)>(1);
          if ($673) {
           $674 = (+_fmodl($$1357$i,1.0));
           $675 = $674 != 0.0;
           if ($675) {
            $$3359$i = $$1357$i;
            break;
           }
           $676 = $$1357$i + 1.0;
           $$3359$i = $676;
          } else {
           $$3359$i = $$1357$i;
          }
         }
        } while(0);
        $677 = $$1361$i + $$3359$i;
        $678 = $677 - $$0355$i;
        $679 = $637 & 2147483647;
        $680 = (-2 - ($sum$i))|0;
        $681 = ($679|0)>($680|0);
        do {
         if ($681) {
          $682 = (+Math_abs((+$678)));
          $683 = !($682 >= 9007199254740992.0);
          if ($683) {
           $$2362$i = $678;$$2366$i = $$0364$i;$$3378$i = $$1376$i;
          } else {
           $684 = (($$1376$i) + 1)|0;
           $685 = ($$0328$i|0)==($638|0);
           $or$cond418$i = $639 & $685;
           $$1365$i = $or$cond418$i ? 0 : $$0364$i;
           $686 = $678 * 0.5;
           $$2362$i = $686;$$2366$i = $$1365$i;$$3378$i = $684;
          }
          $687 = (($$3378$i) + 50)|0;
          $688 = ($687|0)>($333|0);
          if (!($688)) {
           $689 = ($$2366$i|0)!=(0);
           $690 = $$3359$i != 0.0;
           $or$cond9$i = $690 & $689;
           if (!($or$cond9$i)) {
            $$3363$i = $$2362$i;$$4379$i = $$3378$i;
            break;
           }
          }
          $691 = (___errno_location()|0);
          HEAP32[$691>>2] = 34;
          $$3363$i = $$2362$i;$$4379$i = $$3378$i;
         } else {
          $$3363$i = $678;$$4379$i = $$1376$i;
         }
        } while(0);
        $692 = (+_scalbnl($$3363$i,$$4379$i));
        $$1$i = $692;
       }
      } while(0);
      $$0114 = $$1$i;
      break L4;
      break;
     }
     default: {
      $113 = HEAP32[$5>>2]|0;
      $114 = ($113|0)==(0|0);
      if (!($114)) {
       $115 = HEAP32[$4>>2]|0;
       $116 = ((($115)) + -1|0);
       HEAP32[$4>>2] = $116;
      }
      $117 = (___errno_location()|0);
      HEAP32[$117>>2] = 22;
      ___shlim($0,0);
      $$0114 = 0.0;
      break L4;
     }
     }
    }
    }
   } while(0);
   if ((label|0) == 23) {
    $45 = HEAP32[$5>>2]|0;
    $46 = ($45|0)==(0|0);
    if (!($46)) {
     $47 = HEAP32[$4>>2]|0;
     $48 = ((($47)) + -1|0);
     HEAP32[$4>>2] = $48;
    }
    $49 = ($2|0)!=(0);
    $50 = ($$0107$lcssa>>>0)>(3);
    $or$cond9 = $49 & $50;
    if ($or$cond9) {
     $$1108 = $$0107$lcssa;
     while(1) {
      if (!($46)) {
       $51 = HEAP32[$4>>2]|0;
       $52 = ((($51)) + -1|0);
       HEAP32[$4>>2] = $52;
      }
      $53 = (($$1108) + -1)|0;
      $$old8 = ($53>>>0)>(3);
      if ($$old8) {
       $$1108 = $53;
      } else {
       break;
      }
     }
    }
   }
   $54 = (+($$0113|0));
   $55 = $54 * inf;
   $56 = $55;
   $$0114 = $56;
  }
 } while(0);
 STACKTOP = sp;return (+$$0114);
}
function _scanexp($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $$04860 = 0, $$049 = 0, $$1$be = 0, $$159 = 0, $$2$be = 0, $$2$lcssa = 0, $$254 = 0, $$3$be = 0, $10 = 0, $100 = 0, $101 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0;
 var $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0;
 var $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0;
 var $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0;
 var $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0;
 var $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($0)) + 100|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($3>>>0)<($5>>>0);
 if ($6) {
  $7 = ((($3)) + 1|0);
  HEAP32[$2>>2] = $7;
  $8 = HEAP8[$3>>0]|0;
  $9 = $8&255;
  $11 = $9;
 } else {
  $10 = (___shgetc($0)|0);
  $11 = $10;
 }
 $12 = ($11|0)==(45);
 switch ($11|0) {
 case 43: case 45:  {
  $13 = $12&1;
  $14 = HEAP32[$2>>2]|0;
  $15 = HEAP32[$4>>2]|0;
  $16 = ($14>>>0)<($15>>>0);
  if ($16) {
   $17 = ((($14)) + 1|0);
   HEAP32[$2>>2] = $17;
   $18 = HEAP8[$14>>0]|0;
   $19 = $18&255;
   $22 = $19;
  } else {
   $20 = (___shgetc($0)|0);
   $22 = $20;
  }
  $21 = (($22) + -48)|0;
  $23 = ($21>>>0)>(9);
  $24 = ($1|0)!=(0);
  $or$cond3 = $24 & $23;
  if ($or$cond3) {
   $25 = HEAP32[$4>>2]|0;
   $26 = ($25|0)==(0|0);
   if ($26) {
    $$0 = $13;$$049 = $22;
   } else {
    $27 = HEAP32[$2>>2]|0;
    $28 = ((($27)) + -1|0);
    HEAP32[$2>>2] = $28;
    $$0 = $13;$$049 = $22;
   }
  } else {
   $$0 = $13;$$049 = $22;
  }
  break;
 }
 default: {
  $$0 = 0;$$049 = $11;
 }
 }
 $29 = (($$049) + -48)|0;
 $30 = ($29>>>0)>(9);
 if ($30) {
  $31 = HEAP32[$4>>2]|0;
  $32 = ($31|0)==(0|0);
  if ($32) {
   $100 = -2147483648;$101 = 0;
  } else {
   $33 = HEAP32[$2>>2]|0;
   $34 = ((($33)) + -1|0);
   HEAP32[$2>>2] = $34;
   $100 = -2147483648;$101 = 0;
  }
 } else {
  $$04860 = 0;$$159 = $$049;
  while(1) {
   $35 = ($$04860*10)|0;
   $36 = (($$159) + -48)|0;
   $37 = (($36) + ($35))|0;
   $38 = HEAP32[$2>>2]|0;
   $39 = HEAP32[$4>>2]|0;
   $40 = ($38>>>0)<($39>>>0);
   if ($40) {
    $41 = ((($38)) + 1|0);
    HEAP32[$2>>2] = $41;
    $42 = HEAP8[$38>>0]|0;
    $43 = $42&255;
    $$1$be = $43;
   } else {
    $44 = (___shgetc($0)|0);
    $$1$be = $44;
   }
   $45 = (($$1$be) + -48)|0;
   $46 = ($45>>>0)<(10);
   $47 = ($37|0)<(214748364);
   $48 = $46 & $47;
   if ($48) {
    $$04860 = $37;$$159 = $$1$be;
   } else {
    break;
   }
  }
  $49 = ($37|0)<(0);
  $50 = $49 << 31 >> 31;
  $51 = (($$1$be) + -48)|0;
  $52 = ($51>>>0)<(10);
  if ($52) {
   $$254 = $$1$be;$55 = $37;$56 = $50;
   while(1) {
    $57 = (___muldi3(($55|0),($56|0),10,0)|0);
    $58 = tempRet0;
    $59 = ($$254|0)<(0);
    $60 = $59 << 31 >> 31;
    $61 = (_i64Add(($$254|0),($60|0),-48,-1)|0);
    $62 = tempRet0;
    $63 = (_i64Add(($61|0),($62|0),($57|0),($58|0))|0);
    $64 = tempRet0;
    $65 = HEAP32[$2>>2]|0;
    $66 = HEAP32[$4>>2]|0;
    $67 = ($65>>>0)<($66>>>0);
    if ($67) {
     $68 = ((($65)) + 1|0);
     HEAP32[$2>>2] = $68;
     $69 = HEAP8[$65>>0]|0;
     $70 = $69&255;
     $$2$be = $70;
    } else {
     $71 = (___shgetc($0)|0);
     $$2$be = $71;
    }
    $72 = (($$2$be) + -48)|0;
    $73 = ($72>>>0)<(10);
    $74 = ($64|0)<(21474836);
    $75 = ($63>>>0)<(2061584302);
    $76 = ($64|0)==(21474836);
    $77 = $76 & $75;
    $78 = $74 | $77;
    $79 = $73 & $78;
    if ($79) {
     $$254 = $$2$be;$55 = $63;$56 = $64;
    } else {
     $$2$lcssa = $$2$be;$94 = $63;$95 = $64;
     break;
    }
   }
  } else {
   $$2$lcssa = $$1$be;$94 = $37;$95 = $50;
  }
  $53 = (($$2$lcssa) + -48)|0;
  $54 = ($53>>>0)<(10);
  if ($54) {
   while(1) {
    $80 = HEAP32[$2>>2]|0;
    $81 = HEAP32[$4>>2]|0;
    $82 = ($80>>>0)<($81>>>0);
    if ($82) {
     $83 = ((($80)) + 1|0);
     HEAP32[$2>>2] = $83;
     $84 = HEAP8[$80>>0]|0;
     $85 = $84&255;
     $$3$be = $85;
    } else {
     $86 = (___shgetc($0)|0);
     $$3$be = $86;
    }
    $87 = (($$3$be) + -48)|0;
    $88 = ($87>>>0)<(10);
    if (!($88)) {
     break;
    }
   }
  }
  $89 = HEAP32[$4>>2]|0;
  $90 = ($89|0)==(0|0);
  if (!($90)) {
   $91 = HEAP32[$2>>2]|0;
   $92 = ((($91)) + -1|0);
   HEAP32[$2>>2] = $92;
  }
  $93 = ($$0|0)!=(0);
  $96 = (_i64Subtract(0,0,($94|0),($95|0))|0);
  $97 = tempRet0;
  $98 = $93 ? $96 : $94;
  $99 = $93 ? $97 : $95;
  $100 = $99;$101 = $98;
 }
 tempRet0 = ($100);
 return ($101|0);
}
function _scalbn($0,$1) {
 $0 = +$0;
 $1 = $1|0;
 var $$ = 0, $$0 = 0.0, $$020 = 0, $$1 = 0, $10 = 0.0, $11 = 0, $12 = 0, $13 = 0, $14 = 0.0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0.0, $2 = 0, $20 = 0.0, $3 = 0.0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0.0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($1|0)>(1023);
 if ($2) {
  $3 = $0 * 8.9884656743115795E+307;
  $4 = (($1) + -1023)|0;
  $5 = ($4|0)>(1023);
  $6 = (($1) + -2046)|0;
  if ($5) {
   $7 = $3 * 8.9884656743115795E+307;
   $8 = ($6|0)>(1023);
   $$ = $8 ? 1023 : $6;
   $$0 = $7;$$020 = $$;
  } else {
   $$0 = $3;$$020 = $4;
  }
 } else {
  $9 = ($1|0)<(-1022);
  if ($9) {
   $10 = $0 * 2.2250738585072014E-308;
   $11 = (($1) + 1022)|0;
   $12 = ($11|0)<(-1022);
   $13 = (($1) + 2044)|0;
   if ($12) {
    $14 = $10 * 2.2250738585072014E-308;
    $15 = ($13|0)<(-1022);
    $$1 = $15 ? -1022 : $13;
    $$0 = $14;$$020 = $$1;
   } else {
    $$0 = $10;$$020 = $11;
   }
  } else {
   $$0 = $0;$$020 = $1;
  }
 }
 $16 = (($$020) + 1023)|0;
 $17 = (_bitshift64Shl(($16|0),0,52)|0);
 $18 = tempRet0;
 HEAP32[tempDoublePtr>>2] = $17;HEAP32[tempDoublePtr+4>>2] = $18;$19 = +HEAPF64[tempDoublePtr>>3];
 $20 = $$0 * $19;
 return (+$20);
}
function _copysignl($0,$1) {
 $0 = +$0;
 $1 = +$1;
 var $2 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (+_copysign($0,$1));
 return (+$2);
}
function _scalbnl($0,$1) {
 $0 = +$0;
 $1 = $1|0;
 var $2 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (+_scalbn($0,$1));
 return (+$2);
}
function _fmodl($0,$1) {
 $0 = +$0;
 $1 = +$1;
 var $2 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (+_fmod($0,$1));
 return (+$2);
}
function _fmod($0,$1) {
 $0 = +$0;
 $1 = +$1;
 var $$ = 0.0, $$070 = 0.0, $$071$lcssa = 0, $$07195 = 0, $$073$lcssa = 0, $$073101 = 0, $$172$ph = 0, $$174 = 0, $$275$lcssa = 0, $$27587 = 0, $$376$lcssa = 0, $$37684 = 0, $$lcssa = 0, $10 = 0, $100 = 0, $101 = 0.0, $102 = 0, $103 = 0, $104 = 0, $105 = 0;
 var $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0;
 var $124 = 0, $125 = 0, $126 = 0, $127 = 0.0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0;
 var $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0.0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $16 = 0, $17 = 0;
 var $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0.0, $26 = 0.0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0;
 var $36 = 0, $37 = 0.0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0;
 var $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0;
 var $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0;
 var $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAPF64[tempDoublePtr>>3] = $0;$2 = HEAP32[tempDoublePtr>>2]|0;
 $3 = HEAP32[tempDoublePtr+4>>2]|0;
 HEAPF64[tempDoublePtr>>3] = $1;$4 = HEAP32[tempDoublePtr>>2]|0;
 $5 = HEAP32[tempDoublePtr+4>>2]|0;
 $6 = (_bitshift64Lshr(($2|0),($3|0),52)|0);
 $7 = tempRet0;
 $8 = $6 & 2047;
 $9 = (_bitshift64Lshr(($4|0),($5|0),52)|0);
 $10 = tempRet0;
 $11 = $9 & 2047;
 $12 = $3 & -2147483648;
 $13 = (_bitshift64Shl(($4|0),($5|0),1)|0);
 $14 = tempRet0;
 $15 = ($13|0)==(0);
 $16 = ($14|0)==(0);
 $17 = $15 & $16;
 L1: do {
  if ($17) {
   label = 3;
  } else {
   $18 = $5 & 2147483647;
   $19 = ($18>>>0)>(2146435072);
   $20 = ($4>>>0)>(0);
   $21 = ($18|0)==(2146435072);
   $22 = $21 & $20;
   $23 = $19 | $22;
   $24 = ($8|0)==(2047);
   $or$cond = $23 | $24;
   if ($or$cond) {
    label = 3;
   } else {
    $27 = (_bitshift64Shl(($2|0),($3|0),1)|0);
    $28 = tempRet0;
    $29 = ($28>>>0)>($14>>>0);
    $30 = ($27>>>0)>($13>>>0);
    $31 = ($28|0)==($14|0);
    $32 = $31 & $30;
    $33 = $29 | $32;
    if (!($33)) {
     $34 = ($27|0)==($13|0);
     $35 = ($28|0)==($14|0);
     $36 = $34 & $35;
     $37 = $0 * 0.0;
     $$ = $36 ? $37 : $0;
     return (+$$);
    }
    $38 = ($8|0)==(0);
    if ($38) {
     $39 = (_bitshift64Shl(($2|0),($3|0),12)|0);
     $40 = tempRet0;
     $41 = ($40|0)>(-1);
     $42 = ($39>>>0)>(4294967295);
     $43 = ($40|0)==(-1);
     $44 = $43 & $42;
     $45 = $41 | $44;
     if ($45) {
      $$073101 = 0;$47 = $39;$48 = $40;
      while(1) {
       $46 = (($$073101) + -1)|0;
       $49 = (_bitshift64Shl(($47|0),($48|0),1)|0);
       $50 = tempRet0;
       $51 = ($50|0)>(-1);
       $52 = ($49>>>0)>(4294967295);
       $53 = ($50|0)==(-1);
       $54 = $53 & $52;
       $55 = $51 | $54;
       if ($55) {
        $$073101 = $46;$47 = $49;$48 = $50;
       } else {
        $$073$lcssa = $46;
        break;
       }
      }
     } else {
      $$073$lcssa = 0;
     }
     $56 = (1 - ($$073$lcssa))|0;
     $57 = (_bitshift64Shl(($2|0),($3|0),($56|0))|0);
     $58 = tempRet0;
     $$174 = $$073$lcssa;$85 = $57;$86 = $58;
    } else {
     $59 = $3 & 1048575;
     $60 = $59 | 1048576;
     $$174 = $8;$85 = $2;$86 = $60;
    }
    $61 = ($11|0)==(0);
    if ($61) {
     $62 = (_bitshift64Shl(($4|0),($5|0),12)|0);
     $63 = tempRet0;
     $64 = ($63|0)>(-1);
     $65 = ($62>>>0)>(4294967295);
     $66 = ($63|0)==(-1);
     $67 = $66 & $65;
     $68 = $64 | $67;
     if ($68) {
      $$07195 = 0;$70 = $62;$71 = $63;
      while(1) {
       $69 = (($$07195) + -1)|0;
       $72 = (_bitshift64Shl(($70|0),($71|0),1)|0);
       $73 = tempRet0;
       $74 = ($73|0)>(-1);
       $75 = ($72>>>0)>(4294967295);
       $76 = ($73|0)==(-1);
       $77 = $76 & $75;
       $78 = $74 | $77;
       if ($78) {
        $$07195 = $69;$70 = $72;$71 = $73;
       } else {
        $$071$lcssa = $69;
        break;
       }
      }
     } else {
      $$071$lcssa = 0;
     }
     $79 = (1 - ($$071$lcssa))|0;
     $80 = (_bitshift64Shl(($4|0),($5|0),($79|0))|0);
     $81 = tempRet0;
     $$172$ph = $$071$lcssa;$87 = $80;$88 = $81;
    } else {
     $82 = $5 & 1048575;
     $83 = $82 | 1048576;
     $$172$ph = $11;$87 = $4;$88 = $83;
    }
    $84 = ($$174|0)>($$172$ph|0);
    $89 = (_i64Subtract(($85|0),($86|0),($87|0),($88|0))|0);
    $90 = tempRet0;
    $91 = ($90|0)>(-1);
    $92 = ($89>>>0)>(4294967295);
    $93 = ($90|0)==(-1);
    $94 = $93 & $92;
    $95 = $91 | $94;
    L23: do {
     if ($84) {
      $$27587 = $$174;$154 = $95;$155 = $85;$156 = $86;$96 = $89;$98 = $90;
      while(1) {
       if ($154) {
        $97 = ($96|0)==(0);
        $99 = ($98|0)==(0);
        $100 = $97 & $99;
        if ($100) {
         break;
        } else {
         $102 = $96;$103 = $98;
        }
       } else {
        $102 = $155;$103 = $156;
       }
       $104 = (_bitshift64Shl(($102|0),($103|0),1)|0);
       $105 = tempRet0;
       $106 = (($$27587) + -1)|0;
       $107 = ($106|0)>($$172$ph|0);
       $108 = (_i64Subtract(($104|0),($105|0),($87|0),($88|0))|0);
       $109 = tempRet0;
       $110 = ($109|0)>(-1);
       $111 = ($108>>>0)>(4294967295);
       $112 = ($109|0)==(-1);
       $113 = $112 & $111;
       $114 = $110 | $113;
       if ($107) {
        $$27587 = $106;$154 = $114;$155 = $104;$156 = $105;$96 = $108;$98 = $109;
       } else {
        $$275$lcssa = $106;$$lcssa = $114;$115 = $108;$117 = $109;$157 = $104;$158 = $105;
        break L23;
       }
      }
      $101 = $0 * 0.0;
      $$070 = $101;
      break L1;
     } else {
      $$275$lcssa = $$174;$$lcssa = $95;$115 = $89;$117 = $90;$157 = $85;$158 = $86;
     }
    } while(0);
    if ($$lcssa) {
     $116 = ($115|0)==(0);
     $118 = ($117|0)==(0);
     $119 = $116 & $118;
     if ($119) {
      $127 = $0 * 0.0;
      $$070 = $127;
      break;
     } else {
      $120 = $117;$122 = $115;
     }
    } else {
     $120 = $158;$122 = $157;
    }
    $121 = ($120>>>0)<(1048576);
    $123 = ($122>>>0)<(0);
    $124 = ($120|0)==(1048576);
    $125 = $124 & $123;
    $126 = $121 | $125;
    if ($126) {
     $$37684 = $$275$lcssa;$128 = $122;$129 = $120;
     while(1) {
      $130 = (_bitshift64Shl(($128|0),($129|0),1)|0);
      $131 = tempRet0;
      $132 = (($$37684) + -1)|0;
      $133 = ($131>>>0)<(1048576);
      $134 = ($130>>>0)<(0);
      $135 = ($131|0)==(1048576);
      $136 = $135 & $134;
      $137 = $133 | $136;
      if ($137) {
       $$37684 = $132;$128 = $130;$129 = $131;
      } else {
       $$376$lcssa = $132;$139 = $130;$140 = $131;
       break;
      }
     }
    } else {
     $$376$lcssa = $$275$lcssa;$139 = $122;$140 = $120;
    }
    $138 = ($$376$lcssa|0)>(0);
    if ($138) {
     $141 = (_i64Add(($139|0),($140|0),0,-1048576)|0);
     $142 = tempRet0;
     $143 = (_bitshift64Shl(($$376$lcssa|0),0,52)|0);
     $144 = tempRet0;
     $145 = $141 | $143;
     $146 = $142 | $144;
     $151 = $146;$153 = $145;
    } else {
     $147 = (1 - ($$376$lcssa))|0;
     $148 = (_bitshift64Lshr(($139|0),($140|0),($147|0))|0);
     $149 = tempRet0;
     $151 = $149;$153 = $148;
    }
    $150 = $151 | $12;
    HEAP32[tempDoublePtr>>2] = $153;HEAP32[tempDoublePtr+4>>2] = $150;$152 = +HEAPF64[tempDoublePtr>>3];
    $$070 = $152;
   }
  }
 } while(0);
 if ((label|0) == 3) {
  $25 = $0 * $1;
  $26 = $25 / $25;
  $$070 = $26;
 }
 return (+$$070);
}
function _copysign($0,$1) {
 $0 = +$0;
 $1 = +$1;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAPF64[tempDoublePtr>>3] = $0;$2 = HEAP32[tempDoublePtr>>2]|0;
 $3 = HEAP32[tempDoublePtr+4>>2]|0;
 HEAPF64[tempDoublePtr>>3] = $1;$4 = HEAP32[tempDoublePtr>>2]|0;
 $5 = HEAP32[tempDoublePtr+4>>2]|0;
 $6 = $3 & 2147483647;
 $7 = $5 & -2147483648;
 $8 = $7 | $6;
 HEAP32[tempDoublePtr>>2] = $2;HEAP32[tempDoublePtr+4>>2] = $8;$9 = +HEAPF64[tempDoublePtr>>3];
 return (+$9);
}
function ___string_read($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$027 = 0, $$027$ = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ((($0)) + 84|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (($2) + 256)|0;
 $6 = (_memchr($4,0,$5)|0);
 $7 = ($6|0)==(0|0);
 $8 = $6;
 $9 = $4;
 $10 = (($8) - ($9))|0;
 $$027 = $7 ? $5 : $10;
 $11 = ($$027>>>0)<($2>>>0);
 $$027$ = $11 ? $$027 : $2;
 _memcpy(($1|0),($4|0),($$027$|0))|0;
 $12 = (($4) + ($$027$)|0);
 $13 = ((($0)) + 4|0);
 HEAP32[$13>>2] = $12;
 $14 = (($4) + ($$027)|0);
 $15 = ((($0)) + 8|0);
 HEAP32[$15>>2] = $14;
 HEAP32[$3>>2] = $14;
 return ($$027$|0);
}
function _fseek($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = (___fseeko($0,$1,$2)|0);
 return ($3|0);
}
function _fprintf($0,$1,$varargs) {
 $0 = $0|0;
 $1 = $1|0;
 $varargs = $varargs|0;
 var $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = sp;
 HEAP32[$2>>2] = $varargs;
 $3 = (_vfprintf($0,$1,$2)|0);
 STACKTOP = sp;return ($3|0);
}
function ___fseeko($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $phitmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ((($0)) + 76|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)>(-1);
 if ($5) {
  $7 = (___lockfile($0)|0);
  $phitmp = ($7|0)==(0);
  $8 = (___fseeko_unlocked($0,$1,$2)|0);
  if ($phitmp) {
   $9 = $8;
  } else {
   ___unlockfile($0);
   $9 = $8;
  }
 } else {
  $6 = (___fseeko_unlocked($0,$1,$2)|0);
  $9 = $6;
 }
 return ($9|0);
}
function ___fseeko_unlocked($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $$019 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ($2|0)==(1);
 if ($3) {
  $4 = ((($0)) + 8|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = ((($0)) + 4|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = (($1) - ($5))|0;
  $9 = (($8) + ($7))|0;
  $$019 = $9;
 } else {
  $$019 = $1;
 }
 $10 = ((($0)) + 20|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = ((($0)) + 28|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = ($11>>>0)>($13>>>0);
 if ($14) {
  $15 = ((($0)) + 36|0);
  $16 = HEAP32[$15>>2]|0;
  (FUNCTION_TABLE_iiii[$16 & 31]($0,0,0)|0);
  $17 = HEAP32[$10>>2]|0;
  $18 = ($17|0)==(0|0);
  if ($18) {
   $$0 = -1;
  } else {
   label = 5;
  }
 } else {
  label = 5;
 }
 if ((label|0) == 5) {
  $19 = ((($0)) + 16|0);
  HEAP32[$19>>2] = 0;
  HEAP32[$12>>2] = 0;
  HEAP32[$10>>2] = 0;
  $20 = ((($0)) + 40|0);
  $21 = HEAP32[$20>>2]|0;
  $22 = (FUNCTION_TABLE_iiii[$21 & 31]($0,$$019,$2)|0);
  $23 = ($22|0)<(0);
  if ($23) {
   $$0 = -1;
  } else {
   $24 = ((($0)) + 8|0);
   HEAP32[$24>>2] = 0;
   $25 = ((($0)) + 4|0);
   HEAP32[$25>>2] = 0;
   $26 = HEAP32[$0>>2]|0;
   $27 = $26 & -17;
   HEAP32[$0>>2] = $27;
   $$0 = 0;
  }
 }
 return ($$0|0);
}
function _write($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, $5 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 $3 = $1;
 HEAP32[$vararg_buffer>>2] = $0;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $3;
 $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
 HEAP32[$vararg_ptr2>>2] = $2;
 $4 = (___syscall4(4,($vararg_buffer|0))|0);
 $5 = (___syscall_ret($4)|0);
 STACKTOP = sp;return ($5|0);
}
function _read($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, $5 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 $3 = $1;
 HEAP32[$vararg_buffer>>2] = $0;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $3;
 $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
 HEAP32[$vararg_ptr2>>2] = $2;
 $4 = (___syscall3(3,($vararg_buffer|0))|0);
 $5 = (___syscall_ret($4)|0);
 STACKTOP = sp;return ($5|0);
}
function _atoi($0) {
 $0 = $0|0;
 var $$0 = 0, $$010$lcssa = 0, $$01016 = 0, $$011 = 0, $$1$ph = 0, $$112$ph = 0, $$11215 = 0, $$pre = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $isdigit = 0, $isdigit14 = 0, $isdigittmp = 0, $isdigittmp13 = 0, $isdigittmp17 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $$011 = $0;
 while(1) {
  $1 = HEAP8[$$011>>0]|0;
  $2 = $1 << 24 >> 24;
  $3 = (_isspace($2)|0);
  $4 = ($3|0)==(0);
  $5 = ((($$011)) + 1|0);
  if ($4) {
   break;
  } else {
   $$011 = $5;
  }
 }
 switch ($2|0) {
 case 45:  {
  $$0 = 1;
  label = 5;
  break;
 }
 case 43:  {
  $$0 = 0;
  label = 5;
  break;
 }
 default: {
  $$1$ph = 0;$$112$ph = $$011;$7 = $1;
 }
 }
 if ((label|0) == 5) {
  $$pre = HEAP8[$5>>0]|0;
  $$1$ph = $$0;$$112$ph = $5;$7 = $$pre;
 }
 $6 = $7 << 24 >> 24;
 $isdigittmp13 = (($6) + -48)|0;
 $isdigit14 = ($isdigittmp13>>>0)<(10);
 if ($isdigit14) {
  $$01016 = 0;$$11215 = $$112$ph;$isdigittmp17 = $isdigittmp13;
  while(1) {
   $8 = ($$01016*10)|0;
   $9 = ((($$11215)) + 1|0);
   $10 = (($8) - ($isdigittmp17))|0;
   $11 = HEAP8[$9>>0]|0;
   $12 = $11 << 24 >> 24;
   $isdigittmp = (($12) + -48)|0;
   $isdigit = ($isdigittmp>>>0)<(10);
   if ($isdigit) {
    $$01016 = $10;$$11215 = $9;$isdigittmp17 = $isdigittmp;
   } else {
    $$010$lcssa = $10;
    break;
   }
  }
 } else {
  $$010$lcssa = 0;
 }
 $13 = ($$1$ph|0)!=(0);
 $14 = (0 - ($$010$lcssa))|0;
 $15 = $13 ? $$010$lcssa : $14;
 return ($15|0);
}
function _qsort($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$0 = 0, $$0$i = 0, $$0$i88 = 0, $$067$lcssa = 0, $$06793 = 0, $$068$i$i = 0, $$068$i8$i = 0, $$068$lcssa = 0, $$06892 = 0, $$07$i10$i$ph = 0, $$09$i$i = 0, $$09$i7$i = 0, $$1 = 0, $$169$be = 0, $$169108 = 0, $$2$be = 0, $$2109 = 0, $$pre = 0, $$pre$i = 0, $$pre$i71 = 0;
 var $$pre$i73 = 0, $$pre$i75 = 0, $$pre11$i = 0, $$pre11$i72 = 0, $$pre11$i74 = 0, $$pre11$i76 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0;
 var $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $13 = 0, $14 = 0, $15 = 0, $15$phi = 0, $16 = 0, $17 = 0, $18 = 0;
 var $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0;
 var $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0;
 var $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0;
 var $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond = 0, $or$cond106 = 0, $or$cond97 = 0, $or$cond97107 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 208|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(208|0);
 $4 = sp + 8|0;
 $5 = sp;
 $6 = Math_imul($2, $1)|0;
 $7 = $5;
 $8 = $7;
 HEAP32[$8>>2] = 1;
 $9 = (($7) + 4)|0;
 $10 = $9;
 HEAP32[$10>>2] = 0;
 $11 = ($6|0)==(0);
 if (!($11)) {
  $12 = (0 - ($2))|0;
  $13 = ((($4)) + 4|0);
  HEAP32[$13>>2] = $2;
  HEAP32[$4>>2] = $2;
  $$0 = 2;$15 = $2;$17 = $2;
  while(1) {
   $14 = (($15) + ($2))|0;
   $16 = (($14) + ($17))|0;
   $18 = (($4) + ($$0<<2)|0);
   HEAP32[$18>>2] = $16;
   $19 = ($16>>>0)<($6>>>0);
   $20 = (($$0) + 1)|0;
   if ($19) {
    $15$phi = $17;$$0 = $20;$17 = $16;$15 = $15$phi;
   } else {
    break;
   }
  }
  $21 = (($0) + ($6)|0);
  $22 = (($21) + ($12)|0);
  $23 = ($22>>>0)>($0>>>0);
  $24 = ((($5)) + 4|0);
  if ($23) {
   $25 = $22;
   $$06793 = 1;$$06892 = $0;$27 = 1;
   while(1) {
    $26 = $27 & 3;
    $28 = ($26|0)==(3);
    do {
     if ($28) {
      _sift($$06892,$2,$3,$$06793,$4);
      $$pre$i = HEAP32[$5>>2]|0;
      $$pre11$i = HEAP32[$24>>2]|0;
      $29 = $$pre$i >>> 2;
      $30 = $$pre11$i << 30;
      $31 = $30 | $29;
      HEAP32[$5>>2] = $31;
      $32 = $$pre11$i >>> 2;
      HEAP32[$24>>2] = $32;
      $33 = (($$06793) + 2)|0;
      $$1 = $33;$56 = $31;
     } else {
      $34 = (($$06793) + -1)|0;
      $35 = (($4) + ($34<<2)|0);
      $36 = HEAP32[$35>>2]|0;
      $37 = $$06892;
      $38 = (($25) - ($37))|0;
      $39 = ($36>>>0)<($38>>>0);
      if ($39) {
       _sift($$06892,$2,$3,$$06793,$4);
      } else {
       _trinkle($$06892,$2,$3,$5,$$06793,0,$4);
      }
      $40 = ($$06793|0)==(1);
      if ($40) {
       $$pre$i71 = HEAP32[$24>>2]|0;
       $$pre11$i72 = HEAP32[$5>>2]|0;
       $41 = $$pre$i71 << 1;
       $42 = $$pre11$i72 >>> 31;
       $43 = $42 | $41;
       HEAP32[$24>>2] = $43;
       $44 = $$pre11$i72 << 1;
       HEAP32[$5>>2] = $44;
       $$1 = 0;$56 = $44;
       break;
      }
      $45 = ($34>>>0)>(31);
      if ($45) {
       $46 = (($$06793) + -33)|0;
       $47 = HEAP32[$5>>2]|0;
       HEAP32[$24>>2] = $47;
       HEAP32[$5>>2] = 0;
       $$0$i = $46;$49 = $47;$52 = 0;
      } else {
       $$pre$i75 = HEAP32[$24>>2]|0;
       $$pre11$i76 = HEAP32[$5>>2]|0;
       $$0$i = $34;$49 = $$pre$i75;$52 = $$pre11$i76;
      }
      $48 = $49 << $$0$i;
      $50 = (32 - ($$0$i))|0;
      $51 = $52 >>> $50;
      $53 = $51 | $48;
      HEAP32[$24>>2] = $53;
      $54 = $52 << $$0$i;
      HEAP32[$5>>2] = $54;
      $$1 = 1;$56 = $54;
     }
    } while(0);
    $55 = $56 | 1;
    HEAP32[$5>>2] = $55;
    $57 = (($$06892) + ($2)|0);
    $58 = ($57>>>0)<($22>>>0);
    if ($58) {
     $$06793 = $$1;$$06892 = $57;$27 = $55;
    } else {
     $$067$lcssa = $$1;$$068$lcssa = $57;
     break;
    }
   }
  } else {
   $$067$lcssa = 1;$$068$lcssa = $0;
  }
  _trinkle($$068$lcssa,$2,$3,$5,$$067$lcssa,0,$4);
  $59 = ((($5)) + 4|0);
  $60 = ($$067$lcssa|0)==(1);
  $61 = HEAP32[$5>>2]|0;
  $62 = ($61|0)==(1);
  $or$cond106 = $60 & $62;
  $63 = HEAP32[$59>>2]|0;
  $64 = ($63|0)==(0);
  $or$cond97107 = $or$cond106 & $64;
  if (!($or$cond97107)) {
   $$169108 = $$068$lcssa;$$2109 = $$067$lcssa;$123 = $64;$67 = $61;$76 = $63;
   while(1) {
    $65 = ($$2109|0)<(2);
    if ($65) {
     $66 = (($67) + -1)|0;
     $68 = ($66|0)==(0);
     do {
      if ($68) {
       $86 = 32;
       label = 28;
      } else {
       $69 = $66 & 1;
       $70 = ($69|0)==(0);
       if ($70) {
        $$068$i$i = $66;$$09$i$i = 0;
        while(1) {
         $71 = (($$09$i$i) + 1)|0;
         $72 = $$068$i$i >>> 1;
         $73 = $72 & 1;
         $74 = ($73|0)==(0);
         if ($74) {
          $$068$i$i = $72;$$09$i$i = $71;
         } else {
          $83 = $71;
          break;
         }
        }
       } else {
        if ($123) {
         $$07$i10$i$ph = 32;
        } else {
         $75 = $76 & 1;
         $77 = ($75|0)==(0);
         if ($77) {
          $$068$i8$i = $76;$$09$i7$i = 0;
         } else {
          $$0$i88 = 0;$88 = $67;$91 = $76;$95 = 0;
          break;
         }
         while(1) {
          $78 = (($$09$i7$i) + 1)|0;
          $79 = $$068$i8$i >>> 1;
          $80 = $79 & 1;
          $81 = ($80|0)==(0);
          if ($81) {
           $$068$i8$i = $79;$$09$i7$i = $78;
          } else {
           $$07$i10$i$ph = $78;
           break;
          }
         }
        }
        $82 = (($$07$i10$i$ph) + 32)|0;
        $83 = $82;
       }
       $84 = ($83>>>0)>(31);
       if ($84) {
        $86 = $83;
        label = 28;
       } else {
        $$0$i88 = $83;$88 = $67;$91 = $76;$95 = $83;
       }
      }
     } while(0);
     if ((label|0) == 28) {
      label = 0;
      $85 = (($86) + -32)|0;
      HEAP32[$5>>2] = $76;
      HEAP32[$24>>2] = 0;
      $$0$i88 = $85;$88 = $76;$91 = 0;$95 = $86;
     }
     $87 = $88 >>> $$0$i88;
     $89 = (32 - ($$0$i88))|0;
     $90 = $91 << $89;
     $92 = $90 | $87;
     HEAP32[$5>>2] = $92;
     $93 = $91 >>> $$0$i88;
     HEAP32[$24>>2] = $93;
     $94 = (($95) + ($$2109))|0;
     $$pre = (($$169108) + ($12)|0);
     $$169$be = $$pre;$$2$be = $94;
    } else {
     $96 = $76 << 2;
     $97 = $67 >>> 30;
     $98 = $97 | $96;
     $99 = (($$2109) + -2)|0;
     $100 = $67 << 1;
     $101 = $100 & 2147483646;
     $102 = $97 << 31;
     $103 = $101 | $102;
     $104 = $103 ^ 3;
     HEAP32[$5>>2] = $104;
     $105 = $98 >>> 1;
     HEAP32[$24>>2] = $105;
     $106 = (($4) + ($99<<2)|0);
     $107 = HEAP32[$106>>2]|0;
     $108 = (0 - ($107))|0;
     $109 = (($$169108) + ($108)|0);
     $110 = (($109) + ($12)|0);
     $111 = (($$2109) + -1)|0;
     _trinkle($110,$2,$3,$5,$111,1,$4);
     $$pre$i73 = HEAP32[$24>>2]|0;
     $$pre11$i74 = HEAP32[$5>>2]|0;
     $112 = $$pre$i73 << 1;
     $113 = $$pre11$i74 >>> 31;
     $114 = $113 | $112;
     HEAP32[$24>>2] = $114;
     $115 = $$pre11$i74 << 1;
     $116 = $115 | 1;
     HEAP32[$5>>2] = $116;
     $117 = (($$169108) + ($12)|0);
     _trinkle($117,$2,$3,$5,$99,1,$4);
     $$169$be = $117;$$2$be = $99;
    }
    $118 = ($$2$be|0)==(1);
    $119 = HEAP32[$5>>2]|0;
    $120 = ($119|0)==(1);
    $or$cond = $118 & $120;
    $121 = HEAP32[$59>>2]|0;
    $122 = ($121|0)==(0);
    $or$cond97 = $or$cond & $122;
    if ($or$cond97) {
     break;
    } else {
     $$169108 = $$169$be;$$2109 = $$2$be;$123 = $122;$67 = $119;$76 = $121;
    }
   }
  }
 }
 STACKTOP = sp;return;
}
function _sift($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$0$lcssa = 0, $$029$be = 0, $$02932 = 0, $$030$be = 0, $$03031 = 0, $$033 = 0, $$pre = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 240|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(240|0);
 $5 = sp;
 HEAP32[$5>>2] = $0;
 $6 = ($3|0)>(1);
 L1: do {
  if ($6) {
   $7 = (0 - ($1))|0;
   $$02932 = $0;$$03031 = $3;$$033 = 1;$14 = $0;
   while(1) {
    $8 = (($$02932) + ($7)|0);
    $9 = (($$03031) + -2)|0;
    $10 = (($4) + ($9<<2)|0);
    $11 = HEAP32[$10>>2]|0;
    $12 = (0 - ($11))|0;
    $13 = (($8) + ($12)|0);
    $15 = (FUNCTION_TABLE_iii[$2 & 31]($14,$13)|0);
    $16 = ($15|0)>(-1);
    if ($16) {
     $17 = (FUNCTION_TABLE_iii[$2 & 31]($14,$8)|0);
     $18 = ($17|0)>(-1);
     if ($18) {
      $$0$lcssa = $$033;
      break L1;
     }
    }
    $19 = (FUNCTION_TABLE_iii[$2 & 31]($13,$8)|0);
    $20 = ($19|0)>(-1);
    $21 = (($$033) + 1)|0;
    $22 = (($5) + ($$033<<2)|0);
    if ($20) {
     HEAP32[$22>>2] = $13;
     $23 = (($$03031) + -1)|0;
     $$029$be = $13;$$030$be = $23;
    } else {
     HEAP32[$22>>2] = $8;
     $$029$be = $8;$$030$be = $9;
    }
    $24 = ($$030$be|0)>(1);
    if (!($24)) {
     $$0$lcssa = $21;
     break L1;
    }
    $$pre = HEAP32[$5>>2]|0;
    $$02932 = $$029$be;$$03031 = $$030$be;$$033 = $21;$14 = $$pre;
   }
  } else {
   $$0$lcssa = 1;
  }
 } while(0);
 _cycle($1,$5,$$0$lcssa);
 STACKTOP = sp;return;
}
function _trinkle($0,$1,$2,$3,$4,$5,$6) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 var $$0$i = 0, $$0$lcssa = 0, $$0$lcssa84 = 0, $$045$lcssa = 0, $$045$lcssa83 = 0, $$0456196 = 0, $$046$lcssa = 0, $$046$lcssa82 = 0, $$0466097 = 0, $$047$lcssa = 0, $$0475998 = 0, $$06295 = 0, $$06295$phi = 0, $$068$i$i = 0, $$068$i8$i = 0, $$07$i10$i$ph = 0, $$09$i$i = 0, $$09$i7$i = 0, $$pre = 0, $$sroa$0$05899 = 0;
 var $$sroa$8$056100 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0;
 var $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $8 = 0, $9 = 0, $or$cond = 0, $phitmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 240|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(240|0);
 $7 = sp;
 $8 = HEAP32[$3>>2]|0;
 $9 = ((($3)) + 4|0);
 $10 = HEAP32[$9>>2]|0;
 HEAP32[$7>>2] = $0;
 $11 = (0 - ($1))|0;
 $12 = ($8|0)!=(1);
 $13 = ($10|0)!=(0);
 $14 = $13 | $12;
 L1: do {
  if ($14) {
   $15 = (($6) + ($4<<2)|0);
   $16 = HEAP32[$15>>2]|0;
   $17 = (0 - ($16))|0;
   $18 = (($0) + ($17)|0);
   $19 = (FUNCTION_TABLE_iii[$2 & 31]($18,$0)|0);
   $20 = ($19|0)<(1);
   if ($20) {
    $$0$lcssa = $0;$$045$lcssa = 1;$$046$lcssa = $4;$$047$lcssa = $5;
    label = 18;
   } else {
    $phitmp = ($5|0)==(0);
    $$0456196 = 1;$$0466097 = $4;$$0475998 = $phitmp;$$06295 = $0;$$sroa$0$05899 = $8;$$sroa$8$056100 = $10;$26 = $18;
    while(1) {
     $21 = ($$0466097|0)>(1);
     $or$cond = $$0475998 & $21;
     if ($or$cond) {
      $22 = (($$06295) + ($11)|0);
      $23 = (($$0466097) + -2)|0;
      $24 = (($6) + ($23<<2)|0);
      $25 = HEAP32[$24>>2]|0;
      $27 = (FUNCTION_TABLE_iii[$2 & 31]($22,$26)|0);
      $28 = ($27|0)>(-1);
      if ($28) {
       $$0$lcssa84 = $$06295;$$045$lcssa83 = $$0456196;$$046$lcssa82 = $$0466097;
       label = 19;
       break L1;
      }
      $29 = (0 - ($25))|0;
      $30 = (($22) + ($29)|0);
      $31 = (FUNCTION_TABLE_iii[$2 & 31]($30,$26)|0);
      $32 = ($31|0)>(-1);
      if ($32) {
       $$0$lcssa84 = $$06295;$$045$lcssa83 = $$0456196;$$046$lcssa82 = $$0466097;
       label = 19;
       break L1;
      }
     }
     $33 = (($$0456196) + 1)|0;
     $34 = (($7) + ($$0456196<<2)|0);
     HEAP32[$34>>2] = $26;
     $35 = (($$sroa$0$05899) + -1)|0;
     $36 = ($35|0)==(0);
     do {
      if ($36) {
       $73 = 0;$74 = 32;
       label = 15;
      } else {
       $37 = $35 & 1;
       $38 = ($37|0)==(0);
       if ($38) {
        $$068$i$i = $35;$$09$i$i = 0;
        while(1) {
         $39 = (($$09$i$i) + 1)|0;
         $40 = $$068$i$i >>> 1;
         $41 = $40 & 1;
         $42 = ($41|0)==(0);
         if ($42) {
          $$068$i$i = $40;$$09$i$i = $39;
         } else {
          $51 = $39;
          break;
         }
        }
       } else {
        $43 = ($$sroa$8$056100|0)==(0);
        if ($43) {
         $$07$i10$i$ph = 32;
        } else {
         $44 = $$sroa$8$056100 & 1;
         $45 = ($44|0)==(0);
         if ($45) {
          $$068$i8$i = $$sroa$8$056100;$$09$i7$i = 0;
         } else {
          $$0$i = 0;$55 = $$sroa$0$05899;$58 = $$sroa$8$056100;$62 = 0;
          break;
         }
         while(1) {
          $46 = (($$09$i7$i) + 1)|0;
          $47 = $$068$i8$i >>> 1;
          $48 = $47 & 1;
          $49 = ($48|0)==(0);
          if ($49) {
           $$068$i8$i = $47;$$09$i7$i = $46;
          } else {
           $$07$i10$i$ph = $46;
           break;
          }
         }
        }
        $50 = (($$07$i10$i$ph) + 32)|0;
        $51 = $50;
       }
       $52 = ($51>>>0)>(31);
       $53 = (($51) + -32)|0;
       if ($52) {
        $73 = $53;$74 = $51;
        label = 15;
       } else {
        $$0$i = $51;$55 = $$sroa$0$05899;$58 = $$sroa$8$056100;$62 = $51;
       }
      }
     } while(0);
     if ((label|0) == 15) {
      label = 0;
      $$0$i = $73;$55 = $$sroa$8$056100;$58 = 0;$62 = $74;
     }
     $54 = $55 >>> $$0$i;
     $56 = (32 - ($$0$i))|0;
     $57 = $58 << $56;
     $59 = $57 | $54;
     $60 = $58 >>> $$0$i;
     $61 = (($62) + ($$0466097))|0;
     $63 = ($59|0)!=(1);
     $64 = ($60|0)!=(0);
     $65 = $64 | $63;
     if (!($65)) {
      $$0$lcssa84 = $26;$$045$lcssa83 = $33;$$046$lcssa82 = $61;
      label = 19;
      break L1;
     }
     $$pre = HEAP32[$7>>2]|0;
     $66 = (($6) + ($61<<2)|0);
     $67 = HEAP32[$66>>2]|0;
     $68 = (0 - ($67))|0;
     $69 = (($26) + ($68)|0);
     $70 = (FUNCTION_TABLE_iii[$2 & 31]($69,$$pre)|0);
     $71 = ($70|0)<(1);
     if ($71) {
      $$0$lcssa = $26;$$045$lcssa = $33;$$046$lcssa = $61;$$047$lcssa = 0;
      label = 18;
      break;
     } else {
      $$06295$phi = $26;$$0456196 = $33;$$0466097 = $61;$$0475998 = 1;$$sroa$0$05899 = $59;$$sroa$8$056100 = $60;$26 = $69;$$06295 = $$06295$phi;
     }
    }
   }
  } else {
   $$0$lcssa = $0;$$045$lcssa = 1;$$046$lcssa = $4;$$047$lcssa = $5;
   label = 18;
  }
 } while(0);
 if ((label|0) == 18) {
  $72 = ($$047$lcssa|0)==(0);
  if ($72) {
   $$0$lcssa84 = $$0$lcssa;$$045$lcssa83 = $$045$lcssa;$$046$lcssa82 = $$046$lcssa;
   label = 19;
  }
 }
 if ((label|0) == 19) {
  _cycle($1,$7,$$045$lcssa83);
  _sift($$0$lcssa84,$1,$2,$$046$lcssa82,$6);
 }
 STACKTOP = sp;return;
}
function _cycle($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$02527 = 0, $$026 = 0, $$pre = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $exitcond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 256|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(256|0);
 $3 = sp;
 $4 = ($2|0)<(2);
 L1: do {
  if (!($4)) {
   $5 = (($1) + ($2<<2)|0);
   HEAP32[$5>>2] = $3;
   $6 = ($0|0)==(0);
   if (!($6)) {
    $$02527 = $0;$10 = $3;
    while(1) {
     $7 = ($$02527>>>0)>(256);
     $8 = $7 ? 256 : $$02527;
     $9 = HEAP32[$1>>2]|0;
     _memcpy(($10|0),($9|0),($8|0))|0;
     $$026 = 0;
     while(1) {
      $11 = (($1) + ($$026<<2)|0);
      $12 = HEAP32[$11>>2]|0;
      $13 = (($$026) + 1)|0;
      $14 = (($1) + ($13<<2)|0);
      $15 = HEAP32[$14>>2]|0;
      _memcpy(($12|0),($15|0),($8|0))|0;
      $16 = HEAP32[$11>>2]|0;
      $17 = (($16) + ($8)|0);
      HEAP32[$11>>2] = $17;
      $exitcond = ($13|0)==($2|0);
      if ($exitcond) {
       break;
      } else {
       $$026 = $13;
      }
     }
     $18 = (($$02527) - ($8))|0;
     $19 = ($18|0)==(0);
     if ($19) {
      break L1;
     }
     $$pre = HEAP32[$5>>2]|0;
     $$02527 = $18;$10 = $$pre;
    }
   }
  }
 } while(0);
 STACKTOP = sp;return;
}
function _wcstox($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0.0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 192|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(192|0);
 $3 = sp + 128|0;
 $4 = sp;
 $5 = ((($4)) + 8|0);
 $6 = ((($4)) + 4|0);
 $7 = ((($3)) + 4|0);
 $8 = ((($4)) + 44|0);
 dest=$4; stop=dest+124|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 HEAP32[$8>>2] = $7;
 $9 = ((($4)) + 48|0);
 HEAP32[$9>>2] = 60;
 $10 = ((($4)) + 76|0);
 HEAP32[$10>>2] = -1;
 $11 = ((($4)) + 32|0);
 HEAP32[$11>>2] = 31;
 $$0 = $0;
 while(1) {
  $12 = HEAP32[$$0>>2]|0;
  $13 = (_iswspace($12)|0);
  $14 = ($13|0)==(0);
  $15 = ((($$0)) + 4|0);
  if ($14) {
   break;
  } else {
   $$0 = $15;
  }
 }
 $16 = ((($4)) + 84|0);
 HEAP32[$16>>2] = $$0;
 ___shlim($4,0);
 $17 = (+___floatscan($4,$2,1));
 $18 = ($1|0)==(0|0);
 if (!($18)) {
  $19 = ((($4)) + 108|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = HEAP32[$6>>2]|0;
  $22 = HEAP32[$5>>2]|0;
  $23 = (($21) - ($22))|0;
  $24 = (($23) + ($20))|0;
  $25 = ($24|0)==(0);
  $26 = (($$0) + ($24<<2)|0);
  $27 = $25 ? $0 : $26;
  HEAP32[$1>>2] = $27;
 }
 STACKTOP = sp;return (+$17);
}
function _do_read($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$ = 0, $$0$lcssa = 0, $$029 = 0, $$031 = 0, $$cast = 0, $$pre = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ((($0)) + 84|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)!=(0);
 $$ = $6 ? $4 : 6184;
 $7 = ((($0)) + 48|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ($8|0)==(0);
 $$pre = ((($0)) + 44|0);
 L1: do {
  if ($9) {
   $$0$lcssa = 0;
  } else {
   $$031 = 0;
   while(1) {
    $10 = (($$) + ($$031<<2)|0);
    $11 = HEAP32[$10>>2]|0;
    $12 = ($11|0)==(0);
    if ($12) {
     $$0$lcssa = $$031;
     break L1;
    }
    $13 = ($11|0)<(128);
    $14 = $11&255;
    $15 = $13 ? $14 : 64;
    $16 = HEAP32[$$pre>>2]|0;
    $17 = (($16) + ($$031)|0);
    HEAP8[$17>>0] = $15;
    $18 = (($$031) + 1)|0;
    $19 = HEAP32[$7>>2]|0;
    $20 = ($18>>>0)<($19>>>0);
    if ($20) {
     $$031 = $18;
    } else {
     $$0$lcssa = $18;
     break;
    }
   }
  }
 } while(0);
 $21 = HEAP32[$$pre>>2]|0;
 $22 = ((($0)) + 4|0);
 HEAP32[$22>>2] = $21;
 $$cast = $21;
 $23 = (($$cast) + ($$0$lcssa)|0);
 $24 = ((($0)) + 8|0);
 HEAP32[$24>>2] = $23;
 $25 = (($$) + ($$0$lcssa<<2)|0);
 HEAP32[$3>>2] = $25;
 $26 = ($$0$lcssa|0)!=(0);
 $27 = ($2|0)!=(0);
 $or$cond = $27 & $26;
 if ($or$cond) {
  $28 = ((($$cast)) + 1|0);
  HEAP32[$22>>2] = $28;
  $29 = HEAP8[$$cast>>0]|0;
  HEAP8[$1>>0] = $29;
  $$029 = 1;
 } else {
  $$029 = 0;
 }
 return ($$029|0);
}
function _wcstod($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (+_wcstox($0,$1,1));
 return (+$2);
}
function _lseek($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr3 = 0, $vararg_ptr4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $vararg_buffer = sp;
 $3 = sp + 20|0;
 $4 = $3;
 HEAP32[$vararg_buffer>>2] = $0;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = 0;
 $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
 HEAP32[$vararg_ptr2>>2] = $1;
 $vararg_ptr3 = ((($vararg_buffer)) + 12|0);
 HEAP32[$vararg_ptr3>>2] = $4;
 $vararg_ptr4 = ((($vararg_buffer)) + 16|0);
 HEAP32[$vararg_ptr4>>2] = $2;
 $5 = (___syscall140(140,($vararg_buffer|0))|0);
 $6 = (___syscall_ret($5)|0);
 $7 = ($6|0)!=(0);
 $8 = HEAP32[$3>>2]|0;
 $9 = $7 ? -1 : $8;
 STACKTOP = sp;return ($9|0);
}
function _fputc($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($1)) + 76|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)<(0);
 if ($4) {
  label = 3;
 } else {
  $5 = (___lockfile($1)|0);
  $6 = ($5|0)==(0);
  if ($6) {
   label = 3;
  } else {
   $20 = $0&255;
   $21 = $0 & 255;
   $22 = ((($1)) + 75|0);
   $23 = HEAP8[$22>>0]|0;
   $24 = $23 << 24 >> 24;
   $25 = ($21|0)==($24|0);
   if ($25) {
    label = 10;
   } else {
    $26 = ((($1)) + 20|0);
    $27 = HEAP32[$26>>2]|0;
    $28 = ((($1)) + 16|0);
    $29 = HEAP32[$28>>2]|0;
    $30 = ($27>>>0)<($29>>>0);
    if ($30) {
     $31 = ((($27)) + 1|0);
     HEAP32[$26>>2] = $31;
     HEAP8[$27>>0] = $20;
     $33 = $21;
    } else {
     label = 10;
    }
   }
   if ((label|0) == 10) {
    $32 = (___overflow($1,$0)|0);
    $33 = $32;
   }
   ___unlockfile($1);
   $$0 = $33;
  }
 }
 do {
  if ((label|0) == 3) {
   $7 = $0&255;
   $8 = $0 & 255;
   $9 = ((($1)) + 75|0);
   $10 = HEAP8[$9>>0]|0;
   $11 = $10 << 24 >> 24;
   $12 = ($8|0)==($11|0);
   if (!($12)) {
    $13 = ((($1)) + 20|0);
    $14 = HEAP32[$13>>2]|0;
    $15 = ((($1)) + 16|0);
    $16 = HEAP32[$15>>2]|0;
    $17 = ($14>>>0)<($16>>>0);
    if ($17) {
     $18 = ((($14)) + 1|0);
     HEAP32[$13>>2] = $18;
     HEAP8[$14>>0] = $7;
     $$0 = $8;
     break;
    }
   }
   $19 = (___overflow($1,$0)|0);
   $$0 = $19;
  }
 } while(0);
 return ($$0|0);
}
function _remove($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $1 = $0;
 HEAP32[$vararg_buffer>>2] = $1;
 $2 = (___syscall10(10,($vararg_buffer|0))|0);
 $3 = ($2|0)==(-21);
 if ($3) {
  HEAP32[$vararg_buffer1>>2] = $1;
  $4 = (___syscall40(40,($vararg_buffer1|0))|0);
  $$0 = $4;
 } else {
  $$0 = $2;
 }
 $5 = (___syscall_ret($$0)|0);
 STACKTOP = sp;return ($5|0);
}
function _fread($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$ = 0, $$0 = 0, $$054$ph = 0, $$05460 = 0, $$056$ph = 0, $$05659 = 0, $$57 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = Math_imul($2, $1)|0;
 $5 = ($1|0)==(0);
 $$ = $5 ? 0 : $2;
 $6 = ((($3)) + 76|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($7|0)>(-1);
 if ($8) {
  $9 = (___lockfile($3)|0);
  $35 = $9;
 } else {
  $35 = 0;
 }
 $10 = ((($3)) + 74|0);
 $11 = HEAP8[$10>>0]|0;
 $12 = $11 << 24 >> 24;
 $13 = (($12) + 255)|0;
 $14 = $13 | $12;
 $15 = $14&255;
 HEAP8[$10>>0] = $15;
 $16 = ((($3)) + 8|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = ((($3)) + 4|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = (($17) - ($19))|0;
 $21 = ($20|0)>(0);
 $22 = $19;
 if ($21) {
  $23 = ($20>>>0)<($4>>>0);
  $$57 = $23 ? $20 : $4;
  _memcpy(($0|0),($22|0),($$57|0))|0;
  $24 = (($22) + ($$57)|0);
  HEAP32[$18>>2] = $24;
  $25 = (($0) + ($$57)|0);
  $26 = (($4) - ($$57))|0;
  $$054$ph = $26;$$056$ph = $25;
 } else {
  $$054$ph = $4;$$056$ph = $0;
 }
 $27 = ($$054$ph|0)==(0);
 L7: do {
  if ($27) {
   label = 13;
  } else {
   $28 = ((($3)) + 32|0);
   $$05460 = $$054$ph;$$05659 = $$056$ph;
   while(1) {
    $29 = (___toread($3)|0);
    $30 = ($29|0)==(0);
    if (!($30)) {
     break;
    }
    $31 = HEAP32[$28>>2]|0;
    $32 = (FUNCTION_TABLE_iiii[$31 & 31]($3,$$05659,$$05460)|0);
    $33 = (($32) + 1)|0;
    $34 = ($33>>>0)<(2);
    if ($34) {
     break;
    }
    $39 = (($$05460) - ($32))|0;
    $40 = (($$05659) + ($32)|0);
    $41 = ($39|0)==(0);
    if ($41) {
     label = 13;
     break L7;
    } else {
     $$05460 = $39;$$05659 = $40;
    }
   }
   $36 = ($35|0)==(0);
   if (!($36)) {
    ___unlockfile($3);
   }
   $37 = (($4) - ($$05460))|0;
   $38 = (($37>>>0) / ($1>>>0))&-1;
   $$0 = $38;
  }
 } while(0);
 if ((label|0) == 13) {
  $42 = ($35|0)==(0);
  if ($42) {
   $$0 = $$;
  } else {
   ___unlockfile($3);
   $$0 = $$;
  }
 }
 return ($$0|0);
}
function _ungetc($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$1 = 0, $$pr = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($0|0)==(-1);
 do {
  if ($2) {
   $$1 = -1;
  } else {
   $3 = ((($1)) + 76|0);
   $4 = HEAP32[$3>>2]|0;
   $5 = ($4|0)>(-1);
   if ($5) {
    $6 = (___lockfile($1)|0);
    $16 = $6;
   } else {
    $16 = 0;
   }
   $7 = ((($1)) + 4|0);
   $8 = HEAP32[$7>>2]|0;
   $9 = ($8|0)==(0|0);
   if ($9) {
    (___toread($1)|0);
    $$pr = HEAP32[$7>>2]|0;
    $10 = ($$pr|0)==(0|0);
    if (!($10)) {
     $14 = $$pr;
     label = 6;
    }
   } else {
    $14 = $8;
    label = 6;
   }
   if ((label|0) == 6) {
    $11 = ((($1)) + 44|0);
    $12 = HEAP32[$11>>2]|0;
    $13 = ((($12)) + -8|0);
    $15 = ($14>>>0)>($13>>>0);
    if ($15) {
     $18 = $0&255;
     $19 = ((($14)) + -1|0);
     HEAP32[$7>>2] = $19;
     HEAP8[$19>>0] = $18;
     $20 = HEAP32[$1>>2]|0;
     $21 = $20 & -17;
     HEAP32[$1>>2] = $21;
     $22 = ($16|0)==(0);
     if ($22) {
      $$1 = $0;
      break;
     }
     ___unlockfile($1);
     $$1 = $0;
     break;
    }
   }
   $17 = ($16|0)==(0);
   if ($17) {
    $$1 = -1;
   } else {
    ___unlockfile($1);
    $$1 = -1;
   }
  }
 } while(0);
 return ($$1|0);
}
function _fgetc($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 76|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)<(0);
 if ($3) {
  label = 3;
 } else {
  $4 = (___lockfile($0)|0);
  $5 = ($4|0)==(0);
  if ($5) {
   label = 3;
  } else {
   $15 = ((($0)) + 4|0);
   $16 = HEAP32[$15>>2]|0;
   $17 = ((($0)) + 8|0);
   $18 = HEAP32[$17>>2]|0;
   $19 = ($16>>>0)<($18>>>0);
   if ($19) {
    $20 = ((($16)) + 1|0);
    HEAP32[$15>>2] = $20;
    $21 = HEAP8[$16>>0]|0;
    $22 = $21&255;
    $24 = $22;
   } else {
    $23 = (___uflow($0)|0);
    $24 = $23;
   }
   $$0 = $24;
  }
 }
 do {
  if ((label|0) == 3) {
   $6 = ((($0)) + 4|0);
   $7 = HEAP32[$6>>2]|0;
   $8 = ((($0)) + 8|0);
   $9 = HEAP32[$8>>2]|0;
   $10 = ($7>>>0)<($9>>>0);
   if ($10) {
    $11 = ((($7)) + 1|0);
    HEAP32[$6>>2] = $11;
    $12 = HEAP8[$7>>0]|0;
    $13 = $12&255;
    $$0 = $13;
    break;
   } else {
    $14 = (___uflow($0)|0);
    $$0 = $14;
    break;
   }
  }
 } while(0);
 return ($$0|0);
}
function _malloc($0) {
 $0 = $0|0;
 var $$$0190$i = 0, $$$0191$i = 0, $$$4349$i = 0, $$$i = 0, $$0 = 0, $$0$i$i = 0, $$0$i$i$i = 0, $$0$i17$i = 0, $$0$i18$i = 0, $$01$i$i = 0, $$0187$i = 0, $$0189$i = 0, $$0190$i = 0, $$0191$i = 0, $$0197 = 0, $$0199 = 0, $$0206$i$i = 0, $$0207$i$i = 0, $$0211$i$i = 0, $$0212$i$i = 0;
 var $$024370$i = 0, $$0286$i$i = 0, $$0287$i$i = 0, $$0288$i$i = 0, $$0294$i$i = 0, $$0295$i$i = 0, $$0340$i = 0, $$0342$i = 0, $$0343$i = 0, $$0345$i = 0, $$0351$i = 0, $$0356$i = 0, $$0357$$i = 0, $$0357$i = 0, $$0359$i = 0, $$0360$i = 0, $$0366$i = 0, $$1194$i = 0, $$1196$i = 0, $$124469$i = 0;
 var $$1290$i$i = 0, $$1292$i$i = 0, $$1341$i = 0, $$1346$i = 0, $$1361$i = 0, $$1368$i = 0, $$1372$i = 0, $$2247$ph$i = 0, $$2253$ph$i = 0, $$2353$i = 0, $$3$i = 0, $$3$i$i = 0, $$3$i201 = 0, $$3348$i = 0, $$3370$i = 0, $$4$lcssa$i = 0, $$413$i = 0, $$4349$lcssa$i = 0, $$434912$i = 0, $$4355$$4$i = 0;
 var $$4355$ph$i = 0, $$435511$i = 0, $$5256$i = 0, $$723947$i = 0, $$748$i = 0, $$not$i = 0, $$pre = 0, $$pre$i = 0, $$pre$i$i = 0, $$pre$i19$i = 0, $$pre$i205 = 0, $$pre$i208 = 0, $$pre$phi$i$iZ2D = 0, $$pre$phi$i20$iZ2D = 0, $$pre$phi$i206Z2D = 0, $$pre$phi$iZ2D = 0, $$pre$phi10$i$iZ2D = 0, $$pre$phiZ2D = 0, $$pre9$i$i = 0, $1 = 0;
 var $10 = 0, $100 = 0, $1000 = 0, $1001 = 0, $1002 = 0, $1003 = 0, $1004 = 0, $1005 = 0, $1006 = 0, $1007 = 0, $1008 = 0, $1009 = 0, $101 = 0, $1010 = 0, $1011 = 0, $1012 = 0, $1013 = 0, $1014 = 0, $1015 = 0, $1016 = 0;
 var $1017 = 0, $1018 = 0, $1019 = 0, $102 = 0, $1020 = 0, $1021 = 0, $1022 = 0, $1023 = 0, $1024 = 0, $1025 = 0, $1026 = 0, $1027 = 0, $1028 = 0, $1029 = 0, $103 = 0, $1030 = 0, $1031 = 0, $1032 = 0, $1033 = 0, $1034 = 0;
 var $1035 = 0, $1036 = 0, $1037 = 0, $1038 = 0, $1039 = 0, $104 = 0, $1040 = 0, $1041 = 0, $1042 = 0, $1043 = 0, $1044 = 0, $1045 = 0, $1046 = 0, $1047 = 0, $1048 = 0, $1049 = 0, $105 = 0, $1050 = 0, $1051 = 0, $1052 = 0;
 var $1053 = 0, $1054 = 0, $1055 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0;
 var $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0;
 var $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0;
 var $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0;
 var $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0;
 var $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0;
 var $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0;
 var $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0;
 var $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0;
 var $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0;
 var $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0;
 var $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0;
 var $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0;
 var $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0;
 var $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0;
 var $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0;
 var $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0;
 var $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0;
 var $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0;
 var $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0;
 var $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0;
 var $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0;
 var $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0;
 var $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0;
 var $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0;
 var $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0;
 var $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0;
 var $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0;
 var $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0;
 var $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0;
 var $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0;
 var $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0;
 var $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0;
 var $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0;
 var $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0;
 var $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0;
 var $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0, $77 = 0;
 var $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0, $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0, $788 = 0;
 var $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0, $799 = 0, $8 = 0, $80 = 0, $800 = 0, $801 = 0, $802 = 0, $803 = 0, $804 = 0, $805 = 0;
 var $806 = 0, $807 = 0, $808 = 0, $809 = 0, $81 = 0, $810 = 0, $811 = 0, $812 = 0, $813 = 0, $814 = 0, $815 = 0, $816 = 0, $817 = 0, $818 = 0, $819 = 0, $82 = 0, $820 = 0, $821 = 0, $822 = 0, $823 = 0;
 var $824 = 0, $825 = 0, $826 = 0, $827 = 0, $828 = 0, $829 = 0, $83 = 0, $830 = 0, $831 = 0, $832 = 0, $833 = 0, $834 = 0, $835 = 0, $836 = 0, $837 = 0, $838 = 0, $839 = 0, $84 = 0, $840 = 0, $841 = 0;
 var $842 = 0, $843 = 0, $844 = 0, $845 = 0, $846 = 0, $847 = 0, $848 = 0, $849 = 0, $85 = 0, $850 = 0, $851 = 0, $852 = 0, $853 = 0, $854 = 0, $855 = 0, $856 = 0, $857 = 0, $858 = 0, $859 = 0, $86 = 0;
 var $860 = 0, $861 = 0, $862 = 0, $863 = 0, $864 = 0, $865 = 0, $866 = 0, $867 = 0, $868 = 0, $869 = 0, $87 = 0, $870 = 0, $871 = 0, $872 = 0, $873 = 0, $874 = 0, $875 = 0, $876 = 0, $877 = 0, $878 = 0;
 var $879 = 0, $88 = 0, $880 = 0, $881 = 0, $882 = 0, $883 = 0, $884 = 0, $885 = 0, $886 = 0, $887 = 0, $888 = 0, $889 = 0, $89 = 0, $890 = 0, $891 = 0, $892 = 0, $893 = 0, $894 = 0, $895 = 0, $896 = 0;
 var $897 = 0, $898 = 0, $899 = 0, $9 = 0, $90 = 0, $900 = 0, $901 = 0, $902 = 0, $903 = 0, $904 = 0, $905 = 0, $906 = 0, $907 = 0, $908 = 0, $909 = 0, $91 = 0, $910 = 0, $911 = 0, $912 = 0, $913 = 0;
 var $914 = 0, $915 = 0, $916 = 0, $917 = 0, $918 = 0, $919 = 0, $92 = 0, $920 = 0, $921 = 0, $922 = 0, $923 = 0, $924 = 0, $925 = 0, $926 = 0, $927 = 0, $928 = 0, $929 = 0, $93 = 0, $930 = 0, $931 = 0;
 var $932 = 0, $933 = 0, $934 = 0, $935 = 0, $936 = 0, $937 = 0, $938 = 0, $939 = 0, $94 = 0, $940 = 0, $941 = 0, $942 = 0, $943 = 0, $944 = 0, $945 = 0, $946 = 0, $947 = 0, $948 = 0, $949 = 0, $95 = 0;
 var $950 = 0, $951 = 0, $952 = 0, $953 = 0, $954 = 0, $955 = 0, $956 = 0, $957 = 0, $958 = 0, $959 = 0, $96 = 0, $960 = 0, $961 = 0, $962 = 0, $963 = 0, $964 = 0, $965 = 0, $966 = 0, $967 = 0, $968 = 0;
 var $969 = 0, $97 = 0, $970 = 0, $971 = 0, $972 = 0, $973 = 0, $974 = 0, $975 = 0, $976 = 0, $977 = 0, $978 = 0, $979 = 0, $98 = 0, $980 = 0, $981 = 0, $982 = 0, $983 = 0, $984 = 0, $985 = 0, $986 = 0;
 var $987 = 0, $988 = 0, $989 = 0, $99 = 0, $990 = 0, $991 = 0, $992 = 0, $993 = 0, $994 = 0, $995 = 0, $996 = 0, $997 = 0, $998 = 0, $999 = 0, $cond$i = 0, $cond$i$i = 0, $cond$i204 = 0, $exitcond$i$i = 0, $not$$i$i = 0, $not$$i22$i = 0;
 var $not$7$i = 0, $or$cond$i = 0, $or$cond$i211 = 0, $or$cond1$i = 0, $or$cond1$i210 = 0, $or$cond10$i = 0, $or$cond11$i = 0, $or$cond12$i = 0, $or$cond2$i = 0, $or$cond5$i = 0, $or$cond50$i = 0, $or$cond7$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp;
 $2 = ($0>>>0)<(245);
 do {
  if ($2) {
   $3 = ($0>>>0)<(11);
   $4 = (($0) + 11)|0;
   $5 = $4 & -8;
   $6 = $3 ? 16 : $5;
   $7 = $6 >>> 3;
   $8 = HEAP32[22260]|0;
   $9 = $8 >>> $7;
   $10 = $9 & 3;
   $11 = ($10|0)==(0);
   if (!($11)) {
    $12 = $9 & 1;
    $13 = $12 ^ 1;
    $14 = (($13) + ($7))|0;
    $15 = $14 << 1;
    $16 = (89080 + ($15<<2)|0);
    $17 = ((($16)) + 8|0);
    $18 = HEAP32[$17>>2]|0;
    $19 = ((($18)) + 8|0);
    $20 = HEAP32[$19>>2]|0;
    $21 = ($16|0)==($20|0);
    do {
     if ($21) {
      $22 = 1 << $14;
      $23 = $22 ^ -1;
      $24 = $8 & $23;
      HEAP32[22260] = $24;
     } else {
      $25 = HEAP32[(89056)>>2]|0;
      $26 = ($20>>>0)<($25>>>0);
      if ($26) {
       _abort();
       // unreachable;
      }
      $27 = ((($20)) + 12|0);
      $28 = HEAP32[$27>>2]|0;
      $29 = ($28|0)==($18|0);
      if ($29) {
       HEAP32[$27>>2] = $16;
       HEAP32[$17>>2] = $20;
       break;
      } else {
       _abort();
       // unreachable;
      }
     }
    } while(0);
    $30 = $14 << 3;
    $31 = $30 | 3;
    $32 = ((($18)) + 4|0);
    HEAP32[$32>>2] = $31;
    $33 = (($18) + ($30)|0);
    $34 = ((($33)) + 4|0);
    $35 = HEAP32[$34>>2]|0;
    $36 = $35 | 1;
    HEAP32[$34>>2] = $36;
    $$0 = $19;
    STACKTOP = sp;return ($$0|0);
   }
   $37 = HEAP32[(89048)>>2]|0;
   $38 = ($6>>>0)>($37>>>0);
   if ($38) {
    $39 = ($9|0)==(0);
    if (!($39)) {
     $40 = $9 << $7;
     $41 = 2 << $7;
     $42 = (0 - ($41))|0;
     $43 = $41 | $42;
     $44 = $40 & $43;
     $45 = (0 - ($44))|0;
     $46 = $44 & $45;
     $47 = (($46) + -1)|0;
     $48 = $47 >>> 12;
     $49 = $48 & 16;
     $50 = $47 >>> $49;
     $51 = $50 >>> 5;
     $52 = $51 & 8;
     $53 = $52 | $49;
     $54 = $50 >>> $52;
     $55 = $54 >>> 2;
     $56 = $55 & 4;
     $57 = $53 | $56;
     $58 = $54 >>> $56;
     $59 = $58 >>> 1;
     $60 = $59 & 2;
     $61 = $57 | $60;
     $62 = $58 >>> $60;
     $63 = $62 >>> 1;
     $64 = $63 & 1;
     $65 = $61 | $64;
     $66 = $62 >>> $64;
     $67 = (($65) + ($66))|0;
     $68 = $67 << 1;
     $69 = (89080 + ($68<<2)|0);
     $70 = ((($69)) + 8|0);
     $71 = HEAP32[$70>>2]|0;
     $72 = ((($71)) + 8|0);
     $73 = HEAP32[$72>>2]|0;
     $74 = ($69|0)==($73|0);
     do {
      if ($74) {
       $75 = 1 << $67;
       $76 = $75 ^ -1;
       $77 = $8 & $76;
       HEAP32[22260] = $77;
       $98 = $77;
      } else {
       $78 = HEAP32[(89056)>>2]|0;
       $79 = ($73>>>0)<($78>>>0);
       if ($79) {
        _abort();
        // unreachable;
       }
       $80 = ((($73)) + 12|0);
       $81 = HEAP32[$80>>2]|0;
       $82 = ($81|0)==($71|0);
       if ($82) {
        HEAP32[$80>>2] = $69;
        HEAP32[$70>>2] = $73;
        $98 = $8;
        break;
       } else {
        _abort();
        // unreachable;
       }
      }
     } while(0);
     $83 = $67 << 3;
     $84 = (($83) - ($6))|0;
     $85 = $6 | 3;
     $86 = ((($71)) + 4|0);
     HEAP32[$86>>2] = $85;
     $87 = (($71) + ($6)|0);
     $88 = $84 | 1;
     $89 = ((($87)) + 4|0);
     HEAP32[$89>>2] = $88;
     $90 = (($87) + ($84)|0);
     HEAP32[$90>>2] = $84;
     $91 = ($37|0)==(0);
     if (!($91)) {
      $92 = HEAP32[(89060)>>2]|0;
      $93 = $37 >>> 3;
      $94 = $93 << 1;
      $95 = (89080 + ($94<<2)|0);
      $96 = 1 << $93;
      $97 = $98 & $96;
      $99 = ($97|0)==(0);
      if ($99) {
       $100 = $98 | $96;
       HEAP32[22260] = $100;
       $$pre = ((($95)) + 8|0);
       $$0199 = $95;$$pre$phiZ2D = $$pre;
      } else {
       $101 = ((($95)) + 8|0);
       $102 = HEAP32[$101>>2]|0;
       $103 = HEAP32[(89056)>>2]|0;
       $104 = ($102>>>0)<($103>>>0);
       if ($104) {
        _abort();
        // unreachable;
       } else {
        $$0199 = $102;$$pre$phiZ2D = $101;
       }
      }
      HEAP32[$$pre$phiZ2D>>2] = $92;
      $105 = ((($$0199)) + 12|0);
      HEAP32[$105>>2] = $92;
      $106 = ((($92)) + 8|0);
      HEAP32[$106>>2] = $$0199;
      $107 = ((($92)) + 12|0);
      HEAP32[$107>>2] = $95;
     }
     HEAP32[(89048)>>2] = $84;
     HEAP32[(89060)>>2] = $87;
     $$0 = $72;
     STACKTOP = sp;return ($$0|0);
    }
    $108 = HEAP32[(89044)>>2]|0;
    $109 = ($108|0)==(0);
    if ($109) {
     $$0197 = $6;
    } else {
     $110 = (0 - ($108))|0;
     $111 = $108 & $110;
     $112 = (($111) + -1)|0;
     $113 = $112 >>> 12;
     $114 = $113 & 16;
     $115 = $112 >>> $114;
     $116 = $115 >>> 5;
     $117 = $116 & 8;
     $118 = $117 | $114;
     $119 = $115 >>> $117;
     $120 = $119 >>> 2;
     $121 = $120 & 4;
     $122 = $118 | $121;
     $123 = $119 >>> $121;
     $124 = $123 >>> 1;
     $125 = $124 & 2;
     $126 = $122 | $125;
     $127 = $123 >>> $125;
     $128 = $127 >>> 1;
     $129 = $128 & 1;
     $130 = $126 | $129;
     $131 = $127 >>> $129;
     $132 = (($130) + ($131))|0;
     $133 = (89344 + ($132<<2)|0);
     $134 = HEAP32[$133>>2]|0;
     $135 = ((($134)) + 4|0);
     $136 = HEAP32[$135>>2]|0;
     $137 = $136 & -8;
     $138 = (($137) - ($6))|0;
     $$0189$i = $134;$$0190$i = $134;$$0191$i = $138;
     while(1) {
      $139 = ((($$0189$i)) + 16|0);
      $140 = HEAP32[$139>>2]|0;
      $141 = ($140|0)==(0|0);
      if ($141) {
       $142 = ((($$0189$i)) + 20|0);
       $143 = HEAP32[$142>>2]|0;
       $144 = ($143|0)==(0|0);
       if ($144) {
        break;
       } else {
        $146 = $143;
       }
      } else {
       $146 = $140;
      }
      $145 = ((($146)) + 4|0);
      $147 = HEAP32[$145>>2]|0;
      $148 = $147 & -8;
      $149 = (($148) - ($6))|0;
      $150 = ($149>>>0)<($$0191$i>>>0);
      $$$0191$i = $150 ? $149 : $$0191$i;
      $$$0190$i = $150 ? $146 : $$0190$i;
      $$0189$i = $146;$$0190$i = $$$0190$i;$$0191$i = $$$0191$i;
     }
     $151 = HEAP32[(89056)>>2]|0;
     $152 = ($$0190$i>>>0)<($151>>>0);
     if ($152) {
      _abort();
      // unreachable;
     }
     $153 = (($$0190$i) + ($6)|0);
     $154 = ($$0190$i>>>0)<($153>>>0);
     if (!($154)) {
      _abort();
      // unreachable;
     }
     $155 = ((($$0190$i)) + 24|0);
     $156 = HEAP32[$155>>2]|0;
     $157 = ((($$0190$i)) + 12|0);
     $158 = HEAP32[$157>>2]|0;
     $159 = ($158|0)==($$0190$i|0);
     do {
      if ($159) {
       $169 = ((($$0190$i)) + 20|0);
       $170 = HEAP32[$169>>2]|0;
       $171 = ($170|0)==(0|0);
       if ($171) {
        $172 = ((($$0190$i)) + 16|0);
        $173 = HEAP32[$172>>2]|0;
        $174 = ($173|0)==(0|0);
        if ($174) {
         $$3$i = 0;
         break;
        } else {
         $$1194$i = $173;$$1196$i = $172;
        }
       } else {
        $$1194$i = $170;$$1196$i = $169;
       }
       while(1) {
        $175 = ((($$1194$i)) + 20|0);
        $176 = HEAP32[$175>>2]|0;
        $177 = ($176|0)==(0|0);
        if (!($177)) {
         $$1194$i = $176;$$1196$i = $175;
         continue;
        }
        $178 = ((($$1194$i)) + 16|0);
        $179 = HEAP32[$178>>2]|0;
        $180 = ($179|0)==(0|0);
        if ($180) {
         break;
        } else {
         $$1194$i = $179;$$1196$i = $178;
        }
       }
       $181 = ($$1196$i>>>0)<($151>>>0);
       if ($181) {
        _abort();
        // unreachable;
       } else {
        HEAP32[$$1196$i>>2] = 0;
        $$3$i = $$1194$i;
        break;
       }
      } else {
       $160 = ((($$0190$i)) + 8|0);
       $161 = HEAP32[$160>>2]|0;
       $162 = ($161>>>0)<($151>>>0);
       if ($162) {
        _abort();
        // unreachable;
       }
       $163 = ((($161)) + 12|0);
       $164 = HEAP32[$163>>2]|0;
       $165 = ($164|0)==($$0190$i|0);
       if (!($165)) {
        _abort();
        // unreachable;
       }
       $166 = ((($158)) + 8|0);
       $167 = HEAP32[$166>>2]|0;
       $168 = ($167|0)==($$0190$i|0);
       if ($168) {
        HEAP32[$163>>2] = $158;
        HEAP32[$166>>2] = $161;
        $$3$i = $158;
        break;
       } else {
        _abort();
        // unreachable;
       }
      }
     } while(0);
     $182 = ($156|0)==(0|0);
     do {
      if (!($182)) {
       $183 = ((($$0190$i)) + 28|0);
       $184 = HEAP32[$183>>2]|0;
       $185 = (89344 + ($184<<2)|0);
       $186 = HEAP32[$185>>2]|0;
       $187 = ($$0190$i|0)==($186|0);
       if ($187) {
        HEAP32[$185>>2] = $$3$i;
        $cond$i = ($$3$i|0)==(0|0);
        if ($cond$i) {
         $188 = 1 << $184;
         $189 = $188 ^ -1;
         $190 = $108 & $189;
         HEAP32[(89044)>>2] = $190;
         break;
        }
       } else {
        $191 = HEAP32[(89056)>>2]|0;
        $192 = ($156>>>0)<($191>>>0);
        if ($192) {
         _abort();
         // unreachable;
        }
        $193 = ((($156)) + 16|0);
        $194 = HEAP32[$193>>2]|0;
        $195 = ($194|0)==($$0190$i|0);
        if ($195) {
         HEAP32[$193>>2] = $$3$i;
        } else {
         $196 = ((($156)) + 20|0);
         HEAP32[$196>>2] = $$3$i;
        }
        $197 = ($$3$i|0)==(0|0);
        if ($197) {
         break;
        }
       }
       $198 = HEAP32[(89056)>>2]|0;
       $199 = ($$3$i>>>0)<($198>>>0);
       if ($199) {
        _abort();
        // unreachable;
       }
       $200 = ((($$3$i)) + 24|0);
       HEAP32[$200>>2] = $156;
       $201 = ((($$0190$i)) + 16|0);
       $202 = HEAP32[$201>>2]|0;
       $203 = ($202|0)==(0|0);
       do {
        if (!($203)) {
         $204 = ($202>>>0)<($198>>>0);
         if ($204) {
          _abort();
          // unreachable;
         } else {
          $205 = ((($$3$i)) + 16|0);
          HEAP32[$205>>2] = $202;
          $206 = ((($202)) + 24|0);
          HEAP32[$206>>2] = $$3$i;
          break;
         }
        }
       } while(0);
       $207 = ((($$0190$i)) + 20|0);
       $208 = HEAP32[$207>>2]|0;
       $209 = ($208|0)==(0|0);
       if (!($209)) {
        $210 = HEAP32[(89056)>>2]|0;
        $211 = ($208>>>0)<($210>>>0);
        if ($211) {
         _abort();
         // unreachable;
        } else {
         $212 = ((($$3$i)) + 20|0);
         HEAP32[$212>>2] = $208;
         $213 = ((($208)) + 24|0);
         HEAP32[$213>>2] = $$3$i;
         break;
        }
       }
      }
     } while(0);
     $214 = ($$0191$i>>>0)<(16);
     if ($214) {
      $215 = (($$0191$i) + ($6))|0;
      $216 = $215 | 3;
      $217 = ((($$0190$i)) + 4|0);
      HEAP32[$217>>2] = $216;
      $218 = (($$0190$i) + ($215)|0);
      $219 = ((($218)) + 4|0);
      $220 = HEAP32[$219>>2]|0;
      $221 = $220 | 1;
      HEAP32[$219>>2] = $221;
     } else {
      $222 = $6 | 3;
      $223 = ((($$0190$i)) + 4|0);
      HEAP32[$223>>2] = $222;
      $224 = $$0191$i | 1;
      $225 = ((($153)) + 4|0);
      HEAP32[$225>>2] = $224;
      $226 = (($153) + ($$0191$i)|0);
      HEAP32[$226>>2] = $$0191$i;
      $227 = ($37|0)==(0);
      if (!($227)) {
       $228 = HEAP32[(89060)>>2]|0;
       $229 = $37 >>> 3;
       $230 = $229 << 1;
       $231 = (89080 + ($230<<2)|0);
       $232 = 1 << $229;
       $233 = $8 & $232;
       $234 = ($233|0)==(0);
       if ($234) {
        $235 = $8 | $232;
        HEAP32[22260] = $235;
        $$pre$i = ((($231)) + 8|0);
        $$0187$i = $231;$$pre$phi$iZ2D = $$pre$i;
       } else {
        $236 = ((($231)) + 8|0);
        $237 = HEAP32[$236>>2]|0;
        $238 = HEAP32[(89056)>>2]|0;
        $239 = ($237>>>0)<($238>>>0);
        if ($239) {
         _abort();
         // unreachable;
        } else {
         $$0187$i = $237;$$pre$phi$iZ2D = $236;
        }
       }
       HEAP32[$$pre$phi$iZ2D>>2] = $228;
       $240 = ((($$0187$i)) + 12|0);
       HEAP32[$240>>2] = $228;
       $241 = ((($228)) + 8|0);
       HEAP32[$241>>2] = $$0187$i;
       $242 = ((($228)) + 12|0);
       HEAP32[$242>>2] = $231;
      }
      HEAP32[(89048)>>2] = $$0191$i;
      HEAP32[(89060)>>2] = $153;
     }
     $243 = ((($$0190$i)) + 8|0);
     $$0 = $243;
     STACKTOP = sp;return ($$0|0);
    }
   } else {
    $$0197 = $6;
   }
  } else {
   $244 = ($0>>>0)>(4294967231);
   if ($244) {
    $$0197 = -1;
   } else {
    $245 = (($0) + 11)|0;
    $246 = $245 & -8;
    $247 = HEAP32[(89044)>>2]|0;
    $248 = ($247|0)==(0);
    if ($248) {
     $$0197 = $246;
    } else {
     $249 = (0 - ($246))|0;
     $250 = $245 >>> 8;
     $251 = ($250|0)==(0);
     if ($251) {
      $$0356$i = 0;
     } else {
      $252 = ($246>>>0)>(16777215);
      if ($252) {
       $$0356$i = 31;
      } else {
       $253 = (($250) + 1048320)|0;
       $254 = $253 >>> 16;
       $255 = $254 & 8;
       $256 = $250 << $255;
       $257 = (($256) + 520192)|0;
       $258 = $257 >>> 16;
       $259 = $258 & 4;
       $260 = $259 | $255;
       $261 = $256 << $259;
       $262 = (($261) + 245760)|0;
       $263 = $262 >>> 16;
       $264 = $263 & 2;
       $265 = $260 | $264;
       $266 = (14 - ($265))|0;
       $267 = $261 << $264;
       $268 = $267 >>> 15;
       $269 = (($266) + ($268))|0;
       $270 = $269 << 1;
       $271 = (($269) + 7)|0;
       $272 = $246 >>> $271;
       $273 = $272 & 1;
       $274 = $273 | $270;
       $$0356$i = $274;
      }
     }
     $275 = (89344 + ($$0356$i<<2)|0);
     $276 = HEAP32[$275>>2]|0;
     $277 = ($276|0)==(0|0);
     L123: do {
      if ($277) {
       $$2353$i = 0;$$3$i201 = 0;$$3348$i = $249;
       label = 86;
      } else {
       $278 = ($$0356$i|0)==(31);
       $279 = $$0356$i >>> 1;
       $280 = (25 - ($279))|0;
       $281 = $278 ? 0 : $280;
       $282 = $246 << $281;
       $$0340$i = 0;$$0345$i = $249;$$0351$i = $276;$$0357$i = $282;$$0360$i = 0;
       while(1) {
        $283 = ((($$0351$i)) + 4|0);
        $284 = HEAP32[$283>>2]|0;
        $285 = $284 & -8;
        $286 = (($285) - ($246))|0;
        $287 = ($286>>>0)<($$0345$i>>>0);
        if ($287) {
         $288 = ($286|0)==(0);
         if ($288) {
          $$413$i = $$0351$i;$$434912$i = 0;$$435511$i = $$0351$i;
          label = 90;
          break L123;
         } else {
          $$1341$i = $$0351$i;$$1346$i = $286;
         }
        } else {
         $$1341$i = $$0340$i;$$1346$i = $$0345$i;
        }
        $289 = ((($$0351$i)) + 20|0);
        $290 = HEAP32[$289>>2]|0;
        $291 = $$0357$i >>> 31;
        $292 = (((($$0351$i)) + 16|0) + ($291<<2)|0);
        $293 = HEAP32[$292>>2]|0;
        $294 = ($290|0)==(0|0);
        $295 = ($290|0)==($293|0);
        $or$cond1$i = $294 | $295;
        $$1361$i = $or$cond1$i ? $$0360$i : $290;
        $296 = ($293|0)==(0|0);
        $297 = $296&1;
        $298 = $297 ^ 1;
        $$0357$$i = $$0357$i << $298;
        if ($296) {
         $$2353$i = $$1361$i;$$3$i201 = $$1341$i;$$3348$i = $$1346$i;
         label = 86;
         break;
        } else {
         $$0340$i = $$1341$i;$$0345$i = $$1346$i;$$0351$i = $293;$$0357$i = $$0357$$i;$$0360$i = $$1361$i;
        }
       }
      }
     } while(0);
     if ((label|0) == 86) {
      $299 = ($$2353$i|0)==(0|0);
      $300 = ($$3$i201|0)==(0|0);
      $or$cond$i = $299 & $300;
      if ($or$cond$i) {
       $301 = 2 << $$0356$i;
       $302 = (0 - ($301))|0;
       $303 = $301 | $302;
       $304 = $247 & $303;
       $305 = ($304|0)==(0);
       if ($305) {
        $$0197 = $246;
        break;
       }
       $306 = (0 - ($304))|0;
       $307 = $304 & $306;
       $308 = (($307) + -1)|0;
       $309 = $308 >>> 12;
       $310 = $309 & 16;
       $311 = $308 >>> $310;
       $312 = $311 >>> 5;
       $313 = $312 & 8;
       $314 = $313 | $310;
       $315 = $311 >>> $313;
       $316 = $315 >>> 2;
       $317 = $316 & 4;
       $318 = $314 | $317;
       $319 = $315 >>> $317;
       $320 = $319 >>> 1;
       $321 = $320 & 2;
       $322 = $318 | $321;
       $323 = $319 >>> $321;
       $324 = $323 >>> 1;
       $325 = $324 & 1;
       $326 = $322 | $325;
       $327 = $323 >>> $325;
       $328 = (($326) + ($327))|0;
       $329 = (89344 + ($328<<2)|0);
       $330 = HEAP32[$329>>2]|0;
       $$4355$ph$i = $330;
      } else {
       $$4355$ph$i = $$2353$i;
      }
      $331 = ($$4355$ph$i|0)==(0|0);
      if ($331) {
       $$4$lcssa$i = $$3$i201;$$4349$lcssa$i = $$3348$i;
      } else {
       $$413$i = $$3$i201;$$434912$i = $$3348$i;$$435511$i = $$4355$ph$i;
       label = 90;
      }
     }
     if ((label|0) == 90) {
      while(1) {
       label = 0;
       $332 = ((($$435511$i)) + 4|0);
       $333 = HEAP32[$332>>2]|0;
       $334 = $333 & -8;
       $335 = (($334) - ($246))|0;
       $336 = ($335>>>0)<($$434912$i>>>0);
       $$$4349$i = $336 ? $335 : $$434912$i;
       $$4355$$4$i = $336 ? $$435511$i : $$413$i;
       $337 = ((($$435511$i)) + 16|0);
       $338 = HEAP32[$337>>2]|0;
       $339 = ($338|0)==(0|0);
       if (!($339)) {
        $$413$i = $$4355$$4$i;$$434912$i = $$$4349$i;$$435511$i = $338;
        label = 90;
        continue;
       }
       $340 = ((($$435511$i)) + 20|0);
       $341 = HEAP32[$340>>2]|0;
       $342 = ($341|0)==(0|0);
       if ($342) {
        $$4$lcssa$i = $$4355$$4$i;$$4349$lcssa$i = $$$4349$i;
        break;
       } else {
        $$413$i = $$4355$$4$i;$$434912$i = $$$4349$i;$$435511$i = $341;
        label = 90;
       }
      }
     }
     $343 = ($$4$lcssa$i|0)==(0|0);
     if ($343) {
      $$0197 = $246;
     } else {
      $344 = HEAP32[(89048)>>2]|0;
      $345 = (($344) - ($246))|0;
      $346 = ($$4349$lcssa$i>>>0)<($345>>>0);
      if ($346) {
       $347 = HEAP32[(89056)>>2]|0;
       $348 = ($$4$lcssa$i>>>0)<($347>>>0);
       if ($348) {
        _abort();
        // unreachable;
       }
       $349 = (($$4$lcssa$i) + ($246)|0);
       $350 = ($$4$lcssa$i>>>0)<($349>>>0);
       if (!($350)) {
        _abort();
        // unreachable;
       }
       $351 = ((($$4$lcssa$i)) + 24|0);
       $352 = HEAP32[$351>>2]|0;
       $353 = ((($$4$lcssa$i)) + 12|0);
       $354 = HEAP32[$353>>2]|0;
       $355 = ($354|0)==($$4$lcssa$i|0);
       do {
        if ($355) {
         $365 = ((($$4$lcssa$i)) + 20|0);
         $366 = HEAP32[$365>>2]|0;
         $367 = ($366|0)==(0|0);
         if ($367) {
          $368 = ((($$4$lcssa$i)) + 16|0);
          $369 = HEAP32[$368>>2]|0;
          $370 = ($369|0)==(0|0);
          if ($370) {
           $$3370$i = 0;
           break;
          } else {
           $$1368$i = $369;$$1372$i = $368;
          }
         } else {
          $$1368$i = $366;$$1372$i = $365;
         }
         while(1) {
          $371 = ((($$1368$i)) + 20|0);
          $372 = HEAP32[$371>>2]|0;
          $373 = ($372|0)==(0|0);
          if (!($373)) {
           $$1368$i = $372;$$1372$i = $371;
           continue;
          }
          $374 = ((($$1368$i)) + 16|0);
          $375 = HEAP32[$374>>2]|0;
          $376 = ($375|0)==(0|0);
          if ($376) {
           break;
          } else {
           $$1368$i = $375;$$1372$i = $374;
          }
         }
         $377 = ($$1372$i>>>0)<($347>>>0);
         if ($377) {
          _abort();
          // unreachable;
         } else {
          HEAP32[$$1372$i>>2] = 0;
          $$3370$i = $$1368$i;
          break;
         }
        } else {
         $356 = ((($$4$lcssa$i)) + 8|0);
         $357 = HEAP32[$356>>2]|0;
         $358 = ($357>>>0)<($347>>>0);
         if ($358) {
          _abort();
          // unreachable;
         }
         $359 = ((($357)) + 12|0);
         $360 = HEAP32[$359>>2]|0;
         $361 = ($360|0)==($$4$lcssa$i|0);
         if (!($361)) {
          _abort();
          // unreachable;
         }
         $362 = ((($354)) + 8|0);
         $363 = HEAP32[$362>>2]|0;
         $364 = ($363|0)==($$4$lcssa$i|0);
         if ($364) {
          HEAP32[$359>>2] = $354;
          HEAP32[$362>>2] = $357;
          $$3370$i = $354;
          break;
         } else {
          _abort();
          // unreachable;
         }
        }
       } while(0);
       $378 = ($352|0)==(0|0);
       do {
        if ($378) {
         $470 = $247;
        } else {
         $379 = ((($$4$lcssa$i)) + 28|0);
         $380 = HEAP32[$379>>2]|0;
         $381 = (89344 + ($380<<2)|0);
         $382 = HEAP32[$381>>2]|0;
         $383 = ($$4$lcssa$i|0)==($382|0);
         if ($383) {
          HEAP32[$381>>2] = $$3370$i;
          $cond$i204 = ($$3370$i|0)==(0|0);
          if ($cond$i204) {
           $384 = 1 << $380;
           $385 = $384 ^ -1;
           $386 = $247 & $385;
           HEAP32[(89044)>>2] = $386;
           $470 = $386;
           break;
          }
         } else {
          $387 = HEAP32[(89056)>>2]|0;
          $388 = ($352>>>0)<($387>>>0);
          if ($388) {
           _abort();
           // unreachable;
          }
          $389 = ((($352)) + 16|0);
          $390 = HEAP32[$389>>2]|0;
          $391 = ($390|0)==($$4$lcssa$i|0);
          if ($391) {
           HEAP32[$389>>2] = $$3370$i;
          } else {
           $392 = ((($352)) + 20|0);
           HEAP32[$392>>2] = $$3370$i;
          }
          $393 = ($$3370$i|0)==(0|0);
          if ($393) {
           $470 = $247;
           break;
          }
         }
         $394 = HEAP32[(89056)>>2]|0;
         $395 = ($$3370$i>>>0)<($394>>>0);
         if ($395) {
          _abort();
          // unreachable;
         }
         $396 = ((($$3370$i)) + 24|0);
         HEAP32[$396>>2] = $352;
         $397 = ((($$4$lcssa$i)) + 16|0);
         $398 = HEAP32[$397>>2]|0;
         $399 = ($398|0)==(0|0);
         do {
          if (!($399)) {
           $400 = ($398>>>0)<($394>>>0);
           if ($400) {
            _abort();
            // unreachable;
           } else {
            $401 = ((($$3370$i)) + 16|0);
            HEAP32[$401>>2] = $398;
            $402 = ((($398)) + 24|0);
            HEAP32[$402>>2] = $$3370$i;
            break;
           }
          }
         } while(0);
         $403 = ((($$4$lcssa$i)) + 20|0);
         $404 = HEAP32[$403>>2]|0;
         $405 = ($404|0)==(0|0);
         if ($405) {
          $470 = $247;
         } else {
          $406 = HEAP32[(89056)>>2]|0;
          $407 = ($404>>>0)<($406>>>0);
          if ($407) {
           _abort();
           // unreachable;
          } else {
           $408 = ((($$3370$i)) + 20|0);
           HEAP32[$408>>2] = $404;
           $409 = ((($404)) + 24|0);
           HEAP32[$409>>2] = $$3370$i;
           $470 = $247;
           break;
          }
         }
        }
       } while(0);
       $410 = ($$4349$lcssa$i>>>0)<(16);
       do {
        if ($410) {
         $411 = (($$4349$lcssa$i) + ($246))|0;
         $412 = $411 | 3;
         $413 = ((($$4$lcssa$i)) + 4|0);
         HEAP32[$413>>2] = $412;
         $414 = (($$4$lcssa$i) + ($411)|0);
         $415 = ((($414)) + 4|0);
         $416 = HEAP32[$415>>2]|0;
         $417 = $416 | 1;
         HEAP32[$415>>2] = $417;
        } else {
         $418 = $246 | 3;
         $419 = ((($$4$lcssa$i)) + 4|0);
         HEAP32[$419>>2] = $418;
         $420 = $$4349$lcssa$i | 1;
         $421 = ((($349)) + 4|0);
         HEAP32[$421>>2] = $420;
         $422 = (($349) + ($$4349$lcssa$i)|0);
         HEAP32[$422>>2] = $$4349$lcssa$i;
         $423 = $$4349$lcssa$i >>> 3;
         $424 = ($$4349$lcssa$i>>>0)<(256);
         if ($424) {
          $425 = $423 << 1;
          $426 = (89080 + ($425<<2)|0);
          $427 = HEAP32[22260]|0;
          $428 = 1 << $423;
          $429 = $427 & $428;
          $430 = ($429|0)==(0);
          if ($430) {
           $431 = $427 | $428;
           HEAP32[22260] = $431;
           $$pre$i205 = ((($426)) + 8|0);
           $$0366$i = $426;$$pre$phi$i206Z2D = $$pre$i205;
          } else {
           $432 = ((($426)) + 8|0);
           $433 = HEAP32[$432>>2]|0;
           $434 = HEAP32[(89056)>>2]|0;
           $435 = ($433>>>0)<($434>>>0);
           if ($435) {
            _abort();
            // unreachable;
           } else {
            $$0366$i = $433;$$pre$phi$i206Z2D = $432;
           }
          }
          HEAP32[$$pre$phi$i206Z2D>>2] = $349;
          $436 = ((($$0366$i)) + 12|0);
          HEAP32[$436>>2] = $349;
          $437 = ((($349)) + 8|0);
          HEAP32[$437>>2] = $$0366$i;
          $438 = ((($349)) + 12|0);
          HEAP32[$438>>2] = $426;
          break;
         }
         $439 = $$4349$lcssa$i >>> 8;
         $440 = ($439|0)==(0);
         if ($440) {
          $$0359$i = 0;
         } else {
          $441 = ($$4349$lcssa$i>>>0)>(16777215);
          if ($441) {
           $$0359$i = 31;
          } else {
           $442 = (($439) + 1048320)|0;
           $443 = $442 >>> 16;
           $444 = $443 & 8;
           $445 = $439 << $444;
           $446 = (($445) + 520192)|0;
           $447 = $446 >>> 16;
           $448 = $447 & 4;
           $449 = $448 | $444;
           $450 = $445 << $448;
           $451 = (($450) + 245760)|0;
           $452 = $451 >>> 16;
           $453 = $452 & 2;
           $454 = $449 | $453;
           $455 = (14 - ($454))|0;
           $456 = $450 << $453;
           $457 = $456 >>> 15;
           $458 = (($455) + ($457))|0;
           $459 = $458 << 1;
           $460 = (($458) + 7)|0;
           $461 = $$4349$lcssa$i >>> $460;
           $462 = $461 & 1;
           $463 = $462 | $459;
           $$0359$i = $463;
          }
         }
         $464 = (89344 + ($$0359$i<<2)|0);
         $465 = ((($349)) + 28|0);
         HEAP32[$465>>2] = $$0359$i;
         $466 = ((($349)) + 16|0);
         $467 = ((($466)) + 4|0);
         HEAP32[$467>>2] = 0;
         HEAP32[$466>>2] = 0;
         $468 = 1 << $$0359$i;
         $469 = $470 & $468;
         $471 = ($469|0)==(0);
         if ($471) {
          $472 = $470 | $468;
          HEAP32[(89044)>>2] = $472;
          HEAP32[$464>>2] = $349;
          $473 = ((($349)) + 24|0);
          HEAP32[$473>>2] = $464;
          $474 = ((($349)) + 12|0);
          HEAP32[$474>>2] = $349;
          $475 = ((($349)) + 8|0);
          HEAP32[$475>>2] = $349;
          break;
         }
         $476 = HEAP32[$464>>2]|0;
         $477 = ($$0359$i|0)==(31);
         $478 = $$0359$i >>> 1;
         $479 = (25 - ($478))|0;
         $480 = $477 ? 0 : $479;
         $481 = $$4349$lcssa$i << $480;
         $$0342$i = $481;$$0343$i = $476;
         while(1) {
          $482 = ((($$0343$i)) + 4|0);
          $483 = HEAP32[$482>>2]|0;
          $484 = $483 & -8;
          $485 = ($484|0)==($$4349$lcssa$i|0);
          if ($485) {
           label = 148;
           break;
          }
          $486 = $$0342$i >>> 31;
          $487 = (((($$0343$i)) + 16|0) + ($486<<2)|0);
          $488 = $$0342$i << 1;
          $489 = HEAP32[$487>>2]|0;
          $490 = ($489|0)==(0|0);
          if ($490) {
           label = 145;
           break;
          } else {
           $$0342$i = $488;$$0343$i = $489;
          }
         }
         if ((label|0) == 145) {
          $491 = HEAP32[(89056)>>2]|0;
          $492 = ($487>>>0)<($491>>>0);
          if ($492) {
           _abort();
           // unreachable;
          } else {
           HEAP32[$487>>2] = $349;
           $493 = ((($349)) + 24|0);
           HEAP32[$493>>2] = $$0343$i;
           $494 = ((($349)) + 12|0);
           HEAP32[$494>>2] = $349;
           $495 = ((($349)) + 8|0);
           HEAP32[$495>>2] = $349;
           break;
          }
         }
         else if ((label|0) == 148) {
          $496 = ((($$0343$i)) + 8|0);
          $497 = HEAP32[$496>>2]|0;
          $498 = HEAP32[(89056)>>2]|0;
          $499 = ($497>>>0)>=($498>>>0);
          $not$7$i = ($$0343$i>>>0)>=($498>>>0);
          $500 = $499 & $not$7$i;
          if ($500) {
           $501 = ((($497)) + 12|0);
           HEAP32[$501>>2] = $349;
           HEAP32[$496>>2] = $349;
           $502 = ((($349)) + 8|0);
           HEAP32[$502>>2] = $497;
           $503 = ((($349)) + 12|0);
           HEAP32[$503>>2] = $$0343$i;
           $504 = ((($349)) + 24|0);
           HEAP32[$504>>2] = 0;
           break;
          } else {
           _abort();
           // unreachable;
          }
         }
        }
       } while(0);
       $505 = ((($$4$lcssa$i)) + 8|0);
       $$0 = $505;
       STACKTOP = sp;return ($$0|0);
      } else {
       $$0197 = $246;
      }
     }
    }
   }
  }
 } while(0);
 $506 = HEAP32[(89048)>>2]|0;
 $507 = ($506>>>0)<($$0197>>>0);
 if (!($507)) {
  $508 = (($506) - ($$0197))|0;
  $509 = HEAP32[(89060)>>2]|0;
  $510 = ($508>>>0)>(15);
  if ($510) {
   $511 = (($509) + ($$0197)|0);
   HEAP32[(89060)>>2] = $511;
   HEAP32[(89048)>>2] = $508;
   $512 = $508 | 1;
   $513 = ((($511)) + 4|0);
   HEAP32[$513>>2] = $512;
   $514 = (($511) + ($508)|0);
   HEAP32[$514>>2] = $508;
   $515 = $$0197 | 3;
   $516 = ((($509)) + 4|0);
   HEAP32[$516>>2] = $515;
  } else {
   HEAP32[(89048)>>2] = 0;
   HEAP32[(89060)>>2] = 0;
   $517 = $506 | 3;
   $518 = ((($509)) + 4|0);
   HEAP32[$518>>2] = $517;
   $519 = (($509) + ($506)|0);
   $520 = ((($519)) + 4|0);
   $521 = HEAP32[$520>>2]|0;
   $522 = $521 | 1;
   HEAP32[$520>>2] = $522;
  }
  $523 = ((($509)) + 8|0);
  $$0 = $523;
  STACKTOP = sp;return ($$0|0);
 }
 $524 = HEAP32[(89052)>>2]|0;
 $525 = ($524>>>0)>($$0197>>>0);
 if ($525) {
  $526 = (($524) - ($$0197))|0;
  HEAP32[(89052)>>2] = $526;
  $527 = HEAP32[(89064)>>2]|0;
  $528 = (($527) + ($$0197)|0);
  HEAP32[(89064)>>2] = $528;
  $529 = $526 | 1;
  $530 = ((($528)) + 4|0);
  HEAP32[$530>>2] = $529;
  $531 = $$0197 | 3;
  $532 = ((($527)) + 4|0);
  HEAP32[$532>>2] = $531;
  $533 = ((($527)) + 8|0);
  $$0 = $533;
  STACKTOP = sp;return ($$0|0);
 }
 $534 = HEAP32[22378]|0;
 $535 = ($534|0)==(0);
 if ($535) {
  HEAP32[(89520)>>2] = 4096;
  HEAP32[(89516)>>2] = 4096;
  HEAP32[(89524)>>2] = -1;
  HEAP32[(89528)>>2] = -1;
  HEAP32[(89532)>>2] = 0;
  HEAP32[(89484)>>2] = 0;
  $536 = $1;
  $537 = $536 & -16;
  $538 = $537 ^ 1431655768;
  HEAP32[$1>>2] = $538;
  HEAP32[22378] = $538;
  $542 = 4096;
 } else {
  $$pre$i208 = HEAP32[(89520)>>2]|0;
  $542 = $$pre$i208;
 }
 $539 = (($$0197) + 48)|0;
 $540 = (($$0197) + 47)|0;
 $541 = (($542) + ($540))|0;
 $543 = (0 - ($542))|0;
 $544 = $541 & $543;
 $545 = ($544>>>0)>($$0197>>>0);
 if (!($545)) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $546 = HEAP32[(89480)>>2]|0;
 $547 = ($546|0)==(0);
 if (!($547)) {
  $548 = HEAP32[(89472)>>2]|0;
  $549 = (($548) + ($544))|0;
  $550 = ($549>>>0)<=($548>>>0);
  $551 = ($549>>>0)>($546>>>0);
  $or$cond1$i210 = $550 | $551;
  if ($or$cond1$i210) {
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
  }
 }
 $552 = HEAP32[(89484)>>2]|0;
 $553 = $552 & 4;
 $554 = ($553|0)==(0);
 L255: do {
  if ($554) {
   $555 = HEAP32[(89064)>>2]|0;
   $556 = ($555|0)==(0|0);
   L257: do {
    if ($556) {
     label = 172;
    } else {
     $$0$i17$i = (89488);
     while(1) {
      $557 = HEAP32[$$0$i17$i>>2]|0;
      $558 = ($557>>>0)>($555>>>0);
      if (!($558)) {
       $559 = ((($$0$i17$i)) + 4|0);
       $560 = HEAP32[$559>>2]|0;
       $561 = (($557) + ($560)|0);
       $562 = ($561>>>0)>($555>>>0);
       if ($562) {
        break;
       }
      }
      $563 = ((($$0$i17$i)) + 8|0);
      $564 = HEAP32[$563>>2]|0;
      $565 = ($564|0)==(0|0);
      if ($565) {
       label = 172;
       break L257;
      } else {
       $$0$i17$i = $564;
      }
     }
     $588 = (($541) - ($524))|0;
     $589 = $588 & $543;
     $590 = ($589>>>0)<(2147483647);
     if ($590) {
      $591 = (_sbrk(($589|0))|0);
      $592 = HEAP32[$$0$i17$i>>2]|0;
      $593 = HEAP32[$559>>2]|0;
      $594 = (($592) + ($593)|0);
      $595 = ($591|0)==($594|0);
      if ($595) {
       $596 = ($591|0)==((-1)|0);
       if (!($596)) {
        $$723947$i = $589;$$748$i = $591;
        label = 190;
        break L255;
       }
      } else {
       $$2247$ph$i = $591;$$2253$ph$i = $589;
       label = 180;
      }
     }
    }
   } while(0);
   do {
    if ((label|0) == 172) {
     $566 = (_sbrk(0)|0);
     $567 = ($566|0)==((-1)|0);
     if (!($567)) {
      $568 = $566;
      $569 = HEAP32[(89516)>>2]|0;
      $570 = (($569) + -1)|0;
      $571 = $570 & $568;
      $572 = ($571|0)==(0);
      $573 = (($570) + ($568))|0;
      $574 = (0 - ($569))|0;
      $575 = $573 & $574;
      $576 = (($575) - ($568))|0;
      $577 = $572 ? 0 : $576;
      $$$i = (($577) + ($544))|0;
      $578 = HEAP32[(89472)>>2]|0;
      $579 = (($$$i) + ($578))|0;
      $580 = ($$$i>>>0)>($$0197>>>0);
      $581 = ($$$i>>>0)<(2147483647);
      $or$cond$i211 = $580 & $581;
      if ($or$cond$i211) {
       $582 = HEAP32[(89480)>>2]|0;
       $583 = ($582|0)==(0);
       if (!($583)) {
        $584 = ($579>>>0)<=($578>>>0);
        $585 = ($579>>>0)>($582>>>0);
        $or$cond2$i = $584 | $585;
        if ($or$cond2$i) {
         break;
        }
       }
       $586 = (_sbrk(($$$i|0))|0);
       $587 = ($586|0)==($566|0);
       if ($587) {
        $$723947$i = $$$i;$$748$i = $566;
        label = 190;
        break L255;
       } else {
        $$2247$ph$i = $586;$$2253$ph$i = $$$i;
        label = 180;
       }
      }
     }
    }
   } while(0);
   L274: do {
    if ((label|0) == 180) {
     $597 = (0 - ($$2253$ph$i))|0;
     $598 = ($$2247$ph$i|0)!=((-1)|0);
     $599 = ($$2253$ph$i>>>0)<(2147483647);
     $or$cond7$i = $599 & $598;
     $600 = ($539>>>0)>($$2253$ph$i>>>0);
     $or$cond10$i = $600 & $or$cond7$i;
     do {
      if ($or$cond10$i) {
       $601 = HEAP32[(89520)>>2]|0;
       $602 = (($540) - ($$2253$ph$i))|0;
       $603 = (($602) + ($601))|0;
       $604 = (0 - ($601))|0;
       $605 = $603 & $604;
       $606 = ($605>>>0)<(2147483647);
       if ($606) {
        $607 = (_sbrk(($605|0))|0);
        $608 = ($607|0)==((-1)|0);
        if ($608) {
         (_sbrk(($597|0))|0);
         break L274;
        } else {
         $609 = (($605) + ($$2253$ph$i))|0;
         $$5256$i = $609;
         break;
        }
       } else {
        $$5256$i = $$2253$ph$i;
       }
      } else {
       $$5256$i = $$2253$ph$i;
      }
     } while(0);
     $610 = ($$2247$ph$i|0)==((-1)|0);
     if (!($610)) {
      $$723947$i = $$5256$i;$$748$i = $$2247$ph$i;
      label = 190;
      break L255;
     }
    }
   } while(0);
   $611 = HEAP32[(89484)>>2]|0;
   $612 = $611 | 4;
   HEAP32[(89484)>>2] = $612;
   label = 187;
  } else {
   label = 187;
  }
 } while(0);
 if ((label|0) == 187) {
  $613 = ($544>>>0)<(2147483647);
  if ($613) {
   $614 = (_sbrk(($544|0))|0);
   $615 = (_sbrk(0)|0);
   $616 = ($614|0)!=((-1)|0);
   $617 = ($615|0)!=((-1)|0);
   $or$cond5$i = $616 & $617;
   $618 = ($614>>>0)<($615>>>0);
   $or$cond11$i = $618 & $or$cond5$i;
   if ($or$cond11$i) {
    $619 = $615;
    $620 = $614;
    $621 = (($619) - ($620))|0;
    $622 = (($$0197) + 40)|0;
    $$not$i = ($621>>>0)>($622>>>0);
    if ($$not$i) {
     $$723947$i = $621;$$748$i = $614;
     label = 190;
    }
   }
  }
 }
 if ((label|0) == 190) {
  $623 = HEAP32[(89472)>>2]|0;
  $624 = (($623) + ($$723947$i))|0;
  HEAP32[(89472)>>2] = $624;
  $625 = HEAP32[(89476)>>2]|0;
  $626 = ($624>>>0)>($625>>>0);
  if ($626) {
   HEAP32[(89476)>>2] = $624;
  }
  $627 = HEAP32[(89064)>>2]|0;
  $628 = ($627|0)==(0|0);
  do {
   if ($628) {
    $629 = HEAP32[(89056)>>2]|0;
    $630 = ($629|0)==(0|0);
    $631 = ($$748$i>>>0)<($629>>>0);
    $or$cond12$i = $630 | $631;
    if ($or$cond12$i) {
     HEAP32[(89056)>>2] = $$748$i;
    }
    HEAP32[(89488)>>2] = $$748$i;
    HEAP32[(89492)>>2] = $$723947$i;
    HEAP32[(89500)>>2] = 0;
    $632 = HEAP32[22378]|0;
    HEAP32[(89076)>>2] = $632;
    HEAP32[(89072)>>2] = -1;
    $$01$i$i = 0;
    while(1) {
     $633 = $$01$i$i << 1;
     $634 = (89080 + ($633<<2)|0);
     $635 = ((($634)) + 12|0);
     HEAP32[$635>>2] = $634;
     $636 = ((($634)) + 8|0);
     HEAP32[$636>>2] = $634;
     $637 = (($$01$i$i) + 1)|0;
     $exitcond$i$i = ($637|0)==(32);
     if ($exitcond$i$i) {
      break;
     } else {
      $$01$i$i = $637;
     }
    }
    $638 = (($$723947$i) + -40)|0;
    $639 = ((($$748$i)) + 8|0);
    $640 = $639;
    $641 = $640 & 7;
    $642 = ($641|0)==(0);
    $643 = (0 - ($640))|0;
    $644 = $643 & 7;
    $645 = $642 ? 0 : $644;
    $646 = (($$748$i) + ($645)|0);
    $647 = (($638) - ($645))|0;
    HEAP32[(89064)>>2] = $646;
    HEAP32[(89052)>>2] = $647;
    $648 = $647 | 1;
    $649 = ((($646)) + 4|0);
    HEAP32[$649>>2] = $648;
    $650 = (($646) + ($647)|0);
    $651 = ((($650)) + 4|0);
    HEAP32[$651>>2] = 40;
    $652 = HEAP32[(89528)>>2]|0;
    HEAP32[(89068)>>2] = $652;
   } else {
    $$024370$i = (89488);
    while(1) {
     $653 = HEAP32[$$024370$i>>2]|0;
     $654 = ((($$024370$i)) + 4|0);
     $655 = HEAP32[$654>>2]|0;
     $656 = (($653) + ($655)|0);
     $657 = ($$748$i|0)==($656|0);
     if ($657) {
      label = 200;
      break;
     }
     $658 = ((($$024370$i)) + 8|0);
     $659 = HEAP32[$658>>2]|0;
     $660 = ($659|0)==(0|0);
     if ($660) {
      break;
     } else {
      $$024370$i = $659;
     }
    }
    if ((label|0) == 200) {
     $661 = ((($$024370$i)) + 12|0);
     $662 = HEAP32[$661>>2]|0;
     $663 = $662 & 8;
     $664 = ($663|0)==(0);
     if ($664) {
      $665 = ($627>>>0)>=($653>>>0);
      $666 = ($627>>>0)<($$748$i>>>0);
      $or$cond50$i = $666 & $665;
      if ($or$cond50$i) {
       $667 = (($655) + ($$723947$i))|0;
       HEAP32[$654>>2] = $667;
       $668 = HEAP32[(89052)>>2]|0;
       $669 = ((($627)) + 8|0);
       $670 = $669;
       $671 = $670 & 7;
       $672 = ($671|0)==(0);
       $673 = (0 - ($670))|0;
       $674 = $673 & 7;
       $675 = $672 ? 0 : $674;
       $676 = (($627) + ($675)|0);
       $677 = (($$723947$i) - ($675))|0;
       $678 = (($677) + ($668))|0;
       HEAP32[(89064)>>2] = $676;
       HEAP32[(89052)>>2] = $678;
       $679 = $678 | 1;
       $680 = ((($676)) + 4|0);
       HEAP32[$680>>2] = $679;
       $681 = (($676) + ($678)|0);
       $682 = ((($681)) + 4|0);
       HEAP32[$682>>2] = 40;
       $683 = HEAP32[(89528)>>2]|0;
       HEAP32[(89068)>>2] = $683;
       break;
      }
     }
    }
    $684 = HEAP32[(89056)>>2]|0;
    $685 = ($$748$i>>>0)<($684>>>0);
    if ($685) {
     HEAP32[(89056)>>2] = $$748$i;
     $749 = $$748$i;
    } else {
     $749 = $684;
    }
    $686 = (($$748$i) + ($$723947$i)|0);
    $$124469$i = (89488);
    while(1) {
     $687 = HEAP32[$$124469$i>>2]|0;
     $688 = ($687|0)==($686|0);
     if ($688) {
      label = 208;
      break;
     }
     $689 = ((($$124469$i)) + 8|0);
     $690 = HEAP32[$689>>2]|0;
     $691 = ($690|0)==(0|0);
     if ($691) {
      $$0$i$i$i = (89488);
      break;
     } else {
      $$124469$i = $690;
     }
    }
    if ((label|0) == 208) {
     $692 = ((($$124469$i)) + 12|0);
     $693 = HEAP32[$692>>2]|0;
     $694 = $693 & 8;
     $695 = ($694|0)==(0);
     if ($695) {
      HEAP32[$$124469$i>>2] = $$748$i;
      $696 = ((($$124469$i)) + 4|0);
      $697 = HEAP32[$696>>2]|0;
      $698 = (($697) + ($$723947$i))|0;
      HEAP32[$696>>2] = $698;
      $699 = ((($$748$i)) + 8|0);
      $700 = $699;
      $701 = $700 & 7;
      $702 = ($701|0)==(0);
      $703 = (0 - ($700))|0;
      $704 = $703 & 7;
      $705 = $702 ? 0 : $704;
      $706 = (($$748$i) + ($705)|0);
      $707 = ((($686)) + 8|0);
      $708 = $707;
      $709 = $708 & 7;
      $710 = ($709|0)==(0);
      $711 = (0 - ($708))|0;
      $712 = $711 & 7;
      $713 = $710 ? 0 : $712;
      $714 = (($686) + ($713)|0);
      $715 = $714;
      $716 = $706;
      $717 = (($715) - ($716))|0;
      $718 = (($706) + ($$0197)|0);
      $719 = (($717) - ($$0197))|0;
      $720 = $$0197 | 3;
      $721 = ((($706)) + 4|0);
      HEAP32[$721>>2] = $720;
      $722 = ($714|0)==($627|0);
      do {
       if ($722) {
        $723 = HEAP32[(89052)>>2]|0;
        $724 = (($723) + ($719))|0;
        HEAP32[(89052)>>2] = $724;
        HEAP32[(89064)>>2] = $718;
        $725 = $724 | 1;
        $726 = ((($718)) + 4|0);
        HEAP32[$726>>2] = $725;
       } else {
        $727 = HEAP32[(89060)>>2]|0;
        $728 = ($714|0)==($727|0);
        if ($728) {
         $729 = HEAP32[(89048)>>2]|0;
         $730 = (($729) + ($719))|0;
         HEAP32[(89048)>>2] = $730;
         HEAP32[(89060)>>2] = $718;
         $731 = $730 | 1;
         $732 = ((($718)) + 4|0);
         HEAP32[$732>>2] = $731;
         $733 = (($718) + ($730)|0);
         HEAP32[$733>>2] = $730;
         break;
        }
        $734 = ((($714)) + 4|0);
        $735 = HEAP32[$734>>2]|0;
        $736 = $735 & 3;
        $737 = ($736|0)==(1);
        if ($737) {
         $738 = $735 & -8;
         $739 = $735 >>> 3;
         $740 = ($735>>>0)<(256);
         L326: do {
          if ($740) {
           $741 = ((($714)) + 8|0);
           $742 = HEAP32[$741>>2]|0;
           $743 = ((($714)) + 12|0);
           $744 = HEAP32[$743>>2]|0;
           $745 = $739 << 1;
           $746 = (89080 + ($745<<2)|0);
           $747 = ($742|0)==($746|0);
           do {
            if (!($747)) {
             $748 = ($742>>>0)<($749>>>0);
             if ($748) {
              _abort();
              // unreachable;
             }
             $750 = ((($742)) + 12|0);
             $751 = HEAP32[$750>>2]|0;
             $752 = ($751|0)==($714|0);
             if ($752) {
              break;
             }
             _abort();
             // unreachable;
            }
           } while(0);
           $753 = ($744|0)==($742|0);
           if ($753) {
            $754 = 1 << $739;
            $755 = $754 ^ -1;
            $756 = HEAP32[22260]|0;
            $757 = $756 & $755;
            HEAP32[22260] = $757;
            break;
           }
           $758 = ($744|0)==($746|0);
           do {
            if ($758) {
             $$pre9$i$i = ((($744)) + 8|0);
             $$pre$phi10$i$iZ2D = $$pre9$i$i;
            } else {
             $759 = ($744>>>0)<($749>>>0);
             if ($759) {
              _abort();
              // unreachable;
             }
             $760 = ((($744)) + 8|0);
             $761 = HEAP32[$760>>2]|0;
             $762 = ($761|0)==($714|0);
             if ($762) {
              $$pre$phi10$i$iZ2D = $760;
              break;
             }
             _abort();
             // unreachable;
            }
           } while(0);
           $763 = ((($742)) + 12|0);
           HEAP32[$763>>2] = $744;
           HEAP32[$$pre$phi10$i$iZ2D>>2] = $742;
          } else {
           $764 = ((($714)) + 24|0);
           $765 = HEAP32[$764>>2]|0;
           $766 = ((($714)) + 12|0);
           $767 = HEAP32[$766>>2]|0;
           $768 = ($767|0)==($714|0);
           do {
            if ($768) {
             $778 = ((($714)) + 16|0);
             $779 = ((($778)) + 4|0);
             $780 = HEAP32[$779>>2]|0;
             $781 = ($780|0)==(0|0);
             if ($781) {
              $782 = HEAP32[$778>>2]|0;
              $783 = ($782|0)==(0|0);
              if ($783) {
               $$3$i$i = 0;
               break;
              } else {
               $$1290$i$i = $782;$$1292$i$i = $778;
              }
             } else {
              $$1290$i$i = $780;$$1292$i$i = $779;
             }
             while(1) {
              $784 = ((($$1290$i$i)) + 20|0);
              $785 = HEAP32[$784>>2]|0;
              $786 = ($785|0)==(0|0);
              if (!($786)) {
               $$1290$i$i = $785;$$1292$i$i = $784;
               continue;
              }
              $787 = ((($$1290$i$i)) + 16|0);
              $788 = HEAP32[$787>>2]|0;
              $789 = ($788|0)==(0|0);
              if ($789) {
               break;
              } else {
               $$1290$i$i = $788;$$1292$i$i = $787;
              }
             }
             $790 = ($$1292$i$i>>>0)<($749>>>0);
             if ($790) {
              _abort();
              // unreachable;
             } else {
              HEAP32[$$1292$i$i>>2] = 0;
              $$3$i$i = $$1290$i$i;
              break;
             }
            } else {
             $769 = ((($714)) + 8|0);
             $770 = HEAP32[$769>>2]|0;
             $771 = ($770>>>0)<($749>>>0);
             if ($771) {
              _abort();
              // unreachable;
             }
             $772 = ((($770)) + 12|0);
             $773 = HEAP32[$772>>2]|0;
             $774 = ($773|0)==($714|0);
             if (!($774)) {
              _abort();
              // unreachable;
             }
             $775 = ((($767)) + 8|0);
             $776 = HEAP32[$775>>2]|0;
             $777 = ($776|0)==($714|0);
             if ($777) {
              HEAP32[$772>>2] = $767;
              HEAP32[$775>>2] = $770;
              $$3$i$i = $767;
              break;
             } else {
              _abort();
              // unreachable;
             }
            }
           } while(0);
           $791 = ($765|0)==(0|0);
           if ($791) {
            break;
           }
           $792 = ((($714)) + 28|0);
           $793 = HEAP32[$792>>2]|0;
           $794 = (89344 + ($793<<2)|0);
           $795 = HEAP32[$794>>2]|0;
           $796 = ($714|0)==($795|0);
           do {
            if ($796) {
             HEAP32[$794>>2] = $$3$i$i;
             $cond$i$i = ($$3$i$i|0)==(0|0);
             if (!($cond$i$i)) {
              break;
             }
             $797 = 1 << $793;
             $798 = $797 ^ -1;
             $799 = HEAP32[(89044)>>2]|0;
             $800 = $799 & $798;
             HEAP32[(89044)>>2] = $800;
             break L326;
            } else {
             $801 = HEAP32[(89056)>>2]|0;
             $802 = ($765>>>0)<($801>>>0);
             if ($802) {
              _abort();
              // unreachable;
             }
             $803 = ((($765)) + 16|0);
             $804 = HEAP32[$803>>2]|0;
             $805 = ($804|0)==($714|0);
             if ($805) {
              HEAP32[$803>>2] = $$3$i$i;
             } else {
              $806 = ((($765)) + 20|0);
              HEAP32[$806>>2] = $$3$i$i;
             }
             $807 = ($$3$i$i|0)==(0|0);
             if ($807) {
              break L326;
             }
            }
           } while(0);
           $808 = HEAP32[(89056)>>2]|0;
           $809 = ($$3$i$i>>>0)<($808>>>0);
           if ($809) {
            _abort();
            // unreachable;
           }
           $810 = ((($$3$i$i)) + 24|0);
           HEAP32[$810>>2] = $765;
           $811 = ((($714)) + 16|0);
           $812 = HEAP32[$811>>2]|0;
           $813 = ($812|0)==(0|0);
           do {
            if (!($813)) {
             $814 = ($812>>>0)<($808>>>0);
             if ($814) {
              _abort();
              // unreachable;
             } else {
              $815 = ((($$3$i$i)) + 16|0);
              HEAP32[$815>>2] = $812;
              $816 = ((($812)) + 24|0);
              HEAP32[$816>>2] = $$3$i$i;
              break;
             }
            }
           } while(0);
           $817 = ((($811)) + 4|0);
           $818 = HEAP32[$817>>2]|0;
           $819 = ($818|0)==(0|0);
           if ($819) {
            break;
           }
           $820 = HEAP32[(89056)>>2]|0;
           $821 = ($818>>>0)<($820>>>0);
           if ($821) {
            _abort();
            // unreachable;
           } else {
            $822 = ((($$3$i$i)) + 20|0);
            HEAP32[$822>>2] = $818;
            $823 = ((($818)) + 24|0);
            HEAP32[$823>>2] = $$3$i$i;
            break;
           }
          }
         } while(0);
         $824 = (($714) + ($738)|0);
         $825 = (($738) + ($719))|0;
         $$0$i18$i = $824;$$0286$i$i = $825;
        } else {
         $$0$i18$i = $714;$$0286$i$i = $719;
        }
        $826 = ((($$0$i18$i)) + 4|0);
        $827 = HEAP32[$826>>2]|0;
        $828 = $827 & -2;
        HEAP32[$826>>2] = $828;
        $829 = $$0286$i$i | 1;
        $830 = ((($718)) + 4|0);
        HEAP32[$830>>2] = $829;
        $831 = (($718) + ($$0286$i$i)|0);
        HEAP32[$831>>2] = $$0286$i$i;
        $832 = $$0286$i$i >>> 3;
        $833 = ($$0286$i$i>>>0)<(256);
        if ($833) {
         $834 = $832 << 1;
         $835 = (89080 + ($834<<2)|0);
         $836 = HEAP32[22260]|0;
         $837 = 1 << $832;
         $838 = $836 & $837;
         $839 = ($838|0)==(0);
         do {
          if ($839) {
           $840 = $836 | $837;
           HEAP32[22260] = $840;
           $$pre$i19$i = ((($835)) + 8|0);
           $$0294$i$i = $835;$$pre$phi$i20$iZ2D = $$pre$i19$i;
          } else {
           $841 = ((($835)) + 8|0);
           $842 = HEAP32[$841>>2]|0;
           $843 = HEAP32[(89056)>>2]|0;
           $844 = ($842>>>0)<($843>>>0);
           if (!($844)) {
            $$0294$i$i = $842;$$pre$phi$i20$iZ2D = $841;
            break;
           }
           _abort();
           // unreachable;
          }
         } while(0);
         HEAP32[$$pre$phi$i20$iZ2D>>2] = $718;
         $845 = ((($$0294$i$i)) + 12|0);
         HEAP32[$845>>2] = $718;
         $846 = ((($718)) + 8|0);
         HEAP32[$846>>2] = $$0294$i$i;
         $847 = ((($718)) + 12|0);
         HEAP32[$847>>2] = $835;
         break;
        }
        $848 = $$0286$i$i >>> 8;
        $849 = ($848|0)==(0);
        do {
         if ($849) {
          $$0295$i$i = 0;
         } else {
          $850 = ($$0286$i$i>>>0)>(16777215);
          if ($850) {
           $$0295$i$i = 31;
           break;
          }
          $851 = (($848) + 1048320)|0;
          $852 = $851 >>> 16;
          $853 = $852 & 8;
          $854 = $848 << $853;
          $855 = (($854) + 520192)|0;
          $856 = $855 >>> 16;
          $857 = $856 & 4;
          $858 = $857 | $853;
          $859 = $854 << $857;
          $860 = (($859) + 245760)|0;
          $861 = $860 >>> 16;
          $862 = $861 & 2;
          $863 = $858 | $862;
          $864 = (14 - ($863))|0;
          $865 = $859 << $862;
          $866 = $865 >>> 15;
          $867 = (($864) + ($866))|0;
          $868 = $867 << 1;
          $869 = (($867) + 7)|0;
          $870 = $$0286$i$i >>> $869;
          $871 = $870 & 1;
          $872 = $871 | $868;
          $$0295$i$i = $872;
         }
        } while(0);
        $873 = (89344 + ($$0295$i$i<<2)|0);
        $874 = ((($718)) + 28|0);
        HEAP32[$874>>2] = $$0295$i$i;
        $875 = ((($718)) + 16|0);
        $876 = ((($875)) + 4|0);
        HEAP32[$876>>2] = 0;
        HEAP32[$875>>2] = 0;
        $877 = HEAP32[(89044)>>2]|0;
        $878 = 1 << $$0295$i$i;
        $879 = $877 & $878;
        $880 = ($879|0)==(0);
        if ($880) {
         $881 = $877 | $878;
         HEAP32[(89044)>>2] = $881;
         HEAP32[$873>>2] = $718;
         $882 = ((($718)) + 24|0);
         HEAP32[$882>>2] = $873;
         $883 = ((($718)) + 12|0);
         HEAP32[$883>>2] = $718;
         $884 = ((($718)) + 8|0);
         HEAP32[$884>>2] = $718;
         break;
        }
        $885 = HEAP32[$873>>2]|0;
        $886 = ($$0295$i$i|0)==(31);
        $887 = $$0295$i$i >>> 1;
        $888 = (25 - ($887))|0;
        $889 = $886 ? 0 : $888;
        $890 = $$0286$i$i << $889;
        $$0287$i$i = $890;$$0288$i$i = $885;
        while(1) {
         $891 = ((($$0288$i$i)) + 4|0);
         $892 = HEAP32[$891>>2]|0;
         $893 = $892 & -8;
         $894 = ($893|0)==($$0286$i$i|0);
         if ($894) {
          label = 278;
          break;
         }
         $895 = $$0287$i$i >>> 31;
         $896 = (((($$0288$i$i)) + 16|0) + ($895<<2)|0);
         $897 = $$0287$i$i << 1;
         $898 = HEAP32[$896>>2]|0;
         $899 = ($898|0)==(0|0);
         if ($899) {
          label = 275;
          break;
         } else {
          $$0287$i$i = $897;$$0288$i$i = $898;
         }
        }
        if ((label|0) == 275) {
         $900 = HEAP32[(89056)>>2]|0;
         $901 = ($896>>>0)<($900>>>0);
         if ($901) {
          _abort();
          // unreachable;
         } else {
          HEAP32[$896>>2] = $718;
          $902 = ((($718)) + 24|0);
          HEAP32[$902>>2] = $$0288$i$i;
          $903 = ((($718)) + 12|0);
          HEAP32[$903>>2] = $718;
          $904 = ((($718)) + 8|0);
          HEAP32[$904>>2] = $718;
          break;
         }
        }
        else if ((label|0) == 278) {
         $905 = ((($$0288$i$i)) + 8|0);
         $906 = HEAP32[$905>>2]|0;
         $907 = HEAP32[(89056)>>2]|0;
         $908 = ($906>>>0)>=($907>>>0);
         $not$$i22$i = ($$0288$i$i>>>0)>=($907>>>0);
         $909 = $908 & $not$$i22$i;
         if ($909) {
          $910 = ((($906)) + 12|0);
          HEAP32[$910>>2] = $718;
          HEAP32[$905>>2] = $718;
          $911 = ((($718)) + 8|0);
          HEAP32[$911>>2] = $906;
          $912 = ((($718)) + 12|0);
          HEAP32[$912>>2] = $$0288$i$i;
          $913 = ((($718)) + 24|0);
          HEAP32[$913>>2] = 0;
          break;
         } else {
          _abort();
          // unreachable;
         }
        }
       }
      } while(0);
      $1044 = ((($706)) + 8|0);
      $$0 = $1044;
      STACKTOP = sp;return ($$0|0);
     } else {
      $$0$i$i$i = (89488);
     }
    }
    while(1) {
     $914 = HEAP32[$$0$i$i$i>>2]|0;
     $915 = ($914>>>0)>($627>>>0);
     if (!($915)) {
      $916 = ((($$0$i$i$i)) + 4|0);
      $917 = HEAP32[$916>>2]|0;
      $918 = (($914) + ($917)|0);
      $919 = ($918>>>0)>($627>>>0);
      if ($919) {
       break;
      }
     }
     $920 = ((($$0$i$i$i)) + 8|0);
     $921 = HEAP32[$920>>2]|0;
     $$0$i$i$i = $921;
    }
    $922 = ((($918)) + -47|0);
    $923 = ((($922)) + 8|0);
    $924 = $923;
    $925 = $924 & 7;
    $926 = ($925|0)==(0);
    $927 = (0 - ($924))|0;
    $928 = $927 & 7;
    $929 = $926 ? 0 : $928;
    $930 = (($922) + ($929)|0);
    $931 = ((($627)) + 16|0);
    $932 = ($930>>>0)<($931>>>0);
    $933 = $932 ? $627 : $930;
    $934 = ((($933)) + 8|0);
    $935 = ((($933)) + 24|0);
    $936 = (($$723947$i) + -40)|0;
    $937 = ((($$748$i)) + 8|0);
    $938 = $937;
    $939 = $938 & 7;
    $940 = ($939|0)==(0);
    $941 = (0 - ($938))|0;
    $942 = $941 & 7;
    $943 = $940 ? 0 : $942;
    $944 = (($$748$i) + ($943)|0);
    $945 = (($936) - ($943))|0;
    HEAP32[(89064)>>2] = $944;
    HEAP32[(89052)>>2] = $945;
    $946 = $945 | 1;
    $947 = ((($944)) + 4|0);
    HEAP32[$947>>2] = $946;
    $948 = (($944) + ($945)|0);
    $949 = ((($948)) + 4|0);
    HEAP32[$949>>2] = 40;
    $950 = HEAP32[(89528)>>2]|0;
    HEAP32[(89068)>>2] = $950;
    $951 = ((($933)) + 4|0);
    HEAP32[$951>>2] = 27;
    ;HEAP32[$934>>2]=HEAP32[(89488)>>2]|0;HEAP32[$934+4>>2]=HEAP32[(89488)+4>>2]|0;HEAP32[$934+8>>2]=HEAP32[(89488)+8>>2]|0;HEAP32[$934+12>>2]=HEAP32[(89488)+12>>2]|0;
    HEAP32[(89488)>>2] = $$748$i;
    HEAP32[(89492)>>2] = $$723947$i;
    HEAP32[(89500)>>2] = 0;
    HEAP32[(89496)>>2] = $934;
    $$0$i$i = $935;
    while(1) {
     $952 = ((($$0$i$i)) + 4|0);
     HEAP32[$952>>2] = 7;
     $953 = ((($952)) + 4|0);
     $954 = ($953>>>0)<($918>>>0);
     if ($954) {
      $$0$i$i = $952;
     } else {
      break;
     }
    }
    $955 = ($933|0)==($627|0);
    if (!($955)) {
     $956 = $933;
     $957 = $627;
     $958 = (($956) - ($957))|0;
     $959 = HEAP32[$951>>2]|0;
     $960 = $959 & -2;
     HEAP32[$951>>2] = $960;
     $961 = $958 | 1;
     $962 = ((($627)) + 4|0);
     HEAP32[$962>>2] = $961;
     HEAP32[$933>>2] = $958;
     $963 = $958 >>> 3;
     $964 = ($958>>>0)<(256);
     if ($964) {
      $965 = $963 << 1;
      $966 = (89080 + ($965<<2)|0);
      $967 = HEAP32[22260]|0;
      $968 = 1 << $963;
      $969 = $967 & $968;
      $970 = ($969|0)==(0);
      if ($970) {
       $971 = $967 | $968;
       HEAP32[22260] = $971;
       $$pre$i$i = ((($966)) + 8|0);
       $$0211$i$i = $966;$$pre$phi$i$iZ2D = $$pre$i$i;
      } else {
       $972 = ((($966)) + 8|0);
       $973 = HEAP32[$972>>2]|0;
       $974 = HEAP32[(89056)>>2]|0;
       $975 = ($973>>>0)<($974>>>0);
       if ($975) {
        _abort();
        // unreachable;
       } else {
        $$0211$i$i = $973;$$pre$phi$i$iZ2D = $972;
       }
      }
      HEAP32[$$pre$phi$i$iZ2D>>2] = $627;
      $976 = ((($$0211$i$i)) + 12|0);
      HEAP32[$976>>2] = $627;
      $977 = ((($627)) + 8|0);
      HEAP32[$977>>2] = $$0211$i$i;
      $978 = ((($627)) + 12|0);
      HEAP32[$978>>2] = $966;
      break;
     }
     $979 = $958 >>> 8;
     $980 = ($979|0)==(0);
     if ($980) {
      $$0212$i$i = 0;
     } else {
      $981 = ($958>>>0)>(16777215);
      if ($981) {
       $$0212$i$i = 31;
      } else {
       $982 = (($979) + 1048320)|0;
       $983 = $982 >>> 16;
       $984 = $983 & 8;
       $985 = $979 << $984;
       $986 = (($985) + 520192)|0;
       $987 = $986 >>> 16;
       $988 = $987 & 4;
       $989 = $988 | $984;
       $990 = $985 << $988;
       $991 = (($990) + 245760)|0;
       $992 = $991 >>> 16;
       $993 = $992 & 2;
       $994 = $989 | $993;
       $995 = (14 - ($994))|0;
       $996 = $990 << $993;
       $997 = $996 >>> 15;
       $998 = (($995) + ($997))|0;
       $999 = $998 << 1;
       $1000 = (($998) + 7)|0;
       $1001 = $958 >>> $1000;
       $1002 = $1001 & 1;
       $1003 = $1002 | $999;
       $$0212$i$i = $1003;
      }
     }
     $1004 = (89344 + ($$0212$i$i<<2)|0);
     $1005 = ((($627)) + 28|0);
     HEAP32[$1005>>2] = $$0212$i$i;
     $1006 = ((($627)) + 20|0);
     HEAP32[$1006>>2] = 0;
     HEAP32[$931>>2] = 0;
     $1007 = HEAP32[(89044)>>2]|0;
     $1008 = 1 << $$0212$i$i;
     $1009 = $1007 & $1008;
     $1010 = ($1009|0)==(0);
     if ($1010) {
      $1011 = $1007 | $1008;
      HEAP32[(89044)>>2] = $1011;
      HEAP32[$1004>>2] = $627;
      $1012 = ((($627)) + 24|0);
      HEAP32[$1012>>2] = $1004;
      $1013 = ((($627)) + 12|0);
      HEAP32[$1013>>2] = $627;
      $1014 = ((($627)) + 8|0);
      HEAP32[$1014>>2] = $627;
      break;
     }
     $1015 = HEAP32[$1004>>2]|0;
     $1016 = ($$0212$i$i|0)==(31);
     $1017 = $$0212$i$i >>> 1;
     $1018 = (25 - ($1017))|0;
     $1019 = $1016 ? 0 : $1018;
     $1020 = $958 << $1019;
     $$0206$i$i = $1020;$$0207$i$i = $1015;
     while(1) {
      $1021 = ((($$0207$i$i)) + 4|0);
      $1022 = HEAP32[$1021>>2]|0;
      $1023 = $1022 & -8;
      $1024 = ($1023|0)==($958|0);
      if ($1024) {
       label = 304;
       break;
      }
      $1025 = $$0206$i$i >>> 31;
      $1026 = (((($$0207$i$i)) + 16|0) + ($1025<<2)|0);
      $1027 = $$0206$i$i << 1;
      $1028 = HEAP32[$1026>>2]|0;
      $1029 = ($1028|0)==(0|0);
      if ($1029) {
       label = 301;
       break;
      } else {
       $$0206$i$i = $1027;$$0207$i$i = $1028;
      }
     }
     if ((label|0) == 301) {
      $1030 = HEAP32[(89056)>>2]|0;
      $1031 = ($1026>>>0)<($1030>>>0);
      if ($1031) {
       _abort();
       // unreachable;
      } else {
       HEAP32[$1026>>2] = $627;
       $1032 = ((($627)) + 24|0);
       HEAP32[$1032>>2] = $$0207$i$i;
       $1033 = ((($627)) + 12|0);
       HEAP32[$1033>>2] = $627;
       $1034 = ((($627)) + 8|0);
       HEAP32[$1034>>2] = $627;
       break;
      }
     }
     else if ((label|0) == 304) {
      $1035 = ((($$0207$i$i)) + 8|0);
      $1036 = HEAP32[$1035>>2]|0;
      $1037 = HEAP32[(89056)>>2]|0;
      $1038 = ($1036>>>0)>=($1037>>>0);
      $not$$i$i = ($$0207$i$i>>>0)>=($1037>>>0);
      $1039 = $1038 & $not$$i$i;
      if ($1039) {
       $1040 = ((($1036)) + 12|0);
       HEAP32[$1040>>2] = $627;
       HEAP32[$1035>>2] = $627;
       $1041 = ((($627)) + 8|0);
       HEAP32[$1041>>2] = $1036;
       $1042 = ((($627)) + 12|0);
       HEAP32[$1042>>2] = $$0207$i$i;
       $1043 = ((($627)) + 24|0);
       HEAP32[$1043>>2] = 0;
       break;
      } else {
       _abort();
       // unreachable;
      }
     }
    }
   }
  } while(0);
  $1045 = HEAP32[(89052)>>2]|0;
  $1046 = ($1045>>>0)>($$0197>>>0);
  if ($1046) {
   $1047 = (($1045) - ($$0197))|0;
   HEAP32[(89052)>>2] = $1047;
   $1048 = HEAP32[(89064)>>2]|0;
   $1049 = (($1048) + ($$0197)|0);
   HEAP32[(89064)>>2] = $1049;
   $1050 = $1047 | 1;
   $1051 = ((($1049)) + 4|0);
   HEAP32[$1051>>2] = $1050;
   $1052 = $$0197 | 3;
   $1053 = ((($1048)) + 4|0);
   HEAP32[$1053>>2] = $1052;
   $1054 = ((($1048)) + 8|0);
   $$0 = $1054;
   STACKTOP = sp;return ($$0|0);
  }
 }
 $1055 = (___errno_location()|0);
 HEAP32[$1055>>2] = 12;
 $$0 = 0;
 STACKTOP = sp;return ($$0|0);
}
function _free($0) {
 $0 = $0|0;
 var $$0211$i = 0, $$0211$in$i = 0, $$0381 = 0, $$0382 = 0, $$0394 = 0, $$0401 = 0, $$1 = 0, $$1380 = 0, $$1385 = 0, $$1388 = 0, $$1396 = 0, $$1400 = 0, $$2 = 0, $$3 = 0, $$3398 = 0, $$pre = 0, $$pre$phi439Z2D = 0, $$pre$phi441Z2D = 0, $$pre$phiZ2D = 0, $$pre438 = 0;
 var $$pre440 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0;
 var $99 = 0, $cond418 = 0, $cond419 = 0, $not$ = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($0|0)==(0|0);
 if ($1) {
  return;
 }
 $2 = ((($0)) + -8|0);
 $3 = HEAP32[(89056)>>2]|0;
 $4 = ($2>>>0)<($3>>>0);
 if ($4) {
  _abort();
  // unreachable;
 }
 $5 = ((($0)) + -4|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = $6 & 3;
 $8 = ($7|0)==(1);
 if ($8) {
  _abort();
  // unreachable;
 }
 $9 = $6 & -8;
 $10 = (($2) + ($9)|0);
 $11 = $6 & 1;
 $12 = ($11|0)==(0);
 do {
  if ($12) {
   $13 = HEAP32[$2>>2]|0;
   $14 = ($7|0)==(0);
   if ($14) {
    return;
   }
   $15 = (0 - ($13))|0;
   $16 = (($2) + ($15)|0);
   $17 = (($13) + ($9))|0;
   $18 = ($16>>>0)<($3>>>0);
   if ($18) {
    _abort();
    // unreachable;
   }
   $19 = HEAP32[(89060)>>2]|0;
   $20 = ($16|0)==($19|0);
   if ($20) {
    $105 = ((($10)) + 4|0);
    $106 = HEAP32[$105>>2]|0;
    $107 = $106 & 3;
    $108 = ($107|0)==(3);
    if (!($108)) {
     $$1 = $16;$$1380 = $17;
     break;
    }
    HEAP32[(89048)>>2] = $17;
    $109 = $106 & -2;
    HEAP32[$105>>2] = $109;
    $110 = $17 | 1;
    $111 = ((($16)) + 4|0);
    HEAP32[$111>>2] = $110;
    $112 = (($16) + ($17)|0);
    HEAP32[$112>>2] = $17;
    return;
   }
   $21 = $13 >>> 3;
   $22 = ($13>>>0)<(256);
   if ($22) {
    $23 = ((($16)) + 8|0);
    $24 = HEAP32[$23>>2]|0;
    $25 = ((($16)) + 12|0);
    $26 = HEAP32[$25>>2]|0;
    $27 = $21 << 1;
    $28 = (89080 + ($27<<2)|0);
    $29 = ($24|0)==($28|0);
    if (!($29)) {
     $30 = ($24>>>0)<($3>>>0);
     if ($30) {
      _abort();
      // unreachable;
     }
     $31 = ((($24)) + 12|0);
     $32 = HEAP32[$31>>2]|0;
     $33 = ($32|0)==($16|0);
     if (!($33)) {
      _abort();
      // unreachable;
     }
    }
    $34 = ($26|0)==($24|0);
    if ($34) {
     $35 = 1 << $21;
     $36 = $35 ^ -1;
     $37 = HEAP32[22260]|0;
     $38 = $37 & $36;
     HEAP32[22260] = $38;
     $$1 = $16;$$1380 = $17;
     break;
    }
    $39 = ($26|0)==($28|0);
    if ($39) {
     $$pre440 = ((($26)) + 8|0);
     $$pre$phi441Z2D = $$pre440;
    } else {
     $40 = ($26>>>0)<($3>>>0);
     if ($40) {
      _abort();
      // unreachable;
     }
     $41 = ((($26)) + 8|0);
     $42 = HEAP32[$41>>2]|0;
     $43 = ($42|0)==($16|0);
     if ($43) {
      $$pre$phi441Z2D = $41;
     } else {
      _abort();
      // unreachable;
     }
    }
    $44 = ((($24)) + 12|0);
    HEAP32[$44>>2] = $26;
    HEAP32[$$pre$phi441Z2D>>2] = $24;
    $$1 = $16;$$1380 = $17;
    break;
   }
   $45 = ((($16)) + 24|0);
   $46 = HEAP32[$45>>2]|0;
   $47 = ((($16)) + 12|0);
   $48 = HEAP32[$47>>2]|0;
   $49 = ($48|0)==($16|0);
   do {
    if ($49) {
     $59 = ((($16)) + 16|0);
     $60 = ((($59)) + 4|0);
     $61 = HEAP32[$60>>2]|0;
     $62 = ($61|0)==(0|0);
     if ($62) {
      $63 = HEAP32[$59>>2]|0;
      $64 = ($63|0)==(0|0);
      if ($64) {
       $$3 = 0;
       break;
      } else {
       $$1385 = $63;$$1388 = $59;
      }
     } else {
      $$1385 = $61;$$1388 = $60;
     }
     while(1) {
      $65 = ((($$1385)) + 20|0);
      $66 = HEAP32[$65>>2]|0;
      $67 = ($66|0)==(0|0);
      if (!($67)) {
       $$1385 = $66;$$1388 = $65;
       continue;
      }
      $68 = ((($$1385)) + 16|0);
      $69 = HEAP32[$68>>2]|0;
      $70 = ($69|0)==(0|0);
      if ($70) {
       break;
      } else {
       $$1385 = $69;$$1388 = $68;
      }
     }
     $71 = ($$1388>>>0)<($3>>>0);
     if ($71) {
      _abort();
      // unreachable;
     } else {
      HEAP32[$$1388>>2] = 0;
      $$3 = $$1385;
      break;
     }
    } else {
     $50 = ((($16)) + 8|0);
     $51 = HEAP32[$50>>2]|0;
     $52 = ($51>>>0)<($3>>>0);
     if ($52) {
      _abort();
      // unreachable;
     }
     $53 = ((($51)) + 12|0);
     $54 = HEAP32[$53>>2]|0;
     $55 = ($54|0)==($16|0);
     if (!($55)) {
      _abort();
      // unreachable;
     }
     $56 = ((($48)) + 8|0);
     $57 = HEAP32[$56>>2]|0;
     $58 = ($57|0)==($16|0);
     if ($58) {
      HEAP32[$53>>2] = $48;
      HEAP32[$56>>2] = $51;
      $$3 = $48;
      break;
     } else {
      _abort();
      // unreachable;
     }
    }
   } while(0);
   $72 = ($46|0)==(0|0);
   if ($72) {
    $$1 = $16;$$1380 = $17;
   } else {
    $73 = ((($16)) + 28|0);
    $74 = HEAP32[$73>>2]|0;
    $75 = (89344 + ($74<<2)|0);
    $76 = HEAP32[$75>>2]|0;
    $77 = ($16|0)==($76|0);
    if ($77) {
     HEAP32[$75>>2] = $$3;
     $cond418 = ($$3|0)==(0|0);
     if ($cond418) {
      $78 = 1 << $74;
      $79 = $78 ^ -1;
      $80 = HEAP32[(89044)>>2]|0;
      $81 = $80 & $79;
      HEAP32[(89044)>>2] = $81;
      $$1 = $16;$$1380 = $17;
      break;
     }
    } else {
     $82 = HEAP32[(89056)>>2]|0;
     $83 = ($46>>>0)<($82>>>0);
     if ($83) {
      _abort();
      // unreachable;
     }
     $84 = ((($46)) + 16|0);
     $85 = HEAP32[$84>>2]|0;
     $86 = ($85|0)==($16|0);
     if ($86) {
      HEAP32[$84>>2] = $$3;
     } else {
      $87 = ((($46)) + 20|0);
      HEAP32[$87>>2] = $$3;
     }
     $88 = ($$3|0)==(0|0);
     if ($88) {
      $$1 = $16;$$1380 = $17;
      break;
     }
    }
    $89 = HEAP32[(89056)>>2]|0;
    $90 = ($$3>>>0)<($89>>>0);
    if ($90) {
     _abort();
     // unreachable;
    }
    $91 = ((($$3)) + 24|0);
    HEAP32[$91>>2] = $46;
    $92 = ((($16)) + 16|0);
    $93 = HEAP32[$92>>2]|0;
    $94 = ($93|0)==(0|0);
    do {
     if (!($94)) {
      $95 = ($93>>>0)<($89>>>0);
      if ($95) {
       _abort();
       // unreachable;
      } else {
       $96 = ((($$3)) + 16|0);
       HEAP32[$96>>2] = $93;
       $97 = ((($93)) + 24|0);
       HEAP32[$97>>2] = $$3;
       break;
      }
     }
    } while(0);
    $98 = ((($92)) + 4|0);
    $99 = HEAP32[$98>>2]|0;
    $100 = ($99|0)==(0|0);
    if ($100) {
     $$1 = $16;$$1380 = $17;
    } else {
     $101 = HEAP32[(89056)>>2]|0;
     $102 = ($99>>>0)<($101>>>0);
     if ($102) {
      _abort();
      // unreachable;
     } else {
      $103 = ((($$3)) + 20|0);
      HEAP32[$103>>2] = $99;
      $104 = ((($99)) + 24|0);
      HEAP32[$104>>2] = $$3;
      $$1 = $16;$$1380 = $17;
      break;
     }
    }
   }
  } else {
   $$1 = $2;$$1380 = $9;
  }
 } while(0);
 $113 = ($$1>>>0)<($10>>>0);
 if (!($113)) {
  _abort();
  // unreachable;
 }
 $114 = ((($10)) + 4|0);
 $115 = HEAP32[$114>>2]|0;
 $116 = $115 & 1;
 $117 = ($116|0)==(0);
 if ($117) {
  _abort();
  // unreachable;
 }
 $118 = $115 & 2;
 $119 = ($118|0)==(0);
 if ($119) {
  $120 = HEAP32[(89064)>>2]|0;
  $121 = ($10|0)==($120|0);
  if ($121) {
   $122 = HEAP32[(89052)>>2]|0;
   $123 = (($122) + ($$1380))|0;
   HEAP32[(89052)>>2] = $123;
   HEAP32[(89064)>>2] = $$1;
   $124 = $123 | 1;
   $125 = ((($$1)) + 4|0);
   HEAP32[$125>>2] = $124;
   $126 = HEAP32[(89060)>>2]|0;
   $127 = ($$1|0)==($126|0);
   if (!($127)) {
    return;
   }
   HEAP32[(89060)>>2] = 0;
   HEAP32[(89048)>>2] = 0;
   return;
  }
  $128 = HEAP32[(89060)>>2]|0;
  $129 = ($10|0)==($128|0);
  if ($129) {
   $130 = HEAP32[(89048)>>2]|0;
   $131 = (($130) + ($$1380))|0;
   HEAP32[(89048)>>2] = $131;
   HEAP32[(89060)>>2] = $$1;
   $132 = $131 | 1;
   $133 = ((($$1)) + 4|0);
   HEAP32[$133>>2] = $132;
   $134 = (($$1) + ($131)|0);
   HEAP32[$134>>2] = $131;
   return;
  }
  $135 = $115 & -8;
  $136 = (($135) + ($$1380))|0;
  $137 = $115 >>> 3;
  $138 = ($115>>>0)<(256);
  do {
   if ($138) {
    $139 = ((($10)) + 8|0);
    $140 = HEAP32[$139>>2]|0;
    $141 = ((($10)) + 12|0);
    $142 = HEAP32[$141>>2]|0;
    $143 = $137 << 1;
    $144 = (89080 + ($143<<2)|0);
    $145 = ($140|0)==($144|0);
    if (!($145)) {
     $146 = HEAP32[(89056)>>2]|0;
     $147 = ($140>>>0)<($146>>>0);
     if ($147) {
      _abort();
      // unreachable;
     }
     $148 = ((($140)) + 12|0);
     $149 = HEAP32[$148>>2]|0;
     $150 = ($149|0)==($10|0);
     if (!($150)) {
      _abort();
      // unreachable;
     }
    }
    $151 = ($142|0)==($140|0);
    if ($151) {
     $152 = 1 << $137;
     $153 = $152 ^ -1;
     $154 = HEAP32[22260]|0;
     $155 = $154 & $153;
     HEAP32[22260] = $155;
     break;
    }
    $156 = ($142|0)==($144|0);
    if ($156) {
     $$pre438 = ((($142)) + 8|0);
     $$pre$phi439Z2D = $$pre438;
    } else {
     $157 = HEAP32[(89056)>>2]|0;
     $158 = ($142>>>0)<($157>>>0);
     if ($158) {
      _abort();
      // unreachable;
     }
     $159 = ((($142)) + 8|0);
     $160 = HEAP32[$159>>2]|0;
     $161 = ($160|0)==($10|0);
     if ($161) {
      $$pre$phi439Z2D = $159;
     } else {
      _abort();
      // unreachable;
     }
    }
    $162 = ((($140)) + 12|0);
    HEAP32[$162>>2] = $142;
    HEAP32[$$pre$phi439Z2D>>2] = $140;
   } else {
    $163 = ((($10)) + 24|0);
    $164 = HEAP32[$163>>2]|0;
    $165 = ((($10)) + 12|0);
    $166 = HEAP32[$165>>2]|0;
    $167 = ($166|0)==($10|0);
    do {
     if ($167) {
      $178 = ((($10)) + 16|0);
      $179 = ((($178)) + 4|0);
      $180 = HEAP32[$179>>2]|0;
      $181 = ($180|0)==(0|0);
      if ($181) {
       $182 = HEAP32[$178>>2]|0;
       $183 = ($182|0)==(0|0);
       if ($183) {
        $$3398 = 0;
        break;
       } else {
        $$1396 = $182;$$1400 = $178;
       }
      } else {
       $$1396 = $180;$$1400 = $179;
      }
      while(1) {
       $184 = ((($$1396)) + 20|0);
       $185 = HEAP32[$184>>2]|0;
       $186 = ($185|0)==(0|0);
       if (!($186)) {
        $$1396 = $185;$$1400 = $184;
        continue;
       }
       $187 = ((($$1396)) + 16|0);
       $188 = HEAP32[$187>>2]|0;
       $189 = ($188|0)==(0|0);
       if ($189) {
        break;
       } else {
        $$1396 = $188;$$1400 = $187;
       }
      }
      $190 = HEAP32[(89056)>>2]|0;
      $191 = ($$1400>>>0)<($190>>>0);
      if ($191) {
       _abort();
       // unreachable;
      } else {
       HEAP32[$$1400>>2] = 0;
       $$3398 = $$1396;
       break;
      }
     } else {
      $168 = ((($10)) + 8|0);
      $169 = HEAP32[$168>>2]|0;
      $170 = HEAP32[(89056)>>2]|0;
      $171 = ($169>>>0)<($170>>>0);
      if ($171) {
       _abort();
       // unreachable;
      }
      $172 = ((($169)) + 12|0);
      $173 = HEAP32[$172>>2]|0;
      $174 = ($173|0)==($10|0);
      if (!($174)) {
       _abort();
       // unreachable;
      }
      $175 = ((($166)) + 8|0);
      $176 = HEAP32[$175>>2]|0;
      $177 = ($176|0)==($10|0);
      if ($177) {
       HEAP32[$172>>2] = $166;
       HEAP32[$175>>2] = $169;
       $$3398 = $166;
       break;
      } else {
       _abort();
       // unreachable;
      }
     }
    } while(0);
    $192 = ($164|0)==(0|0);
    if (!($192)) {
     $193 = ((($10)) + 28|0);
     $194 = HEAP32[$193>>2]|0;
     $195 = (89344 + ($194<<2)|0);
     $196 = HEAP32[$195>>2]|0;
     $197 = ($10|0)==($196|0);
     if ($197) {
      HEAP32[$195>>2] = $$3398;
      $cond419 = ($$3398|0)==(0|0);
      if ($cond419) {
       $198 = 1 << $194;
       $199 = $198 ^ -1;
       $200 = HEAP32[(89044)>>2]|0;
       $201 = $200 & $199;
       HEAP32[(89044)>>2] = $201;
       break;
      }
     } else {
      $202 = HEAP32[(89056)>>2]|0;
      $203 = ($164>>>0)<($202>>>0);
      if ($203) {
       _abort();
       // unreachable;
      }
      $204 = ((($164)) + 16|0);
      $205 = HEAP32[$204>>2]|0;
      $206 = ($205|0)==($10|0);
      if ($206) {
       HEAP32[$204>>2] = $$3398;
      } else {
       $207 = ((($164)) + 20|0);
       HEAP32[$207>>2] = $$3398;
      }
      $208 = ($$3398|0)==(0|0);
      if ($208) {
       break;
      }
     }
     $209 = HEAP32[(89056)>>2]|0;
     $210 = ($$3398>>>0)<($209>>>0);
     if ($210) {
      _abort();
      // unreachable;
     }
     $211 = ((($$3398)) + 24|0);
     HEAP32[$211>>2] = $164;
     $212 = ((($10)) + 16|0);
     $213 = HEAP32[$212>>2]|0;
     $214 = ($213|0)==(0|0);
     do {
      if (!($214)) {
       $215 = ($213>>>0)<($209>>>0);
       if ($215) {
        _abort();
        // unreachable;
       } else {
        $216 = ((($$3398)) + 16|0);
        HEAP32[$216>>2] = $213;
        $217 = ((($213)) + 24|0);
        HEAP32[$217>>2] = $$3398;
        break;
       }
      }
     } while(0);
     $218 = ((($212)) + 4|0);
     $219 = HEAP32[$218>>2]|0;
     $220 = ($219|0)==(0|0);
     if (!($220)) {
      $221 = HEAP32[(89056)>>2]|0;
      $222 = ($219>>>0)<($221>>>0);
      if ($222) {
       _abort();
       // unreachable;
      } else {
       $223 = ((($$3398)) + 20|0);
       HEAP32[$223>>2] = $219;
       $224 = ((($219)) + 24|0);
       HEAP32[$224>>2] = $$3398;
       break;
      }
     }
    }
   }
  } while(0);
  $225 = $136 | 1;
  $226 = ((($$1)) + 4|0);
  HEAP32[$226>>2] = $225;
  $227 = (($$1) + ($136)|0);
  HEAP32[$227>>2] = $136;
  $228 = HEAP32[(89060)>>2]|0;
  $229 = ($$1|0)==($228|0);
  if ($229) {
   HEAP32[(89048)>>2] = $136;
   return;
  } else {
   $$2 = $136;
  }
 } else {
  $230 = $115 & -2;
  HEAP32[$114>>2] = $230;
  $231 = $$1380 | 1;
  $232 = ((($$1)) + 4|0);
  HEAP32[$232>>2] = $231;
  $233 = (($$1) + ($$1380)|0);
  HEAP32[$233>>2] = $$1380;
  $$2 = $$1380;
 }
 $234 = $$2 >>> 3;
 $235 = ($$2>>>0)<(256);
 if ($235) {
  $236 = $234 << 1;
  $237 = (89080 + ($236<<2)|0);
  $238 = HEAP32[22260]|0;
  $239 = 1 << $234;
  $240 = $238 & $239;
  $241 = ($240|0)==(0);
  if ($241) {
   $242 = $238 | $239;
   HEAP32[22260] = $242;
   $$pre = ((($237)) + 8|0);
   $$0401 = $237;$$pre$phiZ2D = $$pre;
  } else {
   $243 = ((($237)) + 8|0);
   $244 = HEAP32[$243>>2]|0;
   $245 = HEAP32[(89056)>>2]|0;
   $246 = ($244>>>0)<($245>>>0);
   if ($246) {
    _abort();
    // unreachable;
   } else {
    $$0401 = $244;$$pre$phiZ2D = $243;
   }
  }
  HEAP32[$$pre$phiZ2D>>2] = $$1;
  $247 = ((($$0401)) + 12|0);
  HEAP32[$247>>2] = $$1;
  $248 = ((($$1)) + 8|0);
  HEAP32[$248>>2] = $$0401;
  $249 = ((($$1)) + 12|0);
  HEAP32[$249>>2] = $237;
  return;
 }
 $250 = $$2 >>> 8;
 $251 = ($250|0)==(0);
 if ($251) {
  $$0394 = 0;
 } else {
  $252 = ($$2>>>0)>(16777215);
  if ($252) {
   $$0394 = 31;
  } else {
   $253 = (($250) + 1048320)|0;
   $254 = $253 >>> 16;
   $255 = $254 & 8;
   $256 = $250 << $255;
   $257 = (($256) + 520192)|0;
   $258 = $257 >>> 16;
   $259 = $258 & 4;
   $260 = $259 | $255;
   $261 = $256 << $259;
   $262 = (($261) + 245760)|0;
   $263 = $262 >>> 16;
   $264 = $263 & 2;
   $265 = $260 | $264;
   $266 = (14 - ($265))|0;
   $267 = $261 << $264;
   $268 = $267 >>> 15;
   $269 = (($266) + ($268))|0;
   $270 = $269 << 1;
   $271 = (($269) + 7)|0;
   $272 = $$2 >>> $271;
   $273 = $272 & 1;
   $274 = $273 | $270;
   $$0394 = $274;
  }
 }
 $275 = (89344 + ($$0394<<2)|0);
 $276 = ((($$1)) + 28|0);
 HEAP32[$276>>2] = $$0394;
 $277 = ((($$1)) + 16|0);
 $278 = ((($$1)) + 20|0);
 HEAP32[$278>>2] = 0;
 HEAP32[$277>>2] = 0;
 $279 = HEAP32[(89044)>>2]|0;
 $280 = 1 << $$0394;
 $281 = $279 & $280;
 $282 = ($281|0)==(0);
 do {
  if ($282) {
   $283 = $279 | $280;
   HEAP32[(89044)>>2] = $283;
   HEAP32[$275>>2] = $$1;
   $284 = ((($$1)) + 24|0);
   HEAP32[$284>>2] = $275;
   $285 = ((($$1)) + 12|0);
   HEAP32[$285>>2] = $$1;
   $286 = ((($$1)) + 8|0);
   HEAP32[$286>>2] = $$1;
  } else {
   $287 = HEAP32[$275>>2]|0;
   $288 = ($$0394|0)==(31);
   $289 = $$0394 >>> 1;
   $290 = (25 - ($289))|0;
   $291 = $288 ? 0 : $290;
   $292 = $$2 << $291;
   $$0381 = $292;$$0382 = $287;
   while(1) {
    $293 = ((($$0382)) + 4|0);
    $294 = HEAP32[$293>>2]|0;
    $295 = $294 & -8;
    $296 = ($295|0)==($$2|0);
    if ($296) {
     label = 130;
     break;
    }
    $297 = $$0381 >>> 31;
    $298 = (((($$0382)) + 16|0) + ($297<<2)|0);
    $299 = $$0381 << 1;
    $300 = HEAP32[$298>>2]|0;
    $301 = ($300|0)==(0|0);
    if ($301) {
     label = 127;
     break;
    } else {
     $$0381 = $299;$$0382 = $300;
    }
   }
   if ((label|0) == 127) {
    $302 = HEAP32[(89056)>>2]|0;
    $303 = ($298>>>0)<($302>>>0);
    if ($303) {
     _abort();
     // unreachable;
    } else {
     HEAP32[$298>>2] = $$1;
     $304 = ((($$1)) + 24|0);
     HEAP32[$304>>2] = $$0382;
     $305 = ((($$1)) + 12|0);
     HEAP32[$305>>2] = $$1;
     $306 = ((($$1)) + 8|0);
     HEAP32[$306>>2] = $$1;
     break;
    }
   }
   else if ((label|0) == 130) {
    $307 = ((($$0382)) + 8|0);
    $308 = HEAP32[$307>>2]|0;
    $309 = HEAP32[(89056)>>2]|0;
    $310 = ($308>>>0)>=($309>>>0);
    $not$ = ($$0382>>>0)>=($309>>>0);
    $311 = $310 & $not$;
    if ($311) {
     $312 = ((($308)) + 12|0);
     HEAP32[$312>>2] = $$1;
     HEAP32[$307>>2] = $$1;
     $313 = ((($$1)) + 8|0);
     HEAP32[$313>>2] = $308;
     $314 = ((($$1)) + 12|0);
     HEAP32[$314>>2] = $$0382;
     $315 = ((($$1)) + 24|0);
     HEAP32[$315>>2] = 0;
     break;
    } else {
     _abort();
     // unreachable;
    }
   }
  }
 } while(0);
 $316 = HEAP32[(89072)>>2]|0;
 $317 = (($316) + -1)|0;
 HEAP32[(89072)>>2] = $317;
 $318 = ($317|0)==(0);
 if ($318) {
  $$0211$in$i = (89496);
 } else {
  return;
 }
 while(1) {
  $$0211$i = HEAP32[$$0211$in$i>>2]|0;
  $319 = ($$0211$i|0)==(0|0);
  $320 = ((($$0211$i)) + 8|0);
  if ($319) {
   break;
  } else {
   $$0211$in$i = $320;
  }
 }
 HEAP32[(89072)>>2] = -1;
 return;
}
function _calloc($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$ = 0, $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($0|0)==(0);
 if ($2) {
  $$0 = 0;
 } else {
  $3 = Math_imul($1, $0)|0;
  $4 = $1 | $0;
  $5 = ($4>>>0)>(65535);
  if ($5) {
   $6 = (($3>>>0) / ($0>>>0))&-1;
   $7 = ($6|0)==($1|0);
   $$ = $7 ? $3 : -1;
   $$0 = $$;
  } else {
   $$0 = $3;
  }
 }
 $8 = (_malloc($$0)|0);
 $9 = ($8|0)==(0|0);
 if ($9) {
  return ($8|0);
 }
 $10 = ((($8)) + -4|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = $11 & 3;
 $13 = ($12|0)==(0);
 if ($13) {
  return ($8|0);
 }
 _memset(($8|0),0,($$0|0))|0;
 return ($8|0);
}
function _realloc($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($0|0)==(0|0);
 if ($2) {
  $3 = (_malloc($1)|0);
  $$1 = $3;
  return ($$1|0);
 }
 $4 = ($1>>>0)>(4294967231);
 if ($4) {
  $5 = (___errno_location()|0);
  HEAP32[$5>>2] = 12;
  $$1 = 0;
  return ($$1|0);
 }
 $6 = ($1>>>0)<(11);
 $7 = (($1) + 11)|0;
 $8 = $7 & -8;
 $9 = $6 ? 16 : $8;
 $10 = ((($0)) + -8|0);
 $11 = (_try_realloc_chunk($10,$9)|0);
 $12 = ($11|0)==(0|0);
 if (!($12)) {
  $13 = ((($11)) + 8|0);
  $$1 = $13;
  return ($$1|0);
 }
 $14 = (_malloc($1)|0);
 $15 = ($14|0)==(0|0);
 if ($15) {
  $$1 = 0;
  return ($$1|0);
 }
 $16 = ((($0)) + -4|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = $17 & -8;
 $19 = $17 & 3;
 $20 = ($19|0)==(0);
 $21 = $20 ? 8 : 4;
 $22 = (($18) - ($21))|0;
 $23 = ($22>>>0)<($1>>>0);
 $24 = $23 ? $22 : $1;
 _memcpy(($14|0),($0|0),($24|0))|0;
 _free($0);
 $$1 = $14;
 return ($$1|0);
}
function _try_realloc_chunk($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$1271 = 0, $$1274 = 0, $$2 = 0, $$3 = 0, $$pre = 0, $$pre$phiZ2D = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0;
 var $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0;
 var $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0;
 var $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0;
 var $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0;
 var $98 = 0, $99 = 0, $cond = 0, $notlhs = 0, $notrhs = 0, $or$cond$not = 0, $or$cond3 = 0, $storemerge = 0, $storemerge1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = $3 & -8;
 $5 = (($0) + ($4)|0);
 $6 = HEAP32[(89056)>>2]|0;
 $7 = $3 & 3;
 $notlhs = ($0>>>0)>=($6>>>0);
 $notrhs = ($7|0)!=(1);
 $or$cond$not = $notrhs & $notlhs;
 $8 = ($0>>>0)<($5>>>0);
 $or$cond3 = $or$cond$not & $8;
 if (!($or$cond3)) {
  _abort();
  // unreachable;
 }
 $9 = ((($5)) + 4|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = $10 & 1;
 $12 = ($11|0)==(0);
 if ($12) {
  _abort();
  // unreachable;
 }
 $13 = ($7|0)==(0);
 if ($13) {
  $14 = ($1>>>0)<(256);
  if ($14) {
   $$2 = 0;
   return ($$2|0);
  }
  $15 = (($1) + 4)|0;
  $16 = ($4>>>0)<($15>>>0);
  if (!($16)) {
   $17 = (($4) - ($1))|0;
   $18 = HEAP32[(89520)>>2]|0;
   $19 = $18 << 1;
   $20 = ($17>>>0)>($19>>>0);
   if (!($20)) {
    $$2 = $0;
    return ($$2|0);
   }
  }
  $$2 = 0;
  return ($$2|0);
 }
 $21 = ($4>>>0)<($1>>>0);
 if (!($21)) {
  $22 = (($4) - ($1))|0;
  $23 = ($22>>>0)>(15);
  if (!($23)) {
   $$2 = $0;
   return ($$2|0);
  }
  $24 = (($0) + ($1)|0);
  $25 = $3 & 1;
  $26 = $25 | $1;
  $27 = $26 | 2;
  HEAP32[$2>>2] = $27;
  $28 = ((($24)) + 4|0);
  $29 = $22 | 3;
  HEAP32[$28>>2] = $29;
  $30 = (($24) + ($22)|0);
  $31 = ((($30)) + 4|0);
  $32 = HEAP32[$31>>2]|0;
  $33 = $32 | 1;
  HEAP32[$31>>2] = $33;
  _dispose_chunk($24,$22);
  $$2 = $0;
  return ($$2|0);
 }
 $34 = HEAP32[(89064)>>2]|0;
 $35 = ($5|0)==($34|0);
 if ($35) {
  $36 = HEAP32[(89052)>>2]|0;
  $37 = (($36) + ($4))|0;
  $38 = ($37>>>0)>($1>>>0);
  if (!($38)) {
   $$2 = 0;
   return ($$2|0);
  }
  $39 = (($37) - ($1))|0;
  $40 = (($0) + ($1)|0);
  $41 = $3 & 1;
  $42 = $41 | $1;
  $43 = $42 | 2;
  HEAP32[$2>>2] = $43;
  $44 = ((($40)) + 4|0);
  $45 = $39 | 1;
  HEAP32[$44>>2] = $45;
  HEAP32[(89064)>>2] = $40;
  HEAP32[(89052)>>2] = $39;
  $$2 = $0;
  return ($$2|0);
 }
 $46 = HEAP32[(89060)>>2]|0;
 $47 = ($5|0)==($46|0);
 if ($47) {
  $48 = HEAP32[(89048)>>2]|0;
  $49 = (($48) + ($4))|0;
  $50 = ($49>>>0)<($1>>>0);
  if ($50) {
   $$2 = 0;
   return ($$2|0);
  }
  $51 = (($49) - ($1))|0;
  $52 = ($51>>>0)>(15);
  if ($52) {
   $53 = (($0) + ($1)|0);
   $54 = (($53) + ($51)|0);
   $55 = $3 & 1;
   $56 = $55 | $1;
   $57 = $56 | 2;
   HEAP32[$2>>2] = $57;
   $58 = ((($53)) + 4|0);
   $59 = $51 | 1;
   HEAP32[$58>>2] = $59;
   HEAP32[$54>>2] = $51;
   $60 = ((($54)) + 4|0);
   $61 = HEAP32[$60>>2]|0;
   $62 = $61 & -2;
   HEAP32[$60>>2] = $62;
   $storemerge = $53;$storemerge1 = $51;
  } else {
   $63 = $3 & 1;
   $64 = $63 | $49;
   $65 = $64 | 2;
   HEAP32[$2>>2] = $65;
   $66 = (($0) + ($49)|0);
   $67 = ((($66)) + 4|0);
   $68 = HEAP32[$67>>2]|0;
   $69 = $68 | 1;
   HEAP32[$67>>2] = $69;
   $storemerge = 0;$storemerge1 = 0;
  }
  HEAP32[(89048)>>2] = $storemerge1;
  HEAP32[(89060)>>2] = $storemerge;
  $$2 = $0;
  return ($$2|0);
 }
 $70 = $10 & 2;
 $71 = ($70|0)==(0);
 if (!($71)) {
  $$2 = 0;
  return ($$2|0);
 }
 $72 = $10 & -8;
 $73 = (($72) + ($4))|0;
 $74 = ($73>>>0)<($1>>>0);
 if ($74) {
  $$2 = 0;
  return ($$2|0);
 }
 $75 = (($73) - ($1))|0;
 $76 = $10 >>> 3;
 $77 = ($10>>>0)<(256);
 do {
  if ($77) {
   $78 = ((($5)) + 8|0);
   $79 = HEAP32[$78>>2]|0;
   $80 = ((($5)) + 12|0);
   $81 = HEAP32[$80>>2]|0;
   $82 = $76 << 1;
   $83 = (89080 + ($82<<2)|0);
   $84 = ($79|0)==($83|0);
   if (!($84)) {
    $85 = ($79>>>0)<($6>>>0);
    if ($85) {
     _abort();
     // unreachable;
    }
    $86 = ((($79)) + 12|0);
    $87 = HEAP32[$86>>2]|0;
    $88 = ($87|0)==($5|0);
    if (!($88)) {
     _abort();
     // unreachable;
    }
   }
   $89 = ($81|0)==($79|0);
   if ($89) {
    $90 = 1 << $76;
    $91 = $90 ^ -1;
    $92 = HEAP32[22260]|0;
    $93 = $92 & $91;
    HEAP32[22260] = $93;
    break;
   }
   $94 = ($81|0)==($83|0);
   if ($94) {
    $$pre = ((($81)) + 8|0);
    $$pre$phiZ2D = $$pre;
   } else {
    $95 = ($81>>>0)<($6>>>0);
    if ($95) {
     _abort();
     // unreachable;
    }
    $96 = ((($81)) + 8|0);
    $97 = HEAP32[$96>>2]|0;
    $98 = ($97|0)==($5|0);
    if ($98) {
     $$pre$phiZ2D = $96;
    } else {
     _abort();
     // unreachable;
    }
   }
   $99 = ((($79)) + 12|0);
   HEAP32[$99>>2] = $81;
   HEAP32[$$pre$phiZ2D>>2] = $79;
  } else {
   $100 = ((($5)) + 24|0);
   $101 = HEAP32[$100>>2]|0;
   $102 = ((($5)) + 12|0);
   $103 = HEAP32[$102>>2]|0;
   $104 = ($103|0)==($5|0);
   do {
    if ($104) {
     $114 = ((($5)) + 16|0);
     $115 = ((($114)) + 4|0);
     $116 = HEAP32[$115>>2]|0;
     $117 = ($116|0)==(0|0);
     if ($117) {
      $118 = HEAP32[$114>>2]|0;
      $119 = ($118|0)==(0|0);
      if ($119) {
       $$3 = 0;
       break;
      } else {
       $$1271 = $118;$$1274 = $114;
      }
     } else {
      $$1271 = $116;$$1274 = $115;
     }
     while(1) {
      $120 = ((($$1271)) + 20|0);
      $121 = HEAP32[$120>>2]|0;
      $122 = ($121|0)==(0|0);
      if (!($122)) {
       $$1271 = $121;$$1274 = $120;
       continue;
      }
      $123 = ((($$1271)) + 16|0);
      $124 = HEAP32[$123>>2]|0;
      $125 = ($124|0)==(0|0);
      if ($125) {
       break;
      } else {
       $$1271 = $124;$$1274 = $123;
      }
     }
     $126 = ($$1274>>>0)<($6>>>0);
     if ($126) {
      _abort();
      // unreachable;
     } else {
      HEAP32[$$1274>>2] = 0;
      $$3 = $$1271;
      break;
     }
    } else {
     $105 = ((($5)) + 8|0);
     $106 = HEAP32[$105>>2]|0;
     $107 = ($106>>>0)<($6>>>0);
     if ($107) {
      _abort();
      // unreachable;
     }
     $108 = ((($106)) + 12|0);
     $109 = HEAP32[$108>>2]|0;
     $110 = ($109|0)==($5|0);
     if (!($110)) {
      _abort();
      // unreachable;
     }
     $111 = ((($103)) + 8|0);
     $112 = HEAP32[$111>>2]|0;
     $113 = ($112|0)==($5|0);
     if ($113) {
      HEAP32[$108>>2] = $103;
      HEAP32[$111>>2] = $106;
      $$3 = $103;
      break;
     } else {
      _abort();
      // unreachable;
     }
    }
   } while(0);
   $127 = ($101|0)==(0|0);
   if (!($127)) {
    $128 = ((($5)) + 28|0);
    $129 = HEAP32[$128>>2]|0;
    $130 = (89344 + ($129<<2)|0);
    $131 = HEAP32[$130>>2]|0;
    $132 = ($5|0)==($131|0);
    if ($132) {
     HEAP32[$130>>2] = $$3;
     $cond = ($$3|0)==(0|0);
     if ($cond) {
      $133 = 1 << $129;
      $134 = $133 ^ -1;
      $135 = HEAP32[(89044)>>2]|0;
      $136 = $135 & $134;
      HEAP32[(89044)>>2] = $136;
      break;
     }
    } else {
     $137 = HEAP32[(89056)>>2]|0;
     $138 = ($101>>>0)<($137>>>0);
     if ($138) {
      _abort();
      // unreachable;
     }
     $139 = ((($101)) + 16|0);
     $140 = HEAP32[$139>>2]|0;
     $141 = ($140|0)==($5|0);
     if ($141) {
      HEAP32[$139>>2] = $$3;
     } else {
      $142 = ((($101)) + 20|0);
      HEAP32[$142>>2] = $$3;
     }
     $143 = ($$3|0)==(0|0);
     if ($143) {
      break;
     }
    }
    $144 = HEAP32[(89056)>>2]|0;
    $145 = ($$3>>>0)<($144>>>0);
    if ($145) {
     _abort();
     // unreachable;
    }
    $146 = ((($$3)) + 24|0);
    HEAP32[$146>>2] = $101;
    $147 = ((($5)) + 16|0);
    $148 = HEAP32[$147>>2]|0;
    $149 = ($148|0)==(0|0);
    do {
     if (!($149)) {
      $150 = ($148>>>0)<($144>>>0);
      if ($150) {
       _abort();
       // unreachable;
      } else {
       $151 = ((($$3)) + 16|0);
       HEAP32[$151>>2] = $148;
       $152 = ((($148)) + 24|0);
       HEAP32[$152>>2] = $$3;
       break;
      }
     }
    } while(0);
    $153 = ((($147)) + 4|0);
    $154 = HEAP32[$153>>2]|0;
    $155 = ($154|0)==(0|0);
    if (!($155)) {
     $156 = HEAP32[(89056)>>2]|0;
     $157 = ($154>>>0)<($156>>>0);
     if ($157) {
      _abort();
      // unreachable;
     } else {
      $158 = ((($$3)) + 20|0);
      HEAP32[$158>>2] = $154;
      $159 = ((($154)) + 24|0);
      HEAP32[$159>>2] = $$3;
      break;
     }
    }
   }
  }
 } while(0);
 $160 = ($75>>>0)<(16);
 if ($160) {
  $161 = $3 & 1;
  $162 = $73 | $161;
  $163 = $162 | 2;
  HEAP32[$2>>2] = $163;
  $164 = (($0) + ($73)|0);
  $165 = ((($164)) + 4|0);
  $166 = HEAP32[$165>>2]|0;
  $167 = $166 | 1;
  HEAP32[$165>>2] = $167;
  $$2 = $0;
  return ($$2|0);
 } else {
  $168 = (($0) + ($1)|0);
  $169 = $3 & 1;
  $170 = $169 | $1;
  $171 = $170 | 2;
  HEAP32[$2>>2] = $171;
  $172 = ((($168)) + 4|0);
  $173 = $75 | 3;
  HEAP32[$172>>2] = $173;
  $174 = (($168) + ($75)|0);
  $175 = ((($174)) + 4|0);
  $176 = HEAP32[$175>>2]|0;
  $177 = $176 | 1;
  HEAP32[$175>>2] = $177;
  _dispose_chunk($168,$75);
  $$2 = $0;
  return ($$2|0);
 }
 return (0)|0;
}
function _dispose_chunk($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0417 = 0, $$0418 = 0, $$0429 = 0, $$0436 = 0, $$1 = 0, $$1416 = 0, $$1424 = 0, $$1427 = 0, $$1431 = 0, $$1435 = 0, $$2 = 0, $$3 = 0, $$3433 = 0, $$pre = 0, $$pre$phi22Z2D = 0, $$pre$phi24Z2D = 0, $$pre$phiZ2D = 0, $$pre21 = 0, $$pre23 = 0, $10 = 0;
 var $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0;
 var $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0;
 var $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0;
 var $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0;
 var $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0;
 var $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0;
 var $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0;
 var $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0;
 var $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0;
 var $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0;
 var $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0;
 var $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0;
 var $96 = 0, $97 = 0, $98 = 0, $99 = 0, $cond = 0, $cond16 = 0, $not$ = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (($0) + ($1)|0);
 $3 = ((($0)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = $4 & 1;
 $6 = ($5|0)==(0);
 do {
  if ($6) {
   $7 = HEAP32[$0>>2]|0;
   $8 = $4 & 3;
   $9 = ($8|0)==(0);
   if ($9) {
    return;
   }
   $10 = (0 - ($7))|0;
   $11 = (($0) + ($10)|0);
   $12 = (($7) + ($1))|0;
   $13 = HEAP32[(89056)>>2]|0;
   $14 = ($11>>>0)<($13>>>0);
   if ($14) {
    _abort();
    // unreachable;
   }
   $15 = HEAP32[(89060)>>2]|0;
   $16 = ($11|0)==($15|0);
   if ($16) {
    $101 = ((($2)) + 4|0);
    $102 = HEAP32[$101>>2]|0;
    $103 = $102 & 3;
    $104 = ($103|0)==(3);
    if (!($104)) {
     $$1 = $11;$$1416 = $12;
     break;
    }
    HEAP32[(89048)>>2] = $12;
    $105 = $102 & -2;
    HEAP32[$101>>2] = $105;
    $106 = $12 | 1;
    $107 = ((($11)) + 4|0);
    HEAP32[$107>>2] = $106;
    $108 = (($11) + ($12)|0);
    HEAP32[$108>>2] = $12;
    return;
   }
   $17 = $7 >>> 3;
   $18 = ($7>>>0)<(256);
   if ($18) {
    $19 = ((($11)) + 8|0);
    $20 = HEAP32[$19>>2]|0;
    $21 = ((($11)) + 12|0);
    $22 = HEAP32[$21>>2]|0;
    $23 = $17 << 1;
    $24 = (89080 + ($23<<2)|0);
    $25 = ($20|0)==($24|0);
    if (!($25)) {
     $26 = ($20>>>0)<($13>>>0);
     if ($26) {
      _abort();
      // unreachable;
     }
     $27 = ((($20)) + 12|0);
     $28 = HEAP32[$27>>2]|0;
     $29 = ($28|0)==($11|0);
     if (!($29)) {
      _abort();
      // unreachable;
     }
    }
    $30 = ($22|0)==($20|0);
    if ($30) {
     $31 = 1 << $17;
     $32 = $31 ^ -1;
     $33 = HEAP32[22260]|0;
     $34 = $33 & $32;
     HEAP32[22260] = $34;
     $$1 = $11;$$1416 = $12;
     break;
    }
    $35 = ($22|0)==($24|0);
    if ($35) {
     $$pre23 = ((($22)) + 8|0);
     $$pre$phi24Z2D = $$pre23;
    } else {
     $36 = ($22>>>0)<($13>>>0);
     if ($36) {
      _abort();
      // unreachable;
     }
     $37 = ((($22)) + 8|0);
     $38 = HEAP32[$37>>2]|0;
     $39 = ($38|0)==($11|0);
     if ($39) {
      $$pre$phi24Z2D = $37;
     } else {
      _abort();
      // unreachable;
     }
    }
    $40 = ((($20)) + 12|0);
    HEAP32[$40>>2] = $22;
    HEAP32[$$pre$phi24Z2D>>2] = $20;
    $$1 = $11;$$1416 = $12;
    break;
   }
   $41 = ((($11)) + 24|0);
   $42 = HEAP32[$41>>2]|0;
   $43 = ((($11)) + 12|0);
   $44 = HEAP32[$43>>2]|0;
   $45 = ($44|0)==($11|0);
   do {
    if ($45) {
     $55 = ((($11)) + 16|0);
     $56 = ((($55)) + 4|0);
     $57 = HEAP32[$56>>2]|0;
     $58 = ($57|0)==(0|0);
     if ($58) {
      $59 = HEAP32[$55>>2]|0;
      $60 = ($59|0)==(0|0);
      if ($60) {
       $$3 = 0;
       break;
      } else {
       $$1424 = $59;$$1427 = $55;
      }
     } else {
      $$1424 = $57;$$1427 = $56;
     }
     while(1) {
      $61 = ((($$1424)) + 20|0);
      $62 = HEAP32[$61>>2]|0;
      $63 = ($62|0)==(0|0);
      if (!($63)) {
       $$1424 = $62;$$1427 = $61;
       continue;
      }
      $64 = ((($$1424)) + 16|0);
      $65 = HEAP32[$64>>2]|0;
      $66 = ($65|0)==(0|0);
      if ($66) {
       break;
      } else {
       $$1424 = $65;$$1427 = $64;
      }
     }
     $67 = ($$1427>>>0)<($13>>>0);
     if ($67) {
      _abort();
      // unreachable;
     } else {
      HEAP32[$$1427>>2] = 0;
      $$3 = $$1424;
      break;
     }
    } else {
     $46 = ((($11)) + 8|0);
     $47 = HEAP32[$46>>2]|0;
     $48 = ($47>>>0)<($13>>>0);
     if ($48) {
      _abort();
      // unreachable;
     }
     $49 = ((($47)) + 12|0);
     $50 = HEAP32[$49>>2]|0;
     $51 = ($50|0)==($11|0);
     if (!($51)) {
      _abort();
      // unreachable;
     }
     $52 = ((($44)) + 8|0);
     $53 = HEAP32[$52>>2]|0;
     $54 = ($53|0)==($11|0);
     if ($54) {
      HEAP32[$49>>2] = $44;
      HEAP32[$52>>2] = $47;
      $$3 = $44;
      break;
     } else {
      _abort();
      // unreachable;
     }
    }
   } while(0);
   $68 = ($42|0)==(0|0);
   if ($68) {
    $$1 = $11;$$1416 = $12;
   } else {
    $69 = ((($11)) + 28|0);
    $70 = HEAP32[$69>>2]|0;
    $71 = (89344 + ($70<<2)|0);
    $72 = HEAP32[$71>>2]|0;
    $73 = ($11|0)==($72|0);
    if ($73) {
     HEAP32[$71>>2] = $$3;
     $cond = ($$3|0)==(0|0);
     if ($cond) {
      $74 = 1 << $70;
      $75 = $74 ^ -1;
      $76 = HEAP32[(89044)>>2]|0;
      $77 = $76 & $75;
      HEAP32[(89044)>>2] = $77;
      $$1 = $11;$$1416 = $12;
      break;
     }
    } else {
     $78 = HEAP32[(89056)>>2]|0;
     $79 = ($42>>>0)<($78>>>0);
     if ($79) {
      _abort();
      // unreachable;
     }
     $80 = ((($42)) + 16|0);
     $81 = HEAP32[$80>>2]|0;
     $82 = ($81|0)==($11|0);
     if ($82) {
      HEAP32[$80>>2] = $$3;
     } else {
      $83 = ((($42)) + 20|0);
      HEAP32[$83>>2] = $$3;
     }
     $84 = ($$3|0)==(0|0);
     if ($84) {
      $$1 = $11;$$1416 = $12;
      break;
     }
    }
    $85 = HEAP32[(89056)>>2]|0;
    $86 = ($$3>>>0)<($85>>>0);
    if ($86) {
     _abort();
     // unreachable;
    }
    $87 = ((($$3)) + 24|0);
    HEAP32[$87>>2] = $42;
    $88 = ((($11)) + 16|0);
    $89 = HEAP32[$88>>2]|0;
    $90 = ($89|0)==(0|0);
    do {
     if (!($90)) {
      $91 = ($89>>>0)<($85>>>0);
      if ($91) {
       _abort();
       // unreachable;
      } else {
       $92 = ((($$3)) + 16|0);
       HEAP32[$92>>2] = $89;
       $93 = ((($89)) + 24|0);
       HEAP32[$93>>2] = $$3;
       break;
      }
     }
    } while(0);
    $94 = ((($88)) + 4|0);
    $95 = HEAP32[$94>>2]|0;
    $96 = ($95|0)==(0|0);
    if ($96) {
     $$1 = $11;$$1416 = $12;
    } else {
     $97 = HEAP32[(89056)>>2]|0;
     $98 = ($95>>>0)<($97>>>0);
     if ($98) {
      _abort();
      // unreachable;
     } else {
      $99 = ((($$3)) + 20|0);
      HEAP32[$99>>2] = $95;
      $100 = ((($95)) + 24|0);
      HEAP32[$100>>2] = $$3;
      $$1 = $11;$$1416 = $12;
      break;
     }
    }
   }
  } else {
   $$1 = $0;$$1416 = $1;
  }
 } while(0);
 $109 = HEAP32[(89056)>>2]|0;
 $110 = ($2>>>0)<($109>>>0);
 if ($110) {
  _abort();
  // unreachable;
 }
 $111 = ((($2)) + 4|0);
 $112 = HEAP32[$111>>2]|0;
 $113 = $112 & 2;
 $114 = ($113|0)==(0);
 if ($114) {
  $115 = HEAP32[(89064)>>2]|0;
  $116 = ($2|0)==($115|0);
  if ($116) {
   $117 = HEAP32[(89052)>>2]|0;
   $118 = (($117) + ($$1416))|0;
   HEAP32[(89052)>>2] = $118;
   HEAP32[(89064)>>2] = $$1;
   $119 = $118 | 1;
   $120 = ((($$1)) + 4|0);
   HEAP32[$120>>2] = $119;
   $121 = HEAP32[(89060)>>2]|0;
   $122 = ($$1|0)==($121|0);
   if (!($122)) {
    return;
   }
   HEAP32[(89060)>>2] = 0;
   HEAP32[(89048)>>2] = 0;
   return;
  }
  $123 = HEAP32[(89060)>>2]|0;
  $124 = ($2|0)==($123|0);
  if ($124) {
   $125 = HEAP32[(89048)>>2]|0;
   $126 = (($125) + ($$1416))|0;
   HEAP32[(89048)>>2] = $126;
   HEAP32[(89060)>>2] = $$1;
   $127 = $126 | 1;
   $128 = ((($$1)) + 4|0);
   HEAP32[$128>>2] = $127;
   $129 = (($$1) + ($126)|0);
   HEAP32[$129>>2] = $126;
   return;
  }
  $130 = $112 & -8;
  $131 = (($130) + ($$1416))|0;
  $132 = $112 >>> 3;
  $133 = ($112>>>0)<(256);
  do {
   if ($133) {
    $134 = ((($2)) + 8|0);
    $135 = HEAP32[$134>>2]|0;
    $136 = ((($2)) + 12|0);
    $137 = HEAP32[$136>>2]|0;
    $138 = $132 << 1;
    $139 = (89080 + ($138<<2)|0);
    $140 = ($135|0)==($139|0);
    if (!($140)) {
     $141 = ($135>>>0)<($109>>>0);
     if ($141) {
      _abort();
      // unreachable;
     }
     $142 = ((($135)) + 12|0);
     $143 = HEAP32[$142>>2]|0;
     $144 = ($143|0)==($2|0);
     if (!($144)) {
      _abort();
      // unreachable;
     }
    }
    $145 = ($137|0)==($135|0);
    if ($145) {
     $146 = 1 << $132;
     $147 = $146 ^ -1;
     $148 = HEAP32[22260]|0;
     $149 = $148 & $147;
     HEAP32[22260] = $149;
     break;
    }
    $150 = ($137|0)==($139|0);
    if ($150) {
     $$pre21 = ((($137)) + 8|0);
     $$pre$phi22Z2D = $$pre21;
    } else {
     $151 = ($137>>>0)<($109>>>0);
     if ($151) {
      _abort();
      // unreachable;
     }
     $152 = ((($137)) + 8|0);
     $153 = HEAP32[$152>>2]|0;
     $154 = ($153|0)==($2|0);
     if ($154) {
      $$pre$phi22Z2D = $152;
     } else {
      _abort();
      // unreachable;
     }
    }
    $155 = ((($135)) + 12|0);
    HEAP32[$155>>2] = $137;
    HEAP32[$$pre$phi22Z2D>>2] = $135;
   } else {
    $156 = ((($2)) + 24|0);
    $157 = HEAP32[$156>>2]|0;
    $158 = ((($2)) + 12|0);
    $159 = HEAP32[$158>>2]|0;
    $160 = ($159|0)==($2|0);
    do {
     if ($160) {
      $170 = ((($2)) + 16|0);
      $171 = ((($170)) + 4|0);
      $172 = HEAP32[$171>>2]|0;
      $173 = ($172|0)==(0|0);
      if ($173) {
       $174 = HEAP32[$170>>2]|0;
       $175 = ($174|0)==(0|0);
       if ($175) {
        $$3433 = 0;
        break;
       } else {
        $$1431 = $174;$$1435 = $170;
       }
      } else {
       $$1431 = $172;$$1435 = $171;
      }
      while(1) {
       $176 = ((($$1431)) + 20|0);
       $177 = HEAP32[$176>>2]|0;
       $178 = ($177|0)==(0|0);
       if (!($178)) {
        $$1431 = $177;$$1435 = $176;
        continue;
       }
       $179 = ((($$1431)) + 16|0);
       $180 = HEAP32[$179>>2]|0;
       $181 = ($180|0)==(0|0);
       if ($181) {
        break;
       } else {
        $$1431 = $180;$$1435 = $179;
       }
      }
      $182 = ($$1435>>>0)<($109>>>0);
      if ($182) {
       _abort();
       // unreachable;
      } else {
       HEAP32[$$1435>>2] = 0;
       $$3433 = $$1431;
       break;
      }
     } else {
      $161 = ((($2)) + 8|0);
      $162 = HEAP32[$161>>2]|0;
      $163 = ($162>>>0)<($109>>>0);
      if ($163) {
       _abort();
       // unreachable;
      }
      $164 = ((($162)) + 12|0);
      $165 = HEAP32[$164>>2]|0;
      $166 = ($165|0)==($2|0);
      if (!($166)) {
       _abort();
       // unreachable;
      }
      $167 = ((($159)) + 8|0);
      $168 = HEAP32[$167>>2]|0;
      $169 = ($168|0)==($2|0);
      if ($169) {
       HEAP32[$164>>2] = $159;
       HEAP32[$167>>2] = $162;
       $$3433 = $159;
       break;
      } else {
       _abort();
       // unreachable;
      }
     }
    } while(0);
    $183 = ($157|0)==(0|0);
    if (!($183)) {
     $184 = ((($2)) + 28|0);
     $185 = HEAP32[$184>>2]|0;
     $186 = (89344 + ($185<<2)|0);
     $187 = HEAP32[$186>>2]|0;
     $188 = ($2|0)==($187|0);
     if ($188) {
      HEAP32[$186>>2] = $$3433;
      $cond16 = ($$3433|0)==(0|0);
      if ($cond16) {
       $189 = 1 << $185;
       $190 = $189 ^ -1;
       $191 = HEAP32[(89044)>>2]|0;
       $192 = $191 & $190;
       HEAP32[(89044)>>2] = $192;
       break;
      }
     } else {
      $193 = HEAP32[(89056)>>2]|0;
      $194 = ($157>>>0)<($193>>>0);
      if ($194) {
       _abort();
       // unreachable;
      }
      $195 = ((($157)) + 16|0);
      $196 = HEAP32[$195>>2]|0;
      $197 = ($196|0)==($2|0);
      if ($197) {
       HEAP32[$195>>2] = $$3433;
      } else {
       $198 = ((($157)) + 20|0);
       HEAP32[$198>>2] = $$3433;
      }
      $199 = ($$3433|0)==(0|0);
      if ($199) {
       break;
      }
     }
     $200 = HEAP32[(89056)>>2]|0;
     $201 = ($$3433>>>0)<($200>>>0);
     if ($201) {
      _abort();
      // unreachable;
     }
     $202 = ((($$3433)) + 24|0);
     HEAP32[$202>>2] = $157;
     $203 = ((($2)) + 16|0);
     $204 = HEAP32[$203>>2]|0;
     $205 = ($204|0)==(0|0);
     do {
      if (!($205)) {
       $206 = ($204>>>0)<($200>>>0);
       if ($206) {
        _abort();
        // unreachable;
       } else {
        $207 = ((($$3433)) + 16|0);
        HEAP32[$207>>2] = $204;
        $208 = ((($204)) + 24|0);
        HEAP32[$208>>2] = $$3433;
        break;
       }
      }
     } while(0);
     $209 = ((($203)) + 4|0);
     $210 = HEAP32[$209>>2]|0;
     $211 = ($210|0)==(0|0);
     if (!($211)) {
      $212 = HEAP32[(89056)>>2]|0;
      $213 = ($210>>>0)<($212>>>0);
      if ($213) {
       _abort();
       // unreachable;
      } else {
       $214 = ((($$3433)) + 20|0);
       HEAP32[$214>>2] = $210;
       $215 = ((($210)) + 24|0);
       HEAP32[$215>>2] = $$3433;
       break;
      }
     }
    }
   }
  } while(0);
  $216 = $131 | 1;
  $217 = ((($$1)) + 4|0);
  HEAP32[$217>>2] = $216;
  $218 = (($$1) + ($131)|0);
  HEAP32[$218>>2] = $131;
  $219 = HEAP32[(89060)>>2]|0;
  $220 = ($$1|0)==($219|0);
  if ($220) {
   HEAP32[(89048)>>2] = $131;
   return;
  } else {
   $$2 = $131;
  }
 } else {
  $221 = $112 & -2;
  HEAP32[$111>>2] = $221;
  $222 = $$1416 | 1;
  $223 = ((($$1)) + 4|0);
  HEAP32[$223>>2] = $222;
  $224 = (($$1) + ($$1416)|0);
  HEAP32[$224>>2] = $$1416;
  $$2 = $$1416;
 }
 $225 = $$2 >>> 3;
 $226 = ($$2>>>0)<(256);
 if ($226) {
  $227 = $225 << 1;
  $228 = (89080 + ($227<<2)|0);
  $229 = HEAP32[22260]|0;
  $230 = 1 << $225;
  $231 = $229 & $230;
  $232 = ($231|0)==(0);
  if ($232) {
   $233 = $229 | $230;
   HEAP32[22260] = $233;
   $$pre = ((($228)) + 8|0);
   $$0436 = $228;$$pre$phiZ2D = $$pre;
  } else {
   $234 = ((($228)) + 8|0);
   $235 = HEAP32[$234>>2]|0;
   $236 = HEAP32[(89056)>>2]|0;
   $237 = ($235>>>0)<($236>>>0);
   if ($237) {
    _abort();
    // unreachable;
   } else {
    $$0436 = $235;$$pre$phiZ2D = $234;
   }
  }
  HEAP32[$$pre$phiZ2D>>2] = $$1;
  $238 = ((($$0436)) + 12|0);
  HEAP32[$238>>2] = $$1;
  $239 = ((($$1)) + 8|0);
  HEAP32[$239>>2] = $$0436;
  $240 = ((($$1)) + 12|0);
  HEAP32[$240>>2] = $228;
  return;
 }
 $241 = $$2 >>> 8;
 $242 = ($241|0)==(0);
 if ($242) {
  $$0429 = 0;
 } else {
  $243 = ($$2>>>0)>(16777215);
  if ($243) {
   $$0429 = 31;
  } else {
   $244 = (($241) + 1048320)|0;
   $245 = $244 >>> 16;
   $246 = $245 & 8;
   $247 = $241 << $246;
   $248 = (($247) + 520192)|0;
   $249 = $248 >>> 16;
   $250 = $249 & 4;
   $251 = $250 | $246;
   $252 = $247 << $250;
   $253 = (($252) + 245760)|0;
   $254 = $253 >>> 16;
   $255 = $254 & 2;
   $256 = $251 | $255;
   $257 = (14 - ($256))|0;
   $258 = $252 << $255;
   $259 = $258 >>> 15;
   $260 = (($257) + ($259))|0;
   $261 = $260 << 1;
   $262 = (($260) + 7)|0;
   $263 = $$2 >>> $262;
   $264 = $263 & 1;
   $265 = $264 | $261;
   $$0429 = $265;
  }
 }
 $266 = (89344 + ($$0429<<2)|0);
 $267 = ((($$1)) + 28|0);
 HEAP32[$267>>2] = $$0429;
 $268 = ((($$1)) + 16|0);
 $269 = ((($$1)) + 20|0);
 HEAP32[$269>>2] = 0;
 HEAP32[$268>>2] = 0;
 $270 = HEAP32[(89044)>>2]|0;
 $271 = 1 << $$0429;
 $272 = $270 & $271;
 $273 = ($272|0)==(0);
 if ($273) {
  $274 = $270 | $271;
  HEAP32[(89044)>>2] = $274;
  HEAP32[$266>>2] = $$1;
  $275 = ((($$1)) + 24|0);
  HEAP32[$275>>2] = $266;
  $276 = ((($$1)) + 12|0);
  HEAP32[$276>>2] = $$1;
  $277 = ((($$1)) + 8|0);
  HEAP32[$277>>2] = $$1;
  return;
 }
 $278 = HEAP32[$266>>2]|0;
 $279 = ($$0429|0)==(31);
 $280 = $$0429 >>> 1;
 $281 = (25 - ($280))|0;
 $282 = $279 ? 0 : $281;
 $283 = $$2 << $282;
 $$0417 = $283;$$0418 = $278;
 while(1) {
  $284 = ((($$0418)) + 4|0);
  $285 = HEAP32[$284>>2]|0;
  $286 = $285 & -8;
  $287 = ($286|0)==($$2|0);
  if ($287) {
   label = 127;
   break;
  }
  $288 = $$0417 >>> 31;
  $289 = (((($$0418)) + 16|0) + ($288<<2)|0);
  $290 = $$0417 << 1;
  $291 = HEAP32[$289>>2]|0;
  $292 = ($291|0)==(0|0);
  if ($292) {
   label = 124;
   break;
  } else {
   $$0417 = $290;$$0418 = $291;
  }
 }
 if ((label|0) == 124) {
  $293 = HEAP32[(89056)>>2]|0;
  $294 = ($289>>>0)<($293>>>0);
  if ($294) {
   _abort();
   // unreachable;
  }
  HEAP32[$289>>2] = $$1;
  $295 = ((($$1)) + 24|0);
  HEAP32[$295>>2] = $$0418;
  $296 = ((($$1)) + 12|0);
  HEAP32[$296>>2] = $$1;
  $297 = ((($$1)) + 8|0);
  HEAP32[$297>>2] = $$1;
  return;
 }
 else if ((label|0) == 127) {
  $298 = ((($$0418)) + 8|0);
  $299 = HEAP32[$298>>2]|0;
  $300 = HEAP32[(89056)>>2]|0;
  $301 = ($299>>>0)>=($300>>>0);
  $not$ = ($$0418>>>0)>=($300>>>0);
  $302 = $301 & $not$;
  if (!($302)) {
   _abort();
   // unreachable;
  }
  $303 = ((($299)) + 12|0);
  HEAP32[$303>>2] = $$1;
  HEAP32[$298>>2] = $$1;
  $304 = ((($$1)) + 8|0);
  HEAP32[$304>>2] = $299;
  $305 = ((($$1)) + 12|0);
  HEAP32[$305>>2] = $$0418;
  $306 = ((($$1)) + 24|0);
  HEAP32[$306>>2] = 0;
  return;
 }
}
function __Znwj($0) {
 $0 = $0|0;
 var $$ = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($0|0)==(0);
 $$ = $1 ? 1 : $0;
 while(1) {
  $2 = (_malloc($$)|0);
  $3 = ($2|0)==(0|0);
  if (!($3)) {
   label = 6;
   break;
  }
  $4 = (__ZSt15get_new_handlerv()|0);
  $5 = ($4|0)==(0|0);
  if ($5) {
   label = 5;
   break;
  }
  FUNCTION_TABLE_v[$4 & 7]();
 }
 if ((label|0) == 5) {
  $6 = (___cxa_allocate_exception(4)|0);
  __ZNSt9bad_allocC2Ev($6);
  ___cxa_throw(($6|0),(160|0),(23|0));
  // unreachable;
 }
 else if ((label|0) == 6) {
  return ($2|0);
 }
 return (0)|0;
}
function __ZdlPv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 _free($0);
 return;
}
function __ZN10__cxxabiv116__shim_type_infoD2Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZN10__cxxabiv117__class_type_infoD0Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($0);
 return;
}
function __ZNK10__cxxabiv116__shim_type_info5noop1Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNK10__cxxabiv116__shim_type_info5noop2Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNK10__cxxabiv117__class_type_info9can_catchEPKNS_16__shim_type_infoERPv($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $$2 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $3 = sp;
 $4 = ($0|0)==($1|0);
 if ($4) {
  $$2 = 1;
 } else {
  $5 = ($1|0)==(0|0);
  if ($5) {
   $$2 = 0;
  } else {
   $6 = (___dynamic_cast($1,120,104,0)|0);
   $7 = ($6|0)==(0|0);
   if ($7) {
    $$2 = 0;
   } else {
    $8 = ((($3)) + 4|0);
    dest=$8; stop=dest+52|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
    HEAP32[$3>>2] = $6;
    $9 = ((($3)) + 8|0);
    HEAP32[$9>>2] = $0;
    $10 = ((($3)) + 12|0);
    HEAP32[$10>>2] = -1;
    $11 = ((($3)) + 48|0);
    HEAP32[$11>>2] = 1;
    $12 = HEAP32[$6>>2]|0;
    $13 = ((($12)) + 28|0);
    $14 = HEAP32[$13>>2]|0;
    $15 = HEAP32[$2>>2]|0;
    FUNCTION_TABLE_viiii[$14 & 31]($6,$3,$15,1);
    $16 = ((($3)) + 24|0);
    $17 = HEAP32[$16>>2]|0;
    $18 = ($17|0)==(1);
    if ($18) {
     $19 = ((($3)) + 16|0);
     $20 = HEAP32[$19>>2]|0;
     HEAP32[$2>>2] = $20;
     $$0 = 1;
    } else {
     $$0 = 0;
    }
    $$2 = $$0;
   }
  }
 }
 STACKTOP = sp;return ($$2|0);
}
function __ZNK10__cxxabiv117__class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $6 = ((($1)) + 8|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($0|0)==($7|0);
 if ($8) {
  __ZNK10__cxxabiv117__class_type_info29process_static_type_above_dstEPNS_19__dynamic_cast_infoEPKvS4_i(0,$1,$2,$3,$4);
 }
 return;
}
function __ZNK10__cxxabiv117__class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $5 = ((($1)) + 8|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($0|0)==($6|0);
 do {
  if ($7) {
   $8 = ((($1)) + 4|0);
   $9 = HEAP32[$8>>2]|0;
   $10 = ($9|0)==($2|0);
   if ($10) {
    $11 = ((($1)) + 28|0);
    $12 = HEAP32[$11>>2]|0;
    $13 = ($12|0)==(1);
    if (!($13)) {
     HEAP32[$11>>2] = $3;
    }
   }
  } else {
   $14 = HEAP32[$1>>2]|0;
   $15 = ($0|0)==($14|0);
   if ($15) {
    $16 = ((($1)) + 16|0);
    $17 = HEAP32[$16>>2]|0;
    $18 = ($17|0)==($2|0);
    if (!($18)) {
     $19 = ((($1)) + 20|0);
     $20 = HEAP32[$19>>2]|0;
     $21 = ($20|0)==($2|0);
     if (!($21)) {
      $24 = ((($1)) + 32|0);
      HEAP32[$24>>2] = $3;
      HEAP32[$19>>2] = $2;
      $25 = ((($1)) + 40|0);
      $26 = HEAP32[$25>>2]|0;
      $27 = (($26) + 1)|0;
      HEAP32[$25>>2] = $27;
      $28 = ((($1)) + 36|0);
      $29 = HEAP32[$28>>2]|0;
      $30 = ($29|0)==(1);
      if ($30) {
       $31 = ((($1)) + 24|0);
       $32 = HEAP32[$31>>2]|0;
       $33 = ($32|0)==(2);
       if ($33) {
        $34 = ((($1)) + 54|0);
        HEAP8[$34>>0] = 1;
       }
      }
      $35 = ((($1)) + 44|0);
      HEAP32[$35>>2] = 4;
      break;
     }
    }
    $22 = ($3|0)==(1);
    if ($22) {
     $23 = ((($1)) + 32|0);
     HEAP32[$23>>2] = 1;
    }
   }
  }
 } while(0);
 return;
}
function __ZNK10__cxxabiv117__class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = ((($1)) + 8|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($0|0)==($5|0);
 if ($6) {
  __ZNK10__cxxabiv117__class_type_info24process_found_base_classEPNS_19__dynamic_cast_infoEPvi(0,$1,$2,$3);
 }
 return;
}
function __ZNK10__cxxabiv117__class_type_info24process_found_base_classEPNS_19__dynamic_cast_infoEPvi($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = ((($1)) + 16|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)==(0|0);
 do {
  if ($6) {
   HEAP32[$4>>2] = $2;
   $7 = ((($1)) + 24|0);
   HEAP32[$7>>2] = $3;
   $8 = ((($1)) + 36|0);
   HEAP32[$8>>2] = 1;
  } else {
   $9 = ($5|0)==($2|0);
   if (!($9)) {
    $13 = ((($1)) + 36|0);
    $14 = HEAP32[$13>>2]|0;
    $15 = (($14) + 1)|0;
    HEAP32[$13>>2] = $15;
    $16 = ((($1)) + 24|0);
    HEAP32[$16>>2] = 2;
    $17 = ((($1)) + 54|0);
    HEAP8[$17>>0] = 1;
    break;
   }
   $10 = ((($1)) + 24|0);
   $11 = HEAP32[$10>>2]|0;
   $12 = ($11|0)==(2);
   if ($12) {
    HEAP32[$10>>2] = $3;
   }
  }
 } while(0);
 return;
}
function __ZNK10__cxxabiv117__class_type_info29process_static_type_above_dstEPNS_19__dynamic_cast_infoEPKvS4_i($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond22 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $5 = ((($1)) + 53|0);
 HEAP8[$5>>0] = 1;
 $6 = ((($1)) + 4|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($7|0)==($3|0);
 do {
  if ($8) {
   $9 = ((($1)) + 52|0);
   HEAP8[$9>>0] = 1;
   $10 = ((($1)) + 16|0);
   $11 = HEAP32[$10>>2]|0;
   $12 = ($11|0)==(0|0);
   if ($12) {
    HEAP32[$10>>2] = $2;
    $13 = ((($1)) + 24|0);
    HEAP32[$13>>2] = $4;
    $14 = ((($1)) + 36|0);
    HEAP32[$14>>2] = 1;
    $15 = ((($1)) + 48|0);
    $16 = HEAP32[$15>>2]|0;
    $17 = ($16|0)==(1);
    $18 = ($4|0)==(1);
    $or$cond = $17 & $18;
    if (!($or$cond)) {
     break;
    }
    $19 = ((($1)) + 54|0);
    HEAP8[$19>>0] = 1;
    break;
   }
   $20 = ($11|0)==($2|0);
   if (!($20)) {
    $30 = ((($1)) + 36|0);
    $31 = HEAP32[$30>>2]|0;
    $32 = (($31) + 1)|0;
    HEAP32[$30>>2] = $32;
    $33 = ((($1)) + 54|0);
    HEAP8[$33>>0] = 1;
    break;
   }
   $21 = ((($1)) + 24|0);
   $22 = HEAP32[$21>>2]|0;
   $23 = ($22|0)==(2);
   if ($23) {
    HEAP32[$21>>2] = $4;
    $27 = $4;
   } else {
    $27 = $22;
   }
   $24 = ((($1)) + 48|0);
   $25 = HEAP32[$24>>2]|0;
   $26 = ($25|0)==(1);
   $28 = ($27|0)==(1);
   $or$cond22 = $26 & $28;
   if ($or$cond22) {
    $29 = ((($1)) + 54|0);
    HEAP8[$29>>0] = 1;
   }
  }
 } while(0);
 return;
}
function ___dynamic_cast($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$ = 0, $$0 = 0, $$33 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond28 = 0, $or$cond30 = 0, $or$cond32 = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $4 = sp;
 $5 = HEAP32[$0>>2]|0;
 $6 = ((($5)) + -8|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (($0) + ($7)|0);
 $9 = ((($5)) + -4|0);
 $10 = HEAP32[$9>>2]|0;
 HEAP32[$4>>2] = $2;
 $11 = ((($4)) + 4|0);
 HEAP32[$11>>2] = $0;
 $12 = ((($4)) + 8|0);
 HEAP32[$12>>2] = $1;
 $13 = ((($4)) + 12|0);
 HEAP32[$13>>2] = $3;
 $14 = ((($4)) + 16|0);
 $15 = ((($4)) + 20|0);
 $16 = ((($4)) + 24|0);
 $17 = ((($4)) + 28|0);
 $18 = ((($4)) + 32|0);
 $19 = ((($4)) + 40|0);
 $20 = ($10|0)==($2|0);
 dest=$14; stop=dest+36|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));HEAP16[$14+36>>1]=0|0;HEAP8[$14+38>>0]=0|0;
 L1: do {
  if ($20) {
   $21 = ((($4)) + 48|0);
   HEAP32[$21>>2] = 1;
   $22 = HEAP32[$2>>2]|0;
   $23 = ((($22)) + 20|0);
   $24 = HEAP32[$23>>2]|0;
   FUNCTION_TABLE_viiiiii[$24 & 31]($2,$4,$8,$8,1,0);
   $25 = HEAP32[$16>>2]|0;
   $26 = ($25|0)==(1);
   $$ = $26 ? $8 : 0;
   $$0 = $$;
  } else {
   $27 = ((($4)) + 36|0);
   $28 = HEAP32[$10>>2]|0;
   $29 = ((($28)) + 24|0);
   $30 = HEAP32[$29>>2]|0;
   FUNCTION_TABLE_viiiii[$30 & 31]($10,$4,$8,1,0);
   $31 = HEAP32[$27>>2]|0;
   switch ($31|0) {
   case 0:  {
    $32 = HEAP32[$19>>2]|0;
    $33 = ($32|0)==(1);
    $34 = HEAP32[$17>>2]|0;
    $35 = ($34|0)==(1);
    $or$cond = $33 & $35;
    $36 = HEAP32[$18>>2]|0;
    $37 = ($36|0)==(1);
    $or$cond28 = $or$cond & $37;
    $38 = HEAP32[$15>>2]|0;
    $$33 = $or$cond28 ? $38 : 0;
    $$0 = $$33;
    break L1;
    break;
   }
   case 1:  {
    break;
   }
   default: {
    $$0 = 0;
    break L1;
   }
   }
   $39 = HEAP32[$16>>2]|0;
   $40 = ($39|0)==(1);
   if (!($40)) {
    $41 = HEAP32[$19>>2]|0;
    $42 = ($41|0)==(0);
    $43 = HEAP32[$17>>2]|0;
    $44 = ($43|0)==(1);
    $or$cond30 = $42 & $44;
    $45 = HEAP32[$18>>2]|0;
    $46 = ($45|0)==(1);
    $or$cond32 = $or$cond30 & $46;
    if (!($or$cond32)) {
     $$0 = 0;
     break;
    }
   }
   $47 = HEAP32[$14>>2]|0;
   $$0 = $47;
  }
 } while(0);
 STACKTOP = sp;return ($$0|0);
}
function __ZN10__cxxabiv120__si_class_type_infoD0Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($0);
 return;
}
function __ZNK10__cxxabiv120__si_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $6 = ((($1)) + 8|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($0|0)==($7|0);
 if ($8) {
  __ZNK10__cxxabiv117__class_type_info29process_static_type_above_dstEPNS_19__dynamic_cast_infoEPKvS4_i(0,$1,$2,$3,$4);
 } else {
  $9 = ((($0)) + 8|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = HEAP32[$10>>2]|0;
  $12 = ((($11)) + 20|0);
  $13 = HEAP32[$12>>2]|0;
  FUNCTION_TABLE_viiiiii[$13 & 31]($10,$1,$2,$3,$4,$5);
 }
 return;
}
function __ZNK10__cxxabiv120__si_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$037$off039 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $not$ = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $5 = ((($1)) + 8|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($0|0)==($6|0);
 do {
  if ($7) {
   $8 = ((($1)) + 4|0);
   $9 = HEAP32[$8>>2]|0;
   $10 = ($9|0)==($2|0);
   if ($10) {
    $11 = ((($1)) + 28|0);
    $12 = HEAP32[$11>>2]|0;
    $13 = ($12|0)==(1);
    if (!($13)) {
     HEAP32[$11>>2] = $3;
    }
   }
  } else {
   $14 = HEAP32[$1>>2]|0;
   $15 = ($0|0)==($14|0);
   if (!($15)) {
    $49 = ((($0)) + 8|0);
    $50 = HEAP32[$49>>2]|0;
    $51 = HEAP32[$50>>2]|0;
    $52 = ((($51)) + 24|0);
    $53 = HEAP32[$52>>2]|0;
    FUNCTION_TABLE_viiiii[$53 & 31]($50,$1,$2,$3,$4);
    break;
   }
   $16 = ((($1)) + 16|0);
   $17 = HEAP32[$16>>2]|0;
   $18 = ($17|0)==($2|0);
   if (!($18)) {
    $19 = ((($1)) + 20|0);
    $20 = HEAP32[$19>>2]|0;
    $21 = ($20|0)==($2|0);
    if (!($21)) {
     $24 = ((($1)) + 32|0);
     HEAP32[$24>>2] = $3;
     $25 = ((($1)) + 44|0);
     $26 = HEAP32[$25>>2]|0;
     $27 = ($26|0)==(4);
     if ($27) {
      break;
     }
     $28 = ((($1)) + 52|0);
     HEAP8[$28>>0] = 0;
     $29 = ((($1)) + 53|0);
     HEAP8[$29>>0] = 0;
     $30 = ((($0)) + 8|0);
     $31 = HEAP32[$30>>2]|0;
     $32 = HEAP32[$31>>2]|0;
     $33 = ((($32)) + 20|0);
     $34 = HEAP32[$33>>2]|0;
     FUNCTION_TABLE_viiiiii[$34 & 31]($31,$1,$2,$2,1,$4);
     $35 = HEAP8[$29>>0]|0;
     $36 = ($35<<24>>24)==(0);
     if ($36) {
      $$037$off039 = 0;
      label = 13;
     } else {
      $37 = HEAP8[$28>>0]|0;
      $not$ = ($37<<24>>24)==(0);
      if ($not$) {
       $$037$off039 = 1;
       label = 13;
      } else {
       label = 17;
      }
     }
     do {
      if ((label|0) == 13) {
       HEAP32[$19>>2] = $2;
       $38 = ((($1)) + 40|0);
       $39 = HEAP32[$38>>2]|0;
       $40 = (($39) + 1)|0;
       HEAP32[$38>>2] = $40;
       $41 = ((($1)) + 36|0);
       $42 = HEAP32[$41>>2]|0;
       $43 = ($42|0)==(1);
       if ($43) {
        $44 = ((($1)) + 24|0);
        $45 = HEAP32[$44>>2]|0;
        $46 = ($45|0)==(2);
        if ($46) {
         $47 = ((($1)) + 54|0);
         HEAP8[$47>>0] = 1;
         if ($$037$off039) {
          label = 17;
          break;
         } else {
          $48 = 4;
          break;
         }
        }
       }
       if ($$037$off039) {
        label = 17;
       } else {
        $48 = 4;
       }
      }
     } while(0);
     if ((label|0) == 17) {
      $48 = 3;
     }
     HEAP32[$25>>2] = $48;
     break;
    }
   }
   $22 = ($3|0)==(1);
   if ($22) {
    $23 = ((($1)) + 32|0);
    HEAP32[$23>>2] = 1;
   }
  }
 } while(0);
 return;
}
function __ZNK10__cxxabiv120__si_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = ((($1)) + 8|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($0|0)==($5|0);
 if ($6) {
  __ZNK10__cxxabiv117__class_type_info24process_found_base_classEPNS_19__dynamic_cast_infoEPvi(0,$1,$2,$3);
 } else {
  $7 = ((($0)) + 8|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = HEAP32[$8>>2]|0;
  $10 = ((($9)) + 28|0);
  $11 = HEAP32[$10>>2]|0;
  FUNCTION_TABLE_viiii[$11 & 31]($8,$1,$2,$3);
 }
 return;
}
function __ZNSt9type_infoD2Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNSt9bad_allocD2Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNSt9bad_allocD0Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($0);
 return;
}
function __ZNKSt9bad_alloc4whatEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (36941|0);
}
function __ZNSt9exceptionD2Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNSt9bad_allocC2Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$0>>2] = (6280);
 return;
}
function __ZSt15get_new_handlerv() {
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[22384]|0;HEAP32[22384] = (($0+0)|0);
 $1 = $0;
 return ($1|0);
}
function runPostSets() {
}
function _i64Subtract(a, b, c, d) {
    a = a|0; b = b|0; c = c|0; d = d|0;
    var l = 0, h = 0;
    l = (a - c)>>>0;
    h = (b - d)>>>0;
    h = (b - d - (((c>>>0) > (a>>>0))|0))>>>0; // Borrow one from high word to low word on underflow.
    return ((tempRet0 = h,l|0)|0);
}
function _i64Add(a, b, c, d) {
    /*
      x = a + b*2^32
      y = c + d*2^32
      result = l + h*2^32
    */
    a = a|0; b = b|0; c = c|0; d = d|0;
    var l = 0, h = 0;
    l = (a + c)>>>0;
    h = (b + d + (((l>>>0) < (a>>>0))|0))>>>0; // Add carry from low word to high word on overflow.
    return ((tempRet0 = h,l|0)|0);
}
function _memset(ptr, value, num) {
    ptr = ptr|0; value = value|0; num = num|0;
    var end = 0, aligned_end = 0, block_aligned_end = 0, value4 = 0;
    end = (ptr + num)|0;

    value = value & 0xff;
    if ((num|0) >= 67 /* 64 bytes for an unrolled loop + 3 bytes for unaligned head*/) {
      while ((ptr&3) != 0) {
        HEAP8[((ptr)>>0)]=value;
        ptr = (ptr+1)|0;
      }

      aligned_end = (end & -4)|0;
      block_aligned_end = (aligned_end - 64)|0;
      value4 = value | (value << 8) | (value << 16) | (value << 24);

      while((ptr|0) <= (block_aligned_end|0)) {
        HEAP32[((ptr)>>2)]=value4;
        HEAP32[(((ptr)+(4))>>2)]=value4;
        HEAP32[(((ptr)+(8))>>2)]=value4;
        HEAP32[(((ptr)+(12))>>2)]=value4;
        HEAP32[(((ptr)+(16))>>2)]=value4;
        HEAP32[(((ptr)+(20))>>2)]=value4;
        HEAP32[(((ptr)+(24))>>2)]=value4;
        HEAP32[(((ptr)+(28))>>2)]=value4;
        HEAP32[(((ptr)+(32))>>2)]=value4;
        HEAP32[(((ptr)+(36))>>2)]=value4;
        HEAP32[(((ptr)+(40))>>2)]=value4;
        HEAP32[(((ptr)+(44))>>2)]=value4;
        HEAP32[(((ptr)+(48))>>2)]=value4;
        HEAP32[(((ptr)+(52))>>2)]=value4;
        HEAP32[(((ptr)+(56))>>2)]=value4;
        HEAP32[(((ptr)+(60))>>2)]=value4;
        ptr = (ptr + 64)|0;
      }

      while ((ptr|0) < (aligned_end|0) ) {
        HEAP32[((ptr)>>2)]=value4;
        ptr = (ptr+4)|0;
      }
    }
    // The remaining bytes.
    while ((ptr|0) < (end|0)) {
      HEAP8[((ptr)>>0)]=value;
      ptr = (ptr+1)|0;
    }
    return (end-num)|0;
}
function _bitshift64Shl(low, high, bits) {
    low = low|0; high = high|0; bits = bits|0;
    var ander = 0;
    if ((bits|0) < 32) {
      ander = ((1 << bits) - 1)|0;
      tempRet0 = (high << bits) | ((low&(ander << (32 - bits))) >>> (32 - bits));
      return low << bits;
    }
    tempRet0 = low << (bits - 32);
    return 0;
}
function _memcpy(dest, src, num) {
    dest = dest|0; src = src|0; num = num|0;
    var ret = 0;
    var aligned_dest_end = 0;
    var block_aligned_dest_end = 0;
    var dest_end = 0;
    // Test against a benchmarked cutoff limit for when HEAPU8.set() becomes faster to use.
    if ((num|0) >=
      8192
    ) {
      return _emscripten_memcpy_big(dest|0, src|0, num|0)|0;
    }

    ret = dest|0;
    dest_end = (dest + num)|0;
    if ((dest&3) == (src&3)) {
      // The initial unaligned < 4-byte front.
      while (dest & 3) {
        if ((num|0) == 0) return ret|0;
        HEAP8[((dest)>>0)]=((HEAP8[((src)>>0)])|0);
        dest = (dest+1)|0;
        src = (src+1)|0;
        num = (num-1)|0;
      }
      aligned_dest_end = (dest_end & -4)|0;
      block_aligned_dest_end = (aligned_dest_end - 64)|0;
      while ((dest|0) <= (block_aligned_dest_end|0) ) {
        HEAP32[((dest)>>2)]=((HEAP32[((src)>>2)])|0);
        HEAP32[(((dest)+(4))>>2)]=((HEAP32[(((src)+(4))>>2)])|0);
        HEAP32[(((dest)+(8))>>2)]=((HEAP32[(((src)+(8))>>2)])|0);
        HEAP32[(((dest)+(12))>>2)]=((HEAP32[(((src)+(12))>>2)])|0);
        HEAP32[(((dest)+(16))>>2)]=((HEAP32[(((src)+(16))>>2)])|0);
        HEAP32[(((dest)+(20))>>2)]=((HEAP32[(((src)+(20))>>2)])|0);
        HEAP32[(((dest)+(24))>>2)]=((HEAP32[(((src)+(24))>>2)])|0);
        HEAP32[(((dest)+(28))>>2)]=((HEAP32[(((src)+(28))>>2)])|0);
        HEAP32[(((dest)+(32))>>2)]=((HEAP32[(((src)+(32))>>2)])|0);
        HEAP32[(((dest)+(36))>>2)]=((HEAP32[(((src)+(36))>>2)])|0);
        HEAP32[(((dest)+(40))>>2)]=((HEAP32[(((src)+(40))>>2)])|0);
        HEAP32[(((dest)+(44))>>2)]=((HEAP32[(((src)+(44))>>2)])|0);
        HEAP32[(((dest)+(48))>>2)]=((HEAP32[(((src)+(48))>>2)])|0);
        HEAP32[(((dest)+(52))>>2)]=((HEAP32[(((src)+(52))>>2)])|0);
        HEAP32[(((dest)+(56))>>2)]=((HEAP32[(((src)+(56))>>2)])|0);
        HEAP32[(((dest)+(60))>>2)]=((HEAP32[(((src)+(60))>>2)])|0);
        dest = (dest+64)|0;
        src = (src+64)|0;
      }
      while ((dest|0) < (aligned_dest_end|0) ) {
        HEAP32[((dest)>>2)]=((HEAP32[((src)>>2)])|0);
        dest = (dest+4)|0;
        src = (src+4)|0;
      }
    } else {
      // In the unaligned copy case, unroll a bit as well.
      aligned_dest_end = (dest_end - 4)|0;
      while ((dest|0) < (aligned_dest_end|0) ) {
        HEAP8[((dest)>>0)]=((HEAP8[((src)>>0)])|0);
        HEAP8[(((dest)+(1))>>0)]=((HEAP8[(((src)+(1))>>0)])|0);
        HEAP8[(((dest)+(2))>>0)]=((HEAP8[(((src)+(2))>>0)])|0);
        HEAP8[(((dest)+(3))>>0)]=((HEAP8[(((src)+(3))>>0)])|0);
        dest = (dest+4)|0;
        src = (src+4)|0;
      }
    }
    // The remaining unaligned < 4 byte tail.
    while ((dest|0) < (dest_end|0)) {
      HEAP8[((dest)>>0)]=((HEAP8[((src)>>0)])|0);
      dest = (dest+1)|0;
      src = (src+1)|0;
    }
    return ret|0;
}
function _bitshift64Lshr(low, high, bits) {
    low = low|0; high = high|0; bits = bits|0;
    var ander = 0;
    if ((bits|0) < 32) {
      ander = ((1 << bits) - 1)|0;
      tempRet0 = high >>> bits;
      return (low >>> bits) | ((high&ander) << (32 - bits));
    }
    tempRet0 = 0;
    return (high >>> (bits - 32))|0;
}
function _llvm_cttz_i32(x) {
    x = x|0;
    var ret = 0;
    ret = ((HEAP8[(((cttz_i8)+(x & 0xff))>>0)])|0);
    if ((ret|0) < 8) return ret|0;
    ret = ((HEAP8[(((cttz_i8)+((x >> 8)&0xff))>>0)])|0);
    if ((ret|0) < 8) return (ret + 8)|0;
    ret = ((HEAP8[(((cttz_i8)+((x >> 16)&0xff))>>0)])|0);
    if ((ret|0) < 8) return (ret + 16)|0;
    return (((HEAP8[(((cttz_i8)+(x >>> 24))>>0)])|0) + 24)|0;
}
function ___udivmoddi4($a$0, $a$1, $b$0, $b$1, $rem) {
    $a$0 = $a$0 | 0;
    $a$1 = $a$1 | 0;
    $b$0 = $b$0 | 0;
    $b$1 = $b$1 | 0;
    $rem = $rem | 0;
    var $n_sroa_0_0_extract_trunc = 0, $n_sroa_1_4_extract_shift$0 = 0, $n_sroa_1_4_extract_trunc = 0, $d_sroa_0_0_extract_trunc = 0, $d_sroa_1_4_extract_shift$0 = 0, $d_sroa_1_4_extract_trunc = 0, $4 = 0, $17 = 0, $37 = 0, $49 = 0, $51 = 0, $57 = 0, $58 = 0, $66 = 0, $78 = 0, $86 = 0, $88 = 0, $89 = 0, $91 = 0, $92 = 0, $95 = 0, $105 = 0, $117 = 0, $119 = 0, $125 = 0, $126 = 0, $130 = 0, $q_sroa_1_1_ph = 0, $q_sroa_0_1_ph = 0, $r_sroa_1_1_ph = 0, $r_sroa_0_1_ph = 0, $sr_1_ph = 0, $d_sroa_0_0_insert_insert99$0 = 0, $d_sroa_0_0_insert_insert99$1 = 0, $137$0 = 0, $137$1 = 0, $carry_0203 = 0, $sr_1202 = 0, $r_sroa_0_1201 = 0, $r_sroa_1_1200 = 0, $q_sroa_0_1199 = 0, $q_sroa_1_1198 = 0, $147 = 0, $149 = 0, $r_sroa_0_0_insert_insert42$0 = 0, $r_sroa_0_0_insert_insert42$1 = 0, $150$1 = 0, $151$0 = 0, $152 = 0, $154$0 = 0, $r_sroa_0_0_extract_trunc = 0, $r_sroa_1_4_extract_trunc = 0, $155 = 0, $carry_0_lcssa$0 = 0, $carry_0_lcssa$1 = 0, $r_sroa_0_1_lcssa = 0, $r_sroa_1_1_lcssa = 0, $q_sroa_0_1_lcssa = 0, $q_sroa_1_1_lcssa = 0, $q_sroa_0_0_insert_ext75$0 = 0, $q_sroa_0_0_insert_ext75$1 = 0, $q_sroa_0_0_insert_insert77$1 = 0, $_0$0 = 0, $_0$1 = 0;
    $n_sroa_0_0_extract_trunc = $a$0;
    $n_sroa_1_4_extract_shift$0 = $a$1;
    $n_sroa_1_4_extract_trunc = $n_sroa_1_4_extract_shift$0;
    $d_sroa_0_0_extract_trunc = $b$0;
    $d_sroa_1_4_extract_shift$0 = $b$1;
    $d_sroa_1_4_extract_trunc = $d_sroa_1_4_extract_shift$0;
    if (($n_sroa_1_4_extract_trunc | 0) == 0) {
      $4 = ($rem | 0) != 0;
      if (($d_sroa_1_4_extract_trunc | 0) == 0) {
        if ($4) {
          HEAP32[$rem >> 2] = ($n_sroa_0_0_extract_trunc >>> 0) % ($d_sroa_0_0_extract_trunc >>> 0);
          HEAP32[$rem + 4 >> 2] = 0;
        }
        $_0$1 = 0;
        $_0$0 = ($n_sroa_0_0_extract_trunc >>> 0) / ($d_sroa_0_0_extract_trunc >>> 0) >>> 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      } else {
        if (!$4) {
          $_0$1 = 0;
          $_0$0 = 0;
          return (tempRet0 = $_0$1, $_0$0) | 0;
        }
        HEAP32[$rem >> 2] = $a$0 & -1;
        HEAP32[$rem + 4 >> 2] = $a$1 & 0;
        $_0$1 = 0;
        $_0$0 = 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
    }
    $17 = ($d_sroa_1_4_extract_trunc | 0) == 0;
    do {
      if (($d_sroa_0_0_extract_trunc | 0) == 0) {
        if ($17) {
          if (($rem | 0) != 0) {
            HEAP32[$rem >> 2] = ($n_sroa_1_4_extract_trunc >>> 0) % ($d_sroa_0_0_extract_trunc >>> 0);
            HEAP32[$rem + 4 >> 2] = 0;
          }
          $_0$1 = 0;
          $_0$0 = ($n_sroa_1_4_extract_trunc >>> 0) / ($d_sroa_0_0_extract_trunc >>> 0) >>> 0;
          return (tempRet0 = $_0$1, $_0$0) | 0;
        }
        if (($n_sroa_0_0_extract_trunc | 0) == 0) {
          if (($rem | 0) != 0) {
            HEAP32[$rem >> 2] = 0;
            HEAP32[$rem + 4 >> 2] = ($n_sroa_1_4_extract_trunc >>> 0) % ($d_sroa_1_4_extract_trunc >>> 0);
          }
          $_0$1 = 0;
          $_0$0 = ($n_sroa_1_4_extract_trunc >>> 0) / ($d_sroa_1_4_extract_trunc >>> 0) >>> 0;
          return (tempRet0 = $_0$1, $_0$0) | 0;
        }
        $37 = $d_sroa_1_4_extract_trunc - 1 | 0;
        if (($37 & $d_sroa_1_4_extract_trunc | 0) == 0) {
          if (($rem | 0) != 0) {
            HEAP32[$rem >> 2] = 0 | $a$0 & -1;
            HEAP32[$rem + 4 >> 2] = $37 & $n_sroa_1_4_extract_trunc | $a$1 & 0;
          }
          $_0$1 = 0;
          $_0$0 = $n_sroa_1_4_extract_trunc >>> ((_llvm_cttz_i32($d_sroa_1_4_extract_trunc | 0) | 0) >>> 0);
          return (tempRet0 = $_0$1, $_0$0) | 0;
        }
        $49 = Math_clz32($d_sroa_1_4_extract_trunc | 0) | 0;
        $51 = $49 - (Math_clz32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
        if ($51 >>> 0 <= 30) {
          $57 = $51 + 1 | 0;
          $58 = 31 - $51 | 0;
          $sr_1_ph = $57;
          $r_sroa_0_1_ph = $n_sroa_1_4_extract_trunc << $58 | $n_sroa_0_0_extract_trunc >>> ($57 >>> 0);
          $r_sroa_1_1_ph = $n_sroa_1_4_extract_trunc >>> ($57 >>> 0);
          $q_sroa_0_1_ph = 0;
          $q_sroa_1_1_ph = $n_sroa_0_0_extract_trunc << $58;
          break;
        }
        if (($rem | 0) == 0) {
          $_0$1 = 0;
          $_0$0 = 0;
          return (tempRet0 = $_0$1, $_0$0) | 0;
        }
        HEAP32[$rem >> 2] = 0 | $a$0 & -1;
        HEAP32[$rem + 4 >> 2] = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
        $_0$1 = 0;
        $_0$0 = 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      } else {
        if (!$17) {
          $117 = Math_clz32($d_sroa_1_4_extract_trunc | 0) | 0;
          $119 = $117 - (Math_clz32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
          if ($119 >>> 0 <= 31) {
            $125 = $119 + 1 | 0;
            $126 = 31 - $119 | 0;
            $130 = $119 - 31 >> 31;
            $sr_1_ph = $125;
            $r_sroa_0_1_ph = $n_sroa_0_0_extract_trunc >>> ($125 >>> 0) & $130 | $n_sroa_1_4_extract_trunc << $126;
            $r_sroa_1_1_ph = $n_sroa_1_4_extract_trunc >>> ($125 >>> 0) & $130;
            $q_sroa_0_1_ph = 0;
            $q_sroa_1_1_ph = $n_sroa_0_0_extract_trunc << $126;
            break;
          }
          if (($rem | 0) == 0) {
            $_0$1 = 0;
            $_0$0 = 0;
            return (tempRet0 = $_0$1, $_0$0) | 0;
          }
          HEAP32[$rem >> 2] = 0 | $a$0 & -1;
          HEAP32[$rem + 4 >> 2] = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
          $_0$1 = 0;
          $_0$0 = 0;
          return (tempRet0 = $_0$1, $_0$0) | 0;
        }
        $66 = $d_sroa_0_0_extract_trunc - 1 | 0;
        if (($66 & $d_sroa_0_0_extract_trunc | 0) != 0) {
          $86 = (Math_clz32($d_sroa_0_0_extract_trunc | 0) | 0) + 33 | 0;
          $88 = $86 - (Math_clz32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
          $89 = 64 - $88 | 0;
          $91 = 32 - $88 | 0;
          $92 = $91 >> 31;
          $95 = $88 - 32 | 0;
          $105 = $95 >> 31;
          $sr_1_ph = $88;
          $r_sroa_0_1_ph = $91 - 1 >> 31 & $n_sroa_1_4_extract_trunc >>> ($95 >>> 0) | ($n_sroa_1_4_extract_trunc << $91 | $n_sroa_0_0_extract_trunc >>> ($88 >>> 0)) & $105;
          $r_sroa_1_1_ph = $105 & $n_sroa_1_4_extract_trunc >>> ($88 >>> 0);
          $q_sroa_0_1_ph = $n_sroa_0_0_extract_trunc << $89 & $92;
          $q_sroa_1_1_ph = ($n_sroa_1_4_extract_trunc << $89 | $n_sroa_0_0_extract_trunc >>> ($95 >>> 0)) & $92 | $n_sroa_0_0_extract_trunc << $91 & $88 - 33 >> 31;
          break;
        }
        if (($rem | 0) != 0) {
          HEAP32[$rem >> 2] = $66 & $n_sroa_0_0_extract_trunc;
          HEAP32[$rem + 4 >> 2] = 0;
        }
        if (($d_sroa_0_0_extract_trunc | 0) == 1) {
          $_0$1 = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
          $_0$0 = 0 | $a$0 & -1;
          return (tempRet0 = $_0$1, $_0$0) | 0;
        } else {
          $78 = _llvm_cttz_i32($d_sroa_0_0_extract_trunc | 0) | 0;
          $_0$1 = 0 | $n_sroa_1_4_extract_trunc >>> ($78 >>> 0);
          $_0$0 = $n_sroa_1_4_extract_trunc << 32 - $78 | $n_sroa_0_0_extract_trunc >>> ($78 >>> 0) | 0;
          return (tempRet0 = $_0$1, $_0$0) | 0;
        }
      }
    } while (0);
    if (($sr_1_ph | 0) == 0) {
      $q_sroa_1_1_lcssa = $q_sroa_1_1_ph;
      $q_sroa_0_1_lcssa = $q_sroa_0_1_ph;
      $r_sroa_1_1_lcssa = $r_sroa_1_1_ph;
      $r_sroa_0_1_lcssa = $r_sroa_0_1_ph;
      $carry_0_lcssa$1 = 0;
      $carry_0_lcssa$0 = 0;
    } else {
      $d_sroa_0_0_insert_insert99$0 = 0 | $b$0 & -1;
      $d_sroa_0_0_insert_insert99$1 = $d_sroa_1_4_extract_shift$0 | $b$1 & 0;
      $137$0 = _i64Add($d_sroa_0_0_insert_insert99$0 | 0, $d_sroa_0_0_insert_insert99$1 | 0, -1, -1) | 0;
      $137$1 = tempRet0;
      $q_sroa_1_1198 = $q_sroa_1_1_ph;
      $q_sroa_0_1199 = $q_sroa_0_1_ph;
      $r_sroa_1_1200 = $r_sroa_1_1_ph;
      $r_sroa_0_1201 = $r_sroa_0_1_ph;
      $sr_1202 = $sr_1_ph;
      $carry_0203 = 0;
      while (1) {
        $147 = $q_sroa_0_1199 >>> 31 | $q_sroa_1_1198 << 1;
        $149 = $carry_0203 | $q_sroa_0_1199 << 1;
        $r_sroa_0_0_insert_insert42$0 = 0 | ($r_sroa_0_1201 << 1 | $q_sroa_1_1198 >>> 31);
        $r_sroa_0_0_insert_insert42$1 = $r_sroa_0_1201 >>> 31 | $r_sroa_1_1200 << 1 | 0;
        _i64Subtract($137$0 | 0, $137$1 | 0, $r_sroa_0_0_insert_insert42$0 | 0, $r_sroa_0_0_insert_insert42$1 | 0) | 0;
        $150$1 = tempRet0;
        $151$0 = $150$1 >> 31 | (($150$1 | 0) < 0 ? -1 : 0) << 1;
        $152 = $151$0 & 1;
        $154$0 = _i64Subtract($r_sroa_0_0_insert_insert42$0 | 0, $r_sroa_0_0_insert_insert42$1 | 0, $151$0 & $d_sroa_0_0_insert_insert99$0 | 0, ((($150$1 | 0) < 0 ? -1 : 0) >> 31 | (($150$1 | 0) < 0 ? -1 : 0) << 1) & $d_sroa_0_0_insert_insert99$1 | 0) | 0;
        $r_sroa_0_0_extract_trunc = $154$0;
        $r_sroa_1_4_extract_trunc = tempRet0;
        $155 = $sr_1202 - 1 | 0;
        if (($155 | 0) == 0) {
          break;
        } else {
          $q_sroa_1_1198 = $147;
          $q_sroa_0_1199 = $149;
          $r_sroa_1_1200 = $r_sroa_1_4_extract_trunc;
          $r_sroa_0_1201 = $r_sroa_0_0_extract_trunc;
          $sr_1202 = $155;
          $carry_0203 = $152;
        }
      }
      $q_sroa_1_1_lcssa = $147;
      $q_sroa_0_1_lcssa = $149;
      $r_sroa_1_1_lcssa = $r_sroa_1_4_extract_trunc;
      $r_sroa_0_1_lcssa = $r_sroa_0_0_extract_trunc;
      $carry_0_lcssa$1 = 0;
      $carry_0_lcssa$0 = $152;
    }
    $q_sroa_0_0_insert_ext75$0 = $q_sroa_0_1_lcssa;
    $q_sroa_0_0_insert_ext75$1 = 0;
    $q_sroa_0_0_insert_insert77$1 = $q_sroa_1_1_lcssa | $q_sroa_0_0_insert_ext75$1;
    if (($rem | 0) != 0) {
      HEAP32[$rem >> 2] = 0 | $r_sroa_0_1_lcssa;
      HEAP32[$rem + 4 >> 2] = $r_sroa_1_1_lcssa | 0;
    }
    $_0$1 = (0 | $q_sroa_0_0_insert_ext75$0) >>> 31 | $q_sroa_0_0_insert_insert77$1 << 1 | ($q_sroa_0_0_insert_ext75$1 << 1 | $q_sroa_0_0_insert_ext75$0 >>> 31) & 0 | $carry_0_lcssa$1;
    $_0$0 = ($q_sroa_0_0_insert_ext75$0 << 1 | 0 >>> 31) & -2 | $carry_0_lcssa$0;
    return (tempRet0 = $_0$1, $_0$0) | 0;
}
function ___udivdi3($a$0, $a$1, $b$0, $b$1) {
    $a$0 = $a$0 | 0;
    $a$1 = $a$1 | 0;
    $b$0 = $b$0 | 0;
    $b$1 = $b$1 | 0;
    var $1$0 = 0;
    $1$0 = ___udivmoddi4($a$0, $a$1, $b$0, $b$1, 0) | 0;
    return $1$0 | 0;
}
function ___muldsi3($a, $b) {
    $a = $a | 0;
    $b = $b | 0;
    var $1 = 0, $2 = 0, $3 = 0, $6 = 0, $8 = 0, $11 = 0, $12 = 0;
    $1 = $a & 65535;
    $2 = $b & 65535;
    $3 = Math_imul($2, $1) | 0;
    $6 = $a >>> 16;
    $8 = ($3 >>> 16) + (Math_imul($2, $6) | 0) | 0;
    $11 = $b >>> 16;
    $12 = Math_imul($11, $1) | 0;
    return (tempRet0 = (($8 >>> 16) + (Math_imul($11, $6) | 0) | 0) + ((($8 & 65535) + $12 | 0) >>> 16) | 0, 0 | ($8 + $12 << 16 | $3 & 65535)) | 0;
}
function ___muldi3($a$0, $a$1, $b$0, $b$1) {
    $a$0 = $a$0 | 0;
    $a$1 = $a$1 | 0;
    $b$0 = $b$0 | 0;
    $b$1 = $b$1 | 0;
    var $x_sroa_0_0_extract_trunc = 0, $y_sroa_0_0_extract_trunc = 0, $1$0 = 0, $1$1 = 0, $2 = 0;
    $x_sroa_0_0_extract_trunc = $a$0;
    $y_sroa_0_0_extract_trunc = $b$0;
    $1$0 = ___muldsi3($x_sroa_0_0_extract_trunc, $y_sroa_0_0_extract_trunc) | 0;
    $1$1 = tempRet0;
    $2 = Math_imul($a$1, $y_sroa_0_0_extract_trunc) | 0;
    return (tempRet0 = ((Math_imul($b$1, $x_sroa_0_0_extract_trunc) | 0) + $2 | 0) + $1$1 | $1$1 & 0, 0 | $1$0 & -1) | 0;
}
function _sbrk(increment) {
    increment = increment|0;
    var oldDynamicTop = 0;
    var oldDynamicTopOnChange = 0;
    var newDynamicTop = 0;
    var totalMemory = 0;
    increment = ((increment + 15) & -16)|0;
    oldDynamicTop = HEAP32[DYNAMICTOP_PTR>>2]|0;
    newDynamicTop = oldDynamicTop + increment | 0;

    if (((increment|0) > 0 & (newDynamicTop|0) < (oldDynamicTop|0)) // Detect and fail if we would wrap around signed 32-bit int.
      | (newDynamicTop|0) < 0) { // Also underflow, sbrk() should be able to be used to subtract.
      abortOnCannotGrowMemory()|0;
      ___setErrNo(12);
      return -1;
    }

    HEAP32[DYNAMICTOP_PTR>>2] = newDynamicTop;
    totalMemory = getTotalMemory()|0;
    if ((newDynamicTop|0) > (totalMemory|0)) {
      if ((enlargeMemory()|0) == 0) {
        ___setErrNo(12);
        HEAP32[DYNAMICTOP_PTR>>2] = oldDynamicTop;
        return -1;
      }
    }
    return oldDynamicTop|0;
}
function _memmove(dest, src, num) {
    dest = dest|0; src = src|0; num = num|0;
    var ret = 0;
    if (((src|0) < (dest|0)) & ((dest|0) < ((src + num)|0))) {
      // Unlikely case: Copy backwards in a safe manner
      ret = dest;
      src = (src + num)|0;
      dest = (dest + num)|0;
      while ((num|0) > 0) {
        dest = (dest - 1)|0;
        src = (src - 1)|0;
        num = (num - 1)|0;
        HEAP8[((dest)>>0)]=((HEAP8[((src)>>0)])|0);
      }
      dest = ret;
    } else {
      _memcpy(dest, src, num) | 0;
    }
    return dest | 0;
}
function ___uremdi3($a$0, $a$1, $b$0, $b$1) {
    $a$0 = $a$0 | 0;
    $a$1 = $a$1 | 0;
    $b$0 = $b$0 | 0;
    $b$1 = $b$1 | 0;
    var $rem = 0, __stackBase__ = 0;
    __stackBase__ = STACKTOP;
    STACKTOP = STACKTOP + 16 | 0;
    $rem = __stackBase__ | 0;
    ___udivmoddi4($a$0, $a$1, $b$0, $b$1, $rem) | 0;
    STACKTOP = __stackBase__;
    return (tempRet0 = HEAP32[$rem + 4 >> 2] | 0, HEAP32[$rem >> 2] | 0) | 0;
}
function _llvm_bswap_i32(x) {
    x = x|0;
    return (((x&0xff)<<24) | (((x>>8)&0xff)<<16) | (((x>>16)&0xff)<<8) | (x>>>24))|0;
}


function dynCall_iiii(index,a1,a2,a3) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0;
  return FUNCTION_TABLE_iiii[index&31](a1|0,a2|0,a3|0)|0;
}


function jsCall_iiii_0(a1,a2,a3) {
  a1=a1|0; a2=a2|0; a3=a3|0;
  return jsCall_iiii(0,a1|0,a2|0,a3|0)|0;
}



function jsCall_iiii_1(a1,a2,a3) {
  a1=a1|0; a2=a2|0; a3=a3|0;
  return jsCall_iiii(1,a1|0,a2|0,a3|0)|0;
}



function dynCall_viiiii(index,a1,a2,a3,a4,a5) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0;
  FUNCTION_TABLE_viiiii[index&31](a1|0,a2|0,a3|0,a4|0,a5|0);
}


function jsCall_viiiii_0(a1,a2,a3,a4,a5) {
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0;
  jsCall_viiiii(0,a1|0,a2|0,a3|0,a4|0,a5|0);
}



function jsCall_viiiii_1(a1,a2,a3,a4,a5) {
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0;
  jsCall_viiiii(1,a1|0,a2|0,a3|0,a4|0,a5|0);
}



function dynCall_vi(index,a1) {
  index = index|0;
  a1=a1|0;
  FUNCTION_TABLE_vi[index&31](a1|0);
}


function jsCall_vi_0(a1) {
  a1=a1|0;
  jsCall_vi(0,a1|0);
}



function jsCall_vi_1(a1) {
  a1=a1|0;
  jsCall_vi(1,a1|0);
}



function dynCall_ii(index,a1) {
  index = index|0;
  a1=a1|0;
  return FUNCTION_TABLE_ii[index&31](a1|0)|0;
}


function jsCall_ii_0(a1) {
  a1=a1|0;
  return jsCall_ii(0,a1|0)|0;
}



function jsCall_ii_1(a1) {
  a1=a1|0;
  return jsCall_ii(1,a1|0)|0;
}



function dynCall_v(index) {
  index = index|0;

  FUNCTION_TABLE_v[index&7]();
}


function jsCall_v_0() {

  jsCall_v(0);
}



function jsCall_v_1() {

  jsCall_v(1);
}



function dynCall_viiiiii(index,a1,a2,a3,a4,a5,a6) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0;
  FUNCTION_TABLE_viiiiii[index&31](a1|0,a2|0,a3|0,a4|0,a5|0,a6|0);
}


function jsCall_viiiiii_0(a1,a2,a3,a4,a5,a6) {
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0;
  jsCall_viiiiii(0,a1|0,a2|0,a3|0,a4|0,a5|0,a6|0);
}



function jsCall_viiiiii_1(a1,a2,a3,a4,a5,a6) {
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0;
  jsCall_viiiiii(1,a1|0,a2|0,a3|0,a4|0,a5|0,a6|0);
}



function dynCall_iii(index,a1,a2) {
  index = index|0;
  a1=a1|0; a2=a2|0;
  return FUNCTION_TABLE_iii[index&31](a1|0,a2|0)|0;
}


function jsCall_iii_0(a1,a2) {
  a1=a1|0; a2=a2|0;
  return jsCall_iii(0,a1|0,a2|0)|0;
}



function jsCall_iii_1(a1,a2) {
  a1=a1|0; a2=a2|0;
  return jsCall_iii(1,a1|0,a2|0)|0;
}



function dynCall_viiii(index,a1,a2,a3,a4) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0;
  FUNCTION_TABLE_viiii[index&31](a1|0,a2|0,a3|0,a4|0);
}


function jsCall_viiii_0(a1,a2,a3,a4) {
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0;
  jsCall_viiii(0,a1|0,a2|0,a3|0,a4|0);
}



function jsCall_viiii_1(a1,a2,a3,a4) {
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0;
  jsCall_viiii(1,a1|0,a2|0,a3|0,a4|0);
}


function b0(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(0);return 0;
}
function b1(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(1);
}
function b2(p0) {
 p0 = p0|0; nullFunc_vi(2);
}
function b3(p0) {
 p0 = p0|0; nullFunc_ii(3);return 0;
}
function b4() {
 ; nullFunc_v(4);
}
function b5(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(5);
}
function b6(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_iii(6);return 0;
}
function b7(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(7);
}

// EMSCRIPTEN_END_FUNCS
var FUNCTION_TABLE_iiii = [b0,b0,jsCall_iiii_0,b0,jsCall_iiii_1,b0,b0,___stdout_write,___stdio_seek,___stdio_write,_sn_write,b0,b0,b0,b0,__ZNK10__cxxabiv117__class_type_info9can_catchEPKNS_16__shim_type_infoERPv,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,___stdio_read,_do_read_754,_do_read];
var FUNCTION_TABLE_viiiii = [b1,b1,jsCall_viiiii_0,b1,jsCall_viiiii_1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,__ZNK10__cxxabiv117__class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib,b1,b1,b1,__ZNK10__cxxabiv120__si_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1];
var FUNCTION_TABLE_vi = [b2,b2,jsCall_vi_0,b2,jsCall_vi_1,b2,b2,b2,b2,b2,b2,__ZN10__cxxabiv116__shim_type_infoD2Ev,__ZN10__cxxabiv117__class_type_infoD0Ev,__ZNK10__cxxabiv116__shim_type_info5noop1Ev,__ZNK10__cxxabiv116__shim_type_info5noop2Ev,b2,b2,b2,b2,__ZN10__cxxabiv120__si_class_type_infoD0Ev,b2,b2,b2,__ZNSt9bad_allocD2Ev,__ZNSt9bad_allocD0Ev,b2,b2,b2,__ZN12EspeakWorkerC2Ev
,b2,b2,b2];
var FUNCTION_TABLE_ii = [b3,b3,jsCall_ii_0,b3,jsCall_ii_1,b3,___stdio_close,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,__ZNKSt9bad_alloc4whatEv,b3,b3,b3
,b3,b3,b3];
var FUNCTION_TABLE_v = [b4,b4,jsCall_v_0,b4,jsCall_v_1,b4,b4,b4];
var FUNCTION_TABLE_viiiiii = [b5,b5,jsCall_viiiiii_0,b5,jsCall_viiiiii_1,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,__ZNK10__cxxabiv117__class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib,b5,b5,b5,__ZNK10__cxxabiv120__si_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5];
var FUNCTION_TABLE_iii = [b6,b6,jsCall_iii_0,b6,jsCall_iii_1,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,__ZL15VoiceNameSorterPKvS0_,__ZL16VoiceScoreSorterPKvS0_,b6
,b6,b6,b6];
var FUNCTION_TABLE_viiii = [b7,b7,jsCall_viiii_0,b7,jsCall_viiii_1,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,__ZNK10__cxxabiv117__class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi,b7,b7,b7,__ZNK10__cxxabiv120__si_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi,b7,b7,b7,b7,b7,b7
,b7,b7,b7];

  return { _llvm_bswap_i32: _llvm_bswap_i32, _emscripten_bind_espeak_VOICE_get_variant_0: _emscripten_bind_espeak_VOICE_get_variant_0, _emscripten_bind_espeak_VOICE_get_xx1_0: _emscripten_bind_espeak_VOICE_get_xx1_0, _emscripten_bind_espeak_VOICE_set_spare_1: _emscripten_bind_espeak_VOICE_set_spare_1, _emscripten_bind_EspeakWorker_getSizeOfEventStruct__0: _emscripten_bind_EspeakWorker_getSizeOfEventStruct__0, _emscripten_bind_espeak_VOICE_set_identifier_1: _emscripten_bind_espeak_VOICE_set_identifier_1, _bitshift64Lshr: _bitshift64Lshr, _emscripten_enum_espeak_EVENT_TYPE_espeakEVENT_LIST_TERMINATED: _emscripten_enum_espeak_EVENT_TYPE_espeakEVENT_LIST_TERMINATED, _emscripten_bind_espeak_VOICE___destroy___0: _emscripten_bind_espeak_VOICE___destroy___0, ___udivdi3: ___udivdi3, _emscripten_bind_espeak_VOICE_set_variant_1: _emscripten_bind_espeak_VOICE_set_variant_1, _emscripten_bind_espeak_VOICE_get_score_0: _emscripten_bind_espeak_VOICE_get_score_0, _emscripten_bind_EspeakWorker_set_pitch_1: _emscripten_bind_EspeakWorker_set_pitch_1, _emscripten_bind_espeak_VOICE_set_gender_1: _emscripten_bind_espeak_VOICE_set_gender_1, _emscripten_enum_espeak_EVENT_TYPE_espeakEVENT_SENTENCE: _emscripten_enum_espeak_EVENT_TYPE_espeakEVENT_SENTENCE, _fflush: _fflush, _emscripten_bind_espeak_EVENT_get_user_data_0: _emscripten_bind_espeak_EVENT_get_user_data_0, _emscripten_bind_espeak_VOICE_get_name_0: _emscripten_bind_espeak_VOICE_get_name_0, _emscripten_enum_espeak_EVENT_TYPE_espeakEVENT_PLAY: _emscripten_enum_espeak_EVENT_TYPE_espeakEVENT_PLAY, ___errno_location: ___errno_location, _emscripten_bind_VoidPtr___destroy___0: _emscripten_bind_VoidPtr___destroy___0, _emscripten_bind_espeak_EVENT_get_unique_identifier_0: _emscripten_bind_espeak_EVENT_get_unique_identifier_0, _sbrk: _sbrk, _emscripten_enum_espeak_EVENT_TYPE_espeakEVENT_WORD: _emscripten_enum_espeak_EVENT_TYPE_espeakEVENT_WORD, _emscripten_bind_EspeakWorker_get_samplerate_0: _emscripten_bind_EspeakWorker_get_samplerate_0, _memcpy: _memcpy, _emscripten_bind_espeak_EVENT___destroy___0: _emscripten_bind_espeak_EVENT___destroy___0, _emscripten_bind_EspeakWorker_synth__2: _emscripten_bind_EspeakWorker_synth__2, _emscripten_bind_espeak_EVENT_get_length_0: _emscripten_bind_espeak_EVENT_get_length_0, _emscripten_bind_EspeakWorker_EspeakWorker_0: _emscripten_bind_EspeakWorker_EspeakWorker_0, _emscripten_bind_espeak_EVENT_get_type_0: _emscripten_bind_espeak_EVENT_get_type_0, _bitshift64Shl: _bitshift64Shl, ___uremdi3: ___uremdi3, _llvm_cttz_i32: _llvm_cttz_i32, _i64Subtract: _i64Subtract, _emscripten_bind_espeak_VOICE_set_name_1: _emscripten_bind_espeak_VOICE_set_name_1, ___udivmoddi4: ___udivmoddi4, _emscripten_enum_espeak_EVENT_TYPE_espeakEVENT_SAMPLERATE: _emscripten_enum_espeak_EVENT_TYPE_espeakEVENT_SAMPLERATE, _i64Add: _i64Add, _emscripten_bind_EspeakWorker_setVoice_5: _emscripten_bind_EspeakWorker_setVoice_5, _emscripten_bind_EspeakWorker_setVoice_3: _emscripten_bind_EspeakWorker_setVoice_3, _emscripten_bind_EspeakWorker_setVoice_2: _emscripten_bind_EspeakWorker_setVoice_2, _emscripten_bind_espeak_VOICE_set_xx1_1: _emscripten_bind_espeak_VOICE_set_xx1_1, _emscripten_bind_espeak_VOICE_get_languages_1: _emscripten_bind_espeak_VOICE_get_languages_1, _emscripten_bind_EspeakWorker_setVoice_4: _emscripten_bind_EspeakWorker_setVoice_4, _emscripten_bind_espeak_VOICE_get_identifier_0: _emscripten_bind_espeak_VOICE_get_identifier_0, _emscripten_bind_espeak_EVENT_get_text_position_0: _emscripten_bind_espeak_EVENT_get_text_position_0, _emscripten_get_global_libc: _emscripten_get_global_libc, _emscripten_bind_espeak_VOICE_get_age_0: _emscripten_bind_espeak_VOICE_get_age_0, _emscripten_bind_espeak_VOICE_get_spare_0: _emscripten_bind_espeak_VOICE_get_spare_0, _emscripten_bind_EspeakWorker_get_pitch_0: _emscripten_bind_EspeakWorker_get_pitch_0, _emscripten_bind_EspeakWorker_set_rate_1: _emscripten_bind_EspeakWorker_set_rate_1, _emscripten_bind_EspeakWorker_set_voices_2: _emscripten_bind_EspeakWorker_set_voices_2, _emscripten_bind_EspeakWorker___destroy___0: _emscripten_bind_EspeakWorker___destroy___0, ___muldsi3: ___muldsi3, _emscripten_bind_espeak_VOICE_get_gender_0: _emscripten_bind_espeak_VOICE_get_gender_0, _free: _free, _emscripten_enum_espeak_EVENT_TYPE_espeakEVENT_END: _emscripten_enum_espeak_EVENT_TYPE_espeakEVENT_END, _emscripten_bind_espeak_VOICE_set_age_1: _emscripten_bind_espeak_VOICE_set_age_1, _memmove: _memmove, _emscripten_bind_EspeakWorker_get_rate_0: _emscripten_bind_EspeakWorker_get_rate_0, _emscripten_enum_espeak_EVENT_TYPE_espeakEVENT_MSG_TERMINATED: _emscripten_enum_espeak_EVENT_TYPE_espeakEVENT_MSG_TERMINATED, _malloc: _malloc, _emscripten_bind_espeak_EVENT_get_sample_0: _emscripten_bind_espeak_EVENT_get_sample_0, _emscripten_bind_EspeakWorker_get_voices_1: _emscripten_bind_EspeakWorker_get_voices_1, ___muldi3: ___muldi3, _emscripten_bind_espeak_VOICE_set_score_1: _emscripten_bind_espeak_VOICE_set_score_1, _emscripten_bind_espeak_EVENT_get_audio_position_0: _emscripten_bind_espeak_EVENT_get_audio_position_0, _emscripten_enum_espeak_EVENT_TYPE_espeakEVENT_MARK: _emscripten_enum_espeak_EVENT_TYPE_espeakEVENT_MARK, _memset: _memset, _emscripten_enum_espeak_EVENT_TYPE_espeakEVENT_PHONEME: _emscripten_enum_espeak_EVENT_TYPE_espeakEVENT_PHONEME, runPostSets: runPostSets, stackAlloc: stackAlloc, stackSave: stackSave, stackRestore: stackRestore, establishStackSpace: establishStackSpace, setTempRet0: setTempRet0, getTempRet0: getTempRet0, setThrew: setThrew, stackAlloc: stackAlloc, stackSave: stackSave, stackRestore: stackRestore, establishStackSpace: establishStackSpace, setThrew: setThrew, setTempRet0: setTempRet0, getTempRet0: getTempRet0, dynCall_iiii: dynCall_iiii, dynCall_viiiii: dynCall_viiiii, dynCall_vi: dynCall_vi, dynCall_ii: dynCall_ii, dynCall_v: dynCall_v, dynCall_viiiiii: dynCall_viiiiii, dynCall_iii: dynCall_iii, dynCall_viiii: dynCall_viiii };
})
// EMSCRIPTEN_END_ASM
(Module.asmGlobalArg, Module.asmLibraryArg, buffer);

var real_stackSave = asm["stackSave"]; asm["stackSave"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real_stackSave.apply(null, arguments);
};

var real__emscripten_bind_espeak_VOICE_get_xx1_0 = asm["_emscripten_bind_espeak_VOICE_get_xx1_0"]; asm["_emscripten_bind_espeak_VOICE_get_xx1_0"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__emscripten_bind_espeak_VOICE_get_xx1_0.apply(null, arguments);
};

var real__emscripten_bind_espeak_VOICE_set_spare_1 = asm["_emscripten_bind_espeak_VOICE_set_spare_1"]; asm["_emscripten_bind_espeak_VOICE_set_spare_1"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__emscripten_bind_espeak_VOICE_set_spare_1.apply(null, arguments);
};

var real__emscripten_bind_EspeakWorker_getSizeOfEventStruct__0 = asm["_emscripten_bind_EspeakWorker_getSizeOfEventStruct__0"]; asm["_emscripten_bind_EspeakWorker_getSizeOfEventStruct__0"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__emscripten_bind_EspeakWorker_getSizeOfEventStruct__0.apply(null, arguments);
};

var real_getTempRet0 = asm["getTempRet0"]; asm["getTempRet0"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real_getTempRet0.apply(null, arguments);
};

var real____udivdi3 = asm["___udivdi3"]; asm["___udivdi3"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real____udivdi3.apply(null, arguments);
};

var real__bitshift64Lshr = asm["_bitshift64Lshr"]; asm["_bitshift64Lshr"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__bitshift64Lshr.apply(null, arguments);
};

var real_setThrew = asm["setThrew"]; asm["setThrew"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real_setThrew.apply(null, arguments);
};

var real__emscripten_bind_espeak_VOICE___destroy___0 = asm["_emscripten_bind_espeak_VOICE___destroy___0"]; asm["_emscripten_bind_espeak_VOICE___destroy___0"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__emscripten_bind_espeak_VOICE___destroy___0.apply(null, arguments);
};

var real__emscripten_bind_espeak_VOICE_set_variant_1 = asm["_emscripten_bind_espeak_VOICE_set_variant_1"]; asm["_emscripten_bind_espeak_VOICE_set_variant_1"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__emscripten_bind_espeak_VOICE_set_variant_1.apply(null, arguments);
};

var real__emscripten_bind_espeak_VOICE_get_score_0 = asm["_emscripten_bind_espeak_VOICE_get_score_0"]; asm["_emscripten_bind_espeak_VOICE_get_score_0"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__emscripten_bind_espeak_VOICE_get_score_0.apply(null, arguments);
};

var real__emscripten_bind_espeak_EVENT_get_audio_position_0 = asm["_emscripten_bind_espeak_EVENT_get_audio_position_0"]; asm["_emscripten_bind_espeak_EVENT_get_audio_position_0"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__emscripten_bind_espeak_EVENT_get_audio_position_0.apply(null, arguments);
};

var real__emscripten_bind_espeak_EVENT_get_sample_0 = asm["_emscripten_bind_espeak_EVENT_get_sample_0"]; asm["_emscripten_bind_espeak_EVENT_get_sample_0"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__emscripten_bind_espeak_EVENT_get_sample_0.apply(null, arguments);
};

var real__emscripten_bind_EspeakWorker_set_pitch_1 = asm["_emscripten_bind_EspeakWorker_set_pitch_1"]; asm["_emscripten_bind_EspeakWorker_set_pitch_1"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__emscripten_bind_EspeakWorker_set_pitch_1.apply(null, arguments);
};

var real__emscripten_bind_espeak_VOICE_set_gender_1 = asm["_emscripten_bind_espeak_VOICE_set_gender_1"]; asm["_emscripten_bind_espeak_VOICE_set_gender_1"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__emscripten_bind_espeak_VOICE_set_gender_1.apply(null, arguments);
};

var real__emscripten_enum_espeak_EVENT_TYPE_espeakEVENT_SENTENCE = asm["_emscripten_enum_espeak_EVENT_TYPE_espeakEVENT_SENTENCE"]; asm["_emscripten_enum_espeak_EVENT_TYPE_espeakEVENT_SENTENCE"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__emscripten_enum_espeak_EVENT_TYPE_espeakEVENT_SENTENCE.apply(null, arguments);
};

var real__fflush = asm["_fflush"]; asm["_fflush"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__fflush.apply(null, arguments);
};

var real__emscripten_bind_espeak_VOICE_get_name_0 = asm["_emscripten_bind_espeak_VOICE_get_name_0"]; asm["_emscripten_bind_espeak_VOICE_get_name_0"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__emscripten_bind_espeak_VOICE_get_name_0.apply(null, arguments);
};

var real__emscripten_enum_espeak_EVENT_TYPE_espeakEVENT_PLAY = asm["_emscripten_enum_espeak_EVENT_TYPE_espeakEVENT_PLAY"]; asm["_emscripten_enum_espeak_EVENT_TYPE_espeakEVENT_PLAY"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__emscripten_enum_espeak_EVENT_TYPE_espeakEVENT_PLAY.apply(null, arguments);
};

var real__emscripten_bind_EspeakWorker___destroy___0 = asm["_emscripten_bind_EspeakWorker___destroy___0"]; asm["_emscripten_bind_EspeakWorker___destroy___0"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__emscripten_bind_EspeakWorker___destroy___0.apply(null, arguments);
};

var real__emscripten_bind_VoidPtr___destroy___0 = asm["_emscripten_bind_VoidPtr___destroy___0"]; asm["_emscripten_bind_VoidPtr___destroy___0"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__emscripten_bind_VoidPtr___destroy___0.apply(null, arguments);
};

var real__emscripten_bind_espeak_VOICE_set_identifier_1 = asm["_emscripten_bind_espeak_VOICE_set_identifier_1"]; asm["_emscripten_bind_espeak_VOICE_set_identifier_1"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__emscripten_bind_espeak_VOICE_set_identifier_1.apply(null, arguments);
};

var real__sbrk = asm["_sbrk"]; asm["_sbrk"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__sbrk.apply(null, arguments);
};

var real__emscripten_enum_espeak_EVENT_TYPE_espeakEVENT_WORD = asm["_emscripten_enum_espeak_EVENT_TYPE_espeakEVENT_WORD"]; asm["_emscripten_enum_espeak_EVENT_TYPE_espeakEVENT_WORD"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__emscripten_enum_espeak_EVENT_TYPE_espeakEVENT_WORD.apply(null, arguments);
};

var real__emscripten_bind_EspeakWorker_get_samplerate_0 = asm["_emscripten_bind_EspeakWorker_get_samplerate_0"]; asm["_emscripten_bind_EspeakWorker_get_samplerate_0"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__emscripten_bind_EspeakWorker_get_samplerate_0.apply(null, arguments);
};

var real__llvm_bswap_i32 = asm["_llvm_bswap_i32"]; asm["_llvm_bswap_i32"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__llvm_bswap_i32.apply(null, arguments);
};

var real__emscripten_bind_EspeakWorker_synth__2 = asm["_emscripten_bind_EspeakWorker_synth__2"]; asm["_emscripten_bind_EspeakWorker_synth__2"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__emscripten_bind_EspeakWorker_synth__2.apply(null, arguments);
};

var real__emscripten_bind_espeak_EVENT_get_length_0 = asm["_emscripten_bind_espeak_EVENT_get_length_0"]; asm["_emscripten_bind_espeak_EVENT_get_length_0"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__emscripten_bind_espeak_EVENT_get_length_0.apply(null, arguments);
};

var real__emscripten_bind_EspeakWorker_EspeakWorker_0 = asm["_emscripten_bind_EspeakWorker_EspeakWorker_0"]; asm["_emscripten_bind_EspeakWorker_EspeakWorker_0"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__emscripten_bind_EspeakWorker_EspeakWorker_0.apply(null, arguments);
};

var real__emscripten_bind_espeak_EVENT_get_type_0 = asm["_emscripten_bind_espeak_EVENT_get_type_0"]; asm["_emscripten_bind_espeak_EVENT_get_type_0"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__emscripten_bind_espeak_EVENT_get_type_0.apply(null, arguments);
};

var real__bitshift64Shl = asm["_bitshift64Shl"]; asm["_bitshift64Shl"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__bitshift64Shl.apply(null, arguments);
};

var real____uremdi3 = asm["___uremdi3"]; asm["___uremdi3"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real____uremdi3.apply(null, arguments);
};

var real__emscripten_bind_espeak_EVENT_get_unique_identifier_0 = asm["_emscripten_bind_espeak_EVENT_get_unique_identifier_0"]; asm["_emscripten_bind_espeak_EVENT_get_unique_identifier_0"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__emscripten_bind_espeak_EVENT_get_unique_identifier_0.apply(null, arguments);
};

var real__emscripten_bind_espeak_EVENT___destroy___0 = asm["_emscripten_bind_espeak_EVENT___destroy___0"]; asm["_emscripten_bind_espeak_EVENT___destroy___0"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__emscripten_bind_espeak_EVENT___destroy___0.apply(null, arguments);
};

var real__llvm_cttz_i32 = asm["_llvm_cttz_i32"]; asm["_llvm_cttz_i32"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__llvm_cttz_i32.apply(null, arguments);
};

var real__i64Subtract = asm["_i64Subtract"]; asm["_i64Subtract"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__i64Subtract.apply(null, arguments);
};

var real__emscripten_bind_espeak_VOICE_get_variant_0 = asm["_emscripten_bind_espeak_VOICE_get_variant_0"]; asm["_emscripten_bind_espeak_VOICE_get_variant_0"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__emscripten_bind_espeak_VOICE_get_variant_0.apply(null, arguments);
};

var real____udivmoddi4 = asm["___udivmoddi4"]; asm["___udivmoddi4"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real____udivmoddi4.apply(null, arguments);
};

var real_setTempRet0 = asm["setTempRet0"]; asm["setTempRet0"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real_setTempRet0.apply(null, arguments);
};

var real__emscripten_enum_espeak_EVENT_TYPE_espeakEVENT_SAMPLERATE = asm["_emscripten_enum_espeak_EVENT_TYPE_espeakEVENT_SAMPLERATE"]; asm["_emscripten_enum_espeak_EVENT_TYPE_espeakEVENT_SAMPLERATE"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__emscripten_enum_espeak_EVENT_TYPE_espeakEVENT_SAMPLERATE.apply(null, arguments);
};

var real__i64Add = asm["_i64Add"]; asm["_i64Add"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__i64Add.apply(null, arguments);
};

var real__emscripten_enum_espeak_EVENT_TYPE_espeakEVENT_LIST_TERMINATED = asm["_emscripten_enum_espeak_EVENT_TYPE_espeakEVENT_LIST_TERMINATED"]; asm["_emscripten_enum_espeak_EVENT_TYPE_espeakEVENT_LIST_TERMINATED"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__emscripten_enum_espeak_EVENT_TYPE_espeakEVENT_LIST_TERMINATED.apply(null, arguments);
};

var real__emscripten_bind_EspeakWorker_setVoice_3 = asm["_emscripten_bind_EspeakWorker_setVoice_3"]; asm["_emscripten_bind_EspeakWorker_setVoice_3"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__emscripten_bind_EspeakWorker_setVoice_3.apply(null, arguments);
};

var real__emscripten_bind_EspeakWorker_setVoice_2 = asm["_emscripten_bind_EspeakWorker_setVoice_2"]; asm["_emscripten_bind_EspeakWorker_setVoice_2"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__emscripten_bind_EspeakWorker_setVoice_2.apply(null, arguments);
};

var real__emscripten_bind_EspeakWorker_setVoice_5 = asm["_emscripten_bind_EspeakWorker_setVoice_5"]; asm["_emscripten_bind_EspeakWorker_setVoice_5"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__emscripten_bind_EspeakWorker_setVoice_5.apply(null, arguments);
};

var real__emscripten_bind_EspeakWorker_setVoice_4 = asm["_emscripten_bind_EspeakWorker_setVoice_4"]; asm["_emscripten_bind_EspeakWorker_setVoice_4"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__emscripten_bind_EspeakWorker_setVoice_4.apply(null, arguments);
};

var real__emscripten_bind_espeak_VOICE_set_xx1_1 = asm["_emscripten_bind_espeak_VOICE_set_xx1_1"]; asm["_emscripten_bind_espeak_VOICE_set_xx1_1"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__emscripten_bind_espeak_VOICE_set_xx1_1.apply(null, arguments);
};

var real__emscripten_bind_espeak_VOICE_get_identifier_0 = asm["_emscripten_bind_espeak_VOICE_get_identifier_0"]; asm["_emscripten_bind_espeak_VOICE_get_identifier_0"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__emscripten_bind_espeak_VOICE_get_identifier_0.apply(null, arguments);
};

var real__emscripten_bind_espeak_VOICE_set_name_1 = asm["_emscripten_bind_espeak_VOICE_set_name_1"]; asm["_emscripten_bind_espeak_VOICE_set_name_1"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__emscripten_bind_espeak_VOICE_set_name_1.apply(null, arguments);
};

var real__emscripten_get_global_libc = asm["_emscripten_get_global_libc"]; asm["_emscripten_get_global_libc"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__emscripten_get_global_libc.apply(null, arguments);
};

var real__emscripten_bind_espeak_VOICE_get_age_0 = asm["_emscripten_bind_espeak_VOICE_get_age_0"]; asm["_emscripten_bind_espeak_VOICE_get_age_0"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__emscripten_bind_espeak_VOICE_get_age_0.apply(null, arguments);
};

var real__emscripten_bind_espeak_VOICE_get_spare_0 = asm["_emscripten_bind_espeak_VOICE_get_spare_0"]; asm["_emscripten_bind_espeak_VOICE_get_spare_0"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__emscripten_bind_espeak_VOICE_get_spare_0.apply(null, arguments);
};

var real__emscripten_bind_EspeakWorker_get_pitch_0 = asm["_emscripten_bind_EspeakWorker_get_pitch_0"]; asm["_emscripten_bind_EspeakWorker_get_pitch_0"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__emscripten_bind_EspeakWorker_get_pitch_0.apply(null, arguments);
};

var real_stackAlloc = asm["stackAlloc"]; asm["stackAlloc"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real_stackAlloc.apply(null, arguments);
};

var real__emscripten_bind_EspeakWorker_set_rate_1 = asm["_emscripten_bind_EspeakWorker_set_rate_1"]; asm["_emscripten_bind_EspeakWorker_set_rate_1"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__emscripten_bind_EspeakWorker_set_rate_1.apply(null, arguments);
};

var real__emscripten_bind_EspeakWorker_set_voices_2 = asm["_emscripten_bind_EspeakWorker_set_voices_2"]; asm["_emscripten_bind_EspeakWorker_set_voices_2"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__emscripten_bind_EspeakWorker_set_voices_2.apply(null, arguments);
};

var real____errno_location = asm["___errno_location"]; asm["___errno_location"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real____errno_location.apply(null, arguments);
};

var real____muldsi3 = asm["___muldsi3"]; asm["___muldsi3"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real____muldsi3.apply(null, arguments);
};

var real__emscripten_bind_espeak_VOICE_get_languages_1 = asm["_emscripten_bind_espeak_VOICE_get_languages_1"]; asm["_emscripten_bind_espeak_VOICE_get_languages_1"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__emscripten_bind_espeak_VOICE_get_languages_1.apply(null, arguments);
};

var real__free = asm["_free"]; asm["_free"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__free.apply(null, arguments);
};

var real__emscripten_bind_espeak_EVENT_get_text_position_0 = asm["_emscripten_bind_espeak_EVENT_get_text_position_0"]; asm["_emscripten_bind_espeak_EVENT_get_text_position_0"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__emscripten_bind_espeak_EVENT_get_text_position_0.apply(null, arguments);
};

var real__emscripten_bind_espeak_EVENT_get_user_data_0 = asm["_emscripten_bind_espeak_EVENT_get_user_data_0"]; asm["_emscripten_bind_espeak_EVENT_get_user_data_0"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__emscripten_bind_espeak_EVENT_get_user_data_0.apply(null, arguments);
};

var real__memmove = asm["_memmove"]; asm["_memmove"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__memmove.apply(null, arguments);
};

var real__emscripten_bind_EspeakWorker_get_rate_0 = asm["_emscripten_bind_EspeakWorker_get_rate_0"]; asm["_emscripten_bind_EspeakWorker_get_rate_0"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__emscripten_bind_EspeakWorker_get_rate_0.apply(null, arguments);
};

var real__emscripten_enum_espeak_EVENT_TYPE_espeakEVENT_END = asm["_emscripten_enum_espeak_EVENT_TYPE_espeakEVENT_END"]; asm["_emscripten_enum_espeak_EVENT_TYPE_espeakEVENT_END"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__emscripten_enum_espeak_EVENT_TYPE_espeakEVENT_END.apply(null, arguments);
};

var real__emscripten_enum_espeak_EVENT_TYPE_espeakEVENT_MSG_TERMINATED = asm["_emscripten_enum_espeak_EVENT_TYPE_espeakEVENT_MSG_TERMINATED"]; asm["_emscripten_enum_espeak_EVENT_TYPE_espeakEVENT_MSG_TERMINATED"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__emscripten_enum_espeak_EVENT_TYPE_espeakEVENT_MSG_TERMINATED.apply(null, arguments);
};

var real_stackRestore = asm["stackRestore"]; asm["stackRestore"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real_stackRestore.apply(null, arguments);
};

var real_establishStackSpace = asm["establishStackSpace"]; asm["establishStackSpace"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real_establishStackSpace.apply(null, arguments);
};

var real__malloc = asm["_malloc"]; asm["_malloc"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__malloc.apply(null, arguments);
};

var real__emscripten_bind_espeak_VOICE_set_age_1 = asm["_emscripten_bind_espeak_VOICE_set_age_1"]; asm["_emscripten_bind_espeak_VOICE_set_age_1"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__emscripten_bind_espeak_VOICE_set_age_1.apply(null, arguments);
};

var real__emscripten_bind_EspeakWorker_get_voices_1 = asm["_emscripten_bind_EspeakWorker_get_voices_1"]; asm["_emscripten_bind_EspeakWorker_get_voices_1"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__emscripten_bind_EspeakWorker_get_voices_1.apply(null, arguments);
};

var real__emscripten_bind_espeak_VOICE_get_gender_0 = asm["_emscripten_bind_espeak_VOICE_get_gender_0"]; asm["_emscripten_bind_espeak_VOICE_get_gender_0"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__emscripten_bind_espeak_VOICE_get_gender_0.apply(null, arguments);
};

var real__emscripten_bind_espeak_VOICE_set_score_1 = asm["_emscripten_bind_espeak_VOICE_set_score_1"]; asm["_emscripten_bind_espeak_VOICE_set_score_1"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__emscripten_bind_espeak_VOICE_set_score_1.apply(null, arguments);
};

var real____muldi3 = asm["___muldi3"]; asm["___muldi3"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real____muldi3.apply(null, arguments);
};

var real__emscripten_enum_espeak_EVENT_TYPE_espeakEVENT_MARK = asm["_emscripten_enum_espeak_EVENT_TYPE_espeakEVENT_MARK"]; asm["_emscripten_enum_espeak_EVENT_TYPE_espeakEVENT_MARK"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__emscripten_enum_espeak_EVENT_TYPE_espeakEVENT_MARK.apply(null, arguments);
};

var real__emscripten_enum_espeak_EVENT_TYPE_espeakEVENT_PHONEME = asm["_emscripten_enum_espeak_EVENT_TYPE_espeakEVENT_PHONEME"]; asm["_emscripten_enum_espeak_EVENT_TYPE_espeakEVENT_PHONEME"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__emscripten_enum_espeak_EVENT_TYPE_espeakEVENT_PHONEME.apply(null, arguments);
};
var stackSave = Module["stackSave"] = asm["stackSave"];
var _emscripten_bind_espeak_VOICE_get_xx1_0 = Module["_emscripten_bind_espeak_VOICE_get_xx1_0"] = asm["_emscripten_bind_espeak_VOICE_get_xx1_0"];
var _emscripten_bind_espeak_VOICE_set_spare_1 = Module["_emscripten_bind_espeak_VOICE_set_spare_1"] = asm["_emscripten_bind_espeak_VOICE_set_spare_1"];
var _emscripten_bind_EspeakWorker_getSizeOfEventStruct__0 = Module["_emscripten_bind_EspeakWorker_getSizeOfEventStruct__0"] = asm["_emscripten_bind_EspeakWorker_getSizeOfEventStruct__0"];
var getTempRet0 = Module["getTempRet0"] = asm["getTempRet0"];
var ___udivdi3 = Module["___udivdi3"] = asm["___udivdi3"];
var _bitshift64Lshr = Module["_bitshift64Lshr"] = asm["_bitshift64Lshr"];
var setThrew = Module["setThrew"] = asm["setThrew"];
var _emscripten_bind_espeak_VOICE___destroy___0 = Module["_emscripten_bind_espeak_VOICE___destroy___0"] = asm["_emscripten_bind_espeak_VOICE___destroy___0"];
var _emscripten_bind_espeak_VOICE_set_variant_1 = Module["_emscripten_bind_espeak_VOICE_set_variant_1"] = asm["_emscripten_bind_espeak_VOICE_set_variant_1"];
var _emscripten_bind_espeak_VOICE_get_score_0 = Module["_emscripten_bind_espeak_VOICE_get_score_0"] = asm["_emscripten_bind_espeak_VOICE_get_score_0"];
var _emscripten_bind_espeak_EVENT_get_audio_position_0 = Module["_emscripten_bind_espeak_EVENT_get_audio_position_0"] = asm["_emscripten_bind_espeak_EVENT_get_audio_position_0"];
var _emscripten_bind_espeak_EVENT_get_sample_0 = Module["_emscripten_bind_espeak_EVENT_get_sample_0"] = asm["_emscripten_bind_espeak_EVENT_get_sample_0"];
var _emscripten_bind_EspeakWorker_set_pitch_1 = Module["_emscripten_bind_EspeakWorker_set_pitch_1"] = asm["_emscripten_bind_EspeakWorker_set_pitch_1"];
var _emscripten_bind_espeak_VOICE_set_gender_1 = Module["_emscripten_bind_espeak_VOICE_set_gender_1"] = asm["_emscripten_bind_espeak_VOICE_set_gender_1"];
var _emscripten_enum_espeak_EVENT_TYPE_espeakEVENT_SENTENCE = Module["_emscripten_enum_espeak_EVENT_TYPE_espeakEVENT_SENTENCE"] = asm["_emscripten_enum_espeak_EVENT_TYPE_espeakEVENT_SENTENCE"];
var _fflush = Module["_fflush"] = asm["_fflush"];
var _emscripten_bind_espeak_VOICE_get_name_0 = Module["_emscripten_bind_espeak_VOICE_get_name_0"] = asm["_emscripten_bind_espeak_VOICE_get_name_0"];
var _emscripten_enum_espeak_EVENT_TYPE_espeakEVENT_PLAY = Module["_emscripten_enum_espeak_EVENT_TYPE_espeakEVENT_PLAY"] = asm["_emscripten_enum_espeak_EVENT_TYPE_espeakEVENT_PLAY"];
var _emscripten_bind_EspeakWorker___destroy___0 = Module["_emscripten_bind_EspeakWorker___destroy___0"] = asm["_emscripten_bind_EspeakWorker___destroy___0"];
var _emscripten_bind_VoidPtr___destroy___0 = Module["_emscripten_bind_VoidPtr___destroy___0"] = asm["_emscripten_bind_VoidPtr___destroy___0"];
var _emscripten_bind_espeak_VOICE_set_identifier_1 = Module["_emscripten_bind_espeak_VOICE_set_identifier_1"] = asm["_emscripten_bind_espeak_VOICE_set_identifier_1"];
var _sbrk = Module["_sbrk"] = asm["_sbrk"];
var _emscripten_enum_espeak_EVENT_TYPE_espeakEVENT_WORD = Module["_emscripten_enum_espeak_EVENT_TYPE_espeakEVENT_WORD"] = asm["_emscripten_enum_espeak_EVENT_TYPE_espeakEVENT_WORD"];
var _emscripten_bind_EspeakWorker_get_samplerate_0 = Module["_emscripten_bind_EspeakWorker_get_samplerate_0"] = asm["_emscripten_bind_EspeakWorker_get_samplerate_0"];
var _memcpy = Module["_memcpy"] = asm["_memcpy"];
var _llvm_bswap_i32 = Module["_llvm_bswap_i32"] = asm["_llvm_bswap_i32"];
var _emscripten_bind_EspeakWorker_synth__2 = Module["_emscripten_bind_EspeakWorker_synth__2"] = asm["_emscripten_bind_EspeakWorker_synth__2"];
var _emscripten_bind_espeak_EVENT_get_length_0 = Module["_emscripten_bind_espeak_EVENT_get_length_0"] = asm["_emscripten_bind_espeak_EVENT_get_length_0"];
var _emscripten_bind_EspeakWorker_EspeakWorker_0 = Module["_emscripten_bind_EspeakWorker_EspeakWorker_0"] = asm["_emscripten_bind_EspeakWorker_EspeakWorker_0"];
var _emscripten_bind_espeak_EVENT_get_type_0 = Module["_emscripten_bind_espeak_EVENT_get_type_0"] = asm["_emscripten_bind_espeak_EVENT_get_type_0"];
var _bitshift64Shl = Module["_bitshift64Shl"] = asm["_bitshift64Shl"];
var ___uremdi3 = Module["___uremdi3"] = asm["___uremdi3"];
var _emscripten_bind_espeak_EVENT_get_unique_identifier_0 = Module["_emscripten_bind_espeak_EVENT_get_unique_identifier_0"] = asm["_emscripten_bind_espeak_EVENT_get_unique_identifier_0"];
var _emscripten_bind_espeak_EVENT___destroy___0 = Module["_emscripten_bind_espeak_EVENT___destroy___0"] = asm["_emscripten_bind_espeak_EVENT___destroy___0"];
var _llvm_cttz_i32 = Module["_llvm_cttz_i32"] = asm["_llvm_cttz_i32"];
var _i64Subtract = Module["_i64Subtract"] = asm["_i64Subtract"];
var _emscripten_bind_espeak_VOICE_get_variant_0 = Module["_emscripten_bind_espeak_VOICE_get_variant_0"] = asm["_emscripten_bind_espeak_VOICE_get_variant_0"];
var ___udivmoddi4 = Module["___udivmoddi4"] = asm["___udivmoddi4"];
var setTempRet0 = Module["setTempRet0"] = asm["setTempRet0"];
var _emscripten_enum_espeak_EVENT_TYPE_espeakEVENT_SAMPLERATE = Module["_emscripten_enum_espeak_EVENT_TYPE_espeakEVENT_SAMPLERATE"] = asm["_emscripten_enum_espeak_EVENT_TYPE_espeakEVENT_SAMPLERATE"];
var _i64Add = Module["_i64Add"] = asm["_i64Add"];
var _emscripten_enum_espeak_EVENT_TYPE_espeakEVENT_LIST_TERMINATED = Module["_emscripten_enum_espeak_EVENT_TYPE_espeakEVENT_LIST_TERMINATED"] = asm["_emscripten_enum_espeak_EVENT_TYPE_espeakEVENT_LIST_TERMINATED"];
var _emscripten_bind_EspeakWorker_setVoice_3 = Module["_emscripten_bind_EspeakWorker_setVoice_3"] = asm["_emscripten_bind_EspeakWorker_setVoice_3"];
var _emscripten_bind_EspeakWorker_setVoice_2 = Module["_emscripten_bind_EspeakWorker_setVoice_2"] = asm["_emscripten_bind_EspeakWorker_setVoice_2"];
var _emscripten_bind_EspeakWorker_setVoice_5 = Module["_emscripten_bind_EspeakWorker_setVoice_5"] = asm["_emscripten_bind_EspeakWorker_setVoice_5"];
var _emscripten_bind_EspeakWorker_setVoice_4 = Module["_emscripten_bind_EspeakWorker_setVoice_4"] = asm["_emscripten_bind_EspeakWorker_setVoice_4"];
var _emscripten_bind_espeak_VOICE_set_xx1_1 = Module["_emscripten_bind_espeak_VOICE_set_xx1_1"] = asm["_emscripten_bind_espeak_VOICE_set_xx1_1"];
var _emscripten_bind_espeak_VOICE_get_identifier_0 = Module["_emscripten_bind_espeak_VOICE_get_identifier_0"] = asm["_emscripten_bind_espeak_VOICE_get_identifier_0"];
var _emscripten_bind_espeak_VOICE_set_name_1 = Module["_emscripten_bind_espeak_VOICE_set_name_1"] = asm["_emscripten_bind_espeak_VOICE_set_name_1"];
var _emscripten_get_global_libc = Module["_emscripten_get_global_libc"] = asm["_emscripten_get_global_libc"];
var _emscripten_bind_espeak_VOICE_get_age_0 = Module["_emscripten_bind_espeak_VOICE_get_age_0"] = asm["_emscripten_bind_espeak_VOICE_get_age_0"];
var _emscripten_bind_espeak_VOICE_get_spare_0 = Module["_emscripten_bind_espeak_VOICE_get_spare_0"] = asm["_emscripten_bind_espeak_VOICE_get_spare_0"];
var _emscripten_bind_EspeakWorker_get_pitch_0 = Module["_emscripten_bind_EspeakWorker_get_pitch_0"] = asm["_emscripten_bind_EspeakWorker_get_pitch_0"];
var stackAlloc = Module["stackAlloc"] = asm["stackAlloc"];
var _emscripten_bind_EspeakWorker_set_rate_1 = Module["_emscripten_bind_EspeakWorker_set_rate_1"] = asm["_emscripten_bind_EspeakWorker_set_rate_1"];
var _emscripten_bind_EspeakWorker_set_voices_2 = Module["_emscripten_bind_EspeakWorker_set_voices_2"] = asm["_emscripten_bind_EspeakWorker_set_voices_2"];
var ___errno_location = Module["___errno_location"] = asm["___errno_location"];
var ___muldsi3 = Module["___muldsi3"] = asm["___muldsi3"];
var _emscripten_bind_espeak_VOICE_get_languages_1 = Module["_emscripten_bind_espeak_VOICE_get_languages_1"] = asm["_emscripten_bind_espeak_VOICE_get_languages_1"];
var _free = Module["_free"] = asm["_free"];
var runPostSets = Module["runPostSets"] = asm["runPostSets"];
var _emscripten_bind_espeak_EVENT_get_text_position_0 = Module["_emscripten_bind_espeak_EVENT_get_text_position_0"] = asm["_emscripten_bind_espeak_EVENT_get_text_position_0"];
var _emscripten_bind_espeak_EVENT_get_user_data_0 = Module["_emscripten_bind_espeak_EVENT_get_user_data_0"] = asm["_emscripten_bind_espeak_EVENT_get_user_data_0"];
var _memmove = Module["_memmove"] = asm["_memmove"];
var _emscripten_bind_EspeakWorker_get_rate_0 = Module["_emscripten_bind_EspeakWorker_get_rate_0"] = asm["_emscripten_bind_EspeakWorker_get_rate_0"];
var _emscripten_enum_espeak_EVENT_TYPE_espeakEVENT_END = Module["_emscripten_enum_espeak_EVENT_TYPE_espeakEVENT_END"] = asm["_emscripten_enum_espeak_EVENT_TYPE_espeakEVENT_END"];
var _emscripten_enum_espeak_EVENT_TYPE_espeakEVENT_MSG_TERMINATED = Module["_emscripten_enum_espeak_EVENT_TYPE_espeakEVENT_MSG_TERMINATED"] = asm["_emscripten_enum_espeak_EVENT_TYPE_espeakEVENT_MSG_TERMINATED"];
var stackRestore = Module["stackRestore"] = asm["stackRestore"];
var establishStackSpace = Module["establishStackSpace"] = asm["establishStackSpace"];
var _malloc = Module["_malloc"] = asm["_malloc"];
var _emscripten_bind_espeak_VOICE_set_age_1 = Module["_emscripten_bind_espeak_VOICE_set_age_1"] = asm["_emscripten_bind_espeak_VOICE_set_age_1"];
var _emscripten_bind_EspeakWorker_get_voices_1 = Module["_emscripten_bind_EspeakWorker_get_voices_1"] = asm["_emscripten_bind_EspeakWorker_get_voices_1"];
var _emscripten_bind_espeak_VOICE_get_gender_0 = Module["_emscripten_bind_espeak_VOICE_get_gender_0"] = asm["_emscripten_bind_espeak_VOICE_get_gender_0"];
var _emscripten_bind_espeak_VOICE_set_score_1 = Module["_emscripten_bind_espeak_VOICE_set_score_1"] = asm["_emscripten_bind_espeak_VOICE_set_score_1"];
var ___muldi3 = Module["___muldi3"] = asm["___muldi3"];
var _emscripten_enum_espeak_EVENT_TYPE_espeakEVENT_MARK = Module["_emscripten_enum_espeak_EVENT_TYPE_espeakEVENT_MARK"] = asm["_emscripten_enum_espeak_EVENT_TYPE_espeakEVENT_MARK"];
var _memset = Module["_memset"] = asm["_memset"];
var _emscripten_enum_espeak_EVENT_TYPE_espeakEVENT_PHONEME = Module["_emscripten_enum_espeak_EVENT_TYPE_espeakEVENT_PHONEME"] = asm["_emscripten_enum_espeak_EVENT_TYPE_espeakEVENT_PHONEME"];
var dynCall_iiii = Module["dynCall_iiii"] = asm["dynCall_iiii"];
var dynCall_viiiii = Module["dynCall_viiiii"] = asm["dynCall_viiiii"];
var dynCall_vi = Module["dynCall_vi"] = asm["dynCall_vi"];
var dynCall_ii = Module["dynCall_ii"] = asm["dynCall_ii"];
var dynCall_v = Module["dynCall_v"] = asm["dynCall_v"];
var dynCall_viiiiii = Module["dynCall_viiiiii"] = asm["dynCall_viiiiii"];
var dynCall_iii = Module["dynCall_iii"] = asm["dynCall_iii"];
var dynCall_viiii = Module["dynCall_viiii"] = asm["dynCall_viiii"];
;

Runtime.stackAlloc = Module['stackAlloc'];
Runtime.stackSave = Module['stackSave'];
Runtime.stackRestore = Module['stackRestore'];
Runtime.establishStackSpace = Module['establishStackSpace'];

Runtime.setTempRet0 = Module['setTempRet0'];
Runtime.getTempRet0 = Module['getTempRet0'];



// === Auto-generated postamble setup entry stuff ===

Module['asm'] = asm;





function ExitStatus(status) {
  this.name = "ExitStatus";
  this.message = "Program terminated with exit(" + status + ")";
  this.status = status;
};
ExitStatus.prototype = new Error();
ExitStatus.prototype.constructor = ExitStatus;

var initialStackTop;
var preloadStartTime = null;
var calledMain = false;

dependenciesFulfilled = function runCaller() {
  // If run has never been called, and we should call run (INVOKE_RUN is true, and Module.noInitialRun is not false)
  if (!Module['calledRun']) run();
  if (!Module['calledRun']) dependenciesFulfilled = runCaller; // try this again later, after new deps are fulfilled
}

Module['callMain'] = Module.callMain = function callMain(args) {
  assert(runDependencies == 0, 'cannot call main when async dependencies remain! (listen on __ATMAIN__)');
  assert(__ATPRERUN__.length == 0, 'cannot call main when preRun functions remain to be called');

  args = args || [];

  ensureInitRuntime();

  var argc = args.length+1;
  function pad() {
    for (var i = 0; i < 4-1; i++) {
      argv.push(0);
    }
  }
  var argv = [allocate(intArrayFromString(Module['thisProgram']), 'i8', ALLOC_NORMAL) ];
  pad();
  for (var i = 0; i < argc-1; i = i + 1) {
    argv.push(allocate(intArrayFromString(args[i]), 'i8', ALLOC_NORMAL));
    pad();
  }
  argv.push(0);
  argv = allocate(argv, 'i32', ALLOC_NORMAL);


  try {

    var ret = Module['_main'](argc, argv, 0);


    // if we're not running an evented main loop, it's time to exit
    exit(ret, /* implicit = */ true);
  }
  catch(e) {
    if (e instanceof ExitStatus) {
      // exit() throws this once it's done to make sure execution
      // has been stopped completely
      return;
    } else if (e == 'SimulateInfiniteLoop') {
      // running an evented main loop, don't immediately exit
      Module['noExitRuntime'] = true;
      return;
    } else {
      if (e && typeof e === 'object' && e.stack) Module.printErr('exception thrown: ' + [e, e.stack]);
      throw e;
    }
  } finally {
    calledMain = true;
  }
}




function run(args) {
  args = args || Module['arguments'];

  if (preloadStartTime === null) preloadStartTime = Date.now();

  if (runDependencies > 0) {
    Module.printErr('run() called, but dependencies remain, so not running');
    return;
  }

  writeStackCookie();

  preRun();

  if (runDependencies > 0) return; // a preRun added a dependency, run will be called later
  if (Module['calledRun']) return; // run may have just been called through dependencies being fulfilled just in this very frame

  function doRun() {
    if (Module['calledRun']) return; // run may have just been called while the async setStatus time below was happening
    Module['calledRun'] = true;

    if (ABORT) return;

    ensureInitRuntime();

    preMain();

    if (ENVIRONMENT_IS_WEB && preloadStartTime !== null) {
      Module.printErr('pre-main prep time: ' + (Date.now() - preloadStartTime) + ' ms');
    }

    if (Module['onRuntimeInitialized']) Module['onRuntimeInitialized']();

    if (Module['_main'] && shouldRunNow) Module['callMain'](args);

    postRun();
  }

  if (Module['setStatus']) {
    Module['setStatus']('Running...');
    setTimeout(function() {
      setTimeout(function() {
        Module['setStatus']('');
      }, 1);
      doRun();
    }, 1);
  } else {
    doRun();
  }
  checkStackCookie();
}
Module['run'] = Module.run = run;

function exit(status, implicit) {
  if (implicit && Module['noExitRuntime']) {
    Module.printErr('exit(' + status + ') implicitly called by end of main(), but noExitRuntime, so not exiting the runtime (you can use emscripten_force_exit, if you want to force a true shutdown)');
    return;
  }

  if (Module['noExitRuntime']) {
    Module.printErr('exit(' + status + ') called, but noExitRuntime, so halting execution but not exiting the runtime or preventing further async execution (you can use emscripten_force_exit, if you want to force a true shutdown)');
  } else {

    ABORT = true;
    EXITSTATUS = status;
    STACKTOP = initialStackTop;

    exitRuntime();

    if (Module['onExit']) Module['onExit'](status);
  }

  if (ENVIRONMENT_IS_NODE) {
    process['exit'](status);
  } else if (ENVIRONMENT_IS_SHELL && typeof quit === 'function') {
    quit(status);
  }
  // if we reach here, we must throw an exception to halt the current execution
  throw new ExitStatus(status);
}
Module['exit'] = Module.exit = exit;

var abortDecorators = [];

function abort(what) {
  if (what !== undefined) {
    Module.print(what);
    Module.printErr(what);
    what = JSON.stringify(what)
  } else {
    what = '';
  }

  ABORT = true;
  EXITSTATUS = 1;

  var extra = '';

  var output = 'abort(' + what + ') at ' + stackTrace() + extra;
  if (abortDecorators) {
    abortDecorators.forEach(function(decorator) {
      output = decorator(output, what);
    });
  }
  throw output;
}
Module['abort'] = Module.abort = abort;

// {{PRE_RUN_ADDITIONS}}

if (Module['preInit']) {
  if (typeof Module['preInit'] == 'function') Module['preInit'] = [Module['preInit']];
  while (Module['preInit'].length > 0) {
    Module['preInit'].pop()();
  }
}

// shouldRunNow refers to calling main(), not run().
var shouldRunNow = true;
if (Module['noInitialRun']) {
  shouldRunNow = false;
}


run();

// {{POST_RUN_ADDITIONS}}





// {{MODULE_ADDITIONS}}




// Bindings utilities

function WrapperObject() {
}
WrapperObject.prototype = Object.create(WrapperObject.prototype);
WrapperObject.prototype.constructor = WrapperObject;
WrapperObject.prototype.__class__ = WrapperObject;
WrapperObject.__cache__ = {};
Module['WrapperObject'] = WrapperObject;

function getCache(__class__) {
  return (__class__ || WrapperObject).__cache__;
}
Module['getCache'] = getCache;

function wrapPointer(ptr, __class__) {
  var cache = getCache(__class__);
  var ret = cache[ptr];
  if (ret) return ret;
  ret = Object.create((__class__ || WrapperObject).prototype);
  ret.ptr = ptr;
  return cache[ptr] = ret;
}
Module['wrapPointer'] = wrapPointer;

function castObject(obj, __class__) {
  return wrapPointer(obj.ptr, __class__);
}
Module['castObject'] = castObject;

Module['NULL'] = wrapPointer(0);

function destroy(obj) {
  if (!obj['__destroy__']) throw 'Error: Cannot destroy object. (Did you create it yourself?)';
  obj['__destroy__']();
  // Remove from cache, so the object can be GC'd and refs added onto it released
  delete getCache(obj.__class__)[obj.ptr];
}
Module['destroy'] = destroy;

function compare(obj1, obj2) {
  return obj1.ptr === obj2.ptr;
}
Module['compare'] = compare;

function getPointer(obj) {
  return obj.ptr;
}
Module['getPointer'] = getPointer;

function getClass(obj) {
  return obj.__class__;
}
Module['getClass'] = getClass;

// Converts big (string or array) values into a C-style storage, in temporary space

var ensureCache = {
  buffer: 0,  // the main buffer of temporary storage
  size: 0,   // the size of buffer
  pos: 0,    // the next free offset in buffer
  temps: [], // extra allocations
  needed: 0, // the total size we need next time

  prepare: function() {
    if (ensureCache.needed) {
      // clear the temps
      for (var i = 0; i < ensureCache.temps.length; i++) {
        Module['_free'](ensureCache.temps[i]);
      }
      ensureCache.temps.length = 0;
      // prepare to allocate a bigger buffer
      Module['_free'](ensureCache.buffer);
      ensureCache.buffer = 0;
      ensureCache.size += ensureCache.needed;
      // clean up
      ensureCache.needed = 0;
    }
    if (!ensureCache.buffer) { // happens first time, or when we need to grow
      ensureCache.size += 128; // heuristic, avoid many small grow events
      ensureCache.buffer = Module['_malloc'](ensureCache.size);
      assert(ensureCache.buffer);
    }
    ensureCache.pos = 0;
  },
  alloc: function(array, view) {
    assert(ensureCache.buffer);
    var bytes = view.BYTES_PER_ELEMENT;
    var len = array.length * bytes;
    len = (len + 7) & -8; // keep things aligned to 8 byte boundaries
    var ret;
    if (ensureCache.pos + len >= ensureCache.size) {
      // we failed to allocate in the buffer, ensureCache time around :(
      assert(len > 0); // null terminator, at least
      ensureCache.needed += len;
      ret = Module['_malloc'](len);
      ensureCache.temps.push(ret);
    } else {
      // we can allocate in the buffer
      ret = ensureCache.buffer + ensureCache.pos;
      ensureCache.pos += len;
    }
    var retShifted = ret;
    switch (bytes) {
      case 2: retShifted >>= 1; break;
      case 4: retShifted >>= 2; break;
      case 8: retShifted >>= 3; break;
    }
    for (var i = 0; i < array.length; i++) {
      view[retShifted + i] = array[i];
    }
    return ret;
  },
};

function ensureString(value) {
  if (typeof value === 'string') return ensureCache.alloc(intArrayFromString(value), HEAP8);
  return value;
}
function ensureInt8(value) {
  if (typeof value === 'object') return ensureCache.alloc(value, HEAP8);
  return value;
}
function ensureInt16(value) {
  if (typeof value === 'object') return ensureCache.alloc(value, HEAP16);
  return value;
}
function ensureInt32(value) {
  if (typeof value === 'object') return ensureCache.alloc(value, HEAP32);
  return value;
}
function ensureFloat32(value) {
  if (typeof value === 'object') return ensureCache.alloc(value, HEAPF32);
  return value;
}
function ensureFloat64(value) {
  if (typeof value === 'object') return ensureCache.alloc(value, HEAPF64);
  return value;
}


// espeak_VOICE
function espeak_VOICE() { throw "cannot construct a espeak_VOICE, no constructor in IDL" }
espeak_VOICE.prototype = Object.create(WrapperObject.prototype);
espeak_VOICE.prototype.constructor = espeak_VOICE;
espeak_VOICE.prototype.__class__ = espeak_VOICE;
espeak_VOICE.__cache__ = {};
Module['espeak_VOICE'] = espeak_VOICE;

  espeak_VOICE.prototype['get_name'] = espeak_VOICE.prototype.get_name = function() {
  var self = this.ptr;
  return Pointer_stringify(_emscripten_bind_espeak_VOICE_get_name_0(self));
};
    espeak_VOICE.prototype['set_name'] = espeak_VOICE.prototype.set_name = function(arg0) {
  var self = this.ptr;
  ensureCache.prepare();
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  _emscripten_bind_espeak_VOICE_set_name_1(self, arg0);
};
  espeak_VOICE.prototype['get_languages'] = espeak_VOICE.prototype.get_languages = function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  return _emscripten_bind_espeak_VOICE_get_languages_1(self, arg0);
};
  espeak_VOICE.prototype['get_identifier'] = espeak_VOICE.prototype.get_identifier = function() {
  var self = this.ptr;
  return Pointer_stringify(_emscripten_bind_espeak_VOICE_get_identifier_0(self));
};
    espeak_VOICE.prototype['set_identifier'] = espeak_VOICE.prototype.set_identifier = function(arg0) {
  var self = this.ptr;
  ensureCache.prepare();
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  _emscripten_bind_espeak_VOICE_set_identifier_1(self, arg0);
};
  espeak_VOICE.prototype['get_gender'] = espeak_VOICE.prototype.get_gender = function() {
  var self = this.ptr;
  return _emscripten_bind_espeak_VOICE_get_gender_0(self);
};
    espeak_VOICE.prototype['set_gender'] = espeak_VOICE.prototype.set_gender = function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  _emscripten_bind_espeak_VOICE_set_gender_1(self, arg0);
};
  espeak_VOICE.prototype['get_age'] = espeak_VOICE.prototype.get_age = function() {
  var self = this.ptr;
  return _emscripten_bind_espeak_VOICE_get_age_0(self);
};
    espeak_VOICE.prototype['set_age'] = espeak_VOICE.prototype.set_age = function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  _emscripten_bind_espeak_VOICE_set_age_1(self, arg0);
};
  espeak_VOICE.prototype['get_variant'] = espeak_VOICE.prototype.get_variant = function() {
  var self = this.ptr;
  return _emscripten_bind_espeak_VOICE_get_variant_0(self);
};
    espeak_VOICE.prototype['set_variant'] = espeak_VOICE.prototype.set_variant = function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  _emscripten_bind_espeak_VOICE_set_variant_1(self, arg0);
};
  espeak_VOICE.prototype['get_xx1'] = espeak_VOICE.prototype.get_xx1 = function() {
  var self = this.ptr;
  return _emscripten_bind_espeak_VOICE_get_xx1_0(self);
};
    espeak_VOICE.prototype['set_xx1'] = espeak_VOICE.prototype.set_xx1 = function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  _emscripten_bind_espeak_VOICE_set_xx1_1(self, arg0);
};
  espeak_VOICE.prototype['get_score'] = espeak_VOICE.prototype.get_score = function() {
  var self = this.ptr;
  return _emscripten_bind_espeak_VOICE_get_score_0(self);
};
    espeak_VOICE.prototype['set_score'] = espeak_VOICE.prototype.set_score = function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  _emscripten_bind_espeak_VOICE_set_score_1(self, arg0);
};
  espeak_VOICE.prototype['get_spare'] = espeak_VOICE.prototype.get_spare = function() {
  var self = this.ptr;
  return _emscripten_bind_espeak_VOICE_get_spare_0(self);
};
    espeak_VOICE.prototype['set_spare'] = espeak_VOICE.prototype.set_spare = function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  _emscripten_bind_espeak_VOICE_set_spare_1(self, arg0);
};
  espeak_VOICE.prototype['__destroy__'] = espeak_VOICE.prototype.__destroy__ = function() {
  var self = this.ptr;
  _emscripten_bind_espeak_VOICE___destroy___0(self);
};
// VoidPtr
function VoidPtr() { throw "cannot construct a VoidPtr, no constructor in IDL" }
VoidPtr.prototype = Object.create(WrapperObject.prototype);
VoidPtr.prototype.constructor = VoidPtr;
VoidPtr.prototype.__class__ = VoidPtr;
VoidPtr.__cache__ = {};
Module['VoidPtr'] = VoidPtr;

  VoidPtr.prototype['__destroy__'] = VoidPtr.prototype.__destroy__ = function() {
  var self = this.ptr;
  _emscripten_bind_VoidPtr___destroy___0(self);
};
// espeak_EVENT
function espeak_EVENT() { throw "cannot construct a espeak_EVENT, no constructor in IDL" }
espeak_EVENT.prototype = Object.create(WrapperObject.prototype);
espeak_EVENT.prototype.constructor = espeak_EVENT;
espeak_EVENT.prototype.__class__ = espeak_EVENT;
espeak_EVENT.__cache__ = {};
Module['espeak_EVENT'] = espeak_EVENT;

  espeak_EVENT.prototype['get_type'] = espeak_EVENT.prototype.get_type = function() {
  var self = this.ptr;
  return _emscripten_bind_espeak_EVENT_get_type_0(self);
};
  espeak_EVENT.prototype['get_unique_identifier'] = espeak_EVENT.prototype.get_unique_identifier = function() {
  var self = this.ptr;
  return _emscripten_bind_espeak_EVENT_get_unique_identifier_0(self);
};
  espeak_EVENT.prototype['get_text_position'] = espeak_EVENT.prototype.get_text_position = function() {
  var self = this.ptr;
  return _emscripten_bind_espeak_EVENT_get_text_position_0(self);
};
  espeak_EVENT.prototype['get_length'] = espeak_EVENT.prototype.get_length = function() {
  var self = this.ptr;
  return _emscripten_bind_espeak_EVENT_get_length_0(self);
};
  espeak_EVENT.prototype['get_audio_position'] = espeak_EVENT.prototype.get_audio_position = function() {
  var self = this.ptr;
  return _emscripten_bind_espeak_EVENT_get_audio_position_0(self);
};
  espeak_EVENT.prototype['get_sample'] = espeak_EVENT.prototype.get_sample = function() {
  var self = this.ptr;
  return _emscripten_bind_espeak_EVENT_get_sample_0(self);
};
  espeak_EVENT.prototype['get_user_data'] = espeak_EVENT.prototype.get_user_data = function() {
  var self = this.ptr;
  return _emscripten_bind_espeak_EVENT_get_user_data_0(self);
};
  espeak_EVENT.prototype['__destroy__'] = espeak_EVENT.prototype.__destroy__ = function() {
  var self = this.ptr;
  _emscripten_bind_espeak_EVENT___destroy___0(self);
};
// EspeakWorker
function EspeakWorker() {
  this.ptr = _emscripten_bind_EspeakWorker_EspeakWorker_0();
  getCache(EspeakWorker)[this.ptr] = this;
};;
EspeakWorker.prototype = Object.create(WrapperObject.prototype);
EspeakWorker.prototype.constructor = EspeakWorker;
EspeakWorker.prototype.__class__ = EspeakWorker;
EspeakWorker.__cache__ = {};
Module['EspeakWorker'] = EspeakWorker;

EspeakWorker.prototype['synth_'] = EspeakWorker.prototype.synth_ = function(arg0, arg1) {
  var self = this.ptr;
  ensureCache.prepare();
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  if (arg1 && typeof arg1 === 'object') arg1 = arg1.ptr;
  _emscripten_bind_EspeakWorker_synth__2(self, arg0, arg1);
};;

EspeakWorker.prototype['getSizeOfEventStruct_'] = EspeakWorker.prototype.getSizeOfEventStruct_ = function() {
  var self = this.ptr;
  return _emscripten_bind_EspeakWorker_getSizeOfEventStruct__0(self);
};;

EspeakWorker.prototype['setVoice'] = EspeakWorker.prototype.setVoice = function(arg0, arg1, arg2, arg3, arg4) {
  var self = this.ptr;
  ensureCache.prepare();
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  if (arg1 && typeof arg1 === 'object') arg1 = arg1.ptr;
  else arg1 = ensureString(arg1);
  if (arg2 && typeof arg2 === 'object') arg2 = arg2.ptr;
  if (arg3 && typeof arg3 === 'object') arg3 = arg3.ptr;
  if (arg4 && typeof arg4 === 'object') arg4 = arg4.ptr;
  if (arg2 === undefined) { _emscripten_bind_EspeakWorker_setVoice_2(self, arg0, arg1);  return }
  if (arg3 === undefined) { _emscripten_bind_EspeakWorker_setVoice_3(self, arg0, arg1, arg2);  return }
  if (arg4 === undefined) { _emscripten_bind_EspeakWorker_setVoice_4(self, arg0, arg1, arg2, arg3);  return }
  _emscripten_bind_EspeakWorker_setVoice_5(self, arg0, arg1, arg2, arg3, arg4);
};;

  EspeakWorker.prototype['get_voices'] = EspeakWorker.prototype.get_voices = function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  return wrapPointer(_emscripten_bind_EspeakWorker_get_voices_1(self, arg0), espeak_VOICE);
};
    EspeakWorker.prototype['set_voices'] = EspeakWorker.prototype.set_voices = function(arg0, arg1) {
  var self = this.ptr;
  ensureCache.prepare();
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  if (arg1 && typeof arg1 === 'object') arg1 = arg1.ptr;
  _emscripten_bind_EspeakWorker_set_voices_2(self, arg0, arg1);
};
  EspeakWorker.prototype['get_samplerate'] = EspeakWorker.prototype.get_samplerate = function() {
  var self = this.ptr;
  return _emscripten_bind_EspeakWorker_get_samplerate_0(self);
};
  EspeakWorker.prototype['get_rate'] = EspeakWorker.prototype.get_rate = function() {
  var self = this.ptr;
  return _emscripten_bind_EspeakWorker_get_rate_0(self);
};
    EspeakWorker.prototype['set_rate'] = EspeakWorker.prototype.set_rate = function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  _emscripten_bind_EspeakWorker_set_rate_1(self, arg0);
};
  EspeakWorker.prototype['get_pitch'] = EspeakWorker.prototype.get_pitch = function() {
  var self = this.ptr;
  return _emscripten_bind_EspeakWorker_get_pitch_0(self);
};
    EspeakWorker.prototype['set_pitch'] = EspeakWorker.prototype.set_pitch = function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  _emscripten_bind_EspeakWorker_set_pitch_1(self, arg0);
};
  EspeakWorker.prototype['__destroy__'] = EspeakWorker.prototype.__destroy__ = function() {
  var self = this.ptr;
  _emscripten_bind_EspeakWorker___destroy___0(self);
};
(function() {
  function setupEnums() {


    // espeak_EVENT_TYPE

    Module['espeakEVENT_LIST_TERMINATED'] = _emscripten_enum_espeak_EVENT_TYPE_espeakEVENT_LIST_TERMINATED();

    Module['espeakEVENT_WORD'] = _emscripten_enum_espeak_EVENT_TYPE_espeakEVENT_WORD();

    Module['espeakEVENT_SENTENCE'] = _emscripten_enum_espeak_EVENT_TYPE_espeakEVENT_SENTENCE();

    Module['espeakEVENT_MARK'] = _emscripten_enum_espeak_EVENT_TYPE_espeakEVENT_MARK();

    Module['espeakEVENT_PLAY'] = _emscripten_enum_espeak_EVENT_TYPE_espeakEVENT_PLAY();

    Module['espeakEVENT_END'] = _emscripten_enum_espeak_EVENT_TYPE_espeakEVENT_END();

    Module['espeakEVENT_MSG_TERMINATED'] = _emscripten_enum_espeak_EVENT_TYPE_espeakEVENT_MSG_TERMINATED();

    Module['espeakEVENT_PHONEME'] = _emscripten_enum_espeak_EVENT_TYPE_espeakEVENT_PHONEME();

    Module['espeakEVENT_SAMPLERATE'] = _emscripten_enum_espeak_EVENT_TYPE_espeakEVENT_SAMPLERATE();

  }
  if (Module['calledRun']) setupEnums();
  else addOnPreMain(setupEnums);
})();

EspeakWorker.prototype.listVoices = function() {
  var voices = [];
  var i;
  for (var voice = this.get_voices(i = 0); voice.ptr != 0; voice = this.get_voices(++i)) {
    var v = {
      name: voice.get_name(),
      identifier: voice.get_identifier(),
      languages: [],
    }

    var ii = 0;
    var byte = voice.get_languages(ii);

    function nullTerminatedString(offset) {
      var str = '';
      var index = offset;
      var b = voice.get_languages(index++);
      while (b != 0) {
        str += String.fromCharCode(b);
        b = voice.get_languages(index++);
      }

      return str;
    }

    while (byte != 0) {
      var lang = { priority: byte, name: nullTerminatedString(++ii) }
      v.languages.push(lang);
      ii += lang.name.length + 1;
      byte = voice.get_languages(ii);
    }

    voices.push(v);

  }
  return voices;
};

var eventTypes = [
  "list_terminated",
  "word",
  "sentence",
  "mark",
  "play",
  "end",
  "msg_terminated",
  "phoneme",
  "samplerate"
]

EspeakWorker.prototype.synth = function (aText, aCallback) {
  var eventStructSize = this.getSizeOfEventStruct_();
  function cb(ptr, length, events_pointer) {
    var data = new Float32Array(length*2);
    for (var i = 0; i < length; i++) {
      data[i*2] = Math.max(-1, Math.min(1, getValue(ptr + i*2, 'i16') / 32768));
      data[i*2+1] = data[i*2];
    }
    var events = [];
    var ptr = events_pointer;
    for (ev = wrapPointer(ptr, espeak_EVENT);
         ev.get_type() != Module.espeakEVENT_LIST_TERMINATED;
         ev = wrapPointer((ptr += eventStructSize), espeak_EVENT)) {
      events.push({
        type: eventTypes[ev.get_type()],
        text_position: ev.get_text_position(),
        word_length: ev.get_length(),
        audio_position: ev.get_audio_position()
      });
    }
    return aCallback(data, events) ? 1 : 0;
  }

  var fp = Runtime.addFunction(cb);
  this.synth_(aText, fp);
  Runtime.removeFunction(fp);
};

// Make this a worker

if (typeof WorkerGlobalScope !== 'undefined') {
  var espeak;

  Module.postRun.push(function () {
    espeak = new EspeakWorker();
    postMessage('ready');
  });

  onmessage = function(e) {
    if (!espeak) {
      throw "espeak not initialized";
    }
    var args = e.data.args;
    var message = { callback: e.data.callback, done: true };
    if (e.data.method == 'synth') {
      args.push(function(samples, events) {
        postMessage(
          { callback: e.data.callback,
            result: [samples.buffer, events] }, [samples.buffer]);
      });
    }
    message.result = [espeak[e.data.method].apply(espeak, args)];
    if (e.data.callback)
      postMessage(message);
  }
}
